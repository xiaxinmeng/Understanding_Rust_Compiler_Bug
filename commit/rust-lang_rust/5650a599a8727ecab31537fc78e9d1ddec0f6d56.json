{"sha": "5650a599a8727ecab31537fc78e9d1ddec0f6d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTBhNTk5YTg3MjdlY2FiMzE1MzdmYzc4ZTlkMWRkZWMwZjZkNTY=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-02-10T18:39:03Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-02-10T18:39:03Z"}, "message": "New mut_from_ref lint\n\nThis fixes #1507.", "tree": {"sha": "b0bdb24de7f72f4b1de89a4da8b22aee1123cbc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0bdb24de7f72f4b1de89a4da8b22aee1123cbc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5650a599a8727ecab31537fc78e9d1ddec0f6d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5650a599a8727ecab31537fc78e9d1ddec0f6d56", "html_url": "https://github.com/rust-lang/rust/commit/5650a599a8727ecab31537fc78e9d1ddec0f6d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5650a599a8727ecab31537fc78e9d1ddec0f6d56/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a0e52a1ed5077ab587f5524a9ac623cc71b223", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a0e52a1ed5077ab587f5524a9ac623cc71b223", "html_url": "https://github.com/rust-lang/rust/commit/37a0e52a1ed5077ab587f5524a9ac623cc71b223"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "671450a120d3e26cde88ca271529b8993d620c86", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5650a599a8727ecab31537fc78e9d1ddec0f6d56/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5650a599a8727ecab31537fc78e9d1ddec0f6d56/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5650a599a8727ecab31537fc78e9d1ddec0f6d56", "patch": "@@ -1,6 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+* New [`mut_from_ref`] lint\n+\n ## 0.0.114 \u2014 2017-02-08\n * Rustup to rustc 1.17.0-nightly (c49d10207 2017-02-07)\n * Tests are now ui tests (testing the exact output of rustc)\n@@ -369,6 +371,7 @@ All notable changes to this project will be documented in this file.\n [`mixed_case_hex_literals`]: https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals\n [`module_inception`]: https://github.com/Manishearth/rust-clippy/wiki#module_inception\n [`modulo_one`]: https://github.com/Manishearth/rust-clippy/wiki#modulo_one\n+[`mut_from_ref`]: https://github.com/Manishearth/rust-clippy/wiki#mut_from_ref\n [`mut_mut`]: https://github.com/Manishearth/rust-clippy/wiki#mut_mut\n [`mutex_atomic`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic\n [`mutex_integer`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_integer"}, {"sha": "17282a7fc36a97f31e3c2ffa946fca686904fecf", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5650a599a8727ecab31537fc78e9d1ddec0f6d56/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5650a599a8727ecab31537fc78e9d1ddec0f6d56/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5650a599a8727ecab31537fc78e9d1ddec0f6d56", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 186 lints included in this crate:\n+There are 187 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -278,6 +278,7 @@ name\n [mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                     | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n [module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                   | warn    | modules that have the same name as their parent module\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                               | warn    | taking a number modulo 1, which always returns 0\n+[mut_from_ref](https://github.com/Manishearth/rust-clippy/wiki#mut_from_ref)                                           | warn    | fns that create mutable refs from immutable ref args\n [mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                                     | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n [mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                                           | warn    | using a mutex where an atomic value could be used instead\n [mutex_integer](https://github.com/Manishearth/rust-clippy/wiki#mutex_integer)                                         | allow   | using a mutex for an integer type"}, {"sha": "da8b04bdf6f92eb8a0d14904fd9ca7eddde8a188", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5650a599a8727ecab31537fc78e9d1ddec0f6d56/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5650a599a8727ecab31537fc78e9d1ddec0f6d56/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5650a599a8727ecab31537fc78e9d1ddec0f6d56", "patch": "@@ -464,6 +464,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         precedence::PRECEDENCE,\n         print::PRINT_WITH_NEWLINE,\n         ptr::CMP_NULL,\n+        ptr::MUT_FROM_REF,\n         ptr::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,"}, {"sha": "7a7631d9769327890a3caa2c98cfb000624950c4", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5650a599a8727ecab31537fc78e9d1ddec0f6d56/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5650a599a8727ecab31537fc78e9d1ddec0f6d56/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=5650a599a8727ecab31537fc78e9d1ddec0f6d56", "patch": "@@ -44,13 +44,30 @@ declare_lint! {\n     \"comparing a pointer to a null pointer, suggesting to use `.is_null()` instead.\"\n }\n \n+/// **What it does:** This lint checks for functions that take immutable refs and return\n+/// mutable ones.\n+///\n+/// **Why is this bad?** This is trivially unsound, as one can create two mutable refs\n+/// from the same source.\n+///\n+/// **Known problems:** This lint will overlook functions where input and output lifetimes differ\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(&Foo) -> &mut Bar { .. }\n+/// ```\n+declare_lint! {\n+    pub MUT_FROM_REF,\n+    Warn,\n+    \"fns that create mutable refs from immutable ref args\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct PointerPass;\n \n impl LintPass for PointerPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PTR_ARG, CMP_NULL)\n+        lint_array!(PTR_ARG, CMP_NULL, MUT_FROM_REF)\n     }\n }\n \n@@ -111,6 +128,28 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n             }\n         }\n     }\n+\n+    if let FunctionRetTy::Return(ref ty) = decl.output {\n+        if let Some((out, MutMutable)) = get_rptr_lm(ty) {\n+            if let Some(MutImmutable) = decl.inputs.iter()\n+                     .filter_map(|ty| get_rptr_lm(ty))\n+                     .filter(|&(lt, _)| lt.name == out.name)\n+                     .fold(None, |x, (_, m)| match (x, m) {\n+                        (Some(MutMutable), _) |\n+                        (_, MutMutable) => Some(MutMutable),\n+                        (_, m) => Some(m),\n+                     }) {\n+                span_lint(cx,\n+                          MUT_FROM_REF,\n+                          ty.span,\n+                          \"this function takes an immutable ref to return a mutable one:\");\n+            }\n+        }\n+    }\n+}\n+\n+fn get_rptr_lm(ty: &Ty) -> Option<(&Lifetime, Mutability)> {\n+    if let Ty_::TyRptr(ref lt, ref m) = ty.node { Some((lt, m.mutbl)) } else { None }\n }\n \n fn is_null_path(expr: &Expr) -> bool {"}, {"sha": "09cc8a6061cf76330e9c0b3ff42956e22f28c0a2", "filename": "tests/ui/mut_from_ref.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5650a599a8727ecab31537fc78e9d1ddec0f6d56/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5650a599a8727ecab31537fc78e9d1ddec0f6d56/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=5650a599a8727ecab31537fc78e9d1ddec0f6d56", "patch": "@@ -0,0 +1,40 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused)]\n+#![deny(mut_from_ref)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+        unimplemented!()\n+    }\n+}\n+\n+trait Ouch {\n+    fn ouch(x: &Foo) -> &mut Foo;\n+}\n+\n+impl Ouch for Foo {\n+    fn ouch(x: &Foo) -> &mut Foo {\n+        unimplemented!()\n+    }\n+}\n+\n+fn fail(x: &u32) -> &mut u16 {\n+    unimplemented!()\n+}\n+\n+// this is OK, because the result borrows y\n+fn works<'a>(x: &u32, y: &'a mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+// this is also OK, because the result could borrow y\n+fn also_works<'a>(x: &'a u32, y: &'a mut u32) -> &'a mut u32 {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    //TODO\n+}"}, {"sha": "23fc20d9a4baf81c32550f5c2d2d28a7f3da430c", "filename": "tests/ui/mut_from_ref.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5650a599a8727ecab31537fc78e9d1ddec0f6d56/tests%2Fui%2Fmut_from_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5650a599a8727ecab31537fc78e9d1ddec0f6d56/tests%2Fui%2Fmut_from_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.stderr?ref=5650a599a8727ecab31537fc78e9d1ddec0f6d56", "patch": "@@ -0,0 +1,26 @@\n+error: this function takes an immutable ref to return a mutable one:\n+ --> $DIR/mut_from_ref.rs:9:39\n+  |\n+9 |     fn this_wont_hurt_a_bit(&self) -> &mut Foo {\n+  |                                       ^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/mut_from_ref.rs:4:9\n+  |\n+4 | #![deny(mut_from_ref)]\n+  |         ^^^^^^^^^^^^\n+\n+error: this function takes an immutable ref to return a mutable one:\n+  --> $DIR/mut_from_ref.rs:15:25\n+   |\n+15 |     fn ouch(x: &Foo) -> &mut Foo;\n+   |                         ^^^^^^^^\n+\n+error: this function takes an immutable ref to return a mutable one:\n+  --> $DIR/mut_from_ref.rs:24:21\n+   |\n+24 | fn fail(x: &u32) -> &mut u16 {\n+   |                     ^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}