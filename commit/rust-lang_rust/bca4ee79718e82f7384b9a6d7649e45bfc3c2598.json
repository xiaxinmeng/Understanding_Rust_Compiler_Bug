{"sha": "bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "node_id": "C_kwDOAAsO6NoAKGJjYTRlZTc5NzE4ZTgyZjczODRiOWE2ZDc2NDllNDViZmMzYzI1OTg", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-19T16:35:52Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-03-01T09:40:07Z"}, "message": "Implement internal lint for MSRV lints\n\nThis internal lint checks if the `extract_msrv_attrs!` macro is used if\na lint has a MSRV. If not, it suggests to add this attribute to the lint\npass implementation.", "tree": {"sha": "04681b239905f0b53c3b1c9c19e23ca7cbefc2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04681b239905f0b53c3b1c9c19e23ca7cbefc2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmId6fgACgkQHKDfKvWd\naKUmqxAAoApQ1daBOcah6DLoHQ4DdjmaLMcP/eQouvJThGFLiGqeGpOomNKchB0K\nTIiN68RRbfCTKwcOa2fGpP5E3q1CGrE8Vd3sisw8vhsYUOvSY3j/yVEcSYElDdLG\nVrQz4b0lzrdUiVsdwRFMt0u5NredCiEuFwtfB5eAE9LgOlRE1KWuQrY1Li5hQm6H\n1Dri0M3xPtZ9uzuyh6Q6hXmJO6jMD8NuP24s6HIQzpuDBzu1ibDaGlff7dltHQ6P\n0n9cv6r1Fv/B9LtTX6EgWePWHUH/R5x2dVDezJYOwCGh+IcZFpF5frhMCvhAXluH\nbxjyAm2G2Y9GqtaVdKYL4t/KeC/EheUkAj+hOpbm5EQbAFOFmMRvZG74tuHOjshh\nYMYTQcrADh89o2r9vwDYqWLkHSXgCZXbnKShrKU00/h2B3djiyMe0wBMjKwK4l+/\nObRhfWlTGvT1aDoUi/uRu37c0V6RIU++T4N2Idru+DxGocA4Om4qSR9Wq9MNzw/U\nLYfyosJYb79ltabwyTIM2rRHDTkyVgOowICi9IUrLyhNV1jhOoLKOH+7YdItLu6P\nmlCEFtbq5LWCogJIK/nbLN6uPatHqfFsHLu/gyfcS7jQ5upwuvoN0ZILvWaPTVgL\nEAbIjJhXm3/9vjE9fCRqrtfVjCm/jUnowesIjVCP1zSEjHVRgjs=\n=wKB6\n-----END PGP SIGNATURE-----", "payload": "tree 04681b239905f0b53c3b1c9c19e23ca7cbefc2a8\nparent e511476f240dfbb67b9d94a71ea45db9624e1519\nauthor flip1995 <philipp.krones@embecosm.com> 1642610152 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1646127607 +0000\n\nImplement internal lint for MSRV lints\n\nThis internal lint checks if the `extract_msrv_attrs!` macro is used if\na lint has a MSRV. If not, it suggests to add this attribute to the lint\npass implementation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "html_url": "https://github.com/rust-lang/rust/commit/bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e511476f240dfbb67b9d94a71ea45db9624e1519", "url": "https://api.github.com/repos/rust-lang/rust/commits/e511476f240dfbb67b9d94a71ea45db9624e1519", "html_url": "https://github.com/rust-lang/rust/commit/e511476f240dfbb67b9d94a71ea45db9624e1519"}], "stats": {"total": 178, "additions": 177, "deletions": 1}, "files": [{"sha": "4ea704296212c75d289c55179f16a4fb5a0bd338", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -50,6 +50,7 @@ syn = { version = \"1.0\", features = [\"full\"] }\n futures = \"0.3\"\n parking_lot = \"0.11.2\"\n tokio = { version = \"1\", features = [\"io-util\"] }\n+rustc-semver = \"1.1\"\n num_cpus = \"1.13\"\n \n [build-dependencies]"}, {"sha": "4778f4fdfa76c365a40d4d1a325516d86ff8ef6c", "filename": "clippy_lints/src/lib.register_internal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Flib.register_internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Flib.register_internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_internal.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -14,6 +14,7 @@ store.register_group(true, \"clippy::internal\", Some(\"clippy_internal\"), vec![\n     LintId::of(utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n     LintId::of(utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n     LintId::of(utils::internal_lints::MISSING_CLIPPY_VERSION_ATTRIBUTE),\n+    LintId::of(utils::internal_lints::MISSING_MSRV_ATTR_IMPL),\n     LintId::of(utils::internal_lints::OUTER_EXPN_EXPN_DATA),\n     LintId::of(utils::internal_lints::PRODUCE_ICE),\n     LintId::of(utils::internal_lints::UNNECESSARY_SYMBOL_STR),"}, {"sha": "f93371140385de24153cc2db6be6c9b36921906a", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -26,6 +26,8 @@ store.register_lints(&[\n     #[cfg(feature = \"internal\")]\n     utils::internal_lints::MISSING_CLIPPY_VERSION_ATTRIBUTE,\n     #[cfg(feature = \"internal\")]\n+    utils::internal_lints::MISSING_MSRV_ATTR_IMPL,\n+    #[cfg(feature = \"internal\")]\n     utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n     #[cfg(feature = \"internal\")]\n     utils::internal_lints::PRODUCE_ICE,"}, {"sha": "24b67c12f06818473eb0381d683e0912d34bf209", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -505,6 +505,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n         store.register_late_pass(|| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n         store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::MsrvAttrImpl));\n     }\n \n     store.register_late_pass(|| Box::new(utils::author::Author));"}, {"sha": "b3b241392fed5d172d7f2649236feeb0318d352d", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -25,7 +25,7 @@ use rustc_hir::{\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::interpret::ConstValue;\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n@@ -337,6 +337,15 @@ declare_clippy_lint! {\n     \"found clippy lint without `clippy::version` attribute\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check that the `extract_msrv_attr!` macro is used, when a lint has a MSRV.\n+    ///\n+    pub MISSING_MSRV_ATTR_IMPL,\n+    internal,\n+    \"checking if all necessary steps were taken when adding a MSRV to a lint\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -1314,3 +1323,46 @@ fn if_chain_local_span(cx: &LateContext<'_>, local: &Local<'_>, if_chain_span: S\n         span.parent(),\n     )\n }\n+\n+declare_lint_pass!(MsrvAttrImpl => [MISSING_MSRV_ATTR_IMPL]);\n+\n+impl LateLintPass<'_> for MsrvAttrImpl {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n+        if_chain! {\n+            if let hir::ItemKind::Impl(hir::Impl {\n+                of_trait: Some(lint_pass_trait_ref),\n+                self_ty,\n+                items,\n+                ..\n+            }) = &item.kind;\n+            if let Some(lint_pass_trait_def_id) = lint_pass_trait_ref.trait_def_id();\n+            let is_late_pass = match_def_path(cx, lint_pass_trait_def_id, &paths::LATE_LINT_PASS);\n+            if is_late_pass || match_def_path(cx, lint_pass_trait_def_id, &paths::EARLY_LINT_PASS);\n+            let self_ty = hir_ty_to_ty(cx.tcx, self_ty);\n+            if let ty::Adt(self_ty_def, _) = self_ty.kind();\n+            if self_ty_def.is_struct();\n+            if self_ty_def.all_fields().any(|f| {\n+                cx.tcx\n+                    .type_of(f.did)\n+                    .walk()\n+                    .filter(|t| matches!(t.unpack(), GenericArgKind::Type(_)))\n+                    .any(|t| match_type(cx, t.expect_ty(), &paths::RUSTC_VERSION))\n+            });\n+            if !items.iter().any(|item| item.ident.name == sym!(enter_lint_attrs));\n+            then {\n+                let context = if is_late_pass { \"LateContext\" } else { \"EarlyContext\" };\n+                let lint_pass = if is_late_pass { \"LateLintPass\" } else { \"EarlyLintPass\" };\n+                let span = cx.sess().source_map().span_through_char(item.span, '{');\n+                span_lint_and_sugg(\n+                    cx,\n+                    MISSING_MSRV_ATTR_IMPL,\n+                    span,\n+                    &format!(\"`extract_msrv_attr!` macro missing from `{lint_pass}` implementation\"),\n+                    &format!(\"add `extract_msrv_attr!({context})` to the `{lint_pass}` implementation\"),\n+                    format!(\"{}\\n    extract_msrv_attr!({context});\", snippet(cx, span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f56f8d51365a9407e2a36ce6205ac6a1719c789", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -32,6 +32,8 @@ pub const DIR_BUILDER: [&str; 3] = [\"std\", \"fs\", \"DirBuilder\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n #[cfg(feature = \"internal\")]\n pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n+#[cfg(feature = \"internal\")]\n+pub const EARLY_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"EarlyLintPass\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n pub const F64_EPSILON: [&str; 4] = [\"core\", \"f64\", \"<impl f64>\", \"EPSILON\"];\n@@ -67,6 +69,8 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n #[cfg(feature = \"internal\")]\n+pub const LATE_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"LateLintPass\"];\n+#[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n@@ -126,6 +130,8 @@ pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\",\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n+#[cfg(feature = \"internal\")]\n+pub const RUSTC_VERSION: [&str; 2] = [\"rustc_semver\", \"RustcVersion\"];\n pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];"}, {"sha": "fc441e608021088b0dd4296769a25779ec3b4110", "filename": "tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -34,6 +34,7 @@ static TEST_DEPENDENCIES: &[&str] = &[\n     \"syn\",\n     \"tokio\",\n     \"parking_lot\",\n+    \"rustc_semver\",\n ];\n \n // Test dependencies may need an `extern crate` here to ensure that they show up\n@@ -53,6 +54,8 @@ extern crate parking_lot;\n #[allow(unused_extern_crates)]\n extern crate quote;\n #[allow(unused_extern_crates)]\n+extern crate rustc_semver;\n+#[allow(unused_extern_crates)]\n extern crate syn;\n #[allow(unused_extern_crates)]\n extern crate tokio;"}, {"sha": "900a8fffd4080cc9a6894c502b2b968ef0f1ff5a", "filename": "tests/ui-internal/invalid_msrv_attr_impl.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.fixed?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+\n+#![deny(clippy::internal)]\n+#![allow(clippy::missing_clippy_version_attribute)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_ast;\n+extern crate rustc_hir;\n+extern crate rustc_lint;\n+extern crate rustc_middle;\n+#[macro_use]\n+extern crate rustc_session;\n+use clippy_utils::extract_msrv_attr;\n+use rustc_hir::Expr;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n+use rustc_semver::RustcVersion;\n+\n+declare_lint! {\n+    pub TEST_LINT,\n+    Warn,\n+    \"\"\n+}\n+\n+struct Pass {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl LateLintPass<'_> for Pass {\n+    extract_msrv_attr!(LateContext);\n+    fn check_expr(&mut self, _: &LateContext<'_>, _: &Expr<'_>) {}\n+}\n+\n+impl EarlyLintPass for Pass {\n+    extract_msrv_attr!(EarlyContext);\n+    fn check_expr(&mut self, _: &EarlyContext<'_>, _: &rustc_ast::Expr) {}\n+}\n+\n+fn main() {}"}, {"sha": "4bc8164db67b016513dfcba17210d10403894382", "filename": "tests/ui-internal/invalid_msrv_attr_impl.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.rs?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+\n+#![deny(clippy::internal)]\n+#![allow(clippy::missing_clippy_version_attribute)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_ast;\n+extern crate rustc_hir;\n+extern crate rustc_lint;\n+extern crate rustc_middle;\n+#[macro_use]\n+extern crate rustc_session;\n+use clippy_utils::extract_msrv_attr;\n+use rustc_hir::Expr;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n+use rustc_semver::RustcVersion;\n+\n+declare_lint! {\n+    pub TEST_LINT,\n+    Warn,\n+    \"\"\n+}\n+\n+struct Pass {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl LateLintPass<'_> for Pass {\n+    fn check_expr(&mut self, _: &LateContext<'_>, _: &Expr<'_>) {}\n+}\n+\n+impl EarlyLintPass for Pass {\n+    fn check_expr(&mut self, _: &EarlyContext<'_>, _: &rustc_ast::Expr) {}\n+}\n+\n+fn main() {}"}, {"sha": "ddc06f0be1b3a005f5e6b128a4d9778c132e2063", "filename": "tests/ui-internal/invalid_msrv_attr_impl.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fui-internal%2Finvalid_msrv_attr_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca4ee79718e82f7384b9a6d7649e45bfc3c2598/tests%2Fui-internal%2Finvalid_msrv_attr_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_msrv_attr_impl.stderr?ref=bca4ee79718e82f7384b9a6d7649e45bfc3c2598", "patch": "@@ -0,0 +1,32 @@\n+error: `extract_msrv_attr!` macro missing from `LateLintPass` implementation\n+  --> $DIR/invalid_msrv_attr_impl.rs:30:1\n+   |\n+LL | impl LateLintPass<'_> for Pass {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_msrv_attr_impl.rs:3:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::missing_msrv_attr_impl)]` implied by `#[deny(clippy::internal)]`\n+help: add `extract_msrv_attr!(LateContext)` to the `LateLintPass` implementation\n+   |\n+LL + impl LateLintPass<'_> for Pass {\n+LL +     extract_msrv_attr!(LateContext);\n+   |\n+\n+error: `extract_msrv_attr!` macro missing from `EarlyLintPass` implementation\n+  --> $DIR/invalid_msrv_attr_impl.rs:34:1\n+   |\n+LL | impl EarlyLintPass for Pass {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: add `extract_msrv_attr!(EarlyContext)` to the `EarlyLintPass` implementation\n+   |\n+LL + impl EarlyLintPass for Pass {\n+LL +     extract_msrv_attr!(EarlyContext);\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}]}