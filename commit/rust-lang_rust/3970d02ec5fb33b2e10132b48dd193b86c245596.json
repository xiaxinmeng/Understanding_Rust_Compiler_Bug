{"sha": "3970d02ec5fb33b2e10132b48dd193b86c245596", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzBkMDJlYzVmYjMzYjJlMTAxMzJiNDhkZDE5M2I4NmMyNDU1OTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T01:48:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-08T19:03:15Z"}, "message": "rustc: Fix the logic for finding the Android main function\n\nI don't understand what this logic is doing", "tree": {"sha": "93fcebec55f829ddc5b458ea88e7db6c4bf9a0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93fcebec55f829ddc5b458ea88e7db6c4bf9a0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3970d02ec5fb33b2e10132b48dd193b86c245596", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3970d02ec5fb33b2e10132b48dd193b86c245596", "html_url": "https://github.com/rust-lang/rust/commit/3970d02ec5fb33b2e10132b48dd193b86c245596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3970d02ec5fb33b2e10132b48dd193b86c245596/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f5c6d5b683b82e347247192061182cdd844cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f5c6d5b683b82e347247192061182cdd844cf5", "html_url": "https://github.com/rust-lang/rust/commit/98f5c6d5b683b82e347247192061182cdd844cf5"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "9ffd0e6f22c3c5855b0618e09c2af2b9b8fa9124", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3970d02ec5fb33b2e10132b48dd193b86c245596/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970d02ec5fb33b2e10132b48dd193b86c245596/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=3970d02ec5fb33b2e10132b48dd193b86c245596", "patch": "@@ -42,8 +42,8 @@ type EntryVisitor = vt<@mut EntryContext>;\n pub fn find_entry_point(session: Session, crate: @crate, ast_map: ast_map::map) {\n \n     // FIXME #4404 android JNI hacks\n-    if *session.building_library ||\n-        session.targ_cfg.os == session::os_android {\n+    if *session.building_library &&\n+        session.targ_cfg.os != session::os_android {\n         // No need to find a main function\n         return;\n     }\n@@ -127,18 +127,24 @@ fn configure_main(ctxt: @mut EntryContext) {\n         *this.session.entry_fn = this.main_fn;\n         *this.session.entry_type = Some(session::EntryMain);\n     } else {\n-        // No main function\n-        this.session.err(~\"main function not found\");\n-        if !this.non_main_fns.is_empty() {\n-            // There were some functions named 'main' though. Try to give the user a hint.\n-            this.session.note(~\"the main function must be defined at the crate level \\\n-                                 but you have one or more functions named 'main' that are not \\\n-                                 defined at the crate level. Either move the definition or attach \\\n-                                 the `#[main]` attribute to override this behavior.\");\n-            for this.non_main_fns.each |&(_, span)| {\n-                this.session.span_note(span, ~\"here is a function named 'main'\");\n+        if !*this.session.building_library {\n+            // No main function\n+            this.session.err(~\"main function not found\");\n+            if !this.non_main_fns.is_empty() {\n+                // There were some functions named 'main' though. Try to give the user a hint.\n+                this.session.note(~\"the main function must be defined at the crate level \\\n+                                    but you have one or more functions named 'main' that are not \\\n+                                    defined at the crate level. Either move the definition or \\\n+                                    attach the `#[main]` attribute to override this behavior.\");\n+                for this.non_main_fns.each |&(_, span)| {\n+                    this.session.span_note(span, ~\"here is a function named 'main'\");\n+                }\n             }\n+            this.session.abort_if_errors();\n+        } else {\n+            // If we *are* building a library, then we're on android where we still might\n+            // optionally want to translate main $4404\n+            assert!(this.session.targ_cfg.os == session::os_android);\n         }\n-        this.session.abort_if_errors();\n     }\n }"}, {"sha": "3e771eef970f7e1e364a1ce7b15a3acb835d7c72", "filename": "src/test/compile-fail/issue-2995.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3970d02ec5fb33b2e10132b48dd193b86c245596/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970d02ec5fb33b2e10132b48dd193b86c245596/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2995.rs?ref=3970d02ec5fb33b2e10132b48dd193b86c245596", "patch": "@@ -11,3 +11,5 @@\n fn bad (p: *int) {\n     let _q: &int = p as &int; //~ ERROR non-scalar cast\n }\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "216779fac7c467d38bc6041680c397982480ce97", "filename": "src/test/compile-fail/tag-variant-disr-dup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3970d02ec5fb33b2e10132b48dd193b86c245596/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3970d02ec5fb33b2e10132b48dd193b86c245596/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-dup.rs?ref=3970d02ec5fb33b2e10132b48dd193b86c245596", "patch": "@@ -19,3 +19,5 @@ enum color {\n     black = 0x000000,\n     white = 0x000000,\n }\n+\n+fn main() { }\n\\ No newline at end of file"}]}