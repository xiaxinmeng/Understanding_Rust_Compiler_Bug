{"sha": "4f0a791d5d54674a9384879be28322a4986167a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMGE3OTFkNWQ1NDY3NGE5Mzg0ODc5YmUyODMyMmE0OTg2MTY3YTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-03T01:26:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-03T01:26:49Z"}, "message": "Rollup merge of #70532 - RalfJung:miri-assign, r=eddyb\n\nMiri engine: stronger type-based sanity check for assignments\n\nr? @oli-obk @eddyb\nFixes https://github.com/rust-lang/rust/issues/70405\n\nThat issue says\n> be sure to also add appropriate mutability checks to the patterns (mutable for the source, immutable for the dest)\n\nI decided not to do that because I see no good reason to do it. The engine does not care either way, the assignment will happen correctly.", "tree": {"sha": "c0fcbba44d798a2d21099b01aa1d49c8615ac297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fcbba44d798a2d21099b01aa1d49c8615ac297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0a791d5d54674a9384879be28322a4986167a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehpDZCRBK7hj4Ov3rIwAAdHIIAF4z+GdLOyTX7cliYulaWmzW\nTgt8zEf7TgFi8xoi7KJEJZJ3Ak9DotSW62+w5HckuxhzGb7l302Kfeqth6FIqcRT\nxd0ECeged4tS4ul/qACv5ayXJDdY5bYhepfkx7W0Yh5pqPkvhnc1biOZcK7ujd8c\neGgKVudBIg9CaE8QAFC8Yh594eZ0KZNlRTsIAb2sIMnBU+goKJgFzyuA/hX8v60L\neynkd7HNbYtHP3Rks5m3T+SuBZBXvIokYxPFn8HSFcHT7lTLprFPSPsQE9GKmxxq\nV3hfDlnS3dj3yIF8+56o3FKPyHQT1TGeul8kutfa0Ons5JoUSDNWee2OyPGY/Xk=\n=BsGx\n-----END PGP SIGNATURE-----\n", "payload": "tree c0fcbba44d798a2d21099b01aa1d49c8615ac297\nparent a80b491ef27c1ccb30d0c603e80c74ddce127c66\nparent 343b3f010c23d2ff23dd08b62541a2dd9461916e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585877209 +0200\ncommitter GitHub <noreply@github.com> 1585877209 +0200\n\nRollup merge of #70532 - RalfJung:miri-assign, r=eddyb\n\nMiri engine: stronger type-based sanity check for assignments\n\nr? @oli-obk @eddyb\nFixes https://github.com/rust-lang/rust/issues/70405\n\nThat issue says\n> be sure to also add appropriate mutability checks to the patterns (mutable for the source, immutable for the dest)\n\nI decided not to do that because I see no good reason to do it. The engine does not care either way, the assignment will happen correctly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0a791d5d54674a9384879be28322a4986167a4", "html_url": "https://github.com/rust-lang/rust/commit/4f0a791d5d54674a9384879be28322a4986167a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0a791d5d54674a9384879be28322a4986167a4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80b491ef27c1ccb30d0c603e80c74ddce127c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80b491ef27c1ccb30d0c603e80c74ddce127c66", "html_url": "https://github.com/rust-lang/rust/commit/a80b491ef27c1ccb30d0c603e80c74ddce127c66"}, {"sha": "343b3f010c23d2ff23dd08b62541a2dd9461916e", "url": "https://api.github.com/repos/rust-lang/rust/commits/343b3f010c23d2ff23dd08b62541a2dd9461916e", "html_url": "https://github.com/rust-lang/rust/commit/343b3f010c23d2ff23dd08b62541a2dd9461916e"}], "stats": {"total": 121, "additions": 69, "deletions": 52}, "files": [{"sha": "10d3101ebb87a73e951265349b94a7521c670175", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4f0a791d5d54674a9384879be28322a4986167a4", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::abi::{Abi, Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n@@ -210,6 +210,53 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n     }\n }\n \n+/// Test if it is valid for a MIR assignment to assign `src`-typed place to `dest`-typed value.\n+/// This test should be symmetric, as it is primarily about layout compatibility.\n+pub(super) fn mir_assign_valid_types<'tcx>(\n+    src: TyAndLayout<'tcx>,\n+    dest: TyAndLayout<'tcx>,\n+) -> bool {\n+    if src.ty == dest.ty {\n+        // Equal types, all is good.\n+        return true;\n+    }\n+    // Type-changing assignments can happen for (at least) two reasons:\n+    // - `&mut T` -> `&T` gets optimized from a reborrow to a mere assignment.\n+    // - Subtyping is used. While all normal lifetimes are erased, higher-ranked lifetime\n+    //   bounds are still around and can lead to type differences.\n+    // There is no good way to check the latter, so we compare layouts instead -- but only\n+    // for values with `Scalar`/`ScalarPair` abi.\n+    // FIXME: Do something more accurate, type-based.\n+    match &src.abi {\n+        Abi::Scalar(..) | Abi::ScalarPair(..) => src.layout == dest.layout,\n+        _ => false,\n+    }\n+}\n+\n+/// Use the already known layout if given (but sanity check in debug mode),\n+/// or compute the layout.\n+#[cfg_attr(not(debug_assertions), inline(always))]\n+pub(super) fn from_known_layout<'tcx>(\n+    known_layout: Option<TyAndLayout<'tcx>>,\n+    compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n+) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+    match known_layout {\n+        None => compute(),\n+        Some(known_layout) => {\n+            if cfg!(debug_assertions) {\n+                let check_layout = compute()?;\n+                assert!(\n+                    mir_assign_valid_types(check_layout, known_layout),\n+                    \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n+                    known_layout.ty,\n+                    check_layout.ty,\n+                );\n+            }\n+            Ok(known_layout)\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn new(\n         tcx: TyCtxtAt<'tcx>,\n@@ -377,7 +424,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // have to support that case (mostly by skipping all caching).\n         match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n-                let layout = crate::interpret::operand::from_known_layout(layout, || {\n+                let layout = from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty =\n                         self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);"}, {"sha": "fb59a177b971637066937a43aa6726faa7782871", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=4f0a791d5d54674a9384879be28322a4986167a4", "patch": "@@ -18,19 +18,13 @@ mod visitor;\n pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in one place: here\n \n pub use self::eval_context::{Frame, InterpCx, LocalState, LocalValue, StackPopCleanup};\n-\n-pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n-\n-pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n-\n+pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{AllocMap, Machine, MayLeak, StackPopJump};\n-\n-pub use self::operand::{ImmTy, Immediate, OpTy, Operand, ScalarMaybeUndef};\n-\n-pub use self::visitor::{MutValueVisitor, ValueVisitor};\n-\n+pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n+pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n+pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;\n-\n-pub use self::intern::{intern_const_alloc_recursive, InternKind};\n+pub use self::visitor::{MutValueVisitor, ValueVisitor};\n \n crate use self::intrinsics::eval_nullary_intrinsic;\n+use eval_context::{from_known_layout, mir_assign_valid_types};"}, {"sha": "12595e4e4d92685510959d58effc63a5a68098ad", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=4f0a791d5d54674a9384879be28322a4986167a4", "patch": "@@ -2,21 +2,21 @@\n //! All high-level functions to read from memory work on operands as sources.\n \n use std::convert::TryFrom;\n+use std::fmt::Write;\n \n-use super::{InterpCx, MPlaceTy, Machine, MemPlace, Place, PlaceTy};\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n-pub use rustc_middle::mir::interpret::ScalarMaybeUndef;\n-use rustc_middle::mir::interpret::{\n-    sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpResult, Pointer, Scalar,\n-};\n use rustc_middle::ty::layout::{IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::Ty;\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{Abi, DiscriminantKind, HasDataLayout, Integer, LayoutOf, Size};\n use rustc_target::abi::{VariantIdx, Variants};\n-use std::fmt::Write;\n+\n+use super::{\n+    from_known_layout, sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpCx,\n+    InterpResult, MPlaceTy, Machine, MemPlace, Place, PlaceTy, Pointer, Scalar, ScalarMaybeUndef,\n+};\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n@@ -203,29 +203,6 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     }\n }\n \n-// Use the existing layout if given (but sanity check in debug mode),\n-// or compute the layout.\n-#[inline(always)]\n-pub(super) fn from_known_layout<'tcx>(\n-    layout: Option<TyAndLayout<'tcx>>,\n-    compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,\n-) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n-    match layout {\n-        None => compute(),\n-        Some(layout) => {\n-            if cfg!(debug_assertions) {\n-                let layout2 = compute()?;\n-                assert_eq!(\n-                    layout.layout, layout2.layout,\n-                    \"mismatch in layout of supposedly equal-layout types {:?} and {:?}\",\n-                    layout.ty, layout2.ty\n-                );\n-            }\n-            Ok(layout)\n-        }\n-    }\n-}\n-\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Normalice `place.ptr` to a `Pointer` if this is a place and not a ZST.\n     /// Can be helpful to avoid lots of `force_ptr` calls later, if this place is used a lot."}, {"sha": "ec299cdd2134b284a65c4000707425fea9630dda", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0a791d5d54674a9384879be28322a4986167a4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=4f0a791d5d54674a9384879be28322a4986167a4", "patch": "@@ -7,16 +7,15 @@ use std::hash::Hash;\n \n use rustc_macros::HashStable;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::truncate;\n use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n use rustc_target::abi::{Abi, Align, DiscriminantKind, FieldsShape};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, ImmTy, Immediate, InterpCx, InterpResult,\n-    LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer, PointerArithmetic, RawConst, Scalar,\n-    ScalarMaybeUndef,\n+    mir_assign_valid_types, truncate, AllocId, AllocMap, Allocation, AllocationExtra, ImmTy,\n+    Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n+    PointerArithmetic, RawConst, Scalar, ScalarMaybeUndef,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -869,10 +868,10 @@ where\n         // We do NOT compare the types for equality, because well-typed code can\n         // actually \"transmute\" `&mut T` to `&T` in an assignment without a cast.\n         assert!(\n-            src.layout.layout == dest.layout.layout,\n-            \"Layout mismatch when copying!\\nsrc: {:#?}\\ndest: {:#?}\",\n-            src,\n-            dest\n+            mir_assign_valid_types(src.layout, dest.layout),\n+            \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n+            src.layout.ty,\n+            dest.layout.ty,\n         );\n \n         // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.\n@@ -923,7 +922,7 @@ where\n         src: OpTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        if src.layout.layout == dest.layout.layout {\n+        if mir_assign_valid_types(src.layout, dest.layout) {\n             // Fast path: Just use normal `copy_op`\n             return self.copy_op(src, dest);\n         }"}]}