{"sha": "eb04229f7a8c12924b3b6357c42961c96f821423", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDQyMjlmN2E4YzEyOTI0YjNiNjM1N2M0Mjk2MWM5NmY4MjE0MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-09T16:57:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-09T16:57:03Z"}, "message": "auto merge of #17880 : pcwalton/rust/duplicate-bindings-in-parameter-list, r=alexcrichton\n\nparameter list.\r\n\r\nThis breaks code like:\r\n\r\n    fn f(a: int, a: int) { ... }\r\n    fn g<T,T>(a: T) { ... }\r\n\r\nChange this code to not use the same name for a parameter. For example:\r\n\r\n    fn f(a: int, b: int) { ... }\r\n    fn g<T,U>(a: T) { ... }\r\n\r\nCode like this is *not* affected, since `_` is not an identifier:\r\n\r\n    fn f(_: int, _: int) { ... } // OK\r\n\r\nCloses #17568.\r\n\r\nr? @alexcrichton \r\n[breaking-change]", "tree": {"sha": "003ba72eb2d83f6dbca155e05c97d2dc8a4630b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003ba72eb2d83f6dbca155e05c97d2dc8a4630b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb04229f7a8c12924b3b6357c42961c96f821423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb04229f7a8c12924b3b6357c42961c96f821423", "html_url": "https://github.com/rust-lang/rust/commit/eb04229f7a8c12924b3b6357c42961c96f821423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb04229f7a8c12924b3b6357c42961c96f821423/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158eaa643b96f474c6aeb11a94d6ba444c1f3867", "url": "https://api.github.com/repos/rust-lang/rust/commits/158eaa643b96f474c6aeb11a94d6ba444c1f3867", "html_url": "https://github.com/rust-lang/rust/commit/158eaa643b96f474c6aeb11a94d6ba444c1f3867"}, {"sha": "14988141952e29e1d46396e99cf286cd7aa9ee95", "url": "https://api.github.com/repos/rust-lang/rust/commits/14988141952e29e1d46396e99cf286cd7aa9ee95", "html_url": "https://github.com/rust-lang/rust/commit/14988141952e29e1d46396e99cf286cd7aa9ee95"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "9c8cc3cc9ad881e4a2faec7adef2a7ed2a03d92f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eb04229f7a8c12924b3b6357c42961c96f821423/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04229f7a8c12924b3b6357c42961c96f821423/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=eb04229f7a8c12924b3b6357c42961c96f821423", "patch": "@@ -4232,15 +4232,25 @@ impl<'a> Resolver<'a> {\n                                type_parameters: TypeParameters,\n                                f: |&mut Resolver|) {\n         match type_parameters {\n-            HasTypeParameters(generics, space, node_id,\n-                              rib_kind) => {\n-\n+            HasTypeParameters(generics, space, node_id, rib_kind) => {\n                 let mut function_type_rib = Rib::new(rib_kind);\n-\n+                let mut seen_bindings = HashSet::new();\n                 for (index, type_parameter) in generics.ty_params.iter().enumerate() {\n                     let ident = type_parameter.ident;\n                     debug!(\"with_type_parameter_rib: {} {}\", node_id,\n                            type_parameter.id);\n+\n+                    if seen_bindings.contains(&ident) {\n+                        self.resolve_error(type_parameter.span,\n+                                           format!(\"the name `{}` is already \\\n+                                                    used for a type \\\n+                                                    parameter in this type \\\n+                                                    parameter list\",\n+                                                   token::get_ident(\n+                                                       ident)).as_slice())\n+                    }\n+                    seen_bindings.insert(ident);\n+\n                     let def_like = DlDef(DefTyParam(space,\n                                                     local_def(type_parameter.id),\n                                                     index));\n@@ -4313,8 +4323,8 @@ impl<'a> Resolver<'a> {\n                     // Nothing to do.\n                 }\n                 Some(declaration) => {\n+                    let mut bindings_list = HashMap::new();\n                     for argument in declaration.inputs.iter() {\n-                        let mut bindings_list = HashMap::new();\n                         this.resolve_pattern(&*argument.pat,\n                                              ArgumentIrrefutableMode,\n                                              &mut bindings_list);\n@@ -5056,12 +5066,24 @@ impl<'a> Resolver<'a> {\n                             // must not add it if it's in the bindings list\n                             // because that breaks the assumptions later\n                             // passes make about or-patterns.)\n-\n                             if !bindings_list.contains_key(&renamed) {\n                                 let this = &mut *self;\n                                 let last_rib = this.value_ribs.last_mut().unwrap();\n                                 last_rib.bindings.insert(renamed, DlDef(def));\n                                 bindings_list.insert(renamed, pat_id);\n+                            } else if mode == ArgumentIrrefutableMode &&\n+                                    bindings_list.contains_key(&renamed) {\n+                                // Forbid duplicate bindings in the same\n+                                // parameter list.\n+                                self.resolve_error(pattern.span,\n+                                                   format!(\"identifier `{}` \\\n+                                                            is bound more \\\n+                                                            than once in \\\n+                                                            this parameter \\\n+                                                            list\",\n+                                                           token::get_ident(\n+                                                               ident))\n+                                                   .as_slice())\n                             } else if bindings_list.find(&renamed) ==\n                                     Some(&pat_id) {\n                                 // Then this is a duplicate variable in the"}, {"sha": "c1c0f974de9e5c37f479202061222bd41ec63745", "filename": "src/test/compile-fail/duplicate-parameter.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb04229f7a8c12924b3b6357c42961c96f821423/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04229f7a8c12924b3b6357c42961c96f821423/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs?ref=eb04229f7a8c12924b3b6357c42961c96f821423", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f(a: int, a: int) {}\n+//~^ ERROR identifier `a` is bound more than once in this parameter list\n+\n+fn main() {\n+}\n+"}, {"sha": "d535ce4a69a2d33316ce5ad78beb4892364b5b40", "filename": "src/test/compile-fail/duplicate-type-parameter.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eb04229f7a8c12924b3b6357c42961c96f821423/src%2Ftest%2Fcompile-fail%2Fduplicate-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb04229f7a8c12924b3b6357c42961c96f821423/src%2Ftest%2Fcompile-fail%2Fduplicate-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-type-parameter.rs?ref=eb04229f7a8c12924b3b6357c42961c96f821423", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Foo<T,T> = Option<T>;\n+//~^ ERROR the name `T` is already used\n+\n+struct Bar<T,T>(T);\n+//~^ ERROR the name `T` is already used\n+\n+struct Baz<T,T> {\n+//~^ ERROR the name `T` is already used\n+    x: T,\n+}\n+\n+enum Boo<T,T> {\n+//~^ ERROR the name `T` is already used\n+    A(T),\n+    B,\n+}\n+\n+fn quux<T,T>(x: T) {}\n+//~^ ERROR the name `T` is already used\n+\n+trait Qux<T,T> {}\n+//~^ ERROR the name `T` is already used\n+\n+impl<T,T> Qux<T,T> for Option<T> {}\n+//~^ ERROR the name `T` is already used\n+\n+fn main() {\n+}\n+"}]}