{"sha": "7f7b5514a424a49c16a2c2b2833f3f959c2b077c", "node_id": "C_kwDOAAsO6NoAKDdmN2I1NTE0YTQyNGE0OWMxNmEyYzJiMjgzM2YzZjk1OWMyYjA3N2M", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-12-16T23:44:50Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-01-04T07:16:50Z"}, "message": "Make `DefId` `repr(C)`, optimize big-endian field order", "tree": {"sha": "722c5fd96d8110a40c68630560b77ce3b395a986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722c5fd96d8110a40c68630560b77ce3b395a986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7b5514a424a49c16a2c2b2833f3f959c2b077c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7b5514a424a49c16a2c2b2833f3f959c2b077c", "html_url": "https://github.com/rust-lang/rust/commit/7f7b5514a424a49c16a2c2b2833f3f959c2b077c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7b5514a424a49c16a2c2b2833f3f959c2b077c/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5531927e8af9b99ad923af4c827c91038bca51ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5531927e8af9b99ad923af4c827c91038bca51ee", "html_url": "https://github.com/rust-lang/rust/commit/5531927e8af9b99ad923af4c827c91038bca51ee"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "7d854f50ae7b385382544832fc7543ed7f1f7cbf", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f7b5514a424a49c16a2c2b2833f3f959c2b077c/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7b5514a424a49c16a2c2b2833f3f959c2b077c/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=7f7b5514a424a49c16a2c2b2833f3f959c2b077c", "patch": "@@ -221,10 +221,17 @@ impl<D: Decoder> Decodable<D> for DefIndex {\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Copy)]\n // On below-64 bit systems we can simply use the derived `Hash` impl\n #[cfg_attr(not(target_pointer_width = \"64\"), derive(Hash))]\n-// Note that the order is essential here, see below why\n+#[repr(C)]\n+// We guarantee field order. Note that the order is essential here, see below why.\n pub struct DefId {\n+    // cfg-ing the order of fields so that the `DefIndex` which is high entropy always ends up in\n+    // the lower bits no matter the endianness. This allows the compiler to turn that `Hash` impl\n+    // into a direct call to 'u64::hash(_)`.\n+    #[cfg(not(all(target_pointer_width = \"64\", target_endian = \"big\")))]\n     pub index: DefIndex,\n     pub krate: CrateNum,\n+    #[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+    pub index: DefIndex,\n }\n \n // On 64-bit systems, we can hash the whole `DefId` as one `u64` instead of two `u32`s. This"}]}