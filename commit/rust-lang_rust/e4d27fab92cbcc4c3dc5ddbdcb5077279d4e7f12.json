{"sha": "e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDI3ZmFiOTJjYmNjNGMzZGM1ZGRiZGNiNTA3NzI3OWQ0ZTdmMTI=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2020-07-22T09:41:15Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2020-07-28T15:41:58Z"}, "message": "Improve `f32` and `f64` primitive documentation", "tree": {"sha": "9d11b0e707b262e19f9977ee61ddb3c91186b016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d11b0e707b262e19f9977ee61ddb3c91186b016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQSOpdglyeINwt5bMtWqUCXPHMhXVAUCXyBHRgAKCRCqUCXPHMhX\nVKTwAP9h3RZSaIHs4r3eLDEorF9sEzH2H1FsSgSnktYqJGkpHAD5AV3TNrAJbTdF\nbIz+V1XJ721WEg5ZSYhYGMA0Sevq9wQ=\n=J8iG\n-----END PGP SIGNATURE-----", "payload": "tree 9d11b0e707b262e19f9977ee61ddb3c91186b016\nparent 1f5d69daccd1f04e42886d9aaf513f2691132d17\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1595410875 +0200\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1595950918 +0200\n\nImprove `f32` and `f64` primitive documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12", "html_url": "https://github.com/rust-lang/rust/commit/e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d69daccd1f04e42886d9aaf513f2691132d17", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d69daccd1f04e42886d9aaf513f2691132d17", "html_url": "https://github.com/rust-lang/rust/commit/1f5d69daccd1f04e42886d9aaf513f2691132d17"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "f9c96b7c3d4b3ffdb8847e4aa179c9e459d3d5e0", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=e4d27fab92cbcc4c3dc5ddbdcb5077279d4e7f12", "patch": "@@ -764,19 +764,57 @@ mod prim_str {}\n mod prim_tuple {}\n \n #[doc(primitive = \"f32\")]\n-/// The 32-bit floating point type.\n+/// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n+///\n+/// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n+/// `-113.75`, `0.0078125`, `34359738368`, `0`, `-1`. So unlike integer types\n+/// (like `i32`), floating point types can represent non-integer numbers, too.\n+///\n+/// However, being able to represent this wide range of numbers comes at the\n+/// cost of precision: floats can only represent some of the real numbers and\n+/// calculation with floats round to a nearby representable number. For example,\n+/// `5.0` and `1.0` can be exactly represented as `f32`, but `1.0 / 5.0` results\n+/// in `0.20000000298023223876953125` since `0.2` cannot be exactly represented\n+/// as `f32`. Note however, that printing floats with `println` and friends will\n+/// often discard insignificant digits: `println!(\"{}\", 1.0f32 / 5.0f32)` will\n+/// print `0.2`.\n+///\n+/// The precision is better for numbers near 0 and worse for large numbers. For\n+/// example, above 2<sup>24</sup>, not even all integers are representable.\n+///\n+/// Additionally, `f32` can represent a couple of special values:\n+///\n+/// - `-0`: this is just due to how floats are encoded. It is semantically\n+///   equivalent to `0` and `-0.0 == 0.0` results in `true`.\n+/// - [\u221e](#associatedconstant.INFINITY) and\n+///   [-\u221e](#associatedconstant.NEG_INFINITY): these result from calculations\n+///   like `1.0 / 0.0`.\n+/// - [NaN (not a number)](#associatedconstant.NAN): this value results from\n+///   calculations like `(-1.0).sqrt()`. NaN has some potentially unexpected\n+///   behavior: it is unequal to any float, including itself! It is also neither\n+///   smaller nor greater than any float, making it impossible to sort. Lastly,\n+///   it is considered infectious as almost all calculations where one of the\n+///   operands is NaN will also result in NaN.\n+///\n+/// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///\n /// *[See also the `std::f32::consts` module](f32/consts/index.html).*\n ///\n+/// [wikipedia]: https://en.wikipedia.org/wiki/Single-precision_floating-point_format\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n #[doc(primitive = \"f64\")]\n-//\n-/// The 64-bit floating point type.\n+/// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n+///\n+/// This type is very similar to [`f32`](primitive.f32.html), but has increased\n+/// precision by using twice as many bits. Please see [the documentation for\n+/// `f32`](primitive.f32.html) or [Wikipedia on double precision\n+/// values][wikipedia] for more information.\n ///\n /// *[See also the `std::f64::consts` module](f64/consts/index.html).*\n ///\n+/// [wikipedia]: https://en.wikipedia.org/wiki/Double-precision_floating-point_format\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n "}]}