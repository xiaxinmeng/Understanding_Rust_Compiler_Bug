{"sha": "ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNWMwMGQwY2EwMjdmOGVmNGI0MWZlY2Q1MzE3N2UxMDVkYWE2YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-08T03:04:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-08T03:04:50Z"}, "message": "Auto merge of #54700 - frewsxcv:frewsxcv-binary-search, r=GuillaumeGomez\n\nClarify docs for when binary_search has many matches.\n\nFixes https://github.com/rust-lang/rust/issues/51817.", "tree": {"sha": "1ae9854de132033135c507abdc48cc2f5f84acc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae9854de132033135c507abdc48cc2f5f84acc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "html_url": "https://github.com/rust-lang/rust/commit/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aefe9b099ab9ce41f2138dca79e4b3d75cc784a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aefe9b099ab9ce41f2138dca79e4b3d75cc784a4", "html_url": "https://github.com/rust-lang/rust/commit/aefe9b099ab9ce41f2138dca79e4b3d75cc784a4"}, {"sha": "b5c64e2e261ab2d3a009ccf1630d532202400009", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c64e2e261ab2d3a009ccf1630d532202400009", "html_url": "https://github.com/rust-lang/rust/commit/b5c64e2e261ab2d3a009ccf1630d532202400009"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "76dcca0257817b6f6917345345827a69cf45ba83", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c00d0ca027f8ef4b41fecd53177e105daa6a8/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=ef5c00d0ca027f8ef4b41fecd53177e105daa6a8", "patch": "@@ -1175,9 +1175,10 @@ impl<T> [T] {\n \n     /// Binary searches this sorted slice for a given element.\n     ///\n-    /// If the value is found then `Ok` is returned, containing the\n-    /// index of the matching element; if the value is not found then\n-    /// `Err` is returned, containing the index where a matching\n+    /// If the value is found then [`Result::Ok`] is returned, containing the\n+    /// index of the matching element. If there are multiple matches, then any\n+    /// one of the matches could be returned. If the value is not found then\n+    /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n     /// # Examples\n@@ -1209,9 +1210,10 @@ impl<T> [T] {\n     /// order code that indicates whether its argument is `Less`,\n     /// `Equal` or `Greater` the desired target.\n     ///\n-    /// If a matching value is found then returns `Ok`, containing\n-    /// the index for the matched element; if no match is found then\n-    /// `Err` is returned, containing the index where a matching\n+    /// If the value is found then [`Result::Ok`] is returned, containing the\n+    /// index of the matching element. If there are multiple matches, then any\n+    /// one of the matches could be returned. If the value is not found then\n+    /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n     /// # Examples\n@@ -1265,10 +1267,11 @@ impl<T> [T] {\n     /// Assumes that the slice is sorted by the key, for instance with\n     /// [`sort_by_key`] using the same key extraction function.\n     ///\n-    /// If a matching value is found then returns `Ok`, containing the\n-    /// index for the matched element; if no match is found then `Err`\n-    /// is returned, containing the index where a matching element could\n-    /// be inserted while maintaining sorted order.\n+    /// If the value is found then [`Result::Ok`] is returned, containing the\n+    /// index of the matching element. If there are multiple matches, then any\n+    /// one of the matches could be returned. If the value is not found then\n+    /// [`Result::Err`] is returned, containing the index where a matching\n+    /// element could be inserted while maintaining sorted order.\n     ///\n     /// [`sort_by_key`]: #method.sort_by_key\n     ///"}]}