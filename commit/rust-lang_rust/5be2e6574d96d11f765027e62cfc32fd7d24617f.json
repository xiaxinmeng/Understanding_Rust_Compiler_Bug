{"sha": "5be2e6574d96d11f765027e62cfc32fd7d24617f", "node_id": "C_kwDOAAsO6NoAKDViZTJlNjU3NGQ5NmQxMWY3NjUwMjdlNjJjZmMzMmZkN2QyNDYxN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T11:10:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T11:10:40Z"}, "message": "Auto merge of #13185 - ChayimFriedman2:insert-ws-in-static-const-macro, r=Veykril\n\nfix: Insert whitespaces into static & const bodies if they are expanded from macro on hover\n\nPartially fixes #13143.\n\nTo resolve the other part we need to expand macros in unevaluated static & const bodies, and I'm not sure we want to. If for example it includes a call to `assert!()`, expanding it will lead to worse hover.", "tree": {"sha": "fb5f3d4ca931092ce93995f3217770833501e343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb5f3d4ca931092ce93995f3217770833501e343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be2e6574d96d11f765027e62cfc32fd7d24617f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be2e6574d96d11f765027e62cfc32fd7d24617f", "html_url": "https://github.com/rust-lang/rust/commit/5be2e6574d96d11f765027e62cfc32fd7d24617f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be2e6574d96d11f765027e62cfc32fd7d24617f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "479091687672df6dfd3c2147a6399510a1300180", "url": "https://api.github.com/repos/rust-lang/rust/commits/479091687672df6dfd3c2147a6399510a1300180", "html_url": "https://github.com/rust-lang/rust/commit/479091687672df6dfd3c2147a6399510a1300180"}, {"sha": "26b5f1f92fa50215a2b70fb5211c300d56f290f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/26b5f1f92fa50215a2b70fb5211c300d56f290f2", "html_url": "https://github.com/rust-lang/rust/commit/26b5f1f92fa50215a2b70fb5211c300d56f290f2"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "8bc093a85a21bc6fa38211eab6ff2ae109121c04", "filename": "crates/ide-db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5be2e6574d96d11f765027e62cfc32fd7d24617f/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be2e6574d96d11f765027e62cfc32fd7d24617f/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=5be2e6574d96d11f765027e62cfc32fd7d24617f", "patch": "@@ -95,7 +95,7 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n             AS_KW | DYN_KW | IMPL_KW | CONST_KW => {\n                 mods.push(do_ws(after, tok));\n             }\n-            T![;] => {\n+            T![;] if is_next(|it| it != R_CURLY, true) => {\n                 if indent > 0 {\n                     mods.push(do_indent(after, tok, indent));\n                 }"}, {"sha": "c5c50d88dd28a5f7db15bd1931daf5d0d1185b83", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5be2e6574d96d11f765027e62cfc32fd7d24617f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be2e6574d96d11f765027e62cfc32fd7d24617f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=5be2e6574d96d11f765027e62cfc32fd7d24617f", "patch": "@@ -2,12 +2,13 @@\n use std::fmt::Display;\n \n use either::Either;\n-use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HirDisplay, Semantics, TypeInfo};\n+use hir::{AsAssocItem, AttributeTemplate, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n     famous_defs::FamousDefs,\n     generated::lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n+    syntax_helpers::insert_whitespace_into_node,\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -350,10 +351,24 @@ pub(super) fn definition(\n             let body = it.eval(db);\n             match body {\n                 Ok(x) => Some(format!(\"{}\", x)),\n-                Err(_) => it.value(db).map(|x| format!(\"{}\", x)),\n+                Err(_) => {\n+                    let source = it.source(db)?;\n+                    let mut body = source.value.body()?.syntax().clone();\n+                    if source.file_id.is_macro() {\n+                        body = insert_whitespace_into_node::insert_ws_into(body);\n+                    }\n+                    Some(body.to_string())\n+                }\n+            }\n+        }),\n+        Definition::Static(it) => label_value_and_docs(db, it, |it| {\n+            let source = it.source(db)?;\n+            let mut body = source.value.body()?.syntax().clone();\n+            if source.file_id.is_macro() {\n+                body = insert_whitespace_into_node::insert_ws_into(body);\n             }\n+            Some(body.to_string())\n         }),\n-        Definition::Static(it) => label_value_and_docs(db, it, |it| it.value(db)),\n         Definition::Trait(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_docs(db, it),\n         Definition::BuiltinType(it) => {"}, {"sha": "4b8b47783d1269438341714a6a1866b94fa50d8a", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5be2e6574d96d11f765027e62cfc32fd7d24617f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be2e6574d96d11f765027e62cfc32fd7d24617f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=5be2e6574d96d11f765027e62cfc32fd7d24617f", "patch": "@@ -5113,3 +5113,61 @@ fn f() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn static_const_macro_expanded_body() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => {\n+        pub const V: i8 = {\n+            let e = 123;\n+            f(e) // Prevent const eval from evaluating this constant, we want to print the body's code.\n+        };\n+    };\n+}\n+m!();\n+fn main() { $0V; }\n+\"#,\n+        expect![[r#\"\n+            *V*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub const V: i8 = {\n+              let e = 123;\n+              f(e)\n+            }\n+            ```\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => {\n+        pub static V: i8 = {\n+            let e = 123;\n+        };\n+    };\n+}\n+m!();\n+fn main() { $0V; }\n+\"#,\n+        expect![[r#\"\n+            *V*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub static V: i8 = {\n+              let e = 123;\n+            }\n+            ```\n+        \"#]],\n+    );\n+}"}]}