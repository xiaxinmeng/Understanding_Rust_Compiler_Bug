{"sha": "5b66f27ed34849a849bd93ce662bffeec2e56947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjZmMjdlZDM0ODQ5YTg0OWJkOTNjZTY2MmJmZmVlYzJlNTY5NDc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-17T23:07:29Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-17T23:09:53Z"}, "message": "Use `const_eval_limit` instead of infinite loop detector", "tree": {"sha": "6676513e215aa86b48345512048784e2ab442123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6676513e215aa86b48345512048784e2ab442123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b66f27ed34849a849bd93ce662bffeec2e56947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b66f27ed34849a849bd93ce662bffeec2e56947", "html_url": "https://github.com/rust-lang/rust/commit/5b66f27ed34849a849bd93ce662bffeec2e56947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b66f27ed34849a849bd93ce662bffeec2e56947/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ceebd98c6a15ae30e772eebb676b63ffa1a8122", "html_url": "https://github.com/rust-lang/rust/commit/7ceebd98c6a15ae30e772eebb676b63ffa1a8122"}], "stats": {"total": 98, "additions": 25, "deletions": 73}, "files": [{"sha": "4b1fad5d0b3ee73bcbc683c29ebb6cd84b19a6b9", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b66f27ed34849a849bd93ce662bffeec2e56947/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b66f27ed34849a849bd93ce662bffeec2e56947/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=5b66f27ed34849a849bd93ce662bffeec2e56947", "patch": "@@ -565,8 +565,10 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n pub enum ResourceExhaustionInfo {\n     /// The stack grew too big.\n     StackFrameLimitReached,\n-    /// The program ran into an infinite loop.\n-    InfiniteLoop,\n+    /// The program ran for too long.\n+    ///\n+    /// The exact limit is set by the `const_eval_limit` attribute.\n+    TimeLimitReached,\n }\n \n impl fmt::Debug for ResourceExhaustionInfo {\n@@ -576,11 +578,7 @@ impl fmt::Debug for ResourceExhaustionInfo {\n             StackFrameLimitReached => {\n                 write!(f, \"reached the configured maximum number of stack frames\")\n             }\n-            InfiniteLoop => write!(\n-                f,\n-                \"duplicate interpreter state observed here, const evaluation will never \\\n-                    terminate\"\n-            ),\n+            TimeLimitReached => write!(f, \"exceeded interpreter time limit\"),\n         }\n     }\n }"}, {"sha": "22b01be299b1cafb3c113d5a727e27ea4eebada2", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5b66f27ed34849a849bd93ce662bffeec2e56947/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b66f27ed34849a849bd93ce662bffeec2e56947/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=5b66f27ed34849a849bd93ce662bffeec2e56947", "patch": "@@ -3,7 +3,6 @@ use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::{self, Ty};\n use std::borrow::{Borrow, Cow};\n use std::collections::hash_map::Entry;\n-use std::convert::TryFrom;\n use std::hash::Hash;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -13,13 +12,13 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n use crate::interpret::{\n-    self, snapshot, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory,\n-    MemoryKind, OpTy, PlaceTy, Pointer, Scalar,\n+    self, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind, OpTy,\n+    PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n \n-impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n+impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter> {\n     /// Evaluate a const function where all arguments (if any) are zero-sized types.\n     /// The evaluation is memoized thanks to the query system.\n     ///\n@@ -86,22 +85,13 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n     }\n }\n \n-/// The number of steps between loop detector snapshots.\n-/// Should be a power of two for performance reasons.\n-const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n-\n-// Extra machine state for CTFE, and the Machine instance\n-pub struct CompileTimeInterpreter<'mir, 'tcx> {\n-    /// When this value is negative, it indicates the number of interpreter\n-    /// steps *until* the loop detector is enabled. When it is positive, it is\n-    /// the number of steps after the detector has been enabled modulo the loop\n-    /// detector period.\n-    pub(super) steps_since_detector_enabled: isize,\n-\n-    pub(super) is_detector_enabled: bool,\n-\n-    /// Extra state to detect loops.\n-    pub(super) loop_detector: snapshot::InfiniteLoopDetector<'mir, 'tcx>,\n+/// Extra machine state for CTFE, and the Machine instance\n+pub struct CompileTimeInterpreter {\n+    /// For now, the number of terminators that can be evaluated before we throw a resource\n+    /// exhuastion error.\n+    ///\n+    /// Setting this to `0` disables the limit and allows the interpreter to run forever.\n+    pub steps_remaining: usize,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -110,16 +100,9 @@ pub struct MemoryExtra {\n     pub(super) can_access_statics: bool,\n }\n \n-impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n+impl CompileTimeInterpreter {\n     pub(super) fn new(const_eval_limit: usize) -> Self {\n-        let steps_until_detector_enabled =\n-            isize::try_from(const_eval_limit).unwrap_or(std::isize::MAX);\n-\n-        CompileTimeInterpreter {\n-            loop_detector: Default::default(),\n-            steps_since_detector_enabled: -steps_until_detector_enabled,\n-            is_detector_enabled: const_eval_limit != 0,\n-        }\n+        CompileTimeInterpreter { steps_remaining: const_eval_limit }\n     }\n }\n \n@@ -173,8 +156,7 @@ impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n     }\n }\n \n-crate type CompileTimeEvalContext<'mir, 'tcx> =\n-    InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>;\n+crate type CompileTimeEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, CompileTimeInterpreter>;\n \n impl interpret::MayLeak for ! {\n     #[inline(always)]\n@@ -184,7 +166,7 @@ impl interpret::MayLeak for ! {\n     }\n }\n \n-impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir, 'tcx> {\n+impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n     type MemoryKinds = !;\n     type PointerTag = ();\n     type ExtraFnVal = !;\n@@ -346,26 +328,17 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        if !ecx.machine.is_detector_enabled {\n+        // The step limit has already been hit in a previous call to `before_terminator`.\n+        if ecx.machine.steps_remaining == 0 {\n             return Ok(());\n         }\n \n-        {\n-            let steps = &mut ecx.machine.steps_since_detector_enabled;\n-\n-            *steps += 1;\n-            if *steps < 0 {\n-                return Ok(());\n-            }\n-\n-            *steps %= DETECTOR_SNAPSHOT_PERIOD;\n-            if *steps != 0 {\n-                return Ok(());\n-            }\n+        ecx.machine.steps_remaining -= 1;\n+        if ecx.machine.steps_remaining == 0 {\n+            throw_exhaust!(TimeLimitReached)\n         }\n \n-        let span = ecx.frame().span;\n-        ecx.machine.loop_detector.observe_and_analyze(*ecx.tcx, span, &ecx.memory, &ecx.stack[..])\n+        Ok(())\n     }\n \n     #[inline(always)]"}, {"sha": "03be71f6174a842cf3efcd13b690cc7744cae264", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b66f27ed34849a849bd93ce662bffeec2e56947/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b66f27ed34849a849bd93ce662bffeec2e56947/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5b66f27ed34849a849bd93ce662bffeec2e56947", "patch": "@@ -112,25 +112,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M>\n     }\n }\n \n-// FIXME: Really we shouldn't clone memory, ever. Snapshot machinery should instead\n-// carefully copy only the reachable parts.\n-impl<'mir, 'tcx, M> Clone for Memory<'mir, 'tcx, M>\n-where\n-    M: Machine<'mir, 'tcx, PointerTag = (), AllocExtra = ()>,\n-    M::MemoryExtra: Copy,\n-    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation)>,\n-{\n-    fn clone(&self) -> Self {\n-        Memory {\n-            alloc_map: self.alloc_map.clone(),\n-            extra_fn_ptr_map: self.extra_fn_ptr_map.clone(),\n-            dead_alloc_map: self.dead_alloc_map.clone(),\n-            extra: self.extra,\n-            tcx: self.tcx,\n-        }\n-    }\n-}\n-\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn new(tcx: TyCtxtAt<'tcx>, extra: M::MemoryExtra) -> Self {\n         Memory {"}]}