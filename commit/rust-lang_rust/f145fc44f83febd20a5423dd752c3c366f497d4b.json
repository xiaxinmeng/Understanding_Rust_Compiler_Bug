{"sha": "f145fc44f83febd20a5423dd752c3c366f497d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNDVmYzQ0ZjgzZmViZDIwYTU0MjNkZDc1MmMzYzM2NmY0OTdkNGI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-01-05T09:41:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-05T09:41:14Z"}, "message": "Merge pull request #1414 from samueltardieu/no-short-circuit-if\n\nAdd a new \"short_circuit_statement\" lint (fixes #1194)", "tree": {"sha": "1086947f1a9dab60195e483ca651c8e1d0bf7676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1086947f1a9dab60195e483ca651c8e1d0bf7676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f145fc44f83febd20a5423dd752c3c366f497d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f145fc44f83febd20a5423dd752c3c366f497d4b", "html_url": "https://github.com/rust-lang/rust/commit/f145fc44f83febd20a5423dd752c3c366f497d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f145fc44f83febd20a5423dd752c3c366f497d4b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c646c748630c2d49775dcda0e49d0bf3eccc499", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c646c748630c2d49775dcda0e49d0bf3eccc499", "html_url": "https://github.com/rust-lang/rust/commit/1c646c748630c2d49775dcda0e49d0bf3eccc499"}, {"sha": "82b2f5663f4802d24687c8fa1171ede9d5d7fe60", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b2f5663f4802d24687c8fa1171ede9d5d7fe60", "html_url": "https://github.com/rust-lang/rust/commit/82b2f5663f4802d24687c8fa1171ede9d5d7fe60"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "1f2608089ae6966097dc01625bb12a9932968952", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -381,6 +381,7 @@ All notable changes to this project will be documented in this file.\n [`shadow_reuse`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse\n [`shadow_same`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_same\n [`shadow_unrelated`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated\n+[`short_circuit_statement`]: https://github.com/Manishearth/rust-clippy/wiki#short_circuit_statement\n [`should_implement_trait`]: https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait\n [`similar_names`]: https://github.com/Manishearth/rust-clippy/wiki#similar_names\n [`single_char_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern"}, {"sha": "85c6136b99e33a0c3abec4019742cfd6c8607cd8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -179,7 +179,7 @@ transparently:\n \n ## Lints\n \n-There are 181 lints included in this crate:\n+There are 182 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -320,6 +320,7 @@ name\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                                           | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                             | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                   | allow   | rebinding a name without even using the original value\n+[short_circuit_statement](https://github.com/Manishearth/rust-clippy/wiki#short_circuit_statement)                     | warn    | using a short circuit boolean condition as a statement\n [should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)                       | warn    | defining a method that should be implementing a std trait\n [similar_names](https://github.com/Manishearth/rust-clippy/wiki#similar_names)                                         | allow   | similarly named items and bindings\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                             | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`"}, {"sha": "3e0aa17f0fb88e64f014a7e95ebddf4427d6752d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -423,6 +423,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc::FLOAT_CMP,\n         misc::MODULO_ONE,\n         misc::REDUNDANT_PATTERN,\n+        misc::SHORT_CIRCUIT_STATEMENT,\n         misc::TOPLEVEL_REF_ARG,\n         misc_early::BUILTIN_TYPE_SHADOW,\n         misc_early::DOUBLE_NEG,"}, {"sha": "b604c72222084d0d720695a1a563c1890a6d41b6", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -154,6 +154,25 @@ declare_lint! {\n     \"using a binding which is prefixed with an underscore\"\n }\n \n+/// **What it does:** Checks for the use of short circuit boolean conditions as a\n+/// statement.\n+///\n+/// **Why is this bad?** Using a short circuit boolean condition as a statement may\n+/// hide the fact that the second part is executed or not depending on the outcome of\n+/// the first part.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// f() && g();  // We should write `if f() { g(); }`.\n+/// ```\n+declare_lint! {\n+    pub SHORT_CIRCUIT_STATEMENT,\n+    Warn,\n+    \"using a short circuit boolean condition as a statement\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n@@ -165,7 +184,8 @@ impl LintPass for Pass {\n                     CMP_OWNED,\n                     MODULO_ONE,\n                     REDUNDANT_PATTERN,\n-                    USED_UNDERSCORE_BINDING)\n+                    USED_UNDERSCORE_BINDING,\n+                    SHORT_CIRCUIT_STATEMENT)\n     }\n }\n \n@@ -224,7 +244,23 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                                initref=initref));\n                 }\n             );\n-        }}\n+        }};\n+        if_let_chain! {[\n+            let StmtSemi(ref expr, _) = s.node,\n+            let Expr_::ExprBinary(ref binop, ref a, ref b) = expr.node,\n+            binop.node == BiAnd || binop.node == BiOr,\n+            let Some(sugg) = Sugg::hir_opt(cx, a),\n+        ], {\n+            span_lint_and_then(cx,\n+                SHORT_CIRCUIT_STATEMENT,\n+                s.span,\n+                \"boolean short circuit operator in statement may be clearer using an explicit test\",\n+                |db| {\n+                    let sugg = if binop.node == BiOr { !sugg } else { sugg };\n+                    db.span_suggestion(s.span, \"replace it with\",\n+                                       format!(\"if {} {{ {}; }}\", sugg, &snippet(cx, b.span, \"..\")));\n+                });\n+        }};\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {"}, {"sha": "97317d00cc41587ac2d32c291f97739e0b0ed855", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::hir::def::Def;\n-use rustc::hir::{Expr, Expr_, Stmt, StmtSemi, BlockCheckMode, UnsafeSource};\n+use rustc::hir::{Expr, Expr_, Stmt, StmtSemi, BlockCheckMode, UnsafeSource, BiAnd, BiOr};\n use utils::{in_macro, span_lint, snippet_opt, span_lint_and_then};\n use std::ops::Deref;\n \n@@ -134,8 +134,10 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n         return None;\n     }\n     match expr.node {\n-        Expr_::ExprIndex(ref a, ref b) |\n-        Expr_::ExprBinary(_, ref a, ref b) => Some(vec![&**a, &**b]),\n+        Expr_::ExprIndex(ref a, ref b) => Some(vec![&**a, &**b]),\n+        Expr_::ExprBinary(ref binop, ref a, ref b) if binop.node != BiAnd && binop.node != BiOr => {\n+            Some(vec![&**a, &**b])\n+        },\n         Expr_::ExprArray(ref v) |\n         Expr_::ExprTup(ref v) => Some(v.iter().collect()),\n         Expr_::ExprRepeat(ref inner, _) |"}, {"sha": "02e6d0693d1d86a83061b2f9b78aafdfc094e5ec", "filename": "tests/compile-fail/diverging_sub_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiverging_sub_expression.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -12,7 +12,7 @@ impl A {\n     fn foo(&self) -> ! { diverge() }\n }\n \n-#[allow(unused_variables, unnecessary_operation)]\n+#[allow(unused_variables, unnecessary_operation, short_circuit_statement)]\n fn main() {\n     let b = true;\n     b || diverge(); //~ ERROR sub-expression diverges"}, {"sha": "c133f42277767405e9dd5bf354489c493f0c6ef7", "filename": "tests/compile-fail/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feq_op.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -3,7 +3,7 @@\n \n #[deny(eq_op)]\n #[allow(identity_op, double_parens)]\n-#[allow(no_effect, unused_variables, unnecessary_operation)]\n+#[allow(no_effect, unused_variables, unnecessary_operation, short_circuit_statement)]\n #[deny(nonminimal_bool)]\n fn main() {\n     // simple values and comparisons"}, {"sha": "23dfc0ebcaf2993ae49c111d503c66f8e453db84", "filename": "tests/compile-fail/short_circuit_statement.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshort_circuit_statement.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -0,0 +1,27 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(short_circuit_statement)]\n+\n+fn main() {\n+    f() && g();\n+    //~^ ERROR boolean short circuit operator\n+    //~| HELP replace it with\n+    //~| SUGGESTION if f() { g(); }\n+    f() || g();\n+    //~^ ERROR boolean short circuit operator\n+    //~| HELP replace it with\n+    //~| SUGGESTION if !f() { g(); }\n+    1 == 2 || g();\n+    //~^ ERROR boolean short circuit operator\n+    //~| HELP replace it with\n+    //~| SUGGESTION if !(1 == 2) { g(); }\n+}\n+\n+fn f() -> bool {\n+    true\n+}\n+\n+fn g() -> bool {\n+    false\n+}"}]}