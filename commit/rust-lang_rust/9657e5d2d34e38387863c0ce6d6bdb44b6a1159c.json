{"sha": "9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NTdlNWQyZDM0ZTM4Mzg3ODYzYzBjZTZkNmJkYjQ0YjZhMTE1OWM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-18T19:36:21Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-18T19:37:04Z"}, "message": "Revert 9ab42038bb13d3c8b01faa9c88e660e4e590fb00 while I find what is\nwrong on Windows.", "tree": {"sha": "ab9babe29dea1ede3e7064c39b5b123a8c214793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9babe29dea1ede3e7064c39b5b123a8c214793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "html_url": "https://github.com/rust-lang/rust/commit/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c/comments", "author": null, "committer": null, "parents": [{"sha": "8a6590a75f4a9ac95512a47163cb5396158e9018", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6590a75f4a9ac95512a47163cb5396158e9018", "html_url": "https://github.com/rust-lang/rust/commit/8a6590a75f4a9ac95512a47163cb5396158e9018"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "fbd102c2ce9713254114b9bd35dd9e1c2a57cf1b", "filename": "Makefile.in", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "patch": "@@ -463,27 +463,27 @@ boot/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \t@$(call E, compile: $@)\n \t$(BOOT) -shared -o $@ $<\n \n-stage0/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n+stage0/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE0) -c -shared -o $@ $<\n+\t$(STAGE0) -S -shared -o $@ $<\n \n stage0/$(CFG_STDLIB): stage0/std.o stage0/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage0 -Lrt -lrustrt\n \n-stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n+stage1/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage1/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE1) -c -shared -o $@ $<\n+\t$(STAGE1) -S -shared -o $@ $<\n \n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n \t\t-Lstage1 -Lrt -lrustrt\n \n-stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n+stage2/std.s: $(STDLIB_CRATE) $(STDLIB_INPUTS) stage2/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n-\t$(STAGE2) -c -shared -o $@ $<\n+\t$(STAGE2) -S -shared -o $@ $<\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n@@ -509,20 +509,20 @@ stage2/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n \n \n \n-stage0/glue.o: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n+stage0/glue.s: stage0/rustc$(X) boot/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE0) -c -o $@ -glue\n+\t$(STAGE0) -S -o $@ -glue\n \n-stage1/glue.o: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n+stage1/glue.s: stage1/rustc$(X) stage0/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE1) -c -o $@ -glue\n+\t$(STAGE1) -S -o $@ -glue\n \n-stage2/glue.o: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n+stage2/glue.s: stage2/rustc$(X) stage1/$(CFG_STDLIB) \\\n                 rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)\n \t@$(call E, generate: $@)\n-\t$(STAGE2) -c -o $@ -glue\n+\t$(STAGE2) -S -o $@ -glue\n \n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n@@ -789,29 +789,35 @@ compile-check: tidy \\\n \t@$(call E, compile [boot]: $@)\n \t$(BOOT) -o $@ $<\n \n-%.stage0.o: %.rc $(SREQ0)\n+%.stage0.s: %.rc $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -c -o $@ $<\n+\t$(STAGE0) -S -o $@ $<\n \n-%.stage0.o: %.rs $(SREQ0)\n+%.stage0.s: %.rs $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n-\t$(STAGE0) -c -o $@ $<\n+\t$(STAGE0) -S -o $@ $<\n \n-%.stage1.o: %.rc $(SREQ1)\n+%.stage1.s: %.rc $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -c -o $@ $<\n+\t$(STAGE1) -S -o $@ $<\n \n-%.stage1.o: %.rs $(SREQ1)\n+%.stage1.s: %.rs $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n-\t$(STAGE1) -c -o $@ $<\n+\t$(STAGE1) -S -o $@ $<\n \n-%.stage2.o: %.rc $(SREQ2)\n+%.stage2.s: %.rc $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -c -o $@ $<\n+\t$(STAGE2) -S -o $@ $<\n \n-%.stage2.o: %.rs $(SREQ2)\n+%.stage2.s: %.rs $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n-\t$(STAGE2) -c -o $@ $<\n+\t$(STAGE2) -S -o $@ $<\n+\n+\n+\n+%.o: %.s\n+\t@$(call E, assemble [llvm]: $@)\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n \n # Cancel the implicit .out rule in GNU make.\n %.out: %"}, {"sha": "ad702555812fae029a118f55d150db4624707b1d", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9657e5d2d34e38387863c0ce6d6bdb44b6a1159c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9657e5d2d34e38387863c0ce6d6bdb44b6a1159c", "patch": "@@ -53,7 +53,6 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR, LLVMModuleRef M,\n                                         LLVMCodeGenFileType FileType) {\n   InitializeAllTargets();\n   InitializeAllAsmPrinters();\n-  InitializeAllAsmParsers();\n   TargetMachine::setRelocationModel(Reloc::PIC_);\n   std::string Err;\n   const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);"}]}