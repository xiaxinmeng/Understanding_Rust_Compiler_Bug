{"sha": "c340325ebf348914c67fc62e868db8833845eeb9", "node_id": "C_kwDOAAsO6NoAKGMzNDAzMjVlYmYzNDg5MTRjNjdmYzYyZTg2OGRiODgzMzg0NWVlYjk", "commit": {"author": {"name": "danakj", "email": "danakj@chromium.org", "date": "2023-06-15T15:13:03Z"}, "committer": {"name": "danakj", "email": "danakj@chromium.org", "date": "2023-06-15T15:13:03Z"}, "message": "Remap dylib paths into the sysroot to be relative to the sysroot\n\nLike for rlibs, the paths on the linker command line need to be relative\npaths if the sysroot was specified by the user to be a relative path.\n\nDylibs put the path in /LIBPATH instead of into the file path of the\nlibrary itself, so we rehome the libpath and adjust the rehoming function\nto be able to support both use cases, rlibs and dylibs.", "tree": {"sha": "21c4d044804eb1cbda781d95d1ce69df2ddacd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c4d044804eb1cbda781d95d1ce69df2ddacd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c340325ebf348914c67fc62e868db8833845eeb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c340325ebf348914c67fc62e868db8833845eeb9", "html_url": "https://github.com/rust-lang/rust/commit/c340325ebf348914c67fc62e868db8833845eeb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c340325ebf348914c67fc62e868db8833845eeb9/comments", "author": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b83156a5c503174e7b4ce130edbe348fcd82817", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b83156a5c503174e7b4ce130edbe348fcd82817", "html_url": "https://github.com/rust-lang/rust/commit/4b83156a5c503174e7b4ce130edbe348fcd82817"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "557b120b2c8f9d60e3a6a93c5611bcaf87ce67f9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c340325ebf348914c67fc62e868db8833845eeb9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c340325ebf348914c67fc62e868db8833845eeb9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c340325ebf348914c67fc62e868db8833845eeb9", "patch": "@@ -2682,27 +2682,27 @@ fn add_upstream_native_libraries(\n     }\n }\n \n-// Rehome sysroot lib paths to be relative to the sysroot, which may be a relative\n-// path specified by the user. If the sysroot is a relative path, and the sysroot rlibs\n-// are specified as an absolute path, the linker command line can be non-deterministic\n-// due to the paths including the current working directory. The linker command line\n-// needs to be deterministic since it appears inside the PDB file generated by the MSVC\n-// linker. See https://github.com/rust-lang/rust/issues/112586.\n-fn rehome_sysroot_rlib_path<'a>(sess: &'a Session, rlib_path: PathBuf) -> PathBuf {\n+// Rehome lib paths (which exclude the library file name) that point into the sysroot lib directory\n+// to be relative to the sysroot directory, which may be a relative path specified by the user.\n+//\n+// If the sysroot is a relative path, and the sysroot libs are specified as an absolute path, the\n+// linker command line can be non-deterministic due to the paths including the current working\n+// directory. The linker command line needs to be deterministic since it appears inside the PDB\n+// file generated by the MSVC linker. See https://github.com/rust-lang/rust/issues/112586.\n+//\n+// The returned path will always have `fix_windows_verbatim_for_gcc()` applied to it.\n+fn rehome_sysroot_lib_dir<'a>(sess: &'a Session, lib_dir: &Path) -> PathBuf {\n     let sysroot_lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n     let canonical_sysroot_lib_path =\n         { try_canonicalize(&sysroot_lib_path).unwrap_or_else(|_| sysroot_lib_path.clone()) };\n \n-    let mut canonical_rlib_dir = try_canonicalize(&rlib_path).unwrap_or_else(|_| rlib_path.clone());\n-    canonical_rlib_dir.pop();\n-\n-    if canonical_rlib_dir == canonical_sysroot_lib_path {\n-        // The `susroot_lib_path` returned by `target_filesearch().get_lib_path()` has\n+    let canonical_lib_dir = try_canonicalize(lib_dir).unwrap_or_else(|_| lib_dir.to_path_buf());\n+    if canonical_lib_dir == canonical_sysroot_lib_path {\n+        // This path, returned by `target_filesearch().get_lib_path()`, has\n         // already had `fix_windows_verbatim_for_gcc()` applied if needed.\n         sysroot_lib_path\n-            .join(rlib_path.file_name().expect(\"rlib path has no file name path component\"))\n     } else {\n-        rlib_path\n+        fix_windows_verbatim_for_gcc(&lib_dir)\n     }\n }\n \n@@ -2737,7 +2737,13 @@ fn add_static_crate<'a>(\n     let cratepath = &src.rlib.as_ref().unwrap().0;\n \n     let mut link_upstream = |path: &Path| {\n-        cmd.link_rlib(&rehome_sysroot_rlib_path(sess, fix_windows_verbatim_for_gcc(path)));\n+        let rlib_path = if let Some(dir) = path.parent() {\n+            let file_name = path.file_name().expect(\"rlib path has no file name path component\");\n+            rehome_sysroot_lib_dir(sess, &dir).join(file_name)\n+        } else {\n+            fix_windows_verbatim_for_gcc(path)\n+        };\n+        cmd.link_rlib(&rlib_path);\n     };\n \n     if !are_upstream_rust_objects_already_included(sess)\n@@ -2806,7 +2812,7 @@ fn add_dynamic_crate(cmd: &mut dyn Linker, sess: &Session, cratepath: &Path) {\n     // what its name is\n     let parent = cratepath.parent();\n     if let Some(dir) = parent {\n-        cmd.include_path(&fix_windows_verbatim_for_gcc(dir));\n+        cmd.include_path(&rehome_sysroot_lib_dir(sess, dir));\n     }\n     let stem = cratepath.file_stem().unwrap().to_str().unwrap();\n     // Convert library file-stem into a cc -l argument."}]}