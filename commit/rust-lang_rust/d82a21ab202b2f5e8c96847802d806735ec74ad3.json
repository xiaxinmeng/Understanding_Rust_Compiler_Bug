{"sha": "d82a21ab202b2f5e8c96847802d806735ec74ad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MmEyMWFiMjAyYjJmNWU4Yzk2ODQ3ODAyZDgwNjczNWVjNzRhZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T20:13:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T20:13:08Z"}, "message": "lambda expressions", "tree": {"sha": "aea23d0bb9760a6104f5994a73b37c869cbaf4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aea23d0bb9760a6104f5994a73b37c869cbaf4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82a21ab202b2f5e8c96847802d806735ec74ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82a21ab202b2f5e8c96847802d806735ec74ad3", "html_url": "https://github.com/rust-lang/rust/commit/d82a21ab202b2f5e8c96847802d806735ec74ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82a21ab202b2f5e8c96847802d806735ec74ad3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af8eb9c08f974a1b3beecfebadeb03144ef337d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af8eb9c08f974a1b3beecfebadeb03144ef337d", "html_url": "https://github.com/rust-lang/rust/commit/1af8eb9c08f974a1b3beecfebadeb03144ef337d"}], "stats": {"total": 384, "additions": 261, "deletions": 123}, "files": [{"sha": "24f11f63ee9d29e6365ce485ae5c34ac256e6b2b", "filename": "src/grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -131,6 +131,7 @@ Grammar(\n         \"FIELD_EXPR\",\n         \"REF_EXPR\",\n         \"DEREF_EXPR\",\n+        \"LAMBDA_EXPR\",\n         \"STRUCT_LIT\",\n         \"STRUCT_LIT_FIELD\",\n \n@@ -150,7 +151,6 @@ Grammar(\n         \"ABI\",\n         \"NAME\",\n         \"NAME_REF\",\n-        \"VALUE_PARAMETER\",\n         \"BLOCK\",\n \n         \"LET_STMT\",\n@@ -165,6 +165,7 @@ Grammar(\n         \"ASSOC_TYPE_ARG\",\n \n         \"PARAM_LIST\",\n+        \"VALUE_PARAMETER\",\n         \"SELF_PARAM\",\n         \"ARG_LIST\",\n     ]"}, {"sha": "09b351f31d06bef25b36530422833d29081f87af", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -44,6 +44,63 @@ pub(super) fn expr(p: &mut Parser) {\n     }\n }\n \n+// test block\n+// fn a() {}\n+// fn b() { let _ = 1; }\n+// fn c() { 1; 2; }\n+// fn d() { 1; 2 }\n+pub(super) fn block(p: &mut Parser) {\n+    if !p.at(L_CURLY) {\n+        p.error(\"expected block\");\n+    }\n+    let m = p.start();\n+    p.bump();\n+    while !p.at(EOF) && !p.at(R_CURLY) {\n+        match p.current() {\n+            LET_KW => let_stmt(p),\n+            c => {\n+                // test block_items\n+                // fn a() { fn b() {} }\n+                if items::ITEM_FIRST.contains(c) {\n+                    items::item(p)\n+                } else {\n+                    let expr_stmt = p.start();\n+                    expressions::expr(p);\n+                    if p.eat(SEMI) {\n+                        expr_stmt.complete(p, EXPR_STMT);\n+                    } else {\n+                        expr_stmt.abandon(p);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    p.expect(R_CURLY);\n+    m.complete(p, BLOCK);\n+}\n+\n+// test let_stmt;\n+// fn foo() {\n+//     let a;\n+//     let b: i32;\n+//     let c = 92;\n+//     let d: i32 = 92;\n+// }\n+fn let_stmt(p: &mut Parser) {\n+    assert!(p.at(LET_KW));\n+    let m = p.start();\n+    p.bump();\n+    patterns::pattern(p);\n+    if p.at(COLON) {\n+        types::ascription(p);\n+    }\n+    if p.eat(EQ) {\n+        expressions::expr(p);\n+    }\n+    p.expect(SEMI);\n+    m.complete(p, LET_STMT);\n+}\n+\n fn prefix_expr(p: &mut Parser) -> Option<CompletedMarker> {\n     match p.current() {\n         AMPERSAND => Some(ref_expr(p)),\n@@ -89,6 +146,7 @@ fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n \n     match p.current() {\n         L_PAREN => Some(tuple_expr(p)),\n+        PIPE => Some(lambda_expr(p)),\n         _ => {\n             p.err_and_bump(\"expected expression\");\n             None\n@@ -104,6 +162,25 @@ fn tuple_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, TUPLE_EXPR)\n }\n \n+// test lambda_expr\n+// fn foo() {\n+//     || ();\n+//     || -> i32 { 92 };\n+//     |x| x;\n+//     |x: i32,| x;\n+// }\n+fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(PIPE));\n+    let m = p.start();\n+    params::list_opt_types(p);\n+    if fn_ret_type(p) {\n+        block(p);\n+    } else {\n+        expr(p)\n+    }\n+    m.complete(p, LAMBDA_EXPR)\n+}\n+\n // test call_expr\n // fn foo() {\n //     let _ = f();"}, {"sha": "8c2704be5425bd51721a3bacadf943b8f9be084a", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 3, "deletions": 60, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -15,7 +15,7 @@ pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n pub(super) const ITEM_FIRST: TokenSet =\n     token_set![EXTERN_KW, MOD_KW, USE_KW, STRUCT_KW, ENUM_KW, FN_KW, PUB_KW, POUND];\n \n-fn item(p: &mut Parser) {\n+pub(super) fn item(p: &mut Parser) {\n     let item = p.start();\n     attributes::outer_attributes(p);\n     visibility(p);\n@@ -239,7 +239,7 @@ fn fn_item(p: &mut Parser) {\n     type_params::list(p);\n \n     if p.at(L_PAREN) {\n-        fn_value_parameters(p);\n+        params::list(p);\n     } else {\n         p.error(\"expected function arguments\");\n     }\n@@ -252,64 +252,7 @@ fn fn_item(p: &mut Parser) {\n     // fn foo<T>() where T: Copy {}\n     type_params::where_clause(p);\n \n-    block(p);\n-\n-    // test block\n-    // fn a() {}\n-    // fn b() { let _ = 1; }\n-    // fn c() { 1; 2; }\n-    // fn d() { 1; 2 }\n-    fn block(p: &mut Parser) {\n-        if !p.at(L_CURLY) {\n-            p.error(\"expected block\");\n-        }\n-        let m = p.start();\n-        p.bump();\n-        while !p.at(EOF) && !p.at(R_CURLY) {\n-            match p.current() {\n-                LET_KW => let_stmt(p),\n-                c => {\n-                    // test block_items\n-                    // fn a() { fn b() {} }\n-                    if ITEM_FIRST.contains(c) {\n-                        item(p)\n-                    } else {\n-                        let expr_stmt = p.start();\n-                        expressions::expr(p);\n-                        if p.eat(SEMI) {\n-                            expr_stmt.complete(p, EXPR_STMT);\n-                        } else {\n-                            expr_stmt.abandon(p);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        p.expect(R_CURLY);\n-        m.complete(p, BLOCK);\n-    }\n-\n-    // test let_stmt;\n-    // fn foo() {\n-    //     let a;\n-    //     let b: i32;\n-    //     let c = 92;\n-    //     let d: i32 = 92;\n-    // }\n-    fn let_stmt(p: &mut Parser) {\n-        assert!(p.at(LET_KW));\n-        let m = p.start();\n-        p.bump();\n-        patterns::pattern(p);\n-        if p.at(COLON) {\n-            types::ascription(p);\n-        }\n-        if p.eat(EQ) {\n-            expressions::expr(p);\n-        }\n-        p.expect(SEMI);\n-        m.complete(p, LET_STMT);\n-    }\n+    expressions::block(p);\n }\n \n // test type_item"}, {"sha": "d4f9b80cfd8ceb7b9b6f388a85d8beda916ade6f", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 6, "deletions": 59, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -26,8 +26,9 @@ mod expressions;\n mod items;\n mod paths;\n mod patterns;\n-mod type_args;\n+mod params;\n mod type_params;\n+mod type_args;\n mod types;\n \n use {\n@@ -95,67 +96,13 @@ fn abi(p: &mut Parser) {\n     abi.complete(p, ABI);\n }\n \n-// test fn_value_parameters\n-// fn a() {}\n-// fn b(x: i32) {}\n-// fn c(x: i32, ) {}\n-// fn d(x: i32, y: ()) {}\n-fn fn_value_parameters(p: &mut Parser) {\n-    assert!(p.at(L_PAREN));\n-    let m = p.start();\n-    p.bump();\n-    self_param(p);\n-    while !p.at(EOF) && !p.at(R_PAREN) {\n-        value_parameter(p);\n-        if !p.at(R_PAREN) {\n-            p.expect(COMMA);\n-        }\n-    }\n-    p.expect(R_PAREN);\n-    m.complete(p, PARAM_LIST);\n-\n-    fn value_parameter(p: &mut Parser) {\n-        let m = p.start();\n-        patterns::pattern(p);\n-        p.expect(COLON);\n-        types::type_(p);\n-        m.complete(p, VALUE_PARAMETER);\n-    }\n-\n-    // test self_param\n-    // impl S {\n-    //     fn a(self) {}\n-    //     fn b(&self,) {}\n-    //     fn c(&'a self,) {}\n-    //     fn d(&'a mut self, x: i32) {}\n-    // }\n-    fn self_param(p: &mut Parser) {\n-        let la1 = p.nth(1);\n-        let la2 = p.nth(2);\n-        let la3 = p.nth(3);\n-        let n_toks = match (p.current(), la1, la2, la3) {\n-            (SELF_KW, _, _, _) => 1,\n-            (AMPERSAND, SELF_KW, _, _) => 2,\n-            (AMPERSAND, MUT_KW, SELF_KW, _) => 3,\n-            (AMPERSAND, LIFETIME, SELF_KW, _) => 3,\n-            (AMPERSAND, LIFETIME, MUT_KW, SELF_KW) => 4,\n-            _ => return,\n-        };\n-        let m = p.start();\n-        for _ in 0..n_toks {\n-            p.bump();\n-        }\n-        m.complete(p, SELF_PARAM);\n-        if !p.at(R_PAREN) {\n-            p.expect(COMMA);\n-        }\n-    }\n-}\n-\n-fn fn_ret_type(p: &mut Parser) {\n+fn fn_ret_type(p: &mut Parser) -> bool {\n     if p.at(THIN_ARROW) {\n         p.bump();\n         types::type_(p);\n+        true\n+    } else {\n+        false\n     }\n }\n "}, {"sha": "1ef2cea885643054817800235a39734f15cbc5ac", "filename": "src/parser/grammar/params.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fparams.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -0,0 +1,71 @@\n+use super::*;\n+\n+// test param_list\n+// fn a() {}\n+// fn b(x: i32) {}\n+// fn c(x: i32, ) {}\n+// fn d(x: i32, y: ()) {}\n+pub(super) fn list(p: &mut Parser) {\n+    list_(p, true)\n+}\n+\n+pub(super) fn list_opt_types(p: &mut Parser) {\n+    list_(p, false)\n+}\n+\n+fn list_(p: &mut Parser, require_types: bool) {\n+    assert!(p.at(if require_types { L_PAREN } else { PIPE }));\n+    let m = p.start();\n+    p.bump();\n+    if require_types {\n+        self_param(p);\n+    }\n+    let terminator = if require_types { R_PAREN } else { PIPE };\n+    while !p.at(EOF) && !p.at(terminator) {\n+        value_parameter(p, require_types);\n+        if !p.at(terminator) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(terminator);\n+    m.complete(p, PARAM_LIST);\n+}\n+\n+fn value_parameter(p: &mut Parser, require_type: bool) {\n+    let m = p.start();\n+    patterns::pattern(p);\n+    if p.at(COLON) || require_type {\n+        types::ascription(p)\n+    }\n+    m.complete(p, VALUE_PARAMETER);\n+}\n+\n+// test self_param\n+// impl S {\n+//     fn a(self) {}\n+//     fn b(&self,) {}\n+//     fn c(&'a self,) {}\n+//     fn d(&'a mut self, x: i32) {}\n+// }\n+fn self_param(p: &mut Parser) {\n+    let la1 = p.nth(1);\n+    let la2 = p.nth(2);\n+    let la3 = p.nth(3);\n+    let n_toks = match (p.current(), la1, la2, la3) {\n+        (SELF_KW, _, _, _) => 1,\n+        (AMPERSAND, SELF_KW, _, _) => 2,\n+        (AMPERSAND, MUT_KW, SELF_KW, _) => 3,\n+        (AMPERSAND, LIFETIME, SELF_KW, _) => 3,\n+        (AMPERSAND, LIFETIME, MUT_KW, SELF_KW) => 4,\n+        _ => return,\n+    };\n+    let m = p.start();\n+    for _ in 0..n_toks {\n+        p.bump();\n+    }\n+    m.complete(p, SELF_PARAM);\n+    if !p.at(R_PAREN) {\n+        p.expect(COMMA);\n+    }\n+}\n+"}, {"sha": "6535f687220779824423e2315554485c121b1a4e", "filename": "src/parser/grammar/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fparser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftypes.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -166,7 +166,7 @@ fn fn_pointer_type(p: &mut Parser) {\n         return;\n     }\n \n-    fn_value_parameters(p);\n+    params::list(p);\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n     fn_ret_type(p);"}, {"sha": "93a3250a4530d909f65ee1ba37834112f07d4533", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -122,6 +122,7 @@ pub enum SyntaxKind {\n     FIELD_EXPR,\n     REF_EXPR,\n     DEREF_EXPR,\n+    LAMBDA_EXPR,\n     STRUCT_LIT,\n     STRUCT_LIT_FIELD,\n     EXTERN_BLOCK,\n@@ -140,7 +141,6 @@ pub enum SyntaxKind {\n     ABI,\n     NAME,\n     NAME_REF,\n-    VALUE_PARAMETER,\n     BLOCK,\n     LET_STMT,\n     EXPR_STMT,\n@@ -152,6 +152,7 @@ pub enum SyntaxKind {\n     TYPE_ARG,\n     ASSOC_TYPE_ARG,\n     PARAM_LIST,\n+    VALUE_PARAMETER,\n     SELF_PARAM,\n     ARG_LIST,\n     // Technical SyntaxKinds: they appear temporally during parsing,\n@@ -283,6 +284,7 @@ impl SyntaxKind {\n             FIELD_EXPR => &SyntaxInfo { name: \"FIELD_EXPR\" },\n             REF_EXPR => &SyntaxInfo { name: \"REF_EXPR\" },\n             DEREF_EXPR => &SyntaxInfo { name: \"DEREF_EXPR\" },\n+            LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n             STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n             STRUCT_LIT_FIELD => &SyntaxInfo { name: \"STRUCT_LIT_FIELD\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n@@ -301,7 +303,6 @@ impl SyntaxKind {\n             ABI => &SyntaxInfo { name: \"ABI\" },\n             NAME => &SyntaxInfo { name: \"NAME\" },\n             NAME_REF => &SyntaxInfo { name: \"NAME_REF\" },\n-            VALUE_PARAMETER => &SyntaxInfo { name: \"VALUE_PARAMETER\" },\n             BLOCK => &SyntaxInfo { name: \"BLOCK\" },\n             LET_STMT => &SyntaxInfo { name: \"LET_STMT\" },\n             EXPR_STMT => &SyntaxInfo { name: \"EXPR_STMT\" },\n@@ -313,6 +314,7 @@ impl SyntaxKind {\n             TYPE_ARG => &SyntaxInfo { name: \"TYPE_ARG\" },\n             ASSOC_TYPE_ARG => &SyntaxInfo { name: \"ASSOC_TYPE_ARG\" },\n             PARAM_LIST => &SyntaxInfo { name: \"PARAM_LIST\" },\n+            VALUE_PARAMETER => &SyntaxInfo { name: \"VALUE_PARAMETER\" },\n             SELF_PARAM => &SyntaxInfo { name: \"SELF_PARAM\" },\n             ARG_LIST => &SyntaxInfo { name: \"ARG_LIST\" },\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },"}, {"sha": "3c30a9209e9bf6b6b24cf4d167e9bad965898117", "filename": "tests/data/parser/inline/0063_lambda_expr.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0063_lambda_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0063_lambda_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0063_lambda_expr.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    || ();\n+    || -> i32 { 92 };\n+    |x| x;\n+    |x: i32,| x;\n+}"}, {"sha": "b1edffc14775d956bda4a5caba05a8301142b692", "filename": "tests/data/parser/inline/0063_lambda_expr.txt", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0063_lambda_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0063_lambda_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0063_lambda_expr.txt?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "patch": "@@ -0,0 +1,91 @@\n+FILE@[0; 74)\n+  FN_ITEM@[0; 74)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK@[9; 74)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 26)\n+        LAMBDA_EXPR@[10; 20)\n+          PARAM_LIST@[10; 18)\n+            WHITESPACE@[10; 15)\n+            PIPE@[15; 16)\n+            PIPE@[16; 17)\n+            WHITESPACE@[17; 18)\n+          TUPLE_EXPR@[18; 20)\n+            L_PAREN@[18; 19)\n+            R_PAREN@[19; 20)\n+        SEMI@[20; 21)\n+        WHITESPACE@[21; 26)\n+      EXPR_STMT@[26; 48)\n+        LAMBDA_EXPR@[26; 42)\n+          PARAM_LIST@[26; 29)\n+            PIPE@[26; 27)\n+            PIPE@[27; 28)\n+            WHITESPACE@[28; 29)\n+          THIN_ARROW@[29; 31)\n+          PATH_TYPE@[31; 36)\n+            PATH@[31; 36)\n+              PATH_SEGMENT@[31; 36)\n+                NAME_REF@[31; 36)\n+                  WHITESPACE@[31; 32)\n+                  IDENT@[32; 35) \"i32\"\n+                  WHITESPACE@[35; 36)\n+          BLOCK@[36; 42)\n+            L_CURLY@[36; 37)\n+            LITERAL@[37; 41)\n+              WHITESPACE@[37; 38)\n+              INT_NUMBER@[38; 40)\n+              WHITESPACE@[40; 41)\n+            R_CURLY@[41; 42)\n+        SEMI@[42; 43)\n+        WHITESPACE@[43; 48)\n+      EXPR_STMT@[48; 59)\n+        LAMBDA_EXPR@[48; 53)\n+          PARAM_LIST@[48; 52)\n+            PIPE@[48; 49)\n+            VALUE_PARAMETER@[49; 50)\n+              BIND_PAT@[49; 50)\n+                NAME@[49; 50)\n+                  IDENT@[49; 50) \"x\"\n+            PIPE@[50; 51)\n+            WHITESPACE@[51; 52)\n+          PATH_EXPR@[52; 53)\n+            PATH@[52; 53)\n+              PATH_SEGMENT@[52; 53)\n+                NAME_REF@[52; 53)\n+                  IDENT@[52; 53) \"x\"\n+        SEMI@[53; 54)\n+        WHITESPACE@[54; 59)\n+      EXPR_STMT@[59; 72)\n+        LAMBDA_EXPR@[59; 70)\n+          PARAM_LIST@[59; 69)\n+            PIPE@[59; 60)\n+            VALUE_PARAMETER@[60; 66)\n+              BIND_PAT@[60; 61)\n+                NAME@[60; 61)\n+                  IDENT@[60; 61) \"x\"\n+              COLON@[61; 62)\n+              PATH_TYPE@[62; 66)\n+                PATH@[62; 66)\n+                  PATH_SEGMENT@[62; 66)\n+                    NAME_REF@[62; 66)\n+                      WHITESPACE@[62; 63)\n+                      IDENT@[63; 66) \"i32\"\n+            COMMA@[66; 67)\n+            PIPE@[67; 68)\n+            WHITESPACE@[68; 69)\n+          PATH_EXPR@[69; 70)\n+            PATH@[69; 70)\n+              PATH_SEGMENT@[69; 70)\n+                NAME_REF@[69; 70)\n+                  IDENT@[69; 70) \"x\"\n+        SEMI@[70; 71)\n+        WHITESPACE@[71; 72)\n+      R_CURLY@[72; 73)\n+      WHITESPACE@[73; 74)"}, {"sha": "9d55bedbba7477b4287ac8433e12f2067c95ef9c", "filename": "tests/data/parser/inline/0064_param_list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0064_param_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0064_param_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0064_param_list.rs?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "previous_filename": "tests/data/parser/inline/0033_fn_value_parameters.rs"}, {"sha": "96e03d71aedd45b7d4cf0ac4304ce2763f08e70d", "filename": "tests/data/parser/inline/0064_param_list.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0064_param_list.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d82a21ab202b2f5e8c96847802d806735ec74ad3/tests%2Fdata%2Fparser%2Finline%2F0064_param_list.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0064_param_list.txt?ref=d82a21ab202b2f5e8c96847802d806735ec74ad3", "previous_filename": "tests/data/parser/inline/0033_fn_value_parameters.txt"}]}