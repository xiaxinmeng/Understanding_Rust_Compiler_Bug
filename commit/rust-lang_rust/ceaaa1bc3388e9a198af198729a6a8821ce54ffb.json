{"sha": "ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYWFhMWJjMzM4OGU5YTE5OGFmMTk4NzI5YTZhODgyMWNlNTRmZmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-17T19:57:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-01-20T18:50:57Z"}, "message": "Refactor definitions of ADTs in rustc::middle::def", "tree": {"sha": "776da1a38ac02b9a7e3ec498424610472ae77e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/776da1a38ac02b9a7e3ec498424610472ae77e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "html_url": "https://github.com/rust-lang/rust/commit/ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c9628de7d4e970b2cb43d0f1a4c8f9ad03aca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c9628de7d4e970b2cb43d0f1a4c8f9ad03aca1", "html_url": "https://github.com/rust-lang/rust/commit/c4c9628de7d4e970b2cb43d0f1a4c8f9ad03aca1"}], "stats": {"total": 473, "additions": 250, "deletions": 223}, "files": [{"sha": "a600591f4f5d03e8205f41bf76715e7c579837b1", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -610,11 +610,11 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n         hir::ExprPath(..) => {\n             let def = v.tcx.def_map.borrow().get(&e.id).map(|d| d.full_def());\n             match def {\n-                Some(def::DefVariant(_, _, _)) => {\n+                Some(def::DefVariant(..)) => {\n                     // Count the discriminator or function pointer.\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                 }\n-                Some(def::DefStruct(_)) => {\n+                Some(def::DefStruct(..)) => {\n                     if let ty::TyBareFn(..) = node_ty.sty {\n                         // Count the function pointer.\n                         v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n@@ -678,7 +678,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                     true\n                 }\n-                Some(def::DefFn(did, _)) => {\n+                Some(def::DefFn(did)) => {\n                     v.handle_const_fn_call(e, did, node_ty)\n                 }\n                 Some(def::DefMethod(did)) => {"}, {"sha": "3b56e160dd99246cf1c6a2e1b40e7a935b83f532", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -760,16 +760,16 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n                 Some(DefConst(..)) | Some(DefAssociatedConst(..)) =>\n                     cx.tcx.sess.span_bug(pat.span, \"const pattern should've \\\n                                                     been rewritten\"),\n-                Some(DefStruct(_)) => vec!(Single),\n-                Some(DefVariant(_, id, _)) => vec!(Variant(id)),\n+                Some(DefStruct(..)) => vec!(Single),\n+                Some(DefVariant(_, id)) => vec!(Variant(id)),\n                 _ => vec!()\n             },\n         hir::PatEnum(..) =>\n             match cx.tcx.def_map.borrow().get(&pat.id).map(|d| d.full_def()) {\n                 Some(DefConst(..)) | Some(DefAssociatedConst(..)) =>\n                     cx.tcx.sess.span_bug(pat.span, \"const pattern should've \\\n                                                     been rewritten\"),\n-                Some(DefVariant(_, id, _)) => vec!(Variant(id)),\n+                Some(DefVariant(_, id)) => vec!(Variant(id)),\n                 _ => vec!(Single)\n             },\n         hir::PatQPath(..) =>\n@@ -780,7 +780,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n                 Some(DefConst(..)) | Some(DefAssociatedConst(..)) =>\n                     cx.tcx.sess.span_bug(pat.span, \"const pattern should've \\\n                                                     been rewritten\"),\n-                Some(DefVariant(_, id, _)) => vec!(Variant(id)),\n+                Some(DefVariant(_, id)) => vec!(Variant(id)),\n                 _ => vec!(Single)\n             },\n         hir::PatLit(ref expr) =>\n@@ -872,7 +872,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                 Some(DefConst(..)) | Some(DefAssociatedConst(..)) =>\n                     cx.tcx.sess.span_bug(pat_span, \"const pattern should've \\\n                                                     been rewritten\"),\n-                Some(DefVariant(_, id, _)) => if *constructor == Variant(id) {\n+                Some(DefVariant(_, id)) => if *constructor == Variant(id) {\n                     Some(vec!())\n                 } else {\n                     None\n@@ -887,7 +887,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                 DefConst(..) | DefAssociatedConst(..) =>\n                     cx.tcx.sess.span_bug(pat_span, \"const pattern should've \\\n                                                     been rewritten\"),\n-                DefVariant(_, id, _) if *constructor != Variant(id) => None,\n+                DefVariant(_, id) if *constructor != Variant(id) => None,\n                 DefVariant(..) | DefStruct(..) => {\n                     Some(match args {\n                         &Some(ref args) => args.iter().map(|p| &**p).collect(),"}, {"sha": "498e7d53811590acd57769976565742085c99704", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n                     // affect the specific variant used, but we need to check\n                     // the whole enum definition to see what expression that\n                     // might be (if any).\n-                    Some(DefVariant(enum_id, variant_id, false)) => {\n+                    Some(DefVariant(enum_id, variant_id)) => {\n                         if let Some(enum_node_id) = self.ast_map.as_local_node_id(enum_id) {\n                             if let hir::ItemEnum(ref enum_def, ref generics) =\n                                 self.ast_map.expect_item(enum_node_id).node"}, {"sha": "af548b774caa90bf226450963688565d26ae553e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -332,7 +332,7 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<hir::Pat>\n             }\n             let path = match def.full_def() {\n                 def::DefStruct(def_id) => def_to_path(tcx, def_id),\n-                def::DefVariant(_, variant_did, _) => def_to_path(tcx, variant_did),\n+                def::DefVariant(_, variant_did) => def_to_path(tcx, variant_did),\n                 def::DefFn(..) => return P(hir::Pat {\n                     id: expr.id,\n                     node: hir::PatLit(P(expr.clone())),\n@@ -1052,10 +1052,10 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                       (lookup_const_by_id(tcx, def_id, Some(e.id), None), None)\n                   }\n               }\n-              Some(def::DefVariant(enum_def, variant_def, _)) => {\n+              Some(def::DefVariant(enum_def, variant_def)) => {\n                   (lookup_variant_by_id(tcx, enum_def, variant_def), None)\n               }\n-              Some(def::DefStruct(_)) => {\n+              Some(def::DefStruct(..)) => {\n                   return Ok(ConstVal::Struct(e.id))\n               }\n               Some(def::DefLocal(_, id)) => {\n@@ -1066,7 +1066,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                       (None, None)\n                   }\n               },\n-              Some(def::DefMethod(id)) | Some(def::DefFn(id, _)) => return Ok(Function(id)),\n+              Some(def::DefMethod(id)) | Some(def::DefFn(id)) => return Ok(Function(id)),\n               _ => (None, None)\n           };\n           let const_expr = match const_expr {"}, {"sha": "1be581a8fedf1afaade387b3b45ccfd4470c5478", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -26,7 +26,7 @@ use back::svh::Svh;\n use front::map as hir_map;\n use middle::def;\n use middle::lang_items;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, VariantKind};\n use middle::def_id::{DefId, DefIndex};\n use mir::repr::Mir;\n use session::Session;\n@@ -211,6 +211,8 @@ pub trait CrateStore<'tcx> : Any {\n \n     // resolve\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n+    fn variant_kind(&self, def_id: DefId) -> Option<VariantKind>;\n+    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>;\n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<ChildItem>;\n@@ -380,6 +382,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n \n     // resolve\n     fn def_path(&self, def: DefId) -> hir_map::DefPath { unimplemented!() }\n+    fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> { unimplemented!() }\n+    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n+        { unimplemented!() }\n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n         { unimplemented!() }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { unimplemented!() }"}, {"sha": "0746957ff63f55cbb26b4af957eb398d34c22528", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 _ if self.ignore_non_const_paths => (),\n                 def::DefPrimTy(_) => (),\n                 def::DefSelfTy(..) => (),\n-                def::DefVariant(enum_id, variant_id, _) => {\n+                def::DefVariant(enum_id, variant_id) => {\n                     self.check_def_id(enum_id);\n                     if !self.ignore_variant_stack.contains(&variant_id) {\n                         self.check_def_id(variant_id);"}, {"sha": "f22285b6b4ba3d8293198a7cf7cd131db115acaf", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -19,7 +19,7 @@ use rustc_front::hir;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n-    DefFn(DefId, bool /* is_ctor */),\n+    DefFn(DefId),\n     DefSelfTy(Option<DefId>,                    // trait id\n               Option<(ast::NodeId, ast::NodeId)>),   // (impl id, self type id)\n     DefMod(DefId),\n@@ -29,8 +29,9 @@ pub enum Def {\n     DefAssociatedConst(DefId),\n     DefLocal(DefId, // def id of variable\n              ast::NodeId), // node id of variable\n-    DefVariant(DefId /* enum */, DefId /* variant */, bool /* is_structure */),\n-    DefTy(DefId, bool /* is_enum */),\n+    DefVariant(DefId /* enum */, DefId /* variant */),\n+    DefEnum(DefId),\n+    DefTyAlias(DefId),\n     DefAssociatedTy(DefId /* trait */, DefId),\n     DefTrait(DefId),\n     DefPrimTy(hir::PrimTy),\n@@ -40,14 +41,10 @@ pub enum Def {\n              usize,        // index in the freevars list of the closure\n              ast::NodeId), // expr node that creates the closure\n \n-    /// Note that if it's a tuple struct's definition, the node id of the DefId\n-    /// may either refer to the item definition's id or the VariantData.ctor_id.\n-    ///\n-    /// The cases that I have encountered so far are (this is not exhaustive):\n-    /// - If it's a ty_path referring to some tuple struct, then DefMap maps\n-    ///   it to a def whose id is the item definition's id.\n-    /// - If it's an ExprPath referring to some tuple struct, then DefMap maps\n-    ///   it to a def whose id is the VariantData.ctor_id.\n+    // If DefStruct lives in type namespace it denotes a struct item and its DefId refers\n+    // to NodeId of the struct itself.\n+    // If DefStruct lives in value namespace (e.g. tuple struct, unit struct expressions)\n+    // it denotes a constructor and its DefId refers to NodeId of the struct's constructor.\n     DefStruct(DefId),\n     DefLabel(ast::NodeId),\n     DefMethod(DefId),\n@@ -121,7 +118,7 @@ impl Def {\n             }\n \n             DefFn(..) | DefMod(..) | DefForeignMod(..) | DefStatic(..) |\n-            DefVariant(..) | DefTy(..) | DefAssociatedTy(..) |\n+            DefVariant(..) | DefEnum(..) | DefTyAlias(..) | DefAssociatedTy(..) |\n             DefTyParam(..) | DefStruct(..) | DefTrait(..) |\n             DefMethod(..) | DefConst(..) | DefAssociatedConst(..) |\n             DefPrimTy(..) | DefLabel(..) | DefSelfTy(..) | DefErr => {\n@@ -132,8 +129,8 @@ impl Def {\n \n     pub fn def_id(&self) -> DefId {\n         match *self {\n-            DefFn(id, _) | DefMod(id) | DefForeignMod(id) | DefStatic(id, _) |\n-            DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(_, id) |\n+            DefFn(id) | DefMod(id) | DefForeignMod(id) | DefStatic(id, _) |\n+            DefVariant(_, id) | DefEnum(id) | DefTyAlias(id) | DefAssociatedTy(_, id) |\n             DefTyParam(_, _, id, _) | DefStruct(id) | DefTrait(id) |\n             DefMethod(id) | DefConst(id) | DefAssociatedConst(id) |\n             DefLocal(id, _) | DefUpvar(id, _, _, _) => {\n@@ -151,7 +148,7 @@ impl Def {\n \n     pub fn variant_def_ids(&self) -> Option<(DefId, DefId)> {\n         match *self {\n-            DefVariant(enum_id, var_id, _) => {\n+            DefVariant(enum_id, var_id) => {\n                 Some((enum_id, var_id))\n             }\n             _ => None"}, {"sha": "36f0ed32344d757a358f3d2927d73473cf1bfd66", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1077,7 +1077,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                             // struct or enum pattern.\n                         }\n \n-                        Some(def::DefVariant(enum_did, variant_did, _is_struct)) => {\n+                        Some(def::DefVariant(enum_did, variant_did)) => {\n                             let downcast_cmt =\n                                 if tcx.lookup_adt_def(enum_did).is_univariant() {\n                                     cmt_pat\n@@ -1093,7 +1093,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                             delegate.matched_pat(pat, downcast_cmt, match_mode);\n                         }\n \n-                        Some(def::DefStruct(..)) | Some(def::DefTy(_, false)) => {\n+                        Some(def::DefStruct(..)) | Some(def::DefTyAlias(..)) => {\n                             // A struct (in either the value or type\n                             // namespace; we encounter the former on\n                             // e.g. patterns for unit structs).\n@@ -1113,19 +1113,8 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                             // `matched_pat` call.\n                         }\n \n-                        Some(def @ def::DefTy(_, true)) => {\n-                            // An enum's type -- should never be in a\n-                            // pattern.\n-\n-                            if !tcx.sess.has_errors() {\n-                                let msg = format!(\"Pattern has unexpected type: {:?} and type {:?}\",\n-                                                  def,\n-                                                  cmt_pat.ty);\n-                                tcx.sess.span_bug(pat.span, &msg)\n-                            }\n-                        }\n-\n                         Some(def) => {\n+                            // An enum type should never be in a pattern.\n                             // Remaining cases are e.g. DefFn, to\n                             // which identifiers within patterns\n                             // should not resolve. However, we do"}, {"sha": "8971fb2b62d53617233b03dfad125c4f590e0f03", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1404,7 +1404,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         Some(d) => d.full_def()\n                     };\n                     match a_def {\n-                        def::DefTy(did, _) | def::DefStruct(did) => {\n+                        def::DefEnum(did) | def::DefTyAlias(did) | def::DefStruct(did) => {\n                             let generics = self.tcx.lookup_item_type(did).generics;\n \n                             let expected =\n@@ -1452,7 +1452,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                         }\n                         _ => ()\n                     }\n-\n                 }\n \n                 hir::TyPtr(ref mut_ty) => {"}, {"sha": "fff50c7c49d9c9ffc318b795a53d417a283ca716", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -235,7 +235,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &hir::Expr) {\n         if let hir::ExprPath(..) = expr.node {\n             match self.tcx.resolve_expr(expr) {\n-                DefFn(did, _) if self.def_id_is_transmute(did) => {\n+                DefFn(did) if self.def_id_is_transmute(did) => {\n                     let typ = self.tcx.node_id_to_type(expr.id);\n                     match typ.sty {\n                         TyBareFn(_, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {"}, {"sha": "62cc3e96c70ea7e89bd2c88838c15f48c4379fc2", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -552,19 +552,14 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n           def::DefAssociatedConst(..) | def::DefFn(..) | def::DefMethod(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n+\n           def::DefMod(_) | def::DefForeignMod(_) |\n-          def::DefTrait(_) | def::DefTy(..) | def::DefPrimTy(_) |\n+          def::DefTrait(_) | def::DefEnum(..) | def::DefTyAlias(..) | def::DefPrimTy(_) |\n           def::DefTyParam(..) |\n           def::DefLabel(_) | def::DefSelfTy(..) |\n           def::DefAssociatedTy(..) => {\n-              Ok(Rc::new(cmt_ {\n-                  id:id,\n-                  span:span,\n-                  cat:Categorization::StaticItem,\n-                  mutbl: McImmutable,\n-                  ty:expr_ty,\n-                  note: NoteNone\n-              }))\n+              self.tcx().sess.span_bug(span, &format!(\"Unexpected definition in \\\n+                                                       memory categorization: {:?}\", def));\n           }\n \n           def::DefStatic(_, mutbl) => {\n@@ -1218,7 +1213,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n         // alone) because struct patterns can refer to struct types or\n         // to struct variants within enums.\n         let cmt = match opt_def {\n-            Some(def::DefVariant(enum_did, variant_did, _))\n+            Some(def::DefVariant(enum_did, variant_did))\n                 // univariant enums do not need downcasts\n                 if !self.tcx().lookup_adt_def(enum_did).is_univariant() => {\n                     self.cat_downcast(pat, cmt.clone(), cmt.ty, variant_did)"}, {"sha": "b187c0d8897086f8010a89bf0c01a1740ad8d0ff", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -228,7 +228,7 @@ pub fn necessary_variants(dm: &DefMap, pat: &hir::Pat) -> Vec<DefId> {\n             hir::PatIdent(_, _, None) |\n             hir::PatStruct(..) => {\n                 match dm.get(&p.id) {\n-                    Some(&PathResolution { base_def: DefVariant(_, id, _), .. }) => {\n+                    Some(&PathResolution { base_def: DefVariant(_, id), .. }) => {\n                         variants.push(id);\n                     }\n                     _ => ()"}, {"sha": "1730a44bc08afe2eb90782a0a5e5f1e57d4b63f0", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1429,9 +1429,19 @@ impl<'tcx> Decodable for AdtDef<'tcx> {\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum AdtKind { Struct, Enum }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum VariantKind { Struct, Tuple, Unit }\n \n+impl VariantKind {\n+    pub fn from_variant_data(vdata: &hir::VariantData) -> Self {\n+        match *vdata {\n+            hir::VariantData::Struct(..) => VariantKind::Struct,\n+            hir::VariantData::Tuple(..) => VariantKind::Tuple,\n+            hir::VariantData::Unit(..) => VariantKind::Unit,\n+        }\n+    }\n+}\n+\n impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     fn new(tcx: &ctxt<'tcx>,\n            did: DefId,\n@@ -1577,8 +1587,8 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n \n     pub fn variant_of_def(&self, def: def::Def) -> &VariantDefData<'tcx, 'container> {\n         match def {\n-            def::DefVariant(_, vid, _) => self.variant_with_id(vid),\n-            def::DefStruct(..) | def::DefTy(..) => self.struct_variant(),\n+            def::DefVariant(_, vid) => self.variant_with_id(vid),\n+            def::DefStruct(..) | def::DefTyAlias(..) => self.struct_variant(),\n             _ => panic!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }"}, {"sha": "87ef63a2b667d1280c5dc2b95d032dbc959fa0b3", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1060,7 +1060,7 @@ impl LateLintPass for MutableTransmutes {\n                 hir::ExprPath(..) => (),\n                 _ => return None\n             }\n-            if let def::DefFn(did, _) = cx.tcx.resolve_expr(expr) {\n+            if let def::DefFn(did) = cx.tcx.resolve_expr(expr) {\n                 if !def_id_is_transmute(cx, did) {\n                     return None;\n                 }"}, {"sha": "ac0429d5ebc2dc4e149fa7aeeaed8066bb12e86c", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -376,7 +376,7 @@ fn decode_def(dcx: &DecodeContext, dsr: &mut reader::Decoder) -> def::Def {\n impl tr for def::Def {\n     fn tr(&self, dcx: &DecodeContext) -> def::Def {\n         match *self {\n-          def::DefFn(did, is_ctor) => def::DefFn(did.tr(dcx), is_ctor),\n+          def::DefFn(did) => def::DefFn(did.tr(dcx)),\n           def::DefMethod(did) => def::DefMethod(did.tr(dcx)),\n           def::DefSelfTy(opt_did, impl_ids) => { def::DefSelfTy(opt_did.map(|did| did.tr(dcx)),\n                                                                 impl_ids.map(|(nid1, nid2)| {\n@@ -393,11 +393,10 @@ impl tr for def::Def {\n               let did = dcx.tcx.map.local_def_id(nid);\n               def::DefLocal(did, nid)\n           }\n-          def::DefVariant(e_did, v_did, is_s) => {\n-            def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n-          },\n+          def::DefVariant(e_did, v_did) => def::DefVariant(e_did.tr(dcx), v_did.tr(dcx)),\n           def::DefTrait(did) => def::DefTrait(did.tr(dcx)),\n-          def::DefTy(did, is_enum) => def::DefTy(did.tr(dcx), is_enum),\n+          def::DefEnum(did) => def::DefEnum(did.tr(dcx)),\n+          def::DefTyAlias(did) => def::DefTyAlias(did.tr(dcx)),\n           def::DefAssociatedTy(trait_did, did) =>\n               def::DefAssociatedTy(trait_did.tr(dcx), did.tr(dcx)),\n           def::DefPrimTy(p) => def::DefPrimTy(p),"}, {"sha": "802629e8f3e8b8d49c1dbd11485a9eb6f6fdce83", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -18,7 +18,7 @@ use middle::cstore::{CrateStore, CrateSource, ChildItem, FoundAst};\n use middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n use middle::def;\n use middle::lang_items;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, VariantKind};\n use middle::def_id::{DefId, DefIndex};\n \n use rustc::front::map as hir_map;\n@@ -377,6 +377,17 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         local_path.into_iter().chain(path).collect()\n     }\n \n+    fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> {\n+        let cdata = self.get_crate_data(def_id.krate);\n+        decoder::get_variant_kind(&cdata, def_id.index)\n+    }\n+\n+    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n+    {\n+        let cdata = self.get_crate_data(struct_def_id.krate);\n+        decoder::get_struct_ctor_def_id(&cdata, struct_def_id.index)\n+    }\n+\n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n     {\n         let cdata = self.get_crate_data(did.krate);"}, {"sha": "aaaa6b574752a43981d7963f49cf886e7d8634be", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -33,7 +33,7 @@ use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n-use middle::ty::{self, Ty, TypeFoldable};\n+use middle::ty::{self, Ty, TypeFoldable, VariantKind};\n \n use rustc::mir;\n use rustc::mir::visit::MutVisitor;\n@@ -89,27 +89,22 @@ pub fn load_xrefs(data: &[u8]) -> index::DenseIndex {\n     index::DenseIndex::from_buf(index.data, index.start, index.end)\n }\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Clone, Copy, Debug, PartialEq)]\n enum Family {\n     ImmStatic,             // c\n     MutStatic,             // b\n     Fn,                    // f\n-    CtorFn,                // o\n     StaticMethod,          // F\n     Method,                // h\n     Type,                  // y\n     Mod,                   // m\n     ForeignMod,            // n\n     Enum,                  // t\n-    StructVariant,         // V\n-    TupleVariant,          // v\n-    UnitVariant,           // w\n+    Variant(VariantKind),  // V, v, w\n     Impl,                  // i\n     DefaultImpl,           // d\n     Trait,                 // I\n-    Struct,                // S\n-    TupleStruct,           // s\n-    UnitStruct,            // u\n+    Struct(VariantKind),   // S, s, u\n     PublicField,           // g\n     InheritedField,        // N\n     Constant,              // C\n@@ -122,22 +117,21 @@ fn item_family(item: rbml::Doc) -> Family {\n       'c' => ImmStatic,\n       'b' => MutStatic,\n       'f' => Fn,\n-      'o' => CtorFn,\n       'F' => StaticMethod,\n       'h' => Method,\n       'y' => Type,\n       'm' => Mod,\n       'n' => ForeignMod,\n       't' => Enum,\n-      'V' => StructVariant,\n-      'v' => TupleVariant,\n-      'w' => UnitVariant,\n+      'V' => Variant(VariantKind::Struct),\n+      'v' => Variant(VariantKind::Tuple),\n+      'w' => Variant(VariantKind::Unit),\n       'i' => Impl,\n       'd' => DefaultImpl,\n       'I' => Trait,\n-      'S' => Struct,\n-      's' => TupleStruct,\n-      'u' => UnitStruct,\n+      'S' => Struct(VariantKind::Struct),\n+      's' => Struct(VariantKind::Tuple),\n+      'u' => Struct(VariantKind::Unit),\n       'g' => PublicField,\n       'N' => InheritedField,\n        c => panic!(\"unexpected family char: {}\", c)\n@@ -271,6 +265,18 @@ fn item_name(intr: &IdentInterner, item: rbml::Doc) -> ast::Name {\n     }\n }\n \n+fn family_to_variant_kind<'tcx>(family: Family) -> Option<ty::VariantKind> {\n+    match family {\n+        Struct(VariantKind::Struct) | Variant(VariantKind::Struct) =>\n+            Some(ty::VariantKind::Struct),\n+        Struct(VariantKind::Tuple) | Variant(VariantKind::Tuple) =>\n+            Some(ty::VariantKind::Tuple),\n+        Struct(VariantKind::Unit) | Variant(VariantKind::Unit) =>\n+            Some(ty::VariantKind::Unit),\n+        _ => None,\n+    }\n+}\n+\n fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike {\n     let fam = item_family(item);\n     match fam {\n@@ -288,9 +294,8 @@ fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike {\n         }\n         ImmStatic => DlDef(def::DefStatic(did, false)),\n         MutStatic => DlDef(def::DefStatic(did, true)),\n-        Struct | TupleStruct | UnitStruct => DlDef(def::DefStruct(did)),\n-        Fn        => DlDef(def::DefFn(did, false)),\n-        CtorFn    => DlDef(def::DefFn(did, true)),\n+        Struct(..) => DlDef(def::DefStruct(did)),\n+        Fn        => DlDef(def::DefFn(did)),\n         Method | StaticMethod => {\n             DlDef(def::DefMethod(did))\n         }\n@@ -299,21 +304,17 @@ fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike {\n                 let trait_did = item_require_parent_item(cdata, item);\n                 DlDef(def::DefAssociatedTy(trait_did, did))\n             } else {\n-                DlDef(def::DefTy(did, false))\n+                DlDef(def::DefTyAlias(did))\n             }\n         }\n         Mod => DlDef(def::DefMod(did)),\n         ForeignMod => DlDef(def::DefForeignMod(did)),\n-        StructVariant => {\n+        Variant(..) => {\n             let enum_did = item_require_parent_item(cdata, item);\n-            DlDef(def::DefVariant(enum_did, did, true))\n-        }\n-        TupleVariant | UnitVariant => {\n-            let enum_did = item_require_parent_item(cdata, item);\n-            DlDef(def::DefVariant(enum_did, did, false))\n+            DlDef(def::DefVariant(enum_did, did))\n         }\n         Trait => DlDef(def::DefTrait(did)),\n-        Enum => DlDef(def::DefTy(did, true)),\n+        Enum => DlDef(def::DefEnum(did)),\n         Impl | DefaultImpl => DlImpl(did),\n         PublicField | InheritedField => DlField,\n     }\n@@ -371,11 +372,9 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                          item_id: DefIndex,\n                          tcx: &ty::ctxt<'tcx>) -> ty::AdtDefMaster<'tcx>\n {\n-    fn family_to_variant_kind<'tcx>(family: Family, tcx: &ty::ctxt<'tcx>) -> ty::VariantKind {\n-        match family {\n-            Struct | StructVariant => ty::VariantKind::Struct,\n-            TupleStruct | TupleVariant => ty::VariantKind::Tuple,\n-            UnitStruct | UnitVariant => ty::VariantKind::Unit,\n+    fn expect_variant_kind<'tcx>(family: Family, tcx: &ty::ctxt<'tcx>) -> ty::VariantKind {\n+        match family_to_variant_kind(family) {\n+            Some(kind) => kind,\n             _ => tcx.sess.bug(&format!(\"unexpected family: {:?}\", family)),\n         }\n     }\n@@ -399,7 +398,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                 name: item_name(intr, item),\n                 fields: get_variant_fields(intr, cdata, item, tcx),\n                 disr_val: disr,\n-                kind: family_to_variant_kind(item_family(item), tcx),\n+                kind: expect_variant_kind(item_family(item), tcx),\n             }\n         }).collect()\n     }\n@@ -433,7 +432,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n             name: item_name(intr, doc),\n             fields: get_variant_fields(intr, cdata, doc, tcx),\n             disr_val: 0,\n-            kind: family_to_variant_kind(item_family(doc), tcx),\n+            kind: expect_variant_kind(item_family(doc), tcx),\n         }\n     }\n \n@@ -444,7 +443,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n             (ty::AdtKind::Enum,\n              get_enum_variants(intr, cdata, doc, tcx))\n         }\n-        Struct | TupleStruct | UnitStruct => {\n+        Struct(..) => {\n             let ctor_did =\n                 reader::maybe_get_doc(doc, tag_items_data_item_struct_ctor).\n                 map_or(did, |ctor_doc| translated_def_id(cdata, ctor_doc));\n@@ -1086,6 +1085,19 @@ pub fn get_associated_consts<'tcx>(intr: Rc<IdentInterner>,\n     }).collect()\n }\n \n+pub fn get_variant_kind(cdata: Cmd, node_id: DefIndex) -> Option<VariantKind>\n+{\n+    let item = cdata.lookup_item(node_id);\n+    family_to_variant_kind(item_family(item))\n+}\n+\n+pub fn get_struct_ctor_def_id(cdata: Cmd, node_id: DefIndex) -> Option<DefId>\n+{\n+    let item = cdata.lookup_item(node_id);\n+    reader::maybe_get_doc(item, tag_items_data_item_struct_ctor).\n+        map(|ctor_doc| translated_def_id(cdata, ctor_doc))\n+}\n+\n /// If node_id is the constructor of a tuple struct, retrieve the NodeId of\n /// the actual type definition, otherwise, return None\n pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,"}, {"sha": "45cbb22e6c95270f3e736125f42364efa5b69148", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -508,15 +508,20 @@ fn encode_field<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n fn encode_info_for_struct_ctor<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                          rbml_w: &mut Encoder,\n                                          name: Name,\n-                                         ctor_id: NodeId,\n+                                         struct_def: &hir::VariantData,\n                                          index: &mut CrateIndex<'tcx>,\n                                          struct_id: NodeId) {\n+    let ctor_id = struct_def.id();\n     let ctor_def_id = ecx.tcx.map.local_def_id(ctor_id);\n \n     index.record(ctor_def_id, rbml_w);\n     rbml_w.start_tag(tag_items_data_item);\n     encode_def_id_and_key(ecx, rbml_w, ctor_def_id);\n-    encode_family(rbml_w, 'o');\n+    encode_family(rbml_w, match *struct_def {\n+        hir::VariantData::Struct(..) => 'S',\n+        hir::VariantData::Tuple(..) => 's',\n+        hir::VariantData::Unit(..) => 'u',\n+    });\n     encode_bounds_and_type_for_item(rbml_w, ecx, index, ctor_id);\n     encode_name(rbml_w, name);\n     ecx.tcx.map.with_path(ctor_id, |path| encode_path(rbml_w, path));\n@@ -1084,7 +1089,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n         // If this is a tuple-like struct, encode the type of the constructor.\n         if !struct_def.is_struct() {\n-            encode_info_for_struct_ctor(ecx, rbml_w, item.name, struct_def.id(), index, item.id);\n+            encode_info_for_struct_ctor(ecx, rbml_w, item.name, struct_def, index, item.id);\n         }\n       }\n       hir::ItemDefaultImpl(unsafety, _) => {"}, {"sha": "b6fbe967f4f148d039ecdcd295f400f47ce13a89", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -67,10 +67,10 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                         // Tuple-like ADTs are represented as ExprCall. We convert them here.\n                         expr_ty.ty_adt_def().and_then(|adt_def|{\n                             match cx.tcx.def_map.borrow()[&fun.id].full_def() {\n-                                def::DefVariant(_, variant_id, false) => {\n+                                def::DefVariant(_, variant_id) => {\n                                     Some((adt_def, adt_def.variant_index_with_id(variant_id)))\n                                 },\n-                                def::DefStruct(_) => {\n+                                def::DefStruct(..) => {\n                                     Some((adt_def, 0))\n                                 },\n                                 _ => None\n@@ -231,7 +231,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     }\n                     ty::TyEnum(adt, substs) => {\n                         match cx.tcx.def_map.borrow()[&self.id].full_def() {\n-                            def::DefVariant(enum_id, variant_id, _) => {\n+                            def::DefVariant(enum_id, variant_id) => {\n                                 debug_assert!(adt.did == enum_id);\n                                 let index = adt.variant_index_with_id(variant_id);\n                                 let field_refs = field_refs(&adt.variants[index], fields);\n@@ -573,7 +573,7 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n     let def = cx.tcx.def_map.borrow()[&expr.id].full_def();\n     let (def_id, kind) = match def {\n         // A regular function.\n-        def::DefFn(def_id, _) => (def_id, ItemKind::Function),\n+        def::DefFn(def_id) => (def_id, ItemKind::Function),\n         def::DefMethod(def_id) => (def_id, ItemKind::Method),\n         def::DefStruct(def_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A tuple-struct constructor. Should only be reached if not called in the same\n@@ -590,7 +590,7 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n             },\n             ref sty => panic!(\"unexpected sty: {:?}\", sty)\n         },\n-        def::DefVariant(enum_id, variant_id, false) => match cx.tcx.node_id_to_type(expr.id).sty {\n+        def::DefVariant(enum_id, variant_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A variant constructor. Should only be reached if not called in the same\n             // expression.\n             ty::TyBareFn(..) => (variant_id, ItemKind::Function),"}, {"sha": "855d217f14bb57fc97054e45a3dbe57ba3cab3f9", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -290,7 +290,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                        -> PatternKind<'tcx> {\n         let def = self.cx.tcx.def_map.borrow().get(&pat.id).unwrap().full_def();\n         match def {\n-            def::DefVariant(enum_id, variant_id, _) => {\n+            def::DefVariant(enum_id, variant_id) => {\n                 let adt_def = self.cx.tcx.lookup_adt_def(enum_id);\n                 if adt_def.variants.len() > 1 {\n                     PatternKind::Variant {\n@@ -303,9 +303,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                 }\n             }\n \n-            // NB: resolving to DefStruct means the struct *constructor*,\n-            // not the struct as a type.\n-            def::DefStruct(..) | def::DefTy(..) => {\n+            def::DefStruct(..) | def::DefTyAlias(..) => {\n                 PatternKind::Leaf { subpatterns: subpatterns }\n             }\n "}, {"sha": "995b0604257b1cbda7110e7a9b1a2e45c49ef01d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -811,8 +811,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             def::DefConst(..) => ck(\"const\"),\n             def::DefAssociatedConst(..) => ck(\"associated const\"),\n             def::DefVariant(..) => ck(\"variant\"),\n-            def::DefTy(_, false) => ck(\"type\"),\n-            def::DefTy(_, true) => ck(\"enum\"),\n+            def::DefTyAlias(..) => ck(\"type\"),\n+            def::DefEnum(..) => ck(\"enum\"),\n             def::DefTrait(..) => ck(\"trait\"),\n             def::DefStruct(..) => ck(\"struct\"),\n             def::DefMethod(..) => ck(\"method\"),\n@@ -887,7 +887,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n             }\n             hir::ExprPath(..) => {\n \n-                if let def::DefStruct(_) = self.tcx.resolve_expr(expr) {\n+                if let def::DefStruct(..) = self.tcx.resolve_expr(expr) {\n                     let expr_ty = self.tcx.expr_ty(expr);\n                     let def = match expr_ty.sty {\n                         ty::TyBareFn(_, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n@@ -1515,7 +1515,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                     // free type aliases, but this isn't done yet.\n                     return\n                 }\n-                def::DefStruct(def_id) | def::DefTy(def_id, _) |\n+                def::DefStruct(def_id) | def::DefEnum(def_id) | def::DefTyAlias(def_id) |\n                 def::DefTrait(def_id) | def::DefAssociatedTy(def_id, _) => {\n                     // Non-local means public (private items can't leave their crate, modulo bugs)\n                     if let Some(node_id) = self.tcx.map.as_local_node_id(def_id) {"}, {"sha": "641bb6e8e6abe8f8200fe1febd614acd8ab261d1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -31,6 +31,7 @@ use self::DuplicateCheckingMode::*;\n use rustc::middle::cstore::{CrateStore, ChildItem, DlDef, DlField, DlImpl};\n use rustc::middle::def::*;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::middle::ty::VariantKind;\n \n use syntax::ast::{Name, NodeId};\n use syntax::attr::AttrMetaMethods;\n@@ -359,7 +360,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             ItemFn(_, _, _, _, _, _) => {\n                 let name_bindings = self.add_child(name, parent, ForbidDuplicateValues, sp);\n \n-                let def = DefFn(self.ast_map.local_def_id(item.id), false);\n+                let def = DefFn(self.ast_map.local_def_id(item.id));\n                 name_bindings.define_value(def, sp, modifiers);\n                 parent\n             }\n@@ -372,7 +373,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                    sp);\n \n                 let parent_link = ModuleParentLink(parent, name);\n-                let def = DefTy(self.ast_map.local_def_id(item.id), false);\n+                let def = DefTyAlias(self.ast_map.local_def_id(item.id));\n                 let module = self.new_module(parent_link, Some(def), false, is_public);\n                 name_bindings.define_module(module, sp);\n                 parent\n@@ -385,7 +386,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                    sp);\n \n                 let parent_link = ModuleParentLink(parent, name);\n-                let def = DefTy(self.ast_map.local_def_id(item.id), true);\n+                let def = DefEnum(self.ast_map.local_def_id(item.id));\n                 let module = self.new_module(parent_link, Some(def), false, is_public);\n                 name_bindings.define_module(module.clone(), sp);\n \n@@ -414,7 +415,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let name_bindings = self.add_child(name, parent, forbid, sp);\n \n                 // Define a name in the type namespace.\n-                name_bindings.define_type(DefTy(self.ast_map.local_def_id(item.id), false),\n+                name_bindings.define_type(DefStruct(self.ast_map.local_def_id(item.id)),\n                                           sp,\n                                           modifiers);\n \n@@ -502,26 +503,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                        parent: Module<'b>,\n                                        variant_modifiers: DefModifiers) {\n         let name = variant.node.name;\n-        let is_exported = if variant.node.data.is_struct() {\n+        if variant.node.data.is_struct() {\n             // Not adding fields for variants as they are not accessed with a self receiver\n             let variant_def_id = self.ast_map.local_def_id(variant.node.data.id());\n             self.structs.insert(variant_def_id, Vec::new());\n-            true\n-        } else {\n-            false\n-        };\n+        }\n \n         let child = self.add_child(name, parent, ForbidDuplicateTypesAndValues, variant.span);\n         // variants are always treated as importable to allow them to be glob\n         // used\n-        child.define_value(DefVariant(item_id,\n-                                      self.ast_map.local_def_id(variant.node.data.id()),\n-                                      is_exported),\n+        child.define_value(DefVariant(item_id, self.ast_map.local_def_id(variant.node.data.id())),\n                            variant.span,\n                            DefModifiers::PUBLIC | DefModifiers::IMPORTABLE | variant_modifiers);\n-        child.define_type(DefVariant(item_id,\n-                                     self.ast_map.local_def_id(variant.node.data.id()),\n-                                     is_exported),\n+        child.define_type(DefVariant(item_id, self.ast_map.local_def_id(variant.node.data.id())),\n                           variant.span,\n                           DefModifiers::PUBLIC | DefModifiers::IMPORTABLE | variant_modifiers);\n     }\n@@ -541,7 +535,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n         let def = match foreign_item.node {\n             ForeignItemFn(..) => {\n-                DefFn(self.ast_map.local_def_id(foreign_item.id), false)\n+                DefFn(self.ast_map.local_def_id(foreign_item.id))\n             }\n             ForeignItemStatic(_, m) => {\n                 DefStatic(self.ast_map.local_def_id(foreign_item.id), m)\n@@ -591,12 +585,18 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         if is_exported {\n             self.external_exports.insert(def.def_id());\n         }\n+        let is_struct_ctor = if let DefStruct(def_id) = def {\n+            self.session.cstore.tuple_struct_definition_if_ctor(def_id).is_some()\n+        } else {\n+            false\n+        };\n \n         match def {\n             DefMod(_) |\n             DefForeignMod(_) |\n-            DefStruct(_) |\n-            DefTy(..) => {\n+            DefStruct(..) |\n+            DefEnum(..) |\n+            DefTyAlias(..) if !is_struct_ctor => {\n                 if let Some(module_def) = child_name_bindings.type_ns.module() {\n                     debug!(\"(building reduced graph for external crate) already created module\");\n                     module_def.def.set(Some(def));\n@@ -614,25 +614,20 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n         match def {\n             DefMod(_) | DefForeignMod(_) => {}\n-            DefVariant(_, variant_id, is_struct) => {\n+            DefVariant(_, variant_id) => {\n                 debug!(\"(building reduced graph for external crate) building variant {}\",\n                        final_ident);\n                 // variants are always treated as importable to allow them to be\n                 // glob used\n                 let modifiers = DefModifiers::PUBLIC | DefModifiers::IMPORTABLE;\n-                if is_struct {\n+                if self.session.cstore.variant_kind(variant_id) == Some(VariantKind::Struct) {\n                     child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n                     // Not adding fields for variants as they are not accessed with a self receiver\n                     self.structs.insert(variant_id, Vec::new());\n                 } else {\n                     child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n                 }\n             }\n-            DefFn(ctor_id, true) => {\n-                child_name_bindings.define_value(\n-                self.session.cstore.tuple_struct_definition_if_ctor(ctor_id)\n-                    .map_or(def, |_| DefStruct(ctor_id)), DUMMY_SP, modifiers);\n-            }\n             DefFn(..) |\n             DefStatic(..) |\n             DefConst(..) |\n@@ -680,7 +675,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let module = self.new_module(parent_link, Some(def), true, is_public);\n                 child_name_bindings.define_module(module, DUMMY_SP);\n             }\n-            DefTy(..) | DefAssociatedTy(..) => {\n+            DefEnum(..) | DefTyAlias(..) | DefAssociatedTy(..) => {\n                 debug!(\"(building reduced graph for external crate) building type {}\",\n                        final_ident);\n \n@@ -689,24 +684,29 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     _ => modifiers & !DefModifiers::IMPORTABLE,\n                 };\n \n-                if let DefTy(..) = def {\n+                if let DefEnum(..) = def {\n+                    child_name_bindings.type_ns.set_modifiers(modifiers);\n+                } else if let DefTyAlias(..) = def {\n                     child_name_bindings.type_ns.set_modifiers(modifiers);\n                 } else {\n                     child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n                 }\n             }\n+            DefStruct(..) if is_struct_ctor => {\n+                // Do nothing\n+            }\n             DefStruct(def_id) => {\n                 debug!(\"(building reduced graph for external crate) building type and value for \\\n                         {}\",\n                        final_ident);\n-                child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n-                let fields = self.session.cstore.struct_field_names(def_id);\n \n-                if fields.is_empty() {\n-                    child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n+                child_name_bindings.define_type(def, DUMMY_SP, modifiers);\n+                if let Some(ctor_def_id) = self.session.cstore.struct_ctor_def_id(def_id) {\n+                    child_name_bindings.define_value(DefStruct(ctor_def_id), DUMMY_SP, modifiers);\n                 }\n \n                 // Record the def ID and fields of this struct.\n+                let fields = self.session.cstore.struct_field_names(def_id);\n                 self.structs.insert(def_id, fields);\n             }\n             DefLocal(..) |"}, {"sha": "aebe00f3b1f628d86ac4d3806cb3bffc2b7a7c26", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -2076,7 +2076,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 // check for imports shadowing primitive types\n                 let check_rename = |this: &Self, id, name| {\n                     match this.def_map.borrow().get(&id).map(|d| d.full_def()) {\n-                        Some(DefTy(..)) | Some(DefStruct(..)) | Some(DefTrait(..)) | None => {\n+                        Some(DefEnum(..)) | Some(DefTyAlias(..)) | Some(DefStruct(..)) |\n+                        Some(DefTrait(..)) | None => {\n                             this.check_if_primitive_type_name(name, item.span);\n                         }\n                         _ => {}\n@@ -2236,7 +2237,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                                                                       path_depth)));\n \n                 // If it's a typedef, give a note\n-                if let DefTy(..) = path_res.base_def {\n+                if let DefTyAlias(..) = path_res.base_def {\n                     err.span_note(trait_path.span,\n                                   \"`type` aliases cannot be used for traits\");\n                 }\n@@ -3425,9 +3426,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         if allowed == Everything {\n             // Look for a field with the same name in the current self_type.\n             match self.def_map.borrow().get(&node_id).map(|d| d.full_def()) {\n-                Some(DefTy(did, _)) |\n+                Some(DefEnum(did)) |\n+                Some(DefTyAlias(did)) |\n                 Some(DefStruct(did)) |\n-                Some(DefVariant(_, did, _)) => match self.structs.get(&did) {\n+                Some(DefVariant(_, did)) => match self.structs.get(&did) {\n                     None => {}\n                     Some(fields) => {\n                         if fields.iter().any(|&field_name| name == field_name) {\n@@ -3518,7 +3520,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 // scopes looking for it.\n                 if let Some(path_res) = resolution {\n                     // Check if struct variant\n-                    if let DefVariant(_, _, true) = path_res.base_def {\n+                    let is_struct_variant = if let DefVariant(_, variant_id) = path_res.base_def {\n+                        self.structs.contains_key(&variant_id)\n+                    } else {\n+                        false\n+                    };\n+                    if is_struct_variant {\n+                        let _ = self.structs.contains_key(&path_res.base_def.def_id());\n                         let path_name = path_names_to_string(path, 0);\n \n                         let mut err = resolve_struct_error(self,\n@@ -3561,7 +3569,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                     self.record_def(expr.id, err_path_resolution());\n                     match type_res.map(|r| r.base_def) {\n-                        Some(DefTy(struct_id, _)) if self.structs.contains_key(&struct_id) => {\n+                        Some(DefStruct(..)) => {\n                             let mut err = resolve_struct_error(self,\n                                 expr.span,\n                                 ResolutionError::StructVariantUsedAsFunction(&*path_name));"}, {"sha": "b4775a5150e1e37f1dffbfa35531d1986178964e", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -256,15 +256,16 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         match def {\n             def::DefMod(_) |\n             def::DefForeignMod(_) => Some(recorder::ModRef),\n-            def::DefStruct(_) => Some(recorder::TypeRef),\n-            def::DefTy(..) |\n+            def::DefStruct(..) => Some(recorder::TypeRef),\n+            def::DefEnum(..) |\n+            def::DefTyAlias(..) |\n             def::DefAssociatedTy(..) |\n             def::DefTrait(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n             def::DefConst(_) |\n             def::DefAssociatedConst(..) |\n             def::DefLocal(..) |\n-            def::DefVariant(_, _, _) |\n+            def::DefVariant(..) |\n             def::DefUpvar(..) => Some(recorder::VarRef),\n \n             def::DefFn(..) => Some(recorder::FnRef),\n@@ -691,7 +692,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             def::DefStatic(_,_) |\n             def::DefConst(..) |\n             def::DefAssociatedConst(..) |\n-            def::DefStruct(_) |\n+            def::DefStruct(..) |\n             def::DefVariant(..) |\n             def::DefFn(..) => self.write_sub_paths_truncated(path, false),\n             _ => {}\n@@ -1174,7 +1175,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                             \"qualified path for local variable def in arm\");\n                     self.fmt.variable_str(p.span, Some(p.span), id, &path_to_string(p), &value, \"\")\n                 }\n-                def::DefVariant(..) | def::DefTy(..) | def::DefStruct(..) => {\n+                def::DefVariant(..) | def::DefEnum(..) |\n+                def::DefTyAlias(..) | def::DefStruct(..) => {\n                     paths_to_process.push((id, p.clone(), Some(ref_kind)))\n                 }\n                 // FIXME(nrc) what are these doing here?"}, {"sha": "f94bf65ab608f47569ee68e8eed8f4736464d4b7", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -547,7 +547,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             def::DefStruct(def_id) |\n-            def::DefTy(def_id, _) |\n+            def::DefEnum(def_id) |\n+            def::DefTyAlias(def_id) |\n             def::DefTrait(def_id) |\n             def::DefTyParam(_, _, def_id, _) => {\n                 Some(Data::TypeRefData(TypeRefData {\n@@ -591,7 +592,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     decl_id: Some(decl_id),\n                 }))\n             }\n-            def::DefFn(def_id, _) => {\n+            def::DefFn(def_id) => {\n                 Some(Data::FunctionCallData(FunctionCallData {\n                     ref_id: def_id,\n                     span: sub_span.unwrap(),"}, {"sha": "97212f24a8f55eb6a28c27a934119b0e357a5840", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -669,7 +669,7 @@ fn get_branches<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 // This is either an enum variant or a variable binding.\n                 let opt_def = tcx.def_map.borrow().get(&cur.id).map(|d| d.full_def());\n                 match opt_def {\n-                    Some(def::DefVariant(enum_id, var_id, _)) => {\n+                    Some(def::DefVariant(enum_id, var_id)) => {\n                         let variant = tcx.lookup_adt_def(enum_id).variant_with_id(var_id);\n                         Variant(Disr::from(variant.disr_val),\n                                 adt::represent_node(bcx, cur.id),\n@@ -1851,7 +1851,7 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         hir::PatEnum(_, ref sub_pats) => {\n             let opt_def = bcx.tcx().def_map.borrow().get(&pat.id).map(|d| d.full_def());\n             match opt_def {\n-                Some(def::DefVariant(enum_id, var_id, _)) => {\n+                Some(def::DefVariant(enum_id, var_id)) => {\n                     let repr = adt::represent_node(bcx, pat.id);\n                     let vinfo = ccx.tcx().lookup_adt_def(enum_id).variant_with_id(var_id);\n                     let args = extract_variant_args(bcx,"}, {"sha": "600b90c1b78ea69dc4755d8c4f95b3d797e65f0b", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -139,7 +139,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n         debug!(\"trans_def(def={:?}, ref_expr={:?})\", def, ref_expr);\n         let expr_ty = common::node_id_type(bcx, ref_expr.id);\n         match def {\n-            def::DefFn(did, _) if {\n+            def::DefFn(did) if {\n                 let maybe_def_id = inline::get_local_instance(bcx.ccx(), did);\n                 let maybe_ast_node = maybe_def_id.and_then(|def_id| {\n                     let node_id = bcx.tcx().map.as_local_node_id(def_id).unwrap();\n@@ -156,7 +156,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                     ty: expr_ty\n                 }\n             }\n-            def::DefFn(did, _) if match expr_ty.sty {\n+            def::DefFn(did) if match expr_ty.sty {\n                 ty::TyBareFn(_, ref f) => f.abi == synabi::RustIntrinsic ||\n                                           f.abi == synabi::PlatformIntrinsic,\n                 _ => false\n@@ -168,7 +168,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                 let node_id = bcx.tcx().map.as_local_node_id(def_id).unwrap();\n                 Callee { bcx: bcx, data: Intrinsic(node_id, substs), ty: expr_ty }\n             }\n-            def::DefFn(did, _) => {\n+            def::DefFn(did) => {\n                 fn_callee(bcx, trans_fn_ref(bcx.ccx(), did, ExprId(ref_expr.id),\n                                             bcx.fcx.param_substs))\n             }\n@@ -190,7 +190,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                 };\n                 fn_callee(bcx, fn_datum)\n             }\n-            def::DefVariant(tid, vid, _) => {\n+            def::DefVariant(tid, vid) => {\n                 let vinfo = bcx.tcx().lookup_adt_def(tid).variant_with_id(vid);\n                 assert_eq!(vinfo.kind(), ty::VariantKind::Tuple);\n \n@@ -200,7 +200,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                     ty: expr_ty\n                 }\n             }\n-            def::DefStruct(_) => {\n+            def::DefStruct(..) => {\n                 Callee {\n                     bcx: bcx,\n                     data: NamedTupleConstructor(Disr(0)),\n@@ -215,8 +215,8 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)\n                 datum_callee(bcx, ref_expr)\n             }\n             def::DefMod(..) | def::DefForeignMod(..) | def::DefTrait(..) |\n-            def::DefTy(..) | def::DefPrimTy(..) | def::DefAssociatedTy(..) |\n-            def::DefLabel(..) | def::DefTyParam(..) |\n+            def::DefEnum(..) | def::DefTyAlias(..) | def::DefPrimTy(..) |\n+            def::DefAssociatedTy(..) | def::DefLabel(..) | def::DefTyParam(..) |\n             def::DefSelfTy(..) | def::DefErr => {\n                 bcx.tcx().sess.span_bug(\n                     ref_expr.span,"}, {"sha": "821f2f74c7dd8de5c1ad240fa001e0075ef2d423", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -894,7 +894,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n                     const_deref_ptr(cx, try!(get_const_val(cx, def_id, e, param_substs)))\n                 }\n-                def::DefVariant(enum_did, variant_did, _) => {\n+                def::DefVariant(enum_did, variant_did) => {\n                     let vinfo = cx.tcx().lookup_adt_def(enum_did).variant_with_id(variant_did);\n                     match vinfo.kind() {\n                         ty::VariantKind::Unit => {\n@@ -909,7 +909,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         }\n                     }\n                 }\n-                def::DefStruct(_) => {\n+                def::DefStruct(..) => {\n                     if let ty::TyBareFn(..) = ety.sty {\n                         // Tuple struct.\n                         expr::trans_def_fn_unadjusted(cx, e, def, param_substs).val\n@@ -938,7 +938,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let def = cx.tcx().def_map.borrow()[&callee.id].full_def();\n             let arg_vals = try!(map_list(args));\n             match def {\n-                def::DefFn(did, _) | def::DefMethod(did) => {\n+                def::DefFn(did) | def::DefMethod(did) => {\n                     try!(const_fn_call(\n                         cx,\n                         ExprId(callee.id),\n@@ -948,15 +948,15 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         trueconst,\n                     ))\n                 }\n-                def::DefStruct(_) => {\n+                def::DefStruct(..) => {\n                     if ety.is_simd() {\n                         C_vector(&arg_vals[..])\n                     } else {\n                         let repr = adt::represent_type(cx, ety);\n                         adt::trans_const(cx, &*repr, Disr(0), &arg_vals[..])\n                     }\n                 }\n-                def::DefVariant(enum_did, variant_did, _) => {\n+                def::DefVariant(enum_did, variant_did) => {\n                     let repr = adt::represent_type(cx, ety);\n                     let vinfo = cx.tcx().lookup_adt_def(enum_did).variant_with_id(variant_did);\n                     adt::trans_const(cx,"}, {"sha": "2dcc4a7e69f78249bbbfa25717cdf4f3d7455a93", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -910,7 +910,7 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_def_lvalue\");\n     match def {\n         def::DefFn(..) | def::DefMethod(..) |\n-        def::DefStruct(_) | def::DefVariant(..) => {\n+        def::DefStruct(..) | def::DefVariant(..) => {\n             let datum = trans_def_fn_unadjusted(bcx.ccx(), ref_expr, def,\n                                                 bcx.fcx.param_substs);\n             DatumBlock::new(bcx, datum.to_expr_datum())\n@@ -1283,7 +1283,7 @@ fn trans_def_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     };\n \n     match def {\n-        def::DefVariant(tid, vid, _) => {\n+        def::DefVariant(tid, vid) => {\n             let variant = bcx.tcx().lookup_adt_def(tid).variant_with_id(vid);\n             if let ty::VariantKind::Tuple = variant.kind() {\n                 // N-ary variant.\n@@ -1300,7 +1300,7 @@ fn trans_def_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 return bcx;\n             }\n         }\n-        def::DefStruct(_) => {\n+        def::DefStruct(..) => {\n             let ty = expr_ty(bcx, ref_expr);\n             match ty.sty {\n                 ty::TyStruct(def, _) if def.has_dtor() => {\n@@ -1327,8 +1327,8 @@ pub fn trans_def_fn_unadjusted<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let _icx = push_ctxt(\"trans_def_datum_unadjusted\");\n \n     match def {\n-        def::DefFn(did, _) |\n-        def::DefStruct(did) | def::DefVariant(_, did, _) => {\n+        def::DefFn(did) |\n+        def::DefStruct(did) | def::DefVariant(_, did) => {\n             callee::trans_fn_ref(ccx, did, ExprId(ref_expr.id), param_substs)\n         }\n         def::DefMethod(method_did) => {\n@@ -2587,7 +2587,7 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n     match expr.node {\n         hir::ExprPath(..) => {\n             match tcx.resolve_expr(expr) {\n-                def::DefStruct(_) | def::DefVariant(..) => {\n+                def::DefStruct(..) | def::DefVariant(..) => {\n                     if let ty::TyBareFn(..) = tcx.node_id_to_type(expr.id).sty {\n                         // ctor function\n                         ExprKind::RvalueDatum\n@@ -2596,12 +2596,6 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n                     }\n                 }\n \n-                // Special case: A unit like struct's constructor must be called without () at the\n-                // end (like `UnitStruct`) which means this is an ExprPath to a DefFn. But in case\n-                // of unit structs this is should not be interpreted as function pointer but as\n-                // call to the constructor.\n-                def::DefFn(_, true) => ExprKind::RvalueDps,\n-\n                 // Fn pointers are just scalar values.\n                 def::DefFn(..) | def::DefMethod(..) => ExprKind::RvalueDatum,\n "}, {"sha": "69c6cf4bb392bb479791e1a6406c135fc5695ca1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1471,7 +1471,7 @@ fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                      projection_bounds,\n                                      &[])\n         }\n-        def::DefTy(did, _) | def::DefStruct(did) => {\n+        def::DefEnum(did) | def::DefTyAlias(did) | def::DefStruct(did) => {\n             prohibit_type_params(tcx, base_segments.split_last().unwrap().1);\n             ast_path_to_ty(this,\n                            rscope,"}, {"sha": "78853260789fe3098511bf51be953f062385a3ab", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -693,10 +693,12 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n \n     let real_path_ty = fcx.node_ty(pat.id);\n     let (arg_tys, kind_name): (Vec<_>, &'static str) = match real_path_ty.sty {\n-        ty::TyEnum(enum_def, expected_substs)\n-            if def == def::DefVariant(enum_def.did, def.def_id(), false) =>\n-        {\n+        ty::TyEnum(enum_def, expected_substs) => {\n             let variant = enum_def.variant_of_def(def);\n+            if variant.kind() == ty::VariantKind::Struct {\n+                report_bad_struct_kind(false);\n+                return;\n+            }\n             if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n                 // Matching unit variants with tuple variant patterns (`UnitVariant(..)`)\n                 // is allowed for backward compatibility."}, {"sha": "35a1b4ed47d46b3aea36a31fb9e0a29b760f7aa2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1421,11 +1421,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               -> Option<(ty::AdtDef<'tcx>, ty::VariantDef<'tcx>)>\n     {\n         let (adt, variant) = match def {\n-            def::DefVariant(enum_id, variant_id, _) => {\n+            def::DefVariant(enum_id, variant_id) => {\n                 let adt = self.tcx().lookup_adt_def(enum_id);\n                 (adt, adt.variant_with_id(variant_id))\n             }\n-            def::DefTy(did, _) | def::DefStruct(did) => {\n+            def::DefStruct(did) | def::DefTyAlias(did) => {\n                 let typ = self.tcx().lookup_item_type(did);\n                 if let ty::TyStruct(adt, _) = typ.ty.sty {\n                     (adt, adt.struct_variant())\n@@ -4271,13 +4271,14 @@ fn type_scheme_and_predicates_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             (ty::TypeScheme { generics: ty::Generics::empty(), ty: typ },\n              ty::GenericPredicates::empty())\n         }\n-        def::DefFn(id, _) | def::DefMethod(id) |\n-        def::DefStatic(id, _) | def::DefVariant(_, id, _) |\n+        def::DefFn(id) | def::DefMethod(id) |\n+        def::DefStatic(id, _) | def::DefVariant(_, id) |\n         def::DefStruct(id) | def::DefConst(id) | def::DefAssociatedConst(id) => {\n             (fcx.tcx().lookup_item_type(id), fcx.tcx().lookup_predicates(id))\n         }\n         def::DefTrait(_) |\n-        def::DefTy(..) |\n+        def::DefEnum(..) |\n+        def::DefTyAlias(..) |\n         def::DefAssociatedTy(..) |\n         def::DefPrimTy(_) |\n         def::DefTyParam(..) |\n@@ -4385,7 +4386,8 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefSelfTy(..) |\n         def::DefStruct(..) |\n         def::DefVariant(..) |\n-        def::DefTy(..) |\n+        def::DefEnum(..) |\n+        def::DefTyAlias(..) |\n         def::DefAssociatedTy(..) |\n         def::DefTrait(..) |\n         def::DefPrimTy(..) |"}, {"sha": "e20c3932d8886d7f4f266db986c59a1dd4deabd7", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -1007,11 +1007,7 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n         name: name,\n         disr_val: disr_val,\n         fields: fields,\n-        kind: match *def {\n-            hir::VariantData::Struct(..) => ty::VariantKind::Struct,\n-            hir::VariantData::Tuple(..) => ty::VariantKind::Tuple,\n-            hir::VariantData::Unit(..) => ty::VariantKind::Unit,\n-        }\n+        kind: VariantKind::from_variant_data(def),\n     }\n }\n "}, {"sha": "7784fc70a1e05ed7d8db0617864e17a2240dbb49", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -76,22 +76,23 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n             record_extern_fqn(cx, did, clean::TypeTrait);\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n-        def::DefFn(did, false) => {\n-            // If this function is a tuple struct constructor, we just skip it\n+        def::DefFn(did) => {\n             record_extern_fqn(cx, did, clean::TypeFunction);\n             clean::FunctionItem(build_external_function(cx, tcx, did))\n         }\n-        def::DefStruct(did) => {\n+        def::DefStruct(did)\n+                // If this is a struct constructor, we skip it\n+                if tcx.sess.cstore.tuple_struct_definition_if_ctor(did).is_none() => {\n             record_extern_fqn(cx, did, clean::TypeStruct);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::StructItem(build_struct(cx, tcx, did))\n         }\n-        def::DefTy(did, false) => {\n+        def::DefTyAlias(did) => {\n             record_extern_fqn(cx, did, clean::TypeTypedef);\n             ret.extend(build_impls(cx, tcx, did));\n             build_type(cx, tcx, did)\n         }\n-        def::DefTy(did, true) => {\n+        def::DefEnum(did) => {\n             record_extern_fqn(cx, did, clean::TypeEnum);\n             ret.extend(build_impls(cx, tcx, did));\n             build_type(cx, tcx, did)"}, {"sha": "6316bf1d7e87cc70843bd9d8bf9763164dae51ed", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -2638,14 +2638,14 @@ fn register_def(cx: &DocContext, def: def::Def) -> DefId {\n     debug!(\"register_def({:?})\", def);\n \n     let (did, kind) = match def {\n-        def::DefFn(i, _) => (i, TypeFunction),\n-        def::DefTy(i, false) => (i, TypeTypedef),\n-        def::DefTy(i, true) => (i, TypeEnum),\n+        def::DefFn(i) => (i, TypeFunction),\n+        def::DefTyAlias(i) => (i, TypeTypedef),\n+        def::DefEnum(i) => (i, TypeEnum),\n         def::DefTrait(i) => (i, TypeTrait),\n         def::DefStruct(i) => (i, TypeStruct),\n         def::DefMod(i) => (i, TypeModule),\n         def::DefStatic(i, _) => (i, TypeStatic),\n-        def::DefVariant(i, _, _) => (i, TypeEnum),\n+        def::DefVariant(i, _) => (i, TypeEnum),\n         def::DefSelfTy(Some(def_id), _) => (def_id, TypeTrait),\n         def::DefSelfTy(_, Some((impl_id, _))) => return cx.map.local_def_id(impl_id),\n         _ => return def.def_id()"}, {"sha": "61e4a1ea3975ccd9d2f966421bd4ef2a92ad871d", "filename": "src/test/compile-fail/empty-struct-braces-expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -29,9 +29,8 @@ fn main() {\n     let e3 = E::Empty3; //~ ERROR `E::Empty3` is the name of a struct or struct variant\n     let e3 = E::Empty3(); //~ ERROR `E::Empty3` is the name of a struct or struct variant\n \n-    // FIXME: non-local struct kind should be known early (e.g. kept in `DefStruct`)\n-    // let xe1 = XEmpty1; // ERROR `XEmpty1` is the name of a struct or struct variant\n-    let xe1 = XEmpty1(); //~ ERROR expected function, found `empty_struct::XEmpty1`\n+    let xe1 = XEmpty1; //~ ERROR `XEmpty1` is the name of a struct or struct variant\n+    let xe1 = XEmpty1(); //~ ERROR `XEmpty1` is the name of a struct or struct variant\n     let xe3 = XE::Empty3; //~ ERROR no associated item named `Empty3` found for type\n     let xe3 = XE::Empty3(); //~ ERROR no associated item named `Empty3` found for type\n }"}, {"sha": "ac6fbc7e06d5b68d60ff9fe3ad9c2d577904db17", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -34,6 +34,6 @@ fn main() {\n         Empty1(..) => () //~ ERROR unresolved enum variant, struct or const `Empty1`\n     }\n     match xe1 {\n-        XEmpty1(..) => () //~ ERROR `XEmpty1` does not name a tuple variant or a tuple struct\n+        XEmpty1(..) => () //~ ERROR unresolved enum variant, struct or const `XEmpty1`\n     }\n }"}, {"sha": "708eea39a9571b73dd58d24b5ebc4cd13cef3501", "filename": "src/test/compile-fail/issue-10545.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fissue-10545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fissue-10545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10545.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -14,7 +14,7 @@ mod a {\n     impl S { }\n }\n \n-fn foo(_: a::S) { //~ ERROR: type `S` is private\n+fn foo(_: a::S) { //~ ERROR: struct `S` is private\n }\n \n fn main() {}"}, {"sha": "593068c2aea9dcdc2e0b95e88d66fdc8b0036a74", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -164,7 +164,7 @@ pub mod mytest {\n     // Even though the inner `A` struct is a publicly exported item (usable from\n     // external crates through `foo::foo`, it should not be accessible through\n     // its definition path (which has the private `i` module).\n-    use self::foo::i::A; //~ ERROR: type `A` is inaccessible\n+    use self::foo::i::A; //~ ERROR: struct `A` is inaccessible\n                          //~^ NOTE: module `i` is private\n \n     pub mod foo {"}, {"sha": "2ff48b73e294c415bcb02f51f05046d8dbb02f95", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -28,7 +28,7 @@ mod inner {\n }\n \n fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n-    //~^ ERROR: type `A` is private\n+    //~^ ERROR: struct `A` is private\n     //~^^ ERROR: struct `A` is private\n \n     a.a;"}, {"sha": "214a2a371baaf63d882403b03dc8b588e511d5e4", "filename": "src/test/compile-fail/xcrate-unit-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fxcrate-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Fcompile-fail%2Fxcrate-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-unit-struct.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -16,6 +16,7 @@\n extern crate xcrate_unit_struct;\n \n fn main() {\n-    let _ = xcrate_unit_struct::StructWithFields; //~ ERROR: unresolved name\n+    let _ = xcrate_unit_struct::StructWithFields;\n+    //~^ ERROR: `xcrate_unit_struct::StructWithFields` is the name of a struct or struct variant\n     let _ = xcrate_unit_struct::Struct;\n }"}, {"sha": "b8282ae1c4dd5484cc18412376d1726f55841bc5", "filename": "src/test/run-pass/associated-const-match-patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceaaa1bc3388e9a198af198729a6a8821ce54ffb/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs?ref=ceaaa1bc3388e9a198af198729a6a8821ce54ffb", "patch": "@@ -11,6 +11,7 @@\n #![feature(associated_consts)]\n \n struct Foo;\n+type FooWorkaround = Foo;\n \n enum Bar {\n     Var1,\n@@ -42,7 +43,7 @@ fn main() {\n     });\n     // Trait impl\n     assert!(match Bar::Var1 {\n-        Foo::THEBAR => true,\n+        FooWorkaround::THEBAR => true,\n         _ => false,\n     });\n     assert!(match Bar::Var1 {"}]}