{"sha": "7f5adddb2528be322c02cea44137d4192db3b8d5", "node_id": "C_kwDOAAsO6NoAKDdmNWFkZGRiMjUyOGJlMzIyYzAyY2VhNDQxMzdkNDE5MmRiM2I4ZDU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T18:10:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-20T18:23:28Z"}, "message": "enable fuzzy_provenance_casts lint in libstd", "tree": {"sha": "a766282abd12785968b166e1b1def6e73ec983f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a766282abd12785968b166e1b1def6e73ec983f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5adddb2528be322c02cea44137d4192db3b8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5adddb2528be322c02cea44137d4192db3b8d5", "html_url": "https://github.com/rust-lang/rust/commit/7f5adddb2528be322c02cea44137d4192db3b8d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5adddb2528be322c02cea44137d4192db3b8d5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "644a5a34dd2f8ccd1c7423ba45931c5afefcdbf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/644a5a34dd2f8ccd1c7423ba45931c5afefcdbf2", "html_url": "https://github.com/rust-lang/rust/commit/644a5a34dd2f8ccd1c7423ba45931c5afefcdbf2"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "3eecfa806b564bfed8e48990ecb463a9e7a1c68e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f5adddb2528be322c02cea44137d4192db3b8d5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5adddb2528be322c02cea44137d4192db3b8d5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7f5adddb2528be322c02cea44137d4192db3b8d5", "patch": "@@ -220,6 +220,7 @@\n #![allow(explicit_outlives_requirements)]\n #![allow(unused_lifetimes)]\n #![deny(rustc::existing_doc_keyword)]\n+#![deny(fuzzy_provenance_casts)]\n // Ensure that std can be linked against panic_abort despite compiled with `-C panic=unwind`\n #![deny(ffi_unwind_calls)]\n // std may use features in a platform-specific way\n@@ -597,7 +598,7 @@ mod panicking;\n mod personality;\n \n #[path = \"../../backtrace/src/lib.rs\"]\n-#[allow(dead_code, unused_attributes)]\n+#[allow(dead_code, unused_attributes, fuzzy_provenance_casts)]\n mod backtrace_rs;\n \n // Re-export macros defined in libcore."}, {"sha": "5c1634084a055b31381849b8fc5085d47da89330", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f5adddb2528be322c02cea44137d4192db3b8d5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5adddb2528be322c02cea44137d4192db3b8d5/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=7f5adddb2528be322c02cea44137d4192db3b8d5", "patch": "@@ -90,6 +90,7 @@ impl OwnedSocket {\n     }\n \n     // FIXME(strict_provenance_magic): we defined RawSocket to be a u64 ;-;\n+    #[allow(fuzzy_provenance_casts)]\n     #[cfg(not(target_vendor = \"uwp\"))]\n     pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n         cvt(unsafe {"}, {"sha": "a783e187004fcb92cf709cd0e12cf7c487b19595", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f5adddb2528be322c02cea44137d4192db3b8d5/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5adddb2528be322c02cea44137d4192db3b8d5/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=7f5adddb2528be322c02cea44137d4192db3b8d5", "patch": "@@ -13,6 +13,7 @@\n \n use super::DwarfReader;\n use core::mem;\n+use core::ptr;\n \n pub const DW_EH_PE_omit: u8 = 0xFF;\n pub const DW_EH_PE_absptr: u8 = 0x00;\n@@ -151,7 +152,7 @@ unsafe fn read_encoded_pointer(\n \n     // DW_EH_PE_aligned implies it's an absolute pointer value\n     if encoding == DW_EH_PE_aligned {\n-        reader.ptr = round_up(reader.ptr as usize, mem::size_of::<usize>())? as *const u8;\n+        reader.ptr = reader.ptr.with_addr(round_up(reader.ptr.addr(), mem::size_of::<usize>())?);\n         return Ok(reader.read::<usize>());\n     }\n \n@@ -171,7 +172,7 @@ unsafe fn read_encoded_pointer(\n     result += match encoding & 0x70 {\n         DW_EH_PE_absptr => 0,\n         // relative to address of the encoded value, despite the name\n-        DW_EH_PE_pcrel => reader.ptr as usize,\n+        DW_EH_PE_pcrel => reader.ptr.expose_addr(),\n         DW_EH_PE_funcrel => {\n             if context.func_start == 0 {\n                 return Err(());\n@@ -184,7 +185,7 @@ unsafe fn read_encoded_pointer(\n     };\n \n     if encoding & DW_EH_PE_indirect != 0 {\n-        result = *(result as *const usize);\n+        result = *ptr::from_exposed_addr::<usize>(result);\n     }\n \n     Ok(result)"}]}