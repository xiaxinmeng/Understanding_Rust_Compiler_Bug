{"sha": "8e88c3470a1513f6ad3dabc82f00076977da91ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODhjMzQ3MGExNTEzZjZhZDNkYWJjODJmMDAwNzY5NzdkYTkxYWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-12T00:58:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T10:57:04Z"}, "message": "resolve: Reintroduce feature gate for uniform paths in imports", "tree": {"sha": "e4452e95d22a1e186f37a88d4ce93d7568be0b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4452e95d22a1e186f37a88d4ce93d7568be0b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e88c3470a1513f6ad3dabc82f00076977da91ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e88c3470a1513f6ad3dabc82f00076977da91ae", "html_url": "https://github.com/rust-lang/rust/commit/8e88c3470a1513f6ad3dabc82f00076977da91ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e88c3470a1513f6ad3dabc82f00076977da91ae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a38f903114387601960cd939123d9f7a9033d2d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38f903114387601960cd939123d9f7a9033d2d3", "html_url": "https://github.com/rust-lang/rust/commit/a38f903114387601960cd939123d9f7a9033d2d3"}], "stats": {"total": 248, "additions": 168, "deletions": 80}, "files": [{"sha": "9979d7742291e50f35e6ce7cf2a1ea2cb89d4d27", "filename": "src/doc/unstable-book/src/language-features/extern-in-paths.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-in-paths.md?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -11,8 +11,8 @@ introducing `extern crate` items, using keyword `extern`.\n \n For example, `extern::my_crat::a::b` will resolve to path `a::b` in crate `my_crate`.\n \n-`feature(extern_absolute_paths)` mode provides the same effect by resolving absolute paths like\n-`::my_crate::a::b` to paths from extern crates by default.\n+Absolute paths on 2018 edition (e.g. `::my_crate::a::b`) provide the same effect\n+and resolve to extern crates (built-in or passed with `--extern`).\n \n ```rust,ignore\n #![feature(extern_in_paths)]"}, {"sha": "47ae47a0d73a00982d05030fe10a0c4b9b66614c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -4736,6 +4736,34 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         }\n     }\n \n+    fn binding_description(&self, b: &NameBinding, ident: Ident, from_prelude: bool) -> String {\n+        if b.span.is_dummy() {\n+            let add_built_in = match b.def() {\n+                // These already contain the \"built-in\" prefix or look bad with it.\n+                Def::NonMacroAttr(..) | Def::PrimTy(..) | Def::ToolMod => false,\n+                _ => true,\n+            };\n+            let (built_in, from) = if from_prelude {\n+                (\"\", \" from prelude\")\n+            } else if b.is_extern_crate() && !b.is_import() &&\n+                        self.session.opts.externs.get(&ident.as_str()).is_some() {\n+                (\"\", \" passed with `--extern`\")\n+            } else if add_built_in {\n+                (\" built-in\", \"\")\n+            } else {\n+                (\"\", \"\")\n+            };\n+\n+            let article = if built_in.is_empty() { b.article() } else { \"a\" };\n+            format!(\"{a}{built_in} {thing}{from}\",\n+                    a = article, thing = b.descr(), built_in = built_in, from = from)\n+        } else {\n+            let introduced = if b.is_import() { \"imported\" } else { \"defined\" };\n+            format!(\"the {thing} {introduced} here\",\n+                    thing = b.descr(), introduced = introduced)\n+        }\n+    }\n+\n     fn report_ambiguity_error(&self, ambiguity_error: &AmbiguityError) {\n         let AmbiguityError { kind, ident, b1, b2, misc1, misc2 } = *ambiguity_error;\n         let (b1, b2, misc1, misc2, swapped) = if b2.span.is_dummy() && !b1.span.is_dummy() {\n@@ -4751,31 +4779,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         err.span_label(ident.span, \"ambiguous name\");\n \n         let mut could_refer_to = |b: &NameBinding, misc: AmbiguityErrorMisc, also: &str| {\n-            let what = if b.span.is_dummy() {\n-                let add_built_in = match b.def() {\n-                    // These already contain the \"built-in\" prefix or look bad with it.\n-                    Def::NonMacroAttr(..) | Def::PrimTy(..) | Def::ToolMod => false,\n-                    _ => true,\n-                };\n-                let (built_in, from) = if misc == AmbiguityErrorMisc::FromPrelude {\n-                    (\"\", \" from prelude\")\n-                } else if b.is_extern_crate() && !b.is_import() &&\n-                          self.session.opts.externs.get(&ident.as_str()).is_some() {\n-                    (\"\", \" passed with `--extern`\")\n-                } else if add_built_in {\n-                    (\" built-in\", \"\")\n-                } else {\n-                    (\"\", \"\")\n-                };\n-\n-                let article = if built_in.is_empty() { b.article() } else { \"a\" };\n-                format!(\"{a}{built_in} {thing}{from}\",\n-                        a = article, thing = b.descr(), built_in = built_in, from = from)\n-            } else {\n-                let participle = if b.is_import() { \"imported\" } else { \"defined\" };\n-                format!(\"the {thing} {introduced} here\",\n-                        thing = b.descr(), introduced = participle)\n-            };\n+            let what = self.binding_description(b, ident, misc == AmbiguityErrorMisc::FromPrelude);\n             let note_msg = format!(\"`{ident}` could{also} refer to {what}\",\n                                    ident = ident, also = also, what = what);\n "}, {"sha": "814c27bffcd1d655b3968c8db6eb2e10070e9ad2", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -891,7 +891,33 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         }\n \n         // The first found solution was the only one, return it.\n-        if let Some((binding, ..)) = innermost_result {\n+        if let Some((binding, flags)) = innermost_result {\n+            if is_import && !self.session.features_untracked().uniform_paths {\n+                // We get to here only if there's no ambiguity, in ambiguous cases an error will\n+                // be reported anyway, so there's no reason to report an additional feature error.\n+                // The `binding` can actually be introduced by something other than `--extern`,\n+                // but its `Def` should coincide with a crate passed with `--extern`\n+                // (otherwise there would be ambiguity) and we can skip feature error in this case.\n+                if ns != TypeNS || !use_prelude ||\n+                   self.extern_prelude_get(ident, true, false).is_none() {\n+                    let msg = \"imports can only refer to extern crate names \\\n+                               passed with `--extern` on stable channel\";\n+                    let mut err = feature_err(&self.session.parse_sess, \"uniform_paths\",\n+                                              ident.span, GateIssue::Language, msg);\n+\n+                    let what = self.binding_description(binding, ident,\n+                                                        flags.contains(Flags::MISC_FROM_PRELUDE));\n+                    let note_msg = format!(\"this import refers to {what}\", what = what);\n+                    if binding.span.is_dummy() {\n+                        err.note(&note_msg);\n+                    } else {\n+                        err.span_note(binding.span, &note_msg);\n+                        err.span_label(binding.span, \"not an extern crate passed with `--extern`\");\n+                    }\n+                    err.emit();\n+                }\n+            }\n+\n             return Ok(binding);\n         }\n "}, {"sha": "ca1cc1d2fd0e444ef960746d5131869863917724", "filename": "src/test/ui/feature-gates/feature-gate-uniform-paths.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -8,15 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// edition:2018\n+\n pub mod foo {\n-    pub use bar::Bar;\n-    //~^ ERROR unresolved import `bar`\n+    pub use bar::Bar; //~ ERROR imports can only refer to extern crate names\n \n     pub mod bar {\n         pub struct Bar;\n     }\n }\n \n+use inline; //~ ERROR imports can only refer to extern crate names\n+\n+use Vec; //~ ERROR imports can only refer to extern crate names\n+\n+use vec; //~ ERROR imports can only refer to extern crate names\n+\n fn main() {\n     let _ = foo::Bar;\n }"}, {"sha": "ec8937bbc5f5c6612d2d0aecb32f7665026bb680", "filename": "src/test/ui/feature-gates/feature-gate-uniform-paths.stderr", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-uniform-paths.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,9 +1,62 @@\n-error[E0432]: unresolved import `bar`\n-  --> $DIR/feature-gate-uniform-paths.rs:12:13\n+error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n+  --> $DIR/feature-gate-uniform-paths.rs:14:13\n    |\n-LL |     pub use bar::Bar;\n-   |             ^^^ Did you mean `self::bar`?\n+LL |       pub use bar::Bar; //~ ERROR imports can only refer to extern crate names\n+   |               ^^^\n+LL | \n+LL | /     pub mod bar {\n+LL | |         pub struct Bar;\n+LL | |     }\n+   | |_____- not an extern crate passed with `--extern`\n+   |\n+   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n+note: this import refers to the module defined here\n+  --> $DIR/feature-gate-uniform-paths.rs:16:5\n+   |\n+LL | /     pub mod bar {\n+LL | |         pub struct Bar;\n+LL | |     }\n+   | |_____^\n+\n+error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n+  --> $DIR/feature-gate-uniform-paths.rs:21:5\n+   |\n+LL | use inline; //~ ERROR imports can only refer to extern crate names\n+   |     ^^^^^^ not an extern crate passed with `--extern`\n+   |\n+   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n+note: this import refers to the built-in attribute imported here\n+  --> $DIR/feature-gate-uniform-paths.rs:21:5\n+   |\n+LL | use inline; //~ ERROR imports can only refer to extern crate names\n+   |     ^^^^^^\n+\n+error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n+  --> $DIR/feature-gate-uniform-paths.rs:23:5\n+   |\n+LL | use Vec; //~ ERROR imports can only refer to extern crate names\n+   |     ^^^ not an extern crate passed with `--extern`\n+   |\n+   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n+note: this import refers to the struct imported here\n+  --> $DIR/feature-gate-uniform-paths.rs:23:5\n+   |\n+LL | use Vec; //~ ERROR imports can only refer to extern crate names\n+   |     ^^^\n+\n+error[E0658]: imports can only refer to extern crate names passed with `--extern` on stable channel (see issue #53130)\n+  --> $DIR/feature-gate-uniform-paths.rs:25:5\n+   |\n+LL | use vec; //~ ERROR imports can only refer to extern crate names\n+   |     ^^^ not an extern crate passed with `--extern`\n+   |\n+   = help: add #![feature(uniform_paths)] to the crate attributes to enable\n+note: this import refers to the macro imported here\n+  --> $DIR/feature-gate-uniform-paths.rs:25:5\n+   |\n+LL | use vec; //~ ERROR imports can only refer to extern crate names\n+   |     ^^^\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0432`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "bfe7e4da84562298b24533f3ae109532e36c28ef", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,6 +10,8 @@\n \n // edition:2018\n \n+#![feature(uniform_paths)]\n+\n // Tests that arbitrary crates (other than `core`, `std` and `meta`)\n // aren't allowed without `--extern`, even if they're in the sysroot.\n use alloc; //~ ERROR unresolved import `alloc`"}, {"sha": "06c11b894ddc3cad92830561bb120791708ba487", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-whitelisted.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-whitelisted.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,11 +1,11 @@\n error: cannot import a built-in macro\n-  --> $DIR/not-whitelisted.rs:16:5\n+  --> $DIR/not-whitelisted.rs:18:5\n    |\n LL | use test; //~ ERROR cannot import a built-in macro\n    |     ^^^^\n \n error[E0432]: unresolved import `alloc`\n-  --> $DIR/not-whitelisted.rs:15:5\n+  --> $DIR/not-whitelisted.rs:17:5\n    |\n LL | use alloc; //~ ERROR unresolved import `alloc`\n    |     ^^^^^ no `alloc` external crate"}, {"sha": "8c9583cfa1bbcf9adfa8b3e0b2968efb10957e6b", "filename": "src/test/ui/rust-2018/local-path-suggestions-2018.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -12,6 +12,8 @@\n // compile-flags:--extern baz\n // edition:2018\n \n+#![feature(uniform_paths)]\n+\n mod foo {\n     pub type Bar = u32;\n }"}, {"sha": "41d7e186c36e741142906afe912be5f60ca4bfff", "filename": "src/test/ui/rust-2018/local-path-suggestions-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions-2018.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,13 +1,13 @@\n error[E0432]: unresolved import `foo`\n-  --> $DIR/local-path-suggestions-2018.rs:20:9\n+  --> $DIR/local-path-suggestions-2018.rs:22:9\n    |\n LL |     use foo::Bar;\n    |         ^^^ Did you mean `crate::foo`?\n    |\n    = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>\n \n error[E0432]: unresolved import `foobar`\n-  --> $DIR/local-path-suggestions-2018.rs:29:5\n+  --> $DIR/local-path-suggestions-2018.rs:31:5\n    |\n LL | use foobar::Baz;\n    |     ^^^^^^ Did you mean `baz::foobar`?"}, {"sha": "ef2a1e3c70c6f873153f220db5a07d7575df1493", "filename": "src/test/ui/rust-2018/uniform-paths-forward-compat/issue-54253.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths-forward-compat%2Fissue-54253.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,7 +10,7 @@\n \n // edition:2018\n \n-// Dummy import to introduce `uniform_paths` canaries.\n+// Dummy import that previously introduced uniform path canaries.\n use std;\n \n // fn version() -> &'static str {\"\"}"}, {"sha": "4819711115c27a76a5f25123447bd20bf04cb70b", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // This test is similar to `ambiguity-macros.rs`, but nested in a module.\n \n mod foo {"}, {"sha": "204e0a7e1411ed4c8437a4c66917e0c6a6913b93", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity-macros-nested.rs:18:13\n+  --> $DIR/ambiguity-macros-nested.rs:16:13\n    |\n LL |     pub use std::io;\n    |             ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity-macros-nested.rs:23:13\n+  --> $DIR/ambiguity-macros-nested.rs:21:13\n    |\n LL | /             mod std {\n LL | |                 pub struct io;"}, {"sha": "148320de556d30d4633d90afacbccedaf4da14ea", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // This test is similar to `ambiguity.rs`, but with macros defining local items.\n \n use std::io;"}, {"sha": "ac8d3b9d0cbe4d0dc347f35a2c901d89e375f29b", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity-macros.rs:17:5\n+  --> $DIR/ambiguity-macros.rs:15:5\n    |\n LL | use std::io;\n    |     ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity-macros.rs:22:9\n+  --> $DIR/ambiguity-macros.rs:20:9\n    |\n LL | /         mod std {\n LL | |             pub struct io;"}, {"sha": "2791d4580daf1a476deeff60b98c9cbbe4ab5faf", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-nested.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n // This test is similar to `ambiguity.rs`, but nested in a module.\n \n mod foo {"}, {"sha": "7bcfc563d39fc288da54189a482753efc48e984f", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-nested.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity-nested.rs:18:13\n+  --> $DIR/ambiguity-nested.rs:16:13\n    |\n LL |     pub use std::io;\n    |             ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity-nested.rs:21:5\n+  --> $DIR/ambiguity-nested.rs:19:5\n    |\n LL | /     mod std {\n LL | |         pub struct io;"}, {"sha": "2bfbb6b287153ded300d89545cab2ff528019c5e", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n use std::io;\n //~^ ERROR `std` is ambiguous\n "}, {"sha": "beeb74654e5b5bc7194dc9c2fba8a68703f7834c", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,13 +1,13 @@\n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/ambiguity.rs:15:5\n+  --> $DIR/ambiguity.rs:13:5\n    |\n LL | use std::io;\n    |     ^^^ ambiguous name\n    |\n    = note: `std` could refer to a built-in extern crate\n    = help: use `::std` to refer to this extern crate unambiguously\n note: `std` could also refer to the module defined here\n-  --> $DIR/ambiguity.rs:18:1\n+  --> $DIR/ambiguity.rs:16:1\n    |\n LL | / mod std {\n LL | |     pub struct io;"}, {"sha": "19be7dc9640409383dbfa8f560a0e16484485944", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,5 +1,7 @@\n // edition:2018\n \n+#![feature(uniform_paths)]\n+\n mod my {\n     pub mod sub {\n         pub fn bar() {}"}, {"sha": "aa46947f93f4be0c9f89c9da00a6970a3dce6e0c", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow-nested.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,16 +1,16 @@\n error[E0659]: `sub` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow-nested.rs:16:13\n+  --> $DIR/block-scoped-shadow-nested.rs:18:13\n    |\n LL |         use sub::bar; //~ ERROR `sub` is ambiguous\n    |             ^^^ ambiguous name\n    |\n note: `sub` could refer to the module imported here\n-  --> $DIR/block-scoped-shadow-nested.rs:14:9\n+  --> $DIR/block-scoped-shadow-nested.rs:16:9\n    |\n LL |     use my::sub;\n    |         ^^^^^^^\n note: `sub` could also refer to the module defined here\n-  --> $DIR/block-scoped-shadow-nested.rs:9:1\n+  --> $DIR/block-scoped-shadow-nested.rs:11:1\n    |\n LL | / mod sub {\n LL | |     pub fn bar() {}"}, {"sha": "ec0479ce8f15eaaeb7718a805f7c5b5a61d886d8", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,8 +10,6 @@\n \n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n enum Foo {}\n \n struct std;"}, {"sha": "010b9efad393b43a3a90803fbc7b2e99b04a316a", "filename": "src/test/ui/rust-2018/uniform-paths/block-scoped-shadow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fblock-scoped-shadow.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,52 +1,52 @@\n error[E0659]: `Foo` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow.rs:21:9\n+  --> $DIR/block-scoped-shadow.rs:19:9\n    |\n LL |     use Foo::*;\n    |         ^^^ ambiguous name\n    |\n note: `Foo` could refer to the enum defined here\n-  --> $DIR/block-scoped-shadow.rs:20:5\n+  --> $DIR/block-scoped-shadow.rs:18:5\n    |\n LL |     enum Foo { A, B }\n    |     ^^^^^^^^^^^^^^^^^\n note: `Foo` could also refer to the enum defined here\n-  --> $DIR/block-scoped-shadow.rs:15:1\n+  --> $DIR/block-scoped-shadow.rs:13:1\n    |\n LL | enum Foo {}\n    | ^^^^^^^^^^^\n    = help: use `self::Foo` to refer to this enum unambiguously\n \n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow.rs:28:9\n+  --> $DIR/block-scoped-shadow.rs:26:9\n    |\n LL |     use std as foo;\n    |         ^^^ ambiguous name\n    |\n note: `std` could refer to the enum defined here\n-  --> $DIR/block-scoped-shadow.rs:27:5\n+  --> $DIR/block-scoped-shadow.rs:25:5\n    |\n LL |     enum std {}\n    |     ^^^^^^^^^^^\n note: `std` could also refer to the struct defined here\n-  --> $DIR/block-scoped-shadow.rs:17:1\n+  --> $DIR/block-scoped-shadow.rs:15:1\n    |\n LL | struct std;\n    | ^^^^^^^^^^^\n    = help: use `self::std` to refer to this struct unambiguously\n \n error[E0659]: `std` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/block-scoped-shadow.rs:28:9\n+  --> $DIR/block-scoped-shadow.rs:26:9\n    |\n LL |     use std as foo;\n    |         ^^^ ambiguous name\n    |\n note: `std` could refer to the function defined here\n-  --> $DIR/block-scoped-shadow.rs:26:5\n+  --> $DIR/block-scoped-shadow.rs:24:5\n    |\n LL |     fn std() {}\n    |     ^^^^^^^^^^^\n note: `std` could also refer to the unit struct defined here\n-  --> $DIR/block-scoped-shadow.rs:17:1\n+  --> $DIR/block-scoped-shadow.rs:15:1\n    |\n LL | struct std;\n    | ^^^^^^^^^^^"}, {"sha": "a7bc625bbf0a4480cb4482a9382bc3b61b5ffc94", "filename": "src/test/ui/rust-2018/uniform-paths/fn-local-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Ffn-local-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Ffn-local-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Ffn-local-enum.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,6 +1,8 @@\n // compile-pass\n // edition:2018\n \n+#![feature(uniform_paths)]\n+\n fn main() {\n     enum E { A, B, C }\n "}, {"sha": "ef2a1e3c70c6f873153f220db5a07d7575df1493", "filename": "src/test/ui/rust-2018/uniform-paths/issue-54253.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -10,9 +10,7 @@\n \n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n-// Dummy import to introduce `uniform_paths` canaries.\n+// Dummy import that previously introduced uniform path canaries.\n use std;\n \n // fn version() -> &'static str {\"\"}"}, {"sha": "6dcc451c60a6125c45150ba350febf7ca78fd3d2", "filename": "src/test/ui/rust-2018/uniform-paths/issue-54253.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fissue-54253.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,5 +1,5 @@\n error[E0432]: unresolved import `crate::version`\n-  --> $DIR/issue-54253.rs:22:9\n+  --> $DIR/issue-54253.rs:20:9\n    |\n LL |     use crate::version; //~ ERROR unresolved import `crate::version`\n    |         ^^^^^^^^^^^^^^ no `version` in the root"}, {"sha": "e8098a467904e31ccef5d4bb5b9c7f314fc69a0a", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -2,7 +2,7 @@\n \n // For the time being `macro_rules` items are treated as *very* private...\n \n-#![feature(underscore_imports, decl_macro)]\n+#![feature(underscore_imports, decl_macro, uniform_paths)]\n \n mod m1 {\n     macro_rules! legacy_macro { () => () }"}, {"sha": "c5bd50f2f567f2f3675eacc0493532c45a9c8fc3", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,5 +1,7 @@\n // edition:2018\n \n+#![feature(uniform_paths)]\n+\n // Built-in macro\n use env as env_imported; //~ ERROR cannot import a built-in macro\n "}, {"sha": "a02775eabf42a3414a85812b993d8bacdf555c3e", "filename": "src/test/ui/rust-2018/uniform-paths/prelude-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude-fail.stderr?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,11 +1,11 @@\n error: cannot import a built-in macro\n-  --> $DIR/prelude-fail.rs:4:5\n+  --> $DIR/prelude-fail.rs:6:5\n    |\n LL | use env as env_imported; //~ ERROR cannot import a built-in macro\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error[E0432]: unresolved import `rustfmt`\n-  --> $DIR/prelude-fail.rs:7:5\n+  --> $DIR/prelude-fail.rs:9:5\n    |\n LL | use rustfmt::skip as imported_rustfmt_skip; //~ ERROR unresolved import `rustfmt`\n    |     ^^^^^^^ Not a module `rustfmt`"}, {"sha": "5aab5fc3a40187ac246368817eddd95612c20986", "filename": "src/test/ui/rust-2018/uniform-paths/prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fprelude.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -1,6 +1,8 @@\n // compile-pass\n // edition:2018\n \n+#![feature(uniform_paths)]\n+\n // Macro imported with `#[macro_use] extern crate`\n use vec as imported_vec;\n "}, {"sha": "05048cfd451050e39382c4bf39b22df15476c412", "filename": "src/test/ui/rust-2018/uniform-paths/redundant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e88c3470a1513f6ad3dabc82f00076977da91ae/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs?ref=8e88c3470a1513f6ad3dabc82f00076977da91ae", "patch": "@@ -11,8 +11,6 @@\n // run-pass\n // edition:2018\n \n-#![feature(uniform_paths)]\n-\n use std;\n use std::io;\n "}]}