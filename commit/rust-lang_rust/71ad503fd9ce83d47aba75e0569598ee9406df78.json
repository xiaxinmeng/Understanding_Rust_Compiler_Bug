{"sha": "71ad503fd9ce83d47aba75e0569598ee9406df78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYWQ1MDNmZDljZTgzZDQ3YWJhNzVlMDU2OTU5OGVlOTQwNmRmNzg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-06T02:21:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-06T02:21:31Z"}, "message": "Rollup merge of #87742 - npmccallum:naked_ffi, r=Amanieu\n\nValidate FFI-safety warnings on naked functions\n\nTest that FFI-safety warnings don't get accidentally dropped on naked\nfunctions. The big picture is that if you implement a naked function\nwith the Rust ABI you'll get a warning. Further, if you implement a\nnaked function with a standardized ABI, but use non-FFI-safe types you\nwill still get a warning.\n\nrust-lang/rfcs#2774\nrust-lang/rfcs#2972\n\ncc ``````@joshtriplett`````` ``````@Amanieu`````` ``````@haraldh``````", "tree": {"sha": "289346ff69ac7a6c79b2f8a67feede414f039e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289346ff69ac7a6c79b2f8a67feede414f039e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ad503fd9ce83d47aba75e0569598ee9406df78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhDJyrCRBK7hj4Ov3rIwAAA/kIAE3VSWKC6CL0FDliaE+4J7ZJ\nOysTwTwPaXiyqVpgtPifd7hrKEoy9/W4WotxaRZtZR55j6c6+SKU2pLiWGXgWz7m\nZaHWRLucJWRmCU4p19pzemm0w/88cHoR4kvffAYrHW/g4jKH8S3E/4vkR/y4dbQg\n0thP9LmdDon/JxlRWeWTW7q+yQU8PoPtD2lHvGdcmn8quADIpeVU5BhGbaZ67BuM\n9aHx4iBB+ZH8lCmZBVBN2niWezIwyCSG6VfFp6g4BnHiYfuuY+q7hxQYIEF5aaSw\nnxsaxBAye+wddjsmvo1XIuqSsmJlUabpGcsx+wpvqxOCH6DX/WXIIj2N26iGyQ0=\n=RoE5\n-----END PGP SIGNATURE-----\n", "payload": "tree 289346ff69ac7a6c79b2f8a67feede414f039e80\nparent 5b4396068744e810d090de038e6f456432d203a2\nparent a96fd577a44845df221c81ff24b35819135b4a0d\nauthor Yuki Okushi <jtitor@2k36.org> 1628216491 +0900\ncommitter GitHub <noreply@github.com> 1628216491 +0900\n\nRollup merge of #87742 - npmccallum:naked_ffi, r=Amanieu\n\nValidate FFI-safety warnings on naked functions\n\nTest that FFI-safety warnings don't get accidentally dropped on naked\nfunctions. The big picture is that if you implement a naked function\nwith the Rust ABI you'll get a warning. Further, if you implement a\nnaked function with a standardized ABI, but use non-FFI-safe types you\nwill still get a warning.\n\nrust-lang/rfcs#2774\nrust-lang/rfcs#2972\n\ncc ``````@joshtriplett`````` ``````@Amanieu`````` ``````@haraldh``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ad503fd9ce83d47aba75e0569598ee9406df78", "html_url": "https://github.com/rust-lang/rust/commit/71ad503fd9ce83d47aba75e0569598ee9406df78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ad503fd9ce83d47aba75e0569598ee9406df78/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4396068744e810d090de038e6f456432d203a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4396068744e810d090de038e6f456432d203a2", "html_url": "https://github.com/rust-lang/rust/commit/5b4396068744e810d090de038e6f456432d203a2"}, {"sha": "a96fd577a44845df221c81ff24b35819135b4a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96fd577a44845df221c81ff24b35819135b4a0d", "html_url": "https://github.com/rust-lang/rust/commit/a96fd577a44845df221c81ff24b35819135b4a0d"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "5b2a8ed3034a6cffe1714af6c75902063079cece", "filename": "src/test/ui/asm/naked-functions-ffi.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71ad503fd9ce83d47aba75e0569598ee9406df78/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ad503fd9ce83d47aba75e0569598ee9406df78/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs?ref=71ad503fd9ce83d47aba75e0569598ee9406df78", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// only-x86_64\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![crate_type = \"lib\"]\n+\n+#[naked]\n+pub extern \"C\" fn naked(p: char) -> u128 {\n+    //~^ WARN uses type `char`\n+    //~| WARN uses type `u128`\n+    unsafe { asm!(\"\", options(noreturn)); }\n+}"}, {"sha": "a6772badeb65f50870eab9169a755f30978c5608", "filename": "src/test/ui/asm/naked-functions-ffi.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71ad503fd9ce83d47aba75e0569598ee9406df78/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ad503fd9ce83d47aba75e0569598ee9406df78/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr?ref=71ad503fd9ce83d47aba75e0569598ee9406df78", "patch": "@@ -0,0 +1,20 @@\n+warning: `extern` fn uses type `char`, which is not FFI-safe\n+  --> $DIR/naked-functions-ffi.rs:8:28\n+   |\n+LL | pub extern \"C\" fn naked(p: char) -> u128 {\n+   |                            ^^^^ not FFI-safe\n+   |\n+   = note: `#[warn(improper_ctypes_definitions)]` on by default\n+   = help: consider using `u32` or `libc::wchar_t` instead\n+   = note: the `char` type has no C equivalent\n+\n+warning: `extern` fn uses type `u128`, which is not FFI-safe\n+  --> $DIR/naked-functions-ffi.rs:8:37\n+   |\n+LL | pub extern \"C\" fn naked(p: char) -> u128 {\n+   |                                     ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+warning: 2 warnings emitted\n+"}]}