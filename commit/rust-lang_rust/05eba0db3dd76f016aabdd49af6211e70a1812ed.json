{"sha": "05eba0db3dd76f016aabdd49af6211e70a1812ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZWJhMGRiM2RkNzZmMDE2YWFiZGQ0OWFmNjIxMWU3MGExODEyZWQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T16:39:53Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T17:20:28Z"}, "message": "Binders::subst -> substitute", "tree": {"sha": "4e4cdc0d7acddd8feb04c064360e0a8e889e4957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4cdc0d7acddd8feb04c064360e0a8e889e4957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05eba0db3dd76f016aabdd49af6211e70a1812ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05eba0db3dd76f016aabdd49af6211e70a1812ed", "html_url": "https://github.com/rust-lang/rust/commit/05eba0db3dd76f016aabdd49af6211e70a1812ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05eba0db3dd76f016aabdd49af6211e70a1812ed/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad20f00844cec9c794e34869be163673ebbed182", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad20f00844cec9c794e34869be163673ebbed182", "html_url": "https://github.com/rust-lang/rust/commit/ad20f00844cec9c794e34869be163673ebbed182"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "d4e477a85e28bb30116b2ba1f5505b0072be6ebe", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -235,7 +235,7 @@ impl HirDisplay for TypeParam {\n         write!(f, \"{}\", self.name(f.db))?;\n         let bounds = f.db.generic_predicates_for_param(self.id);\n         let substs = TyBuilder::type_params_subst(f.db, self.id.parent);\n-        let predicates = bounds.iter().cloned().map(|b| b.subst(&substs)).collect::<Vec<_>>();\n+        let predicates = bounds.iter().cloned().map(|b| b.substitute(&substs)).collect::<Vec<_>>();\n         if !(predicates.is_empty() || f.omit_verbose_types()) {\n             write_bounds_like_dyn_trait_with_prefix(\":\", &predicates, f)?;\n         }"}, {"sha": "add1b55c21cb85f2b973a871aec367438f53b749", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -516,7 +516,7 @@ impl Field {\n             VariantDef::Variant(it) => it.parent.id.into(),\n         };\n         let substs = TyBuilder::type_params_subst(db, generic_def_id);\n-        let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n+        let ty = db.field_types(var_id)[self.id].clone().substitute(&substs);\n         Type::new(db, self.parent.module(db).id.krate(), var_id, ty)\n     }\n \n@@ -1503,7 +1503,7 @@ impl TypeParam {\n         let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = params.get(local_idx)?.clone();\n         let subst = TyBuilder::type_params_subst(db, self.id.parent);\n-        let ty = ty.subst(&subst.prefix(local_idx));\n+        let ty = ty.substitute(&subst.prefix(local_idx));\n         Some(Type::new_with_resolver_inner(db, krate, &resolver, ty))\n     }\n }\n@@ -1916,7 +1916,7 @@ impl Type {\n             .iter()\n             .map(|(local_id, ty)| {\n                 let def = Field { parent: variant_id.into(), id: local_id };\n-                let ty = ty.clone().subst(substs);\n+                let ty = ty.clone().substitute(substs);\n                 (def, self.derived(ty))\n             })\n             .collect()"}, {"sha": "82807ea09b5551c09929a8c083c68186dbcd1f20", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -339,7 +339,7 @@ impl SourceAnalyzer {\n             .into_iter()\n             .map(|local_id| {\n                 let field = FieldId { parent: variant, local_id };\n-                let ty = field_types[local_id].clone().subst(substs);\n+                let ty = field_types[local_id].clone().substitute(substs);\n                 (field.into(), Type::new_with_resolver_inner(db, krate, &self.resolver, ty))\n             })\n             .collect()"}, {"sha": "c5196200ce82ee44b18fcca6f6ac0a2c5b228176", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -139,7 +139,7 @@ impl TyBuilder<hir_def::AdtId> {\n             } else {\n                 // each default can depend on the previous parameters\n                 let subst_so_far = Substitution::intern(self.vec.clone());\n-                self.vec.push(default_ty.clone().subst(&subst_so_far).cast(&Interner));\n+                self.vec.push(default_ty.clone().substitute(&subst_so_far).cast(&Interner));\n             }\n         }\n         self\n@@ -200,7 +200,7 @@ impl<T: TypeWalk + HasInterner<Interner = Interner>> TyBuilder<Binders<T>> {\n \n     pub fn build(self) -> T {\n         let (b, subst) = self.build_internal();\n-        b.subst(&subst)\n+        b.substitute(&subst)\n     }\n }\n "}, {"sha": "704504b02b34f2d6b4e27585586ddb2ac3ec86e0", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -352,7 +352,7 @@ impl HirDisplay for Ty {\n                             let data = (*datas)\n                                 .as_ref()\n                                 .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                            let bounds = data.subst(parameters);\n+                            let bounds = data.substitute(parameters);\n                             bounds.into_value_and_skipped_binders().0\n                         } else {\n                             Vec::new()\n@@ -397,7 +397,7 @@ impl HirDisplay for Ty {\n             }\n             TyKind::FnDef(def, parameters) => {\n                 let def = from_chalk(f.db, *def);\n-                let sig = f.db.callable_item_signature(def).subst(parameters);\n+                let sig = f.db.callable_item_signature(def).substitute(parameters);\n                 match def {\n                     CallableDefId::FunctionId(ff) => {\n                         write!(f, \"fn {}\", f.db.function_data(ff).name)?\n@@ -482,7 +482,7 @@ impl HirDisplay for Ty {\n                                         (_, Some(default_parameter)) => {\n                                             let actual_default = default_parameter\n                                                 .clone()\n-                                                .subst(&parameters.prefix(i));\n+                                                .substitute(&parameters.prefix(i));\n                                             if parameter.assert_ty_ref(&Interner) != &actual_default\n                                             {\n                                                 default_from = i + 1;\n@@ -542,7 +542,7 @@ impl HirDisplay for Ty {\n                         let data = (*datas)\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        let bounds = data.subst(&parameters);\n+                        let bounds = data.substitute(&parameters);\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", bounds.skip_binders(), f)?;\n                         // FIXME: it would maybe be good to distinguish this from the alias type (when debug printing), and to show the substitution\n                     }\n@@ -595,7 +595,7 @@ impl HirDisplay for Ty {\n                         let bounds =\n                             f.db.generic_predicates(id.parent)\n                                 .into_iter()\n-                                .map(|pred| pred.clone().subst(&substs))\n+                                .map(|pred| pred.clone().substitute(&substs))\n                                 .filter(|wc| match &wc.skip_binders() {\n                                     WhereClause::Implemented(tr) => {\n                                         tr.self_type_parameter(&Interner) == self\n@@ -629,7 +629,7 @@ impl HirDisplay for Ty {\n                         let data = (*datas)\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        let bounds = data.subst(&opaque_ty.substitution);\n+                        let bounds = data.substitute(&opaque_ty.substitution);\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", bounds.skip_binders(), f)?;\n                     }\n                     ImplTraitId::AsyncBlockTypeImplTrait(..) => {"}, {"sha": "a87037344b25e53025dfa9c37f36cd6f1e4e64c6", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -470,25 +470,25 @@ impl<'a> InferenceContext<'a> {\n             TypeNs::AdtId(AdtId::StructId(strukt)) => {\n                 let substs = ctx.substs_from_path(path, strukt.into(), true);\n                 let ty = self.db.ty(strukt.into());\n-                let ty = self.insert_type_vars(ty.subst(&substs));\n+                let ty = self.insert_type_vars(ty.substitute(&substs));\n                 forbid_unresolved_segments((ty, Some(strukt.into())), unresolved)\n             }\n             TypeNs::AdtId(AdtId::UnionId(u)) => {\n                 let substs = ctx.substs_from_path(path, u.into(), true);\n                 let ty = self.db.ty(u.into());\n-                let ty = self.insert_type_vars(ty.subst(&substs));\n+                let ty = self.insert_type_vars(ty.substitute(&substs));\n                 forbid_unresolved_segments((ty, Some(u.into())), unresolved)\n             }\n             TypeNs::EnumVariantId(var) => {\n                 let substs = ctx.substs_from_path(path, var.into(), true);\n                 let ty = self.db.ty(var.parent.into());\n-                let ty = self.insert_type_vars(ty.subst(&substs));\n+                let ty = self.insert_type_vars(ty.substitute(&substs));\n                 forbid_unresolved_segments((ty, Some(var.into())), unresolved)\n             }\n             TypeNs::SelfType(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n                 let substs = generics.type_params_subst(self.db);\n-                let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n+                let ty = self.db.impl_self_ty(impl_id).substitute(&substs);\n                 match unresolved {\n                     None => {\n                         let variant = ty_variant(&ty);"}, {"sha": "5f8ad2174cfcc731c1ad49fe31e86ae2b1a47404", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -419,7 +419,7 @@ impl<'a> InferenceContext<'a> {\n                         self.result.record_field_resolutions.insert(field.expr, field_def);\n                     }\n                     let field_ty = field_def.map_or(self.err_ty(), |it| {\n-                        field_types[it.local_id].clone().subst(&substs)\n+                        field_types[it.local_id].clone().substitute(&substs)\n                     });\n                     self.infer_expr_coerce(field.expr, &Expectation::has_type(field_ty));\n                 }\n@@ -462,7 +462,7 @@ impl<'a> InferenceContext<'a> {\n                                 Some(\n                                     self.db.field_types((*s).into())[field.local_id]\n                                         .clone()\n-                                        .subst(&parameters),\n+                                        .substitute(&parameters),\n                                 )\n                             } else {\n                                 None\n@@ -476,7 +476,7 @@ impl<'a> InferenceContext<'a> {\n                                 Some(\n                                     self.db.field_types((*u).into())[field.local_id]\n                                         .clone()\n-                                        .subst(&parameters),\n+                                        .substitute(&parameters),\n                                 )\n                             } else {\n                                 None\n@@ -852,7 +852,7 @@ impl<'a> InferenceContext<'a> {\n             None => (receiver_ty, Binders::empty(&Interner, self.err_ty()), None),\n         };\n         let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);\n-        let method_ty = method_ty.subst(&substs);\n+        let method_ty = method_ty.substitute(&substs);\n         let method_ty = self.insert_type_vars(method_ty);\n         self.register_obligations_for_call(&method_ty);\n         let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n@@ -950,7 +950,7 @@ impl<'a> InferenceContext<'a> {\n             let generic_predicates = self.db.generic_predicates(def.into());\n             for predicate in generic_predicates.iter() {\n                 let (predicate, binders) =\n-                    predicate.clone().subst(parameters).into_value_and_skipped_binders();\n+                    predicate.clone().substitute(parameters).into_value_and_skipped_binders();\n                 always!(binders.len(&Interner) == 0); // quantified where clauses not yet handled\n                 self.push_obligation(predicate.cast(&Interner));\n             }"}, {"sha": "b74f1f4f84e3b042ce97d0746c8be40f7caa306f", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -49,7 +49,7 @@ impl<'a> InferenceContext<'a> {\n             let expected_ty = var_data\n                 .as_ref()\n                 .and_then(|d| d.field(&Name::new_tuple_field(i)))\n-                .map_or(self.err_ty(), |field| field_tys[field].clone().subst(&substs));\n+                .map_or(self.err_ty(), |field| field_tys[field].clone().substitute(&substs));\n             let expected_ty = self.normalize_associated_types_in(expected_ty);\n             self.infer_pat(subpat, &expected_ty, default_bm);\n         }\n@@ -84,7 +84,7 @@ impl<'a> InferenceContext<'a> {\n             }\n \n             let expected_ty = matching_field\n-                .map_or(self.err_ty(), |field| field_tys[field].clone().subst(&substs));\n+                .map_or(self.err_ty(), |field| field_tys[field].clone().substitute(&substs));\n             let expected_ty = self.normalize_associated_types_in(expected_ty);\n             self.infer_pat(subpat.pat, &expected_ty, default_bm);\n         }"}, {"sha": "5e3a4576632a34204629ae33342bfe449cd04105", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -81,9 +81,9 @@ impl<'a> InferenceContext<'a> {\n             ValueNs::ImplSelf(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n                 let substs = generics.type_params_subst(self.db);\n-                let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n+                let ty = self.db.impl_self_ty(impl_id).substitute(&substs);\n                 if let Some((AdtId::StructId(struct_id), substs)) = ty.as_adt() {\n-                    let ty = self.db.value_ty(struct_id.into()).subst(&substs);\n+                    let ty = self.db.value_ty(struct_id.into()).substitute(&substs);\n                     return Some(ty);\n                 } else {\n                     // FIXME: diagnostic, invalid Self reference\n@@ -243,7 +243,7 @@ impl<'a> InferenceContext<'a> {\n                         let impl_substs = TyBuilder::subst_for_def(self.db, impl_id)\n                             .fill(iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n-                        let impl_self_ty = self.db.impl_self_ty(impl_id).subst(&impl_substs);\n+                        let impl_self_ty = self.db.impl_self_ty(impl_id).substitute(&impl_substs);\n                         self.unify(&impl_self_ty, &ty);\n                         Some(impl_substs)\n                     }"}, {"sha": "e15840c9af6555b8c94b98cbce53878ab96b824f", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -130,7 +130,7 @@ impl<T> Binders<T> {\n \n impl<T: TypeWalk> Binders<T> {\n     /// Substitutes all variables.\n-    pub fn subst(self, subst: &Substitution) -> T {\n+    pub fn substitute(self, subst: &Substitution) -> T {\n         let (value, binders) = self.into_value_and_skipped_binders();\n         assert_eq!(subst.len(&Interner), binders.len(&Interner));\n         value.subst_bound_vars(subst)\n@@ -362,7 +362,7 @@ impl Ty {\n             TyKind::FnDef(def, parameters) => {\n                 let callable_def = db.lookup_intern_callable_def((*def).into());\n                 let sig = db.callable_item_signature(callable_def);\n-                Some(sig.subst(&parameters))\n+                Some(sig.substitute(&parameters))\n             }\n             TyKind::Closure(.., substs) => {\n                 let sig_param = substs.at(&Interner, 0).assert_ty_ref(&Interner);\n@@ -436,7 +436,7 @@ impl Ty {\n                             let data = (*it)\n                                 .as_ref()\n                                 .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                            data.subst(&opaque_ty.substitution)\n+                            data.substitute(&opaque_ty.substitution)\n                         })\n                     }\n                     // It always has an parameter for Future::Output type.\n@@ -455,7 +455,7 @@ impl Ty {\n                         let predicates = db\n                             .generic_predicates(id.parent)\n                             .into_iter()\n-                            .map(|pred| pred.clone().subst(&substs))\n+                            .map(|pred| pred.clone().substitute(&substs))\n                             .filter(|wc| match &wc.skip_binders() {\n                                 WhereClause::Implemented(tr) => {\n                                     tr.self_type_parameter(&Interner) == self"}, {"sha": "6a3a880e077cc4c763f92a8a0a7cc276ec461acf", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -414,15 +414,15 @@ impl<'a> TyLoweringContext<'a> {\n                     TypeParamLoweringMode::Placeholder => generics.type_params_subst(self.db),\n                     TypeParamLoweringMode::Variable => generics.bound_vars_subst(self.in_binders),\n                 };\n-                self.db.impl_self_ty(impl_id).subst(&substs)\n+                self.db.impl_self_ty(impl_id).substitute(&substs)\n             }\n             TypeNs::AdtSelfType(adt) => {\n                 let generics = generics(self.db.upcast(), adt.into());\n                 let substs = match self.type_param_mode {\n                     TypeParamLoweringMode::Placeholder => generics.type_params_subst(self.db),\n                     TypeParamLoweringMode::Variable => generics.bound_vars_subst(self.in_binders),\n                 };\n-                self.db.ty(adt.into()).subst(&substs)\n+                self.db.ty(adt.into()).substitute(&substs)\n             }\n \n             TypeNs::AdtId(it) => self.lower_path_inner(resolved_segment, it.into(), infer_args),\n@@ -516,7 +516,7 @@ impl<'a> TyLoweringContext<'a> {\n             TyDefId::TypeAliasId(it) => Some(it.into()),\n         };\n         let substs = self.substs_from_path_segment(segment, generic_def, infer_args, None);\n-        self.db.ty(typeable).subst(&substs)\n+        self.db.ty(typeable).substitute(&substs)\n     }\n \n     /// Collect generic arguments from a path into a `Substs`. See also\n@@ -620,7 +620,7 @@ impl<'a> TyLoweringContext<'a> {\n                 for default_ty in defaults.iter().skip(substs.len()) {\n                     // each default can depend on the previous parameters\n                     let substs_so_far = Substitution::from_iter(&Interner, substs.clone());\n-                    substs.push(default_ty.clone().subst(&substs_so_far));\n+                    substs.push(default_ty.clone().substitute(&substs_so_far));\n                 }\n             }\n         }"}, {"sha": "88750acf391a170ba813916932c16cacae4ab1be", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -712,7 +712,7 @@ pub(crate) fn inherent_impl_substs(\n     let vars = TyBuilder::subst_for_def(db, impl_id)\n         .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty.binders.len(&Interner))\n         .build();\n-    let self_ty_with_vars = db.impl_self_ty(impl_id).subst(&vars);\n+    let self_ty_with_vars = db.impl_self_ty(impl_id).substitute(&vars);\n     let mut kinds = self_ty.binders.interned().to_vec();\n     kinds.extend(\n         iter::repeat(chalk_ir::WithKind::new(\n@@ -774,7 +774,7 @@ fn transform_receiver_ty(\n         AssocContainerId::ModuleId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n-    Some(sig.map(|s| s.params()[0].clone()).subst(&substs))\n+    Some(sig.map(|s| s.params()[0].clone()).substitute(&substs))\n }\n \n pub fn implements_trait("}, {"sha": "481b0bb10be4f96efa8785b130a1f3db7ef34b72", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -519,7 +519,7 @@ pub(super) fn convert_where_clauses(\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n-        result.push(pred.clone().subst(substs).to_chalk(db));\n+        result.push(pred.clone().substitute(substs).to_chalk(db));\n     }\n     result\n }"}, {"sha": "a63075a19c0e274dd065efb7d2a2af5a16bfd3e6", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eba0db3dd76f016aabdd49af6211e70a1812ed/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=05eba0db3dd76f016aabdd49af6211e70a1812ed", "patch": "@@ -72,7 +72,7 @@ fn direct_super_trait_refs(db: &dyn HirDatabase, trait_ref: &TraitRef) -> Vec<Tr\n                 _ => None,\n             })\n         })\n-        .map(|pred| pred.subst(&trait_ref.substitution))\n+        .map(|pred| pred.substitute(&trait_ref.substitution))\n         .collect()\n }\n "}]}