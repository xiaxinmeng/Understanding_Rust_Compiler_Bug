{"sha": "5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzJkYWUxZDEzZmRiZTYyNzVkNzMyYWFjN2RkOWE5YWQ2MDRiNmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-24T19:36:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-24T19:36:35Z"}, "message": "rustc: Parse tag items. Currently segfaults in copy glue.", "tree": {"sha": "c06fdafb3c451ab9771696e70b1bb780a3fcd077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c06fdafb3c451ab9771696e70b1bb780a3fcd077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "html_url": "https://github.com/rust-lang/rust/commit/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55f46af64e545a5845a14e6157211773c24193e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55f46af64e545a5845a14e6157211773c24193e", "html_url": "https://github.com/rust-lang/rust/commit/f55f46af64e545a5845a14e6157211773c24193e"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "2a590d0235dc7d14e31f55d1e48fca02c098eccf", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "patch": "@@ -153,11 +153,14 @@ type _fn = rec(vec[arg] inputs,\n type _mod = rec(vec[@item] items,\n                 hashmap[ident,uint] index);\n \n+type variant = rec(str name, vec[@ty] args);\n+\n type item = spanned[item_];\n tag item_ {\n     item_fn(ident, _fn, def_id, ann);\n     item_mod(ident, _mod, def_id);\n     item_ty(ident, @ty, def_id, ann);\n+    item_tag(ident, vec[variant], def_id);\n }\n \n "}, {"sha": "caff774b129df343646d203eff20003a9b9c3d7e", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "patch": "@@ -1019,6 +1019,52 @@ impure fn parse_item_type(parser p) -> tup(ast.ident, @ast.item) {\n     ret tup(id, @spanned(lo, hi, item));\n }\n \n+impure fn parse_item_tag(parser p) -> tup(ast.ident, @ast.item) {\n+    auto lo = p.get_span();\n+    expect(p, token.TAG);\n+    auto id = parse_ident(p);\n+\n+    let vec[ast.variant] variants = vec();\n+    expect(p, token.LBRACE);\n+    while (p.peek() != token.RBRACE) {\n+        auto tok = p.peek();\n+        alt (tok) {\n+            case (token.IDENT(?name)) {\n+                p.bump();\n+\n+                auto args;\n+                alt (p.peek()) {\n+                    case (token.LPAREN) {\n+                        auto f = parse_ty;\n+                        auto tys = parse_seq[@ast.ty](token.LPAREN,\n+                                                      token.RPAREN,\n+                                                      some(token.COMMA),\n+                                                      f, p);\n+                        args = tys.node;\n+                    }\n+                    case (_) {\n+                        args = vec();\n+                    }\n+                }\n+\n+                expect(p, token.SEMI);\n+\n+                variants += vec(rec(name=name, args=args));\n+            }\n+            case (token.RBRACE) { /* empty */ }\n+            case (_) {\n+                p.err(\"expected name of variant or '}' but found \" +\n+                      token.to_str(tok));\n+            }\n+        }\n+    }\n+    p.bump();\n+\n+    auto hi = p.get_span();\n+    auto item = ast.item_tag(id, variants, p.next_def_id());\n+    ret tup(id, @spanned(lo, hi, item));\n+}\n+\n impure fn parse_item(parser p) -> tup(ast.ident, @ast.item) {\n     alt (p.peek()) {\n         case (token.FN) {\n@@ -1030,6 +1076,9 @@ impure fn parse_item(parser p) -> tup(ast.ident, @ast.item) {\n         case (token.TYPE) {\n             ret parse_item_type(p);\n         }\n+        case (token.TAG) {\n+            ret parse_item_tag(p);\n+        }\n         case (?t) {\n             p.err(\"expected item but found \" + token.to_str(t));\n         }"}, {"sha": "f32eddae90355b6ffb5fe72c6d8725b50d8d3365", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=5d72dae1d13fdbe6275d732aac7dd9a9ad604b6f", "patch": "@@ -148,6 +148,10 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, ident ident,\n          @ty t, def_id id, ann a) -> @item)       fold_item_ty,\n \n+     (fn(&ENV e, &span sp, ident ident,\n+         vec[ast.variant] variants,\n+         def_id id) -> @item)                     fold_item_tag,\n+\n      // Additional nodes.\n      (fn(&ENV e, &span sp,\n          &ast.block_) -> block)                   fold_block,\n@@ -495,6 +499,18 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n             let @ast.ty ty_ = fold_ty[ENV](env_, fld, ty);\n             ret fld.fold_item_ty(env_, i.span, ident, ty_, id, ann);\n         }\n+\n+        case (ast.item_tag(?ident, ?variants, ?id)) {\n+            let vec[ast.variant] new_variants = vec();\n+            for (ast.variant v in variants) {\n+                let vec[@ast.ty] new_args = vec();\n+                for (@ast.ty t in v.args) {\n+                    new_args += vec(fold_ty[ENV](env_, fld, t));\n+                }\n+                new_variants += rec(name=v.name, args=new_args);\n+            }\n+            ret fld.fold_item_tag(env_, i.span, ident, new_variants, id);\n+        }\n     }\n \n     fail;\n@@ -723,6 +739,12 @@ fn identity_fold_item_ty[ENV](&ENV e, &span sp, ident i,\n     ret @respan(sp, ast.item_ty(i, t, id, a));\n }\n \n+fn identity_fold_item_tag[ENV](&ENV e, &span sp, ident i,\n+                               vec[ast.variant] variants,\n+                               def_id id) -> @item {\n+    ret @respan(sp, ast.item_tag(i, variants, id));\n+}\n+\n \n // Additional identities.\n \n@@ -832,6 +854,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_),\n+         fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_),"}]}