{"sha": "b2418e82d3375c5c49b097d01bea97e06239918d", "node_id": "C_kwDOAAsO6NoAKGIyNDE4ZTgyZDMzNzVjNWM0OWIwOTdkMDFiZWE5N2UwNjIzOTkxOGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T18:35:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T18:35:59Z"}, "message": "Auto merge of #2425 - RalfJung:hide-xargo, r=RalfJung\n\ndon't dump xargo output onto users of 'cargo miri test'\n\nThe xargo invocation prints a lot of details users probably won't care about, so let's hide them (unless the user did `cargo miri setup`, then we still print everything).", "tree": {"sha": "2780eb92b4767a7c8e9261b805a561c5935369fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2780eb92b4767a7c8e9261b805a561c5935369fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2418e82d3375c5c49b097d01bea97e06239918d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2418e82d3375c5c49b097d01bea97e06239918d", "html_url": "https://github.com/rust-lang/rust/commit/b2418e82d3375c5c49b097d01bea97e06239918d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2418e82d3375c5c49b097d01bea97e06239918d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302e9ae206ed148fc009d84c05ce0c99877ef6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/302e9ae206ed148fc009d84c05ce0c99877ef6aa", "html_url": "https://github.com/rust-lang/rust/commit/302e9ae206ed148fc009d84c05ce0c99877ef6aa"}, {"sha": "0c5392f4354ba06028155c318fca1d3b287f83ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5392f4354ba06028155c318fca1d3b287f83ea", "html_url": "https://github.com/rust-lang/rust/commit/0c5392f4354ba06028155c318fca1d3b287f83ea"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "4c0b9e41d3bfa2ca910081df1c41d377ce390540", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b2418e82d3375c5c49b097d01bea97e06239918d/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2418e82d3375c5c49b097d01bea97e06239918d/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=b2418e82d3375c5c49b097d01bea97e06239918d", "patch": "@@ -497,9 +497,26 @@ path = \"lib.rs\"\n     // Disable debug assertions in the standard library -- Miri is already slow enough.\n     // But keep the overflow checks, they are cheap.\n     command.env(\"RUSTFLAGS\", \"-Cdebug-assertions=off -Coverflow-checks=on\");\n+    // Manage the output the user sees.\n+    if only_setup {\n+        eprintln!(\"Preparing a sysroot for Miri...\");\n+    } else {\n+        eprint!(\"Preparing a sysroot for Miri... \");\n+        command.stdout(process::Stdio::null());\n+        command.stderr(process::Stdio::null());\n+    }\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n-        show_error(format!(\"failed to run xargo\"));\n+        if only_setup {\n+            show_error(format!(\"failed to run xargo, see error details above\"))\n+        } else {\n+            show_error(format!(\n+                \"failed to run xargo; run `cargo miri setup` to see the error details\"\n+            ))\n+        }\n+    }\n+    if !only_setup {\n+        eprintln!(\"done\");\n     }\n \n     // That should be it! But we need to figure out where xargo built stuff.\n@@ -510,10 +527,10 @@ path = \"lib.rs\"\n     // Figure out what to print.\n     let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n     if print_sysroot {\n-        // Print just the sysroot and nothing else; this way we do not need any escaping.\n+        // Print just the sysroot and nothing else to stdout; this way we do not need any escaping.\n         println!(\"{}\", sysroot.display());\n     } else if only_setup {\n-        println!(\"A libstd for Miri is now available in `{}`.\", sysroot.display());\n+        eprintln!(\"A sysroot for Miri is now available in `{}`.\", sysroot.display());\n     }\n }\n "}, {"sha": "7bd131405bd501a3c6edbc16406c75c4212ae55b", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2418e82d3375c5c49b097d01bea97e06239918d/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b2418e82d3375c5c49b097d01bea97e06239918d/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=b2418e82d3375c5c49b097d01bea97e06239918d", "patch": "@@ -21,6 +21,7 @@ function run_tests {\n     echo \"Testing host architecture\"\n   fi\n \n+  ## ui test suite\n   ./miri test --locked\n   if [ -z \"${MIRI_TEST_TARGET+exists}\" ]; then\n     # Only for host architecture: tests with optimizations (`-O` is what cargo passes, but crank MIR\n@@ -30,15 +31,13 @@ function run_tests {\n     MIRIFLAGS=\"-O -Zmir-opt-level=4\" MIRI_SKIP_UI_CHECKS=1 ./miri test --locked -- tests/{pass,panic}\n   fi\n \n+  ## test-cargo-miri\n   # On Windows, there is always \"python\", not \"python3\" or \"python2\".\n   if command -v python3 > /dev/null; then\n     PYTHON=python3\n   else\n     PYTHON=python\n   fi\n-\n-  # \"miri test\" has built the sysroot for us, now this should pass without\n-  # any interactive questions.\n   ${PYTHON} test-cargo-miri/run-test.py\n   echo\n "}, {"sha": "3e45f77d54c3a33ad8ca17124ce45a046596220d", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b2418e82d3375c5c49b097d01bea97e06239918d/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2418e82d3375c5c49b097d01bea97e06239918d/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b2418e82d3375c5c49b097d01bea97e06239918d", "patch": "@@ -367,20 +367,14 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             measureme::Profiler::new(out).expect(\"Couldn't create `measureme` profiler\")\n         });\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n-        let stacked_borrows = if config.stacked_borrows {\n-            Some(RefCell::new(stacked_borrows::GlobalStateInner::new(\n+        let stacked_borrows = config.stacked_borrows.then(|| {\n+            RefCell::new(stacked_borrows::GlobalStateInner::new(\n                 config.tracked_pointer_tags.clone(),\n                 config.tracked_call_ids.clone(),\n                 config.retag_fields,\n-            )))\n-        } else {\n-            None\n-        };\n-        let data_race = if config.data_race_detector {\n-            Some(data_race::GlobalState::new(config))\n-        } else {\n-            None\n-        };\n+            ))\n+        });\n+        let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n         Evaluator {\n             stacked_borrows,\n             data_race,\n@@ -691,32 +685,24 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         }\n \n         let alloc = alloc.into_owned();\n-        let stacks = if let Some(stacked_borrows) = &ecx.machine.stacked_borrows {\n-            Some(Stacks::new_allocation(\n+        let stacks = ecx.machine.stacked_borrows.as_ref().map(|stacked_borrows| {\n+            Stacks::new_allocation(\n                 id,\n                 alloc.size(),\n                 stacked_borrows,\n                 kind,\n                 ecx.machine.current_span(),\n-            ))\n-        } else {\n-            None\n-        };\n-        let race_alloc = if let Some(data_race) = &ecx.machine.data_race {\n-            Some(data_race::AllocExtra::new_allocation(\n+            )\n+        });\n+        let race_alloc = ecx.machine.data_race.as_ref().map(|data_race| {\n+            data_race::AllocExtra::new_allocation(\n                 data_race,\n                 &ecx.machine.threads,\n                 alloc.size(),\n                 kind,\n-            ))\n-        } else {\n-            None\n-        };\n-        let buffer_alloc = if ecx.machine.weak_memory {\n-            Some(weak_memory::AllocExtra::new_allocation())\n-        } else {\n-            None\n-        };\n+            )\n+        });\n+        let buffer_alloc = ecx.machine.weak_memory.then(weak_memory::AllocExtra::new_allocation);\n         let alloc: Allocation<Provenance, Self::AllocExtra> = alloc.adjust_from_tcx(\n             &ecx.tcx,\n             AllocExtra {"}, {"sha": "3805bd19777f733c1f05ddd5253d80ed14c5ee56", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2418e82d3375c5c49b097d01bea97e06239918d/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/b2418e82d3375c5c49b097d01bea97e06239918d/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=b2418e82d3375c5c49b097d01bea97e06239918d", "patch": "@@ -25,7 +25,12 @@ def cargo_miri(cmd, quiet = True):\n \n def normalize_stdout(str):\n     str = str.replace(\"src\\\\\", \"src/\") # normalize paths across platforms\n-    return re.sub(\"finished in \\d+\\.\\d\\ds\", \"finished in $TIME\", str)\n+    str = re.sub(\"finished in \\d+\\.\\d\\ds\", \"finished in $TIME\", str) # the time keeps changing, obviously\n+    return str\n+\n+def normalize_stderr(str):\n+    str = str.replace(\"Preparing a sysroot for Miri... done\\n\", \"\") # remove leading cargo-miri setup output\n+    return str\n \n def check_output(actual, path, name):\n     expected = open(path).read()\n@@ -51,9 +56,8 @@ def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n         env=p_env,\n     )\n     (stdout, stderr) = p.communicate(input=stdin)\n-    stdout = stdout.decode(\"UTF-8\")\n-    stderr = stderr.decode(\"UTF-8\")\n-    stdout = normalize_stdout(stdout)\n+    stdout = normalize_stdout(stdout.decode(\"UTF-8\"))\n+    stderr = normalize_stderr(stderr.decode(\"UTF-8\"))\n \n     stdout_matches = check_output(stdout, stdout_ref, \"stdout\")\n     stderr_matches = check_output(stderr, stderr_ref, \"stderr\")\n@@ -175,10 +179,6 @@ def test_cargo_miri_test():\n target_str = \" for target {}\".format(os.environ['MIRI_TEST_TARGET']) if 'MIRI_TEST_TARGET' in os.environ else \"\"\n print(CGREEN + CBOLD + \"## Running `cargo miri` tests{}\".format(target_str) + CEND)\n \n-if not 'MIRI_SYSROOT' in os.environ:\n-    # Make sure we got a working sysroot.\n-    # (If the sysroot gets built later when output is compared, that leads to test failures.)\n-    subprocess.run(cargo_miri(\"setup\"), check=True)\n test_cargo_miri_run()\n test_cargo_miri_test()\n # Ensure we did not create anything outside the expected target dir."}]}