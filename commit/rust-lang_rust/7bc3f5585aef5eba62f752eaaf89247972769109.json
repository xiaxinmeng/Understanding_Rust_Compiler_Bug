{"sha": "7bc3f5585aef5eba62f752eaaf89247972769109", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzNmNTU4NWFlZjVlYmE2MmY3NTJlYWFmODkyNDc5NzI3NjkxMDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-19T00:07:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "apply the same logic to ConcreteFailure errors", "tree": {"sha": "911a7227af6a82bf9863152940c47134a9a37fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911a7227af6a82bf9863152940c47134a9a37fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc3f5585aef5eba62f752eaaf89247972769109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc3f5585aef5eba62f752eaaf89247972769109", "html_url": "https://github.com/rust-lang/rust/commit/7bc3f5585aef5eba62f752eaaf89247972769109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc3f5585aef5eba62f752eaaf89247972769109/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77924de4a66b55d2c863cf66ff9f427d3ae79788", "url": "https://api.github.com/repos/rust-lang/rust/commits/77924de4a66b55d2c863cf66ff9f427d3ae79788", "html_url": "https://github.com/rust-lang/rust/commit/77924de4a66b55d2c863cf66ff9f427d3ae79788"}], "stats": {"total": 107, "additions": 69, "deletions": 38}, "files": [{"sha": "4e59c8c43dc096b7593563095b8b4d547f15c8af", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=7bc3f5585aef5eba62f752eaaf89247972769109", "patch": "@@ -89,6 +89,56 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 // I actually can't see why this would be the case ever.\n             },\n \n+            Some(RegionResolutionError::ConcreteFailure(\n+                SubregionOrigin::Subtype(TypeTrace { .. }),\n+                ty::RePlaceholder(_),\n+                ty::RePlaceholder(_),\n+            )) => {\n+                // I actually can't see why this would be the case ever.\n+            },\n+\n+            Some(RegionResolutionError::ConcreteFailure(\n+                SubregionOrigin::Subtype(TypeTrace {\n+                    cause,\n+                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n+                }),\n+                sub_region,\n+                sup_region @ ty::RePlaceholder(_),\n+            )) => if expected.def_id == found.def_id {\n+                return Some(self.try_report_placeholders_trait(\n+                    Some(sub_region),\n+                    cause,\n+                    None,\n+                    Some(*sup_region),\n+                    expected.def_id,\n+                    expected.substs,\n+                    found.substs,\n+                ));\n+            } else {\n+                // I actually can't see why this would be the case ever.\n+            },\n+\n+            Some(RegionResolutionError::ConcreteFailure(\n+                SubregionOrigin::Subtype(TypeTrace {\n+                    cause,\n+                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n+                }),\n+                sub_region @ ty::RePlaceholder(_),\n+                sup_region,\n+            )) => if expected.def_id == found.def_id {\n+                return Some(self.try_report_placeholders_trait(\n+                    Some(sup_region),\n+                    cause,\n+                    None,\n+                    Some(*sub_region),\n+                    expected.def_id,\n+                    expected.substs,\n+                    found.substs,\n+                ));\n+            } else {\n+                // I actually can't see why this would be the case ever.\n+            },\n+\n             _ => {}\n         }\n "}, {"sha": "46d72899438576137f587c1d2a17476cd5cc35c4", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=7bc3f5585aef5eba62f752eaaf89247972769109", "patch": "@@ -28,8 +28,7 @@ fn main() {\n         assert_foo(x);\n     };\n     assert_foo(gen);\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //~^ ERROR implementation of `Foo` is not general enough\n \n     // Allow impls which matches any lifetime\n     let x = &OnlyFooIfRef(No);"}, {"sha": "94162cb9e8fb0c8bfe640c3a4fcac712e3296bbf", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=7bc3f5585aef5eba62f752eaaf89247972769109", "patch": "@@ -1,34 +1,20 @@\n-error[E0308]: mismatched types\n-  --> $DIR/auto-trait-regions.rs:30:5\n-   |\n-LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `Foo`\n-              found type `Foo`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U31, name: BrAnon(1) })...\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error[E0308]: mismatched types\n+error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:30:5\n    |\n LL |     assert_foo(gen);\n-   |     ^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^\n    |\n-   = note: expected type `Foo`\n-              found type `Foo`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U35, name: BrAnon(1) })...\n-   = note: ...does not necessarily outlive the static lifetime\n+   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo` for any lifetime `'0`\n+   = note: but `&'1 OnlyFooIfStaticRef` only implements `Foo` for some lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:48:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n    = note: `A<'0, '1>` must implement `Foo` for any two lifetimes `'0` and `'1`\n    = note: but `A<'_, '2>` only implements `Foo` for some lifetime `'2`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "ee518b956ab1c917aabbc581c305ac4b79e7bea4", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=7bc3f5585aef5eba62f752eaaf89247972769109", "patch": "@@ -1,13 +1,12 @@\n-error[E0308]: mismatched types\n+error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n LL |     want_hrtb::<StaticInt>() //~ ERROR\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected type `Foo<&'a isize>`\n-              found type `Foo<&'static isize>`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:11), 'a) })...\n-   = note: ...does not necessarily outlive the static lifetime\n+   = note: Due to a where-clause on `want_hrtb`,\n+   = note: `StaticInt` must implement `Foo<&'0 isize>` for any lifetime `'0`\n+   = note: but `StaticInt` only implements `Foo<&'1 isize>` for some lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5\n@@ -21,4 +20,3 @@ LL |     want_hrtb::<&'a u32>() //~ ERROR\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "0ce38e69f6b0fa8c29c4a45f5305713e7e6f7d15", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=7bc3f5585aef5eba62f752eaaf89247972769109", "patch": "@@ -18,5 +18,5 @@ fn foo<T>(x: &T)\n {}\n \n fn main() {\n-    foo(&X); //~ ERROR E0308\n+    foo(&X); //~ ERROR implementation of `Bar` is not general enough\n }"}, {"sha": "06f3659a5c17df054dcff24a459d8c00383178bb", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bc3f5585aef5eba62f752eaaf89247972769109/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=7bc3f5585aef5eba62f752eaaf89247972769109", "patch": "@@ -1,14 +1,12 @@\n-error[E0308]: mismatched types\n+error: implementation of `Bar` is not general enough\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL |     foo(&X); //~ ERROR E0308\n-   |     ^^^ lifetime mismatch\n+LL |     foo(&X); //~ ERROR implementation of `Bar` is not general enough\n+   |     ^^^\n    |\n-   = note: expected type `Bar`\n-              found type `Bar`\n-   = note: lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:10), 'a) })...\n-   = note: ...does not necessarily outlive the static lifetime\n+   = note: Due to a where-clause on `foo`,\n+   = note: `&'0 _` must implement `Bar` for any lifetime `'0`\n+   = note: but `&'1 u32` only implements `Bar` for some lifetime `'1`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}]}