{"sha": "e237690a28f0d38ab478616fe4b247fb6eb8013f", "node_id": "C_kwDOAAsO6NoAKGUyMzc2OTBhMjhmMGQzOGFiNDc4NjE2ZmU0YjI0N2ZiNmViODAxM2Y", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-13T05:08:07Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-01-20T21:53:33Z"}, "message": "diagnostics: add `};` only if `{` was added too", "tree": {"sha": "6375efdefc65f144f8157d12b390b4f823c9dbe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6375efdefc65f144f8157d12b390b4f823c9dbe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e237690a28f0d38ab478616fe4b247fb6eb8013f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e237690a28f0d38ab478616fe4b247fb6eb8013f", "html_url": "https://github.com/rust-lang/rust/commit/e237690a28f0d38ab478616fe4b247fb6eb8013f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e237690a28f0d38ab478616fe4b247fb6eb8013f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf", "html_url": "https://github.com/rust-lang/rust/commit/e9d8d238ef76c7991b316bbfbd9f857d84bd39cf"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "af4d7a8eafff3afb2172167a3b6e659757adde79", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e237690a28f0d38ab478616fe4b247fb6eb8013f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e237690a28f0d38ab478616fe4b247fb6eb8013f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e237690a28f0d38ab478616fe4b247fb6eb8013f", "patch": "@@ -2161,18 +2161,18 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             format!(\"{{{}, {}\", import_snippet, start_snippet)\n                         },\n                     ));\n+\n+                    // Add a `};` to the end if nested, matching the `{` added at the start.\n+                    if !has_nested {\n+                        corrections.push((source_map.end_point(after_crate_name), \"};\".to_string()));\n+                    }\n                 } else {\n                     // If the root import is module-relative, add the import separately\n                     corrections.push((\n                         source_map.start_point(import.use_span).shrink_to_lo(),\n                         format!(\"use {module_name}::{import_snippet};\\n\"),\n                     ));\n                 }\n-\n-                // Add a `};` to the end if nested, matching the `{` added at the start.\n-                if !has_nested {\n-                    corrections.push((source_map.end_point(after_crate_name), \"};\".to_string()));\n-                }\n             }\n \n             let suggestion = Some(("}, {"sha": "0e60c73b67a44e274dfc886d4d33e1b26f9262bb", "filename": "tests/ui/imports/issue-99695-b.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e237690a28f0d38ab478616fe4b247fb6eb8013f/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e237690a28f0d38ab478616fe4b247fb6eb8013f/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.fixed?ref=e237690a28f0d38ab478616fe4b247fb6eb8013f", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+\n+    mod p {\n+        #[macro_export]\n+        macro_rules! nu {\n+            {} => {};\n+        }\n+\n+        pub struct other_item;\n+    }\n+\n+    use ::nu;\n+pub use self::p::{other_item as _};\n+    //~^ ERROR unresolved import `self::p::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "031443a1f5df892f2bd5300112d66866cdae0d59", "filename": "tests/ui/imports/issue-99695-b.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e237690a28f0d38ab478616fe4b247fb6eb8013f/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e237690a28f0d38ab478616fe4b247fb6eb8013f/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.rs?ref=e237690a28f0d38ab478616fe4b247fb6eb8013f", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+\n+    mod p {\n+        #[macro_export]\n+        macro_rules! nu {\n+            {} => {};\n+        }\n+\n+        pub struct other_item;\n+    }\n+\n+    pub use self::p::{nu, other_item as _};\n+    //~^ ERROR unresolved import `self::p::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "b6f5c726a5ca9ae342798754cfcbe999b795ddeb", "filename": "tests/ui/imports/issue-99695-b.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e237690a28f0d38ab478616fe4b247fb6eb8013f/tests%2Fui%2Fimports%2Fissue-99695-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e237690a28f0d38ab478616fe4b247fb6eb8013f/tests%2Fui%2Fimports%2Fissue-99695-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.stderr?ref=e237690a28f0d38ab478616fe4b247fb6eb8013f", "patch": "@@ -0,0 +1,16 @@\n+error[E0432]: unresolved import `self::p::nu`\n+  --> $DIR/issue-99695-b.rs:14:23\n+   |\n+LL |     pub use self::p::{nu, other_item as _};\n+   |                       ^^ no `nu` in `m::p`\n+   |\n+   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n+help: a macro with this name exists at the root of the crate\n+   |\n+LL ~     use ::nu;\n+LL ~ pub use self::p::{other_item as _};\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}]}