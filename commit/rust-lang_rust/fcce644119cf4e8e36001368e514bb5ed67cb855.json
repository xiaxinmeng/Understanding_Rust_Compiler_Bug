{"sha": "fcce644119cf4e8e36001368e514bb5ed67cb855", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjY2U2NDQxMTljZjRlOGUzNjAwMTM2OGU1MTRiYjVlZDY3Y2I4NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-02T13:12:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-02T13:12:59Z"}, "message": "Auto merge of #88530 - bjorn3:shrink_session, r=cjgillot\n\nShrink Session a bit\n\nRemove a couple of unnecessary fields from `Session` and remove a `Lock<T>` for a field that is never mutated anyway.", "tree": {"sha": "8058e32ec6ced8b9d3ac006686263aba91a4ae17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8058e32ec6ced8b9d3ac006686263aba91a4ae17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcce644119cf4e8e36001368e514bb5ed67cb855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcce644119cf4e8e36001368e514bb5ed67cb855", "html_url": "https://github.com/rust-lang/rust/commit/fcce644119cf4e8e36001368e514bb5ed67cb855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcce644119cf4e8e36001368e514bb5ed67cb855/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64929313f53181636e4dd37e25836973205477e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/64929313f53181636e4dd37e25836973205477e4", "html_url": "https://github.com/rust-lang/rust/commit/64929313f53181636e4dd37e25836973205477e4"}, {"sha": "74c7f1267b2afe17332ba3aa6b00eb9452404cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c7f1267b2afe17332ba3aa6b00eb9452404cf3", "html_url": "https://github.com/rust-lang/rust/commit/74c7f1267b2afe17332ba3aa6b00eb9452404cf3"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "3de706ed6d7afdb547d7171819dbc0a2a711b453", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=fcce644119cf4e8e36001368e514bb5ed67cb855", "patch": "@@ -68,14 +68,13 @@ fn reuse_workproduct_for_cgu(\n     cgu: &CodegenUnit<'_>,\n     work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n ) -> CompiledModule {\n-    let incr_comp_session_dir = tcx.sess.incr_comp_session_dir();\n     let mut object = None;\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out =\n             tcx.output_filenames(()).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n-        let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n+        let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n             tcx.sess.err(&format!(\n                 \"unable to copy {} to {}: {}\","}, {"sha": "53053327d0dab276b0c90134b18854a84d0fe483", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=fcce644119cf4e8e36001368e514bb5ed67cb855", "patch": "@@ -423,10 +423,10 @@ fn run_compiler(\n             sess.print_perf_stats();\n         }\n \n-        if sess.print_fuel_crate.is_some() {\n+        if sess.opts.debugging_opts.print_fuel.is_some() {\n             eprintln!(\n                 \"Fuel used by {}: {}\",\n-                sess.print_fuel_crate.as_ref().unwrap(),\n+                sess.opts.debugging_opts.print_fuel.as_ref().unwrap(),\n                 sess.print_fuel.load(SeqCst)\n             );\n         }"}, {"sha": "0f7db69fefefc779cb66adc8035bb8a330dfb45f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcce644119cf4e8e36001368e514bb5ed67cb855/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=fcce644119cf4e8e36001368e514bb5ed67cb855", "patch": "@@ -170,15 +170,9 @@ pub struct Session {\n     /// Data about code being compiled, gathered during compilation.\n     pub code_stats: CodeStats,\n \n-    /// If `-zfuel=crate=n` is specified, `Some(crate)`.\n-    optimization_fuel_crate: Option<String>,\n-\n     /// Tracks fuel info if `-zfuel=crate=n` is specified.\n     optimization_fuel: Lock<OptimizationFuel>,\n \n-    // The next two are public because the driver needs to read them.\n-    /// If `-zprint-fuel=crate`, `Some(crate)`.\n-    pub print_fuel_crate: Option<String>,\n     /// Always set to zero and incremented so that we can print fuel expended by a crate.\n     pub print_fuel: AtomicU64,\n \n@@ -196,6 +190,9 @@ pub struct Session {\n     /// Tracks the current behavior of the CTFE engine when an error occurs.\n     /// Options range from returning the error without a backtrace to returning an error\n     /// and immediately printing the backtrace to stderr.\n+    /// The `Lock` is only used by miri to allow setting `ctfe_backtrace` after analysis when\n+    /// `MIRI_BACKTRACE` is set. This makes it only apply to miri's errors and not to all CTFE\n+    /// errors.\n     pub ctfe_backtrace: Lock<CtfeBacktrace>,\n \n     /// This tracks where `-Zunleash-the-miri-inside-of-you` was used to get around a\n@@ -890,7 +887,7 @@ impl Session {\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n         let mut ret = true;\n-        if let Some(ref c) = self.optimization_fuel_crate {\n+        if let Some(c) = self.opts.debugging_opts.fuel.as_ref().map(|i| &i.0) {\n             if c == crate_name {\n                 assert_eq!(self.threads(), 1);\n                 let mut fuel = self.optimization_fuel.lock();\n@@ -903,7 +900,7 @@ impl Session {\n                 }\n             }\n         }\n-        if let Some(ref c) = self.print_fuel_crate {\n+        if let Some(ref c) = self.opts.debugging_opts.print_fuel {\n             if c == crate_name {\n                 assert_eq!(self.threads(), 1);\n                 self.print_fuel.fetch_add(1, SeqCst);\n@@ -1261,12 +1258,10 @@ pub fn build_session(\n     let local_crate_source_file =\n         local_crate_source_file.map(|path| file_path_mapping.map_prefix(path).0);\n \n-    let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n     let optimization_fuel = Lock::new(OptimizationFuel {\n         remaining: sopts.debugging_opts.fuel.as_ref().map_or(0, |i| i.1),\n         out_of_fuel: false,\n     });\n-    let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n     let print_fuel = AtomicU64::new(0);\n \n     let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {\n@@ -1314,9 +1309,7 @@ pub fn build_session(\n             normalize_projection_ty: AtomicUsize::new(0),\n         },\n         code_stats: Default::default(),\n-        optimization_fuel_crate,\n         optimization_fuel,\n-        print_fuel_crate,\n         print_fuel,\n         jobserver: jobserver::client(),\n         driver_lint_caps,"}]}