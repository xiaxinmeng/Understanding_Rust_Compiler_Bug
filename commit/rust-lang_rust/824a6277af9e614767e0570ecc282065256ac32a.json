{"sha": "824a6277af9e614767e0570ecc282065256ac32a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNGE2Mjc3YWY5ZTYxNDc2N2UwNTcwZWNjMjgyMDY1MjU2YWMzMmE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-13T03:09:56Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-15T03:15:42Z"}, "message": "rm CopyableNonstrictIter\n\ncopies can just be done explicitly: `xs.transform(|x|x.clone())`", "tree": {"sha": "cfe7b81d1b6d2a17b609a2397dea2b43d6077518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe7b81d1b6d2a17b609a2397dea2b43d6077518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824a6277af9e614767e0570ecc282065256ac32a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824a6277af9e614767e0570ecc282065256ac32a", "html_url": "https://github.com/rust-lang/rust/commit/824a6277af9e614767e0570ecc282065256ac32a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824a6277af9e614767e0570ecc282065256ac32a/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68be89e6912a394beb12c2731bdc6240a81655b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68be89e6912a394beb12c2731bdc6240a81655b", "html_url": "https://github.com/rust-lang/rust/commit/d68be89e6912a394beb12c2731bdc6240a81655b"}], "stats": {"total": 54, "additions": 1, "deletions": 53}, "files": [{"sha": "9fea4376816150145d50b08afe79a7eddf37bc75", "filename": "src/libstd/old_iter.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/824a6277af9e614767e0570ecc282065256ac32a/src%2Flibstd%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824a6277af9e614767e0570ecc282065256ac32a/src%2Flibstd%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_iter.rs?ref=824a6277af9e614767e0570ecc282065256ac32a", "patch": "@@ -59,13 +59,6 @@ pub trait CopyableOrderedIter<A:Copy + Ord> {\n     fn max(&self) -> A;\n }\n \n-pub trait CopyableNonstrictIter<A:Copy> {\n-    // Like \"each\", but copies out the value. If the receiver is mutated while\n-    // iterating over it, the semantics must not be memory-unsafe but are\n-    // otherwise undefined.\n-    fn each_val(&const self, f: &fn(A) -> bool) -> bool;\n-}\n-\n // A trait for sequences that can be built by imperatively pushing elements\n // onto them.\n pub trait Buildable<A> {"}, {"sha": "61b8d36266e20a7e104e5feefd014a5a31db3815", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/824a6277af9e614767e0570ecc282065256ac32a/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824a6277af9e614767e0570ecc282065256ac32a/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=824a6277af9e614767e0570ecc282065256ac32a", "patch": "@@ -47,7 +47,7 @@ pub use char::Char;\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n pub use old_iter::{BaseIter, ReverseIter, ExtendedIter, EqIter};\n-pub use old_iter::{CopyableIter, CopyableOrderedIter, CopyableNonstrictIter};\n+pub use old_iter::{CopyableIter, CopyableOrderedIter};\n pub use iter::{Times, FromIter};\n pub use iterator::{Iterator, IteratorUtil};\n pub use num::{Num, NumCast};"}, {"sha": "91e94f7dcf85c971427fe36ed6643ce9afbef491", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/824a6277af9e614767e0570ecc282065256ac32a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824a6277af9e614767e0570ecc282065256ac32a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=824a6277af9e614767e0570ecc282065256ac32a", "patch": "@@ -2630,41 +2630,6 @@ impl<A:Copy + Ord> old_iter::CopyableOrderedIter<A> for @[A] {\n     fn max(&self) -> A { old_iter::max(self) }\n }\n \n-impl<'self,A:Copy> old_iter::CopyableNonstrictIter<A> for &'self [A] {\n-    fn each_val(&const self, f: &fn(A) -> bool) -> bool {\n-        let mut i = 0;\n-        while i < self.len() {\n-            if !f(copy self[i]) { return false; }\n-            i += 1;\n-        }\n-        return true;\n-    }\n-}\n-\n-// FIXME(#4148): This should be redundant\n-impl<A:Copy> old_iter::CopyableNonstrictIter<A> for ~[A] {\n-    fn each_val(&const self, f: &fn(A) -> bool) -> bool {\n-        let mut i = 0;\n-        while i < uniq_len(self) {\n-            if !f(copy self[i]) { return false; }\n-            i += 1;\n-        }\n-        return true;\n-    }\n-}\n-\n-// FIXME(#4148): This should be redundant\n-impl<A:Copy> old_iter::CopyableNonstrictIter<A> for @[A] {\n-    fn each_val(&const self, f: &fn(A) -> bool) -> bool {\n-        let mut i = 0;\n-        while i < self.len() {\n-            if !f(copy self[i]) { return false; }\n-            i += 1;\n-        }\n-        return true;\n-    }\n-}\n-\n impl<A:Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n@@ -4326,14 +4291,4 @@ mod tests {\n         }\n         assert_eq!(v, ~[~[1,2,3],~[1,3,2],~[2,1,3],~[2,3,1],~[3,1,2],~[3,2,1]]);\n     }\n-\n-    #[test]\n-    fn test_each_val() {\n-        use old_iter::CopyableNonstrictIter;\n-        let mut i = 0;\n-        for [1, 2, 3].each_val |v| {\n-            i += v;\n-        }\n-        assert_eq!(i, 6);\n-    }\n }"}]}