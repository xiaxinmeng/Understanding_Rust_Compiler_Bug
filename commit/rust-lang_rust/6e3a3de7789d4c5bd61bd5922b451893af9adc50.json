{"sha": "6e3a3de7789d4c5bd61bd5922b451893af9adc50", "node_id": "C_kwDOAAsO6NoAKDZlM2EzZGU3Nzg5ZDRjNWJkNjFiZDU5MjJiNDUxODkzYWY5YWRjNTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-14T16:40:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-14T16:40:04Z"}, "message": "Rollup merge of #108915 - spastorino:new-rpitit-8, r=compiler-errors\n\nRemove some direct calls to local_def_id_to_hir_id on diagnostics\n\nWas playing with `tests/ui/impl-trait/in-trait/default-body-with-rpit.rs` and was able to remove some ICEs. Still getting ...\n\n```\nerror[E0277]: `impl Future<Output = Foo::{opaque#0}>` is not a future\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ `impl Future<Output = Foo::{opaque#0}>` is not a future\n   |\n   = help: the trait `Future` is not implemented for `impl Future<Output = Foo::{opaque#0}>`\n   = note: impl Future<Output = Foo::{opaque#0}> must be a future or must implement `IntoFuture` to be awaited\nnote: required by a bound in `Foo::{opaque#1}`\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ required by this bound in `Foo::{opaque#1}`\n\nerror[E0277]: the size for values of type `impl Future<Output = Foo::{opaque#0}>` cannot be known at compilation time\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `impl Future<Output = Foo::{opaque#0}>`\nnote: required by a bound in `Foo::{opaque#1}`\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ required by this bound in `Foo::{opaque#1}`\n\nerror: internal compiler error: compiler/rustc_hir_typeck/src/closure.rs:724:18: async fn generator return type not an inference variable: Foo::{opaque#1}<'_>\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:39\n   |\n10 |       async fn baz(&self) -> impl Debug {\n   |  _______________________________________^\n11 | |         \"\"\n12 | |     }\n   | |_____^\n```\n\nBut I guess this is a little bit of progress anyway.\n\nThis one goes on top of #108700 and #108945\nr? `@compiler-errors`", "tree": {"sha": "887ce2b43952590abee41311de048dcccb190778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/887ce2b43952590abee41311de048dcccb190778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3a3de7789d4c5bd61bd5922b451893af9adc50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEKNkCRBK7hj4Ov3rIwAA2J8IACErWH/K0IsRgHHSQ3/BfQAr\nK8sdcuBzrFPDUaGRk9D+82zx3DNGNRBitFyE+73W4bbU7P+Kvawm8+TLs80GpU/P\nG1uzMq7D+qRMWgoYM2akqGHr8Dfh6pDg+M0cKxElWMRc1ChRdZ7c2Avqo6V4Dzs3\nQfkJHPThhHDiWAgU8L9WYD5fqAJHeap6hrA9C7MNouEHGYF/X0oWgUExdW7KdxQB\nivgYUfOeNFyu7H4CzwgWTntVpRIgQmfOkRgrXJ6QY2E2RpXWb7Lz8JeQV8h96FX+\nMuOeSIoI9mwVProggA/miXQUXlPzj3h/uEgBPL1v2cXCjcwvjh7KoJqUjbWmdqg=\n=vXfL\n-----END PGP SIGNATURE-----\n", "payload": "tree 887ce2b43952590abee41311de048dcccb190778\nparent 48934c48c624deb47a7ec9e2774ff3ac9cb142ae\nparent 4824363e67b62aa5e96fec5873d373cdc2cac96a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678812004 +0100\ncommitter GitHub <noreply@github.com> 1678812004 +0100\n\nRollup merge of #108915 - spastorino:new-rpitit-8, r=compiler-errors\n\nRemove some direct calls to local_def_id_to_hir_id on diagnostics\n\nWas playing with `tests/ui/impl-trait/in-trait/default-body-with-rpit.rs` and was able to remove some ICEs. Still getting ...\n\n```\nerror[E0277]: `impl Future<Output = Foo::{opaque#0}>` is not a future\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ `impl Future<Output = Foo::{opaque#0}>` is not a future\n   |\n   = help: the trait `Future` is not implemented for `impl Future<Output = Foo::{opaque#0}>`\n   = note: impl Future<Output = Foo::{opaque#0}> must be a future or must implement `IntoFuture` to be awaited\nnote: required by a bound in `Foo::{opaque#1}`\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ required by this bound in `Foo::{opaque#1}`\n\nerror[E0277]: the size for values of type `impl Future<Output = Foo::{opaque#0}>` cannot be known at compilation time\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `impl Future<Output = Foo::{opaque#0}>`\nnote: required by a bound in `Foo::{opaque#1}`\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:28\n   |\n10 |     async fn baz(&self) -> impl Debug {\n   |                            ^^^^^^^^^^ required by this bound in `Foo::{opaque#1}`\n\nerror: internal compiler error: compiler/rustc_hir_typeck/src/closure.rs:724:18: async fn generator return type not an inference variable: Foo::{opaque#1}<'_>\n  --> tests/ui/impl-trait/in-trait/default-body-with-rpit.rs:10:39\n   |\n10 |       async fn baz(&self) -> impl Debug {\n   |  _______________________________________^\n11 | |         \"\"\n12 | |     }\n   | |_____^\n```\n\nBut I guess this is a little bit of progress anyway.\n\nThis one goes on top of #108700 and #108945\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a3de7789d4c5bd61bd5922b451893af9adc50", "html_url": "https://github.com/rust-lang/rust/commit/6e3a3de7789d4c5bd61bd5922b451893af9adc50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a3de7789d4c5bd61bd5922b451893af9adc50/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/48934c48c624deb47a7ec9e2774ff3ac9cb142ae", "html_url": "https://github.com/rust-lang/rust/commit/48934c48c624deb47a7ec9e2774ff3ac9cb142ae"}, {"sha": "4824363e67b62aa5e96fec5873d373cdc2cac96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4824363e67b62aa5e96fec5873d373cdc2cac96a", "html_url": "https://github.com/rust-lang/rust/commit/4824363e67b62aa5e96fec5873d373cdc2cac96a"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "8a4c10cd71c03c5b31a882e0c550199eaee69900", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a3de7789d4c5bd61bd5922b451893af9adc50/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a3de7789d4c5bd61bd5922b451893af9adc50/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6e3a3de7789d4c5bd61bd5922b451893af9adc50", "patch": "@@ -316,7 +316,7 @@ impl<'hir> Map<'hir> {\n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     #[inline]\n     pub fn find_by_def_id(self, id: LocalDefId) -> Option<Node<'hir>> {\n-        self.find(self.local_def_id_to_hir_id(id))\n+        self.find(self.tcx.opt_local_def_id_to_hir_id(id)?)\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n@@ -333,7 +333,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn get_if_local(self, id: DefId) -> Option<Node<'hir>> {\n-        id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))\n+        id.as_local().and_then(|id| self.find(self.tcx.opt_local_def_id_to_hir_id(id)?))\n     }\n \n     pub fn get_generics(self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {"}, {"sha": "277926688e21d51f7038bb277bef412ec5d809fd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a3de7789d4c5bd61bd5922b451893af9adc50/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a3de7789d4c5bd61bd5922b451893af9adc50/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=6e3a3de7789d4c5bd61bd5922b451893af9adc50", "patch": "@@ -144,6 +144,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n+        if self.tcx.opt_rpitit_info(obligation.cause.body_id.to_def_id()).is_some() {\n+            return OnUnimplementedNote::default();\n+        }\n+\n         let (def_id, substs) = self\n             .impl_similar_to(trait_ref, obligation)\n             .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));"}]}