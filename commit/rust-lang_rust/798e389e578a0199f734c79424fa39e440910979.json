{"sha": "798e389e578a0199f734c79424fa39e440910979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OGUzODllNTc4YTAxOTlmNzM0Yzc5NDI0ZmEzOWU0NDA5MTA5Nzk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-11T21:46:56Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-14T12:05:42Z"}, "message": "Update to use new librustc_error_codes library", "tree": {"sha": "e4ac66567e6bb0de6e170fe5f3a7de40a533d4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4ac66567e6bb0de6e170fe5f3a7de40a533d4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798e389e578a0199f734c79424fa39e440910979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798e389e578a0199f734c79424fa39e440910979", "html_url": "https://github.com/rust-lang/rust/commit/798e389e578a0199f734c79424fa39e440910979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798e389e578a0199f734c79424fa39e440910979/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3816fce76c04b0be2e06ee188b4aad45accf6479", "url": "https://api.github.com/repos/rust-lang/rust/commits/3816fce76c04b0be2e06ee188b4aad45accf6479", "html_url": "https://github.com/rust-lang/rust/commit/3816fce76c04b0be2e06ee188b4aad45accf6479"}], "stats": {"total": 238, "additions": 179, "deletions": 59}, "files": [{"sha": "adf58d6471b5e860b9d15d0a6b3419f1bdbf2266", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -40,3 +40,5 @@ byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+measureme = \"0.4\"\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "ea1c585176d57c837e9cb6c310fc1cb3338cf3de", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,6 +16,8 @@ use std::fmt::{self, Display};\n use syntax::{attr, symbol::sym};\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n #[derive(Copy, Clone, PartialEq)]\n pub(crate) enum MethodKind {\n     Trait { body: bool },"}, {"sha": "9c09ce9948672e318b961e012b8d55a9e7967b33", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -74,6 +74,8 @@ use syntax::visit::{self, Visitor};\n use syntax_pos::hygiene::ExpnId;\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n pub struct LoweringContext<'a> {"}, {"sha": "d5d3ff0db2ebc0e00939bdd53ddb52265a61a52f", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -11,6 +11,8 @@ use syntax::ast::*;\n use syntax::source_map::{respan, DesugaringKind, Span, Spanned};\n use syntax::symbol::{sym, Symbol};\n \n+use rustc_error_codes::*;\n+\n impl LoweringContext<'_> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> HirVec<hir::Expr> {\n         exprs.iter().map(|x| self.lower_expr(x)).collect()"}, {"sha": "137d21c35804f04f088ba2d0c12da55aab94a825", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -23,6 +23,8 @@ use syntax::source_map::{respan, DesugaringKind};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n pub(super) struct ItemLowerer<'tcx, 'interner> {\n     pub(super) lctx: &'tcx mut LoweringContext<'interner>,\n }"}, {"sha": "d0f6a8a434d67a8c2c6e8627c5b3f2994915f24d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -63,6 +63,8 @@ use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use std::{cmp, fmt};\n use syntax_pos::{Pos, Span};\n \n+use rustc_error_codes::*;\n+\n mod note;\n \n mod need_type_info;"}, {"sha": "32eecdf01a31fc7d908cd6036572cd1efb621ab4", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -9,6 +9,8 @@ use syntax::source_map::DesugaringKind;\n use syntax_pos::Span;\n use errors::{Applicability, DiagnosticBuilder};\n \n+use rustc_error_codes::*;\n+\n struct FindLocalByTypeVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     target_ty: Ty<'tcx>,"}, {"sha": "d7cba87e6b132cd942188a895b63c1702e2df64f", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -5,6 +5,8 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::util::common::ErrorReported;\n \n+use rustc_error_codes::*;\n+\n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous.\n     ///"}, {"sha": "361318491916491badd83e30b36eaadc8112f4e2", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -5,6 +5,8 @@ use crate::hir::{FunctionRetTy, TyKind};\n use crate::ty;\n use errors::{Applicability, DiagnosticBuilder};\n \n+use rustc_error_codes::*;\n+\n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error."}, {"sha": "c1f840ad678151ee53198ed16ec05de6c232ed2e", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -4,6 +4,8 @@ use crate::ty::{self, Region};\n use crate::ty::error::TypeError;\n use errors::DiagnosticBuilder;\n \n+use rustc_error_codes::*;\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub(super) fn note_region_origin(&self,\n                                      err: &mut DiagnosticBuilder<'_>,"}, {"sha": "9ed60b1f0c1120bc3fa03f08caa21ad20fd198d9", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -15,6 +15,8 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n \n /// Information about the opaque types whose values we"}, {"sha": "82994f9170fe028525123da29c22cabaa17c6d12", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -83,8 +83,6 @@ mod tests;\n #[macro_use]\n mod macros;\n \n-pub mod error_codes;\n-\n #[macro_use]\n pub mod query;\n "}, {"sha": "2f865f1f8b50148770eef8cd94c3ae7963a6c895", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -40,6 +40,8 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n \n+use rustc_error_codes::*;\n+\n /// Information about the registered lints.\n ///\n /// This is basically the subset of `Context` that we can"}, {"sha": "27bf9649324b4730f560049bd814ca2b43bd40b6", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,6 +16,8 @@ use syntax::print::pprust;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::{Symbol, sym};\n \n+use rustc_error_codes::*;\n+\n pub struct LintLevelSets {\n     list: Vec<LintSet>,\n     lint_cap: Level,"}, {"sha": "f6cd9b1c7ec0bdac2b1a4321939c1c2f833285ad", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -23,6 +23,8 @@ use rustc_macros::HashStable;\n use crate::hir::itemlikevisit::ItemLikeVisitor;\n use crate::hir;\n \n+use rustc_error_codes::*;\n+\n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {"}, {"sha": "a70fe2be96cc12307de396e8563fd573b592599d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -30,6 +30,8 @@ use syntax_pos::Span;\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::{self, GenericParamKind, LifetimeParamKind};\n \n+use rustc_error_codes::*;\n+\n /// The origin of a named lifetime definition.\n ///\n /// This is used to prevent the usage of in-band lifetimes in `Fn`/`fn` syntax."}, {"sha": "8f8b4ed98bd3b47b02166c2915310bdeadef5cbf", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -26,6 +26,9 @@ use std::cmp::Ordering;\n use std::mem::replace;\n use std::num::NonZeroU32;\n \n+use rustc_error_codes::*;\n+\n+\n #[derive(PartialEq, Clone, Copy, Debug)]\n pub enum StabilityLevel {\n     Unstable,"}, {"sha": "48c1226232f1376311400dd171718a64a1337720", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,6 +14,8 @@ use crate::hir::intravisit;\n use crate::hir;\n use crate::ty::TyCtxt;\n \n+use rustc_error_codes::*;\n+\n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n "}, {"sha": "5f605756438c0945ebefe05a51bb08318c953970", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,6 +16,8 @@ use syntax::symbol::Symbol;\n \n use std::{fmt, env};\n \n+use rustc_error_codes::*;\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n     /// Already reported a lint or an error for this evaluation."}, {"sha": "82631ce7435961f1ece9545c982a5c446bd69e65", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -39,6 +39,8 @@ use syntax::ast;\n use syntax::symbol::{sym, kw};\n use syntax_pos::{DUMMY_SP, Span, ExpnKind, MultiSpan};\n \n+use rustc_error_codes::*;\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_fulfillment_errors(\n         &self,"}, {"sha": "59aa0810975e85e30d8ea42dc0f06b0757195f08", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -10,6 +10,8 @@ use syntax::attr;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);\n "}, {"sha": "9a9c8e9d0d396fba897c6fef329bec28558b9df7", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -6,6 +6,8 @@ use syntax::source_map::Span;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n \n+use rustc_error_codes::*;\n+\n impl<'cx, 'tcx> At<'cx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n     /// of \"kinds\" (types, regions) that must be outlive the execution"}, {"sha": "475037f54ba3813e70cb0d8d9905ab3b67ee4d0d", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -24,6 +24,8 @@ use crate::ty::subst::{Subst, InternalSubsts, SubstsRef};\n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;\n \n+use rustc_error_codes::*;\n+\n /// Information pertinent to an overlapping impl error.\n #[derive(Debug)]\n pub struct OverlapError {"}, {"sha": "214de35b6d0a9d0f41b1839b0b46aa7d97f828be", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -26,6 +26,8 @@ use std::collections::hash_map::Entry;\n use syntax_pos::Span;\n use syntax::source_map::DUMMY_SP;\n \n+use rustc_error_codes::*;\n+\n pub struct QueryCache<'tcx, D: QueryConfig<'tcx> + ?Sized> {\n     pub(super) results: FxHashMap<D::Key, QueryValue<D::Value>>,\n     pub(super) active: FxHashMap<D::Key, QueryResult<'tcx>>,"}, {"sha": "478c3a9084c09345e284282e7c4fcb26d3f09d85", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -31,3 +31,4 @@ rustc_fs_util = { path = \"../librustc_fs_util\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "9bebca93964ea71555bb747327fbae4f47892af2", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use crate::traits::*;\n use rustc::hir;\n use crate::traits::BuilderMethods;\n \n+use rustc_error_codes::*;\n+\n pub enum IntPredicate {\n     IntEQ,\n     IntNE,"}, {"sha": "9784d870b31ba44ae4aa69d6ea5faf0c9176b429", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -35,8 +35,6 @@ use rustc::middle::cstore::{LibSource, CrateSource, NativeLibrary};\n use rustc::middle::dependency_format::Dependencies;\n use syntax_pos::symbol::Symbol;\n \n-mod error_codes;\n-\n pub mod common;\n pub mod traits;\n pub mod mir;"}, {"sha": "0b82edea157902dac27eddf078ecc4c2521128e0", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -6,6 +6,8 @@ use super::LocalRef;\n use super::OperandValue;\n use crate::traits::*;\n \n+use rustc_error_codes::*;\n+\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_statement(\n         &mut self,"}, {"sha": "b16cfe9efa7473869f3e95159b3672420730f806", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -34,6 +34,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_plugin = { path = \"../librustc_plugin\", package = \"rustc_plugin_impl\" }\n rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n "}, {"sha": "a5653a21b31bf3e85d01e87d7b917b7ae283391c", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,12 +14,8 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n-use rustc_mir;\n-use rustc_passes;\n-use rustc_plugin;\n-use rustc_privacy;\n use rustc_resolve::{self, Resolver};\n-use rustc_typeck;\n+use rustc_error_codes;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::io::{self, Write};\n@@ -43,18 +39,9 @@ use std::{thread, panic};\n \n pub fn diagnostics_registry() -> Registry {\n     let mut all_errors = Vec::new();\n-    all_errors.extend_from_slice(&rustc::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_typeck::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_resolve::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_privacy::error_codes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_error_codes::DIAGNOSTICS);\n     // FIXME: need to figure out a way to get these back in here\n     // all_errors.extend_from_slice(get_codegen_backend(sess).diagnostics());\n-    all_errors.extend_from_slice(&rustc_metadata::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_parse::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_passes::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_plugin::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&rustc_mir::error_codes::DIAGNOSTICS);\n-    all_errors.extend_from_slice(&syntax::error_codes::DIAGNOSTICS);\n \n     Registry::new(&all_errors)\n }"}, {"sha": "d26d8791f66695a46ab1e0b407905e1ae88ec2d8", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,3 +16,4 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "7e8dc1d167984a7560c59f23bdfbac9bd7331cb9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -23,7 +23,6 @@\n extern crate rustc;\n \n mod array_into_iter;\n-mod error_codes;\n mod nonstandard_style;\n mod redundant_semicolon;\n pub mod builtin;"}, {"sha": "b70cc52938637d2052e255e5dd1493038e0b178b", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -25,3 +25,4 @@ syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "6dfb24097753d325c16894d21f07383bd781becc", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -32,6 +32,8 @@ use syntax_pos::{Span, DUMMY_SP};\n use log::{debug, info, log_enabled};\n use proc_macro::bridge::client::ProcMacro;\n \n+use rustc_error_codes::*;\n+\n crate struct Library {\n     pub source: CrateSource,\n     pub metadata: MetadataBlob,"}, {"sha": "35ac7686647d1a6dd75bc67a5d12f4732fa23045", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -24,8 +24,6 @@ extern crate rustc;\n #[macro_use]\n extern crate rustc_data_structures;\n \n-pub mod error_codes;\n-\n mod dependency_format;\n mod foreign_modules;\n mod link_args;"}, {"sha": "582602138e54e383d1b97fa9575e91186963fcdd", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -246,6 +246,8 @@ use rustc_data_structures::owning_ref::OwningRef;\n \n use log::{debug, info, warn};\n \n+use rustc_error_codes::*;\n+\n #[derive(Clone)]\n crate struct CrateMismatch {\n     path: PathBuf,"}, {"sha": "e577b238c86847e991a9f0a21f35807790f28f4b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -11,6 +11,8 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::{span_err, struct_span_err};\n \n+use rustc_error_codes::*;\n+\n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {\n         tcx,"}, {"sha": "daa2617bd9e5e2ee7603a887a54c75698856310e", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -27,3 +27,4 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "6e9e8abbeffe1cf71dc26bb694a912f8810c0858", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -51,6 +51,8 @@ use std::rc::Rc;\n use std::{fmt, iter, mem};\n use syntax_pos::{Span, DUMMY_SP};\n \n+use rustc_error_codes::*;\n+\n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n         $crate::borrow_check::nll::type_check::mirbug("}, {"sha": "30586e95acf8dbd45179712618809f0374903707", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -20,6 +20,8 @@ use std::slice;\n \n use syntax_pos::{MultiSpan, Span};\n \n+use rustc_error_codes::*;\n+\n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match tcx.hir().as_local_hir_id(def_id) {\n         None => return,"}, {"sha": "92c7178da53e0b163d546a59b14787427e3acb7f", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -28,6 +28,8 @@ use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n+use rustc_error_codes::*;\n+\n #[derive(Clone, Debug)]\n pub enum PatternError {\n     AssocConstInPattern(Span),"}, {"sha": "6408c896e93015fd26d7d4049fbb0aa6782739f1", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -35,8 +35,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #[macro_use] extern crate rustc_data_structures;\n #[macro_use] extern crate syntax;\n \n-pub mod error_codes;\n-\n mod borrow_check;\n mod build;\n pub mod dataflow;"}, {"sha": "303c3984f7c0f66dd6e9bc5ee17b2cdce53f723b", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -10,6 +10,8 @@ use syntax_pos::{Span, Symbol};\n \n use super::{ConstKind, Item};\n \n+use rustc_error_codes::*;\n+\n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n     /// Whether this operation can be evaluated by miri."}, {"sha": "9374109c82e41398c7feab65a438f3546d5ce23d", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -18,6 +18,8 @@ use std::ops::Bound;\n \n use crate::util;\n \n+use rustc_error_codes::*;\n+\n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     const_context: bool,"}, {"sha": "185a499bf487b6cf676b5898c4646475544a70b2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -31,6 +31,8 @@ use rustc::hir::HirId;\n use crate::transform::{MirPass, MirSource};\n use crate::transform::check_consts::ops::{self, NonConstOp};\n \n+use rustc_error_codes::*;\n+\n /// What kind of item we are in.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum Mode {"}, {"sha": "9004b5e72370c869b32aa8a4b40d31f4e79d07e1", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -2,6 +2,8 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n+use rustc_error_codes::*;\n+\n impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_move_when_borrowed(\n         &self,"}, {"sha": "a9175487a75f92c5ea41ca8d1e597bf9fd9c0406", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -19,3 +19,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "3a983404220a4a60fbbd154c1efb4fd23477ef40", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -25,7 +25,6 @@ pub mod parser;\n use parser::{Parser, emit_unclosed_delims, make_unclosed_delims_error};\n pub mod lexer;\n pub mod validate_attr;\n-pub mod error_codes;\n \n #[derive(Clone)]\n pub struct Directory<'a> {"}, {"sha": "b477a0d73c04c261142aa4bc73673da72ab99ee9", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -18,6 +18,8 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n use std::mem;\n \n+use rustc_error_codes::*;\n+\n const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n /// Creates a placeholder argument."}, {"sha": "22aa6b80ab7e1c9d8f425e7f25445b9c35692610", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -37,6 +37,8 @@ use std::borrow::Cow;\n use std::{cmp, mem, slice};\n use std::path::PathBuf;\n \n+use rustc_error_codes::*;\n+\n bitflags::bitflags! {\n     struct Restrictions: u8 {\n         const STMT_EXPR         = 1 << 0;"}, {"sha": "4c7d10061835980071be1886e8b4b8a61b543677", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,6 +14,8 @@ use syntax_pos::symbol::kw;\n \n use errors::{PResult, Applicability, pluralize};\n \n+use rustc_error_codes::*;\n+\n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n ///"}, {"sha": "7a98734bdbe3d9cf5ee08d6c32a46def9f3decd1", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -18,3 +18,4 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "c48d2c61e657049b30a7824dca4e8f2545c5d1e1", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -23,6 +23,8 @@ use syntax::{span_err, struct_span_err, walk_list};\n use syntax_pos::{Span, MultiSpan};\n use errors::{Applicability, FatalError};\n \n+use rustc_error_codes::*;\n+\n struct AstValidator<'a> {\n     session: &'a Session,\n     has_proc_macro_decls: bool,"}, {"sha": "d0cedc08162c8a16347937878b98376fd3a2e190", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -11,6 +11,8 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n \n+use rustc_error_codes::*;\n+\n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,\n "}, {"sha": "96071b721b9ed66552a943a5137a568d863fed8d", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -10,6 +10,8 @@ use syntax_pos::{Span, sym};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n \n+use rustc_error_codes::*;\n+\n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,"}, {"sha": "81f06a14d95f58b5f1bef708591137872264cd25", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -20,8 +20,6 @@ extern crate syntax;\n \n use rustc::ty::query::Providers;\n \n-pub mod error_codes;\n-\n pub mod ast_validation;\n mod check_const;\n pub mod hir_stats;"}, {"sha": "6140d0438d8a758dce6c65ea4e749c9c9557a250", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use syntax::struct_span_err;\n use syntax_pos::Span;\n use errors::Applicability;\n \n+use rustc_error_codes::*;\n+\n #[derive(Clone, Copy, Debug, PartialEq)]\n enum Context {\n     Normal,"}, {"sha": "c57b32fb2b6942f3d215fec42a8b9ad85a4e3c3e", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,3 +16,4 @@ rustc_metadata = { path = \"../librustc_metadata\" }\n syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "83e9ebeb935bff30efda4f8bba1da4e70e4ddec5", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -59,7 +59,6 @@\n \n pub use registry::Registry;\n \n-pub mod error_codes;\n pub mod registry;\n pub mod load;\n pub mod build;"}, {"sha": "31b3b07c3e1fb81b8f43d1ed6692bff70a706022", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,6 +14,8 @@ use syntax::struct_span_err;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n+use rustc_error_codes::*;\n+\n /// Pointer to a registrar function.\n pub type PluginRegistrarFun =\n     fn(&mut Registry<'_>);"}, {"sha": "ef974c77acab752d9377abefa5a2d4f639d8e85e", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,4 +14,5 @@ rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n log = \"0.4\""}, {"sha": "8c4b4c16510bbc809972efbe81c12eee014b2c46", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -30,7 +30,7 @@ use syntax_pos::Span;\n use std::{cmp, fmt, mem};\n use std::marker::PhantomData;\n \n-pub mod error_codes;\n+use rustc_error_codes::*;\n \n ////////////////////////////////////////////////////////////////////////////////\n /// Generic infrastructure used to implement specific visitors below."}, {"sha": "6cce893f8ecdd93f678220f3027f9220f8385768", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -21,4 +21,5 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "fa7c2cdda68a8b72f5dcb7f0aa3cf5e875ae7b48", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -46,6 +46,8 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use log::debug;\n \n+use rustc_error_codes::*;\n+\n type Res = def::Res<NodeId>;\n \n impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, ExpnId) {"}, {"sha": "bb13e9ce78342cf3a175d19950b6c29eb477aabc", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -23,6 +23,8 @@ use crate::path_names_to_string;\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n use crate::{PathResult, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Segment};\n \n+use rustc_error_codes::*;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A vector of spans and replacements, a message and applicability."}, {"sha": "24d6331bbd37d757b0a952bddf87d54a46d8c0c3", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -30,6 +30,8 @@ use syntax_pos::Span;\n use std::collections::BTreeSet;\n use std::mem::replace;\n \n+use rustc_error_codes::*;\n+\n mod diagnostics;\n \n type Res = def::Res<NodeId>;"}, {"sha": "3be033697d286b9343cfa5ff77e00d282eafa6ed", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -18,6 +18,8 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure."}, {"sha": "47e8cf80a05bf9dd646332fea5a501daa765122e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -64,9 +64,10 @@ use late::{HasGenericParams, PathSource, Rib, RibKind::*};\n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n use macros::{LegacyBinding, LegacyScope};\n \n+use rustc_error_codes::*;\n+\n type Res = def::Res<NodeId>;\n \n-pub mod error_codes;\n mod diagnostics;\n mod late;\n mod macros;"}, {"sha": "5c8e79096312fc24daf21493ca6569181cdec791", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -30,6 +30,8 @@ use syntax::{struct_span_err, unwrap_or};\n use syntax_pos::hygiene::ExpnId;\n use syntax_pos::{MultiSpan, Span};\n \n+use rustc_error_codes::*;\n+\n use log::*;\n \n use std::cell::Cell;"}, {"sha": "a78eba7c0b7932536d13932608f233c135703f12", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -21,3 +21,4 @@ smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_index = { path = \"../librustc_index\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "c3bd916b9ceaddfae2430a2d1498ad4861556bff", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -36,6 +36,8 @@ use std::slice;\n \n use rustc_data_structures::fx::FxHashSet;\n \n+use rustc_error_codes::*;\n+\n #[derive(Debug)]\n pub struct PathSeg(pub DefId, pub usize);\n "}, {"sha": "20c54e8f698660a5ca123b182291e468210c2560", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n use syntax_pos::Span;\n use syntax::ast::Ident;\n \n+use rustc_error_codes::*;\n+\n use std::iter;\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "1b3af48ea83bf720c106a32e2325b7b86c97d97d", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,6 +16,8 @@ use syntax_pos::Span;\n \n use rustc::hir;\n \n+use rustc_error_codes::*;\n+\n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called)."}, {"sha": "035ece238104f393c218944fae906fe81f5db59b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -46,6 +46,8 @@ use syntax::ast;\n use syntax_pos::Span;\n use crate::util::common::ErrorReported;\n \n+use rustc_error_codes::*;\n+\n /// Reifies a cast check to be checked once we have full type information for\n /// a function context.\n pub struct CastCheck<'tcx> {"}, {"sha": "871acb2726a213f18605822f80fb0642fe394ded", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -73,6 +73,8 @@ use syntax::symbol::sym;\n use syntax_pos;\n use rustc_target::spec::abi::Abi;\n \n+use rustc_error_codes::*;\n+\n struct Coerce<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "4241422852291bb82cbcdaa58eb2823975dd7f45", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,6 +14,8 @@ use syntax::errors::pluralize;\n \n use super::{Inherited, FnCtxt, potentially_plural_count};\n \n+use rustc_error_codes::*;\n+\n /// Checks that a method from an impl conforms to the signature of\n /// the same method as declared in the trait.\n ///"}, {"sha": "fba933ab0ce254f805f247ab4fea3fc904e59d53", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use crate::util::common::ErrorReported;\n \n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n /// This function confirms that the `Drop` implementation identified by\n /// `drop_impl_did` is not any more specialized than the type it is\n /// attached to (Issue #8142)."}, {"sha": "0ba56ba5b3ae9e95f5825416b2b955394a3da773", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -42,6 +42,8 @@ use rustc::ty::TypeFoldable;\n use rustc::ty::subst::InternalSubsts;\n use rustc::traits::{self, ObligationCauseCode};\n \n+use rustc_error_codes::*;\n+\n use std::fmt::Display;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {"}, {"sha": "9f034e65b6eaa6a5faa04f20010ee850de1c7c40", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use syntax::symbol::Symbol;\n \n use rustc::hir;\n \n+use rustc_error_codes::*;\n+\n use std::iter;\n \n fn equate_intrinsic_type<'tcx>("}, {"sha": "9717190045afb38bf73663781b321b6f3f0853e1", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -35,6 +35,8 @@ use std::mem;\n use std::ops::Deref;\n use std::cmp::max;\n \n+use rustc_error_codes::*;\n+\n use smallvec::{smallvec, SmallVec};\n \n use self::CandidateKind::*;"}, {"sha": "6e37a1a47f0613c98c2733f3d9a2b56cf05f3ccb", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -18,6 +18,8 @@ use syntax_pos::{Span, FileName};\n use syntax::ast;\n use syntax::util::lev_distance;\n \n+use rustc_error_codes::*;\n+\n use std::cmp::Ordering;\n \n use super::{MethodError, NoMatchData, CandidateSource};"}, {"sha": "41c8fc026623f407d7bd6b947128cd56a912d571", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -130,6 +130,8 @@ use syntax::source_map::{DUMMY_SP, original_sp};\n use syntax::symbol::{kw, sym, Ident};\n use syntax::util::parser::ExprPrecedence;\n \n+use rustc_error_codes::*;\n+\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::hash_map::Entry;\n use std::cmp;"}, {"sha": "28db09fe92b4d11a0839986c8ba3fb4b5e4016ea", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -11,6 +11,8 @@ use syntax_pos::Span;\n use syntax::ast::Ident;\n use rustc::hir;\n \n+use rustc_error_codes::*;\n+\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Checks a `a <op>= b`\n     pub fn check_binop_assign("}, {"sha": "b2250559506eba848d78e14a3529edd8865aebf4", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -14,6 +14,8 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n use syntax_pos::hygiene::DesugaringKind;\n \n+use rustc_error_codes::*;\n+\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n "}, {"sha": "a47dd122754ab5e11b6e689c4770b466fada5510", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -18,6 +18,8 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc::hir::itemlikevisit::ParItemLikeVisitor;\n use rustc::hir;\n \n+use rustc_error_codes::*;\n+\n /// Helper type of a temporary returned by `.for_item(...)`.\n /// This is necessary because we can't write the following bound:\n ///"}, {"sha": "d126a96014bc31b0d097c3aa7bd04d3e61da266c", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -17,6 +17,8 @@ use rustc::hir::def_id::DefId;\n use hir::Node;\n use rustc::hir::{self, ItemKind};\n \n+use rustc_error_codes::*;\n+\n pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)"}, {"sha": "1c228396b8cb7f0ef3322d7c280d3d70a1a7fe2f", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -15,6 +15,8 @@ use rustc::ty::{self, CrateInherentImpls, TyCtxt};\n use syntax::ast;\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n pub fn crate_inherent_impls(\n     tcx: TyCtxt<'_>,"}, {"sha": "39ecfad89bc08a12bf74bb09beeaf717c417d5c2", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -5,6 +5,8 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n+use rustc_error_codes::*;\n+\n pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let krate = tcx.hir().krate();"}, {"sha": "eac8958bc3be064d8fad48f9bbfadf1138f8795d", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::util::common::time;\n \n+use rustc_error_codes::*;\n+\n mod builtin;\n mod inherent_impls;\n mod inherent_impls_overlap;"}, {"sha": "c5d9ef2030c24df93aee0058e38873fbd112a684", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -6,6 +6,8 @@ use rustc::ty::{self, TyCtxt};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n+use rustc_error_codes::*;\n+\n pub fn check(tcx: TyCtxt<'_>) {\n     let mut orphan = OrphanChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut orphan);"}, {"sha": "5bb444999681d0ca0915448f7b1bd3bde1f0d156", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -5,6 +5,8 @@ use rustc::ty::TyCtxt;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n+use rustc_error_codes::*;\n+\n pub fn check(tcx: TyCtxt<'_>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut unsafety);"}, {"sha": "a487f34b1ec5dc85bf3af0548f8a123b8fd2bf37", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -48,6 +48,8 @@ use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n \n use errors::{Applicability, DiagnosticId, StashKey};\n \n+use rustc_error_codes::*;\n+\n struct OnlySelfBounds(bool);\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "28fc44dfad5373ec3fc6dbd08f81f2c4c0b6057d", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -19,6 +19,8 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n /// Checks that all the type/lifetime parameters on an impl also\n /// appear in the trait ref or self type (or are constrained by a\n /// where-clause). These rules are needed to ensure that, given a"}, {"sha": "9289f3c7ef30d22645bd262a801a3dd87d237e84", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -75,8 +75,6 @@ This API is completely unstable and subject to change.\n \n #[macro_use] extern crate rustc;\n \n-pub mod error_codes;\n-\n mod astconv;\n mod check;\n mod check_unused;\n@@ -106,6 +104,8 @@ use rustc::util;\n use syntax_pos::{DUMMY_SP, Span};\n use util::common::time;\n \n+use rustc_error_codes::*;\n+\n use std::iter;\n \n use astconv::{AstConv, Bounds};"}, {"sha": "aa5272fd4e065bf6c069d485ccef5a17f48fe393", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -3,6 +3,8 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n+use rustc_error_codes::*;\n+\n pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n     tcx.hir()\n        .krate()"}, {"sha": "cedd6e6fdb241d37bb9ea8dfeb867ed05365f5ae", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -3,6 +3,8 @@ use syntax_pos::Span;\n use errors::{Applicability, DiagnosticId, DiagnosticBuilder};\n use rustc::ty::{Ty, TypeFoldable};\n \n+use rustc_error_codes::*;\n+\n pub trait StructuredDiagnostic<'tcx> {\n     fn session(&self) -> &Session;\n "}, {"sha": "a7fadb5459e5358a31880a6e594c58c852900dda", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -3,6 +3,8 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n+use rustc_error_codes::*;\n+\n pub fn test_variance(tcx: TyCtxt<'_>) {\n     tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n }"}, {"sha": "d96b5b7a3dde4028b4736a7b4fd60c5eaab96194", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -21,3 +21,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "acf0dd1cabb7d6f85b4c85a31a867ec4328cf5a6", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -12,6 +12,8 @@ use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n \n use super::{mark_used, MetaItemKind};\n \n+use rustc_error_codes::*;\n+\n enum AttrError {\n     MultipleItem(String),\n     UnknownMetaItem(String, &'static [&'static str]),"}, {"sha": "6679b4459a04720b6b326f84ae9feeff1cfd783e", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -1,7 +1,7 @@\n #[macro_export]\n macro_rules! diagnostic_used {\n     ($code:ident) => (\n-        let _ = crate::error_codes::$code;\n+        let _ = $code;\n     )\n }\n \n@@ -167,25 +167,3 @@ macro_rules! help {\n         ($err).help(&format!($($message)*));\n     })\n }\n-\n-#[macro_export]\n-macro_rules! register_diagnostics {\n-    ($($ecode:ident: $message:expr,)*) => (\n-        $crate::register_diagnostics!{$($ecode:$message,)* ;}\n-    );\n-\n-    ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n-        pub static DIAGNOSTICS: &[(&str, &str)] = &[\n-            $( (stringify!($ecode), $message), )*\n-        ];\n-\n-        $(\n-            #[deny(unused)]\n-            pub(crate) const $ecode: &str = $message;\n-        )*\n-        $(\n-            #[deny(unused)]\n-            pub(crate) const $code: () = ();\n-        )*\n-    )\n-}"}, {"sha": "d95dac9bf524281de33397ffa81249bbea329580", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -17,6 +17,9 @@ use rustc_data_structures::fx::FxHashMap;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n \n+use rustc_error_codes::*;\n+\n+\n use std::env;\n use std::num::NonZeroU32;\n "}, {"sha": "6290b2137ea9a42ee55a7b4262fcbcd01933a8d0", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -77,8 +77,6 @@ pub mod diagnostics {\n     pub mod macros;\n }\n \n-pub mod error_codes;\n-\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}, {"sha": "2ebdac8ef7c5898954f484b09dde8496cf9072d1", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -20,3 +20,4 @@ smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "5fab101957a0afbb1cd305045ca11e008959d3df", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -16,6 +16,8 @@ use syntax_pos::Span;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::{span_err, struct_span_err};\n \n+use rustc_error_codes::*;\n+\n enum State {\n     Asm,\n     Outputs,"}, {"sha": "ab57f395f6afb8624eb241d127b585a1c5954feb", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -9,6 +9,8 @@ use syntax::symbol::{kw, sym};\n use syntax::span_err;\n use syntax_pos::Span;\n \n+use rustc_error_codes::*;\n+\n pub fn expand_deriving_default(cx: &mut ExtCtxt<'_>,\n                                span: Span,\n                                mitem: &MetaItem,"}, {"sha": "07fdec05046286bb5a1e89fc60f6ff9a78fb9e07", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798e389e578a0199f734c79424fa39e440910979/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=798e389e578a0199f734c79424fa39e440910979", "patch": "@@ -19,8 +19,6 @@ use syntax::symbol::sym;\n use syntax_expand::base::{Resolver, SyntaxExtension, SyntaxExtensionKind, MacroExpanderFn};\n use syntax_expand::proc_macro::BangProcMacro;\n \n-mod error_codes;\n-\n mod asm;\n mod assert;\n mod cfg;"}]}