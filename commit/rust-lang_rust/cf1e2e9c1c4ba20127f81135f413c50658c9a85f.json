{"sha": "cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "node_id": "C_kwDOAAsO6NoAKGNmMWUyZTljMWM0YmEyMDEyN2Y4MTEzNWY0MTNjNTA2NThjOWE4NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T09:32:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T09:32:51Z"}, "message": "Auto merge of #8612 - SabrinaJewson:suggest-from-utf8-unchecked-in-const, r=flip1995\n\nSuggest from_utf8_unchecked in const contexts\n\nUnfortunately I couldn't figure out how to check whether a given expression is in an `unsafe` context or not, so I just unconditionally emit the wrapping `unsafe {}` block in the suggestion. If there is an easy way to get it to work better then I would love to hear it.\n\nchangelog: Suggest `from_utf8_unchecked` instead of `from_utf8` in const contexts for ``[`transmute_bytes_to_str`]``\n\nrefs: #8379", "tree": {"sha": "8da74d4537c3c813a58bd939687c3f89aef11261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da74d4537c3c813a58bd939687c3f89aef11261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "html_url": "https://github.com/rust-lang/rust/commit/cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880ff2497d723bc8bf64a7304c0011bc25bef5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/880ff2497d723bc8bf64a7304c0011bc25bef5b0", "html_url": "https://github.com/rust-lang/rust/commit/880ff2497d723bc8bf64a7304c0011bc25bef5b0"}, {"sha": "41ef4f729f3df237918229ff960c84792dd3231d", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ef4f729f3df237918229ff960c84792dd3231d", "html_url": "https://github.com/rust-lang/rust/commit/41ef4f729f3df237918229ff960c84792dd3231d"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "786e7bfc56f6ecbb00e442e72bd530f865d26100", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "patch": "@@ -32,18 +32,20 @@ pub(super) fn check<'tcx>(\n                     \"\"\n                 };\n \n+                let snippet = snippet(cx, arg.span, \"..\");\n+\n                 span_lint_and_sugg(\n                     cx,\n                     TRANSMUTE_BYTES_TO_STR,\n                     e.span,\n                     &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                     \"consider using\",\n-                    format!(\n-                        \"std::str::from_utf8{}({}).unwrap()\",\n-                        postfix,\n-                        snippet(cx, arg.span, \"..\"),\n-                    ),\n-                    Applicability::Unspecified,\n+                    if const_context {\n+                        format!(\"std::str::from_utf8_unchecked{postfix}({snippet})\")\n+                    } else {\n+                        format!(\"std::str::from_utf8{postfix}({snippet}).unwrap()\")\n+                    },\n+                    Applicability::MaybeIncorrect,\n                 );\n                 triggered = true;\n             } else {"}, {"sha": "5b688ce4d644f766881cf36b74e3648df9c2f061", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "patch": "@@ -134,9 +134,12 @@ mod num_to_bytes {\n     }\n }\n \n-fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n-    let _: &str = unsafe { std::mem::transmute(b) };\n+fn bytes_to_str(mb: &mut [u8]) {\n+    const B: &[u8] = b\"\";\n+\n+    let _: &str = unsafe { std::mem::transmute(B) };\n     let _: &mut str = unsafe { std::mem::transmute(mb) };\n+    const _: &str = unsafe { std::mem::transmute(B) };\n }\n \n fn main() {}"}, {"sha": "72a386e8fa618f2fe96c5b7f7fc188759c07c161", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf1e2e9c1c4ba20127f81135f413c50658c9a85f/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=cf1e2e9c1c4ba20127f81135f413c50658c9a85f", "patch": "@@ -227,18 +227,24 @@ LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:138:28\n+  --> $DIR/transmute.rs:140:28\n    |\n-LL |     let _: &str = unsafe { std::mem::transmute(b) };\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n+LL |     let _: &str = unsafe { std::mem::transmute(B) };\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(B).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:139:32\n+  --> $DIR/transmute.rs:141:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 38 previous errors\n+error: transmute from a `&[u8]` to a `&str`\n+  --> $DIR/transmute.rs:142:30\n+   |\n+LL |     const _: &str = unsafe { std::mem::transmute(B) };\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_unchecked(B)`\n+\n+error: aborting due to 39 previous errors\n "}]}