{"sha": "ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjODRhYjBlMGY1Y2VkYTY5ZjY5MDc4OTIzZmMwNDQ4MmMxZGRhOWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-20T20:37:35Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-20T20:37:35Z"}, "message": "Update snapshots to 2016-03-18 (235d774).", "tree": {"sha": "d62e60009144884620f860e6f840ca91ed8de761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62e60009144884620f860e6f840ca91ed8de761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "html_url": "https://github.com/rust-lang/rust/commit/ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173676efdc8a9f1f2a86d37c08a104e2e505f9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/173676efdc8a9f1f2a86d37c08a104e2e505f9e4", "html_url": "https://github.com/rust-lang/rust/commit/173676efdc8a9f1f2a86d37c08a104e2e505f9e4"}], "stats": {"total": 102, "additions": 48, "deletions": 54}, "files": [{"sha": "98f941f0057a36ce0e67eacf3361b3530b1c2fad", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"core\"\n version = \"0.0.0\"\n+build = \"build.rs\"\n \n [lib]\n name = \"core\""}, {"sha": "a991ac0de1af11bb0d8959bdd049b64d9f77a51e", "filename": "src/libcore/build.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbuild.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // Remove this whenever snapshots and rustbuild nightlies are synced.\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n+}"}, {"sha": "03bcf9caeea0cab30ad450440deb2ffc271acc27", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -53,53 +53,44 @@ extern \"rust-intrinsic\" {\n     // NB: These intrinsics take raw pointers because they mutate aliased\n     // memory, which is not valid for either `&` or `&mut`.\n \n-    #[cfg(stage0)]\n+    #[cfg(all(stage0, not(cargobuild)))]\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> T;\n-    #[cfg(stage0)]\n+    #[cfg(all(stage0, not(cargobuild)))]\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> T;\n-    #[cfg(stage0)]\n+    #[cfg(all(stage0, not(cargobuild)))]\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> T;\n-    #[cfg(stage0)]\n+    #[cfg(all(stage0, not(cargobuild)))]\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> T;\n-    #[cfg(stage0)]\n+    #[cfg(all(stage0, not(cargobuild)))]\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> T;\n \n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n+    #[cfg(any(not(stage0), cargobuild))]\n     pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     pub fn atomic_load<T>(src: *const T) -> T;"}, {"sha": "1d5bb4d55b3fa5c963a44b6adfdc67835c1e9014", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -64,6 +64,7 @@\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n #![feature(fundamental)]\n+#![feature(inclusive_range_syntax)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(no_core)]"}, {"sha": "229a864d712c5cf4f07e17439c420ed879d58f78", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -1008,7 +1008,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        #[cfg_attr(not(stage0), rustc_no_mir)] // FIXME #29769 MIR overflow checking is TBD.\n+        #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n         pub fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = Self::one();\n@@ -1050,7 +1050,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        #[cfg_attr(not(stage0), rustc_no_mir)] // FIXME #29769 MIR overflow checking is TBD.\n+        #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n         pub fn abs(self) -> Self {\n             if self.is_negative() {\n                 // Note that the #[inline] above means that the overflow\n@@ -2015,7 +2015,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        #[cfg_attr(not(stage0), rustc_no_mir)] // FIXME #29769 MIR overflow checking is TBD.\n+        #[rustc_no_mir] // FIXME #29769 MIR overflow checking is TBD.\n         pub fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = Self::one();"}, {"sha": "2847c762b3e1c92807b75debe193976e95ee8b97", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -1448,7 +1448,6 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n \n /// An unbounded range.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range_full\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFull;\n \n@@ -1461,7 +1460,6 @@ impl fmt::Debug for RangeFull {\n \n /// A (half-open) range which is bounded at both ends.\n #[derive(Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1481,7 +1479,6 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n \n /// A range which is only bounded below.\n #[derive(Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range_from\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -1498,7 +1495,6 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n \n /// A range which is only bounded above.\n #[derive(Copy, Clone, PartialEq, Eq)]\n-#[cfg_attr(stage0, lang = \"range_to\")] // FIXME remove attribute after next snapshot\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive)."}, {"sha": "ca9a618793aa438108e4d7c89081533afeddbf31", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -632,8 +632,7 @@ impl<T> ops::Index<ops::RangeToInclusive<usize>> for [T] {\n \n     #[inline]\n     fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] {\n-        // SNAP 4d3eebf change this to `0...index.end`\n-        self.index(ops::RangeInclusive::NonEmpty { start: 0, end: index.end })\n+        self.index(0...index.end)\n     }\n }\n \n@@ -723,8 +722,7 @@ impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for [T] {\n impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {\n-        // SNAP 4d3eebf change this to `0...index.end`\n-        self.index_mut(ops::RangeInclusive::NonEmpty { start: 0, end: index.end })\n+        self.index_mut(0...index.end)\n     }\n }\n "}, {"sha": "4ea85c6b6acd62d5af41ef1aef4de20e195385bf", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -1524,8 +1524,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeToInclusive<usize>) -> &str {\n-            // SNAP 4d3eebf change this to `0...index.end`\n-            self.index(ops::RangeInclusive::NonEmpty { start: 0, end: index.end })\n+            self.index(0...index.end)\n         }\n     }\n \n@@ -1550,8 +1549,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeToInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {\n-            // SNAP 4d3eebf change this to `0...index.end`\n-            self.index_mut(ops::RangeInclusive::NonEmpty { start: 0, end: index.end })\n+            self.index_mut(0...index.end)\n         }\n     }\n }"}, {"sha": "2055ca7adf3820ce82d362ebccb4e169dfb80967", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -1380,7 +1380,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg(not(stage0))]\n+#[cfg(any(not(stage0), cargobuild))]\n unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n                                      old: T,\n                                      new: T,\n@@ -1408,7 +1408,7 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n }\n \n #[inline]\n-#[cfg(stage0)]\n+#[cfg(all(stage0, not(cargobuild)))]\n unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n                                      old: T,\n                                      new: T,\n@@ -1431,7 +1431,6 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n }\n \n #[inline]\n-#[cfg(not(stage0))]\n unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n                                           old: T,\n                                           new: T,\n@@ -1458,18 +1457,6 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n     }\n }\n \n-#[inline]\n-#[cfg(stage0)]\n-unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n-                                          old: T,\n-                                          new: T,\n-                                          success: Ordering,\n-                                          failure: Ordering) -> Result<T, T>\n-    where T: ::cmp::Eq + ::marker::Copy\n-{\n-    atomic_compare_exchange(dst, old, new, success, failure)\n-}\n-\n #[inline]\n unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {"}, {"sha": "c7799aa6178c664db3efe7e5da11c91646ac70aa", "filename": "src/nightlies.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Fnightlies.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Fnightlies.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnightlies.txt?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -1,2 +1,2 @@\n-rustc: 2016-02-17\n+rustc: 2016-03-20\n cargo: 2016-03-11"}, {"sha": "2706f6e1b67c5d6f36dd7ef4f1dbc648b79b4c1e", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ec84ab0e0f5ceda69f69078923fc04482c1dda9b/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=ec84ab0e0f5ceda69f69078923fc04482c1dda9b", "patch": "@@ -1,3 +1,11 @@\n+S 2016-03-18 235d774\n+  linux-i386 0e0e4448b80d0a12b75485795244bb3857a0a7ef\n+  linux-x86_64 1273b6b6aed421c9e40c59f366d0df6092ec0397\n+  macos-i386 9f9c0b4a2db09acbce54b792fb8839a735585565\n+  macos-x86_64 52570f6fd915b0210a9be98cfc933148e16a75f8\n+  winnt-i386 7703869608cc4192b8f1943e51b19ba1a03c0110\n+  winnt-x86_64 8512b5ecc0c53a2cd3552e4f5688577de95cd978\n+\n S 2016-02-17 4d3eebf\n   linux-i386 5f194aa7628c0703f0fd48adc4ec7f3cc64b98c7\n   linux-x86_64 d29b7607d13d64078b6324aec82926fb493f59ba"}]}