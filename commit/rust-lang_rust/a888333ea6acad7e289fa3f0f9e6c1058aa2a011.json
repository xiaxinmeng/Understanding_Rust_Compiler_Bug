{"sha": "a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ODgzMzNlYTZhY2FkN2UyODlmYTNmMGY5ZTZjMTA1OGFhMmEwMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-14T21:24:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-14T21:24:45Z"}, "message": "Auto merge of #31460 - alexcrichton:supafast-rustc, r=brson\n\nLooking at some profiles of rustc recently, these seemed like two pretty easy wins we could get in terms of performance on the table.", "tree": {"sha": "f2a0e1491a283a280299e9b2074736481431a2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a0e1491a283a280299e9b2074736481431a2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "html_url": "https://github.com/rust-lang/rust/commit/a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b367d9d8ba0e75eddb45e2fd14c8b95a9d41905", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b367d9d8ba0e75eddb45e2fd14c8b95a9d41905", "html_url": "https://github.com/rust-lang/rust/commit/9b367d9d8ba0e75eddb45e2fd14c8b95a9d41905"}, {"sha": "e3b414d8612314e74e2b0ebde1ed5c6997d28e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b414d8612314e74e2b0ebde1ed5c6997d28e8d", "html_url": "https://github.com/rust-lang/rust/commit/e3b414d8612314e74e2b0ebde1ed5c6997d28e8d"}], "stats": {"total": 176, "additions": 160, "deletions": 16}, "files": [{"sha": "bd17490955d1e5bbabf97d257097da1af3b12a6b", "filename": "mk/rt.mk", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -148,7 +148,15 @@ ifeq ($$(CFG_WINDOWSY_$(1)),1)\n else ifeq ($(OSTYPE_$(1)), apple-ios)\n   JEMALLOC_ARGS_$(1) := --disable-tls\n else ifeq ($(findstring android, $(OSTYPE_$(1))), android)\n-  JEMALLOC_ARGS_$(1) := --disable-tls\n+  # We force android to have prefixed symbols because apparently replacement of\n+  # the libc allocator doesn't quite work. When this was tested (unprefixed\n+  # symbols), it was found that the `realpath` function in libc would allocate\n+  # with libc malloc (not jemalloc malloc), and then the standard library would\n+  # free with jemalloc free, causing a segfault.\n+  #\n+  # If the test suite passes, however, without symbol prefixes then we should be\n+  # good to go!\n+  JEMALLOC_ARGS_$(1) := --disable-tls --with-jemalloc-prefix=je_\n endif\n \n ifdef CFG_ENABLE_DEBUG_JEMALLOC\n@@ -186,7 +194,7 @@ JEMALLOC_LOCAL_$(1) := $$(JEMALLOC_BUILD_DIR_$(1))/lib/$$(JEMALLOC_REAL_NAME_$(1\n $$(JEMALLOC_LOCAL_$(1)): $$(JEMALLOC_DEPS) $$(MKFILE_DEPS)\n \t@$$(call E, make: jemalloc)\n \tcd \"$$(JEMALLOC_BUILD_DIR_$(1))\"; \"$(S)src/jemalloc/configure\" \\\n-\t\t$$(JEMALLOC_ARGS_$(1)) --with-jemalloc-prefix=je_ $(CFG_JEMALLOC_FLAGS) \\\n+\t\t$$(JEMALLOC_ARGS_$(1)) $(CFG_JEMALLOC_FLAGS) \\\n \t\t--build=$$(CFG_GNU_TRIPLE_$(CFG_BUILD)) --host=$$(CFG_GNU_TRIPLE_$(1)) \\\n \t\tCC=\"$$(CC_$(1)) $$(CFG_JEMALLOC_CFLAGS_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\"}, {"sha": "c9508322a31a7d7292d14b25426b562b31d08519", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -50,7 +50,7 @@ fn main() {\n        .env(\"AR\", &ar)\n        .env(\"RANLIB\", format!(\"{} s\", ar.display()));\n \n-    if target.contains(\"windows-gnu\") {\n+    if target.contains(\"windows\") {\n         // A bit of history here, this used to be --enable-lazy-lock added in\n         // #14006 which was filed with jemalloc in jemalloc/jemalloc#83 which\n         // was also reported to MinGW:\n@@ -72,7 +72,19 @@ fn main() {\n         //        locking, but requires passing an option due to a historical\n         //        default with jemalloc.\n         cmd.arg(\"--disable-lazy-lock\");\n-    } else if target.contains(\"ios\") || target.contains(\"android\") {\n+    } else if target.contains(\"ios\") {\n+        cmd.arg(\"--disable-tls\");\n+    } else if target.contains(\"android\") {\n+        // We force android to have prefixed symbols because apparently\n+        // replacement of the libc allocator doesn't quite work. When this was\n+        // tested (unprefixed symbols), it was found that the `realpath`\n+        // function in libc would allocate with libc malloc (not jemalloc\n+        // malloc), and then the standard library would free with jemalloc free,\n+        // causing a segfault.\n+        //\n+        // If the test suite passes, however, without symbol prefixes then we\n+        // should be good to go!\n+        cmd.arg(\"--with-jemalloc-prefix=je_\");\n         cmd.arg(\"--disable-tls\");\n     }\n \n@@ -82,7 +94,6 @@ fn main() {\n \n     // Turn off broken quarantine (see jemalloc/jemalloc#161)\n     cmd.arg(\"--disable-fill\");\n-    cmd.arg(\"--with-jemalloc-prefix=je_\");\n     cmd.arg(format!(\"--host={}\", build_helper::gnu_target(&target)));\n     cmd.arg(format!(\"--build={}\", build_helper::gnu_target(&host)));\n "}, {"sha": "bda001eb4f426fbac09f0de84a7eeeb01ec62542", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -41,12 +41,25 @@ use libc::{c_int, c_void, size_t};\n #[cfg(not(cargobuild))]\n extern {}\n \n+// Note that the symbols here are prefixed by default on OSX (we don't\n+// explicitly request it), and on Android we explicitly request it as\n+// unprefixing cause segfaults (mismatches in allocators).\n extern {\n-    fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n-    fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-    fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n-    fn je_sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n-    fn je_nallocx(size: size_t, flags: c_int) -> size_t;\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+               link_name = \"je_mallocx\")]\n+    fn mallocx(size: size_t, flags: c_int) -> *mut c_void;\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+               link_name = \"je_rallocx\")]\n+    fn rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+               link_name = \"je_xallocx\")]\n+    fn xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+               link_name = \"je_sdallocx\")]\n+    fn sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\"),\n+               link_name = \"je_nallocx\")]\n+    fn nallocx(size: size_t, flags: c_int) -> size_t;\n }\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n@@ -78,7 +91,7 @@ fn align_to_flags(align: usize) -> c_int {\n #[no_mangle]\n pub extern \"C\" fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n     let flags = align_to_flags(align);\n-    unsafe { je_mallocx(size as size_t, flags) as *mut u8 }\n+    unsafe { mallocx(size as size_t, flags) as *mut u8 }\n }\n \n #[no_mangle]\n@@ -88,7 +101,7 @@ pub extern \"C\" fn __rust_reallocate(ptr: *mut u8,\n                                     align: usize)\n                                     -> *mut u8 {\n     let flags = align_to_flags(align);\n-    unsafe { je_rallocx(ptr as *mut c_void, size as size_t, flags) as *mut u8 }\n+    unsafe { rallocx(ptr as *mut c_void, size as size_t, flags) as *mut u8 }\n }\n \n #[no_mangle]\n@@ -98,19 +111,19 @@ pub extern \"C\" fn __rust_reallocate_inplace(ptr: *mut u8,\n                                             align: usize)\n                                             -> usize {\n     let flags = align_to_flags(align);\n-    unsafe { je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as usize }\n+    unsafe { xallocx(ptr as *mut c_void, size as size_t, 0, flags) as usize }\n }\n \n #[no_mangle]\n pub extern \"C\" fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n     let flags = align_to_flags(align);\n-    unsafe { je_sdallocx(ptr as *mut c_void, old_size as size_t, flags) }\n+    unsafe { sdallocx(ptr as *mut c_void, old_size as size_t, flags) }\n }\n \n #[no_mangle]\n pub extern \"C\" fn __rust_usable_size(size: usize, align: usize) -> usize {\n     let flags = align_to_flags(align);\n-    unsafe { je_nallocx(size as size_t, flags) as usize }\n+    unsafe { nallocx(size as size_t, flags) as usize }\n }\n \n // These symbols are used by jemalloc on android but the really old android"}, {"sha": "da5f9f20892007c764f0a27a54f27820505a2c67", "filename": "src/librustc_data_structures/fnv.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Flibrustc_data_structures%2Ffnv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Flibrustc_data_structures%2Ffnv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffnv.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -35,10 +35,12 @@ pub fn FnvHashSet<V: Hash + Eq>() -> FnvHashSet<V> {\n pub struct FnvHasher(u64);\n \n impl Default for FnvHasher {\n+    #[inline]\n     fn default() -> FnvHasher { FnvHasher(0xcbf29ce484222325) }\n }\n \n impl Hasher for FnvHasher {\n+    #[inline]\n     fn write(&mut self, bytes: &[u8]) {\n         let FnvHasher(mut hash) = *self;\n         for byte in bytes {\n@@ -47,5 +49,7 @@ impl Hasher for FnvHasher {\n         }\n         *self = FnvHasher(hash);\n     }\n+\n+    #[inline]\n     fn finish(&self) -> u64 { self.0 }\n }"}, {"sha": "33734d615a621fd16375e1bd70718daf8e0fbf39", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -1253,7 +1253,11 @@ fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,\n \n             if any_objects {\n                 archive.build();\n-                cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n+                if dylib {\n+                    cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n+                } else {\n+                    cmd.link_rlib(&fix_windows_verbatim_for_gcc(&dst));\n+                }\n             }\n         });\n     }"}, {"sha": "1d45cb413c5770e0d750a60050dd3d3e278d8799", "filename": "src/test/run-make/lto-no-link-whole-rlib/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2FMakefile?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -0,0 +1,18 @@\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+-include ../tools.mk\n+\n+all: $(call NATIVE_STATICLIB,foo) $(call NATIVE_STATICLIB,bar)\n+\t$(RUSTC) lib1.rs\n+\t$(RUSTC) lib2.rs\n+\t$(RUSTC) main.rs -Clto\n+\t$(call RUN,main)\n+"}, {"sha": "716d1abcf347f482ea5adc6162686fc5fa527395", "filename": "src/test/run-make/lto-no-link-whole-rlib/bar.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Fbar.c?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+int foo() {\n+  return 2;\n+}"}, {"sha": "1b36874581a99299ddcb821913dce5ab9723e214", "filename": "src/test/run-make/lto-no-link-whole-rlib/foo.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Ffoo.c?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+int foo() {\n+  return 1;\n+}"}, {"sha": "0a87c8e47255849a924b6c9bcc10495278b1fdcb", "filename": "src/test/run-make/lto-no-link-whole-rlib/lib1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Flib1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Flib1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Flib1.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+#[link(name = \"foo\", kind = \"static\")]\n+extern {\n+    fn foo() -> i32;\n+}\n+\n+pub fn foo1() -> i32 {\n+    unsafe { foo() }\n+}"}, {"sha": "6e3f382b3fd92cabc06e49c31ad99d6ed311d2f1", "filename": "src/test/run-make/lto-no-link-whole-rlib/lib2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Flib2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Flib2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Flib2.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+extern crate lib1;\n+\n+#[link(name = \"bar\", kind = \"static\")]\n+extern {\n+    fn foo() -> i32;\n+}\n+\n+pub fn foo2() -> i32 {\n+    unsafe { foo() }\n+}\n+"}, {"sha": "8417af63be9d9a560aaf5519fd7856cfb6975e8f", "filename": "src/test/run-make/lto-no-link-whole-rlib/main.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a888333ea6acad7e289fa3f0f9e6c1058aa2a011/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-no-link-whole-rlib%2Fmain.rs?ref=a888333ea6acad7e289fa3f0f9e6c1058aa2a011", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate lib1;\n+extern crate lib2;\n+\n+fn main() {\n+    assert_eq!(lib1::foo1(), 2);\n+    assert_eq!(lib2::foo2(), 2);\n+}"}]}