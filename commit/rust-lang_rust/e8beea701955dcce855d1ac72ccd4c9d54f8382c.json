{"sha": "e8beea701955dcce855d1ac72ccd4c9d54f8382c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YmVlYTcwMTk1NWRjY2U4NTVkMWFjNzJjY2Q0YzlkNTRmODM4MmM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T13:38:42Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-25T21:36:55Z"}, "message": "Make eval_place iterate instead of recurse", "tree": {"sha": "a37dcc02a92982676418c5a1a64a26964d2d0fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37dcc02a92982676418c5a1a64a26964d2d0fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8beea701955dcce855d1ac72ccd4c9d54f8382c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8beea701955dcce855d1ac72ccd4c9d54f8382c", "html_url": "https://github.com/rust-lang/rust/commit/e8beea701955dcce855d1ac72ccd4c9d54f8382c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8beea701955dcce855d1ac72ccd4c9d54f8382c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f492693982d1e252f5411ae3e4d560ab0dfea48a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f492693982d1e252f5411ae3e4d560ab0dfea48a", "html_url": "https://github.com/rust-lang/rust/commit/f492693982d1e252f5411ae3e4d560ab0dfea48a"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "57d5ab71ecafd3922a6dda794f2bb5505ff87454", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e8beea701955dcce855d1ac72ccd4c9d54f8382c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8beea701955dcce855d1ac72ccd4c9d54f8382c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e8beea701955dcce855d1ac72ccd4c9d54f8382c", "patch": "@@ -607,42 +607,42 @@ where\n     /// place; for reading, a more efficient alternative is `eval_place_for_read`.\n     pub fn eval_place(\n         &mut self,\n-        mir_place: &mir::Place<'tcx>\n+        mir_place: &mir::Place<'tcx>,\n     ) -> EvalResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n-        use rustc::mir::Place::*;\n         use rustc::mir::PlaceBase;\n-        let place = match mir_place {\n-            Base(PlaceBase::Local(mir::RETURN_PLACE)) => match self.frame().return_place {\n-                Some(return_place) =>\n-                    // We use our layout to verify our assumption; caller will validate\n-                    // their layout on return.\n-                    PlaceTy {\n-                        place: *return_place,\n-                        layout: self.layout_of(self.monomorphize(self.frame().mir.return_ty())?)?,\n+\n+        mir_place.iterate(|place_base, place_projection| {\n+            let mut place = match place_base {\n+                PlaceBase::Local(mir::RETURN_PLACE) => match self.frame().return_place {\n+                    Some(return_place) => {\n+                        // We use our layout to verify our assumption; caller will validate\n+                        // their layout on return.\n+                        PlaceTy {\n+                            place: *return_place,\n+                            layout: self\n+                                .layout_of(self.monomorphize(self.frame().mir.return_ty())?)?,\n+                        }\n+                    }\n+                    None => return err!(InvalidNullPointerUsage),\n+                },\n+                PlaceBase::Local(local) => PlaceTy {\n+                    // This works even for dead/uninitialized locals; we check further when writing\n+                    place: Place::Local {\n+                        frame: self.cur_frame(),\n+                        local: *local,\n                     },\n-                None => return err!(InvalidNullPointerUsage),\n-            },\n-            Base(PlaceBase::Local(local)) => PlaceTy {\n-                // This works even for dead/uninitialized locals; we check further when writing\n-                place: Place::Local {\n-                    frame: self.cur_frame(),\n-                    local: *local,\n+                    layout: self.layout_of_local(self.frame(), *local, None)?,\n                 },\n-                layout: self.layout_of_local(self.frame(), *local, None)?,\n-            },\n-\n-            Projection(proj) => {\n-                let place = self.eval_place(&proj.base)?;\n-                self.place_projection(place, &proj.elem)?\n-            }\n+                PlaceBase::Static(place_static) => self.eval_static_to_mplace(place_static)?.into(),\n+            };\n \n-            Base(PlaceBase::Static(place_static)) => {\n-                self.eval_static_to_mplace(place_static)?.into()\n+            for proj in place_projection {\n+                place = self.place_projection(place, &proj.elem)?\n             }\n-        };\n \n-        self.dump_place(place.place);\n-        Ok(place)\n+            self.dump_place(place.place);\n+            Ok(place)\n+        })\n     }\n \n     /// Write a scalar to a place"}]}