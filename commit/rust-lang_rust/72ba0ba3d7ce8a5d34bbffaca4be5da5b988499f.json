{"sha": "72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmEwYmEzZDdjZThhNWQzNGJiZmZhY2E0YmU1ZGE1Yjk4ODQ5OWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-05T21:54:07Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-05T21:54:07Z"}, "message": "Replace unwrap calls in example by expect", "tree": {"sha": "89a3eb46cfce73da77edafe2d8b74b2281eb3b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a3eb46cfce73da77edafe2d8b74b2281eb3b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "html_url": "https://github.com/rust-lang/rust/commit/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8785e348ba6b9d43ffd8ce4b1a59059cbce6334c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8785e348ba6b9d43ffd8ce4b1a59059cbce6334c", "html_url": "https://github.com/rust-lang/rust/commit/8785e348ba6b9d43ffd8ce4b1a59059cbce6334c"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "d9d9e9476b9774ab70973439003437388bf7e753", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=72ba0ba3d7ce8a5d34bbffaca4be5da5b988499f", "patch": "@@ -101,8 +101,8 @@ use sys;\n /// }\n ///\n /// // We are certain that our string doesn't have 0 bytes in the middle,\n-/// // so we can .unwrap()\n-/// let c_to_print = CString::new(\"Hello, world!\").unwrap();\n+/// // so we can .expect()\n+/// let c_to_print = CString::new(\"Hello, world!\").expect(\"CString::new failed\");\n /// unsafe {\n ///     my_printer(c_to_print.as_ptr());\n /// }\n@@ -174,7 +174,7 @@ pub struct CString {\n ///     unsafe { work_with(data.as_ptr()) }\n /// }\n ///\n-/// let s = CString::new(\"data data data data\").unwrap();\n+/// let s = CString::new(\"data data data data\").expect(\"CString::new failed\");\n /// work(&s);\n /// ```\n ///\n@@ -313,7 +313,7 @@ impl CString {\n     ///\n     /// extern { fn puts(s: *const c_char); }\n     ///\n-    /// let to_print = CString::new(\"Hello!\").unwrap();\n+    /// let to_print = CString::new(\"Hello!\").expect(\"CString::new failed\");\n     /// unsafe {\n     ///     puts(to_print.as_ptr());\n     /// }\n@@ -397,7 +397,7 @@ impl CString {\n     ///     fn some_extern_function(s: *mut c_char);\n     /// }\n     ///\n-    /// let c_string = CString::new(\"Hello!\").unwrap();\n+    /// let c_string = CString::new(\"Hello!\").expect(\"CString::new failed\");\n     /// let raw = c_string.into_raw();\n     /// unsafe {\n     ///     some_extern_function(raw);\n@@ -427,7 +427,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     ///\n     /// let ptr = c_string.into_raw();\n     ///\n@@ -459,12 +459,12 @@ impl CString {\n     /// use std::ffi::CString;\n     ///\n     /// let valid_utf8 = vec![b'f', b'o', b'o'];\n-    /// let cstring = CString::new(valid_utf8).unwrap();\n-    /// assert_eq!(cstring.into_string().unwrap(), \"foo\");\n+    /// let cstring = CString::new(valid_utf8).expect(\"CString::new failed\");\n+    /// assert_eq!(cstring.into_string().expect(\"into_string() call failed\"), \"foo\");\n     ///\n     /// let invalid_utf8 = vec![b'f', 0xff, b'o', b'o'];\n-    /// let cstring = CString::new(invalid_utf8).unwrap();\n-    /// let err = cstring.into_string().err().unwrap();\n+    /// let cstring = CString::new(invalid_utf8).expect(\"CString::new failed\");\n+    /// let err = cstring.into_string().err().expect(\"into_string().err() failed\");\n     /// assert_eq!(err.utf8_error().valid_up_to(), 1);\n     /// ```\n \n@@ -488,7 +488,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.into_bytes();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o']);\n     /// ```\n@@ -510,7 +510,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.into_bytes_with_nul();\n     /// assert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n     /// ```\n@@ -533,7 +533,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.as_bytes();\n     /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n     /// ```\n@@ -553,7 +553,7 @@ impl CString {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n     /// let bytes = c_string.as_bytes_with_nul();\n     /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n     /// ```\n@@ -572,9 +572,10 @@ impl CString {\n     /// ```\n     /// use std::ffi::{CString, CStr};\n     ///\n-    /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n+    /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n     /// let c_str = c_string.as_c_str();\n-    /// assert_eq!(c_str, CStr::from_bytes_with_nul(b\"foo\\0\").unwrap());\n+    /// assert_eq!(c_str,\n+    ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[inline]\n     #[stable(feature = \"as_c_str\", since = \"1.20.0\")]\n@@ -591,16 +592,17 @@ impl CString {\n     /// ```\n     /// use std::ffi::{CString, CStr};\n     ///\n-    /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n+    /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n     /// let boxed = c_string.into_boxed_c_str();\n-    /// assert_eq!(&*boxed, CStr::from_bytes_with_nul(b\"foo\\0\").unwrap());\n+    /// assert_eq!(&*boxed,\n+    ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { Box::from_raw(Box::into_raw(self.into_inner()) as *mut CStr) }\n     }\n \n-    // Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n+    /// Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n     ///\n     /// [`Drop`]: ../ops/trait.Drop.html\n     fn into_inner(self) -> Box<[u8]> {\n@@ -1030,7 +1032,7 @@ impl CStr {\n     /// use std::ffi::{CStr, CString};\n     ///\n     /// unsafe {\n-    ///     let cstring = CString::new(\"hello\").unwrap();\n+    ///     let cstring = CString::new(\"hello\").expect(\"CString::new failed\");\n     ///     let cstr = CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());\n     ///     assert_eq!(cstr, &*cstring);\n     /// }\n@@ -1057,7 +1059,7 @@ impl CStr {\n     /// # #![allow(unused_must_use)]\n     /// use std::ffi::{CString};\n     ///\n-    /// let ptr = CString::new(\"Hello\").unwrap().as_ptr();\n+    /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\n     /// unsafe {\n     ///     // `ptr` is dangling\n     ///     *ptr;\n@@ -1066,14 +1068,14 @@ impl CStr {\n     ///\n     /// This happens because the pointer returned by `as_ptr` does not carry any\n     /// lifetime information and the [`CString`] is deallocated immediately after\n-    /// the `CString::new(\"Hello\").unwrap().as_ptr()` expression is evaluated.\n+    /// the `CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()` expression is evaluated.\n     /// To fix the problem, bind the `CString` to a local variable:\n     ///\n     /// ```no_run\n     /// # #![allow(unused_must_use)]\n     /// use std::ffi::{CString};\n     ///\n-    /// let hello = CString::new(\"Hello\").unwrap();\n+    /// let hello = CString::new(\"Hello\").expect(\"CString::new failed\");\n     /// let ptr = hello.as_ptr();\n     /// unsafe {\n     ///     // `ptr` is valid because `hello` is in scope\n@@ -1105,7 +1107,7 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_bytes(), b\"foo\");\n     /// ```\n     #[inline]\n@@ -1131,7 +1133,7 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_bytes_with_nul(), b\"foo\\0\");\n     /// ```\n     #[inline]\n@@ -1158,7 +1160,7 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n@@ -1199,7 +1201,8 @@ impl CStr {\n     /// use std::borrow::Cow;\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"Hello World\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"Hello World\\0\")\n+    ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(c_str.to_string_lossy(), Cow::Borrowed(\"Hello World\"));\n     /// ```\n     ///\n@@ -1209,7 +1212,8 @@ impl CStr {\n     /// use std::borrow::Cow;\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"Hello \\xF0\\x90\\x80World\\0\").unwrap();\n+    /// let c_str = CStr::from_bytes_with_nul(b\"Hello \\xF0\\x90\\x80World\\0\")\n+    ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(\n     ///     c_str.to_string_lossy(),\n     ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<str>\n@@ -1230,9 +1234,9 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CString;\n     ///\n-    /// let c_string = CString::new(b\"foo\".to_vec()).unwrap();\n+    /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n     /// let boxed = c_string.into_boxed_c_str();\n-    /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").unwrap());\n+    /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").expect(\"CString::new failed\"));\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {"}]}