{"sha": "ba2a784c38c5e87e746457645184d4dec957941f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMmE3ODRjMzhjNWU4N2U3NDY0NTc2NDUxODRkNGRlYzk1Nzk0MWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T15:44:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:57:05Z"}, "message": "typeck/pat.rs: extract `error_unmentioned_fields`.", "tree": {"sha": "5aebb72ef076288b53d8b3e0e8a75370cca63650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aebb72ef076288b53d8b3e0e8a75370cca63650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2a784c38c5e87e746457645184d4dec957941f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2a784c38c5e87e746457645184d4dec957941f", "html_url": "https://github.com/rust-lang/rust/commit/ba2a784c38c5e87e746457645184d4dec957941f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2a784c38c5e87e746457645184d4dec957941f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f605ae99b1ac3565fc0bb65d97083f39444d60", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f605ae99b1ac3565fc0bb65d97083f39444d60", "html_url": "https://github.com/rust-lang/rust/commit/25f605ae99b1ac3565fc0bb65d97083f39444d60"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "265f032179bf6da65546d7b987ae9daa560bcdfb", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ba2a784c38c5e87e746457645184d4dec957941f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2a784c38c5e87e746457645184d4dec957941f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ba2a784c38c5e87e746457645184d4dec957941f", "patch": "@@ -873,34 +873,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if etc {\n                 tcx.sess.span_err(span, \"`..` cannot be used in union patterns\");\n             }\n-        } else if !etc {\n-            if unmentioned_fields.len() > 0 {\n-                let field_names = if unmentioned_fields.len() == 1 {\n-                    format!(\"field `{}`\", unmentioned_fields[0])\n-                } else {\n-                    format!(\"fields {}\",\n-                            unmentioned_fields.iter()\n-                                .map(|name| format!(\"`{}`\", name))\n-                                .collect::<Vec<String>>()\n-                                .join(\", \"))\n-                };\n-                let mut diag = struct_span_err!(tcx.sess, span, E0027,\n-                                                \"pattern does not mention {}\",\n-                                                field_names);\n-                diag.span_label(span, format!(\"missing {}\", field_names));\n-                if variant.ctor_kind == CtorKind::Fn {\n-                    diag.note(\"trying to match a tuple variant with a struct variant pattern\");\n-                }\n-                if tcx.sess.teach(&diag.get_code().unwrap()) {\n-                    diag.note(\n-                        \"This error indicates that a pattern for a struct fails to specify a \\\n-                         sub-pattern for every one of the struct's fields. Ensure that each field \\\n-                         from the struct's definition is mentioned in the pattern, or use `..` to \\\n-                         ignore unwanted fields.\"\n-                    );\n-                }\n-                diag.emit();\n-            }\n+        } else if !etc && unmentioned_fields.len() > 0 {\n+            self.error_unmentioned_fields(span, unmentioned_fields, variant);\n         }\n         no_field_errors\n     }\n@@ -916,6 +890,41 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         .emit();\n     }\n \n+    fn error_unmentioned_fields(\n+        &self,\n+        span: Span,\n+        unmentioned_fields: Vec<ast::Ident>,\n+        variant: &ty::VariantDef,\n+    ) {\n+        let field_names = if unmentioned_fields.len() == 1 {\n+            format!(\"field `{}`\", unmentioned_fields[0])\n+        } else {\n+            let fields = unmentioned_fields.iter()\n+                .map(|name| format!(\"`{}`\", name))\n+                .collect::<Vec<String>>()\n+                .join(\", \");\n+            format!(\"fields {}\", fields)\n+        };\n+        let mut diag = struct_span_err!(\n+            self.tcx.sess, span, E0027,\n+            \"pattern does not mention {}\",\n+            field_names\n+        );\n+        diag.span_label(span, format!(\"missing {}\", field_names));\n+        if variant.ctor_kind == CtorKind::Fn {\n+            diag.note(\"trying to match a tuple variant with a struct variant pattern\");\n+        }\n+        if self.tcx.sess.teach(&diag.get_code().unwrap()) {\n+            diag.note(\n+                \"This error indicates that a pattern for a struct fails to specify a \\\n+                    sub-pattern for every one of the struct's fields. Ensure that each field \\\n+                    from the struct's definition is mentioned in the pattern, or use `..` to \\\n+                    ignore unwanted fields.\"\n+            );\n+        }\n+        diag.emit();\n+    }\n+\n     fn check_pat_box(\n         &self,\n         span: Span,"}]}