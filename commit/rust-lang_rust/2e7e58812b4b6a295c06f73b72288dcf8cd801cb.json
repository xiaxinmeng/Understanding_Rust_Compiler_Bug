{"sha": "2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlN2U1ODgxMmI0YjZhMjk1YzA2ZjczYjcyMjg4ZGNmOGNkODAxY2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-11T23:36:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:26Z"}, "message": "Remove vec version of str::bytes, rename bytes_ivec to str::bytes", "tree": {"sha": "4ad2ecf7166b6cd7cb867c5344145914d1d2e0f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad2ecf7166b6cd7cb867c5344145914d1d2e0f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "html_url": "https://github.com/rust-lang/rust/commit/2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6626143cccc0599d2b5ac6e7627708273608063", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6626143cccc0599d2b5ac6e7627708273608063", "html_url": "https://github.com/rust-lang/rust/commit/d6626143cccc0599d2b5ac6e7627708273608063"}], "stats": {"total": 114, "additions": 46, "deletions": 68}, "files": [{"sha": "63a29d0909d99a808e34ae644dda45043109dba9", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -98,7 +98,7 @@ fn item_type(item: &ebmlivec::doc, this_cnum: ast::crate_num, tcx: ty::ctxt,\n     fn parse_external_def_id(this_cnum: ast::crate_num,\n                              extres: &external_resolver, s: str) ->\n        ast::def_id {\n-        let buf = str::bytes_ivec(s);\n+        let buf = str::bytes(s);\n         let external_def_id = parse_def_id(buf);\n \n "}, {"sha": "d91491efebe382a08380314e5023813431c6b6e5", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -26,13 +26,13 @@ type encode_ctxt = {ccx: @crate_ctxt, type_abbrevs: abbrev_map};\n // Path table encoding\n fn encode_name(ebml_w: &ebmlivec::writer, name: &str) {\n     ebmlivec::start_tag(ebml_w, tag_paths_data_name);\n-    ebml_w.writer.write(str::bytes_ivec(name));\n+    ebml_w.writer.write(str::bytes(name));\n     ebmlivec::end_tag(ebml_w);\n }\n \n fn encode_def_id(ebml_w: &ebmlivec::writer, id: &def_id) {\n     ebmlivec::start_tag(ebml_w, tag_def_id);\n-    ebml_w.writer.write(str::bytes_ivec(def_to_str(id)));\n+    ebml_w.writer.write(str::bytes(def_to_str(id)));\n     ebmlivec::end_tag(ebml_w);\n }\n \n@@ -190,7 +190,7 @@ fn encode_type_param_kinds(ebml_w: &ebmlivec::writer, tps: &[ty_param]) {\n \n fn encode_variant_id(ebml_w: &ebmlivec::writer, vid: &def_id) {\n     ebmlivec::start_tag(ebml_w, tag_items_data_item_variant);\n-    ebml_w.writer.write(str::bytes_ivec(def_to_str(vid)));\n+    ebml_w.writer.write(str::bytes(def_to_str(vid)));\n     ebmlivec::end_tag(ebml_w);\n }\n \n@@ -207,20 +207,20 @@ fn encode_type(ecx: &@encode_ctxt, ebml_w: &ebmlivec::writer, typ: &ty::t) {\n \n fn encode_symbol(ecx: &@encode_ctxt, ebml_w: &ebmlivec::writer, id: node_id) {\n     ebmlivec::start_tag(ebml_w, tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::bytes_ivec(ecx.ccx.item_symbols.get(id)));\n+    ebml_w.writer.write(str::bytes(ecx.ccx.item_symbols.get(id)));\n     ebmlivec::end_tag(ebml_w);\n }\n \n fn encode_discriminant(ecx: &@encode_ctxt, ebml_w: &ebmlivec::writer,\n                        id: node_id) {\n     ebmlivec::start_tag(ebml_w, tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::bytes_ivec(ecx.ccx.discrim_symbols.get(id)));\n+    ebml_w.writer.write(str::bytes(ecx.ccx.discrim_symbols.get(id)));\n     ebmlivec::end_tag(ebml_w);\n }\n \n fn encode_tag_id(ebml_w: &ebmlivec::writer, id: &def_id) {\n     ebmlivec::start_tag(ebml_w, tag_items_data_item_tag_id);\n-    ebml_w.writer.write(str::bytes_ivec(def_to_str(id)));\n+    ebml_w.writer.write(str::bytes(def_to_str(id)));\n     ebmlivec::end_tag(ebml_w);\n }\n \n@@ -443,7 +443,7 @@ fn encode_meta_item(ebml_w: &ebmlivec::writer, mi: &meta_item) {\n       meta_word(name) {\n         ebmlivec::start_tag(ebml_w, tag_meta_item_word);\n         ebmlivec::start_tag(ebml_w, tag_meta_item_name);\n-        ebml_w.writer.write(str::bytes_ivec(name));\n+        ebml_w.writer.write(str::bytes(name));\n         ebmlivec::end_tag(ebml_w);\n         ebmlivec::end_tag(ebml_w);\n       }\n@@ -452,10 +452,10 @@ fn encode_meta_item(ebml_w: &ebmlivec::writer, mi: &meta_item) {\n           lit_str(value, _) {\n             ebmlivec::start_tag(ebml_w, tag_meta_item_name_value);\n             ebmlivec::start_tag(ebml_w, tag_meta_item_name);\n-            ebml_w.writer.write(str::bytes_ivec(name));\n+            ebml_w.writer.write(str::bytes(name));\n             ebmlivec::end_tag(ebml_w);\n             ebmlivec::start_tag(ebml_w, tag_meta_item_value);\n-            ebml_w.writer.write(str::bytes_ivec(value));\n+            ebml_w.writer.write(str::bytes(value));\n             ebmlivec::end_tag(ebml_w);\n             ebmlivec::end_tag(ebml_w);\n           }\n@@ -465,7 +465,7 @@ fn encode_meta_item(ebml_w: &ebmlivec::writer, mi: &meta_item) {\n       meta_list(name, items) {\n         ebmlivec::start_tag(ebml_w, tag_meta_item_list);\n         ebmlivec::start_tag(ebml_w, tag_meta_item_name);\n-        ebml_w.writer.write(str::bytes_ivec(name));\n+        ebml_w.writer.write(str::bytes(name));\n         ebmlivec::end_tag(ebml_w);\n         for inner_item: @meta_item  in items {\n             encode_meta_item(ebml_w, *inner_item);\n@@ -575,7 +575,7 @@ fn encode_crate_deps(ebml_w: &ebmlivec::writer, cstore: &cstore::cstore) {\n     ebmlivec::start_tag(ebml_w, tag_crate_deps);\n     for cname: str  in get_ordered_names(cstore) {\n         ebmlivec::start_tag(ebml_w, tag_crate_dep);\n-        ebml_w.writer.write(str::bytes_ivec(cname));\n+        ebml_w.writer.write(str::bytes(cname));\n         ebmlivec::end_tag(ebml_w);\n     }\n     ebmlivec::end_tag(ebml_w);\n@@ -610,7 +610,7 @@ fn encode_metadata(cx: &@crate_ctxt, crate: &@crate) -> str {\n     encode_index(ebml_w, items_buckets, write_int);\n     ebmlivec::end_tag(ebml_w);\n     // Pad this, since something (LLVM, presumably) is cutting off the\n-    // remaining % 4 bytes_ivec.\n+    // remaining % 4 bytes.\n \n     buf_w.write(~[0u8, 0u8, 0u8, 0u8]);\n     ret string_w.get_str();"}, {"sha": "5aa490349d1cd1af8828d995f9bd5a24bd158513", "filename": "src/lib/io.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -340,18 +340,22 @@ fn uint_to_be_bytes(n: uint, size: uint) -> vec[u8] {\n \n obj new_writer(out: buf_writer) {\n     fn get_buf_writer() -> buf_writer { ret out; }\n-    fn write_str(s: str) { out.write(str::bytes(s)); }\n+    fn write_str(s: str) { out.write(ivec::to_vec(str::bytes(s))); }\n     fn write_line(s: str) {\n-        out.write(str::bytes(s));\n-        out.write(str::bytes(\"\\n\"));\n+        out.write(ivec::to_vec(str::bytes(s)));\n+        out.write(ivec::to_vec(str::bytes(\"\\n\")));\n     }\n     fn write_char(ch: char) {\n         // FIXME needlessly consy\n \n-        out.write(str::bytes(str::from_char(ch)));\n+        out.write(ivec::to_vec(str::bytes(str::from_char(ch))));\n+    }\n+    fn write_int(n: int) {\n+        out.write(ivec::to_vec(str::bytes(int::to_str(n, 10u))));\n+    }\n+    fn write_uint(n: uint) {\n+        out.write(ivec::to_vec(str::bytes(uint::to_str(n, 10u))));\n     }\n-    fn write_int(n: int) { out.write(str::bytes(int::to_str(n, 10u))); }\n-    fn write_uint(n: uint) { out.write(str::bytes(uint::to_str(n, 10u))); }\n     fn write_bytes(bytes: vec[u8]) { out.write(bytes); }\n     fn write_le_uint(n: uint, size: uint) {\n         out.write(uint_to_le_bytes(n, size));"}, {"sha": "6e42c1e8166853206ad1fb24ce83c983a4de2489", "filename": "src/lib/ioivec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fioivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fioivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fioivec.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -224,7 +224,7 @@ fn new_byte_buf_reader(buf: &[u8]) -> buf_reader {\n }\n \n fn string_reader(s: &str) -> reader {\n-    ret new_reader(new_byte_buf_reader(str::bytes_ivec(s)));\n+    ret new_reader(new_byte_buf_reader(str::bytes(s)));\n }\n \n \n@@ -343,19 +343,19 @@ fn uint_to_be_bytes(n: uint, size: uint) -> [u8] {\n \n obj new_writer(out: buf_writer) {\n     fn get_buf_writer() -> buf_writer { ret out; }\n-    fn write_str(s: str) { out.write(str::bytes_ivec(s)); }\n+    fn write_str(s: str) { out.write(str::bytes(s)); }\n     fn write_line(s: str) {\n-        out.write(str::bytes_ivec(s));\n-        out.write(str::bytes_ivec(\"\\n\"));\n+        out.write(str::bytes(s));\n+        out.write(str::bytes(\"\\n\"));\n     }\n     fn write_char(ch: char) {\n         // FIXME needlessly consy\n \n-        out.write(str::bytes_ivec(str::from_char(ch)));\n+        out.write(str::bytes(str::from_char(ch)));\n     }\n-    fn write_int(n: int) { out.write(str::bytes_ivec(int::to_str(n, 10u))); }\n+    fn write_int(n: int) { out.write(str::bytes(int::to_str(n, 10u))); }\n     fn write_uint(n: uint) {\n-        out.write(str::bytes_ivec(uint::to_str(n, 10u)));\n+        out.write(str::bytes(uint::to_str(n, 10u)));\n     }\n     fn write_bytes(bytes: &[u8]) { out.write(bytes); }\n     fn write_le_uint(n: uint, size: uint) {"}, {"sha": "fc4703db2a56fe2707fc8509c4058235d0fddb80", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -245,7 +245,7 @@ fn mk_sha1() -> sha1 {\n             add_input(st, m);\n         }\n         fn input_ivec(msg: &[u8]) { add_input(st, msg); }\n-        fn input_str(msg: &str) { add_input(st, str::bytes_ivec(msg)); }\n+        fn input_str(msg: &str) { add_input(st, str::bytes(msg)); }\n         fn result() -> vec[u8] {\n             let rivec = mk_result(st);\n             let rvec = [];"}, {"sha": "34e64c09f61e79eb5be5c906161855ba84d20ade", "filename": "src/lib/str.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -49,7 +49,6 @@ export connect;\n export connect_ivec;\n export to_upper;\n export safe_slice;\n-export bytes_ivec;\n export unsafe_from_bytes_ivec;\n export is_empty;\n export is_not_empty;\n@@ -63,7 +62,6 @@ export trim;\n native \"rust\" mod rustrt {\n     type sbuf;\n     fn str_buf(s: str) -> sbuf;\n-    fn str_vec(s: str) -> vec[u8];\n     fn str_byte_len(s: str) -> uint;\n     fn str_alloc(n_bytes: uint) -> str;\n     fn str_from_ivec(b: &[mutable? u8]) -> str;\n@@ -189,9 +187,7 @@ fn byte_len(s: str) -> uint { ret rustrt::str_byte_len(s); }\n \n fn buf(s: &str) -> sbuf { ret rustrt::str_buf(s); }\n \n-fn bytes(s: &str) -> vec[u8] { ret rustrt::str_vec(s); }\n-\n-fn bytes_ivec(s: str) -> [u8] {\n+fn bytes(s: str) -> [u8] {\n     let sbuffer = buf(s);\n     let ptr = unsafe::reinterpret_cast(sbuffer);\n     ret ivec::unsafe::from_buf(ptr, byte_len(s));"}, {"sha": "2037714aae62b1dd2eb12e3223a825b8da5cbf4e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -277,32 +277,6 @@ str_buf(rust_task *task, rust_str *s)\n     return (char const *)&s->data[0];\n }\n \n-extern \"C\" CDECL rust_vec*\n-str_vec(rust_task *task, rust_str *s)\n-{\n-    // FIXME: this should just upref s and return it, but we\n-    // accidentally made too much of the language and runtime know\n-    // and care about the difference between str and vec (trailing null);\n-    // eliminate these differences and then rewrite this back to just\n-    // the following:\n-    //\n-    // if (s->ref_count != CONST_REFCOUNT)\n-    //    s->ref();\n-    // return s;\n-\n-    rust_str *v =\n-        vec_alloc_with_data(task,\n-                            s->fill - 1,\n-                            s->fill - 1,\n-                            1,\n-                            (s->fill - 1) ? (void*)s->data : NULL);\n-    if (!v) {\n-        task->fail();\n-        return NULL;\n-    }\n-    return v;\n-}\n-\n extern \"C\" CDECL size_t\n str_byte_len(rust_task *task, rust_str *s)\n {"}, {"sha": "08847a673c00559395fd18512bd8444619e4ecb9", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -68,7 +68,6 @@ str_from_ivec\n str_from_vec\n str_push_byte\n str_slice\n-str_vec\n take_chan\n task_sleep\n task_yield"}, {"sha": "3c0c27f472c6b3808f245006f08a5372d22e2309", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -12,6 +12,7 @@\n use std;\n \n import std::vec;\n+import std::ivec;\n import std::uint;\n import std::time;\n import std::str;\n@@ -88,7 +89,8 @@ fn main(argv: vec[str]) {\n         if opts.stress {\n             stress(2);\n         } else {\n-            let max = uint::parse_buf(str::bytes(argv.(1)), 10u) as int;\n+            let max = uint::parse_buf(ivec::to_vec(str::bytes(argv.(1))),\n+                                      10u) as int;\n \n             let num_trials = 10;\n "}, {"sha": "71b469d98a75bd04a2afe4dec6bb367e8764a01c", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -1,5 +1,6 @@\n use std;\n import std::vec;\n+import std::ivec;\n import std::task;\n import std::uint;\n import std::str;\n@@ -19,7 +20,7 @@ fn main(args: vec[str]) {\n     let n = if vec::len(args) < 2u {\n         10u\n     } else {\n-        uint::parse_buf(str::bytes(args.(1)), 10u)\n+        uint::parse_buf(ivec::to_vec(str::bytes(args.(1))), 10u)\n     };\n     let i = 0u;\n     while i < n {"}, {"sha": "37d0e7c20cdf93ef5ef5ab68471c4b899412fd47", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -107,7 +107,7 @@ mod map_reduce {\n               none. {\n                 // log_err \"fetching new channel for \" + key;\n                 let p = port[chan[reduce_proto]]();\n-                let keyi = str::bytes_ivec(key);\n+                let keyi = str::bytes(key);\n                 ctrl <| find_reducer(keyi, chan(p));\n                 p |> c;\n                 im.insert(key, clone(c));"}, {"sha": "85e37f8c445d6231034556820f10580093535915", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -81,7 +81,7 @@ fn test_in_fn_ctxt() {\n mod test_native_items {\n     native \"rust\" mod rustrt {\n         #[cfg(bogus)]\n-        fn str_vec(s: str) -> vec[u8];\n-        fn str_vec(s: str) -> vec[u8];\n+        fn str_byte_len(s: str) -> uint;\n+        fn str_byte_len(s: str) -> uint;\n     }\n }\n\\ No newline at end of file"}, {"sha": "73dff34613ede9630d08805fe89200ea06176d97", "filename": "src/test/run-pass/sio-read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Fsio-read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Fsio-read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsio-read.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -19,7 +19,7 @@ fn main() {\n   let srv: sio::server = sio::create_server(cx, \"0.0.0.0\", 9090);\n   let child: task = spawn connectTask(cx, \"127.0.0.1\", 9090);\n   let client: sio::client = sio::accept_from(srv);\n-  sio::write_data(client, str::bytes_ivec(\"hello, world\\n\"));\n+  sio::write_data(client, str::bytes(\"hello, world\\n\"));\n   task::join(child);\n   sio::close_client(client);\n   sio::close_server(srv);"}, {"sha": "67b586085bf9d02551794eab6521c3510c8f7cea", "filename": "src/test/run-pass/sio-write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Fsio-write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Fsio-write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsio-write.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -18,7 +18,7 @@ fn main() {\n   let srv: sio::server = sio::create_server(cx, \"0.0.0.0\", 9090);\n   let child: task = spawn connectTask(cx, \"127.0.0.1\", 9090);\n   let client: sio::client = sio::accept_from(srv);\n-  sio::write_data(client, str::bytes_ivec(\"hello, world\\n\"));\n+  sio::write_data(client, str::bytes(\"hello, world\\n\"));\n   task::join(child);\n   sio::close_client(client);\n   sio::close_server(srv);"}, {"sha": "76f86b60a53ec6d6ac6c35064e063681013221dd", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -2,6 +2,7 @@ use std;\n import std::str;\n import std::vec;\n import std::io;\n+import std::ivec;\n \n fn main() {\n     // Chars of 1, 2, 3, and 4 bytes\n@@ -15,7 +16,7 @@ fn main() {\n     assert (str::char_at(s, 0u) == 'e');\n     assert (str::char_at(s, 1u) == '\u00e9');\n \n-    assert (str::is_utf8(str::bytes(s)));\n+    assert (str::is_utf8(ivec::to_vec(str::bytes(s))));\n     assert (!str::is_utf8([0x80_u8]));\n     assert (!str::is_utf8([0xc0_u8]));\n     assert (!str::is_utf8([0xc0_u8, 0x10_u8]));"}, {"sha": "6051ee1cad40f3c645502fa58f0be05b186bec42", "filename": "src/test/stdtest/vec_str_conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7e58812b4b6a295c06f73b72288dcf8cd801cb/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs?ref=2e7e58812b4b6a295c06f73b72288dcf8cd801cb", "patch": "@@ -4,6 +4,7 @@\n use std;\n import std::str;\n import std::vec;\n+import std::ivec;\n \n #[test]\n fn test_simple() {\n@@ -15,7 +16,7 @@ fn test_simple() {\n      * working, but we should implement is_utf8 before that happens.\n      */\n \n-    let v: vec[u8] = str::bytes(s1);\n+    let v: vec[u8] = ivec::to_vec(str::bytes(s1));\n     let s2: str = str::from_bytes(v);\n     let i: uint = 0u;\n     let n1: uint = str::byte_len(s1);"}]}