{"sha": "73efce9ee6e971f45b20976c1efd96888faf4a1d", "node_id": "C_kwDOAAsO6NoAKDczZWZjZTllZTZlOTcxZjQ1YjIwOTc2YzFlZmQ5Njg4OGZhZjRhMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-21T19:51:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-21T19:51:42Z"}, "message": "Auto merge of #9770 - sgued:missnamed-getters, r=llogiq\n\nAdd new lint  [`misnamed-getters`]\n\n```\nchangelog: Add new lint  [`misnamed-getters`]\n```\n\nCloses #9769\n\nThe current lint matches all methods with a body of just one expression under the form `(&mut?)? <expr>.field` where field doesn't match the name of the method but there is a field of the same type in `<expr>` that matches the name. This allows matching nested structs, for example for newtype wrappers. This may cast the net a bit too wide and cause false positives. I'll run [clippy_lint_tester](https://github.com/mikerite/clippy_lint_tester) on the top crates to see how frequently false positives happen.\n\nThere also may be room for improvement by checking that the replacement field would work taking into account implementations of `Deref` and `DerefMut` even if the types don't exactly match but I don't know yet how this could be done.", "tree": {"sha": "b56161255fcea8438eb7b4a0709a7d3bd06dc15d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b56161255fcea8438eb7b4a0709a7d3bd06dc15d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73efce9ee6e971f45b20976c1efd96888faf4a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73efce9ee6e971f45b20976c1efd96888faf4a1d", "html_url": "https://github.com/rust-lang/rust/commit/73efce9ee6e971f45b20976c1efd96888faf4a1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73efce9ee6e971f45b20976c1efd96888faf4a1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4850f7292efa33759b4f7f9b7621268979e9914", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4850f7292efa33759b4f7f9b7621268979e9914", "html_url": "https://github.com/rust-lang/rust/commit/f4850f7292efa33759b4f7f9b7621268979e9914"}, {"sha": "1f2f50c34eb304ce56213dad70ccdeb2f2901512", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2f50c34eb304ce56213dad70ccdeb2f2901512", "html_url": "https://github.com/rust-lang/rust/commit/1f2f50c34eb304ce56213dad70ccdeb2f2901512"}], "stats": {"total": 462, "additions": 462, "deletions": 0}, "files": [{"sha": "5b6b12c623af1173ba9e2c04548d468caac8a2f1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73efce9ee6e971f45b20976c1efd96888faf4a1d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/73efce9ee6e971f45b20976c1efd96888faf4a1d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=73efce9ee6e971f45b20976c1efd96888faf4a1d", "patch": "@@ -4188,6 +4188,7 @@ Released 2018-09-13\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n [`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n+[`misnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items"}, {"sha": "eb3210946f119a05a08f9064726b836cc60395a1", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73efce9ee6e971f45b20976c1efd96888faf4a1d/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73efce9ee6e971f45b20976c1efd96888faf4a1d/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=73efce9ee6e971f45b20976c1efd96888faf4a1d", "patch": "@@ -177,6 +177,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR_INFO,\n     crate::from_str_radix_10::FROM_STR_RADIX_10_INFO,\n     crate::functions::DOUBLE_MUST_USE_INFO,\n+    crate::functions::MISNAMED_GETTERS_INFO,\n     crate::functions::MUST_USE_CANDIDATE_INFO,\n     crate::functions::MUST_USE_UNIT_INFO,\n     crate::functions::NOT_UNSAFE_PTR_ARG_DEREF_INFO,"}, {"sha": "27acad45ccf729e00e63982d50ead26f92ec6b7b", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/73efce9ee6e971f45b20976c1efd96888faf4a1d/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73efce9ee6e971f45b20976c1efd96888faf4a1d/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=73efce9ee6e971f45b20976c1efd96888faf4a1d", "patch": "@@ -0,0 +1,125 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use rustc_errors::Applicability;\n+use rustc_hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, ImplicitSelfKind, Unsafety};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::Span;\n+\n+use std::iter;\n+\n+use super::MISNAMED_GETTERS;\n+\n+pub fn check_fn(\n+    cx: &LateContext<'_>,\n+    kind: FnKind<'_>,\n+    decl: &FnDecl<'_>,\n+    body: &Body<'_>,\n+    span: Span,\n+    _hir_id: HirId,\n+) {\n+    let FnKind::Method(ref ident, sig) = kind else {\n+            return;\n+        };\n+\n+    // Takes only &(mut) self\n+    if decl.inputs.len() != 1 {\n+        return;\n+    }\n+\n+    let name = ident.name.as_str();\n+\n+    let name = match decl.implicit_self {\n+        ImplicitSelfKind::MutRef => {\n+            let Some(name) = name.strip_suffix(\"_mut\") else {\n+                    return;\n+                };\n+            name\n+        },\n+        ImplicitSelfKind::Imm | ImplicitSelfKind::Mut | ImplicitSelfKind::ImmRef => name,\n+        ImplicitSelfKind::None => return,\n+    };\n+\n+    let name = if sig.header.unsafety == Unsafety::Unsafe {\n+        name.strip_suffix(\"_unchecked\").unwrap_or(name)\n+    } else {\n+        name\n+    };\n+\n+    // Body must be &(mut) <self_data>.name\n+    // self_data is not neccessarilly self, to also lint sub-getters, etc\u2026\n+\n+    let block_expr = if_chain! {\n+        if let ExprKind::Block(block,_) = body.value.kind;\n+        if block.stmts.is_empty();\n+        if let Some(block_expr) = block.expr;\n+        then {\n+            block_expr\n+        } else {\n+            return;\n+        }\n+    };\n+    let expr_span = block_expr.span;\n+\n+    // Accept &<expr>, &mut <expr> and <expr>\n+    let expr = if let ExprKind::AddrOf(_, _, tmp) = block_expr.kind {\n+        tmp\n+    } else {\n+        block_expr\n+    };\n+    let (self_data, used_ident) = if_chain! {\n+        if let ExprKind::Field(self_data, ident) = expr.kind;\n+        if ident.name.as_str() != name;\n+        then {\n+            (self_data, ident)\n+        } else {\n+            return;\n+        }\n+    };\n+\n+    let mut used_field = None;\n+    let mut correct_field = None;\n+    let typeck_results = cx.typeck_results();\n+    for adjusted_type in iter::once(typeck_results.expr_ty(self_data))\n+        .chain(typeck_results.expr_adjustments(self_data).iter().map(|adj| adj.target))\n+    {\n+        let ty::Adt(def,_) = adjusted_type.kind() else {\n+            continue;\n+        };\n+\n+        for f in def.all_fields() {\n+            if f.name.as_str() == name {\n+                correct_field = Some(f);\n+            }\n+            if f.name == used_ident.name {\n+                used_field = Some(f);\n+            }\n+        }\n+    }\n+\n+    let Some(used_field) = used_field else {\n+        // Can happen if the field access is a tuple. We don't lint those because the getter name could not start with a number.\n+        return;\n+    };\n+\n+    let Some(correct_field) = correct_field else {\n+        // There is no field corresponding to the getter name.\n+        // FIXME: This can be a false positive if the correct field is reachable trought deeper autodereferences than used_field is\n+        return;\n+    };\n+\n+    if cx.tcx.type_of(used_field.did) == cx.tcx.type_of(correct_field.did) {\n+        let left_span = block_expr.span.until(used_ident.span);\n+        let snippet = snippet(cx, left_span, \"..\");\n+        let sugg = format!(\"{snippet}{name}\");\n+        span_lint_and_then(\n+            cx,\n+            MISNAMED_GETTERS,\n+            span,\n+            \"getter function appears to return the wrong field\",\n+            |diag| {\n+                diag.span_suggestion(expr_span, \"consider using\", sugg, Applicability::MaybeIncorrect);\n+            },\n+        );\n+    }\n+}"}, {"sha": "91e6ffe6447909d610bd14774b269c301c1eb0cf", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/73efce9ee6e971f45b20976c1efd96888faf4a1d/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73efce9ee6e971f45b20976c1efd96888faf4a1d/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=73efce9ee6e971f45b20976c1efd96888faf4a1d", "patch": "@@ -1,3 +1,4 @@\n+mod misnamed_getters;\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n mod result;\n@@ -260,6 +261,48 @@ declare_clippy_lint! {\n     \"function returning `Result` with large `Err` type\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for getter methods that return a field that doesn't correspond\n+    /// to the name of the method, when there is a field's whose name matches that of the method.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is most likely that such a  method is a bug caused by a typo or by copy-pasting.\n+    ///\n+    /// ### Example\n+\n+    /// ```rust\n+    /// struct A {\n+    ///     a: String,\n+    ///     b: String,\n+    /// }\n+    ///\n+    /// impl A {\n+    ///     fn a(&self) -> &str{\n+    ///         &self.b\n+    ///     }\n+    /// }\n+\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct A {\n+    ///     a: String,\n+    ///     b: String,\n+    /// }\n+    ///\n+    /// impl A {\n+    ///     fn a(&self) -> &str{\n+    ///         &self.a\n+    ///     }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub MISNAMED_GETTERS,\n+    suspicious,\n+    \"getter method returning the wrong field\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     too_many_arguments_threshold: u64,\n@@ -286,6 +329,7 @@ impl_lint_pass!(Functions => [\n     MUST_USE_CANDIDATE,\n     RESULT_UNIT_ERR,\n     RESULT_LARGE_ERR,\n+    MISNAMED_GETTERS,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -301,6 +345,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n+        misnamed_getters::check_fn(cx, kind, decl, body, span, hir_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "03e7dac7df94c4ceaaf7d29e69deb8dc80050ed3", "filename": "tests/ui/misnamed_getters.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/73efce9ee6e971f45b20976c1efd96888faf4a1d/tests%2Fui%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73efce9ee6e971f45b20976c1efd96888faf4a1d/tests%2Fui%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmisnamed_getters.rs?ref=73efce9ee6e971f45b20976c1efd96888faf4a1d", "patch": "@@ -0,0 +1,124 @@\n+#![allow(unused)]\n+#![warn(clippy::misnamed_getters)]\n+\n+struct A {\n+    a: u8,\n+    b: u8,\n+    c: u8,\n+}\n+\n+impl A {\n+    fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    fn b(self) -> u8 {\n+        self.a\n+    }\n+\n+    fn b_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    fn c(&self) -> &u8 {\n+        &self.b\n+    }\n+\n+    fn c_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+}\n+\n+union B {\n+    a: u8,\n+    b: u8,\n+}\n+\n+impl B {\n+    unsafe fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    unsafe fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    unsafe fn b(self) -> u8 {\n+        self.a\n+    }\n+\n+    unsafe fn b_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    unsafe fn c(&self) -> &u8 {\n+        &self.b\n+    }\n+\n+    unsafe fn c_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    unsafe fn a_unchecked(&self) -> &u8 {\n+        &self.b\n+    }\n+    unsafe fn a_unchecked_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    unsafe fn b_unchecked(self) -> u8 {\n+        self.a\n+    }\n+\n+    unsafe fn b_unchecked_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+\n+    unsafe fn c_unchecked(&self) -> &u8 {\n+        &self.b\n+    }\n+\n+    unsafe fn c_unchecked_mut(&mut self) -> &mut u8 {\n+        &mut self.a\n+    }\n+}\n+\n+struct D {\n+    d: u8,\n+    inner: A,\n+}\n+\n+impl core::ops::Deref for D {\n+    type Target = A;\n+    fn deref(&self) -> &A {\n+        &self.inner\n+    }\n+}\n+\n+impl core::ops::DerefMut for D {\n+    fn deref_mut(&mut self) -> &mut A {\n+        &mut self.inner\n+    }\n+}\n+\n+impl D {\n+    fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    fn d(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn d_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "1e38a83d019a6d33e7aa82c973beedd657e9dc9b", "filename": "tests/ui/misnamed_getters.stderr", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/73efce9ee6e971f45b20976c1efd96888faf4a1d/tests%2Fui%2Fmisnamed_getters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73efce9ee6e971f45b20976c1efd96888faf4a1d/tests%2Fui%2Fmisnamed_getters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmisnamed_getters.stderr?ref=73efce9ee6e971f45b20976c1efd96888faf4a1d", "patch": "@@ -0,0 +1,166 @@\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:11:5\n+   |\n+LL | /     fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::misnamed-getters` implied by `-D warnings`\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:14:5\n+   |\n+LL | /     fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:18:5\n+   |\n+LL | /     fn b(self) -> u8 {\n+LL | |         self.a\n+   | |         ------ help: consider using: `self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:22:5\n+   |\n+LL | /     fn b_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:26:5\n+   |\n+LL | /     fn c(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.c`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:30:5\n+   |\n+LL | /     fn c_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.c`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:41:5\n+   |\n+LL | /     unsafe fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:44:5\n+   |\n+LL | /     unsafe fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:48:5\n+   |\n+LL | /     unsafe fn b(self) -> u8 {\n+LL | |         self.a\n+   | |         ------ help: consider using: `self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:52:5\n+   |\n+LL | /     unsafe fn b_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:64:5\n+   |\n+LL | /     unsafe fn a_unchecked(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:67:5\n+   |\n+LL | /     unsafe fn a_unchecked_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:71:5\n+   |\n+LL | /     unsafe fn b_unchecked(self) -> u8 {\n+LL | |         self.a\n+   | |         ------ help: consider using: `self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:75:5\n+   |\n+LL | /     unsafe fn b_unchecked_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.a\n+   | |         ----------- help: consider using: `&mut self.b`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:107:5\n+   |\n+LL | /     fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:110:5\n+   |\n+LL | /     fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:114:5\n+   |\n+LL | /     fn d(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.d`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:117:5\n+   |\n+LL | /     fn d_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.d`\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 18 previous errors\n+"}]}