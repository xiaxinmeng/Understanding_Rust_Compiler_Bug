{"sha": "335edf87bc84bdfcc48ab23f12f606ced09dbac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNWVkZjg3YmM4NGJkZmNjNDhhYjIzZjEyZjYwNmNlZDA5ZGJhYzc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-11T09:37:41Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-12T11:46:02Z"}, "message": "Do not insert imports before inner comments", "tree": {"sha": "4415c7ec1d8dc1ca2e98f2d5243031356236ea8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4415c7ec1d8dc1ca2e98f2d5243031356236ea8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/335edf87bc84bdfcc48ab23f12f606ced09dbac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/335edf87bc84bdfcc48ab23f12f606ced09dbac7", "html_url": "https://github.com/rust-lang/rust/commit/335edf87bc84bdfcc48ab23f12f606ced09dbac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/335edf87bc84bdfcc48ab23f12f606ced09dbac7/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fa139beab0c03583c676554c3d807525f602af", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa139beab0c03583c676554c3d807525f602af", "html_url": "https://github.com/rust-lang/rust/commit/99fa139beab0c03583c676554c3d807525f602af"}], "stats": {"total": 110, "additions": 92, "deletions": 18}, "files": [{"sha": "c4de83f773a9538232795f77129ed521a955612e", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 92, "deletions": 18, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/335edf87bc84bdfcc48ab23f12f606ced09dbac7/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335edf87bc84bdfcc48ab23f12f606ced09dbac7/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=335edf87bc84bdfcc48ab23f12f606ced09dbac7", "patch": "@@ -9,7 +9,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, AstNode, PathSegmentKind, VisibilityOwner,\n     },\n-    InsertPosition, SyntaxElement, SyntaxNode,\n+    AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken,\n };\n use test_utils::mark;\n \n@@ -63,27 +63,46 @@ impl ImportScope {\n         }\n     }\n \n-    fn insert_pos_after_inner_attribute(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n-        // check if the scope has inner attributes, we dont want to insert in front of them\n-        match self\n-            .as_syntax_node()\n-            .children()\n-            // no flat_map here cause we want to short circuit the iterator\n-            .map(ast::Attr::cast)\n-            .take_while(|attr| {\n-                attr.as_ref().map(|attr| attr.kind() == ast::AttrKind::Inner).unwrap_or(false)\n-            })\n-            .last()\n-            .flatten()\n-        {\n-            Some(attr) => {\n-                (InsertPosition::After(attr.syntax().clone().into()), AddBlankLine::BeforeTwice)\n+    fn insert_pos_after_inner_elements(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n+        let mut last_inner_element = None;\n+\n+        for maybe_inner_element in self.as_syntax_node().children_with_tokens() {\n+            match maybe_inner_element {\n+                NodeOrToken::Node(maybe_inner_node) => {\n+                    if is_inner_node(maybe_inner_node.clone()) {\n+                        last_inner_element = Some(NodeOrToken::Node(maybe_inner_node))\n+                    } else {\n+                        if let Some(maybe_inner_token) = maybe_inner_node.first_token() {\n+                            if is_inner_token(maybe_inner_token.clone()) {\n+                                last_inner_element = Some(NodeOrToken::Token(maybe_inner_token))\n+                            }\n+                        }\n+                    };\n+                }\n+                NodeOrToken::Token(maybe_inner_token) => {\n+                    if is_inner_token(maybe_inner_token.clone()) {\n+                        last_inner_element = Some(NodeOrToken::Token(maybe_inner_token))\n+                    }\n+                }\n             }\n+        }\n+\n+        match last_inner_element {\n+            Some(element) => (InsertPosition::After(element.into()), AddBlankLine::BeforeTwice),\n             None => self.first_insert_pos(),\n         }\n     }\n }\n \n+fn is_inner_node(node: SyntaxNode) -> bool {\n+    ast::Attr::cast(node).map(|attr| attr.kind()) == Some(ast::AttrKind::Inner)\n+}\n+\n+fn is_inner_token(token: SyntaxToken) -> bool {\n+    ast::Comment::cast(token).and_then(|comment| comment.kind().doc)\n+        == Some(ast::CommentPlacement::Inner)\n+}\n+\n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub(crate) fn insert_use<'a>(\n     scope: &ImportScope,\n@@ -558,7 +577,7 @@ fn find_insert_position(\n                             (InsertPosition::After(node.into()), AddBlankLine::BeforeTwice)\n                         }\n                         // there are no imports in this file at all\n-                        None => scope.insert_pos_after_inner_attribute(),\n+                        None => scope.insert_pos_after_inner_elements(),\n                     },\n                 }\n             }\n@@ -830,12 +849,67 @@ use foo::bar;\",\n             \"foo::bar\",\n             r\"#![allow(unused_imports)]\n \n+#![no_std]\n fn main() {}\",\n             r\"#![allow(unused_imports)]\n \n-use foo::bar;\n+#![no_std]\n \n+use foo::bar;\n fn main() {}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inserts_after_single_line_inner_comments() {\n+        check_none(\n+            \"foo::bar::Baz\",\n+            \"//! Single line inner comments do not allow any code before them.\",\n+            r#\"//! Single line inner comments do not allow any code before them.\n+\n+use foo::bar::Baz;\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inserts_after_multiline_inner_comments() {\n+        check_none(\n+            \"foo::bar::Baz\",\n+            r#\"/*! Multiline inner comments do not allow any code before them. */\n+\n+/*! RA considers this inner comment belonging to the function, yet we still cannot place the code before it. */\n+fn main() {}\"#,\n+            r#\"/*! Multiline inner comments do not allow any code before them. */\n+\n+/*! RA considers this inner comment belonging to the function, yet we still cannot place the code before it. */\n+\n+use foo::bar::Baz;\n+fn main() {}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn inserts_after_all_inner_items() {\n+        check_none(\n+            \"foo::bar::Baz\",\n+            r#\"#![allow(unused_imports)]\n+/*! Multiline line comment 2 */\n+\n+\n+//! Single line comment 1\n+#![no_std]\n+//! Single line comment 2\n+fn main() {}\"#,\n+            r#\"#![allow(unused_imports)]\n+/*! Multiline line comment 2 */\n+\n+\n+//! Single line comment 1\n+#![no_std]\n+//! Single line comment 2\n+\n+use foo::bar::Baz;\n+fn main() {}\"#,\n         )\n     }\n "}]}