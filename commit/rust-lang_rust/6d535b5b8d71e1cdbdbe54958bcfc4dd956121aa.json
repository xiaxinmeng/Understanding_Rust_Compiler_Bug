{"sha": "6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNTM1YjViOGQ3MWUxY2RiZGJlNTQ5NThiY2ZjNGRkOTU2MTIxYWE=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-04-16T05:32:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "rustc: Make std_inject valid for pretty-printer\n\nInject `extern crate {std, native}` before `use` statements.\nAdd `#![feature(glob)]` since `use std::prelude::*` is used.\n\n(Unfortunately `rustc --pretty expanded` does not converge,\nsince `extern crate` and `use std::prelude::*` is injected at every\niteration.)", "tree": {"sha": "b153f8e8088775eb03685bf7b13b615c7fcf0943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b153f8e8088775eb03685bf7b13b615c7fcf0943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "html_url": "https://github.com/rust-lang/rust/commit/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0004953c3a29a884d1e772e8874096f21e3b6513", "url": "https://api.github.com/repos/rust-lang/rust/commits/0004953c3a29a884d1e772e8874096f21e3b6513", "html_url": "https://github.com/rust-lang/rust/commit/0004953c3a29a884d1e772e8874096f21e3b6513"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "f6e6875f0e71fc7f30c195045c621d17a75c3304", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "patch": "@@ -100,6 +100,7 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n             });\n         }\n \n+        // `extern crate` must be precede `use` items\n         vis.push_all_move(krate.module.view_items.clone());\n         let new_module = ast::Mod {\n             view_items: vis,\n@@ -130,8 +131,20 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n         if !no_prelude(krate.attrs.as_slice()) {\n             // only add `use std::prelude::*;` if there wasn't a\n             // `#![no_implicit_prelude]` at the crate level.\n+\n+            let mut attrs = krate.attrs.clone();\n+\n+            // fold_mod() will insert glob path.\n+            let globs_attr = attr::mk_attr(attr::mk_list_item(\n+                InternedString::new(\"feature\"),\n+                vec!(\n+                    attr::mk_word_item(InternedString::new(\"globs\")),\n+                )));\n+            attrs.push(globs_attr);\n+\n             ast::Crate {\n                 module: self.fold_mod(&krate.module),\n+                attrs: attrs,\n                 ..krate\n             }\n         } else {\n@@ -175,11 +188,20 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n             span: DUMMY_SP,\n         };\n \n-        let vis = (vec!(vi2)).append(module.view_items.as_slice());\n+        let (crates, uses) = module.view_items.partitioned(|x| {\n+            match x.node {\n+                ast::ViewItemExternCrate(..) => true,\n+                _ => false,\n+            }\n+        });\n+\n+        // add vi2 after any `extern crate` but before any `use`\n+        let mut view_items = crates;\n+        view_items.push(vi2);\n+        view_items.push_all_move(uses);\n \n-        // FIXME #2543: Bad copy.\n         let new_module = ast::Mod {\n-            view_items: vis,\n+            view_items: view_items,\n             ..(*module).clone()\n         };\n         fold::noop_fold_mod(&new_module, self)"}]}