{"sha": "37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YjBiM2U5YTM2Y2NiZjRhNmJhYWNlMWY1ZDBmM2NjZjczOGQ2Yjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-17T11:27:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:05Z"}, "message": "generalize region highlights into a struct", "tree": {"sha": "b010e67ce4499b8dd7414df078273f5d38a5bb5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b010e67ce4499b8dd7414df078273f5d38a5bb5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "html_url": "https://github.com/rust-lang/rust/commit/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a6d2f4b3f79e8f72fdf3600b4ce9a5671c6abdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6d2f4b3f79e8f72fdf3600b4ce9a5671c6abdc", "html_url": "https://github.com/rust-lang/rust/commit/6a6d2f4b3f79e8f72fdf3600b4ce9a5671c6abdc"}], "stats": {"total": 143, "additions": 91, "deletions": 52}, "files": [{"sha": "ea0495c5c738c57ef6aa6a0f48aa4bc08bd2cc1b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 79, "deletions": 45, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "patch": "@@ -21,17 +21,87 @@ use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};\n use hir;\n \n+/// The \"region highlights\" are used to control region printing during\n+/// specific error messages. When a \"region highlight\" is enabled, it\n+/// gives an alternate way to print specific regions. For now, we\n+/// always print those regions using a number, so something like `'0`.\n+///\n+/// Regions not selected by the region highlight mode are presently\n+/// unaffected.\n+#[derive(Copy, Clone, Default)]\n+pub struct RegionHighlightMode {\n+    /// If enabled, when we see the selected region inference\n+    /// variable, use `\"'N\"`; otherwise, use an empty string `\"\"`\n+    /// (which is our ordinary behavior).\n+    highlight_region_vid: Option<(RegionVid, usize)>,\n+\n+    /// If enabled, when printing a \"free region\" that originated from\n+    /// the given `ty::BoundRegion`, print it as `'1`. Free regions that would ordinarily\n+    /// have names print as normal.\n+    ///\n+    /// This is used when you have a signature like `fn foo(x: &u32,\n+    /// y: &'a u32)` and we want to give a name to the region of the\n+    /// reference `x`.\n+    highlight_bound_region: Option<(ty::BoundRegion, usize)>,\n+}\n+\n thread_local! {\n     /// Mechanism for highlighting of specific regions for display in NLL region inference errors.\n     /// Contains region to highlight and counter for number to use when highlighting.\n-    static HIGHLIGHT_REGION_FOR_REGIONVID: Cell<Option<(RegionVid, usize)>> = Cell::new(None)\n+    static REGION_HIGHLIGHT_MODE: Cell<RegionHighlightMode> =\n+        Cell::new(RegionHighlightMode::default())\n }\n \n-thread_local! {\n-    /// Mechanism for highlighting of specific regions for display in NLL's 'borrow does not live\n-    /// long enough' errors. Contains a region to highlight and a counter to use.\n-    static HIGHLIGHT_REGION_FOR_BOUND_REGION: Cell<Option<(ty::BoundRegion, usize)>> =\n-        Cell::new(None)\n+impl RegionHighlightMode {\n+    pub fn get() -> Self {\n+        REGION_HIGHLIGHT_MODE.with(|c| c.get())\n+    }\n+\n+    fn set<R>(\n+        old_mode: Self,\n+        new_mode: Self,\n+        op: impl FnOnce() -> R,\n+    ) -> R {\n+        REGION_HIGHLIGHT_MODE.with(|c| {\n+            c.set(new_mode);\n+            let result = op();\n+            c.set(old_mode);\n+            result\n+        })\n+    }\n+\n+    pub fn highlighting_region_vid<R>(vid: RegionVid, number: usize, op: impl FnOnce() -> R) -> R {\n+        let old_mode = Self::get();\n+        assert!(old_mode.highlight_region_vid.is_none());\n+        Self::set(\n+            old_mode,\n+            Self {\n+                highlight_region_vid: Some((vid, number)),\n+                ..old_mode\n+            },\n+            op,\n+        )\n+    }\n+\n+    /// During the execution of `op`, highlight the given bound\n+    /// region. We can only highlight one bound region at a time.  See\n+    /// the field `highlight_bound_region` for more detailed notes.\n+    pub fn highlighting_bound_region<R>(\n+        br: ty::BoundRegion,\n+        number: usize,\n+        op: impl FnOnce() -> R,\n+    ) -> R {\n+        let old_mode = Self::get();\n+        assert!(old_mode.highlight_bound_region.is_none());\n+        Self::set(\n+            old_mode,\n+            Self {\n+                highlight_bound_region: Some((br, number)),\n+                ..old_mode\n+            },\n+            op,\n+        )\n+    }\n }\n \n macro_rules! gen_display_debug_body {\n@@ -553,42 +623,6 @@ pub fn parameterized<F: fmt::Write>(f: &mut F,\n     PrintContext::new().parameterized(f, substs, did, projections)\n }\n \n-fn get_highlight_region_for_regionvid() -> Option<(RegionVid, usize)> {\n-    HIGHLIGHT_REGION_FOR_REGIONVID.with(|hr| hr.get())\n-}\n-\n-pub fn with_highlight_region_for_regionvid<R>(\n-    r: RegionVid,\n-    counter: usize,\n-    op: impl FnOnce() -> R\n-) -> R {\n-    HIGHLIGHT_REGION_FOR_REGIONVID.with(|hr| {\n-        assert_eq!(hr.get(), None);\n-        hr.set(Some((r, counter)));\n-        let r = op();\n-        hr.set(None);\n-        r\n-    })\n-}\n-\n-fn get_highlight_region_for_bound_region() -> Option<(ty::BoundRegion, usize)> {\n-    HIGHLIGHT_REGION_FOR_BOUND_REGION.with(|hr| hr.get())\n-}\n-\n-pub fn with_highlight_region_for_bound_region<R>(\n-    r: ty::BoundRegion,\n-    counter: usize,\n-    op: impl Fn() -> R\n-) -> R {\n-    HIGHLIGHT_REGION_FOR_BOUND_REGION.with(|hr| {\n-        assert_eq!(hr.get(), None);\n-        hr.set(Some((r, counter)));\n-        let r = op();\n-        hr.set(None);\n-        r\n-    })\n-}\n-\n impl<'a, T: Print> Print for &'a T {\n     fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n         (*self).print(f, cx)\n@@ -740,7 +774,7 @@ define_print! {\n                 return self.print_debug(f, cx);\n             }\n \n-            if let Some((region, counter)) = get_highlight_region_for_bound_region() {\n+            if let Some((region, counter)) = RegionHighlightMode::get().highlight_bound_region {\n                 if *self == region {\n                     return match *self {\n                         BrNamed(_, name) => write!(f, \"{}\", name),\n@@ -807,7 +841,7 @@ define_print! {\n                     }\n                 }\n                 ty::ReVar(region_vid) => {\n-                    if get_highlight_region_for_regionvid().is_some() {\n+                    if RegionHighlightMode::get().highlight_region_vid.is_some() {\n                         write!(f, \"{:?}\", region_vid)\n                     } else if cx.identify_regions {\n                         write!(f, \"'{}rv\", region_vid.index())\n@@ -944,7 +978,7 @@ impl fmt::Debug for ty::FloatVid {\n \n impl fmt::Debug for ty::RegionVid {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let Some((region, counter)) = get_highlight_region_for_regionvid() {\n+        if let Some((region, counter)) = RegionHighlightMode::get().highlight_region_vid {\n             debug!(\"RegionVid.fmt: region={:?} self={:?} counter={:?}\", region, self, counter);\n             return if *self == region {\n                 write!(f, \"'{:?}\", counter)"}, {"sha": "83cd28bbdc58cfe0a54b0566d77f340c95f28f4a", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     TerminatorKind, VarBindingForm,\n };\n use rustc::ty::{self, DefIdTree};\n-use rustc::util::ppaux::with_highlight_region_for_bound_region;\n+use rustc::util::ppaux::RegionHighlightMode;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n@@ -2177,7 +2177,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n                 ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n-            ) => with_highlight_region_for_bound_region(*br, counter, || ty.to_string()),\n+            ) => RegionHighlightMode::highlighting_bound_region(*br, counter, || ty.to_string()),\n             _ => ty.to_string(),\n         }\n     }\n@@ -2189,7 +2189,11 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n             ty::TyKind::Ref(region, _, _) => match region {\n                 ty::RegionKind::ReLateBound(_, br)\n                 | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n-                    with_highlight_region_for_bound_region(*br, counter, || region.to_string())\n+                    RegionHighlightMode::highlighting_bound_region(\n+                        *br,\n+                        counter,\n+                        || region.to_string(),\n+                    )\n                 }\n                 _ => region.to_string(),\n             },"}, {"sha": "bff8015511242e1338f17a386eb623d39eba6053", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "patch": "@@ -8,7 +8,7 @@ use rustc::infer::InferCtxt;\n use rustc::mir::Mir;\n use rustc::ty::subst::{Substs, UnpackedKind};\n use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n-use rustc::util::ppaux::with_highlight_region_for_regionvid;\n+use rustc::util::ppaux::RegionHighlightMode;\n use rustc_errors::DiagnosticBuilder;\n use syntax::ast::{Name, DUMMY_NODE_ID};\n use syntax::symbol::keywords;\n@@ -396,7 +396,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_ty: Ty<'tcx>,\n         counter: &mut usize,\n     ) -> Option<RegionName> {\n-        let type_name = with_highlight_region_for_regionvid(needle_fr, *counter, || {\n+        let type_name = RegionHighlightMode::highlighting_region_vid(needle_fr, *counter, || {\n             infcx.extract_type_name(&argument_ty)\n         });\n \n@@ -673,8 +673,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             return None;\n         }\n \n-        let type_name = with_highlight_region_for_regionvid(\n-            fr, *counter, || infcx.extract_type_name(&return_ty));\n+        let type_name = RegionHighlightMode::highlighting_region_vid(\n+            fr, *counter, || infcx.extract_type_name(&return_ty),\n+        );\n \n         let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).expect(\"non-local mir\");\n "}]}