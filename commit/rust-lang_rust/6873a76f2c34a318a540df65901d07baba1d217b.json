{"sha": "6873a76f2c34a318a540df65901d07baba1d217b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzNhNzZmMmMzNGEzMThhNTQwZGY2NTkwMWQwN2JhYmExZDIxN2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-05-22T18:16:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T18:51:07Z"}, "message": "remove leak-check from project", "tree": {"sha": "6fab068655fc64551578945dad6d9697f8348a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fab068655fc64551578945dad6d9697f8348a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6873a76f2c34a318a540df65901d07baba1d217b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6873a76f2c34a318a540df65901d07baba1d217b", "html_url": "https://github.com/rust-lang/rust/commit/6873a76f2c34a318a540df65901d07baba1d217b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6873a76f2c34a318a540df65901d07baba1d217b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70cf33fccaac072a153f6e211aa907c83c465fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/70cf33fccaac072a153f6e211aa907c83c465fef", "html_url": "https://github.com/rust-lang/rust/commit/70cf33fccaac072a153f6e211aa907c83c465fef"}], "stats": {"total": 219, "additions": 132, "deletions": 87}, "files": [{"sha": "bc696214cbc66a82b532026b13562fec715ffd2c", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -149,13 +149,12 @@ pub fn poly_project_and_unify_type<'cx, 'tcx>(\n     debug!(\"poly_project_and_unify_type(obligation={:?})\", obligation);\n \n     let infcx = selcx.infcx();\n-    infcx.commit_if_ok(|snapshot| {\n+    infcx.commit_if_ok(|_snapshot| {\n         let (placeholder_predicate, _) =\n             infcx.replace_bound_vars_with_placeholders(&obligation.predicate);\n \n         let placeholder_obligation = obligation.with(placeholder_predicate);\n         let result = project_and_unify_type(selcx, &placeholder_obligation)?;\n-        infcx.leak_check(false, snapshot).map_err(|err| MismatchedProjectionTypes { err })?;\n         Ok(result)\n     })\n }"}, {"sha": "fb391913c321ecd0c71384ed633e308f76cabaa7", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -94,12 +94,14 @@ pub fn call_bar() {\n \n pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //~^ ERROR type mismatch\n+    //~^ ERROR implementation of `TheTrait` is not general enough\n+    //~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //~^ ERROR type mismatch\n+    //~^ ERROR implementation of `TheTrait` is not general enough\n+    //~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_three() {"}, {"sha": "127ab8673556d5bf1554ae11d92027176b84fff6", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -28,32 +28,72 @@ LL |     bar::<IntStruct>();\n    = note: expected reference `&usize`\n               found reference `&isize`\n \n-error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n+error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n-LL | fn tuple_one<T>()\n-   |    --------- required by a bound in this\n-LL | where\n-LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>,\n-   |                                                     ------------- required by this bound in `tuple_one`\n+LL | / pub trait TheTrait<T> {\n+LL | |     type A;\n+LL | |\n+LL | |     fn get(&self, t: T) -> Self::A;\n+LL | | }\n+   | |_- trait `TheTrait` defined here\n ...\n-LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+LL |       tuple_one::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+   |\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n-  --> $DIR/associated-types-eq-hr.rs:101:5\n+error: implementation of `TheTrait` is not general enough\n+  --> $DIR/associated-types-eq-hr.rs:96:5\n    |\n-LL | fn tuple_two<T>()\n-   |    --------- required by a bound in this\n-LL | where\n-LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n-   |                                                     ------------- required by this bound in `tuple_two`\n+LL | / pub trait TheTrait<T> {\n+LL | |     type A;\n+LL | |\n+LL | |     fn get(&self, t: T) -> Self::A;\n+LL | | }\n+   | |_- trait `TheTrait` defined here\n ...\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'y, found concrete lifetime\n+LL |       tuple_one::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+   |\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+\n+error: implementation of `TheTrait` is not general enough\n+  --> $DIR/associated-types-eq-hr.rs:102:5\n+   |\n+LL | / pub trait TheTrait<T> {\n+LL | |     type A;\n+LL | |\n+LL | |     fn get(&self, t: T) -> Self::A;\n+LL | | }\n+   | |_- trait `TheTrait` defined here\n+...\n+LL |       tuple_two::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+   |\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n+\n+error: implementation of `TheTrait` is not general enough\n+  --> $DIR/associated-types-eq-hr.rs:102:5\n+   |\n+LL | / pub trait TheTrait<T> {\n+LL | |     type A;\n+LL | |\n+LL | |     fn get(&self, t: T) -> Self::A;\n+LL | | }\n+   | |_- trait `TheTrait` defined here\n+...\n+LL |       tuple_two::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n+   |\n+   = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n+   = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:110:5\n+  --> $DIR/associated-types-eq-hr.rs:112:5\n    |\n LL | / pub trait TheTrait<T> {\n LL | |     type A;\n@@ -68,6 +108,6 @@ LL |       tuple_four::<Tuple>();\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but `Tuple` actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "811c9a8f5e12ba776e6ba237251155550f306c66", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -1,14 +1,12 @@\n-error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n+error[E0308]: mismatched types\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n-LL | fn foo<U, T>(_t: T)\n-   |    --- required by a bound in this\n-LL |     where for<'a> &'a T: Mirror<Image=U>\n-   |                                 ------- required by this bound in `foo`\n-...\n LL |     foo(());\n-   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |     ^^^ one type is more general than the other\n+   |\n+   = note: expected type `&'a ()`\n+              found type `&()`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1b5476d4c364ffcefc7612718741509047cdb59b", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -23,5 +23,5 @@ fn foo<U, T>(_t: T)\n #[rustc_error]\n fn main() { //[good]~ ERROR fatal error triggered by #[rustc_error]\n     foo(());\n-    //[bad]~^ ERROR type mismatch\n+    //[bad]~^ ERROR mismatched types\n }"}, {"sha": "e278049c8cc42d2e4a2d61ea3f1d83429dd14a18", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -7,5 +7,9 @@ fn main() {\n \n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n-    baz(f); //~ ERROR type mismatch\n+    baz(f);\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n }"}, {"sha": "664fa4bcaf3289cbb5562d004f8d76ab4a090804", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -22,16 +22,43 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              |\n    |              expected signature of `fn(&(u32, u32)) -> _`\n \n-error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n+error[E0308]: mismatched types\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |           ------------- required by this bound in `baz`\n-LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n-   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+   |     ^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n+              found type `std::ops::Fn<(*mut &'a u32,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+   |\n+LL |     baz(f);\n+   |     ^^^ one type is more general than the other\n+   |\n+   = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n+              found type `std::ops::FnOnce<(*mut &'a u32,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+   |\n+LL |     baz(f);\n+   |     ^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> std::ops::Fn<(*mut &'r u32,)>`\n+              found type `std::ops::Fn<(*mut &'a u32,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+   |\n+LL |     baz(f);\n+   |     ^^^ one type is more general than the other\n+   |\n+   = note: expected type `std::ops::FnOnce<(*mut &u32,)>`\n+              found type `std::ops::FnOnce<(*mut &'a u32,)>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0271, E0631.\n-For more information about an error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "d2b78b4b7dba57e3f2ea0b239ad6fe86e891e693", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -5,5 +5,5 @@ impl<T: Fn(&())> Foo for T {}\n fn baz<T: Foo>(_: T) {}\n \n fn main() {\n-    baz(|_| ()); //~ ERROR type mismatch\n+    baz(|_| ()); //~ ERROR mismatched types\n }"}, {"sha": "d6c17d125cf1ea681fa103714e13f5610b113dc6", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -1,14 +1,12 @@\n-error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.rs:8:9: 8:15] as std::ops::FnOnce<(&'r (),)>>::Output == ()`\n+error[E0308]: mismatched types\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n-LL | fn baz<T: Foo>(_: T) {}\n-   |           --- required by this bound in `baz`\n-...\n LL |     baz(|_| ());\n-   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+   |     ^^^ one type is more general than the other\n    |\n-   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n+   = note: expected type `for<'r> std::ops::Fn<(&'r (),)>`\n+              found type `std::ops::Fn<(&(),)>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "aa6b1c0012c933f6be3931067e83f445a7fde682", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -11,19 +11,18 @@ static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n struct SomeStruct<'x, 'y, 'z: 'x> {\n     foo: &'x Foo<'z>,\n     bar: &'x Bar<'z>,\n-    f: &'y dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Bar<'b>,\n+    f: &'y dyn for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Foo<'b>,\n }\n \n fn id<T>(t: T) -> T {\n     t\n }\n \n-static SOME_STRUCT: &SomeStruct = SomeStruct {\n-    //~^ ERROR mismatched types\n+static SOME_STRUCT: &SomeStruct = &SomeStruct {\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR type mismatch resolving\n+    //~^ ERROR mismatched types\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "2efc58ac3819c52010f89a77e2e88f4854e9607b", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -1,35 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:21:35\n-   |\n-LL |   static SOME_STRUCT: &SomeStruct = SomeStruct {\n-   |  ___________________________________^\n-LL | |\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n-LL | |\n-LL | | };\n-   | |_^ expected `&SomeStruct<'static, 'static, 'static>`, found struct `SomeStruct`\n-   |\n-help: consider borrowing here\n-   |\n-LL | static SOME_STRUCT: &SomeStruct = &SomeStruct {\n-LL |\n-LL |     foo: &Foo { bools: &[false, true] },\n-LL |     bar: &Bar { bools: &[true, true] },\n-LL |     f: &id,\n-LL |\n- ...\n-\n-error[E0271]: type mismatch resolving `for<'a, 'b> <fn(&Foo<'_>) -> &Foo<'_> {id::<&Foo<'_>>} as std::ops::FnOnce<(&'a Foo<'b>,)>>::Output == &'a Foo<'b>`\n-  --> $DIR/rfc1623.rs:25:8\n+  --> $DIR/rfc1623.rs:24:8\n    |\n LL |     f: &id,\n-   |        ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |        ^^^ one type is more general than the other\n    |\n-   = note: required for the cast to the object type `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n+   = note: expected type `std::ops::FnOnce<(&'a Foo<'b>,)>`\n+              found type `std::ops::FnOnce<(&Foo<'_>,)>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0308.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "41e019247c9426c5edbfcd33cf7ac84390a7da24", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -15,7 +15,7 @@ struct X;\n \n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n-    //~^ ERROR type mismatch resolving\n+    //~^ ERROR mismatched types\n \n     fn bar(&self) -> Self::Bar {\n         |x| x"}, {"sha": "cd637056c94add66003e178a0a50eeb2ac962b44", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6873a76f2c34a318a540df65901d07baba1d217b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=6873a76f2c34a318a540df65901d07baba1d217b", "patch": "@@ -1,11 +1,12 @@\n-error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-57611-trait-alias.rs:21:9: 21:14] as std::ops::FnOnce<(&'r X,)>>::Output == &'r X`\n+error[E0308]: mismatched types\n   --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n-   = note: the return type of a function must have a statically known size\n+   = note: expected type `std::ops::FnOnce<(&X,)>`\n+              found type `std::ops::FnOnce<(&X,)>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0308`."}]}