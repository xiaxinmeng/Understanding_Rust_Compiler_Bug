{"sha": "d8a60c9611399b1b5c9c703b975af4724b432b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YTYwYzk2MTEzOTliMWI1YzljNzAzYjk3NWFmNDcyNGI0MzJiMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-01T00:46:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-01T00:46:08Z"}, "message": "Auto merge of #46370 - michaelwoerister:rm-metadata-hashing, r=eddyb\n\nincr.comp.: Remove ability to produce incr. comp. hashes during metadata export.\n\nThis functionality has been superseded by on-import hashing, which can be less conservative and does not require extra infrastructure.\n\nr? @nikomatsakis", "tree": {"sha": "1f5ded8e350e1e2fa07209705846821317d6936e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f5ded8e350e1e2fa07209705846821317d6936e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a60c9611399b1b5c9c703b975af4724b432b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a60c9611399b1b5c9c703b975af4724b432b0d", "html_url": "https://github.com/rust-lang/rust/commit/d8a60c9611399b1b5c9c703b975af4724b432b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a60c9611399b1b5c9c703b975af4724b432b0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23032d0afa2b0e0c60a9b2ae62709f846d90007c", "url": "https://api.github.com/repos/rust-lang/rust/commits/23032d0afa2b0e0c60a9b2ae62709f846d90007c", "html_url": "https://github.com/rust-lang/rust/commit/23032d0afa2b0e0c60a9b2ae62709f846d90007c"}, {"sha": "7ebccbb7a4003e036cae61c575ac7edb871a8259", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebccbb7a4003e036cae61c575ac7edb871a8259", "html_url": "https://github.com/rust-lang/rust/commit/7ebccbb7a4003e036cae61c575ac7edb871a8259"}], "stats": {"total": 1764, "additions": 44, "deletions": 1720}, "files": [{"sha": "cbd76ee14db388963f1b076f0460550e6b210535", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -28,8 +28,6 @@ mod impls_syntax;\n \n pub const ATTR_DIRTY: &'static str = \"rustc_dirty\";\n pub const ATTR_CLEAN: &'static str = \"rustc_clean\";\n-pub const ATTR_DIRTY_METADATA: &'static str = \"rustc_metadata_dirty\";\n-pub const ATTR_CLEAN_METADATA: &'static str = \"rustc_metadata_clean\";\n pub const ATTR_IF_THIS_CHANGED: &'static str = \"rustc_if_this_changed\";\n pub const ATTR_THEN_THIS_WOULD_NEED: &'static str = \"rustc_then_this_would_need\";\n pub const ATTR_PARTITION_REUSED: &'static str = \"rustc_partition_reused\";\n@@ -41,8 +39,6 @@ pub const DEP_GRAPH_ASSERT_ATTRS: &'static [&'static str] = &[\n     ATTR_THEN_THIS_WOULD_NEED,\n     ATTR_DIRTY,\n     ATTR_CLEAN,\n-    ATTR_DIRTY_METADATA,\n-    ATTR_CLEAN_METADATA,\n     ATTR_PARTITION_REUSED,\n     ATTR_PARTITION_TRANSLATED,\n ];\n@@ -53,8 +49,6 @@ pub const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n     ATTR_THEN_THIS_WOULD_NEED,\n     ATTR_DIRTY,\n     ATTR_CLEAN,\n-    ATTR_DIRTY_METADATA,\n-    ATTR_CLEAN_METADATA,\n     ATTR_PARTITION_REUSED,\n     ATTR_PARTITION_TRANSLATED,\n ];"}, {"sha": "4be23fb711d77dbe49e711f5cfcd59feffe7eaad", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -175,32 +175,6 @@ impl EncodedMetadata {\n     }\n }\n \n-/// The hash for some metadata that (when saving) will be exported\n-/// from this crate, or which (when importing) was exported by an\n-/// upstream crate.\n-#[derive(Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n-pub struct EncodedMetadataHash {\n-    pub def_index: u32,\n-    pub hash: ich::Fingerprint,\n-}\n-\n-/// The hash for some metadata that (when saving) will be exported\n-/// from this crate, or which (when importing) was exported by an\n-/// upstream crate.\n-#[derive(Debug, RustcEncodable, RustcDecodable, Clone)]\n-pub struct EncodedMetadataHashes {\n-    // Stable content hashes for things in crate metadata, indexed by DefIndex.\n-    pub hashes: Vec<EncodedMetadataHash>,\n-}\n-\n-impl EncodedMetadataHashes {\n-    pub fn new() -> EncodedMetadataHashes {\n-        EncodedMetadataHashes {\n-            hashes: Vec::new(),\n-        }\n-    }\n-}\n-\n /// The backend's way to give the crate store access to the metadata in a library.\n /// Note that it returns the raw metadata bytes stored in the library file, whether\n /// it is compressed, uncompressed, some weird mix, etc.\n@@ -286,7 +260,7 @@ pub trait CrateStore {\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet)\n-                                 -> (EncodedMetadata, EncodedMetadataHashes);\n+                                 -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n \n@@ -370,7 +344,7 @@ impl CrateStore for DummyCrateStore {\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet)\n-                                 -> (EncodedMetadata, EncodedMetadataHashes) {\n+                                 -> EncodedMetadata {\n         bug!(\"encode_metadata\")\n     }\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }"}, {"sha": "6dade7694ab607f8334f742174b06e721ec0f4a1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -1072,8 +1072,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"enable incremental compilation (experimental)\"),\n-    incremental_cc: bool = (false, parse_bool, [UNTRACKED],\n-          \"enable cross-crate incremental compilation (even more experimental)\"),\n     incremental_queries: bool = (true, parse_bool, [UNTRACKED],\n           \"enable incremental compilation support for queries (experimental)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "385cf0ecd8512850eecc9b0eafa164787bdd995d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -24,7 +24,7 @@ use hir::map::DefPathHash;\n use lint::{self, Lint};\n use ich::{StableHashingContext, NodeIdHashingMode};\n use middle::const_val::ConstVal;\n-use middle::cstore::{CrateStore, LinkMeta, EncodedMetadataHashes};\n+use middle::cstore::{CrateStore, LinkMeta};\n use middle::cstore::EncodedMetadata;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n@@ -1242,7 +1242,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     pub fn encode_metadata(self, link_meta: &LinkMeta, reachable: &NodeSet)\n-        -> (EncodedMetadata, EncodedMetadataHashes)\n+        -> EncodedMetadata\n     {\n         self.cstore.encode_metadata(self, link_meta, reachable)\n     }"}, {"sha": "d7d142aac75ccc9add21cecdb26ef3b1815d5ce0", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -11,9 +11,6 @@\n //! The data that we will serialize and deserialize.\n \n use rustc::dep_graph::{WorkProduct, WorkProductId};\n-use rustc::hir::map::DefPathHash;\n-use rustc::middle::cstore::EncodedMetadataHash;\n-use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct SerializedWorkProduct {\n@@ -23,39 +20,3 @@ pub struct SerializedWorkProduct {\n     /// work-product data itself\n     pub work_product: WorkProduct,\n }\n-\n-/// Data for use when downstream crates get recompiled.\n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n-pub struct SerializedMetadataHashes {\n-    /// For each def-id defined in this crate that appears in the\n-    /// metadata, we hash all the inputs that were used when producing\n-    /// the metadata. We save this after compilation is done. Then,\n-    /// when some downstream crate is being recompiled, it can compare\n-    /// the hashes we saved against the hashes that it saw from\n-    /// before; this will tell it which of the items in this crate\n-    /// changed, which in turn implies what items in the downstream\n-    /// crate need to be recompiled.\n-    ///\n-    /// Note that we store the def-ids here. This is because we don't\n-    /// reload this file when we recompile this crate, we will just\n-    /// regenerate it completely with the current hashes and new def-ids.\n-    ///\n-    /// Then downstream creates will load up their\n-    /// `SerializedDepGraph`, which may contain `MetaData(X)` nodes\n-    /// where `X` refers to some item in this crate. That `X` will be\n-    /// a `DefPathIndex` that gets retracted to the current `DefId`\n-    /// (matching the one found in this structure).\n-    pub entry_hashes: Vec<EncodedMetadataHash>,\n-\n-    /// For each DefIndex (as it occurs in SerializedMetadataHash), this\n-    /// map stores the DefPathIndex (as it occurs in DefIdDirectory), so\n-    /// that we can find the new DefId for a SerializedMetadataHash in a\n-    /// subsequent compilation session.\n-    ///\n-    /// This map is only needed for running auto-tests using the\n-    /// #[rustc_metadata_dirty] and #[rustc_metadata_clean] attributes, and\n-    /// is only populated if -Z query-dep-graph is specified. It will be\n-    /// empty otherwise. Importing crates are perfectly happy with just having\n-    /// the DefIndex.\n-    pub index_map: FxHashMap<u32, DefPathHash>\n-}"}, {"sha": "7c3f903f22846fc7d775b6488b4fd7cf1940290e", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 170, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -23,21 +23,6 @@\n //! Errors are reported if we are in the suitable configuration but\n //! the required condition is not met.\n //!\n-//! The `#[rustc_metadata_dirty]` and `#[rustc_metadata_clean]` attributes\n-//! can be used to check the incremental compilation hash (ICH) values of\n-//! metadata exported in rlibs.\n-//!\n-//! - If a node is marked with `#[rustc_metadata_clean(cfg=\"rev2\")]` we\n-//!   check that the metadata hash for that node is the same for \"rev2\"\n-//!   it was for \"rev1\".\n-//! - If a node is marked with `#[rustc_metadata_dirty(cfg=\"rev2\")]` we\n-//!   check that the metadata hash for that node is *different* for \"rev2\"\n-//!   than it was for \"rev1\".\n-//!\n-//! Note that the metadata-testing attributes must never specify the\n-//! first revision. This would lead to a crash since there is no\n-//! previous revision to compare things to.\n-//!\n \n use std::collections::HashSet;\n use std::iter::FromIterator;\n@@ -49,10 +34,9 @@ use rustc::hir::map::Node as HirNode;\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit;\n-use rustc::ich::{Fingerprint, ATTR_DIRTY, ATTR_CLEAN, ATTR_DIRTY_METADATA,\n-                 ATTR_CLEAN_METADATA};\n+use rustc::ich::{ATTR_DIRTY, ATTR_CLEAN};\n use syntax::ast::{self, Attribute, NestedMetaItem};\n-use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n+use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::Span;\n use rustc::ty::TyCtxt;\n \n@@ -553,157 +537,6 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_dirty_clean_metadata<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    prev_metadata_hashes: &FxHashMap<DefId, Fingerprint>,\n-    current_metadata_hashes: &FxHashMap<DefId, Fingerprint>)\n-{\n-    if !tcx.sess.opts.debugging_opts.query_dep_graph {\n-        return;\n-    }\n-\n-    tcx.dep_graph.with_ignore(||{\n-        let krate = tcx.hir.krate();\n-        let mut dirty_clean_visitor = DirtyCleanMetadataVisitor {\n-            tcx,\n-            prev_metadata_hashes,\n-            current_metadata_hashes,\n-            checked_attrs: FxHashSet(),\n-        };\n-        intravisit::walk_crate(&mut dirty_clean_visitor, krate);\n-\n-        let mut all_attrs = FindAllAttrs {\n-            tcx,\n-            attr_names: vec![ATTR_DIRTY_METADATA, ATTR_CLEAN_METADATA],\n-            found_attrs: vec![],\n-        };\n-        intravisit::walk_crate(&mut all_attrs, krate);\n-\n-        // Note that we cannot use the existing \"unused attribute\"-infrastructure\n-        // here, since that is running before trans. This is also the reason why\n-        // all trans-specific attributes are `Whitelisted` in syntax::feature_gate.\n-        all_attrs.report_unchecked_attrs(&dirty_clean_visitor.checked_attrs);\n-    });\n-}\n-\n-pub struct DirtyCleanMetadataVisitor<'a, 'tcx: 'a, 'm> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    prev_metadata_hashes: &'m FxHashMap<DefId, Fingerprint>,\n-    current_metadata_hashes: &'m FxHashMap<DefId, Fingerprint>,\n-    checked_attrs: FxHashSet<ast::AttrId>,\n-}\n-\n-impl<'a, 'tcx, 'm> intravisit::Visitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n-\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-        intravisit::NestedVisitorMap::All(&self.tcx.hir)\n-    }\n-\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        self.check_item(item.id, item.span);\n-        intravisit::walk_item(self, item);\n-    }\n-\n-    fn visit_variant(&mut self,\n-                     variant: &'tcx hir::Variant,\n-                     generics: &'tcx hir::Generics,\n-                     parent_id: ast::NodeId) {\n-        if let Some(e) = variant.node.disr_expr {\n-            self.check_item(e.node_id, variant.span);\n-        }\n-\n-        intravisit::walk_variant(self, variant, generics, parent_id);\n-    }\n-\n-    fn visit_variant_data(&mut self,\n-                          variant_data: &'tcx hir::VariantData,\n-                          _: ast::Name,\n-                          _: &'tcx hir::Generics,\n-                          _parent_id: ast::NodeId,\n-                          span: Span) {\n-        if self.tcx.hir.find(variant_data.id()).is_some() {\n-            // VariantData that represent structs or tuples don't have a\n-            // separate entry in the HIR map and checking them would error,\n-            // so only check if this is an enum or union variant.\n-            self.check_item(variant_data.id(), span);\n-        }\n-\n-        intravisit::walk_struct_def(self, variant_data);\n-    }\n-\n-    fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n-        self.check_item(item.id, item.span);\n-        intravisit::walk_trait_item(self, item);\n-    }\n-\n-    fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem) {\n-        self.check_item(item.id, item.span);\n-        intravisit::walk_impl_item(self, item);\n-    }\n-\n-    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) {\n-        self.check_item(i.id, i.span);\n-        intravisit::walk_foreign_item(self, i);\n-    }\n-\n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n-        self.check_item(s.id, s.span);\n-        intravisit::walk_struct_field(self, s);\n-    }\n-}\n-\n-impl<'a, 'tcx, 'm> DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n-\n-    fn check_item(&mut self, item_id: ast::NodeId, item_span: Span) {\n-        let def_id = self.tcx.hir.local_def_id(item_id);\n-\n-        for attr in self.tcx.get_attrs(def_id).iter() {\n-            if attr.check_name(ATTR_DIRTY_METADATA) {\n-                if check_config(self.tcx, attr) {\n-                    if self.checked_attrs.insert(attr.id) {\n-                        self.assert_state(false, def_id, item_span);\n-                    }\n-                }\n-            } else if attr.check_name(ATTR_CLEAN_METADATA) {\n-                if check_config(self.tcx, attr) {\n-                    if self.checked_attrs.insert(attr.id) {\n-                        self.assert_state(true, def_id, item_span);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn assert_state(&self, should_be_clean: bool, def_id: DefId, span: Span) {\n-        let item_path = self.tcx.item_path_str(def_id);\n-        debug!(\"assert_state({})\", item_path);\n-\n-        if let Some(&prev_hash) = self.prev_metadata_hashes.get(&def_id) {\n-            let hashes_are_equal = prev_hash == self.current_metadata_hashes[&def_id];\n-\n-            if should_be_clean && !hashes_are_equal {\n-                self.tcx.sess.span_err(\n-                        span,\n-                        &format!(\"Metadata hash of `{}` is dirty, but should be clean\",\n-                                 item_path));\n-            }\n-\n-            let should_be_dirty = !should_be_clean;\n-            if should_be_dirty && hashes_are_equal {\n-                self.tcx.sess.span_err(\n-                        span,\n-                        &format!(\"Metadata hash of `{}` is clean, but should be dirty\",\n-                                 item_path));\n-            }\n-        } else {\n-            self.tcx.sess.span_err(\n-                        span,\n-                        &format!(\"Could not find previous metadata hash of `{}`\",\n-                                 item_path));\n-        }\n-    }\n-}\n-\n /// Given a `#[rustc_dirty]` or `#[rustc_clean]` attribute, scan\n /// for a `cfg=\"foo\"` attribute and check whether we have a cfg\n /// flag called `foo`.\n@@ -759,7 +592,6 @@ fn expect_associated_value(tcx: TyCtxt, item: &NestedMetaItem) -> ast::Name {\n     }\n }\n \n-\n // A visitor that collects all #[rustc_dirty]/#[rustc_clean] attributes from\n // the HIR. It is used to verfiy that we really ran checks for all annotated\n // nodes."}, {"sha": "2a8cfb7e91d71d2f41d4babbbfc24ce5bd0be8f8", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -131,7 +131,6 @@ use rand::{thread_rng, Rng};\n const LOCK_FILE_EXT: &'static str = \".lock\";\n const DEP_GRAPH_FILENAME: &'static str = \"dep-graph.bin\";\n const WORK_PRODUCTS_FILENAME: &'static str = \"work-products.bin\";\n-const METADATA_HASHES_FILENAME: &'static str = \"metadata.bin\";\n const QUERY_CACHE_FILENAME: &'static str = \"query-cache.bin\";\n \n // We encode integers using the following base, so they are shorter than decimal\n@@ -148,10 +147,6 @@ pub fn work_products_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, WORK_PRODUCTS_FILENAME)\n }\n \n-pub fn metadata_hash_export_path(sess: &Session) -> PathBuf {\n-    in_incr_comp_dir_sess(sess, METADATA_HASHES_FILENAME)\n-}\n-\n pub fn query_cache_path(sess: &Session) -> PathBuf {\n     in_incr_comp_dir_sess(sess, QUERY_CACHE_FILENAME)\n }"}, {"sha": "5907f00e3dc483285f34a3a158012d0ea0c490c8", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -11,12 +11,9 @@\n //! Code to save/load the dep-graph from files.\n \n use rustc::dep_graph::{PreviousDepGraph, SerializedDepGraph};\n-use rustc::hir::svh::Svh;\n-use rustc::ich::Fingerprint;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::OnDiskCache;\n-use rustc::util::nodemap::DefIdMap;\n use rustc_serialize::Decodable as RustcDecodable;\n use rustc_serialize::opaque::Decoder;\n use std::path::Path;\n@@ -106,64 +103,6 @@ fn delete_dirty_work_product(tcx: TyCtxt,\n     work_product::delete_workproduct_files(tcx.sess, &swp.work_product);\n }\n \n-pub fn load_prev_metadata_hashes(tcx: TyCtxt) -> DefIdMap<Fingerprint> {\n-    let mut output = DefIdMap();\n-\n-    if !tcx.sess.opts.debugging_opts.query_dep_graph {\n-        // Previous metadata hashes are only needed for testing.\n-        return output\n-    }\n-\n-    debug!(\"load_prev_metadata_hashes() - Loading previous metadata hashes\");\n-\n-    let file_path = metadata_hash_export_path(tcx.sess);\n-\n-    if !file_path.exists() {\n-        debug!(\"load_prev_metadata_hashes() - Couldn't find file containing \\\n-                hashes at `{}`\", file_path.display());\n-        return output\n-    }\n-\n-    debug!(\"load_prev_metadata_hashes() - File: {}\", file_path.display());\n-\n-    let (data, start_pos) = match file_format::read_file(tcx.sess, &file_path) {\n-        Ok(Some(data_and_pos)) => data_and_pos,\n-        Ok(None) => {\n-            debug!(\"load_prev_metadata_hashes() - File produced by incompatible \\\n-                    compiler version: {}\", file_path.display());\n-            return output\n-        }\n-        Err(err) => {\n-            debug!(\"load_prev_metadata_hashes() - Error reading file `{}`: {}\",\n-                   file_path.display(), err);\n-            return output\n-        }\n-    };\n-\n-    debug!(\"load_prev_metadata_hashes() - Decoding hashes\");\n-    let mut decoder = Decoder::new(&data, start_pos);\n-    let _ = Svh::decode(&mut decoder).unwrap();\n-    let serialized_hashes = SerializedMetadataHashes::decode(&mut decoder).unwrap();\n-\n-    debug!(\"load_prev_metadata_hashes() - Mapping DefIds\");\n-\n-    assert_eq!(serialized_hashes.index_map.len(), serialized_hashes.entry_hashes.len());\n-    let def_path_hash_to_def_id = tcx.def_path_hash_to_def_id.as_ref().unwrap();\n-\n-    for serialized_hash in serialized_hashes.entry_hashes {\n-        let def_path_hash = serialized_hashes.index_map[&serialized_hash.def_index];\n-        if let Some(&def_id) = def_path_hash_to_def_id.get(&def_path_hash) {\n-            let old = output.insert(def_id, serialized_hash.hash);\n-            assert!(old.is_none(), \"already have hash for {:?}\", def_id);\n-        }\n-    }\n-\n-    debug!(\"load_prev_metadata_hashes() - successfully loaded {} hashes\",\n-           serialized_hashes.index_map.len());\n-\n-    output\n-}\n-\n pub fn load_dep_graph(sess: &Session) -> PreviousDepGraph {\n     let empty = PreviousDepGraph::new(SerializedDepGraph::new());\n "}, {"sha": "6eaa14a50f40f84683515cd073a8ec332a625c6f", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 71, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -9,14 +9,9 @@\n // except according to those terms.\n \n use rustc::dep_graph::{DepGraph, DepKind};\n-use rustc::hir::def_id::{DefId, DefIndex};\n-use rustc::hir::svh::Svh;\n-use rustc::ich::Fingerprint;\n-use rustc::middle::cstore::EncodedMetadataHashes;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::util::common::time;\n-use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n@@ -30,39 +25,14 @@ use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n \n-use super::load::load_prev_metadata_hashes;\n-\n-pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                metadata_hashes: &EncodedMetadataHashes,\n-                                svh: Svh) {\n+pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     debug!(\"save_dep_graph()\");\n     let _ignore = tcx.dep_graph.in_ignore();\n     let sess = tcx.sess;\n     if sess.opts.incremental.is_none() {\n         return;\n     }\n \n-    // We load the previous metadata hashes now before overwriting the file\n-    // (if we need them for testing).\n-    let prev_metadata_hashes = if tcx.sess.opts.debugging_opts.query_dep_graph {\n-        load_prev_metadata_hashes(tcx)\n-    } else {\n-        DefIdMap()\n-    };\n-\n-    let mut current_metadata_hashes = FxHashMap();\n-\n-    if sess.opts.debugging_opts.incremental_cc ||\n-       sess.opts.debugging_opts.query_dep_graph {\n-        save_in(sess,\n-                metadata_hash_export_path(sess),\n-                |e| encode_metadata_hashes(tcx,\n-                                           svh,\n-                                           metadata_hashes,\n-                                           &mut current_metadata_hashes,\n-                                           e));\n-    }\n-\n     time(sess.time_passes(), \"persist query result cache\", || {\n         save_in(sess,\n                 query_cache_path(sess),\n@@ -78,9 +48,6 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     dirty_clean::check_dirty_clean_annotations(tcx);\n-    dirty_clean::check_dirty_clean_metadata(tcx,\n-                                            &prev_metadata_hashes,\n-                                            &current_metadata_hashes);\n }\n \n pub fn save_work_products(sess: &Session, dep_graph: &DepGraph) {\n@@ -258,43 +225,6 @@ fn encode_dep_graph(tcx: TyCtxt,\n     Ok(())\n }\n \n-fn encode_metadata_hashes(tcx: TyCtxt,\n-                          svh: Svh,\n-                          metadata_hashes: &EncodedMetadataHashes,\n-                          current_metadata_hashes: &mut FxHashMap<DefId, Fingerprint>,\n-                          encoder: &mut Encoder)\n-                          -> io::Result<()> {\n-    assert_eq!(metadata_hashes.hashes.len(),\n-        metadata_hashes.hashes.iter().map(|x| (x.def_index, ())).collect::<FxHashMap<_,_>>().len());\n-\n-    let mut serialized_hashes = SerializedMetadataHashes {\n-        entry_hashes: metadata_hashes.hashes.to_vec(),\n-        index_map: FxHashMap()\n-    };\n-\n-    if tcx.sess.opts.debugging_opts.query_dep_graph {\n-        for serialized_hash in &serialized_hashes.entry_hashes {\n-            let def_id = DefId::local(DefIndex::from_u32(serialized_hash.def_index));\n-\n-            // Store entry in the index_map\n-            let def_path_hash = tcx.def_path_hash(def_id);\n-            serialized_hashes.index_map.insert(def_id.index.as_u32(), def_path_hash);\n-\n-            // Record hash in current_metadata_hashes\n-            current_metadata_hashes.insert(def_id, serialized_hash.hash);\n-        }\n-\n-        debug!(\"save: stored index_map (len={}) for serialized hashes\",\n-               serialized_hashes.index_map.len());\n-    }\n-\n-    // Encode everything.\n-    svh.encode(encoder)?;\n-    serialized_hashes.encode(encoder)?;\n-\n-    Ok(())\n-}\n-\n fn encode_work_products(dep_graph: &DepGraph,\n                         encoder: &mut Encoder) -> io::Result<()> {\n     let work_products: Vec<_> = dep_graph"}, {"sha": "911b4dac4e13a69ea6068647990dece9517c57ed", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -17,8 +17,7 @@ use schema;\n use rustc::ty::maps::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n                             MetadataLoader, LinkMeta,\n-                            LoadedMacro, EncodedMetadata,\n-                            EncodedMetadataHashes, NativeLibraryKind};\n+                            LoadedMacro, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::stability::DeprecationEntry;\n use rustc::hir::def;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -498,7 +497,7 @@ impl CrateStore for cstore::CStore {\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet)\n-                                 -> (EncodedMetadata, EncodedMetadataHashes)\n+                                 -> EncodedMetadata\n     {\n         encoder::encode_metadata(tcx, link_meta, reachable)\n     }"}, {"sha": "6cfa324797c5d22ce84844700c9d873da3fd53c8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 58, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -14,12 +14,10 @@ use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n-                            EncodedMetadata, EncodedMetadataHashes,\n-                            EncodedMetadataHash};\n+                            EncodedMetadata};\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LOCAL_CRATE};\n-use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n-use rustc::ich::Fingerprint;\n+use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -57,9 +55,6 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n-\n-    pub metadata_hashes: EncodedMetadataHashes,\n-    pub compute_ich: bool,\n }\n \n macro_rules! encoder_methods {\n@@ -239,22 +234,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     // Encodes something that corresponds to a single DepNode::GlobalMetaData\n     // and registers the Fingerprint in the `metadata_hashes` map.\n     pub fn tracked<'x, DATA, R>(&'x mut self,\n-                                def_index: DefIndex,\n                                 op: fn(&mut IsolatedEncoder<'x, 'a, 'tcx>, DATA) -> R,\n                                 data: DATA)\n                                 -> R {\n-        let mut entry_builder = IsolatedEncoder::new(self);\n-        let ret = op(&mut entry_builder, data);\n-        let (fingerprint, this) = entry_builder.finish();\n-\n-        if let Some(fingerprint) = fingerprint {\n-            this.metadata_hashes.hashes.push(EncodedMetadataHash {\n-                def_index: def_index.as_u32(),\n-                hash: fingerprint,\n-            })\n-        }\n-\n-        ret\n+        op(&mut IsolatedEncoder::new(self), data)\n     }\n \n     fn encode_info_for_items(&mut self) -> Index {\n@@ -320,38 +303,23 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_crate_root(&mut self) -> Lazy<CrateRoot> {\n         let mut i = self.position();\n \n-        let tcx = self.tcx;\n-        let global_metadata_def_index = move |kind: GlobalMetaDataKind| {\n-            kind.def_index(tcx.hir.definitions().def_path_table())\n-        };\n-\n-        let crate_deps = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::CrateDeps),\n-            IsolatedEncoder::encode_crate_deps,\n-            ());\n+        let crate_deps = self.tracked(IsolatedEncoder::encode_crate_deps, ());\n         let dylib_dependency_formats = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::DylibDependencyFormats),\n             IsolatedEncoder::encode_dylib_dependency_formats,\n             ());\n         let dep_bytes = self.position() - i;\n \n         // Encode the language items.\n         i = self.position();\n-        let lang_items = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::LangItems),\n-            IsolatedEncoder::encode_lang_items,\n-            ());\n-\n+        let lang_items = self.tracked(IsolatedEncoder::encode_lang_items, ());\n         let lang_items_missing = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::LangItemsMissing),\n             IsolatedEncoder::encode_lang_items_missing,\n             ());\n         let lang_item_bytes = self.position() - i;\n \n         // Encode the native libraries used\n         i = self.position();\n         let native_libraries = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::NativeLibraries),\n             IsolatedEncoder::encode_native_libraries,\n             ());\n         let native_lib_bytes = self.position() - i;\n@@ -368,16 +336,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // Encode the def IDs of impls, for coherence checking.\n         i = self.position();\n-        let impls = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::Impls),\n-            IsolatedEncoder::encode_impls,\n-            ());\n+        let impls = self.tracked(IsolatedEncoder::encode_impls, ());\n         let impl_bytes = self.position() - i;\n \n         // Encode exported symbols info.\n         i = self.position();\n         let exported_symbols = self.tracked(\n-            global_metadata_def_index(GlobalMetaDataKind::ExportedSymbols),\n             IsolatedEncoder::encode_exported_symbols,\n             self.exported_symbols);\n         let exported_symbols_bytes = self.position() - i;\n@@ -430,11 +394,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let total_bytes = self.position();\n \n-        self.metadata_hashes.hashes.push(EncodedMetadataHash {\n-            def_index: global_metadata_def_index(GlobalMetaDataKind::Krate).as_u32(),\n-            hash: Fingerprint::from_smaller_hash(link_meta.crate_hash.as_u64())\n-        });\n-\n         if self.tcx.sess.meta_stats() {\n             let mut zero_bytes = 0;\n             for e in self.opaque.cursor.get_ref() {\n@@ -1663,19 +1622,15 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  exported_symbols: &NodeSet)\n-                                 -> (EncodedMetadata, EncodedMetadataHashes)\n+                                 -> EncodedMetadata\n {\n     let mut cursor = Cursor::new(vec![]);\n     cursor.write_all(METADATA_HEADER).unwrap();\n \n     // Will be filled with the root position after encoding everything.\n     cursor.write_all(&[0, 0, 0, 0]).unwrap();\n \n-     let compute_ich = (tcx.sess.opts.debugging_opts.query_dep_graph ||\n-                        tcx.sess.opts.debugging_opts.incremental_cc) &&\n-                        tcx.sess.opts.build_dep_graph();\n-\n-    let (root, metadata_hashes) = {\n+    let root = {\n         let mut ecx = EncodeContext {\n             opaque: opaque::Encoder::new(&mut cursor),\n             tcx,\n@@ -1684,17 +1639,14 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),\n-            metadata_hashes: EncodedMetadataHashes::new(),\n-            compute_ich,\n         };\n \n         // Encode the rustc version string in a predictable location.\n         rustc_version().encode(&mut ecx).unwrap();\n \n         // Encode all the entries and extra information in the crate,\n         // culminating in the `CrateRoot` which points to all of it.\n-        let root = ecx.encode_crate_root();\n-        (root, ecx.metadata_hashes)\n+        ecx.encode_crate_root()\n     };\n     let mut result = cursor.into_inner();\n \n@@ -1706,7 +1658,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     result[header + 2] = (pos >> 8) as u8;\n     result[header + 3] = (pos >> 0) as u8;\n \n-    (EncodedMetadata { raw_data: result }, metadata_hashes)\n+    EncodedMetadata { raw_data: result }\n }\n \n pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {"}, {"sha": "f218268914300d6e98b122b10f69e6c58f651fbe", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -62,7 +62,6 @@ use isolated_encoder::IsolatedEncoder;\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::cstore::EncodedMetadataHash;\n use rustc::ty::TyCtxt;\n use syntax::ast;\n \n@@ -128,19 +127,10 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n         // unclear whether that would be a win since hashing is cheap enough.\n         let _task = tcx.dep_graph.in_ignore();\n \n-        let ecx: &'x mut EncodeContext<'b, 'tcx> = &mut *self.ecx;\n-        let mut entry_builder = IsolatedEncoder::new(ecx);\n+        let mut entry_builder = IsolatedEncoder::new(self.ecx);\n         let entry = op(&mut entry_builder, data);\n         let entry = entry_builder.lazy(&entry);\n \n-        let (fingerprint, ecx) = entry_builder.finish();\n-        if let Some(hash) = fingerprint {\n-            ecx.metadata_hashes.hashes.push(EncodedMetadataHash {\n-                def_index: id.index.as_u32(),\n-                hash,\n-            });\n-        }\n-\n         self.items.record(id, entry);\n     }\n "}, {"sha": "689c190966ee8214bc4fe827f04fa55e9eabb0d0", "filename": "src/librustc_metadata/isolated_encoder.rs", "status": "modified", "additions": 7, "deletions": 113, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_metadata%2Fisolated_encoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fisolated_encoder.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -10,161 +10,55 @@\n \n use encoder::EncodeContext;\n use schema::{Lazy, LazySeq};\n-\n-use rustc::ich::{StableHashingContext, Fingerprint};\n use rustc::ty::TyCtxt;\n-\n-use rustc_data_structures::accumulate_vec::AccumulateVec;\n-use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use rustc_serialize::Encodable;\n \n /// The IsolatedEncoder provides facilities to write to crate metadata while\n /// making sure that anything going through it is also feed into an ICH hasher.\n pub struct IsolatedEncoder<'a, 'b: 'a, 'tcx: 'b> {\n     pub tcx: TyCtxt<'b, 'tcx, 'tcx>,\n     ecx: &'a mut EncodeContext<'b, 'tcx>,\n-    hcx: Option<(StableHashingContext<'tcx>, StableHasher<Fingerprint>)>,\n }\n \n impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n     pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self {\n         let tcx = ecx.tcx;\n-        let compute_ich = ecx.compute_ich;\n         IsolatedEncoder {\n             tcx,\n             ecx,\n-            hcx: if compute_ich {\n-                // We are always hashing spans for things in metadata because\n-                // don't know if a downstream crate will use them or not.\n-                // Except when -Zquery-dep-graph is specified because we don't\n-                // want to mess up our tests.\n-                let hcx = if tcx.sess.opts.debugging_opts.query_dep_graph {\n-                    tcx.create_stable_hashing_context()\n-                } else {\n-                    tcx.create_stable_hashing_context().force_span_hashing()\n-                };\n-\n-                Some((hcx, StableHasher::new()))\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-\n-    pub fn finish(self) -> (Option<Fingerprint>, &'a mut EncodeContext<'b, 'tcx>) {\n-        if let Some((_, hasher)) = self.hcx {\n-            (Some(hasher.finish()), self.ecx)\n-        } else {\n-            (None, self.ecx)\n         }\n     }\n \n     pub fn lazy<T>(&mut self, value: &T) -> Lazy<T>\n-        where T: Encodable + HashStable<StableHashingContext<'tcx>>\n+        where T: Encodable\n     {\n-        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n-            value.hash_stable(hcx, hasher);\n-            debug!(\"metadata-hash: {:?}\", hasher);\n-        }\n         self.ecx.lazy(value)\n     }\n \n     pub fn lazy_seq<I, T>(&mut self, iter: I) -> LazySeq<T>\n         where I: IntoIterator<Item = T>,\n-              T: Encodable + HashStable<StableHashingContext<'tcx>>\n+              T: Encodable\n     {\n-        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n-            let iter = iter.into_iter();\n-            let (lower_bound, upper_bound) = iter.size_hint();\n-\n-            if upper_bound == Some(lower_bound) {\n-                lower_bound.hash_stable(hcx, hasher);\n-                let mut num_items_hashed = 0;\n-                let ret = self.ecx.lazy_seq(iter.inspect(|item| {\n-                    item.hash_stable(hcx, hasher);\n-                    num_items_hashed += 1;\n-                }));\n-\n-                // Sometimes items in a sequence are filtered out without being\n-                // hashed (e.g. for &[ast::Attribute]) and this code path cannot\n-                // handle that correctly, so we want to make sure we didn't hit\n-                // it by accident.\n-                if lower_bound != num_items_hashed {\n-                    bug!(\"Hashed a different number of items ({}) than expected ({})\",\n-                         num_items_hashed,\n-                         lower_bound);\n-                }\n-                debug!(\"metadata-hash: {:?}\", hasher);\n-                ret\n-            } else {\n-                // Collect into a vec so we know the length of the sequence\n-                let items: AccumulateVec<[T; 32]> = iter.collect();\n-                items.hash_stable(hcx, hasher);\n-                debug!(\"metadata-hash: {:?}\", hasher);\n-                self.ecx.lazy_seq(items)\n-            }\n-        } else {\n-            self.ecx.lazy_seq(iter)\n-        }\n+        self.ecx.lazy_seq(iter)\n     }\n \n     pub fn lazy_seq_ref<'x, I, T>(&mut self, iter: I) -> LazySeq<T>\n         where I: IntoIterator<Item = &'x T>,\n-              T: 'x + Encodable + HashStable<StableHashingContext<'tcx>>\n+              T: 'x + Encodable\n     {\n-        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n-            let iter = iter.into_iter();\n-            let (lower_bound, upper_bound) = iter.size_hint();\n-\n-            if upper_bound == Some(lower_bound) {\n-                lower_bound.hash_stable(hcx, hasher);\n-                let mut num_items_hashed = 0;\n-                let ret = self.ecx.lazy_seq_ref(iter.inspect(|item| {\n-                    item.hash_stable(hcx, hasher);\n-                    num_items_hashed += 1;\n-                }));\n-\n-                // Sometimes items in a sequence are filtered out without being\n-                // hashed (e.g. for &[ast::Attribute]) and this code path cannot\n-                // handle that correctly, so we want to make sure we didn't hit\n-                // it by accident.\n-                if lower_bound != num_items_hashed {\n-                    bug!(\"Hashed a different number of items ({}) than expected ({})\",\n-                         num_items_hashed,\n-                         lower_bound);\n-                }\n-                debug!(\"metadata-hash: {:?}\", hasher);\n-                ret\n-            } else {\n-                // Collect into a vec so we know the length of the sequence\n-                let items: AccumulateVec<[&'x T; 32]> = iter.collect();\n-                items.hash_stable(hcx, hasher);\n-                debug!(\"metadata-hash: {:?}\", hasher);\n-                self.ecx.lazy_seq_ref(items.iter().map(|x| *x))\n-            }\n-        } else {\n-            self.ecx.lazy_seq_ref(iter)\n-        }\n+        self.ecx.lazy_seq_ref(iter)\n     }\n \n     pub fn lazy_seq_from_slice<T>(&mut self, slice: &[T]) -> LazySeq<T>\n-        where T: Encodable + HashStable<StableHashingContext<'tcx>>\n+        where T: Encodable\n     {\n-        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n-            slice.hash_stable(hcx, hasher);\n-            debug!(\"metadata-hash: {:?}\", hasher);\n-        }\n         self.ecx.lazy_seq_ref(slice.iter())\n     }\n \n     pub fn lazy_seq_ref_from_slice<T>(&mut self, slice: &[&T]) -> LazySeq<T>\n-        where T: Encodable + HashStable<StableHashingContext<'tcx>>\n+        where T: Encodable\n     {\n-        if let Some((ref mut hcx, ref mut hasher)) = self.hcx {\n-            slice.hash_stable(hcx, hasher);\n-            debug!(\"metadata-hash: {:?}\", hasher);\n-        }\n         self.ecx.lazy_seq_ref(slice.iter().map(|x| *x))\n     }\n }"}, {"sha": "62738222a8c010d0f455aba10adcbecd1776bfba", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -39,7 +39,7 @@ use metadata;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::middle::trans::{Linkage, Visibility, Stats};\n-use rustc::middle::cstore::{EncodedMetadata, EncodedMetadataHashes};\n+use rustc::middle::cstore::EncodedMetadata;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n use rustc::ty::maps::Providers;\n@@ -602,8 +602,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                             llmod_id: &str,\n                             link_meta: &LinkMeta,\n                             exported_symbols: &NodeSet)\n-                            -> (ContextRef, ModuleRef,\n-                                EncodedMetadata, EncodedMetadataHashes) {\n+                            -> (ContextRef, ModuleRef, EncodedMetadata) {\n     use std::io::Write;\n     use flate2::Compression;\n     use flate2::write::DeflateEncoder;\n@@ -635,13 +634,12 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     if kind == MetadataKind::None {\n         return (metadata_llcx,\n                 metadata_llmod,\n-                EncodedMetadata::new(),\n-                EncodedMetadataHashes::new());\n+                EncodedMetadata::new());\n     }\n \n-    let (metadata, hashes) = tcx.encode_metadata(link_meta, exported_symbols);\n+    let metadata = tcx.encode_metadata(link_meta, exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n-        return (metadata_llcx, metadata_llmod, metadata, hashes);\n+        return (metadata_llcx, metadata_llmod, metadata);\n     }\n \n     assert!(kind == MetadataKind::Compressed);\n@@ -669,7 +667,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n         let directive = CString::new(directive).unwrap();\n         llvm::LLVMSetModuleInlineAsm(metadata_llmod, directive.as_ptr())\n     }\n-    return (metadata_llcx, metadata_llmod, metadata, hashes);\n+    return (metadata_llcx, metadata_llmod, metadata);\n }\n \n pub struct ValueIter {\n@@ -720,7 +718,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let shared_ccx = SharedCrateContext::new(tcx);\n     // Translate the metadata.\n     let llmod_id = \"metadata\";\n-    let (metadata_llcx, metadata_llmod, metadata, metadata_incr_hashes) =\n+    let (metadata_llcx, metadata_llmod, metadata) =\n         time(tcx.sess.time_passes(), \"write metadata\", || {\n             write_metadata(tcx, llmod_id, &link_meta, &exported_symbol_node_ids)\n         });\n@@ -756,9 +754,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ongoing_translation.submit_pre_translated_module_to_llvm(tcx, metadata_module);\n         ongoing_translation.translation_finished(tcx);\n \n-        assert_and_save_dep_graph(tcx,\n-                                  metadata_incr_hashes,\n-                                  link_meta);\n+        assert_and_save_dep_graph(tcx);\n \n         ongoing_translation.check_for_errors(tcx.sess);\n \n@@ -932,24 +928,18 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     ongoing_translation.check_for_errors(tcx.sess);\n \n-    assert_and_save_dep_graph(tcx,\n-                              metadata_incr_hashes,\n-                              link_meta);\n+    assert_and_save_dep_graph(tcx);\n     ongoing_translation\n }\n \n-fn assert_and_save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                       metadata_incr_hashes: EncodedMetadataHashes,\n-                                       link_meta: LinkMeta) {\n+fn assert_and_save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     time(tcx.sess.time_passes(),\n          \"assert dep graph\",\n          || rustc_incremental::assert_dep_graph(tcx));\n \n     time(tcx.sess.time_passes(),\n          \"serialize dep graph\",\n-         || rustc_incremental::save_dep_graph(tcx,\n-                                              &metadata_incr_hashes,\n-                                              link_meta.crate_hash));\n+         || rustc_incremental::save_dep_graph(tcx));\n }\n \n #[inline(never)] // give this a place in the profiler"}, {"sha": "645898601614b33f907dfe941b9eb60fcc96e9d7", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -201,7 +201,7 @@ impl TransCrate for MetadataOnlyTransCrate {\n                         .fingerprint_of(&DepNode::new_no_params(DepKind::Krate));\n         let link_meta = build_link_meta(crate_hash);\n         let exported_symbols = ::find_exported_symbols(tcx);\n-        let (metadata, _hashes) = tcx.encode_metadata(&link_meta, &exported_symbols);\n+        let metadata = tcx.encode_metadata(&link_meta, &exported_symbols);\n \n         OngoingCrateTranslation {\n             metadata: metadata,"}, {"sha": "80be2a85e5261473ec807f0f2164e6af80701fcc", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -742,18 +742,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_metadata_dirty\", Whitelisted, Gated(Stability::Unstable,\n-                                                \"rustc_attrs\",\n-                                                \"the `#[rustc_metadata_dirty]` attribute \\\n-                                                 is just used for rustc unit tests \\\n-                                                 and will never be stable\",\n-                                                 cfg_fn!(rustc_attrs))),\n-    (\"rustc_metadata_clean\", Whitelisted, Gated(Stability::Unstable,\n-                                                \"rustc_attrs\",\n-                                                \"the `#[rustc_metadata_clean]` attribute \\\n-                                                 is just used for rustc unit tests \\\n-                                                 and will never be stable\",\n-                                                 cfg_fn!(rustc_attrs))),\n     (\"rustc_partition_reused\", Whitelisted, Gated(Stability::Unstable,\n                                                   \"rustc_attrs\",\n                                                   \"this attribute \\"}, {"sha": "a62d84fedf3aa839c86812c5b75b029059615654", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -38,8 +38,6 @@ pub fn change_callee_function() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n }\n@@ -55,8 +53,6 @@ pub fn change_argument_function() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n }\n@@ -74,8 +70,8 @@ mod change_callee_indirectly_function {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+\n+\n     pub fn change_callee_indirectly_function() {\n         callee(1, 2)\n     }\n@@ -98,8 +94,6 @@ pub fn change_callee_method() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n     let s = Struct;\n     s.method2('x', true);\n@@ -117,8 +111,6 @@ pub fn change_argument_method() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n     let s = Struct;\n     s.method1('y', true);\n@@ -136,8 +128,6 @@ pub fn change_ufcs_callee_method() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n     Struct::method2(&s, 'x', true);\n@@ -155,8 +145,6 @@ pub fn change_argument_method_ufcs() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n     Struct::method1(&s, 'x', false);\n@@ -174,8 +162,6 @@ pub fn change_to_ufcs() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n // One might think this would be expanded in the HirBody/Mir, but it actually\n // results in slightly different Hir/Mir.\n pub fn change_to_ufcs() {\n@@ -198,8 +184,8 @@ pub mod change_ufcs_callee_indirectly {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+\n+\n     pub fn change_ufcs_callee_indirectly() {\n         let s = Struct;\n         Struct::method1(&s, 'q', false)"}, {"sha": "4abc77e0ab64d36df8b7ff1cb4d0be8600caa96a", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -36,8 +36,6 @@ fn change_closure_body() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_closure_body() {\n     let _ = || 3u32;\n }\n@@ -56,8 +54,6 @@ fn add_parameter() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_parameter() {\n     let x = 0u32;\n     let _ = |x: u32| x + 1;\n@@ -76,8 +72,6 @@ fn change_parameter_pattern() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_parameter_pattern() {\n     let _ = |&x: &u32| x;\n }\n@@ -95,8 +89,6 @@ fn add_move() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_move() {\n     let _ = move || 1;\n }\n@@ -115,8 +107,6 @@ fn add_type_ascription_to_parameter() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n     let _: u32 = closure(1);\n@@ -136,8 +126,6 @@ fn change_parameter_type() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;\n     let _ = closure(1);"}, {"sha": "496ae4276f863276695ca854e702c2515b03206d", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -32,8 +32,6 @@ const CONST_VISIBILITY: u8 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub const CONST_VISIBILITY: u8 = 0;\n \n \n@@ -44,8 +42,6 @@ const CONST_CHANGE_TYPE_1: i32 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n \n@@ -56,15 +52,12 @@ const CONST_CHANGE_TYPE_2: Option<u32> = None;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n \n // Change value between simple literals ---------------------------------------\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_1: i16 = {\n     #[cfg(cfail1)]\n     { 1 }\n@@ -77,8 +70,6 @@ const CONST_CHANGE_VALUE_1: i16 = {\n // Change value between expressions -------------------------------------------\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_2: i16 = {\n     #[cfg(cfail1)]\n     { 1 + 1 }\n@@ -89,8 +80,6 @@ const CONST_CHANGE_VALUE_2: i16 = {\n \n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_3: i16 = {\n     #[cfg(cfail1)]\n     { 2 + 3 }\n@@ -101,8 +90,6 @@ const CONST_CHANGE_VALUE_3: i16 = {\n \n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_4: i16 = {\n     #[cfg(cfail1)]\n     { 1 + 2 * 3 }\n@@ -125,13 +112,9 @@ mod const_change_type_indirectly {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "f38d18646306e885a827e612a78eae9eaafb9b44", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -47,8 +47,6 @@ pub fn change_field_value_struct_like() -> Enum {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n@@ -72,8 +70,6 @@ pub fn change_field_order_struct_like() -> Enum {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n // FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n // would if it were not all constants\n pub fn change_field_order_struct_like() -> Enum {\n@@ -113,8 +109,6 @@ pub fn change_constructor_path_struct_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n         x: 0,\n@@ -138,8 +132,6 @@ pub fn change_constructor_variant_struct_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n         x: 0,\n@@ -162,8 +154,6 @@ pub mod change_constructor_path_indirectly_struct_like {\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> TheEnum {\n         TheEnum::Struct {\n             x: 0,\n@@ -184,8 +174,6 @@ pub mod change_constructor_variant_indirectly_struct_like {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant {\n             x: 0,\n@@ -205,8 +193,6 @@ pub fn change_field_value_tuple_like() -> Enum {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n }\n@@ -225,8 +211,6 @@ pub fn change_constructor_path_tuple_like() {\n     except=\"HirBody,MirOptimized,MirValidated,TypeckTables\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_like() {\n     let _ = Enum2::Tuple(0, 1, 2);\n }\n@@ -245,8 +229,6 @@ pub fn change_constructor_variant_tuple_like() {\n     except=\"HirBody,MirOptimized,MirValidated,TypeckTables\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_tuple_like() {\n     let _ = Enum2::Tuple2(0, 1, 2);\n }\n@@ -265,8 +247,6 @@ pub mod change_constructor_path_indirectly_tuple_like {\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> TheEnum {\n         TheEnum::Tuple(0, 1, 2)\n     }\n@@ -284,8 +264,6 @@ pub mod change_constructor_variant_indirectly_tuple_like {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n     }\n@@ -313,7 +291,6 @@ pub fn change_constructor_path_c_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n }\n@@ -329,8 +306,6 @@ pub fn change_constructor_variant_c_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n }\n@@ -349,8 +324,6 @@ pub mod change_constructor_path_indirectly_c_like {\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> TheEnum {\n         TheEnum::B\n     }\n@@ -368,8 +341,6 @@ pub mod change_constructor_variant_indirectly_c_like {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> Clike {\n         Variant\n     }"}, {"sha": "dbb7aca1924d3e41775dbaca2575b6bc73181015", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -39,11 +39,7 @@ enum EnumVisibility { A }\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub enum EnumVisibility {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     A\n }\n \n@@ -59,13 +55,8 @@ enum EnumChangeNameCStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant1,\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant2Changed,\n }\n \n@@ -81,8 +72,6 @@ enum EnumChangeNameTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n     Variant2Changed(u32, f32),\n@@ -100,8 +89,6 @@ enum EnumChangeNameStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n     Variant2Changed { a: u32, b: f32 },\n@@ -119,16 +106,10 @@ enum EnumChangeValueCStyleVariant0 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant0 {\n     Variant1,\n \n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant2 =\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         22,\n }\n \n@@ -141,8 +122,6 @@ enum EnumChangeValueCStyleVariant1 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n     Variant2 = 11,\n@@ -159,8 +138,6 @@ enum EnumAddCStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n     Variant2,\n@@ -178,8 +155,6 @@ enum EnumRemoveCStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n }\n@@ -195,8 +170,6 @@ enum EnumAddTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n     Variant2(u32, f32),\n@@ -214,8 +187,6 @@ enum EnumRemoveTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n }\n@@ -231,8 +202,6 @@ enum EnumAddStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n     Variant2 { a: u32, b: f32 },\n@@ -250,8 +219,6 @@ enum EnumRemoveStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n }\n@@ -267,12 +234,8 @@ enum EnumChangeFieldTypeTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeTupleStyleVariant {\n     Variant1(u32,\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         u64),\n }\n \n@@ -288,14 +251,10 @@ enum EnumChangeFieldTypeStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeStructStyleVariant {\n     Variant1,\n     Variant2 {\n         a: u32,\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         b: u64\n     },\n }\n@@ -311,8 +270,6 @@ enum EnumChangeFieldNameStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n }\n@@ -328,15 +285,9 @@ enum EnumChangeOrderTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeOrderTupleStyleVariant {\n     Variant1(\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         u64,\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         u32),\n }\n \n@@ -351,8 +302,6 @@ enum EnumChangeFieldOrderStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n }\n@@ -368,8 +317,6 @@ enum EnumAddFieldTupleStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n }\n@@ -385,8 +332,6 @@ enum EnumAddFieldStructStyleVariant {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n }\n@@ -403,8 +348,6 @@ enum EnumAddMustUse {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[must_use]\n enum EnumAddMustUse {\n     Variant1,\n@@ -423,8 +366,6 @@ enum EnumAddReprC {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n enum EnumAddReprC {\n     Variant1,\n@@ -442,8 +383,6 @@ enum EnumChangeNameOfTypeParameter<S> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameOfTypeParameter<T> {\n     Variant1(T),\n }\n@@ -460,8 +399,6 @@ enum EnumAddTypeParameter<S> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddTypeParameter<S, T> {\n     Variant1(S),\n     Variant2(T),\n@@ -478,8 +415,6 @@ enum EnumChangeNameOfLifetimeParameter<'a> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameOfLifetimeParameter<'b> {\n     Variant1(&'b u32),\n }\n@@ -496,8 +431,6 @@ enum EnumAddLifetimeParameter<'a> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameter<'a, 'b> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -515,8 +448,6 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -532,8 +463,6 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n     Variant2(&'a u32),\n@@ -550,8 +479,6 @@ enum EnumAddTraitBound<S> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddTraitBound<T: Sync> {\n     Variant1(T),\n }\n@@ -568,8 +495,6 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n     Variant2(&'b u32),\n@@ -587,8 +512,6 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),\n     Variant2(&'a u32),\n@@ -605,8 +528,6 @@ enum EnumAddTraitBoundWhere<S> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddTraitBoundWhere<T> where T: Sync {\n     Variant1(T),\n }\n@@ -623,21 +544,11 @@ enum EnumSwapUsageTypeParameters<A, B> {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageTypeParameters<A, B> {\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant1 {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         a: B\n     },\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant2 {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         a: A\n     },\n }\n@@ -654,21 +565,11 @@ enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant1 {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         a: &'b u32\n     },\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     Variant2 {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         b: &'a u32\n     },\n }\n@@ -689,14 +590,8 @@ mod change_field_type_indirectly_tuple_style {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum TupleStyle {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         Variant1(\n-            #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-            #[rustc_metadata_clean(cfg=\"cfail3\")]\n             FieldType\n         )\n     }\n@@ -713,14 +608,8 @@ mod change_field_type_indirectly_struct_style {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum StructStyle {\n-        #[rustc_metadata_clean(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         Variant1 {\n-            #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-            #[rustc_metadata_clean(cfg=\"cfail3\")]\n             a: FieldType\n         }\n     }\n@@ -742,8 +631,6 @@ mod change_trait_bound_indirectly {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum Enum<T: Trait> {\n         Variant1(T)\n     }\n@@ -760,8 +647,6 @@ mod change_trait_bound_indirectly_where {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum Enum<T> where T: Trait {\n         Variant1(T)\n     }"}, {"sha": "985c064f6a0a2e8ec99d9b4c75072a1f7106b23d", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -28,8 +28,6 @@ pub fn body_not_exported_to_metadata() -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n }\n@@ -49,8 +47,6 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n     2\n@@ -71,8 +67,6 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n     2"}, {"sha": "7ccb452b7ed2635b0d8458b4757df60b671c3be8", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -36,8 +36,6 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n     pub fn change_function_name2(c: i64) -> i32;\n }\n@@ -53,11 +51,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_parameter_name(d: i64) -> i32;\n }\n \n@@ -72,11 +66,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_parameter_type(c: i32) -> i32;\n }\n \n@@ -91,11 +81,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_return_type(c: i32) -> i8;\n }\n \n@@ -110,11 +96,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_parameter(c: i32, d: i32) -> i32;\n }\n \n@@ -129,11 +111,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_return_type(c: i32) -> i32;\n }\n \n@@ -148,11 +126,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn make_function_variadic(c: i32, ...);\n }\n \n@@ -167,11 +141,7 @@ extern \"C\" {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern \"rust-call\" {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_calling_convention(c: i32);\n }\n \n@@ -186,11 +156,7 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn make_function_public(c: i32);\n }\n \n@@ -205,8 +171,6 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n     pub fn add_function1(c: i32);\n     pub fn add_function2();\n@@ -224,8 +188,6 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[link_args = \"-foo -bar -baz\"]\n extern {\n     pub fn change_link_args(c: i32);\n@@ -243,8 +205,6 @@ extern {\n #[cfg(not(cfail1))]\n #[rustc_dirty(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[link(name = \"bar\")]\n extern {\n     pub fn change_link_name(c: i32);\n@@ -262,11 +222,7 @@ mod indirectly_change_parameter_type {\n \n     #[rustc_dirty(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         pub fn indirectly_change_parameter_type(c: c_int);\n     }\n }\n@@ -282,11 +238,7 @@ mod indirectly_change_return_type {\n \n     #[rustc_dirty(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         pub fn indirectly_change_return_type() -> c_int;\n     }\n }"}, {"sha": "763b0cd05d4f9da95d25b57f5400010ffa9e79fb", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -40,8 +40,6 @@ fn change_loop_body() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_loop_body() {\n     let mut _x = 0;\n     for _ in 0..1 {\n@@ -67,8 +65,6 @@ fn change_iteration_variable_name() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_iteration_variable_name() {\n     let mut _x = 0;\n     for _a in 0..1 {\n@@ -94,8 +90,6 @@ fn change_iteration_variable_pattern() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n     for &_i in &[0, 1, 2] {\n@@ -121,8 +115,6 @@ fn change_iterable() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_iterable() {\n     let mut _x = 0;\n     for _ in &[0, 1, 3] {\n@@ -147,8 +139,6 @@ fn add_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_break() {\n     let mut _x = 0;\n     for _ in 0..1 {\n@@ -174,8 +164,6 @@ fn add_loop_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n@@ -201,8 +189,6 @@ fn add_loop_label_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n@@ -230,8 +216,6 @@ fn change_break_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_break_label() {\n     let mut _x = 0;\n     'outer: for _ in 0..1 {\n@@ -259,8 +243,6 @@ fn add_loop_label_to_continue() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: for _ in 0..1 {\n@@ -288,8 +270,6 @@ fn change_continue_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_label() {\n     let mut _x = 0;\n     'outer: for _ in 0..1 {\n@@ -317,8 +297,6 @@ fn change_continue_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_to_break() {\n     let mut _x = 0;\n     for _ in 0..1 {"}, {"sha": "b3eb566367c725feb165ddc20349964f0dc995ca", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -37,8 +37,6 @@ fn add_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_parameter(p: i32) {}\n \n \n@@ -50,8 +48,6 @@ fn add_return_type() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")] // The type doesn't change, so metadata is the same\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_return_type() -> () {}\n \n \n@@ -63,8 +59,6 @@ fn type_of_parameter(p: i32) {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn type_of_parameter(p: i64) {}\n \n \n@@ -76,8 +70,6 @@ fn type_of_parameter_ref(p: &i32) {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn type_of_parameter_ref(p: &mut i32) {}\n \n \n@@ -89,8 +81,6 @@ fn order_of_parameters(p1: i32, p2: i64) {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn order_of_parameters(p2: i64, p1: i32) {}\n \n \n@@ -102,8 +92,6 @@ fn make_unsafe() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n unsafe fn make_unsafe() {}\n \n \n@@ -115,8 +103,6 @@ fn make_extern() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern fn make_extern() {}\n \n \n@@ -128,8 +114,6 @@ extern \"C\" fn make_intrinsic() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n extern \"rust-intrinsic\" fn make_intrinsic() {}\n \n \n@@ -141,8 +125,6 @@ fn type_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn type_parameter<T>() {}\n \n \n@@ -154,8 +136,6 @@ fn lifetime_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-// #[rustc_metadata_dirty(cfg=\"cfail2\")] -- Unused lifetime params don't show up in the type?\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn lifetime_parameter<'a>() {}\n \n \n@@ -167,8 +147,6 @@ fn trait_bound<T>() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn trait_bound<T: Eq>() {}\n \n \n@@ -180,8 +158,6 @@ fn builtin_bound<T>() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn builtin_bound<T: Send>() {}\n \n \n@@ -193,8 +169,6 @@ fn lifetime_bound<'a, T>() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn lifetime_bound<'a, T: 'a>() {}\n \n \n@@ -206,8 +180,6 @@ fn second_trait_bound<T: Eq>() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn second_trait_bound<T: Eq + Clone>() {}\n \n \n@@ -219,8 +191,6 @@ fn second_builtin_bound<T: Send>() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn second_builtin_bound<T: Send + Sized>() {}\n \n \n@@ -232,8 +202,6 @@ fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n \n \n@@ -245,8 +213,6 @@ fn inline() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[inline]\n fn inline() {}\n \n@@ -260,8 +226,6 @@ fn inline_never() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[inline(never)]\n fn inline_never() {}\n \n@@ -274,8 +238,6 @@ fn no_mangle() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[no_mangle]\n fn no_mangle() {}\n \n@@ -288,8 +250,6 @@ fn linkage() {}\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[linkage=\"weak_odr\"]\n fn linkage() {}\n \n@@ -304,8 +264,6 @@ fn return_impl_trait() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn return_impl_trait() -> impl Clone {\n     0\n }\n@@ -321,8 +279,6 @@ fn change_return_impl_trait() -> impl Clone {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")] // The actual type is the same, so: clean\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_return_impl_trait() -> impl Copy {\n     0u32\n }\n@@ -341,8 +297,6 @@ mod change_return_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn indirect_return_type() -> ReturnType {\n         ReturnType {}\n     }\n@@ -359,8 +313,6 @@ mod change_parameter_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn indirect_parameter_type(p: ParameterType) {}\n }\n \n@@ -378,8 +330,6 @@ mod change_trait_bound_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n \n@@ -394,7 +344,5 @@ mod change_trait_bound_indirectly_in_where_clause {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn indirect_trait_bound_where<T>(p: T) where T: Trait {}\n }"}, {"sha": "d6878028cfae21bbb97705db6bf4bdef8942aab1", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -38,8 +38,6 @@ pub fn change_condition(x: bool) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n         return 1\n@@ -61,8 +59,6 @@ pub fn change_then_branch(x: bool) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n         return 2\n@@ -86,8 +82,6 @@ pub fn change_else_branch(x: bool) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n         1\n@@ -113,8 +107,6 @@ pub fn add_else_branch(x: bool) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n \n@@ -141,8 +133,6 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_) = x {\n         return 1\n@@ -166,8 +156,6 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n         return x + 1\n@@ -191,8 +179,6 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n         x\n@@ -218,8 +204,6 @@ pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;\n "}, {"sha": "715146146f1487ae2ab4eba6d8de84615c6cc9d5", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -36,8 +36,6 @@ fn change_simple_index(slice: &[u32]) -> u32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[4]\n }\n@@ -55,8 +53,6 @@ fn change_lower_bound(slice: &[u32]) -> &[u32] {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[2..5]\n }\n@@ -74,8 +70,6 @@ fn change_upper_bound(slice: &[u32]) -> &[u32] {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -93,8 +87,6 @@ fn add_lower_bound(slice: &[u32]) -> &[u32] {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..4]\n }\n@@ -112,8 +104,6 @@ fn add_upper_bound(slice: &[u32]) -> &[u32] {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -131,8 +121,6 @@ fn change_mutability(slice: &mut [u32]) -> u32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&slice[3..5])[0]\n }\n@@ -150,8 +138,6 @@ fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..=7]\n }"}, {"sha": "c8c2fa5e8c813b07079564bc6b89335b832fafc6", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -36,11 +36,8 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,AssociatedItemDefIds\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_name2() { }\n }\n \n@@ -55,13 +52,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n         println!(\"Hello, world!\");\n     }\n@@ -80,13 +73,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn method_body_inlined() {\n         println!(\"Hello, world!\");\n@@ -103,13 +92,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"AssociatedItems,Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_privacy() { }\n }\n \n@@ -122,13 +107,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem,PredicatesOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }\n \n@@ -141,16 +122,12 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n }\n \n@@ -165,17 +142,12 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,AssociatedItemDefIds\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_to_impl1(&self) { }\n \n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_to_impl2(&self) { }\n }\n \n@@ -190,16 +162,12 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n }\n \n@@ -214,13 +182,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n \n@@ -235,15 +199,11 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"Hir,HirBody,FnSignature,MirOptimized,MirValidated,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n }\n \n@@ -258,13 +218,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn make_method_inline(&self) -> u8 { 0 }\n }\n@@ -280,13 +236,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n \n@@ -301,16 +253,12 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n }\n \n@@ -325,13 +273,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,FnSignature,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub extern fn make_method_extern(&self) { }\n }\n \n@@ -346,13 +290,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,FnSignature,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub extern \"system\" fn change_method_calling_convention(&self) { }\n }\n \n@@ -367,8 +307,6 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     // Warning: Note that `TypeckTables` are coming up clean here.\n     // The addition or removal of lifetime parameters that don't\n@@ -381,8 +319,6 @@ impl Foo {\n     // `TypeckTables` appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }\n \n@@ -397,8 +333,6 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     // Warning: Note that `TypeckTables` are coming up clean here.\n     // The addition or removal of type parameters that don't appear in\n@@ -414,8 +348,6 @@ impl Foo {\n         except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n }\n \n@@ -430,16 +362,12 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n }\n \n@@ -454,8 +382,6 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     // Warning: Note that `TypeckTables` are coming up clean here.\n     // The addition or removal of bounds that don't appear in the\n@@ -469,8 +395,6 @@ impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,\\\n                                         TypeOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n }\n \n@@ -485,8 +409,6 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     // Warning: Note that `TypeckTables` are coming up clean here.\n     // The addition or removal of bounds that don't appear in the\n@@ -499,8 +421,6 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n }\n \n@@ -515,13 +435,9 @@ impl Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[no_mangle]\n     pub fn add_no_mangle_to_method(&self) { }\n }\n@@ -539,16 +455,12 @@ impl Bar<u32> {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n         except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOfItem,MirOptimized,MirValidated\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }\n }\n \n@@ -563,13 +475,9 @@ impl Bar<u32> {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n     #[rustc_clean(cfg=\"cfail2\", except=\"FnSignature,MirOptimized,MirValidated,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_impl_self_type(&self) { }\n }\n \n@@ -584,13 +492,9 @@ impl<T> Bar<T> {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T: 'static> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_impl_parameter(&self) { }\n }\n \n@@ -605,13 +509,9 @@ impl<T> Bar<T> {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T: Clone> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_impl_parameter(&self) { }\n }\n "}, {"sha": "0947239c573c21af0de51a959954ea9d0b75e9ab", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -48,8 +48,6 @@ fn change_template(a: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn change_template(a: i32) -> i32 {\n     let c: i32;\n@@ -88,8 +86,6 @@ fn change_output(a: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n@@ -128,8 +124,6 @@ fn change_input(_a: i32, _b: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n@@ -167,8 +161,6 @@ fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n@@ -206,8 +198,6 @@ fn change_clobber(_a: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn change_clobber(_a: i32) -> i32 {\n     let _out;\n@@ -245,8 +235,6 @@ fn change_options(_a: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn change_options(_a: i32) -> i32 {\n     let _out;"}, {"sha": "f3bddc669842b1590122cc3650975f94dfd93fa7", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -51,8 +51,6 @@ pub fn add_type() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n }\n@@ -69,8 +67,6 @@ pub fn change_type() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n }\n@@ -87,8 +83,6 @@ pub fn change_mutability_of_reference_type() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n }\n@@ -105,8 +99,6 @@ pub fn change_mutability_of_slot() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n }\n@@ -123,8 +115,6 @@ pub fn change_simple_binding_to_pattern() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n }\n@@ -141,8 +131,6 @@ pub fn change_name_in_pattern() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n }\n@@ -159,8 +147,6 @@ pub fn add_ref_in_pattern() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n }\n@@ -177,8 +163,6 @@ pub fn add_amp_in_pattern() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n }\n@@ -195,8 +179,6 @@ pub fn change_mutability_of_binding_in_pattern() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n }\n@@ -213,8 +195,6 @@ pub fn add_initializer() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n }\n@@ -231,8 +211,6 @@ pub fn change_initializer() {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;\n }"}, {"sha": "8d015288757bf847c8f30ecb6da4097bee2f8491", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -40,8 +40,6 @@ fn change_loop_body() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_loop_body() {\n     let mut _x = 0;\n     loop {\n@@ -66,8 +64,6 @@ fn add_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_break() {\n     let mut _x = 0;\n     loop {\n@@ -93,8 +89,6 @@ fn add_loop_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label() {\n     let mut _x = 0;\n     'label: loop {\n@@ -120,8 +114,6 @@ fn add_loop_label_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: loop {\n@@ -149,8 +141,6 @@ fn change_break_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_break_label() {\n     let mut _x = 0;\n     'outer: loop {\n@@ -178,8 +168,6 @@ fn add_loop_label_to_continue() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: loop {\n@@ -207,8 +195,6 @@ fn change_continue_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_label() {\n     let mut _x = 0;\n     'outer: loop {\n@@ -236,8 +222,6 @@ fn change_continue_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_to_break() {\n     let mut _x = 0;\n     loop {"}, {"sha": "38edd675cc637e4daf8a8f4b0d5e5839fb8b5b13", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -39,8 +39,6 @@ pub fn add_arm(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -66,8 +64,6 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n         1 => 1,\n@@ -92,8 +88,6 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n         0 => 0,\n@@ -118,8 +112,6 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n         0 => 0,\n@@ -144,8 +136,6 @@ pub fn add_at_binding(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -170,8 +160,6 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -195,8 +183,6 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (0, 0) => 0,\n@@ -220,8 +206,6 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (b, 0) => 0,\n@@ -245,8 +229,6 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (mut a, 0) => 0,\n@@ -269,8 +251,6 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n         (ref a, 0) => 0,\n@@ -293,8 +273,6 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n         (&a, 0) => 0,\n@@ -318,8 +296,6 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n         0 => 0,\n@@ -344,8 +320,6 @@ pub fn add_alternative_to_arm(x: u32) -> u32 {\n #[rustc_clean(cfg=\"cfail2\",\n     except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {\n         0 | 7 => 0,"}, {"sha": "c76c10f2ab443d9d65f286b008e31d5866449fb9", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -36,8 +36,6 @@ pub fn indexing(slice: &[u8]) -> u8 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     slice[100]\n }\n@@ -52,8 +50,6 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     val + 1\n }\n@@ -68,8 +64,6 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     val - 1\n }\n@@ -84,8 +78,6 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     val * 2\n }\n@@ -100,8 +92,6 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     -val\n }\n@@ -116,8 +106,6 @@ pub fn division_by_zero(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     2 / val\n }\n@@ -131,8 +119,6 @@ pub fn mod_by_zero(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     2 % val\n }\n@@ -147,8 +133,6 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n     val << shift\n }\n@@ -163,8 +147,6 @@ pub fn shift_right(val: i32, shift: usize) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n     val >> shift\n }\n@@ -181,8 +163,6 @@ pub fn bitwise(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise(val: i32) -> i32 {\n     !val & 0x101010101 | 0x45689 ^ 0x2372382\n }\n@@ -197,8 +177,6 @@ pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n     val1 && val2 || val3\n }"}, {"sha": "8402da04091ece13929b08973878c89b50346b59", "filename": "src/test/incremental/hashes/panic_exprs_no_overflow_checks.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -43,8 +43,6 @@ pub fn indexing(slice: &[u8]) -> u8 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     slice[100]\n }\n@@ -60,8 +58,6 @@ pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n     val + 1\n@@ -78,8 +74,6 @@ pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n     val - 1\n@@ -96,8 +90,6 @@ pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n     val * 2\n@@ -114,8 +106,6 @@ pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n     -val\n@@ -131,8 +121,6 @@ pub fn division_by_zero(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     2 / val\n }\n@@ -146,8 +134,6 @@ pub fn mod_by_zero(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     2 % val\n }\n@@ -165,8 +151,6 @@ pub fn bitwise(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise(val: i32) -> i32 {\n     !val & 0x101010101 | 0x45689 ^ 0x2372382 << 1 >> 1\n }\n@@ -181,8 +165,6 @@ pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n     val1 && val2 || val3\n }\n@@ -196,8 +178,6 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     val + 1\n }\n@@ -212,8 +192,6 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     val - 1\n }\n@@ -228,8 +206,6 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     val * 2\n }\n@@ -244,8 +220,6 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     -val\n }"}, {"sha": "e729a2c039e4c572ccbac48d01b1d801e29ec7b3", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -34,8 +34,6 @@ static STATIC_VISIBILITY: u8 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub static STATIC_VISIBILITY: u8 = 0;\n \n \n@@ -46,8 +44,6 @@ static STATIC_MUTABILITY: u8 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static mut STATIC_MUTABILITY: u8 = 0;\n \n \n@@ -58,8 +54,6 @@ static STATIC_LINKAGE: u8 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[linkage=\"weak_odr\"]\n static STATIC_LINKAGE: u8 = 0;\n \n@@ -71,8 +65,6 @@ static STATIC_NO_MANGLE: u8 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[no_mangle]\n static STATIC_NO_MANGLE: u8 = 0;\n \n@@ -84,8 +76,6 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[thread_local]\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n@@ -97,8 +87,6 @@ static STATIC_CHANGE_TYPE_1: i16 = 0;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n \n@@ -109,16 +97,12 @@ static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n // Change value between simple literals ---------------------------------------\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_1: i16 = {\n     #[cfg(cfail1)]\n     { 1 }\n@@ -131,8 +115,6 @@ static STATIC_CHANGE_VALUE_1: i16 = {\n // Change value between expressions -------------------------------------------\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_2: i16 = {\n     #[cfg(cfail1)]\n     { 1 + 1 }\n@@ -143,8 +125,6 @@ static STATIC_CHANGE_VALUE_2: i16 = {\n \n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_3: i16 = {\n     #[cfg(cfail1)]\n     { 2 + 3 }\n@@ -155,8 +135,6 @@ static STATIC_CHANGE_VALUE_3: i16 = {\n \n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_4: i16 = {\n     #[cfg(cfail1)]\n     { 1 + 2 * 3 }\n@@ -179,13 +157,9 @@ mod static_change_type_indirectly {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "a16f4a2fdfd65c8e95c5d83f74f257a11f96334d", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -44,8 +44,6 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n@@ -69,8 +67,6 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         y: 4,\n@@ -99,8 +95,6 @@ pub fn add_field_regular_struct() -> RegularStruct {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n@@ -136,8 +130,6 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n@@ -173,8 +165,6 @@ pub fn change_constructor_path_regular_struct() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n         x: 0,\n@@ -197,8 +187,6 @@ pub mod change_constructor_path_indirectly_regular_struct {\n         except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n         Struct {\n             x: 0,\n@@ -221,8 +209,6 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n }\n@@ -240,8 +226,6 @@ pub fn change_constructor_path_tuple_struct() {\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n }\n@@ -260,8 +244,6 @@ pub mod change_constructor_path_indirectly_tuple_struct {\n         except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n         Struct(0, 1, 2)\n     }"}, {"sha": "d89d779c849c3644008fafa66aa0a9e523980921", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -45,8 +45,6 @@ pub struct LayoutPacked;\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(packed)]\n pub struct LayoutPacked;\n \n@@ -64,8 +62,6 @@ struct LayoutC;\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n struct LayoutC;\n \n@@ -86,13 +82,9 @@ struct TupleStructFieldType(i32);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct TupleStructFieldType(\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     u32\n );\n \n@@ -113,13 +105,8 @@ struct TupleStructAddField(i32);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct TupleStructAddField(\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     i32,\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     u32\n );\n \n@@ -140,8 +127,6 @@ struct TupleStructFieldVisibility(char);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct TupleStructFieldVisibility(pub char);\n \n \n@@ -161,13 +146,9 @@ struct RecordStructFieldType { x: f32 }\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct RecordStructFieldType {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     x: u64\n }\n \n@@ -188,8 +169,6 @@ struct RecordStructFieldName { x: f32 }\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct RecordStructFieldName { y: f32 }\n \n \n@@ -209,13 +188,8 @@ struct RecordStructAddField { x: f32 }\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct RecordStructAddField {\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     x: f32,\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     y: () }\n \n \n@@ -235,11 +209,7 @@ struct RecordStructFieldVisibility { x: f32 }\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct RecordStructFieldVisibility {\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub x: f32\n }\n \n@@ -260,8 +230,6 @@ struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n \n \n@@ -281,14 +249,8 @@ struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct AddLifetimeParameterBound<'a, 'b: 'a>(\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     &'a f32,\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     &'b f64\n );\n \n@@ -306,14 +268,8 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     &'a f32,\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     &'b f64)\n     where 'b: 'a;\n \n@@ -334,16 +290,10 @@ struct AddTypeParameter<T1>(T1, T1);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct AddTypeParameter<T1, T2>(\n      // The field contains the parent's Generics, so it's dirty even though its\n      // type hasn't changed.\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     T1,\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     T2\n );\n \n@@ -364,11 +314,7 @@ struct AddTypeParameterBound<T>(T);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct AddTypeParameterBound<T: Send>(\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     T\n );\n \n@@ -387,11 +333,7 @@ struct AddTypeParameterBoundWhereClause<T>(T);\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n struct AddTypeParameterBoundWhereClause<T>(\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     T\n ) where T: Sync;\n \n@@ -411,7 +353,6 @@ struct AddTypeParameterBoundWhereClause<T>(\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n pub struct EmptyStruct;\n \n \n@@ -431,8 +372,6 @@ struct Visibility;\n #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub struct Visibility;\n \n struct ReferencedType1;\n@@ -455,11 +394,7 @@ mod tuple_struct_change_field_type_indirectly {\n     #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     struct TupleStruct(\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         FieldType\n     );\n }\n@@ -482,11 +417,7 @@ mod record_struct_change_field_type_indirectly {\n     #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     struct RecordStruct {\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         _x: FieldType\n     }\n }\n@@ -514,8 +445,6 @@ mod change_trait_bound_indirectly {\n     #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     struct Struct<T: Trait>(T);\n }\n \n@@ -536,7 +465,5 @@ mod change_trait_bound_indirectly_in_where_clause {\n     #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     struct Struct<T>(T) where T : Trait;\n }"}, {"sha": "e09659be75599be99b8d3773a903b8deded581e3", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 0, "deletions": 207, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -39,7 +39,6 @@ trait TraitVisibility { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub trait TraitVisibility { }\n \n \n@@ -51,8 +50,6 @@ trait TraitUnsafety { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n unsafe trait TraitUnsafety { }\n \n \n@@ -65,8 +62,6 @@ trait TraitAddMethod {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub trait TraitAddMethod {\n     fn method();\n }\n@@ -82,8 +77,6 @@ trait TraitChangeMethodName {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodName {\n     fn methodChanged();\n }\n@@ -99,13 +92,9 @@ trait TraitAddReturnType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddReturnType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method() -> u32;\n }\n \n@@ -120,13 +109,9 @@ trait TraitChangeReturnType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeReturnType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method() -> u64;\n }\n \n@@ -141,13 +126,9 @@ trait TraitAddParameterToMethod {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(a: u32);\n }\n \n@@ -163,22 +144,16 @@ trait TraitChangeMethodParameterName {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterName {\n     // FIXME(#38501) This should preferably always be clean.\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(b: u32);\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn with_default(y: i32) {}\n }\n \n@@ -193,13 +168,9 @@ trait TraitChangeMethodParameterType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(a: i64);\n }\n \n@@ -214,13 +185,9 @@ trait TraitChangeMethodParameterTypeRef {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterTypeRef {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(a: &mut i32);\n }\n \n@@ -235,13 +202,9 @@ trait TraitChangeMethodParametersOrder {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParametersOrder {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(b: i64, a: i32);\n }\n \n@@ -256,13 +219,9 @@ trait TraitAddMethodAutoImplementation {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddMethodAutoImplementation {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method() { }\n }\n \n@@ -278,8 +237,6 @@ trait TraitChangeOrderOfMethods {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeOrderOfMethods {\n     fn method1();\n     fn method0();\n@@ -296,13 +253,9 @@ trait TraitChangeModeSelfRefToMut {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfRefToMut {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(&mut self);\n }\n \n@@ -316,15 +269,11 @@ trait TraitChangeModeSelfOwnToMut: Sized {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToMut: Sized {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(mut self) {}\n }\n \n@@ -338,13 +287,9 @@ trait TraitChangeModeSelfOwnToRef {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToRef {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method(&self);\n }\n \n@@ -359,13 +304,9 @@ trait TraitAddUnsafeModifier {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddUnsafeModifier {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     unsafe fn method();\n }\n \n@@ -380,13 +321,9 @@ trait TraitAddExternModifier {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddExternModifier {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern fn method();\n }\n \n@@ -401,13 +338,9 @@ trait TraitChangeExternCToRustIntrinsic {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeExternCToRustIntrinsic {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern \"rust-intrinsic\" fn method();\n }\n \n@@ -422,13 +355,9 @@ trait TraitAddTypeParameterToMethod {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTypeParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T>();\n }\n \n@@ -443,13 +372,9 @@ trait TraitAddLifetimeParameterToMethod {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a>();\n }\n \n@@ -468,13 +393,9 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0>();\n }\n \n@@ -489,13 +410,9 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: Sized>();\n }\n \n@@ -510,13 +427,9 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a, 'b: 'a>(a: &'a u32, b: &'b u32);\n }\n \n@@ -531,13 +444,9 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0 + ReferencedTrait1>();\n }\n \n@@ -552,13 +461,9 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<T: Sized + Sync>();\n }\n \n@@ -573,13 +478,9 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a, 'b, 'c: 'a + 'b>(a: &'a u32, b: &'b u32, c: &'c u32);\n }\n \n@@ -591,16 +492,12 @@ trait TraitAddAssociatedType {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method();\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddAssociatedType {\n     type Associated;\n \n@@ -623,13 +520,9 @@ trait TraitAddTraitBoundToAssociatedType {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToAssociatedType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated: ReferencedTrait0;\n \n     fn method();\n@@ -648,13 +541,9 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated: 'a;\n \n     fn method();\n@@ -673,13 +562,9 @@ trait TraitAddDefaultToAssociatedType {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddDefaultToAssociatedType {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type Associated = ReferenceType0;\n \n     fn method();\n@@ -696,8 +581,6 @@ trait TraitAddAssociatedConstant {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddAssociatedConstant {\n     const Value: u32;\n \n@@ -717,19 +600,13 @@ trait TraitAddInitializerToAssociatedConstant {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddInitializerToAssociatedConstant {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const Value: u32 = 1;\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method();\n }\n \n@@ -746,19 +623,13 @@ trait TraitChangeTypeOfAssociatedConstant {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitChangeTypeOfAssociatedConstant {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const Value: f64;\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method();\n }\n \n@@ -771,8 +642,6 @@ trait TraitAddSuperTrait { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSuperTrait : ReferencedTrait0 { }\n \n \n@@ -784,8 +653,6 @@ trait TraitAddBuiltiBound { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltiBound : Send { }\n \n \n@@ -797,8 +664,6 @@ trait TraitAddStaticLifetimeBound { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddStaticLifetimeBound : 'static { }\n \n \n@@ -810,8 +675,6 @@ trait TraitAddTraitAsSecondBound : ReferencedTrait0 { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 + ReferencedTrait1 { }\n \n #[cfg(cfail1)]\n@@ -820,8 +683,6 @@ trait TraitAddTraitAsSecondBoundFromBuiltin : Send { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n \n \n@@ -833,8 +694,6 @@ trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 + Send { }\n \n #[cfg(cfail1)]\n@@ -843,8 +702,6 @@ trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin : Send { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n \n \n@@ -856,8 +713,6 @@ trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 + 'static { }\n \n #[cfg(cfail1)]\n@@ -866,8 +721,6 @@ trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n \n \n@@ -879,8 +732,6 @@ trait TraitAddTypeParameterToTrait { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTypeParameterToTrait<T> { }\n \n \n@@ -892,8 +743,6 @@ trait TraitAddLifetimeParameterToTrait { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToTrait<'a> { }\n \n \n@@ -905,8 +754,6 @@ trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n \n@@ -918,8 +765,6 @@ trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n \n \n@@ -931,8 +776,6 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n \n \n@@ -944,8 +787,6 @@ trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n \n@@ -957,8 +798,6 @@ trait TraitAddSecondTypeParameterToTrait<T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTypeParameterToTrait<T, S> { }\n \n \n@@ -970,8 +809,6 @@ trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n \n \n@@ -983,8 +820,6 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + ReferencedTrait1> { }\n \n \n@@ -996,8 +831,6 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n \n \n@@ -1009,8 +842,6 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c> { }\n \n \n@@ -1022,8 +853,6 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n \n \n@@ -1041,8 +870,6 @@ trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n \n@@ -1054,8 +881,6 @@ trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n \n \n@@ -1067,8 +892,6 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b { }\n \n \n@@ -1080,8 +903,6 @@ trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n \n@@ -1093,8 +914,6 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: Referenced\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n     where T: ReferencedTrait0 + ReferencedTrait1 { }\n \n@@ -1107,8 +926,6 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T:\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a + 'b { }\n \n \n@@ -1120,8 +937,6 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> whe\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b + 'c { }\n \n \n@@ -1133,8 +948,6 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n@@ -1147,13 +960,9 @@ mod change_return_type_of_method_indirectly_use {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeReturnType {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n         #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method() -> ReturnType;\n     }\n }\n@@ -1169,13 +978,9 @@ mod change_method_parameter_type_indirectly_by_use {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeArgType {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n         #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method(a: ArgType);\n     }\n }\n@@ -1191,13 +996,9 @@ mod change_method_parameter_type_bound_indirectly_by_use {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameter {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n         #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method<T: Bound>(a: T);\n     }\n }\n@@ -1214,13 +1015,9 @@ mod change_method_parameter_type_bound_indirectly_by_use_where {\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameterWhere {\n         #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n         #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-        #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-        #[rustc_metadata_clean(cfg=\"cfail3\")]\n         fn method<T>(a: T) where T: Bound;\n     }\n }\n@@ -1236,8 +1033,6 @@ mod change_method_type_parameter_bound_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeTraitBound<T: Bound> {\n         fn method(a: T);\n     }\n@@ -1255,8 +1050,6 @@ mod change_method_type_parameter_bound_indirectly_where {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     trait TraitChangeTraitBoundWhere<T> where T: Bound {\n         fn method(a: T);\n     }"}, {"sha": "eb31175b6f2573fc2b9c6cbf5fe5e9d503f36878", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -43,22 +43,16 @@ impl ChangeMethodNameTrait for Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub trait ChangeMethodNameTrait {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name2();\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodNameTrait for Foo {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name2() { }\n }\n \n@@ -78,15 +72,11 @@ impl ChangeMethodBodyTrait for Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodBodyTrait for Foo {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name() {\n         ()\n     }\n@@ -109,15 +99,11 @@ impl ChangeMethodBodyTraitInlined for Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodBodyTraitInlined for Foo {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n     fn method_name() {\n         panic!()\n@@ -144,13 +130,9 @@ pub trait ChangeMethodSelfnessTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodSelfnessTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name(&self) {\n         ()\n     }\n@@ -176,13 +158,9 @@ pub trait RemoveMethodSelfnessTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl RemoveMethodSelfnessTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name() {}\n }\n \n@@ -206,13 +184,9 @@ pub trait ChangeMethodSelfmutnessTrait {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeMethodSelfmutnessTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name(&mut self) {}\n }\n \n@@ -236,8 +210,6 @@ pub trait ChangeItemKindTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeItemKindTrait for Foo {\n     type name = ();\n }\n@@ -264,8 +236,6 @@ pub trait RemoveItemTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl RemoveItemTrait for Foo {\n     type TypeName = ();\n }\n@@ -291,8 +261,6 @@ pub trait AddItemTrait {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl AddItemTrait for Foo {\n     type TypeName = ();\n     fn method_name() { }\n@@ -313,21 +281,15 @@ impl ChangeHasValueTrait for Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub trait ChangeHasValueTrait {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name() { }\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeHasValueTrait for Foo {\n     fn method_name() { }\n }\n@@ -346,13 +308,9 @@ impl AddDefaultTrait for Foo {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl AddDefaultTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     default fn method_name() { }\n }\n \n@@ -376,13 +334,9 @@ pub trait AddArgumentTrait {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl AddArgumentTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name(&self, _x: u32) { }\n }\n \n@@ -406,13 +360,9 @@ pub trait ChangeArgumentTypeTrait {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeArgumentTypeTrait for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_name(&self, _x: char) { }\n }\n \n@@ -433,13 +383,9 @@ impl AddTypeParameterToImpl<u32> for Bar<u32> {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T> AddTypeParameterToImpl<T> for Bar<T> {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn id(t: T) -> T { t }\n }\n \n@@ -458,13 +404,9 @@ impl ChangeSelfTypeOfImpl for u32 {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl ChangeSelfTypeOfImpl for u64 {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -483,13 +425,9 @@ impl<T> AddLifetimeBoundToImplParameter for T {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T: 'static> AddLifetimeBoundToImplParameter for T {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -508,13 +446,9 @@ impl<T> AddTraitBoundToImplParameter for T {\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T: Clone> AddTraitBoundToImplParameter for T {\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -533,13 +467,9 @@ impl AddNoMangleToMethod for Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl AddNoMangleToMethod for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[no_mangle]\n     fn add_no_mangle_to_method(&self) { }\n }\n@@ -558,13 +488,9 @@ impl MakeMethodInline for Foo {\n #[cfg(not(cfail1))]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n impl MakeMethodInline for Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n     fn make_method_inline(&self) -> u8 { 0 }\n }"}, {"sha": "59346f5fdb23e4015bf2b72aeea0820662ff987e", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -37,7 +37,6 @@ type ChangePrimitiveType = i32;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n \n \n@@ -49,7 +48,6 @@ type ChangeMutability = &'static i32;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n \n \n@@ -61,7 +59,6 @@ type ChangeLifetime<'a> = (&'static i32, &'a i32);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeLifetime<'a> = (&'a i32, &'a i32);\n \n \n@@ -76,7 +73,6 @@ type ChangeTypeStruct = Struct1;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n \n \n@@ -88,7 +84,6 @@ type ChangeTypeTuple = (u32, u64);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n \n \n@@ -109,7 +104,6 @@ type ChangeTypeEnum = Enum1;\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n \n \n@@ -121,7 +115,6 @@ type AddTupleField = (i32, i64);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n \n \n@@ -133,7 +126,6 @@ type ChangeNestedTupleField = (i32, (i64, i16));\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n \n \n@@ -145,7 +137,6 @@ type AddTypeParam<T1> = (T1, T1);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParam<T1, T2> = (T1, T2);\n \n \n@@ -157,7 +148,6 @@ type AddTypeParamBound<T1> = (T1, u32);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParamBound<T1: Clone> = (T1, u32);\n \n \n@@ -169,7 +159,6 @@ type AddTypeParamBoundWhereClause<T1> where T1: Clone = (T1, u32);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n \n \n@@ -181,7 +170,6 @@ type AddLifetimeParam<'a> = (&'a u32, &'a u32);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n \n \n@@ -193,7 +181,6 @@ type AddLifetimeParamBound<'a, 'b> = (&'a u32, &'b u32);\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBound<'a, 'b: 'a> = (&'a u32, &'b u32);\n \n \n@@ -207,7 +194,6 @@ where 'b: 'a\n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBoundWhereClause<'a, 'b, 'c>\n where 'b: 'a,\n       'c: 'a\n@@ -227,8 +213,6 @@ mod change_trait_bound_indirectly {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T: Trait> = (T, u32);\n }\n \n@@ -243,7 +227,5 @@ mod change_trait_bound_indirectly_in_where_clause {\n \n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T> where T : Trait = (T, u32);\n }"}, {"sha": "ec4ae62b12b133d42687bcd70ed0aa25bf4b051f", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -34,8 +34,6 @@ pub fn const_negation() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn const_negation() -> i32 {\n     -1\n }\n@@ -51,8 +49,6 @@ pub fn const_bitwise_not() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn const_bitwise_not() -> i32 {\n     !99\n }\n@@ -68,8 +64,6 @@ pub fn var_negation(x: i32, y: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n }\n@@ -85,8 +79,6 @@ pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n }\n@@ -102,8 +94,6 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated,TypeckTables\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n }\n@@ -119,8 +109,6 @@ pub fn first_const_add() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n }\n@@ -136,8 +124,6 @@ pub fn second_const_add() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n }\n@@ -153,8 +139,6 @@ pub fn first_var_add(a: i32, b: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n }\n@@ -170,8 +154,6 @@ pub fn second_var_add(a: i32, b: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n }\n@@ -187,8 +169,6 @@ pub fn plus_to_minus(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n }\n@@ -204,8 +184,6 @@ pub fn plus_to_mult(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n }\n@@ -221,8 +199,6 @@ pub fn plus_to_div(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n }\n@@ -238,8 +214,6 @@ pub fn plus_to_mod(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n }\n@@ -255,8 +229,6 @@ pub fn and_to_or(a: bool, b: bool) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n }\n@@ -272,8 +244,6 @@ pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n }\n@@ -289,8 +259,6 @@ pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n }\n@@ -306,8 +274,6 @@ pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n }\n@@ -323,8 +289,6 @@ pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n }\n@@ -340,8 +304,6 @@ pub fn eq_to_uneq(a: i32) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n }\n@@ -357,8 +319,6 @@ pub fn eq_to_lt(a: i32) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn eq_to_lt(a: i32) -> bool {\n     a < 1\n }\n@@ -374,8 +334,6 @@ pub fn eq_to_gt(a: i32) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn eq_to_gt(a: i32) -> bool {\n     a > 1\n }\n@@ -391,8 +349,6 @@ pub fn eq_to_le(a: i32) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n }\n@@ -408,8 +364,6 @@ pub fn eq_to_ge(a: i32) -> bool {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n }\n@@ -427,8 +381,6 @@ pub fn type_cast(a: u8) -> u64 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated,TypeckTables\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n     let c = b as u64;\n@@ -446,8 +398,6 @@ pub fn value_cast(a: u32) -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n }\n@@ -466,8 +416,6 @@ pub fn lvalue() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn lvalue() -> i32 {\n     let mut x = 10;\n     let mut y = 11;\n@@ -488,8 +436,6 @@ pub fn rvalue() -> i32 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n     x = 8;\n@@ -507,8 +453,6 @@ pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n #[cfg(not(cfail1))]\n #[rustc_clean(except=\"HirBody,MirOptimized,MirValidated\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]\n }"}, {"sha": "eae5aea651075d96bd5bab54129ba5db379b63fe", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -40,8 +40,6 @@ fn change_loop_body() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_loop_body() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -67,8 +65,6 @@ fn change_loop_condition() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_loop_condition() {\n     let mut _x = 0;\n     while let Some(1u32) = None {\n@@ -93,8 +89,6 @@ fn add_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_break() {\n     let mut _x = 0;\n     while let Some(0u32) = None {\n@@ -120,8 +114,6 @@ fn add_loop_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n@@ -147,8 +139,6 @@ fn add_loop_label_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n@@ -176,8 +166,6 @@ fn change_break_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_break_label() {\n     let mut _x = 0;\n     'outer: while let Some(0u32) = None {\n@@ -205,8 +193,6 @@ fn add_loop_label_to_continue() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: while let Some(0u32) = None {\n@@ -234,8 +220,6 @@ fn change_continue_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_label() {\n     let mut _x = 0;\n     'outer: while let Some(0u32) = None {\n@@ -263,8 +247,6 @@ fn change_continue_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_to_break() {\n     let mut _x = 0;\n     while let Some(0u32) = None {"}, {"sha": "6b1898e401b247b1d725c627e1b0b2da63311b14", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -40,8 +40,6 @@ fn change_loop_body() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_loop_body() {\n     let mut _x = 0;\n     while true {\n@@ -67,8 +65,6 @@ fn change_loop_condition() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_loop_condition() {\n     let mut _x = 0;\n     while false {\n@@ -93,8 +89,6 @@ fn add_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_break() {\n     let mut _x = 0;\n     while true {\n@@ -120,8 +114,6 @@ fn add_loop_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label() {\n     let mut _x = 0;\n     'label: while true {\n@@ -147,8 +139,6 @@ fn add_loop_label_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_break() {\n     let mut _x = 0;\n     'label: while true {\n@@ -176,8 +166,6 @@ fn change_break_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_break_label() {\n     let mut _x = 0;\n     'outer: while true {\n@@ -205,8 +193,6 @@ fn add_loop_label_to_continue() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_loop_label_to_continue() {\n     let mut _x = 0;\n     'label: while true {\n@@ -234,8 +220,6 @@ fn change_continue_label() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_label() {\n     let mut _x = 0;\n     'outer: while true {\n@@ -263,8 +247,6 @@ fn change_continue_to_break() {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n-#[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_continue_to_break() {\n     let mut _x = 0;\n     while true {"}, {"sha": "ce7f5792cea9e72b1677d85fed793f847174923b", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a60c9611399b1b5c9c703b975af4724b432b0d/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=d8a60c9611399b1b5c9c703b975af4724b432b0d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions:rpass1 rpass2 rpass3\n-// compile-flags: -Z query-dep-graph -g -Zincremental-cc\n+// compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n // This test case makes sure that we detect if paths emitted into debuginfo"}, {"sha": "917c2c9dbce4f10434ebb49e6b7984d7414785f9", "filename": "src/test/incremental/unchecked_dirty_clean_metadata.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/23032d0afa2b0e0c60a9b2ae62709f846d90007c/src%2Ftest%2Fincremental%2Funchecked_dirty_clean_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23032d0afa2b0e0c60a9b2ae62709f846d90007c/src%2Ftest%2Fincremental%2Funchecked_dirty_clean_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Funchecked_dirty_clean_metadata.rs?ref=23032d0afa2b0e0c60a9b2ae62709f846d90007c", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// revisions: rpass1 cfail2\n-// compile-flags: -Z query-dep-graph\n-\n-#![allow(warnings)]\n-#![feature(rustc_attrs)]\n-\n-// Sanity check for the dirty-clean system. We add\n-// #[rustc_metadata_dirty]/#[rustc_metadata_clean] attributes in places that\n-// are not checked and make sure that this causes an error.\n-\n-fn main() {\n-\n-    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n-    {\n-        // empty block\n-    }\n-\n-    #[rustc_metadata_clean(cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n-    {\n-        // empty block\n-    }\n-}\n-"}]}