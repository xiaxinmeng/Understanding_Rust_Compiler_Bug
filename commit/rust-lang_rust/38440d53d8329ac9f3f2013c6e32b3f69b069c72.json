{"sha": "38440d53d8329ac9f3f2013c6e32b3f69b069c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NDQwZDUzZDgzMjlhYzlmM2YyMDEzYzZlMzJiM2Y2OWIwNjljNzI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T18:42:42Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-10T12:44:54Z"}, "message": "Cleanup repr check, fix packed repr check and test", "tree": {"sha": "9f8bef46fc35c1ad4476e6c91e68c085c39da811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8bef46fc35c1ad4476e6c91e68c085c39da811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38440d53d8329ac9f3f2013c6e32b3f69b069c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38440d53d8329ac9f3f2013c6e32b3f69b069c72", "html_url": "https://github.com/rust-lang/rust/commit/38440d53d8329ac9f3f2013c6e32b3f69b069c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38440d53d8329ac9f3f2013c6e32b3f69b069c72/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e670b8754b8262b5071a96c32cbcd22ff968f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e670b8754b8262b5071a96c32cbcd22ff968f4", "html_url": "https://github.com/rust-lang/rust/commit/c9e670b8754b8262b5071a96c32cbcd22ff968f4"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "4ba6944805d601b54c72b1e8734e4fab82329528", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38440d53d8329ac9f3f2013c6e32b3f69b069c72/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38440d53d8329ac9f3f2013c6e32b3f69b069c72/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=38440d53d8329ac9f3f2013c6e32b3f69b069c72", "patch": "@@ -12,10 +12,11 @@ use ra_syntax::ast::{self, NameOwner, VisibilityOwner};\n use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n \n use crate::{\n-    attr::AttrInput,\n+    attr::{Attr, AttrInput},\n     body::{CfgExpander, LowerCtx},\n     db::DefDatabase,\n     item_tree::{AttrOwner, Field, Fields, ItemTree, ModItem},\n+    path::{ModPath, PathKind},\n     src::HasChildSource,\n     src::HasSource,\n     trace::Trace,\n@@ -69,8 +70,12 @@ pub enum ReprKind {\n \n fn repr_from_value(item_tree: &ItemTree, of: AttrOwner) -> Option<ReprKind> {\n     item_tree.attrs(of).iter().find_map(|a| {\n-        if a.path.segments[0].to_string() == \"repr\" {\n-            if let Some(AttrInput::TokenTree(subtree)) = &a.input {\n+        if let Attr {\n+            path: ModPath { kind: PathKind::Plain, segments },\n+            input: Some(AttrInput::TokenTree(subtree)),\n+        } = a\n+        {\n+            if segments.len() == 1 && segments[0].to_string() == \"repr\" {\n                 parse_repr_tt(subtree)\n             } else {\n                 None"}, {"sha": "a4a7aa2280e227a00d1bfcbfef538f9608ce84e1", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38440d53d8329ac9f3f2013c6e32b3f69b069c72/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38440d53d8329ac9f3f2013c6e32b3f69b069c72/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=38440d53d8329ac9f3f2013c6e32b3f69b069c72", "patch": "@@ -565,7 +565,7 @@ fn highlight_element(\n                 _ => h,\n             }\n         }\n-        T![&] => {\n+        REF_EXPR => {\n             let ref_expr = element.into_node().and_then(ast::RefExpr::cast)?;\n             let expr = ref_expr.expr()?;\n             let field_expr = match expr {\n@@ -582,7 +582,7 @@ fn highlight_element(\n             // FIXME This needs layout computation to be correct. It will highlight\n             // more than it should with the current implementation.\n \n-            Highlight::new(HighlightTag::Operator) | HighlightModifier::Unsafe\n+            HighlightTag::Operator | HighlightModifier::Unsafe\n         }\n         p if p.is_punct() => match p {\n             T![::] | T![->] | T![=>] | T![&] | T![..] | T![=] | T![@] => {"}, {"sha": "a7f5ad86225258e72ed5d260c5a81da406784bd7", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38440d53d8329ac9f3f2013c6e32b3f69b069c72/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38440d53d8329ac9f3f2013c6e32b3f69b069c72/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=38440d53d8329ac9f3f2013c6e32b3f69b069c72", "patch": "@@ -295,8 +295,6 @@ static mut global_mut: TypeForStaticMut = TypeForStaticMut { a: 0 };\n #[repr(packed)]\n struct Packed {\n     a: u16,\n-    b: u8,\n-    c: u32,\n }\n \n trait DoTheAutoref {\n@@ -313,11 +311,11 @@ struct HasAligned {\n }\n \n impl DoTheAutoref for NeedsAlign {\n-    fn calls_autored(&self) {}\n+    fn calls_autoref(&self) {}\n }\n \n fn main() {\n-    let x = &5 as *const usize;\n+    let x = &5 as *const _ as *const usize;\n     let u = Union { b: 0 };\n     unsafe {\n         unsafe_fn();\n@@ -327,13 +325,11 @@ fn main() {\n             Union { a } => (),\n         }\n         HasUnsafeFn.unsafe_method();\n-        let y = *(x);\n+        let _y = *(x);\n         let z = -x;\n         let a = global_mut.a;\n-        let packed = Packed { a: 0, b: 0, c: 0 };\n-        let a = &packed.a;\n-        let b = &packed.b;\n-        let c = &packed.c;\n+        let packed = Packed { a: 0 };\n+        let _a = &packed.a;\n         let h = HasAligned{ a: NeedsAlign { a: 1 } };\n         h.a.calls_autoref();\n     }"}]}