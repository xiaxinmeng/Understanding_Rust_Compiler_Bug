{"sha": "e80c0204455534c5d9ec4f92dd8bffd392513fc3", "node_id": "C_kwDOAAsO6NoAKGU4MGMwMjA0NDU1NTM0YzVkOWVjNGY5MmRkOGJmZmQzOTI1MTNmYzM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:20:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:20:15Z"}, "message": "more hacks", "tree": {"sha": "5e7988e077d955e0c8c56ec1d93507a5c292a1fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7988e077d955e0c8c56ec1d93507a5c292a1fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80c0204455534c5d9ec4f92dd8bffd392513fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80c0204455534c5d9ec4f92dd8bffd392513fc3", "html_url": "https://github.com/rust-lang/rust/commit/e80c0204455534c5d9ec4f92dd8bffd392513fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80c0204455534c5d9ec4f92dd8bffd392513fc3/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc02b0f321da0e16e4abb4d0515440055c3bbd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc02b0f321da0e16e4abb4d0515440055c3bbd7", "html_url": "https://github.com/rust-lang/rust/commit/ddc02b0f321da0e16e4abb4d0515440055c3bbd7"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "1e82d4d1ff0bb34c3e5ae8045495b748941200c2", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=e80c0204455534c5d9ec4f92dd8bffd392513fc3", "patch": "@@ -785,7 +785,8 @@ macro_rules! int_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            unsafe { intrinsics::unchecked_shl(self, rhs.try_into().ok().unwrap_unchecked()) }\n+            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n+            unsafe { intrinsics::unchecked_shl(self, rhs as _) }\n         }\n \n         /// Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is\n@@ -833,7 +834,8 @@ macro_rules! int_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            unsafe { intrinsics::unchecked_shr(self, rhs.try_into().ok().unwrap_unchecked()) }\n+            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n+            unsafe { intrinsics::unchecked_shr(self, rhs as _) }\n         }\n \n         /// Checked absolute value. Computes `self.abs()`, returning `None` if"}, {"sha": "b0488dc069b790195fdbc12264283a10312b772b", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=e80c0204455534c5d9ec4f92dd8bffd392513fc3", "patch": "@@ -3,7 +3,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ascii;\n-use crate::convert::TryInto;\n use crate::intrinsics;\n use crate::mem;\n use crate::ops::{Add, Mul, Sub};"}, {"sha": "795645b8b7b87ba20a04bcba41925241bb6dfb30", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=e80c0204455534c5d9ec4f92dd8bffd392513fc3", "patch": "@@ -939,7 +939,8 @@ macro_rules! uint_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            unsafe { intrinsics::unchecked_shl(self, rhs.try_into().ok().unwrap_unchecked()) }\n+            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n+            unsafe { intrinsics::unchecked_shl(self, rhs as _) }\n         }\n \n         /// Checked shift right. Computes `self >> rhs`, returning `None`\n@@ -987,7 +988,8 @@ macro_rules! uint_impl {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`.\n             // Any legal shift amount is losslessly representable in the self type.\n-            unsafe { intrinsics::unchecked_shr(self, rhs.try_into().ok().unwrap_unchecked()) }\n+            // FIXME(const-hack) replace with `.try_into().ok().unwrap_unchecked()`.\n+            unsafe { intrinsics::unchecked_shr(self, rhs as _) }\n         }\n \n         /// Checked exponentiation. Computes `self.pow(exp)`, returning `None` if"}, {"sha": "555d58fad844027c98e48c36218b005930b01f8c", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80c0204455534c5d9ec4f92dd8bffd392513fc3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=e80c0204455534c5d9ec4f92dd8bffd392513fc3", "patch": "@@ -1764,7 +1764,12 @@ pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usiz\n     // miracles, given the situations this case has to deal with.\n \n     // SAFETY: a is power-of-two hence non-zero. stride == 0 case is handled above.\n-    let gcdpow = unsafe { cttz_nonzero(stride).min(cttz_nonzero(a)) };\n+    // FIXME(const-hack) replace with min\n+    let gcdpow = unsafe {\n+        let x = cttz_nonzero(stride);\n+        let y = cttz_nonzero(a);\n+        if x < y { x } else { y }\n+    };\n     // SAFETY: gcdpow has an upper-bound that\u2019s at most the number of bits in a usize.\n     let gcd = unsafe { unchecked_shl(1usize, gcdpow) };\n     // SAFETY: gcd is always greater or equal to 1."}]}