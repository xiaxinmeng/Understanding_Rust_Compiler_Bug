{"sha": "7cc28c128be0363d83accf318b87b40ba6168384", "node_id": "C_kwDOAAsO6NoAKDdjYzI4YzEyOGJlMDM2M2Q4M2FjY2YzMThiODdiNDBiYTYxNjgzODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-30T10:30:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-30T10:30:42Z"}, "message": "Auto merge of #93468 - matthiaskrgr:rollup-vxullvd, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #93256 (Make `join!` description more accurate)\n - #93358 (Add note suggesting that predicate may be satisfied, but is not `const`)\n - #93362 (Do not register infer var for GAT projection in RPIT)\n - #93391 (rustdoc: remove tooltip from source link)\n - #93414 (Move unstable is_{arch}_feature_detected! macros to std::arch)\n - #93441 (rustdoc: load the set of in-scope traits for modules with no docstring)\n - #93459 (fs: Don't copy d_name from struct dirent)\n - #93463 (Rename _args -> args in format_args expansion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "54f478e686227f316669078b0f9969ca744a874c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f478e686227f316669078b0f9969ca744a874c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc28c128be0363d83accf318b87b40ba6168384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc28c128be0363d83accf318b87b40ba6168384", "html_url": "https://github.com/rust-lang/rust/commit/7cc28c128be0363d83accf318b87b40ba6168384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc28c128be0363d83accf318b87b40ba6168384/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00e130dae74a213338e2b095ec855156d8f3d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e130dae74a213338e2b095ec855156d8f3d8a", "html_url": "https://github.com/rust-lang/rust/commit/a00e130dae74a213338e2b095ec855156d8f3d8a"}, {"sha": "9f6d0cb052e7d06685a851b0776b63dfe5883c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6d0cb052e7d06685a851b0776b63dfe5883c9c", "html_url": "https://github.com/rust-lang/rust/commit/9f6d0cb052e7d06685a851b0776b63dfe5883c9c"}], "stats": {"total": 267, "additions": 219, "deletions": 48}, "files": [{"sha": "bdc92a2c096a4a2a7980d8f74e98440b3079a595", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -791,7 +791,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Thus in the not nicely ordered case we emit the following instead:\n         //\n         //     match (&$arg0, &$arg1, \u2026) {\n-        //         _args => [ArgumentV1::new(_args.$i, \u2026), ArgumentV1::new(_args.$j, \u2026), \u2026]\n+        //         args => [ArgumentV1::new(args.$i, \u2026), ArgumentV1::new(args.$j, \u2026), \u2026]\n         //     }\n         //\n         // for the sequence of indices $i, $j, \u2026 governed by fmt_arg_index_and_ty.\n@@ -804,7 +804,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 self.ecx.expr_addr_of(expansion_span, P(e.take()))\n             } else {\n                 let def_site = self.ecx.with_def_site_ctxt(span);\n-                let args_tuple = self.ecx.expr_ident(def_site, Ident::new(sym::_args, def_site));\n+                let args_tuple = self.ecx.expr_ident(def_site, Ident::new(sym::args, def_site));\n                 let member = Ident::new(sym::integer(arg_index), def_site);\n                 self.ecx.expr(def_site, ast::ExprKind::Field(args_tuple, member))\n             };\n@@ -828,7 +828,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     .map(|e| self.ecx.expr_addr_of(e.span.with_ctxt(self.macsp.ctxt()), e))\n                     .collect();\n \n-                let pat = self.ecx.pat_ident(self.macsp, Ident::new(sym::_args, self.macsp));\n+                let pat = self.ecx.pat_ident(self.macsp, Ident::new(sym::args, self.macsp));\n                 let arm = self.ecx.arm(self.macsp, pat, args_array);\n                 let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n                 self.ecx.expr_match(self.macsp, head, vec![arm])"}, {"sha": "9dc34260de76697047c831da46ec30ec24d6ca40", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -7,7 +7,6 @@ use crate::interpret::{\n };\n \n use rustc_errors::ErrorReported;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -216,7 +215,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n+    assert!(key.param_env.is_const());\n     // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n@@ -251,7 +250,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n+    assert!(key.param_env.is_const());\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was"}, {"sha": "e7dca94806cb740243e7ab0af2c141a84635e2ce", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -569,13 +569,15 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {\n                 tcx,\n                 ty_op: |ty| match ty.kind() {\n-                    ty::Projection(projection_ty) => infcx.infer_projection(\n-                        self.param_env,\n-                        *projection_ty,\n-                        traits::ObligationCause::misc(self.value_span, self.body_id),\n-                        0,\n-                        &mut self.obligations,\n-                    ),\n+                    ty::Projection(projection_ty) if !projection_ty.has_escaping_bound_vars() => {\n+                        infcx.infer_projection(\n+                            self.param_env,\n+                            *projection_ty,\n+                            traits::ObligationCause::misc(self.value_span, self.body_id),\n+                            0,\n+                            &mut self.obligations,\n+                        )\n+                    }\n                     _ => ty,\n                 },\n                 lt_op: |lt| lt,"}, {"sha": "4c7f3482776d7ff332b562ad840c1e84043a7178", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -86,15 +86,14 @@ declare_lint_pass!(\n \n impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        use rustc_middle::ty;\n         use rustc_middle::ty::PredicateKind::*;\n \n         let predicates = cx.tcx.explicit_predicates_of(item.def_id);\n         for &(predicate, span) in predicates.predicates {\n             let Trait(trait_predicate) = predicate.kind().skip_binder() else {\n                 continue\n             };\n-            if trait_predicate.constness == ty::BoundConstness::ConstIfConst {\n+            if trait_predicate.is_const_if_const() {\n                 // `~const Drop` definitely have meanings so avoid linting here.\n                 continue;\n             }"}, {"sha": "e7a8e71ce71b008c052604ea79caea4e4e634b12", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -784,6 +784,11 @@ impl<'tcx> TraitPredicate<'tcx> {\n     pub fn self_ty(self) -> Ty<'tcx> {\n         self.trait_ref.self_ty()\n     }\n+\n+    #[inline]\n+    pub fn is_const_if_const(self) -> bool {\n+        self.constness == BoundConstness::ConstIfConst\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {\n@@ -803,6 +808,11 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n             p\n         });\n     }\n+\n+    #[inline]\n+    pub fn is_const_if_const(self) -> bool {\n+        self.skip_binder().is_const_if_const()\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n@@ -1388,6 +1398,11 @@ impl<'tcx> ParamEnv<'tcx> {\n         self.packed.tag().constness\n     }\n \n+    #[inline]\n+    pub fn is_const(self) -> bool {\n+        self.packed.tag().constness == hir::Constness::Const\n+    }\n+\n     /// Construct a trait environment with no where-clauses in scope\n     /// where the values of all `impl Trait` and other hidden types\n     /// are revealed. This is suitable for monomorphized, post-typeck\n@@ -1503,6 +1518,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n             polarity: ty::ImplPolarity::Positive,\n         })\n     }\n+\n     #[inline]\n     pub fn without_const(self) -> PolyTraitPredicate<'tcx> {\n         self.with_constness(BoundConstness::NotConst)"}, {"sha": "757c430e7999c27dec4da9653418d0f339f32491", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -272,7 +272,6 @@ symbols! {\n         __H,\n         __S,\n         __try_var,\n-        _args,\n         _d,\n         _e,\n         _task_context,\n@@ -324,6 +323,7 @@ symbols! {\n         append_const_msg,\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n+        args,\n         arith_offset,\n         arm,\n         arm_target_feature,"}, {"sha": "687bd16ba30f451ba4071a978ce5223b9fb07945", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -439,6 +439,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n+\n+                        if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n+                            let non_const_predicate = trait_ref.without_const();\n+                            let non_const_obligation = Obligation {\n+                                cause: obligation.cause.clone(),\n+                                param_env: obligation.param_env.without_const(),\n+                                predicate: non_const_predicate.to_predicate(tcx),\n+                                recursion_depth: obligation.recursion_depth,\n+                            };\n+                            if self.predicate_may_hold(&non_const_obligation) {\n+                                err.span_note(\n+                                    span,\n+                                    &format!(\n+                                        \"the trait `{}` is implemented for `{}`, \\\n+                                        but that implementation is not `const`\",\n+                                        non_const_predicate.print_modifiers_and_trait_path(),\n+                                        trait_ref.skip_binder().self_ty(),\n+                                    ),\n+                                );\n+                            }\n+                        }\n+\n                         if let Some((msg, span)) = type_def {\n                             err.span_label(span, &msg);\n                         }"}, {"sha": "db86041f6180b5efdc49a71aebda28ba7a8d2020", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -305,7 +305,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.unsize_trait() == Some(def_id) {\n                 self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n             } else if lang_items.drop_trait() == Some(def_id)\n-                && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+                && obligation.predicate.is_const_if_const()\n             {\n                 self.assemble_const_drop_candidates(obligation, &mut candidates);\n             } else {"}, {"sha": "639884844b25d599208805359473fb4742292bbe", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -72,9 +72,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // CheckPredicate(&A: Super)\n         // CheckPredicate(A: ~const Super) // <- still const env, failure\n         // ```\n-        if obligation.param_env.constness() == Constness::Const\n-            && obligation.predicate.skip_binder().constness == ty::BoundConstness::NotConst\n-        {\n+        if obligation.param_env.is_const() && !obligation.predicate.is_const_if_const() {\n             new_obligation = TraitObligation {\n                 cause: obligation.cause.clone(),\n                 param_env: obligation.param_env.without_const(),"}, {"sha": "47427395b93b36adff83c8dda2f9034cc12346bf", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -1173,9 +1173,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ImplCandidate(def_id)\n                         if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                     // const param\n-                    ParamCandidate(trait_pred)\n-                        if trait_pred.skip_binder().constness\n-                            == ty::BoundConstness::ConstIfConst => {}\n+                    ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // auto trait impl\n                     AutoImplCandidate(..) => {}\n                     // generator, this will raise error in other places"}, {"sha": "fa4eb0d2f33eead93f5362d3907d3618d7b217b6", "filename": "library/core/src/future/join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -9,7 +9,7 @@ use crate::task::{Context, Poll};\n /// Polls multiple futures simultaneously, returning a tuple\n /// of all results once complete.\n ///\n-/// While `join!(a, b)` is similar to `(a.await, b.await)`,\n+/// While `join!(a, b).await` is similar to `(a.await, b.await)`,\n /// `join!` polls both futures concurrently and is therefore more efficient.\n ///\n /// # Examples"}, {"sha": "16b8bf68242ef5bd1ebf9f781c283caf344162bf", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -1504,3 +1504,19 @@ fn create_dir_long_paths() {\n     let path = Path::new(\"\");\n     assert_eq!(path.canonicalize().unwrap_err().kind(), crate::io::ErrorKind::NotFound);\n }\n+\n+/// Ensure ReadDir works on large directories.\n+/// Regression test for https://github.com/rust-lang/rust/issues/93384.\n+#[test]\n+fn read_large_dir() {\n+    let tmpdir = tmpdir();\n+\n+    let count = 32 * 1024;\n+    for i in 0..count {\n+        check!(fs::File::create(tmpdir.join(&i.to_string())));\n+    }\n+\n+    for entry in fs::read_dir(tmpdir.path()).unwrap() {\n+        entry.unwrap();\n+    }\n+}"}, {"sha": "7c8cb5378a2ab2c6b429d7f9e2d620f1f6c5319e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -403,13 +403,6 @@ pub use alloc_crate::string;\n pub use alloc_crate::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n-#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-// The `no_inline`-attribute is required to make the documentation of all\n-// targets available.\n-// See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n-// more information.\n-#[doc(no_inline)] // Note (#82861): required for correct documentation\n-pub use core::arch;\n #[stable(feature = \"core_array\", since = \"1.36.0\")]\n pub use core::array;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -527,6 +520,31 @@ pub mod task {\n     pub use alloc::task::*;\n }\n \n+#[doc = include_str!(\"../../stdarch/crates/core_arch/src/core_arch_docs.md\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+pub mod arch {\n+    #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+    // The `no_inline`-attribute is required to make the documentation of all\n+    // targets available.\n+    // See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n+    // more information.\n+    #[doc(no_inline)] // Note (#82861): required for correct documentation\n+    pub use core::arch::*;\n+\n+    #[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n+    pub use std_detect::is_x86_feature_detected;\n+    #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+    pub use std_detect::{\n+        is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n+        is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n+        is_riscv_feature_detected,\n+    };\n+}\n+\n+// This was stabilized in the crate root so we have to keep it there.\n+#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n+pub use std_detect::is_x86_feature_detected;\n+\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n #[macro_use]\n@@ -545,18 +563,6 @@ mod panicking;\n #[allow(dead_code, unused_attributes)]\n mod backtrace_rs;\n \n-#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n-pub use std_detect::is_x86_feature_detected;\n-#[doc(hidden)]\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-pub use std_detect::*;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-pub use std_detect::{\n-    is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n-    is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n-    is_riscv_feature_detected,\n-};\n-\n // Re-export macros defined in libcore.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]"}, {"sha": "65e000d9215a507a0ab4fedb04e48bc5ec6467c9", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -489,10 +489,18 @@ impl Iterator for ReadDir {\n                     };\n                 }\n \n+                // Only d_reclen bytes of *entry_ptr are valid, so we can't just copy the\n+                // whole thing (#93384).  Instead, copy everything except the name.\n+                let entry_bytes = entry_ptr as *const u8;\n+                let entry_name = ptr::addr_of!((*entry_ptr).d_name) as *const u8;\n+                let name_offset = entry_name.offset_from(entry_bytes) as usize;\n+                let mut entry: dirent64 = mem::zeroed();\n+                ptr::copy_nonoverlapping(entry_bytes, &mut entry as *mut _ as *mut u8, name_offset);\n+\n                 let ret = DirEntry {\n-                    entry: *entry_ptr,\n+                    entry,\n                     // d_name is guaranteed to be null-terminated.\n-                    name: CStr::from_ptr((*entry_ptr).d_name.as_ptr()).to_owned(),\n+                    name: CStr::from_ptr(entry_name as *const _).to_owned(),\n                     dir: Arc::clone(&self.inner),\n                 };\n                 if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {"}, {"sha": "14a9e3acca499e89ceaa3ca54e25702e855b0388", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -14,6 +14,7 @@\n #[test]\n #[cfg(all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")))]\n fn arm_linux() {\n+    use std::arch::is_arm_feature_detected;\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n     println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n@@ -25,6 +26,7 @@ fn arm_linux() {\n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n+    use std::arch::is_aarch64_feature_detected;\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n     println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n@@ -71,6 +73,7 @@ fn aarch64_linux() {\n #[test]\n #[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n fn powerpc_linux() {\n+    use std::arch::is_powerpc_feature_detected;\n     println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n     println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n@@ -79,6 +82,7 @@ fn powerpc_linux() {\n #[test]\n #[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n fn powerpc64_linux() {\n+    use std::arch::is_powerpc64_feature_detected;\n     println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n     println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n@@ -87,6 +91,8 @@ fn powerpc64_linux() {\n #[test]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn x86_all() {\n+    use std::arch::is_x86_feature_detected;\n+\n     // the below is the set of features we can test at runtime, but don't actually\n     // use to gate anything and are thus not part of the X86_ALLOWED_FEATURES list\n "}, {"sha": "eaee02ffdf5d820729ccdf2f95fa08b08c7d24d2", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -1 +1 @@\n-Subproject commit 11c98f6eb9c4ba48b2362ad4960343b312d056b8\n+Subproject commit eaee02ffdf5d820729ccdf2f95fa08b08c7d24d2"}, {"sha": "cc12b7ba05ba38d130ffe36177adeafbd7a81e35", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -182,7 +182,7 @@ impl StylePath {\n \n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n     if let Some(l) = cx.src_href(item) {\n-        write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"goto source code\\\">source</a>\", l)\n+        write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\">source</a>\", l)\n     }\n }\n "}, {"sha": "62b1b7ca7292a25aafd556d53085262427c8115e", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -20,7 +20,7 @@ <h1 class=\"fqn\"> {#- -#}\n         {% endif %}\n         {%- match src_href -%}\n             {%- when Some with (href) -%}\n-                <a class=\"srclink\" href=\"{{href|safe}}\" title=\"goto source code\">source</a> \u00b7 {# -#}\n+                <a class=\"srclink\" href=\"{{href|safe}}\">source</a> \u00b7 {# -#}\n             {%- else -%}\n         {%- endmatch -%}\n         <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\"> {#- -#}"}, {"sha": "86662ebaaca215505d5baaddb3de1bd8b7a45306", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -920,6 +920,7 @@ fn trait_assoc_to_impl_assoc_item<'tcx>(\n ///\n /// NOTE: this cannot be a query because more traits could be available when more crates are compiled!\n /// So it is not stable to serialize cross-crate.\n+#[instrument(level = \"debug\", skip(cx))]\n fn trait_impls_for<'a>(\n     cx: &mut DocContext<'a>,\n     ty: Ty<'a>,"}, {"sha": "edd4e9da66d99043010da3582f9a6163278b457d", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -32,6 +32,11 @@ crate fn early_resolve_intra_doc_links(\n         all_trait_impls: Default::default(),\n     };\n \n+    // Because of the `crate::` prefix, any doc comment can reference\n+    // the crate root's set of in-scope traits. This line makes sure\n+    // it's available.\n+    loader.add_traits_in_scope(CRATE_DEF_ID.to_def_id());\n+\n     // Overridden `visit_item` below doesn't apply to the crate root,\n     // so we have to visit its attributes and reexports separately.\n     loader.load_links_in_attrs(&krate.attrs, krate.span);\n@@ -180,6 +185,11 @@ impl Visitor<'_> for IntraLinkCrateLoader<'_, '_> {\n         if let ItemKind::Mod(..) = item.kind {\n             let old_mod = mem::replace(&mut self.current_mod, self.resolver.local_def_id(item.id));\n \n+            // A module written with a outline doc comments will resolve traits relative\n+            // to the parent module. Make sure the parent module's traits-in-scope are\n+            // loaded, even if the module itself has no doc comments.\n+            self.add_traits_in_parent_scope(self.current_mod.to_def_id());\n+\n             self.load_links_in_attrs(&item.attrs, item.span);\n             self.process_module_children_or_reexports(self.current_mod.to_def_id());\n             visit::walk_item(self, item);"}, {"sha": "bacbcabfc6009a6cf76df43577b970ff8fe7bd12", "filename": "src/test/rustdoc/intra-doc/crate-relative.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -0,0 +1,13 @@\n+pub struct Test<'a> {\n+    data: &'a (),\n+}\n+\n+impl<'a> Test<'a> {\n+    pub fn do_test(&self) {}\n+}\n+\n+// @has crate_relative/demo/index.html\n+// @has - '//a/@href' '../struct.Test.html#method.do_test'\n+pub mod demo {\n+    //! [`crate::Test::do_test`]\n+}"}, {"sha": "49d3399b972f5c83a8815cf7372cff82fe5d9c9e", "filename": "src/test/rustdoc/intra-doc/mod-relative.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -0,0 +1,17 @@\n+pub mod wrapper {\n+\n+    pub struct Test<'a> {\n+        data: &'a (),\n+    }\n+\n+    impl<'a> Test<'a> {\n+        pub fn do_test(&self) {}\n+    }\n+\n+    // @has mod_relative/wrapper/demo/index.html\n+    // @has - '//a/@href' '../struct.Test.html#method.do_test'\n+    /// [`Test::do_test`]\n+    pub mod demo {\n+    }\n+\n+}"}, {"sha": "d065bde88c4141b810e33e48d61472b3328aa2c5", "filename": "src/test/ui/generic-associated-types/issue-93340.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93340.rs?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Scalar: 'static {\n+    type RefType<'a>: ScalarRef<'a>;\n+}\n+\n+pub trait ScalarRef<'a>: 'a {}\n+\n+fn cmp_eq<'a, 'b, A: Scalar, B: Scalar, O: Scalar>(a: A::RefType<'a>, b: B::RefType<'b>) -> O {\n+    todo!()\n+}\n+\n+fn build_expression<A: Scalar, B: Scalar, O: Scalar>(\n+) -> impl Fn(A::RefType<'_>, B::RefType<'_>) -> O {\n+    cmp_eq\n+}\n+\n+fn main() {}"}, {"sha": "06a7a2f63cf5a6408b97b774f617f109403bcd42", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -7,6 +7,11 @@ LL |     const_eval_select((), || {}, || {});\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`, but that implementation is not `const`\n+  --> $DIR/const-eval-select-bad.rs:6:27\n+   |\n+LL |     const_eval_select((), || {}, || {});\n+   |                           ^^^^^\n    = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL"}, {"sha": "0788b17a1c0327d53e3dd0730ce01d0d6496963b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -5,6 +5,11 @@ LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `~const Add` is not implemented for `NonConstAdd`\n+note: the trait `Add` is implemented for `NonConstAdd`, but that implementation is not `const`\n+  --> $DIR/assoc-type.rs:18:16\n+   |\n+LL |     type Bar = NonConstAdd;\n+   |                ^^^^^^^^^^^\n note: required by a bound in `Foo::Bar`\n   --> $DIR/assoc-type.rs:14:15\n    |"}, {"sha": "35b7fe8e401c3162b674e93169a3c6b9d3566ee5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -7,6 +7,11 @@ LL | pub const EQ: bool = equals_self(&S);\n    |                      required by a bound introduced by this call\n    |\n    = help: the trait `~const PartialEq` is not implemented for `S`\n+note: the trait `PartialEq` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-nonconst.rs:19:34\n+   |\n+LL | pub const EQ: bool = equals_self(&S);\n+   |                                  ^^\n note: required by a bound in `equals_self`\n   --> $DIR/call-generic-method-nonconst.rs:12:25\n    |"}, {"sha": "d280cd2556f06f6c0eeed84d923930f512e3b6a1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -28,6 +28,11 @@ LL |         const _: () = check($exp);\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n+note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:46:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:17:8\n    |"}, {"sha": "d280cd2556f06f6c0eeed84d923930f512e3b6a1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -28,6 +28,11 @@ LL |         const _: () = check($exp);\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n+note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:46:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:17:8\n    |"}, {"sha": "bc807507fd6683fbf8deda4b6db4cc9aea466547", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n LL |         foo::<()>();\n    |               ^^ the trait `~const Tr` is not implemented for `()`\n    |\n+note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+   |\n+LL |         foo::<()>();\n+   |               ^^\n note: required by a bound in `foo`\n   --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n    |"}, {"sha": "f9b5d81c63b85a420c3c591456a1e8cc60fe8655", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cc28c128be0363d83accf318b87b40ba6168384/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=7cc28c128be0363d83accf318b87b40ba6168384", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause.rs:14:5\n+   |\n+LL |     T::b();\n+   |     ^^^^\n note: required by a bound in `Foo::b`\n   --> $DIR/trait-where-clause.rs:8:24\n    |\n@@ -20,6 +25,11 @@ error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause.rs:16:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:9:13\n    |"}]}