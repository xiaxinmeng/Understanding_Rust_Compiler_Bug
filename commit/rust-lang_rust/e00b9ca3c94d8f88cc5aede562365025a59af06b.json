{"sha": "e00b9ca3c94d8f88cc5aede562365025a59af06b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMGI5Y2EzYzk0ZDhmODhjYzVhZWRlNTYyMzY1MDI1YTU5YWYwNmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-19T19:46:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-19T19:46:37Z"}, "message": "Merge #3215\n\n3215: Exclude methods from non-parameter types introduced by generic constraints r=flodiebold a=lnicola\n\nFixes #3184.\r\n\r\nr? @flodiebold\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "e5c668e033b33a11208bb0e2f3fd8bee51ad0f2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c668e033b33a11208bb0e2f3fd8bee51ad0f2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e00b9ca3c94d8f88cc5aede562365025a59af06b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTZCdCRBK7hj4Ov3rIwAAdHIIAIQIV2R7hphScUx2GcAv8T1i\n/6CezMDx0Ak4zOtNUxdbqGoI36MtcdLKVO9s/Rv2XypqDvq7QECMQ9pKFPcmX/RI\nTIxWubPv5zkvFIZ/mX906OVcXQOH6PETIZhJMQ7N0mvMk87PJRkeK/5CI9NmqED7\n8WmT5/Sx3S6uZpW3Xi3inP4M2jB3ux6lTxuTCyP0oA5/Fwt/ID5T+xed/B+UAwqM\n8wPz1yOhhgKDf6A9Y3ayP5VaydD83gpQFmo16C72GQHTnjQV6uocJ0Jo1ohbe1Kl\nhh4eCUiE6iX0DQde8/kDR7OHcx5FDgL9P5uBQLQPItbiM/dBl9LlIJ+le0Qjjtk=\n=+1QB\n-----END PGP SIGNATURE-----\n", "payload": "tree e5c668e033b33a11208bb0e2f3fd8bee51ad0f2b\nparent 889851b52e05f95bf04c6b577a0a63b8e0e523cb\nparent 5b05209744ce7dcd15f814482babbfd163553b57\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582141597 +0000\ncommitter GitHub <noreply@github.com> 1582141597 +0000\n\nMerge #3215\n\n3215: Exclude methods from non-parameter types introduced by generic constraints r=flodiebold a=lnicola\n\nFixes #3184.\r\n\r\nr? @flodiebold\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e00b9ca3c94d8f88cc5aede562365025a59af06b", "html_url": "https://github.com/rust-lang/rust/commit/e00b9ca3c94d8f88cc5aede562365025a59af06b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e00b9ca3c94d8f88cc5aede562365025a59af06b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "889851b52e05f95bf04c6b577a0a63b8e0e523cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/889851b52e05f95bf04c6b577a0a63b8e0e523cb", "html_url": "https://github.com/rust-lang/rust/commit/889851b52e05f95bf04c6b577a0a63b8e0e523cb"}, {"sha": "5b05209744ce7dcd15f814482babbfd163553b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b05209744ce7dcd15f814482babbfd163553b57", "html_url": "https://github.com/rust-lang/rust/commit/5b05209744ce7dcd15f814482babbfd163553b57"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "988d83af52940844603c8a83e02773d2758d8e1d", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e00b9ca3c94d8f88cc5aede562365025a59af06b/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00b9ca3c94d8f88cc5aede562365025a59af06b/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=e00b9ca3c94d8f88cc5aede562365025a59af06b", "patch": "@@ -377,12 +377,17 @@ fn iterate_trait_method_candidates<T>(\n ) -> Option<T> {\n     // if ty is `impl Trait` or `dyn Trait`, the trait doesn't need to be in scope\n     let inherent_trait = self_ty.value.inherent_trait().into_iter();\n-    // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n-    let traits_from_env = env\n-        .trait_predicates_for_self_ty(&self_ty.value)\n-        .map(|tr| tr.trait_)\n-        .flat_map(|t| all_super_traits(db, t));\n-    let traits = inherent_trait.chain(traits_from_env).chain(traits_in_scope.iter().copied());\n+    let env_traits = if let Ty::Placeholder(_) = self_ty.value {\n+        // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n+        env.trait_predicates_for_self_ty(&self_ty.value)\n+            .map(|tr| tr.trait_)\n+            .flat_map(|t| all_super_traits(db, t))\n+            .collect()\n+    } else {\n+        Vec::new()\n+    };\n+    let traits =\n+        inherent_trait.chain(env_traits.into_iter()).chain(traits_in_scope.iter().copied());\n     'traits: for t in traits {\n         let data = db.trait_data(t);\n "}, {"sha": "644d59e17c01146c7612c55e18476f2f38c69999", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e00b9ca3c94d8f88cc5aede562365025a59af06b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00b9ca3c94d8f88cc5aede562365025a59af06b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=e00b9ca3c94d8f88cc5aede562365025a59af06b", "patch": "@@ -1007,6 +1007,29 @@ fn test() { foo.call()<|>; }\n     );\n }\n \n+#[test]\n+fn method_resolution_non_parameter_type() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+mod a {\n+    pub trait Foo {\n+        fn foo(&self);\n+    }\n+}\n+\n+struct Wrapper<T>(T);\n+fn foo<T>(t: Wrapper<T>)\n+where\n+    Wrapper<T>: a::Foo,\n+{\n+    t.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n #[test]\n fn method_resolution_slow() {\n     // this can get quite slow if we set the solver size limit too high"}]}