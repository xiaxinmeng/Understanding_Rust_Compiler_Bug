{"sha": "037e189783b6c689640b1c177cd32ccb385dc237", "node_id": "C_kwDOAAsO6NoAKDAzN2UxODk3ODNiNmM2ODk2NDBiMWMxNzdjZDMyY2NiMzg1ZGMyMzc", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-20T18:32:54Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-20T18:42:35Z"}, "message": "Remove `box_alloc` from `Machine` trait.", "tree": {"sha": "b2d6712f7279682859c9f8159259c09f1f459431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d6712f7279682859c9f8159259c09f1f459431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037e189783b6c689640b1c177cd32ccb385dc237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037e189783b6c689640b1c177cd32ccb385dc237", "html_url": "https://github.com/rust-lang/rust/commit/037e189783b6c689640b1c177cd32ccb385dc237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037e189783b6c689640b1c177cd32ccb385dc237/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7f5a38186c968e721a8c541f33f6c41a9593f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7f5a38186c968e721a8c541f33f6c41a9593f5", "html_url": "https://github.com/rust-lang/rust/commit/1b7f5a38186c968e721a8c541f33f6c41a9593f5"}], "stats": {"total": 22, "additions": 1, "deletions": 21}, "files": [{"sha": "daf81b64ed9644d7444fdd441de172db8c0819be", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=037e189783b6c689640b1c177cd32ccb385dc237", "patch": "@@ -406,13 +406,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Err(ConstEvalErrKind::NeedsRfc(\"pointer arithmetic or comparison\".to_string()).into())\n     }\n \n-    fn box_alloc(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _dest: &PlaceTy<'tcx>,\n-    ) -> InterpResult<'tcx> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"heap allocations via `box` keyword\".to_string()).into())\n-    }\n-\n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         // The step limit has already been hit in a previous call to `before_terminator`.\n         if ecx.machine.steps_remaining == 0 {"}, {"sha": "5a654207a07f327ea9b95d4ed1539cb865b2c09d", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=037e189783b6c689640b1c177cd32ccb385dc237", "patch": "@@ -152,7 +152,7 @@ pub enum StackPopCleanup {\n     /// `ret` stores the block we jump to on a normal return, while `unwind`\n     /// stores the block used for cleanup during unwinding.\n     Goto { ret: Option<mir::BasicBlock>, unwind: StackPopUnwind },\n-    /// Just do nothing: Used by Main and for the `box_alloc` hook in miri.\n+    /// Just do nothing: Used by Main and for TLS hooks in miri.\n     /// `cleanup` says whether locals are deallocated. Static computation\n     /// wants them leaked to intern what they need (and just throw away\n     /// the entire `ecx` when it is done)."}, {"sha": "4e13c2ff9f876a6a17aac423d01fbde55e70afba", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=037e189783b6c689640b1c177cd32ccb385dc237", "patch": "@@ -208,12 +208,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         right: &ImmTy<'tcx, Self::PointerTag>,\n     ) -> InterpResult<'tcx, (Scalar<Self::PointerTag>, bool, Ty<'tcx>)>;\n \n-    /// Heap allocations via the `box` keyword.\n-    fn box_alloc(\n-        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        dest: &PlaceTy<'tcx, Self::PointerTag>,\n-    ) -> InterpResult<'tcx>;\n-\n     /// Called to read the specified `local` from the `frame`.\n     /// Since reading a ZST is not actually accessing memory or locals, this is never invoked\n     /// for ZST reads."}, {"sha": "f3169d7b85f42ddf35a3e3e971abd17ce6144cb8", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037e189783b6c689640b1c177cd32ccb385dc237/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=037e189783b6c689640b1c177cd32ccb385dc237", "patch": "@@ -233,13 +233,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n         throw_machine_stop_str!(\"pointer arithmetic or comparisons aren't supported in ConstProp\")\n     }\n \n-    fn box_alloc(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _dest: &PlaceTy<'tcx>,\n-    ) -> InterpResult<'tcx> {\n-        throw_machine_stop_str!(\"can't const prop heap allocations\")\n-    }\n-\n     fn access_local(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         frame: &Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>,"}]}