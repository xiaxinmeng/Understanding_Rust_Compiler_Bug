{"sha": "c95b280d723ae6a6243b04ac06be100c622634b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NWIyODBkNzIzYWU2YTYyNDNiMDRhYzA2YmUxMDBjNjIyNjM0YjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-04T19:20:38Z"}, "message": "Move pattern resolution checks from typeck to resolve\n\nMake error messages more precise", "tree": {"sha": "449ab65d7711169fbb3d4fce93ff6ac2f441857e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/449ab65d7711169fbb3d4fce93ff6ac2f441857e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c95b280d723ae6a6243b04ac06be100c622634b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c95b280d723ae6a6243b04ac06be100c622634b4", "html_url": "https://github.com/rust-lang/rust/commit/c95b280d723ae6a6243b04ac06be100c622634b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c95b280d723ae6a6243b04ac06be100c622634b4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ea38e42a7e361e37b1cd3622f3baf1c8055986", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ea38e42a7e361e37b1cd3622f3baf1c8055986", "html_url": "https://github.com/rust-lang/rust/commit/e8ea38e42a7e361e37b1cd3622f3baf1c8055986"}], "stats": {"total": 238, "additions": 125, "deletions": 113}, "files": [{"sha": "33282f5b3e9c74aaed64fab1ec94370bb83eb2d2", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -140,12 +140,16 @@ impl Def {\n             Def::Mod(..) => \"module\",\n             Def::Static(..) => \"static\",\n             Def::Variant(..) => \"variant\",\n-            Def::VariantCtor(..) => \"variant\",\n+            Def::VariantCtor(.., CtorKind::Fn) => \"tuple variant\",\n+            Def::VariantCtor(.., CtorKind::Const) => \"unit variant\",\n+            Def::VariantCtor(.., CtorKind::Fictive) => \"struct variant\",\n             Def::Enum(..) => \"enum\",\n-            Def::TyAlias(..) => \"type\",\n+            Def::TyAlias(..) => \"type alias\",\n             Def::AssociatedTy(..) => \"associated type\",\n             Def::Struct(..) => \"struct\",\n-            Def::StructCtor(..) => \"struct\",\n+            Def::StructCtor(.., CtorKind::Fn) => \"tuple struct\",\n+            Def::StructCtor(.., CtorKind::Const) => \"unit struct\",\n+            Def::StructCtor(.., CtorKind::Fictive) => bug!(\"impossible struct constructor\"),\n             Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n             Def::Method(..) => \"method\","}, {"sha": "49e7f3ba19cf57244a02fc14d49f75753e8bbdfd", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -485,7 +485,7 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              E0531,\n                              \"unresolved {} `{}`\",\n                              expected_what,\n-                             path.segments.last().unwrap().identifier)\n+                             path)\n         }\n         ResolutionError::PatPathUnexpected(expected_what, found_what, path) => {\n             struct_span_err!(resolver.session,\n@@ -494,7 +494,7 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              \"expected {}, found {} `{}`\",\n                              expected_what,\n                              found_what,\n-                             path.segments.last().unwrap().identifier)\n+                             path)\n         }\n     }\n }\n@@ -2376,15 +2376,16 @@ impl<'a> Resolver<'a> {\n                         let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n                                              bmode != BindingMode::ByValue(Mutability::Immutable);\n                         match def {\n-                            Def::StructCtor(..) | Def::VariantCtor(..) |\n-                            Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n-                                // A constant, unit variant, etc pattern.\n+                            Def::StructCtor(_, CtorKind::Const) |\n+                            Def::VariantCtor(_, CtorKind::Const) |\n+                            Def::Const(..) if !always_binding => {\n+                                // A unit struct/variant or constant pattern.\n                                 let name = ident.node.name;\n                                 self.record_use(name, ValueNS, binding.unwrap(), ident.span);\n                                 Some(PathResolution::new(def))\n                             }\n                             Def::StructCtor(..) | Def::VariantCtor(..) |\n-                            Def::Const(..) | Def::AssociatedConst(..) | Def::Static(..) => {\n+                            Def::Const(..) | Def::Static(..) => {\n                                 // A fresh binding that shadows something unacceptable.\n                                 resolve_error(\n                                     self,\n@@ -2401,7 +2402,7 @@ impl<'a> Resolver<'a> {\n                             }\n                             def => {\n                                 span_bug!(ident.span, \"unexpected definition for an \\\n-                                                       identifier in pattern {:?}\", def);\n+                                                       identifier in pattern: {:?}\", def);\n                             }\n                         }\n                     }).unwrap_or_else(|| {\n@@ -2411,23 +2412,29 @@ impl<'a> Resolver<'a> {\n                     self.record_def(pat.id, resolution);\n                 }\n \n-                PatKind::TupleStruct(ref path, ..) => {\n+                PatKind::TupleStruct(ref path, ref pats, ddpos) => {\n                     self.resolve_pattern_path(pat.id, None, path, ValueNS, |def| {\n                         match def {\n-                            Def::StructCtor(..) | Def::VariantCtor(..) => true,\n+                            Def::StructCtor(_, CtorKind::Fn) |\n+                            Def::VariantCtor(_, CtorKind::Fn) => true,\n+                            // `UnitVariant(..)` is accepted for backward compatibility.\n+                            Def::StructCtor(_, CtorKind::Const) |\n+                            Def::VariantCtor(_, CtorKind::Const)\n+                                if pats.is_empty() && ddpos.is_some() => true,\n                             _ => false,\n                         }\n-                    }, \"variant or struct\");\n+                    }, \"tuple struct/variant\");\n                 }\n \n                 PatKind::Path(ref qself, ref path) => {\n                     self.resolve_pattern_path(pat.id, qself.as_ref(), path, ValueNS, |def| {\n                         match def {\n-                            Def::StructCtor(..) | Def::VariantCtor(..) |\n+                            Def::StructCtor(_, CtorKind::Const) |\n+                            Def::VariantCtor(_, CtorKind::Const) |\n                             Def::Const(..) | Def::AssociatedConst(..) => true,\n                             _ => false,\n                         }\n-                    }, \"variant, struct or constant\");\n+                    }, \"unit struct/variant or constant\");\n                 }\n \n                 PatKind::Struct(ref path, ..) => {"}, {"sha": "27491c6dfce474c12742fa28e4de3acb114a37f0", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 25, "deletions": 43, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use hir::def::Def;\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::def::{Def, CtorKind};\n+use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::infer::{self, InferOk, TypeOrigin};\n-use hir::pat_util::EnumerateAndAdjustIterator;\n-use rustc::ty::{self, Ty, TypeFoldable, LvaluePreference, VariantKind};\n+use rustc::ty::{self, Ty, TypeFoldable, LvaluePreference};\n use check::{FnCtxt, Expectation};\n use lint;\n use util::nodemap::FnvHashMap;\n@@ -23,9 +24,6 @@ use syntax::codemap::Spanned;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n-use rustc::hir::{self, PatKind};\n-use rustc::hir::print as pprust;\n-\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn check_pat(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>) {\n         let tcx = self.tcx;\n@@ -516,10 +514,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                       expected: Ty<'tcx>) -> Ty<'tcx>\n     {\n         let tcx = self.tcx;\n-        let report_unexpected_def = || {\n+        let report_unexpected_def = |def: Def| {\n             span_err!(tcx.sess, pat.span, E0533,\n-                      \"`{}` does not name a unit variant, unit struct or a constant\",\n-                      pprust::path_to_string(path));\n+                      \"expected unit struct/variant or constant, found {} `{}`\",\n+                      def.kind_name(), path);\n         };\n \n         // Resolve the path and check the definition for errors.\n@@ -531,18 +529,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 return tcx.types.err;\n             }\n             Def::Method(..) => {\n-                report_unexpected_def();\n+                report_unexpected_def(def);\n                 return tcx.types.err;\n             }\n-            Def::VariantCtor(..) | Def::StructCtor(..) => {\n-                let variant = tcx.expect_variant_def(def);\n-                if variant.kind != VariantKind::Unit {\n-                    report_unexpected_def();\n-                    return tcx.types.err;\n-                }\n-            }\n+            Def::VariantCtor(_, CtorKind::Const) |\n+            Def::StructCtor(_, CtorKind::Const) |\n             Def::Const(..) | Def::AssociatedConst(..) => {} // OK\n-            _ => bug!(\"unexpected pattern definition {:?}\", def)\n+            _ => bug!(\"unexpected pattern definition: {:?}\", def)\n         }\n \n         // Type check the path.\n@@ -564,9 +557,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_pat(&pat, tcx.types.err);\n             }\n         };\n-        let report_unexpected_def = |is_lint| {\n-            let msg = format!(\"`{}` does not name a tuple variant or a tuple struct\",\n-                              pprust::path_to_string(path));\n+        let report_unexpected_def = |def: Def, is_lint| {\n+            let msg = format!(\"expected tuple struct/variant, found {} `{}`\",\n+                              def.kind_name(), path);\n             if is_lint {\n                 tcx.sess.add_lint(lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n                                   pat.id, pat.span, msg);\n@@ -585,23 +578,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 on_error();\n                 return tcx.types.err;\n             }\n-            Def::Const(..) | Def::AssociatedConst(..) | Def::Method(..) => {\n-                report_unexpected_def(false);\n+            Def::AssociatedConst(..) | Def::Method(..) => {\n+                report_unexpected_def(def, false);\n                 return tcx.types.err;\n             }\n-            Def::VariantCtor(..) | Def::StructCtor(..) => {\n+            Def::VariantCtor(_, ctor_kind) | Def::StructCtor(_, ctor_kind) => {\n+                if ctor_kind == CtorKind::Const {\n+                    // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n+                    // is allowed for backward compatibility.\n+                    report_unexpected_def(def, true);\n+                }\n                 tcx.expect_variant_def(def)\n             }\n-            _ => bug!(\"unexpected pattern definition {:?}\", def)\n+            _ => bug!(\"unexpected pattern definition: {:?}\", def)\n         };\n-        if variant.kind == VariantKind::Unit && subpats.is_empty() && ddpos.is_some() {\n-            // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n-            // is allowed for backward compatibility.\n-            report_unexpected_def(true);\n-        } else if variant.kind != VariantKind::Tuple {\n-            report_unexpected_def(false);\n-            return tcx.types.err;\n-        }\n \n         // Type check the path.\n         let pat_ty = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id);\n@@ -626,16 +616,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_pat(&subpat, field_ty);\n             }\n         } else {\n-            let subpats_ending = if subpats.len() == 1 {\n-                \"\"\n-            } else {\n-                \"s\"\n-            };\n-            let fields_ending = if variant.fields.len() == 1 {\n-                \"\"\n-            } else {\n-                \"s\"\n-            };\n+            let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n+            let fields_ending = if variant.fields.len() == 1 { \"\" } else { \"s\" };\n             struct_span_err!(tcx.sess, pat.span, E0023,\n                              \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n                              subpats.len(), subpats_ending, def.kind_name(),"}, {"sha": "8d21cde84da1c06bd9a498b408225ec84887d9bf", "filename": "src/test/compile-fail/E0164.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2FE0164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2FE0164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0164.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -8,7 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo { B { i: u32 } }\n+#![feature(associated_consts)]\n+\n+enum Foo {}\n+\n+impl Foo {\n+    const B: u8 = 0;\n+}\n \n fn bar(foo: Foo) -> u32 {\n     match foo {"}, {"sha": "0db7eaf0ca7c3ea5e319cef0aa266481ab1256d5", "filename": "src/test/compile-fail/blind-item-block-middle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -12,6 +12,6 @@ mod foo { pub struct bar; }\n \n fn main() {\n     let bar = 5;\n-    //~^ ERROR let bindings cannot shadow structs\n+    //~^ ERROR let bindings cannot shadow unit structs\n     use foo::bar;\n }"}, {"sha": "e527170e9f9579d76282c0a44df60b373ba8b896", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -32,13 +32,13 @@ fn main() {\n     }\n     match e3 {\n         E::Empty3 => ()\n-        //~^ ERROR `E::Empty3` does not name a unit variant, unit struct or a constant\n+        //~^ ERROR expected unit struct/variant or constant, found struct variant `E::Empty3`\n     }\n     match xe1 {\n         XEmpty1 => () // Not an error, `XEmpty1` is interpreted as a new binding\n     }\n     match xe3 {\n         XE::XEmpty3 => ()\n-        //~^ ERROR `XE::XEmpty3` does not name a unit variant, unit struct or a constant\n+        //~^ ERROR expected unit struct/variant or constant, found struct variant `XE::XEmpty3`\n     }\n }"}, {"sha": "58e3ca6b3ac5cb3c8cdd216f38c602efc800804b", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -24,15 +24,15 @@ fn main() {\n     let xe1 = XEmpty1 {};\n \n     match e1 {\n-        Empty1() => () //~ ERROR unresolved variant or struct `Empty1`\n+        Empty1() => () //~ ERROR unresolved tuple struct/variant `Empty1`\n     }\n     match xe1 {\n-        XEmpty1() => () //~ ERROR unresolved variant or struct `XEmpty1`\n+        XEmpty1() => () //~ ERROR unresolved tuple struct/variant `XEmpty1`\n     }\n     match e1 {\n-        Empty1(..) => () //~ ERROR unresolved variant or struct `Empty1`\n+        Empty1(..) => () //~ ERROR unresolved tuple struct/variant `Empty1`\n     }\n     match xe1 {\n-        XEmpty1(..) => () //~ ERROR unresolved variant or struct `XEmpty1`\n+        XEmpty1(..) => () //~ ERROR unresolved tuple struct/variant `XEmpty1`\n     }\n }"}, {"sha": "1960eca9f80281a3c1f22a69c5b1d4035520b505", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -26,15 +26,19 @@ fn main() {\n     let xe3 = XE::XEmpty3 {};\n \n     match e3 {\n-        E::Empty3() => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n+        E::Empty3() => ()\n+        //~^ ERROR expected tuple struct/variant, found struct variant `E::Empty3`\n     }\n     match xe3 {\n-        XE::XEmpty3() => () //~ ERROR `XE::XEmpty3` does not name a tuple variant or a tuple struct\n+        XE::XEmpty3() => ()\n+        //~^ ERROR expected tuple struct/variant, found struct variant `XE::XEmpty3`\n     }\n     match e3 {\n-        E::Empty3(..) => () //~ ERROR `E::Empty3` does not name a tuple variant or a tuple struct\n+        E::Empty3(..) => ()\n+        //~^ ERROR expected tuple struct/variant, found struct variant `E::Empty3`\n     }\n     match xe3 {\n-        XE::XEmpty3(..) => () //~ ERROR `XE::XEmpty3` does not name a tuple variant or a tuple\n+        XE::XEmpty3(..) => ()\n+        //~^ ERROR expected tuple struct/variant, found struct variant `XE::XEmpty3\n     }\n }"}, {"sha": "f15c126a1260837128a297fe03b4a3707300ce37", "filename": "src/test/compile-fail/empty-struct-tuple-pat.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-tuple-pat.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -31,17 +31,19 @@ fn main() {\n     let xe5 = XE::XEmpty5();\n \n     match e2 {\n-        Empty2 => () //~ ERROR `Empty2` does not name a unit variant, unit struct or a constant\n+        Empty2 => () //~ ERROR match bindings cannot shadow tuple structs\n     }\n     match xe6 {\n-        XEmpty6 => () //~ ERROR `XEmpty6` does not name a unit variant, unit struct or a constant\n+        XEmpty6 => () //~ ERROR match bindings cannot shadow tuple structs\n     }\n \n     match e4 {\n-        E::Empty4 => () //~ ERROR `E::Empty4` does not name a unit variant, unit struct or a\n+        E::Empty4 => ()\n+        //~^ ERROR expected unit struct/variant or constant, found tuple variant `E::Empty4`\n     }\n     match xe5 {\n-        XE::XEmpty5 => (), //~ ERROR `XE::XEmpty5` does not name a unit variant, unit struct or a\n+        XE::XEmpty5 => (),\n+        //~^ ERROR expected unit struct/variant or constant, found tuple variant `XE::XEmpty5`\n         _ => {},\n     }\n }"}, {"sha": "273cb48b2d2a5d8ff888e8c99cabb0c0c082751a", "filename": "src/test/compile-fail/empty-struct-unit-pat-1.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-1.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -31,21 +31,22 @@ fn main() {\n     let xe4 = XE::XEmpty4;\n \n     match e2 {\n-        Empty2(..) => () //~ ERROR `Empty2` does not name a tuple variant or a tuple struct\n+        Empty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n             //~^ WARNING hard error\n     }\n     match xe2 {\n-        XEmpty2(..) => () //~ ERROR `XEmpty2` does not name a tuple variant or a tuple struct\n+        XEmpty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n             //~^ WARNING hard error\n     }\n \n     match e4 {\n-        E::Empty4(..) => () //~ ERROR `E::Empty4` does not name a tuple variant or a tuple struct\n+        E::Empty4(..) => () //~ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n             //~^ WARNING hard error\n     }\n     match xe4 {\n-        XE::XEmpty4(..) => (), //~ ERROR `XE::XEmpty4` does not name a tuple variant or a tuple\n-            //~^ WARNING hard error\n+        XE::XEmpty4(..) => (),\n+            //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n+            //~| WARNING hard error\n         _ => {},\n     }\n }"}, {"sha": "993f10e08067b2375582332a1359a9020a83faad", "filename": "src/test/compile-fail/empty-struct-unit-pat-2.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat-2.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -23,25 +23,28 @@ enum E {\n     Empty4\n }\n \n-// remove attribute after warning cycle and promoting warnings to errors\n fn main() {\n     let e2 = Empty2;\n     let e4 = E::Empty4;\n     let xe2 = XEmpty2;\n     let xe4 = XE::XEmpty4;\n \n     match e2 {\n-        Empty2() => () //~ ERROR `Empty2` does not name a tuple variant or a tuple struct\n+        Empty2() => ()\n+        //~^ ERROR expected tuple struct/variant, found unit struct `Empty2`\n     }\n     match xe2 {\n-        XEmpty2() => () //~ ERROR `XEmpty2` does not name a tuple variant or a tuple struct\n+        XEmpty2() => ()\n+        //~^ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n     }\n \n     match e4 {\n-        E::Empty4() => () //~ ERROR `E::Empty4` does not name a tuple variant or a tuple struct\n+        E::Empty4() => ()\n+        //~^ ERROR expected tuple struct/variant, found unit variant `E::Empty4`\n     }\n     match xe4 {\n-        XE::XEmpty4() => (), //~ ERROR `XE::XEmpty4` does not name a tuple variant or a tuple\n+        XE::XEmpty4() => (),\n+        //~^ ERROR expected tuple struct/variant, found unit variant `XE::XEmpty4`\n         _ => {},\n     }\n }"}, {"sha": "bc1bd03f2d65253e88a0aaee661690e4b14437c1", "filename": "src/test/compile-fail/enum-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -11,5 +11,5 @@\n struct hello(isize);\n \n fn main() {\n-    let hello = 0; //~ERROR let bindings cannot shadow structs\n+    let hello = 0; //~ERROR let bindings cannot shadow tuple structs\n }"}, {"sha": "03bdbe4e54b6815f3fdb798abb1a1f87075ebf8b", "filename": "src/test/compile-fail/enums-pats-not-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fenums-pats-not-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fenums-pats-not-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenums-pats-not-idents.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let a(1) = 13; //~ ERROR unresolved variant or struct `a`\n+    let a(1) = 13; //~ ERROR unresolved tuple struct/variant `a`\n }"}, {"sha": "8c58ef6261e10485fa20e7265f475b7d72c4d1a0", "filename": "src/test/compile-fail/issue-10200.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -13,7 +13,7 @@ fn foo(_: usize) -> Foo { Foo(false) }\n \n fn main() {\n     match Foo(true) {\n-        foo(x) //~ ERROR expected variant or struct, found function `foo`\n+        foo(x) //~ ERROR expected tuple struct/variant, found function `foo`\n         => ()\n     }\n }"}, {"sha": "d3432410c5427b6a99feea3bc952cbb347b23ec9", "filename": "src/test/compile-fail/issue-12863.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-12863.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-12863.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12863.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -12,6 +12,6 @@ mod foo { pub fn bar() {} }\n \n fn main() {\n     match () {\n-        foo::bar => {} //~ ERROR expected variant, struct or constant, found function `bar`\n+        foo::bar => {} //~ ERROR expected unit struct/variant or constant, found function `foo::bar`\n     }\n }"}, {"sha": "049a0665c54589049c931376ba0bdddc21bfc52d", "filename": "src/test/compile-fail/issue-17933.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -13,7 +13,7 @@ pub static X: usize = 1;\n fn main() {\n     match 1 {\n         self::X => { },\n-        //~^ ERROR expected variant, struct or constant, found static `X`\n+        //~^ ERROR expected unit struct/variant or constant, found static `self::X`\n         _       => { },\n     }\n }"}, {"sha": "ba571ce17fd12eb58cd42a0bbe3f5e4be228c14f", "filename": "src/test/compile-fail/issue-19086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let f = FooB { x: 3, y: 4 };\n     match f {\n         FooB(a, b) => println!(\"{} {}\", a, b),\n-//~^ ERROR `FooB` does not name a tuple variant or a tuple struct\n+        //~^ ERROR expected tuple struct/variant, found struct variant `FooB`\n     }\n }"}, {"sha": "b8552aaee9005106d631dec1cabf3c7fd28db894", "filename": "src/test/compile-fail/issue-27033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27033.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     match Some(1) {\n-        None @ _ => {} //~ ERROR match bindings cannot shadow variants\n+        None @ _ => {} //~ ERROR match bindings cannot shadow unit variants\n     };\n     const C: u8 = 1;\n     match 1 {"}, {"sha": "33930d1db1476dcaa1995027ef481dec3f5ed3de", "filename": "src/test/compile-fail/issue-27815.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-27815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-27815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27815.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -14,7 +14,9 @@ fn main() {\n     let u = A { x: 1 }; //~ ERROR `A` does not name a struct or a struct variant\n     let v = u32 { x: 1 }; //~ ERROR `u32` does not name a struct or a struct variant\n     match () {\n-        A { x: 1 } => {} //~ ERROR expected variant, struct or type alias, found module `A`\n-        u32 { x: 1 } => {} //~ ERROR expected variant, struct or type alias, found builtin type `u32\n+        A { x: 1 } => {}\n+        //~^ ERROR expected variant, struct or type alias, found module `A`\n+        u32 { x: 1 } => {}\n+        //~^ ERROR expected variant, struct or type alias, found builtin type `u32`\n     }\n }"}, {"sha": "d47fdda0203e8f0e38e92233d5d5816496935dee", "filename": "src/test/compile-fail/issue-28992-empty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -21,6 +21,7 @@ impl S {\n }\n \n fn main() {\n-    if let C1(..) = 0 {} //~ ERROR expected variant or struct, found constant `C1`\n-    if let S::C2(..) = 0 {} //~ ERROR `S::C2` does not name a tuple variant or a tuple struct\n+    if let C1(..) = 0 {} //~ ERROR expected tuple struct/variant, found constant `C1`\n+    if let S::C2(..) = 0 {}\n+    //~^ ERROR expected tuple struct/variant, found associated constant `S::C2`\n }"}, {"sha": "7e1f4c28d21e94bbc2dc65b23d6370f0c7f07471", "filename": "src/test/compile-fail/issue-32004.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-32004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-32004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32004.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -18,12 +18,12 @@ struct S;\n fn main() {\n     match Foo::Baz {\n         Foo::Bar => {}\n-        //~^ ERROR `Foo::Bar` does not name a unit variant, unit struct or a constant\n+        //~^ ERROR expected unit struct/variant or constant, found tuple variant `Foo::Bar`\n         _ => {}\n     }\n \n     match S {\n         S(()) => {}\n-        //~^ ERROR `S` does not name a tuple variant or a tuple struct\n+        //~^ ERROR expected tuple struct/variant, found unit struct `S`\n     }\n }"}, {"sha": "dd236b76a67396975acd32d03822ea897a3b9afc", "filename": "src/test/compile-fail/issue-32086.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-32086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-32086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32086.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -12,6 +12,6 @@ struct S(u8);\n const C: S = S(10);\n \n fn main() {\n-    let C(a) = S(11); //~ ERROR expected variant or struct, found constant `C`\n-    let C(..) = S(11); //~ ERROR expected variant or struct, found constant `C`\n+    let C(a) = S(11); //~ ERROR expected tuple struct/variant, found constant `C`\n+    let C(..) = S(11); //~ ERROR expected tuple struct/variant, found constant `C`\n }"}, {"sha": "7668a2117a26592b3b72edf183b76de5e8bccf8e", "filename": "src/test/compile-fail/issue-5927.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5927.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let z = match 3 {\n-        x(1) => x(1) //~ ERROR unresolved variant or struct `x`\n+        x(1) => x(1) //~ ERROR unresolved tuple struct/variant `x`\n         //~^ ERROR unresolved name `x`\n     };\n     assert!(z == 3);"}, {"sha": "aed9130d60e4b73b5a05d6c61abb27efbbf69637", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -20,7 +20,7 @@ fn main() {\n           color::rgb(_, _, _) => { }\n           color::cmyk(_, _, _, _) => { }\n           color::no_color(_) => { }\n-          //~^ ERROR `color::no_color` does not name a tuple variant or a tuple struct\n+          //~^ ERROR expected tuple struct/variant, found unit variant `color::no_color`\n         }\n     }\n }"}, {"sha": "ddd5d63317011c4a82822791ed14506690f9615f", "filename": "src/test/compile-fail/match-pattern-field-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     fn foo(c: color) {\n         match c {\n           color::rgb(_, _) => { }\n-          //~^ ERROR this pattern has 2 fields, but the corresponding variant has 3 fields\n+          //~^ ERROR this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n           color::cmyk(_, _, _, _) => { }\n           color::no_color => { }\n         }"}, {"sha": "aaa89b2282967318a630f10e7a6df2706c447bba", "filename": "src/test/compile-fail/method-path-in-pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-path-in-pattern.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -22,13 +22,13 @@ impl MyTrait for Foo {}\n \n fn main() {\n     match 0u32 {\n-        Foo::bar => {} //~ ERROR `Foo::bar` does not name a unit variant, unit struct or a constant\n+        Foo::bar => {} //~ ERROR expected unit struct/variant or constant, found method `Foo::bar`\n     }\n     match 0u32 {\n-        <Foo>::bar => {} //~ ERROR `bar` does not name a unit variant, unit struct or a constant\n+        <Foo>::bar => {} //~ ERROR expected unit struct/variant or constant, found method `bar`\n     }\n     match 0u32 {\n         <Foo>::trait_bar => {}\n-        //~^ ERROR `trait_bar` does not name a unit variant, unit struct or a constant\n+        //~^ ERROR expected unit struct/variant or constant, found method `trait_bar`\n     }\n }"}, {"sha": "4d8959466b948951366919105b833df35e95c03d", "filename": "src/test/compile-fail/method-resolvable-path-in-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -19,6 +19,6 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         <Foo as MyTrait>::trait_bar => {}\n-        //~^ ERROR expected variant, struct or constant, found method `trait_bar`\n+        //~^ ERROR expected unit struct/variant or constant, found method `MyTrait::trait_bar`\n     }\n }"}, {"sha": "4c76c4b8b0265662e236c3024bb58d395af6e117", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -11,7 +11,7 @@\n use std::option::*;\n \n fn main() {\n-  let None: isize = 42; //~ ERROR let bindings cannot shadow variants\n+  let None: isize = 42; //~ ERROR let bindings cannot shadow unit variants\n   log(debug, None);\n   //~^ ERROR unresolved name `debug`\n   //~| ERROR unresolved name `log`"}, {"sha": "3dbe08f1908d7456e7fc91f9a71426f4e56caae4", "filename": "src/test/compile-fail/pat-shadow-in-nested-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-shadow-in-nested-binding.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -11,5 +11,5 @@\n struct foo(usize);\n \n fn main() {\n-    let (foo, _) = (2, 3); //~ ERROR let bindings cannot shadow structs\n+    let (foo, _) = (2, 3); //~ ERROR let bindings cannot shadow tuple structs\n }"}, {"sha": "069c1dc0aea1b89de4976ae5f523742a32216ffe", "filename": "src/test/compile-fail/pat-tuple-overfield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fpat-tuple-overfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fpat-tuple-overfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-tuple-overfield.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -20,9 +20,9 @@ fn main() {\n     }\n     match S(1, 2, 3) {\n         S(1, 2, 3, 4) => {}\n-        //~^ ERROR this pattern has 4 fields, but the corresponding struct has 3 fields\n+        //~^ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n         S(1, 2, .., 3, 4) => {}\n-        //~^ ERROR this pattern has 4 fields, but the corresponding struct has 3 fields\n+        //~^ ERROR this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n         _ => {}\n     }\n }"}, {"sha": "e63b84594aa944cc5b68779cc55a425ea3f293c1", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -25,7 +25,7 @@ fn f(_c: char) {}\n fn main() {\n     match A::B(1, 2) {\n         A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n-        A::D(_) => (),       //~ ERROR `A::D` does not name a tuple variant or a tuple struct\n+        A::D(_) => (),       //~ ERROR expected tuple struct/variant, found unit variant `A::D`\n         _ => ()\n     }\n     match 'c' {"}, {"sha": "82b0536a64ad4ab840fc5e4982fb7409e10fbc97", "filename": "src/test/compile-fail/qualified-path-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fqualified-path-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fqualified-path-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqualified-path-params.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -28,7 +28,7 @@ impl S {\n fn main() {\n     match 10 {\n         <S as Tr>::A::f::<u8> => {}\n-        //~^ ERROR `Tr::A::f<u8>` does not name a unit variant, unit struct or a constant\n+        //~^ ERROR expected unit struct/variant or constant, found method `Tr::A::f<u8>`\n         0 ... <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n     }\n }"}, {"sha": "7dd4d970945e0302017b8e3c006edf40953e5491", "filename": "src/test/compile-fail/xcrate-private-by-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c95b280d723ae6a6243b04ac06be100c622634b4/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs?ref=c95b280d723ae6a6243b04ac06be100c622634b4", "patch": "@@ -39,7 +39,7 @@ fn main() {\n     foo::<static_priv_by_default::m>();\n     //~^ ERROR: enum `m` is private\n     foo::<static_priv_by_default::n>();\n-    //~^ ERROR: type `n` is private\n+    //~^ ERROR: type alias `n` is private\n \n     // public items in a private mod should be inaccessible\n     static_priv_by_default::foo::a;"}]}