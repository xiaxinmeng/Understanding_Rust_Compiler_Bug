{"sha": "39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YzI2N2E4ZDVhYjE0MWZhYWY1ZDRiMzNhMjBjYWM2MmNkYzQ1MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-28T13:03:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-28T13:03:43Z"}, "message": "Auto merge of #38024 - jseyfried:avoid_needless_proc_macro_deps, r=nrc\n\nAvoid loading needless proc-macro dependencies\n\nFixes #37958 when no proc-macros are exported; in particular, without `pub extern crate proc_macros;`, `#![feature(macro_reexport)]`, or `#![feature(use_extern_macros)]`.\n\nI opened https://github.com/rust-lang/cargo/issues/3334 for exported proc macros.\n\nr? @alexcrichton", "tree": {"sha": "b0d490c84d65887c518ecc1ef68b2ff96eee0961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d490c84d65887c518ecc1ef68b2ff96eee0961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "html_url": "https://github.com/rust-lang/rust/commit/39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b399e5e99a44cf44d3860d353a8b7619d466410", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b399e5e99a44cf44d3860d353a8b7619d466410", "html_url": "https://github.com/rust-lang/rust/commit/0b399e5e99a44cf44d3860d353a8b7619d466410"}, {"sha": "1fd9041b82aaf747f6357686f8d1b3ec83da1f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd9041b82aaf747f6357686f8d1b3ec83da1f60", "html_url": "https://github.com/rust-lang/rust/commit/1fd9041b82aaf747f6357686f8d1b3ec83da1f60"}], "stats": {"total": 75, "additions": 48, "deletions": 27}, "files": [{"sha": "0867e75b9ca80fb5aca7589a16ac4f8384cbc2b6", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -67,6 +67,9 @@ pub struct CrateSource {\n \n #[derive(RustcEncodable, RustcDecodable, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]\n pub enum DepKind {\n+    /// A dependency that is only used for its macros, none of which are visible from other crates.\n+    /// These are included in the metadata only as placeholders and are ignored when decoding.\n+    UnexportedMacrosOnly,\n     /// A dependency that is only used for its macros.\n     MacrosOnly,\n     /// A dependency that is always injected into the dependency list and so\n@@ -77,6 +80,15 @@ pub enum DepKind {\n     Explicit,\n }\n \n+impl DepKind {\n+    pub fn macros_only(self) -> bool {\n+        match self {\n+            DepKind::UnexportedMacrosOnly | DepKind::MacrosOnly => true,\n+            DepKind::Implicit | DepKind::Explicit => false,\n+        }\n+    }\n+}\n+\n #[derive(PartialEq, Clone, Debug)]\n pub enum LibSource {\n     Some(PathBuf),\n@@ -220,6 +232,7 @@ pub trait CrateStore<'tcx> {\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n                                     -> Vec<(CrateNum, LinkagePreference)>;\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind;\n+    fn export_macros(&self, cnum: CrateNum);\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n     fn is_staged_api(&self, cnum: CrateNum) -> bool;\n@@ -393,6 +406,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n         { bug!(\"missing_lang_items\") }\n     fn is_staged_api(&self, cnum: CrateNum) -> bool { bug!(\"is_staged_api\") }\n     fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n+    fn export_macros(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }"}, {"sha": "075b3d7a8e90c9e2588bac8f87a5d7dc0f175e75", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -124,7 +124,7 @@ fn calculate_type(sess: &session::Session,\n                 return v;\n             }\n             for cnum in sess.cstore.crates() {\n-                if sess.cstore.dep_kind(cnum) == DepKind::MacrosOnly { continue }\n+                if sess.cstore.dep_kind(cnum).macros_only() { continue }\n                 let src = sess.cstore.used_crate_source(cnum);\n                 if src.rlib.is_some() { continue }\n                 sess.err(&format!(\"dependency `{}` not found in rlib format\",\n@@ -157,7 +157,7 @@ fn calculate_type(sess: &session::Session,\n     // dependencies, ensuring there are no conflicts. The only valid case for a\n     // dependency to be relied upon twice is for both cases to rely on a dylib.\n     for cnum in sess.cstore.crates() {\n-        if sess.cstore.dep_kind(cnum) == DepKind::MacrosOnly { continue }\n+        if sess.cstore.dep_kind(cnum).macros_only() { continue }\n         let name = sess.cstore.crate_name(cnum);\n         let src = sess.cstore.used_crate_source(cnum);\n         if src.dylib.is_some() {"}, {"sha": "2c266068fe81498f968af9a4f3673781c9512733", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -171,7 +171,7 @@ impl<'a> CrateLoader<'a> {\n                     name: name,\n                     id: i.id,\n                     dep_kind: if attr::contains_name(&i.attrs, \"no_link\") {\n-                        DepKind::MacrosOnly\n+                        DepKind::UnexportedMacrosOnly\n                     } else {\n                         DepKind::Explicit\n                     },\n@@ -350,7 +350,7 @@ impl<'a> CrateLoader<'a> {\n             };\n \n             self.load(&mut locate_ctxt).or_else(|| {\n-                dep_kind = DepKind::MacrosOnly;\n+                dep_kind = DepKind::UnexportedMacrosOnly;\n \n                 let mut proc_macro_locator = locator::Context {\n                     target: &self.sess.host,\n@@ -373,7 +373,7 @@ impl<'a> CrateLoader<'a> {\n             LoadResult::Previous(cnum) => {\n                 let data = self.cstore.get_crate_data(cnum);\n                 if data.root.macro_derive_registrar.is_some() {\n-                    dep_kind = DepKind::MacrosOnly;\n+                    dep_kind = DepKind::UnexportedMacrosOnly;\n                 }\n                 data.dep_kind.set(cmp::max(data.dep_kind.get(), dep_kind));\n                 (cnum, data)\n@@ -460,28 +460,23 @@ impl<'a> CrateLoader<'a> {\n             return cstore::CrateNumMap::new();\n         }\n \n-        // The map from crate numbers in the crate we're resolving to local crate\n-        // numbers\n-        let deps = crate_root.crate_deps.decode(metadata);\n-        let map: FxHashMap<_, _> = deps.enumerate().map(|(crate_num, dep)| {\n+        // The map from crate numbers in the crate we're resolving to local crate numbers.\n+        // We map 0 and all other holes in the map to our parent crate. The \"additional\"\n+        // self-dependencies should be harmless.\n+        ::std::iter::once(krate).chain(crate_root.crate_deps.decode(metadata).map(|dep| {\n             debug!(\"resolving dep crate {} hash: `{}`\", dep.name, dep.hash);\n+            if dep.kind == DepKind::UnexportedMacrosOnly {\n+                return krate;\n+            }\n             let dep_kind = match dep_kind {\n                 DepKind::MacrosOnly => DepKind::MacrosOnly,\n                 _ => dep.kind,\n             };\n             let (local_cnum, ..) = self.resolve_crate(\n                 root, dep.name, dep.name, Some(&dep.hash), span, PathKind::Dependency, dep_kind,\n             );\n-            (CrateNum::new(crate_num + 1), local_cnum)\n-        }).collect();\n-\n-        let max_cnum = map.values().cloned().max().map(|cnum| cnum.as_u32()).unwrap_or(0);\n-\n-        // we map 0 and all other holes in the map to our parent crate. The \"additional\"\n-        // self-dependencies should be harmless.\n-        (0..max_cnum+1).map(|cnum| {\n-            map.get(&CrateNum::from_u32(cnum)).cloned().unwrap_or(krate)\n-        }).collect()\n+            local_cnum\n+        })).collect()\n     }\n \n     fn read_extension_crate(&mut self, span: Span, info: &ExternCrateInfo) -> ExtensionCrate {\n@@ -614,7 +609,7 @@ impl<'a> CrateLoader<'a> {\n              name: Symbol::intern(name),\n              ident: Symbol::intern(name),\n              id: ast::DUMMY_NODE_ID,\n-             dep_kind: DepKind::MacrosOnly,\n+             dep_kind: DepKind::UnexportedMacrosOnly,\n         });\n \n         if ekrate.target_only {"}, {"sha": "73e03a451966485ca57f060db3d1b4d745800256", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -197,7 +197,7 @@ impl CStore {\n             .borrow()\n             .iter()\n             .filter_map(|(&cnum, data)| {\n-                if data.dep_kind.get() == DepKind::MacrosOnly { return None; }\n+                if data.dep_kind.get().macros_only() { return None; }\n                 let path = match prefer {\n                     LinkagePreference::RequireDynamic => data.source.dylib.clone().map(|p| p.0),\n                     LinkagePreference::RequireStatic => data.source.rlib.clone().map(|p| p.0),"}, {"sha": "4b90d9259724b21b31755531ee42f66efa55bdfc", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -228,6 +228,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).dep_kind.get()\n     }\n \n+    fn export_macros(&self, cnum: CrateNum) {\n+        if self.get_crate_data(cnum).dep_kind.get() == DepKind::UnexportedMacrosOnly {\n+            self.get_crate_data(cnum).dep_kind.set(DepKind::MacrosOnly)\n+        }\n+    }\n+\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>\n     {\n         self.get_crate_data(cnum).get_lang_items()"}, {"sha": "d5b08927a06f10402ee549646a2733a71543279c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -21,7 +21,7 @@ use rustc::util::nodemap::FxHashMap;\n use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n \n-use rustc::middle::cstore::{DepKind, InlinedItem, LinkagePreference};\n+use rustc::middle::cstore::{InlinedItem, LinkagePreference};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::middle::lang_items;\n@@ -729,7 +729,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         // Iterate over all children.\n-        let macros_only = self.dep_kind.get() == DepKind::MacrosOnly;\n+        let macros_only = self.dep_kind.get().macros_only();\n         for child_index in item.children.decode(self) {\n             if macros_only {\n                 continue"}, {"sha": "854c5f910c1aeea1df24e8695332783f17bd1e55", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -21,7 +21,7 @@ use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use ResolveResult::Success;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n-use rustc::middle::cstore::{DepKind, LoadedMacro};\n+use rustc::middle::cstore::LoadedMacro;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n use rustc::ty;\n@@ -492,7 +492,7 @@ impl<'b> Resolver<'b> {\n \n     fn get_extern_crate_root(&mut self, cnum: CrateNum) -> Module<'b> {\n         let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n-        let macros_only = self.session.cstore.dep_kind(cnum) == DepKind::MacrosOnly;\n+        let macros_only = self.session.cstore.dep_kind(cnum).macros_only();\n         let arenas = self.arenas;\n         *self.extern_crate_roots.entry((cnum, macros_only)).or_insert_with(|| {\n             arenas.alloc_module(ModuleS {\n@@ -567,7 +567,8 @@ impl<'b> Resolver<'b> {\n         if self.current_module.parent.is_some() && legacy_imports != LegacyMacroImports::default() {\n             span_err!(self.session, item.span, E0468,\n                       \"an `extern crate` loading macros must be at the crate root\");\n-        } else if self.session.cstore.dep_kind(cnum) == DepKind::MacrosOnly &&\n+        } else if !self.use_extern_macros &&\n+                  self.session.cstore.dep_kind(cnum).macros_only() &&\n                   legacy_imports == LegacyMacroImports::default() {\n             let msg = \"custom derive crates and `#[no_link]` crates have no effect without \\\n                        `#[macro_use]`\";\n@@ -590,7 +591,9 @@ impl<'b> Resolver<'b> {\n             }\n         }\n         for (name, span) in legacy_imports.reexports {\n-            self.used_crates.insert(module.def_id().unwrap().krate);\n+            let krate = module.def_id().unwrap().krate;\n+            self.used_crates.insert(krate);\n+            self.session.cstore.export_macros(krate);\n             let result = self.resolve_name_in_module(module, name, MacroNS, false, None);\n             if let Success(binding) = result {\n                 self.macro_exports.push(Export { name: name, def: binding.def() });"}, {"sha": "5c9e8bb93718a7be00469e1a8ff660f362bb7084", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c267a8d5ab141faaf5d4b33a20cac62cdc4507/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=39c267a8d5ab141faaf5d4b33a20cac62cdc4507", "patch": "@@ -743,6 +743,9 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                (binding.is_import() || binding.is_extern_crate()) {\n                 let def = binding.def();\n                 if def != Def::Err {\n+                    if !def.def_id().is_local() {\n+                        self.session.cstore.export_macros(def.def_id().krate);\n+                    }\n                     reexports.push(Export { name: name, def: def });\n                 }\n             }"}]}