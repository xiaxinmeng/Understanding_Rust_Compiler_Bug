{"sha": "3ff01361d578d611d3b09c3abca059f7cecd204c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZjAxMzYxZDU3OGQ2MTFkM2IwOWMzYWJjYTA1OWY3Y2VjZDIwNGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-26T23:27:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T23:43:18Z"}, "message": "rt: Make the CC sweep use the box annihilator", "tree": {"sha": "411b2b7314b256678d931e93ff75fe4eed026fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411b2b7314b256678d931e93ff75fe4eed026fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ff01361d578d611d3b09c3abca059f7cecd204c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff01361d578d611d3b09c3abca059f7cecd204c", "html_url": "https://github.com/rust-lang/rust/commit/3ff01361d578d611d3b09c3abca059f7cecd204c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ff01361d578d611d3b09c3abca059f7cecd204c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad26b00696afb1b74a636fa02e2600485a914d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad26b00696afb1b74a636fa02e2600485a914d47", "html_url": "https://github.com/rust-lang/rust/commit/ad26b00696afb1b74a636fa02e2600485a914d47"}], "stats": {"total": 197, "additions": 7, "deletions": 190}, "files": [{"sha": "7403c077d5d8b9df2b8274a1002622e4a871c228", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 7, "deletions": 190, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/3ff01361d578d611d3b09c3abca059f7cecd204c/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3ff01361d578d611d3b09c3abca059f7cecd204c/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=3ff01361d578d611d3b09c3abca059f7cecd204c", "patch": "@@ -20,6 +20,9 @@\n \n using namespace std;\n \n+void\n+annihilate_box(rust_task *task, rust_opaque_box *box);\n+\n namespace cc {\n \n // Internal reference count computation\n@@ -448,203 +451,17 @@ mark::do_mark(rust_task *task,\n     }\n }\n \n-class sweep : public shape::data<sweep,shape::ptr> {\n-    friend class shape::data<sweep,shape::ptr>;\n-\n-    sweep(const sweep &other, const shape::ptr &in_dp)\n-        : shape::data<sweep,shape::ptr>(other.task, other.align,\n-                                        other.sp, other.params,\n-                                        other.tables, in_dp) {}\n-\n-    sweep(const sweep &other,\n-          const uint8_t *in_sp,\n-          const shape::type_param *in_params,\n-          const rust_shape_tables *in_tables = NULL)\n-        : shape::data<sweep,shape::ptr>(other.task,\n-                                        other.align,\n-                                        in_sp,\n-                                        in_params,\n-                                        in_tables ? in_tables : other.tables,\n-                                        other.dp) {}\n-\n-    sweep(const sweep &other,\n-          const uint8_t *in_sp,\n-          const shape::type_param *in_params,\n-          const rust_shape_tables *in_tables,\n-          shape::ptr in_dp)\n-        : shape::data<sweep,shape::ptr>(other.task,\n-                                        other.align,\n-                                        in_sp,\n-                                        in_params,\n-                                        in_tables,\n-                                        in_dp) {}\n-\n-    sweep(rust_task *in_task,\n-          bool in_align,\n-          const uint8_t *in_sp,\n-          const shape::type_param *in_params,\n-          const rust_shape_tables *in_tables,\n-          uint8_t *in_data)\n-        : shape::data<sweep,shape::ptr>(in_task, in_align, in_sp,\n-                                        in_params, in_tables, in_data) {}\n-\n-    void walk_vec2(bool is_pod, uint16_t sp_size) {\n-        void *vec = shape::get_dp<void *>(dp);\n-        walk_vec2(is_pod, get_vec_data_range(dp));\n-        task->kernel->free(vec);\n-    }\n-\n-    void walk_vec2(bool is_pod,\n-                  const std::pair<shape::ptr,shape::ptr> &data_range) {\n-        sweep sub(*this, data_range.first);\n-        shape::ptr data_end = sub.end_dp = data_range.second;\n-        while (sub.dp < data_end) {\n-            sub.walk_reset();\n-            sub.align = true;\n-        }\n-    }\n-\n-    void walk_tag2(shape::tag_info &tinfo, uint32_t tag_variant) {\n-        shape::data<sweep,shape::ptr>::walk_variant1(tinfo, tag_variant);\n-    }\n-\n-    void walk_uniq2() {\n-        void *x = *((void **)dp);\n-        // free contents first:\n-        shape::data<sweep,shape::ptr>::walk_uniq_contents1();\n-        // now free the ptr:\n-        task->kernel->free(x);\n-    }\n-\n-    void walk_box2() {\n-        // In sweep phase, do not walk the box contents.  There is an\n-        // outer loop walking all remaining boxes, and this box may well\n-        // have been freed already!\n-    }\n-\n-    void walk_fn2(char code) {\n-        switch (code) {\n-          case shape::SHAPE_UNIQ_FN: {\n-              fn_env_pair pair = *(fn_env_pair*)dp;\n-\n-              if (pair.env) {\n-                  // free closed over data:\n-                  shape::data<sweep,shape::ptr>::walk_fn_contents1();\n-                  \n-                  // now free the ptr:\n-                  task->kernel->free(pair.env);\n-              }\n-              break;\n-          }\n-          case shape::SHAPE_BOX_FN: {\n-              // the box will be visited separately:\n-              shape::bump_dp<void*>(dp); // skip over the code ptr\n-              walk_box2();               // walk over the environment ptr\n-              break;\n-          }\n-          case shape::SHAPE_BARE_FN:         // Does not close over data.\n-          case shape::SHAPE_STACK_FN: break; // Not reachable from heap.\n-          default: abort();\n-        }\n-    }\n-\n-    void walk_obj2() {\n-        return;\n-    }\n-\n-    void walk_iface2() {\n-        walk_box2();\n-    }\n-\n-    void walk_tydesc2(char kind) {\n-        switch(kind) {\n-          case shape::SHAPE_TYDESC:\n-          case shape::SHAPE_SEND_TYDESC:\n-            break;\n-          default: abort();\n-        }\n-    }\n-\n-    struct run_dtor_args {\n-        const shape::rust_fn *dtor;\n-        void *data;\n-    };\n-\n-    typedef void (*dtor)(void **retptr, void *env, void *dptr);\n-\n-    static void run_dtor(run_dtor_args *args) {\n-        dtor f = (dtor)args->dtor;\n-        f(NULL, args->dtor->env, args->data);\n-    }\n-\n-    void walk_res2(const shape::rust_fn *dtor, unsigned n_params,\n-                   const shape::type_param *params, const uint8_t *end_sp,\n-                   bool live) {\n-        void *data = (void*)(uintptr_t)dp;\n-        // Switch back to the Rust stack to run the destructor\n-        run_dtor_args args = {dtor, data};\n-        task->call_on_rust_stack((void*)&args, (void*)run_dtor);\n-\n-        while (this->sp != end_sp) {\n-            this->walk();\n-            align = true;\n-        }\n-    }\n-\n-    void walk_subcontext2(sweep &sub) { sub.walk(); }\n-\n-    void walk_uniq_contents2(sweep &sub) { sub.walk(); }\n-\n-    void walk_struct2(const uint8_t *end_sp) {\n-        while (this->sp != end_sp) {\n-            this->walk();\n-            align = true;\n-        }\n-    }\n-\n-    void walk_variant2(shape::tag_info &tinfo, uint32_t variant_id,\n-                      const std::pair<const uint8_t *,const uint8_t *>\n-                      variant_ptr_and_end) {\n-        sweep sub(*this, variant_ptr_and_end.first, tinfo.params);\n-\n-        const uint8_t *variant_end = variant_ptr_and_end.second;\n-        while (sub.sp < variant_end) {\n-            sub.walk();\n-            align = true;\n-        }\n-    }\n-\n-    template<typename T>\n-    inline void walk_number2() { /* no-op */ }\n-\n-public:\n-    static void do_sweep(rust_task *task,\n-                         const std::set<rust_opaque_box*> &marked);\n-};\n-\n void\n-sweep::do_sweep(rust_task *task,\n-                const std::set<rust_opaque_box*> &marked) {\n+do_sweep(rust_task *task,\n+         const std::set<rust_opaque_box*> &marked) {\n     boxed_region *boxed = &task->boxed;\n     rust_opaque_box *box = boxed->first_live_alloc();\n     while (box != NULL) {\n         // save next ptr as we may be freeing box\n         rust_opaque_box *box_next = box->next;\n         if (marked.find(box) == marked.end()) {\n             LOG(task, gc, \"object is part of a cycle: %p\", box);\n-\n-            const type_desc *tydesc = box->td;\n-            uint8_t *p = (uint8_t*) box_body(box);\n-            shape::arena arena;\n-            shape::type_param *params =\n-                shape::type_param::from_tydesc_and_data(tydesc, p, arena);\n-\n-            sweep sweep(task, true, tydesc->shape,\n-                        params, tydesc->shape_tables,\n-                        p);\n-            sweep.walk();\n-\n-            boxed->free(box);\n+            annihilate_box(task, box);\n         }\n         box = box_next;\n     }\n@@ -664,7 +481,7 @@ do_cc(rust_task *task) {\n     std::set<rust_opaque_box*> marked;\n     mark::do_mark(task, roots, marked);\n \n-    sweep::do_sweep(task, marked);\n+    do_sweep(task, marked);\n }\n \n void"}]}