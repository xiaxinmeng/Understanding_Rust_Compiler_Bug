{"sha": "b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "node_id": "C_kwDOAAsO6NoAKGI2MDU3YmY3YjdlZTdjNThlNmEzOWVhZDAyZWFhMTNiNzVmOTA4YzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T17:17:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T17:17:43Z"}, "message": "Auto merge of #89435 - Manishearth:rollup-vh2ih7k, r=Manishearth\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #87868 (Added -Z randomize-layout flag)\n - #88820 (Add `pie` as another `relocation-model` value)\n - #89029 (feat(rustc_parse): recover from pre-RFC-2000 const generics syntax)\n - #89322 (Reapply \"Remove optimization_fuel_crate from Session\")\n - #89340 (Improve error message for `printf`-style format strings)\n - #89415 (Correct caller/callsite confusion in inliner message)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0e8e802c3a63ccb92171d9385c718eaa16340de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e8e802c3a63ccb92171d9385c718eaa16340de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "html_url": "https://github.com/rust-lang/rust/commit/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed937594d3912ced11f6f35a90bb8bf591909d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed937594d3912ced11f6f35a90bb8bf591909d2a", "html_url": "https://github.com/rust-lang/rust/commit/ed937594d3912ced11f6f35a90bb8bf591909d2a"}, {"sha": "534946cba101325387a213d37dd9a1d30f08660c", "url": "https://api.github.com/repos/rust-lang/rust/commits/534946cba101325387a213d37dd9a1d30f08660c", "html_url": "https://github.com/rust-lang/rust/commit/534946cba101325387a213d37dd9a1d30f08660c"}], "stats": {"total": 593, "additions": 527, "deletions": 66}, "files": [{"sha": "a4e1ab6c1e4a871c8ae2271d57891241275d3959", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -1660,7 +1660,7 @@ checksum = \"3ca8957e71f04a205cb162508f9326aea04676c8dfd0711220190d6b83664f3f\"\n dependencies = [\n  \"bitmaps\",\n  \"rand_core 0.5.1\",\n- \"rand_xoshiro\",\n+ \"rand_xoshiro 0.4.0\",\n  \"sized-chunks\",\n  \"typenum\",\n  \"version_check\",\n@@ -2256,7 +2256,7 @@ dependencies = [\n  \"libc\",\n  \"log\",\n  \"measureme\",\n- \"rand 0.8.3\",\n+ \"rand 0.8.4\",\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n  \"shell-escape\",\n@@ -2852,9 +2852,9 @@ dependencies = [\n \n [[package]]\n name = \"rand\"\n-version = \"0.8.3\"\n+version = \"0.8.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e\"\n+checksum = \"2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8\"\n dependencies = [\n  \"libc\",\n  \"rand_chacha 0.3.0\",\n@@ -2945,6 +2945,15 @@ dependencies = [\n  \"rand_core 0.5.1\",\n ]\n \n+[[package]]\n+name = \"rand_xoshiro\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa\"\n+dependencies = [\n+ \"rand_core 0.6.2\",\n+]\n+\n [[package]]\n name = \"rayon\"\n version = \"1.3.1\"\n@@ -4087,6 +4096,8 @@ dependencies = [\n  \"either\",\n  \"gsgdt\",\n  \"polonius-engine\",\n+ \"rand 0.8.4\",\n+ \"rand_xoshiro 0.6.0\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n  \"rustc_arena\",\n@@ -5097,7 +5108,7 @@ checksum = \"dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n  \"libc\",\n- \"rand 0.8.3\",\n+ \"rand 0.8.4\",\n  \"redox_syscall\",\n  \"remove_dir_all\",\n  \"winapi\","}, {"sha": "f0056cb79766a49f4db2f34a68a81b93c5176063", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -1154,11 +1154,12 @@ pub fn expand_preparsed_format_args(\n                     // account for `\"` and account for raw strings `r#`\n                     let padding = str_style.map(|i| i + 2).unwrap_or(1);\n                     for sub in foreign::$kind::iter_subs(fmt_str, padding) {\n-                        let trn = match sub.translate() {\n-                            Some(trn) => trn,\n+                        let (trn, success) = match sub.translate() {\n+                            Ok(trn) => (trn, true),\n+                            Err(Some(msg)) => (msg, false),\n \n                             // If it has no translation, don't call it out specifically.\n-                            None => continue,\n+                            _ => continue,\n                         };\n \n                         let pos = sub.position();\n@@ -1175,9 +1176,24 @@ pub fn expand_preparsed_format_args(\n \n                         if let Some(inner_sp) = pos {\n                             let sp = fmt_sp.from_inner(inner_sp);\n-                            suggestions.push((sp, trn));\n+\n+                            if success {\n+                                suggestions.push((sp, trn));\n+                            } else {\n+                                diag.span_note(\n+                                    sp,\n+                                    &format!(\"format specifiers use curly braces, and {}\", trn),\n+                                );\n+                            }\n                         } else {\n-                            diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                            if success {\n+                                diag.help(&format!(\"`{}` should be written as `{}`\", sub, trn));\n+                            } else {\n+                                diag.note(&format!(\n+                                    \"`{}` should use curly braces, and {}\",\n+                                    sub, trn\n+                                ));\n+                            }\n                         }\n                     }\n "}, {"sha": "bfddd7073ff2c3f993f7727a80c4012d182bcc0a", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -1,4 +1,4 @@\n-pub mod printf {\n+pub(crate) mod printf {\n     use super::strcursor::StrCursor as Cur;\n     use rustc_span::InnerSpan;\n \n@@ -36,10 +36,10 @@ pub mod printf {\n         ///\n         /// This ignores cases where the substitution does not have an exact equivalent, or where\n         /// the substitution would be unnecessary.\n-        pub fn translate(&self) -> Option<String> {\n+        pub fn translate(&self) -> Result<String, Option<String>> {\n             match *self {\n                 Substitution::Format(ref fmt) => fmt.translate(),\n-                Substitution::Escape => None,\n+                Substitution::Escape => Err(None),\n             }\n         }\n     }\n@@ -68,9 +68,9 @@ pub mod printf {\n     impl Format<'_> {\n         /// Translate this directive into an equivalent Rust formatting directive.\n         ///\n-        /// Returns `None` in cases where the `printf` directive does not have an exact Rust\n+        /// Returns `Err` in cases where the `printf` directive does not have an exact Rust\n         /// equivalent, rather than guessing.\n-        pub fn translate(&self) -> Option<String> {\n+        pub fn translate(&self) -> Result<String, Option<String>> {\n             use std::fmt::Write;\n \n             let (c_alt, c_zero, c_left, c_plus) = {\n@@ -84,7 +84,12 @@ pub mod printf {\n                         '0' => c_zero = true,\n                         '-' => c_left = true,\n                         '+' => c_plus = true,\n-                        _ => return None,\n+                        _ => {\n+                            return Err(Some(format!(\n+                                \"the flag `{}` is unknown or unsupported\",\n+                                c\n+                            )));\n+                        }\n                     }\n                 }\n                 (c_alt, c_zero, c_left, c_plus)\n@@ -104,7 +109,9 @@ pub mod printf {\n             let width = match self.width {\n                 Some(Num::Next) => {\n                     // NOTE: Rust doesn't support this.\n-                    return None;\n+                    return Err(Some(\n+                        \"you have to use a positional or named parameter for the width\".to_string(),\n+                    ));\n                 }\n                 w @ Some(Num::Arg(_)) => w,\n                 w @ Some(Num::Num(_)) => w,\n@@ -125,13 +132,21 @@ pub mod printf {\n                 \"p\" => (Some(self.type_), false, true),\n                 \"g\" => (Some(\"e\"), true, false),\n                 \"G\" => (Some(\"E\"), true, false),\n-                _ => return None,\n+                _ => {\n+                    return Err(Some(format!(\n+                        \"the conversion specifier `{}` is unknown or unsupported\",\n+                        self.type_\n+                    )));\n+                }\n             };\n \n             let (fill, width, precision) = match (is_int, width, precision) {\n                 (true, Some(_), Some(_)) => {\n                     // Rust can't duplicate this insanity.\n-                    return None;\n+                    return Err(Some(\n+                        \"width and precision cannot both be specified for integer conversions\"\n+                            .to_string(),\n+                    ));\n                 }\n                 (true, None, Some(p)) => (Some(\"0\"), Some(p), None),\n                 (true, w, None) => (fill, w, None),\n@@ -169,7 +184,17 @@ pub mod printf {\n             s.push('{');\n \n             if let Some(arg) = self.parameter {\n-                write!(s, \"{}\", arg.checked_sub(1)?).ok()?;\n+                match write!(\n+                    s,\n+                    \"{}\",\n+                    match arg.checked_sub(1) {\n+                        Some(a) => a,\n+                        None => return Err(None),\n+                    }\n+                ) {\n+                    Err(_) => return Err(None),\n+                    _ => {}\n+                }\n             }\n \n             if has_options {\n@@ -199,12 +224,18 @@ pub mod printf {\n                 }\n \n                 if let Some(width) = width {\n-                    width.translate(&mut s).ok()?;\n+                    match width.translate(&mut s) {\n+                        Err(_) => return Err(None),\n+                        _ => {}\n+                    }\n                 }\n \n                 if let Some(precision) = precision {\n                     s.push('.');\n-                    precision.translate(&mut s).ok()?;\n+                    match precision.translate(&mut s) {\n+                        Err(_) => return Err(None),\n+                        _ => {}\n+                    }\n                 }\n \n                 if let Some(type_) = type_ {\n@@ -213,7 +244,7 @@ pub mod printf {\n             }\n \n             s.push('}');\n-            Some(s)\n+            Ok(s)\n         }\n     }\n \n@@ -623,11 +654,11 @@ pub mod shell {\n             }\n         }\n \n-        pub fn translate(&self) -> Option<String> {\n+        pub fn translate(&self) -> Result<String, Option<String>> {\n             match *self {\n-                Substitution::Ordinal(n, _) => Some(format!(\"{{{}}}\", n)),\n-                Substitution::Name(n, _) => Some(format!(\"{{{}}}\", n)),\n-                Substitution::Escape(_) => None,\n+                Substitution::Ordinal(n, _) => Ok(format!(\"{{{}}}\", n)),\n+                Substitution::Name(n, _) => Ok(format!(\"{{{}}}\", n)),\n+                Substitution::Escape(_) => Err(None),\n             }\n         }\n     }"}, {"sha": "1336aab7316747a8e5043e321abc07314826d268", "filename": "compiler/rustc_builtin_macros/src/format_foreign/printf/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -3,7 +3,7 @@ use super::{iter_subs, parse_next_substitution as pns, Format as F, Num as N, Su\n macro_rules! assert_eq_pnsat {\n     ($lhs:expr, $rhs:expr) => {\n         assert_eq!(\n-            pns($lhs).and_then(|(s, _)| s.translate()),\n+            pns($lhs).and_then(|(s, _)| s.translate().ok()),\n             $rhs.map(<String as From<&str>>::from)\n         )\n     };\n@@ -98,7 +98,7 @@ fn test_parse() {\n #[test]\n fn test_iter() {\n     let s = \"The %d'th word %% is: `%.*s` %!\\n\";\n-    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n+    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate().ok()).collect();\n     assert_eq!(\n         subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n         vec![Some(\"{}\"), None, Some(\"{:.*}\"), None]"}, {"sha": "f5f82732f2034c9cdc534a7859faaf418a479688", "filename": "compiler/rustc_builtin_macros/src/format_foreign/shell/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -3,7 +3,7 @@ use super::{parse_next_substitution as pns, Substitution as S};\n macro_rules! assert_eq_pnsat {\n     ($lhs:expr, $rhs:expr) => {\n         assert_eq!(\n-            pns($lhs).and_then(|(f, _)| f.translate()),\n+            pns($lhs).and_then(|(f, _)| f.translate().ok()),\n             $rhs.map(<String as From<&str>>::from)\n         )\n     };\n@@ -37,7 +37,7 @@ fn test_parse() {\n fn test_iter() {\n     use super::iter_subs;\n     let s = \"The $0'th word $$ is: `$WORD` $!\\n\";\n-    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n+    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate().ok()).collect();\n     assert_eq!(\n         subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n         vec![Some(\"{0}\"), None, Some(\"{WORD}\")]"}, {"sha": "9b0e75268948766df74ea32acc85f465e59d22af", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -129,7 +129,8 @@ fn to_pass_builder_opt_level(cfg: config::OptLevel) -> llvm::PassBuilderOptLevel\n fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocModel {\n     match relocation_model {\n         RelocModel::Static => llvm::RelocModel::Static,\n-        RelocModel::Pic => llvm::RelocModel::PIC,\n+        // LLVM doesn't have a PIE relocation model, it represents PIE as PIC with an extra attribute.\n+        RelocModel::Pic | RelocModel::Pie => llvm::RelocModel::PIC,\n         RelocModel::DynamicNoPic => llvm::RelocModel::DynamicNoPic,\n         RelocModel::Ropi => llvm::RelocModel::ROPI,\n         RelocModel::Rwpi => llvm::RelocModel::RWPI,"}, {"sha": "7bdbec11d6033e1c74f343a94160526f1d253e7e", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -195,11 +195,14 @@ pub unsafe fn create_module(\n     let llvm_target = SmallCStr::new(&sess.target.llvm_target);\n     llvm::LLVMRustSetNormalizedTarget(llmod, llvm_target.as_ptr());\n \n-    if sess.relocation_model() == RelocModel::Pic {\n+    let reloc_model = sess.relocation_model();\n+    if matches!(reloc_model, RelocModel::Pic | RelocModel::Pie) {\n         llvm::LLVMRustSetModulePICLevel(llmod);\n         // PIE is potentially more effective than PIC, but can only be used in executables.\n         // If all our outputs are executables, then we can relax PIC to PIE.\n-        if sess.crate_types().iter().all(|ty| *ty == CrateType::Executable) {\n+        if reloc_model == RelocModel::Pie\n+            || sess.crate_types().iter().all(|ty| *ty == CrateType::Executable)\n+        {\n             llvm::LLVMRustSetModulePIELevel(llmod);\n         }\n     }"}, {"sha": "c44cc6560563fa468ab36d0c93800fc5f249903c", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -211,9 +211,16 @@ impl CodegenBackend for LlvmCodegenBackend {\n         match req {\n             PrintRequest::RelocationModels => {\n                 println!(\"Available relocation models:\");\n-                for name in\n-                    &[\"static\", \"pic\", \"dynamic-no-pic\", \"ropi\", \"rwpi\", \"ropi-rwpi\", \"default\"]\n-                {\n+                for name in &[\n+                    \"static\",\n+                    \"pic\",\n+                    \"pie\",\n+                    \"dynamic-no-pic\",\n+                    \"ropi\",\n+                    \"rwpi\",\n+                    \"ropi-rwpi\",\n+                    \"default\",\n+                ] {\n                     println!(\"    {}\", name);\n                 }\n                 println!();"}, {"sha": "b9022a391e6f139e2942bdd64574a55cb9ac809a", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -143,6 +143,12 @@ impl CodegenCx<'ll, 'tcx> {\n             return true;\n         }\n \n+        // With pie relocation model calls of functions defined in the translation\n+        // unit can use copy relocations.\n+        if self.tcx.sess.relocation_model() == RelocModel::Pie && !is_declaration {\n+            return true;\n+        }\n+\n         return false;\n     }\n }"}, {"sha": "43affdebbafa9dad4e8f1b574946f69b5df0cd8f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -1490,9 +1490,13 @@ fn exec_linker(\n fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n     let kind = match (crate_type, sess.crt_static(Some(crate_type)), sess.relocation_model()) {\n         (CrateType::Executable, _, _) if sess.is_wasi_reactor() => LinkOutputKind::WasiReactorExe,\n-        (CrateType::Executable, false, RelocModel::Pic) => LinkOutputKind::DynamicPicExe,\n+        (CrateType::Executable, false, RelocModel::Pic | RelocModel::Pie) => {\n+            LinkOutputKind::DynamicPicExe\n+        }\n         (CrateType::Executable, false, _) => LinkOutputKind::DynamicNoPicExe,\n-        (CrateType::Executable, true, RelocModel::Pic) => LinkOutputKind::StaticPicExe,\n+        (CrateType::Executable, true, RelocModel::Pic | RelocModel::Pie) => {\n+            LinkOutputKind::StaticPicExe\n+        }\n         (CrateType::Executable, true, _) => LinkOutputKind::StaticNoPicExe,\n         (_, true, _) => LinkOutputKind::StaticDylib,\n         (_, false, _) => LinkOutputKind::DynamicDylib,"}, {"sha": "9c275b316c545473680efcea1499e2e4e8dd2e1c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -384,6 +384,16 @@ impl GenericArgs<'_> {\n         self.args.iter().any(|arg| matches!(arg, GenericArg::Type(_)))\n     }\n \n+    pub fn has_err(&self) -> bool {\n+        self.args.iter().any(|arg| match arg {\n+            GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err),\n+            _ => false,\n+        }) || self.bindings.iter().any(|arg| match arg.kind {\n+            TypeBindingKind::Equality { ty } => matches!(ty.kind, TyKind::Err),\n+            _ => false,\n+        })\n+    }\n+\n     #[inline]\n     pub fn num_type_params(&self) -> usize {\n         self.args.iter().filter(|arg| matches!(arg, GenericArg::Type(_))).count()"}, {"sha": "d06c593d39481e12e11a5adbb82778dc0bbfd669", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -32,3 +32,5 @@ chalk-ir = \"0.55.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_session = { path = \"../rustc_session\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n+rand = \"0.8.4\"\n+rand_xoshiro = \"0.6.0\""}, {"sha": "b6aeb9122c3d302dc74098d3ea362191977125e3", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -24,6 +24,9 @@ use std::iter;\n use std::num::NonZeroUsize;\n use std::ops::Bound;\n \n+use rand::{seq::SliceRandom, SeedableRng};\n+use rand_xoshiro::Xoshiro128StarStar;\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers =\n         ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n@@ -324,6 +327,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n+        // `ReprOptions.layout_seed` is a deterministic seed that we can use to\n+        // randomize field ordering with\n+        let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);\n+\n         let optimize = !repr.inhibit_struct_field_reordering_opt();\n         if optimize {\n             let end =\n@@ -332,20 +339,35 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             let field_align = |f: &TyAndLayout<'_>| {\n                 if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }\n             };\n-            match kind {\n-                StructKind::AlwaysSized | StructKind::MaybeUnsized => {\n-                    optimizing.sort_by_key(|&x| {\n-                        // Place ZSTs first to avoid \"interesting offsets\",\n-                        // especially with only one or two non-ZST fields.\n-                        let f = &fields[x as usize];\n-                        (!f.is_zst(), cmp::Reverse(field_align(f)))\n-                    });\n-                }\n-                StructKind::Prefixed(..) => {\n-                    // Sort in ascending alignment so that the layout stay optimal\n-                    // regardless of the prefix\n-                    optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+\n+            // If `-Z randomize-layout` was enabled for the type definition we can shuffle\n+            // the field ordering to try and catch some code making assumptions about layouts\n+            // we don't guarantee\n+            if repr.can_randomize_type_layout() {\n+                // Shuffle the ordering of the fields\n+                optimizing.shuffle(&mut rng);\n+\n+            // Otherwise we just leave things alone and actually optimize the type's fields\n+            } else {\n+                match kind {\n+                    StructKind::AlwaysSized | StructKind::MaybeUnsized => {\n+                        optimizing.sort_by_key(|&x| {\n+                            // Place ZSTs first to avoid \"interesting offsets\",\n+                            // especially with only one or two non-ZST fields.\n+                            let f = &fields[x as usize];\n+                            (!f.is_zst(), cmp::Reverse(field_align(f)))\n+                        });\n+                    }\n+\n+                    StructKind::Prefixed(..) => {\n+                        // Sort in ascending alignment so that the layout stays optimal\n+                        // regardless of the prefix\n+                        optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+                    }\n                 }\n+\n+                // FIXME(Kixiron): We can always shuffle fields within a given alignment class\n+                //                 regardless of the status of `-Z randomize-layout`\n             }\n         }\n "}, {"sha": "d04d1565fead7cdb5464bedda4ff97796c8ca955", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -1491,6 +1491,9 @@ bitflags! {\n         const IS_LINEAR          = 1 << 3;\n         // If true, don't expose any niche to type's context.\n         const HIDE_NICHE         = 1 << 4;\n+        // If true, the type's layout can be randomized using\n+        // the seed stored in `ReprOptions.layout_seed`\n+        const RANDOMIZE_LAYOUT   = 1 << 5;\n         // Any of these flags being set prevent field reordering optimisation.\n         const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits |\n                                    ReprFlags::IS_SIMD.bits |\n@@ -1505,6 +1508,14 @@ pub struct ReprOptions {\n     pub align: Option<Align>,\n     pub pack: Option<Align>,\n     pub flags: ReprFlags,\n+    /// The seed to be used for randomizing a type's layout\n+    ///\n+    /// Note: This could technically be a `[u8; 16]` (a `u128`) which would\n+    /// be the \"most accurate\" hash as it'd encompass the item and crate\n+    /// hash without loss, but it does pay the price of being larger.\n+    /// Everything's a tradeoff, a `u64` seed should be sufficient for our\n+    /// purposes (primarily `-Z randomize-layout`)\n+    pub field_shuffle_seed: u64,\n }\n \n impl ReprOptions {\n@@ -1513,6 +1524,11 @@ impl ReprOptions {\n         let mut size = None;\n         let mut max_align: Option<Align> = None;\n         let mut min_pack: Option<Align> = None;\n+\n+        // Generate a deterministically-derived seed from the item's path hash\n+        // to allow for cross-crate compilation to actually work\n+        let field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();\n+\n         for attr in tcx.get_attrs(did).iter() {\n             for r in attr::find_repr_attrs(&tcx.sess, attr) {\n                 flags.insert(match r {\n@@ -1541,33 +1557,45 @@ impl ReprOptions {\n             }\n         }\n \n+        // If `-Z randomize-layout` was enabled for the type definition then we can\n+        // consider performing layout randomization\n+        if tcx.sess.opts.debugging_opts.randomize_layout {\n+            flags.insert(ReprFlags::RANDOMIZE_LAYOUT);\n+        }\n+\n         // This is here instead of layout because the choice must make it into metadata.\n         if !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\", tcx.def_path_str(did))) {\n             flags.insert(ReprFlags::IS_LINEAR);\n         }\n-        ReprOptions { int: size, align: max_align, pack: min_pack, flags }\n+\n+        Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }\n     }\n \n     #[inline]\n     pub fn simd(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_SIMD)\n     }\n+\n     #[inline]\n     pub fn c(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_C)\n     }\n+\n     #[inline]\n     pub fn packed(&self) -> bool {\n         self.pack.is_some()\n     }\n+\n     #[inline]\n     pub fn transparent(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_TRANSPARENT)\n     }\n+\n     #[inline]\n     pub fn linear(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_LINEAR)\n     }\n+\n     #[inline]\n     pub fn hide_niche(&self) -> bool {\n         self.flags.contains(ReprFlags::HIDE_NICHE)\n@@ -1594,9 +1622,17 @@ impl ReprOptions {\n                 return true;\n             }\n         }\n+\n         self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()\n     }\n \n+    /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`\n+    /// was enabled for its declaration crate\n+    pub fn can_randomize_type_layout(&self) -> bool {\n+        !self.inhibit_struct_field_reordering_opt()\n+            && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)\n+    }\n+\n     /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.\n     pub fn inhibit_union_abi_opt(&self) -> bool {\n         self.c()"}, {"sha": "ee4e91ecb62b036451e7a48c3e2c3635f6f30f7a", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -147,7 +147,7 @@ impl Inliner<'tcx> {\n         self.check_mir_body(callsite, callee_body, callee_attrs)?;\n \n         if !self.tcx.consider_optimizing(|| {\n-            format!(\"Inline {:?} into {}\", callee_body.span, callsite.callee)\n+            format!(\"Inline {:?} into {:?}\", callsite.callee, caller_body.source)\n         }) {\n             return Err(\"optimization fuel exhausted\");\n         }"}, {"sha": "c7d080a80fe6f843c07895d292f16ae33e501ccd", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -495,20 +495,28 @@ impl<'a> Parser<'a> {\n             None => {\n                 let after_eq = eq.shrink_to_hi();\n                 let before_next = self.token.span.shrink_to_lo();\n-                self.struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\")\n-                    .span_suggestion(\n+                let mut err = self\n+                    .struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\");\n+                if matches!(self.token.kind, token::Comma | token::Gt) {\n+                    err.span_suggestion(\n                         self.sess.source_map().next_point(eq).to(before_next),\n                         \"to constrain the associated type, add a type after `=`\",\n                         \" TheType\".to_string(),\n                         Applicability::HasPlaceholders,\n-                    )\n-                    .span_suggestion(\n+                    );\n+                    err.span_suggestion(\n                         eq.to(before_next),\n                         &format!(\"remove the `=` if `{}` is a type\", ident),\n                         String::new(),\n                         Applicability::MaybeIncorrect,\n                     )\n-                    .emit();\n+                } else {\n+                    err.span_label(\n+                        self.token.span,\n+                        &format!(\"expected type, found {}\", super::token_descr(&self.token)),\n+                    )\n+                };\n+                return Err(err);\n             }\n         }\n         Ok(self.mk_ty(span, ast::TyKind::Err))\n@@ -572,6 +580,25 @@ impl<'a> Parser<'a> {\n                     return self.recover_const_arg(start, err).map(Some);\n                 }\n             }\n+        } else if self.eat_keyword_noexpect(kw::Const) {\n+            // Detect and recover from the old, pre-RFC2000 syntax for const generics.\n+            let mut err = self.struct_span_err(\n+                start,\n+                \"expected lifetime, type, or constant, found keyword `const`\",\n+            );\n+            if self.check_const_arg() {\n+                err.span_suggestion_verbose(\n+                    start.until(self.token.span),\n+                    \"the `const` keyword is only needed in the definition of the type\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.emit();\n+                GenericArg::Const(self.parse_const_arg()?)\n+            } else {\n+                let after_kw_const = self.token.span;\n+                return self.recover_const_arg(after_kw_const, err).map(Some);\n+            }\n         } else {\n             return Ok(None);\n         };"}, {"sha": "8ecb7a031ad8167864a0ffc6dc59a60b6111919d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -1246,6 +1246,8 @@ options! {\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some statistics about the query system (default: no)\"),\n+    randomize_layout: bool = (false, parse_bool, [TRACKED],\n+        \"randomize the layout of types (default: no)\"),\n     relax_elf_relocations: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether ELF relocations can be relaxed\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],"}, {"sha": "fbcc3bf2c481539fda6efebd359f976acae0c3ae", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -162,9 +162,6 @@ pub struct Session {\n     /// Data about code being compiled, gathered during compilation.\n     pub code_stats: CodeStats,\n \n-    /// If `-zfuel=crate=n` is specified, `Some(crate)`.\n-    optimization_fuel_crate: Option<String>,\n-\n     /// Tracks fuel info if `-zfuel=crate=n` is specified.\n     optimization_fuel: Lock<OptimizationFuel>,\n \n@@ -882,7 +879,7 @@ impl Session {\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n         let mut ret = true;\n-        if let Some(ref c) = self.optimization_fuel_crate {\n+        if let Some((ref c, _)) = self.opts.debugging_opts.fuel {\n             if c == crate_name {\n                 assert_eq!(self.threads(), 1);\n                 let mut fuel = self.optimization_fuel.lock();\n@@ -1260,7 +1257,6 @@ pub fn build_session(\n     let local_crate_source_file =\n         local_crate_source_file.map(|path| file_path_mapping.map_prefix(path).0);\n \n-    let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n     let optimization_fuel = Lock::new(OptimizationFuel {\n         remaining: sopts.debugging_opts.fuel.as_ref().map_or(0, |i| i.1),\n         out_of_fuel: false,\n@@ -1311,7 +1307,6 @@ pub fn build_session(\n             normalize_projection_ty: AtomicUsize::new(0),\n         },\n         code_stats: Default::default(),\n-        optimization_fuel_crate,\n         optimization_fuel,\n         print_fuel,\n         jobserver: jobserver::client(),"}, {"sha": "5276da1ba5a1c7cf0a5626379c37dbea69482368", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -288,6 +288,7 @@ impl ToJson for MergeFunctions {\n pub enum RelocModel {\n     Static,\n     Pic,\n+    Pie,\n     DynamicNoPic,\n     Ropi,\n     Rwpi,\n@@ -301,6 +302,7 @@ impl FromStr for RelocModel {\n         Ok(match s {\n             \"static\" => RelocModel::Static,\n             \"pic\" => RelocModel::Pic,\n+            \"pie\" => RelocModel::Pie,\n             \"dynamic-no-pic\" => RelocModel::DynamicNoPic,\n             \"ropi\" => RelocModel::Ropi,\n             \"rwpi\" => RelocModel::Rwpi,\n@@ -315,6 +317,7 @@ impl ToJson for RelocModel {\n         match *self {\n             RelocModel::Static => \"static\",\n             RelocModel::Pic => \"pic\",\n+            RelocModel::Pie => \"pie\",\n             RelocModel::DynamicNoPic => \"dynamic-no-pic\",\n             RelocModel::Ropi => \"ropi\",\n             RelocModel::Rwpi => \"rwpi\","}, {"sha": "456d3fe7b2f6aa8cf2d27a2d20de4513b71c45d5", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -600,7 +600,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     def_id,\n                 )\n                 .diagnostic()\n-                .emit();\n+                .emit_unless(gen_args.has_err());\n \n                 false\n             };"}, {"sha": "4f8c4c66f889122f21f9d49f0cf6de7a5adff8c7", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -435,6 +435,10 @@ Equivalent to the \"uppercase\" `-fPIC` or `-fPIE` options in other compilers,\n depending on the produced crate types.  \\\n This is the default model for majority of supported targets.\n \n+- `pie` - position independent executable, relocatable code but without support for symbol\n+interpositioning (replacing symbols by name using `LD_PRELOAD` and similar). Equivalent to the \"uppercase\" `-fPIE` option in other compilers. `pie`\n+code cannot be linked into shared libraries (you'll get a linking error on attempt to do this).\n+\n #### Special relocation models\n \n - `dynamic-no-pic` - relocatable external references, non-relocatable code.  \\"}, {"sha": "72471ffcdb0cb3f1f2b129b6c50497de39617737", "filename": "src/test/assembly/pic-relocation-model.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fassembly%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fassembly%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fpic-relocation-model.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,35 @@\n+// revisions: x64\n+// assembly-output: emit-asm\n+// [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=pic\n+// [x64] needs-llvm-components: x86\n+\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type=\"rlib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+// CHECK-LABEL: call_other_fn:\n+// CHECK:       {{(jmpq|callq)}} *other_fn@GOTPCREL(%rip)\n+#[no_mangle]\n+pub fn call_other_fn() -> u8 {\n+    unsafe {\n+        other_fn()\n+    }\n+}\n+\n+// CHECK-LABEL: other_fn:\n+// CHECK:       callq *foreign_fn@GOTPCREL(%rip)\n+#[no_mangle]\n+#[inline(never)]\n+pub fn other_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+extern \"C\" {fn foreign_fn() -> u8;}"}, {"sha": "e40797e038d4b43f411d7e8849dd0cf7c44a056d", "filename": "src/test/assembly/pie-relocation-model.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fassembly%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fassembly%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fpie-relocation-model.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,38 @@\n+// revisions: x64\n+// assembly-output: emit-asm\n+// [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=pie\n+// [x64] needs-llvm-components: x86\n+\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+#![crate_type=\"rlib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+// CHECK-LABEL: call_other_fn:\n+// With PIE local functions are called \"directly\".\n+// CHECK:       {{(jmp|callq)}} other_fn\n+#[no_mangle]\n+pub fn call_other_fn() -> u8 {\n+    unsafe {\n+        other_fn()\n+    }\n+}\n+\n+// CHECK-LABEL: other_fn:\n+// External functions are still called through GOT, since we don't know if the symbol\n+// is defined in the binary or in the shared library.\n+// CHECK:       callq *foreign_fn@GOTPCREL(%rip)\n+#[no_mangle]\n+#[inline(never)]\n+pub fn other_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+extern \"C\" {fn foreign_fn() -> u8;}"}, {"sha": "6e1d5a6c3f2712f22fca6991cd44ca62ea8f8fce", "filename": "src/test/codegen/pic-relocation-model.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpic-relocation-model.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -C relocation-model=pic\n+\n+#![crate_type = \"rlib\"]\n+\n+// CHECK: define i8 @call_foreign_fn()\n+#[no_mangle]\n+pub fn call_foreign_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+// CHECK: declare zeroext i8 @foreign_fn()\n+extern \"C\" {fn foreign_fn() -> u8;}\n+\n+// CHECK: !{i32 7, !\"PIC Level\", i32 2}"}, {"sha": "a843202a94f82c0bf73b34fbf48201bd4e307566", "filename": "src/test/codegen/pie-relocation-model.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fcodegen%2Fpie-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fcodegen%2Fpie-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpie-relocation-model.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -C relocation-model=pie\n+// only-x86_64-unknown-linux-gnu\n+\n+#![crate_type = \"rlib\"]\n+\n+// With PIE we know local functions cannot be interpositioned, we can mark them\n+// as dso_local.\n+// CHECK: define dso_local i8 @call_foreign_fn()\n+#[no_mangle]\n+pub fn call_foreign_fn() -> u8 {\n+    unsafe {\n+        foreign_fn()\n+    }\n+}\n+\n+// External functions are still marked as non-dso_local, since we don't know if the symbol\n+// is defined in the binary or in the shared library.\n+// CHECK: declare zeroext i8 @foreign_fn()\n+extern \"C\" {fn foreign_fn() -> u8;}\n+\n+// CHECK: !{i32 7, !\"PIC Level\", i32 2}\n+// CHECK: !{i32 7, !\"PIE Level\", i32 2}"}, {"sha": "99d8e9dea910d2976c2b3707974b9ad5ec72fc50", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<const 3> for Bar {\n+//~^ERROR expected lifetime, type, or constant, found keyword `const`\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ddddd86ab9c06b3f79997f791dabd0f6572652a6", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,14 @@\n+error: expected lifetime, type, or constant, found keyword `const`\n+  --> $DIR/issue-89013-no-assoc.rs:9:10\n+   |\n+LL | impl Foo<const 3> for Bar {\n+   |          ^^^^^\n+   |\n+help: the `const` keyword is only needed in the definition of the type\n+   |\n+LL - impl Foo<const 3> for Bar {\n+LL + impl Foo<3> for Bar {\n+   | \n+\n+error: aborting due to previous error\n+"}, {"sha": "19e0f38d320c4e915bdd9c1c76e10881fb866aeb", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,17 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = 3> for Bar {\n+//~^ ERROR cannot constrain an associated constant to a value\n+//~| ERROR associated type bindings are not allowed here\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bbca92ad63a91ab7a0d0ae15859c8211ff534053", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,18 @@\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          -^^^-\n+   |          |   |\n+   |          |   ...cannot be constrained to this value\n+   |          this associated constant...\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          ^^^^^ associated type not allowed here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "0ec6762b6e282596a17524ccc5a877def103e2a3", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = type 3> for Bar {\n+//~^ERROR missing type to the right of `=`\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f0d0d90c774f8a5981dddb63ff0ef20059b52059", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,8 @@\n+error: missing type to the right of `=`\n+  --> $DIR/issue-89013-type.rs:9:13\n+   |\n+LL | impl Foo<N = type 3> for Bar {\n+   |             ^---- expected type, found keyword `type`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ca1158a2f6d16140cccb9e3578ffa4862be26a90", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,18 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = const 3> for Bar {\n+//~^ ERROR expected lifetime, type, or constant, found keyword `const`\n+//~| ERROR cannot constrain an associated constant to a value\n+//~| ERROR associated type bindings are not allowed here\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "85379d3f06e4b46722a0a2d5ed9aac717fb74580", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,30 @@\n+error: expected lifetime, type, or constant, found keyword `const`\n+  --> $DIR/issue-89013.rs:9:14\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |              ^^^^^\n+   |\n+help: the `const` keyword is only needed in the definition of the type\n+   |\n+LL - impl Foo<N = const 3> for Bar {\n+LL + impl Foo<N = 3> for Bar {\n+   | \n+\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          -^^^^^^^^^-\n+   |          |         |\n+   |          |         ...cannot be constrained to this value\n+   |          this associated constant...\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          ^^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "96277d4d0d9d7861d7fd4885773d1ea8da27db0e", "filename": "src/test/ui/fmt/issue-89173.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #89173: Make sure a helpful note is issued for\n+// printf-style format strings using `*` to specify the width.\n+\n+fn main() {\n+    let num = 0x0abcde;\n+    let width = 6;\n+    print!(\"%0*x\", width, num);\n+    //~^ ERROR: multiple unused formatting arguments\n+    //~| NOTE: multiple missing formatting specifiers\n+    //~| NOTE: argument never used\n+    //~| NOTE: argument never used\n+    //~| NOTE: format specifiers use curly braces, and you have to use a positional or named parameter for the width\n+    //~| NOTE: printf formatting not supported\n+}"}, {"sha": "7b21e0a4fc8965f22278dddfb0ed80eee150c412", "filename": "src/test/ui/fmt/issue-89173.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fissue-89173.stderr?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -0,0 +1,18 @@\n+error: multiple unused formatting arguments\n+  --> $DIR/issue-89173.rs:7:20\n+   |\n+LL |     print!(\"%0*x\", width, num);\n+   |            ------  ^^^^^  ^^^ argument never used\n+   |            |       |\n+   |            |       argument never used\n+   |            multiple missing formatting specifiers\n+   |\n+note: format specifiers use curly braces, and you have to use a positional or named parameter for the width\n+  --> $DIR/issue-89173.rs:7:13\n+   |\n+LL |     print!(\"%0*x\", width, num);\n+   |             ^^^^\n+   = note: printf formatting not supported; see the documentation for `std::fmt`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c1719a9ffe80c7530698b4ef7b70b78b07d3e8f1", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2", "patch": "@@ -167,6 +167,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"rand_hc\",\n     \"rand_pcg\",\n     \"rand_xorshift\",\n+    \"rand_xoshiro\",\n     \"redox_syscall\",\n     \"regex\",\n     \"regex-automata\","}]}