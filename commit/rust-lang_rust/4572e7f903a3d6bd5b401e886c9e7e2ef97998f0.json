{"sha": "4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzJlN2Y5MDNhM2Q2YmQ1YjQwMWU4ODZjOWU3ZTJlZjk3OTk4ZjA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-27T01:14:47Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-27T02:50:07Z"}, "message": "Lint on unknown intra-doc link disambiguators", "tree": {"sha": "8b6c6e2768a4631c59b4a15cfd39a258262844c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6c6e2768a4631c59b4a15cfd39a258262844c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "html_url": "https://github.com/rust-lang/rust/commit/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e65467eff3d1da4712586d8402d1d2e1d6654bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e65467eff3d1da4712586d8402d1d2e1d6654bc", "html_url": "https://github.com/rust-lang/rust/commit/5e65467eff3d1da4712586d8402d1d2e1d6654bc"}], "stats": {"total": 95, "additions": 84, "deletions": 11}, "files": [{"sha": "f5c5c9ca4aa9cb06b88ac5afaef38f65ee4d2f18", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "patch": "@@ -973,10 +973,13 @@ impl LinkCollector<'_, '_> {\n         };\n \n         // Parse and strip the disambiguator from the link, if present.\n-        let (mut path_str, disambiguator) = if let Ok((d, path)) = Disambiguator::from_str(&link) {\n-            (path.trim(), Some(d))\n-        } else {\n-            (link.trim(), None)\n+        let (mut path_str, disambiguator) = match Disambiguator::from_str(&link) {\n+            Ok(Some((d, path))) => (path.trim(), Some(d)),\n+            Ok(None) => (link.trim(), None),\n+            Err(err_msg) => {\n+                disambiguator_error(self.cx, &item, dox, ori_link.range, &err_msg);\n+                return None;\n+            }\n         };\n \n         if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch))) {\n@@ -1514,8 +1517,12 @@ impl Disambiguator {\n         }\n     }\n \n-    /// Given a link, parse and return `(disambiguator, path_str)`\n-    fn from_str(link: &str) -> Result<(Self, &str), ()> {\n+    /// Given a link, parse and return `(disambiguator, path_str)`.\n+    ///\n+    /// This returns `Ok(Some(...))` if a disambiguator was found,\n+    /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n+    /// if there was a problem with the disambiguator.\n+    fn from_str(link: &str) -> Result<Option<(Self, &str)>, String> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         let find_suffix = || {\n@@ -1528,11 +1535,11 @@ impl Disambiguator {\n                 if let Some(link) = link.strip_suffix(suffix) {\n                     // Avoid turning `!` or `()` into an empty string\n                     if !link.is_empty() {\n-                        return Ok((Kind(kind), link));\n+                        return Some((Kind(kind), link));\n                     }\n                 }\n             }\n-            Err(())\n+            None\n         };\n \n         if let Some(idx) = link.find('@') {\n@@ -1551,11 +1558,11 @@ impl Disambiguator {\n                 \"value\" => NS(Namespace::ValueNS),\n                 \"macro\" => NS(Namespace::MacroNS),\n                 \"prim\" | \"primitive\" => Primitive,\n-                _ => return find_suffix(),\n+                _ => return Err(format!(\"unknown disambiguator `{}`\", prefix)),\n             };\n-            Ok((d, &rest[1..]))\n+            Ok(Some((d, &rest[1..])))\n         } else {\n-            find_suffix()\n+            Ok(find_suffix())\n         }\n     }\n \n@@ -1979,6 +1986,22 @@ fn anchor_failure(\n     });\n }\n \n+/// Report an error in the link disambiguator.\n+fn disambiguator_error(\n+    cx: &DocContext<'_>,\n+    item: &Item,\n+    dox: &str,\n+    link_range: Range<usize>,\n+    msg: &str,\n+) {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &link_range, |diag, _sp| {\n+        diag.note(\n+            \"the disambiguator is the part of the link before the `@` sign, \\\n+             or a suffix such as `()` for functions\",\n+        );\n+    });\n+}\n+\n /// Report an ambiguity error, where there were multiple possible resolutions.\n fn ambiguity_error(\n     cx: &DocContext<'_>,"}, {"sha": "9222025367dd5bd624ab88ffc4f8584d64141b00", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.rs?ref=4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "patch": "@@ -0,0 +1,10 @@\n+//! Linking to [foo@banana] and [`bar@banana!()`].\n+//~^ ERROR unknown disambiguator `foo`\n+//~| ERROR unknown disambiguator `bar`\n+//! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+//~^ ERROR unknown disambiguator ``\n+//~| ERROR unknown disambiguator ``\n+\n+#![deny(warnings)]\n+\n+fn main() {}"}, {"sha": "9e7699eea9a288935cc8e69fb1b633331054da5c", "filename": "src/test/rustdoc-ui/intra-doc/unknown-disambiguator.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4572e7f903a3d6bd5b401e886c9e7e2ef97998f0/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funknown-disambiguator.stderr?ref=4572e7f903a3d6bd5b401e886c9e7e2ef97998f0", "patch": "@@ -0,0 +1,40 @@\n+error: unknown disambiguator `foo`\n+  --> $DIR/unknown-disambiguator.rs:1:17\n+   |\n+LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unknown-disambiguator.rs:8:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+\n+error: unknown disambiguator `bar`\n+  --> $DIR/unknown-disambiguator.rs:1:34\n+   |\n+LL | //! Linking to [foo@banana] and [`bar@banana!()`].\n+   |                                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+\n+error: unknown disambiguator ``\n+  --> $DIR/unknown-disambiguator.rs:4:31\n+   |\n+LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+   |                               ^^^^^^^^^^\n+   |\n+   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+\n+error: unknown disambiguator ``\n+  --> $DIR/unknown-disambiguator.rs:4:57\n+   |\n+LL | //! And to [no disambiguator](@nectarine) and [another](@apricot!()).\n+   |                                                         ^^^^^^^^^^^\n+   |\n+   = note: the disambiguator is the part of the link before the `@` sign, or a suffix such as `()` for functions\n+\n+error: aborting due to 4 previous errors\n+"}]}