{"sha": "201afa6455969c1c38e8b46d30cb9be9392207bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMWFmYTY0NTU5NjljMWMzOGU4YjQ2ZDMwY2I5YmU5MzkyMjA3YmM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-16T02:47:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-16T02:47:04Z"}, "message": "Minor comment tweaks.", "tree": {"sha": "4a93305859f479b6e677eaa6d06283acf59f052d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a93305859f479b6e677eaa6d06283acf59f052d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201afa6455969c1c38e8b46d30cb9be9392207bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201afa6455969c1c38e8b46d30cb9be9392207bc", "html_url": "https://github.com/rust-lang/rust/commit/201afa6455969c1c38e8b46d30cb9be9392207bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201afa6455969c1c38e8b46d30cb9be9392207bc/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22bb2e72267890782897c208bbc9114d023dfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22bb2e72267890782897c208bbc9114d023dfc7", "html_url": "https://github.com/rust-lang/rust/commit/f22bb2e72267890782897c208bbc9114d023dfc7"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "cb28a7285a75c42a9ea241078e903b1efbd11653", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/201afa6455969c1c38e8b46d30cb9be9392207bc/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201afa6455969c1c38e8b46d30cb9be9392207bc/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=201afa6455969c1c38e8b46d30cb9be9392207bc", "patch": "@@ -285,7 +285,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         let _ = self.register_obligation_at(obligation, None);\n     }\n \n-    // returns Err(()) if we already know this obligation failed.\n+    // Returns Err(()) if we already know this obligation failed.\n     fn register_obligation_at(&mut self, obligation: O, parent: Option<NodeIndex>)\n                               -> Result<(), ()>\n     {\n@@ -425,7 +425,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                             Some(NodeIndex::new(i))\n                         );\n                         if let Err(()) = st {\n-                            // error already reported - propagate it\n+                            // Error already reported - propagate it\n                             // to our node.\n                             self.error_at(i);\n                         }\n@@ -454,8 +454,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         self.mark_as_waiting();\n         self.process_cycles(processor);\n-\n-        // Now we have to compress the result\n         let completed = self.compress(do_completed);\n \n         debug!(\"process_obligations: complete\");\n@@ -516,11 +514,11 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 node.state.set(NodeState::Done);\n             },\n             NodeState::Waiting | NodeState::Pending => {\n-                // this node is still reachable from some pending node. We\n+                // This node is still reachable from some pending node. We\n                 // will get to it when they are all processed.\n             }\n             NodeState::Done | NodeState::Error => {\n-                // already processed that node\n+                // Already processed that node.\n             }\n         };\n     }\n@@ -664,8 +662,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             return if do_completed == DoCompleted::Yes { Some(vec![]) } else { None };\n         }\n \n-        // Pop off all the nodes we killed and extract the success\n-        // stories.\n+        // Pop off all the nodes we killed and extract the success stories.\n         let successful = if do_completed == DoCompleted::Yes {\n             Some((0..dead_nodes)\n                 .map(|_| self.nodes.pop().unwrap())\n@@ -696,7 +693,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n             if let Some(index) = node.parent {\n                 let new_i = node_rewrites[index.index()];\n                 if new_i >= nodes_len {\n-                    // parent dead due to error\n                     node.parent = None;\n                 } else {\n                     node.parent = Some(NodeIndex::new(new_i));\n@@ -745,7 +741,7 @@ impl<O> Node<O> {\n     }\n }\n \n-// I need a Clone closure\n+// I need a Clone closure.\n #[derive(Clone)]\n struct GetObligation<'a, O>(&'a [Node<O>]);\n "}]}