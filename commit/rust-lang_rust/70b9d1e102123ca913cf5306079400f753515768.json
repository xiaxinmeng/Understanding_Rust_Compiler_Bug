{"sha": "70b9d1e102123ca913cf5306079400f753515768", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYjlkMWUxMDIxMjNjYTkxM2NmNTMwNjA3OTQwMGY3NTM1MTU3Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-18T12:07:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-18T12:07:56Z"}, "message": "Auto merge of #85313 - jackh726:region_eq, r=nikomatsakis\n\nUnify Regions with RegionVids in UnificationTable\n\nA few test output changes; might be able to revert those but figured I would open this for perf and comments.\n\nr? `@nikomatsakis`", "tree": {"sha": "e449034c8f7d822d6af42406d54911cc7ea675f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e449034c8f7d822d6af42406d54911cc7ea675f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70b9d1e102123ca913cf5306079400f753515768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70b9d1e102123ca913cf5306079400f753515768", "html_url": "https://github.com/rust-lang/rust/commit/70b9d1e102123ca913cf5306079400f753515768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70b9d1e102123ca913cf5306079400f753515768/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a277f03df7e44643ddfcc240d034409cb2f505", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a277f03df7e44643ddfcc240d034409cb2f505", "html_url": "https://github.com/rust-lang/rust/commit/25a277f03df7e44643ddfcc240d034409cb2f505"}, {"sha": "c6e4284f8b786a700ca1a377c708a032240d34c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e4284f8b786a700ca1a377c708a032240d34c8", "html_url": "https://github.com/rust-lang/rust/commit/c6e4284f8b786a700ca1a377c708a032240d34c8"}], "stats": {"total": 124, "additions": 83, "deletions": 41}, "files": [{"sha": "4935913016262bbabe29e320bba3c5072e77747b", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/70b9d1e102123ca913cf5306079400f753515768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b9d1e102123ca913cf5306079400f753515768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=70b9d1e102123ca913cf5306079400f753515768", "patch": "@@ -3,7 +3,6 @@\n use self::CombineMapType::*;\n use self::UndoLog::*;\n \n-use super::unify_key;\n use super::{\n     InferCtxtUndoLogs, MiscVariable, RegionVariableOrigin, Rollback, Snapshot, SubregionOrigin,\n };\n@@ -12,9 +11,9 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_data_structures::unify::UnifyKey;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n use rustc_middle::ty::ReStatic;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReLateBound, ReVar};\n@@ -54,7 +53,7 @@ pub struct RegionConstraintStorage<'tcx> {\n     /// code is iterating to a fixed point, because otherwise we sometimes\n     /// would wind up with a fresh stream of region variables that have been\n     /// equated but appear distinct.\n-    pub(super) unification_table: ut::UnificationTableStorage<ty::RegionVid>,\n+    pub(super) unification_table: ut::UnificationTableStorage<RegionVidKey<'tcx>>,\n \n     /// a flag set to true when we perform any unifications; this is used\n     /// to micro-optimize `take_and_reset_data`\n@@ -407,8 +406,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         // `RegionConstraintData` contains the relationship here.\n         if *any_unifications {\n             *any_unifications = false;\n-            self.unification_table()\n-                .reset_unifications(|vid| unify_key::RegionVidKey { min_vid: vid });\n+            self.unification_table().reset_unifications(|_| UnifiedRegion(None));\n         }\n \n         data\n@@ -435,8 +433,8 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table().new_key(unify_key::RegionVidKey { min_vid: vid });\n-        assert_eq!(vid, u_vid);\n+        let u_vid = self.unification_table().new_key(UnifiedRegion(None));\n+        assert_eq!(vid, u_vid.vid);\n         self.undo_log.push(AddVar(vid));\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n         vid\n@@ -498,10 +496,18 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             self.make_subregion(origin.clone(), sub, sup);\n             self.make_subregion(origin, sup, sub);\n \n-            if let (ty::ReVar(sub), ty::ReVar(sup)) = (*sub, *sup) {\n-                debug!(\"make_eqregion: uniying {:?} with {:?}\", sub, sup);\n-                self.unification_table().union(sub, sup);\n-                self.any_unifications = true;\n+            match (sub, sup) {\n+                (&ty::ReVar(sub), &ty::ReVar(sup)) => {\n+                    debug!(\"make_eqregion: unifying {:?} with {:?}\", sub, sup);\n+                    self.unification_table().union(sub, sup);\n+                    self.any_unifications = true;\n+                }\n+                (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {\n+                    debug!(\"make_eqregion: unifying {:?} with {:?}\", vid, value);\n+                    self.unification_table().union_value(vid, UnifiedRegion(Some(value)));\n+                    self.any_unifications = true;\n+                }\n+                (_, _) => {}\n             }\n         }\n     }\n@@ -617,8 +623,29 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn opportunistic_resolve_var(&mut self, rid: RegionVid) -> ty::RegionVid {\n-        self.unification_table().probe_value(rid).min_vid\n+    /// Resolves the passed RegionVid to the root RegionVid in the unification table\n+    pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {\n+        self.unification_table().find(rid).vid\n+    }\n+\n+    /// If the Region is a `ReVar`, then resolves it either to the root value in\n+    /// the unification table, if it exists, or to the root `ReVar` in the table.\n+    /// If the Region is not a `ReVar`, just returns the Region itself.\n+    pub fn opportunistic_resolve_region(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        region: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        match region {\n+            ty::ReVar(rid) => {\n+                let unified_region = self.unification_table().probe_value(*rid);\n+                unified_region.0.unwrap_or_else(|| {\n+                    let root = self.unification_table().find(*rid).vid;\n+                    tcx.reuse_or_mk_region(region, ty::ReVar(root))\n+                })\n+            }\n+            _ => region,\n+        }\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {\n@@ -673,8 +700,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         &self,\n         value_count: usize,\n     ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {\n-        let range = RegionVid::from_index(value_count as u32)\n-            ..RegionVid::from_index(self.unification_table.len() as u32);\n+        let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());\n         (\n             range.clone(),\n             (range.start.index()..range.end.index())\n@@ -696,7 +722,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     #[inline]\n-    fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, ty::RegionVid> {\n+    fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {\n         ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)\n     }\n }"}, {"sha": "5ad2519a93c5f04a256a414c17e8ca9cba99c1d0", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70b9d1e102123ca913cf5306079400f753515768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b9d1e102123ca913cf5306079400f753515768/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=70b9d1e102123ca913cf5306079400f753515768", "patch": "@@ -3,6 +3,7 @@ use std::marker::PhantomData;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n use rustc_data_structures::unify as ut;\n+use rustc_middle::infer::unify_key::RegionVidKey;\n use rustc_middle::ty;\n \n use crate::{\n@@ -22,7 +23,7 @@ pub(crate) enum UndoLog<'tcx> {\n     IntUnificationTable(sv::UndoLog<ut::Delegate<ty::IntVid>>),\n     FloatUnificationTable(sv::UndoLog<ut::Delegate<ty::FloatVid>>),\n     RegionConstraintCollector(region_constraints::UndoLog<'tcx>),\n-    RegionUnificationTable(sv::UndoLog<ut::Delegate<ty::RegionVid>>),\n+    RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),\n     ProjectionCache(traits::UndoLog<'tcx>),\n     PushRegionObligation,\n }\n@@ -55,7 +56,7 @@ impl_from! {\n \n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n \n-    RegionUnificationTable(sv::UndoLog<ut::Delegate<ty::RegionVid>>),\n+    RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),\n     ProjectionCache(traits::UndoLog<'tcx>),\n }\n "}, {"sha": "0b05dd5c0ba6f139c4eef5c0557628c8fa253228", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/70b9d1e102123ca913cf5306079400f753515768/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b9d1e102123ca913cf5306079400f753515768/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=70b9d1e102123ca913cf5306079400f753515768", "patch": "@@ -16,37 +16,48 @@ pub trait ToType {\n }\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n-pub struct RegionVidKey {\n-    /// The minimum region vid in the unification set. This is needed\n-    /// to have a canonical name for a type to prevent infinite\n-    /// recursion.\n-    pub min_vid: ty::RegionVid,\n-}\n-\n-impl UnifyValue for RegionVidKey {\n-    type Error = NoError;\n+pub struct UnifiedRegion<'tcx>(pub Option<ty::Region<'tcx>>);\n \n-    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n-        let min_vid = if value1.min_vid.index() < value2.min_vid.index() {\n-            value1.min_vid\n-        } else {\n-            value2.min_vid\n-        };\n+#[derive(PartialEq, Copy, Clone, Debug)]\n+pub struct RegionVidKey<'tcx> {\n+    pub vid: ty::RegionVid,\n+    pub phantom: PhantomData<UnifiedRegion<'tcx>>,\n+}\n \n-        Ok(RegionVidKey { min_vid })\n+impl<'tcx> From<ty::RegionVid> for RegionVidKey<'tcx> {\n+    fn from(vid: ty::RegionVid) -> Self {\n+        RegionVidKey { vid, phantom: PhantomData }\n     }\n }\n \n-impl UnifyKey for ty::RegionVid {\n-    type Value = RegionVidKey;\n+impl<'tcx> UnifyKey for RegionVidKey<'tcx> {\n+    type Value = UnifiedRegion<'tcx>;\n     fn index(&self) -> u32 {\n-        u32::from(*self)\n+        self.vid.as_u32()\n     }\n-    fn from_index(i: u32) -> ty::RegionVid {\n-        ty::RegionVid::from(i)\n+    fn from_index(i: u32) -> Self {\n+        RegionVidKey::from(ty::RegionVid::from_u32(i))\n     }\n     fn tag() -> &'static str {\n-        \"RegionVid\"\n+        \"RegionVidKey\"\n+    }\n+}\n+\n+impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n+    type Error = NoError;\n+\n+    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n+        Ok(match (value1.0, value2.0) {\n+            // Here we can just pick one value, because the full constraints graph\n+            // will be handled later. Ideally, we might want a `MultipleValues`\n+            // variant or something. For now though, this is fine.\n+            (Some(_), Some(_)) => *value1,\n+\n+            (Some(_), _) => *value1,\n+            (_, Some(_)) => *value2,\n+\n+            (None, None) => *value1,\n+        })\n     }\n }\n "}, {"sha": "b75da1b512dc24cdaf226a6a7c8a278a6dc08159", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70b9d1e102123ca913cf5306079400f753515768/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b9d1e102123ca913cf5306079400f753515768/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=70b9d1e102123ca913cf5306079400f753515768", "patch": "@@ -26,4 +26,6 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n+    //~| 2 redundant requirements hidden\n+    //~| required because of\n }"}, {"sha": "cc91393039536b819ce5ac41b402338f5b01c5e6", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70b9d1e102123ca913cf5306079400f753515768/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b9d1e102123ca913cf5306079400f753515768/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=70b9d1e102123ca913cf5306079400f753515768", "patch": "@@ -7,11 +7,13 @@ LL | fn is_send<S: NotAuto>() {}\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+note: required because of the requirements on the impl of `NotAuto` for `X<C<'_>>`\n   --> $DIR/lifetime.rs:19:12\n    |\n LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n    |            ^^^^^^^     ^^^^\n+   = note: 2 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n \n error: aborting due to previous error\n "}]}