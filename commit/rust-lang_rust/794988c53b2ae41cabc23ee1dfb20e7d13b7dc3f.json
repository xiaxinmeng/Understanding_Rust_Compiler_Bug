{"sha": "794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "node_id": "C_kwDOAAsO6NoAKDc5NDk4OGM1M2IyYWU0MWNhYmMyM2VlMWRmYjIwZTdkMTNiN2RjM2Y", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-12-17T11:28:42Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-12-17T13:51:21Z"}, "message": "feat: filter already present enum variants in match arms", "tree": {"sha": "7544f0d5552c5b39428000a5b26a31d4dacf610b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7544f0d5552c5b39428000a5b26a31d4dacf610b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "html_url": "https://github.com/rust-lang/rust/commit/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fd1ce3139ca6517f2c46ad12866147aca6b178", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fd1ce3139ca6517f2c46ad12866147aca6b178", "html_url": "https://github.com/rust-lang/rust/commit/68fd1ce3139ca6517f2c46ad12866147aca6b178"}], "stats": {"total": 130, "additions": 114, "deletions": 16}, "files": [{"sha": "fddd02fc13e23f7db9f6d7f2b051ee3fcf188655", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -23,7 +23,7 @@ pub(crate) mod env_vars;\n \n use std::iter;\n \n-use hir::{known, ScopeDef};\n+use hir::{known, ScopeDef, Variant};\n use ide_db::{imports::import_assets::LocatedImport, SymbolKind};\n use syntax::ast;\n \n@@ -538,18 +538,25 @@ fn enum_variants_with_paths(\n     enum_: hir::Enum,\n     impl_: &Option<ast::Impl>,\n     cb: impl Fn(&mut Completions, &CompletionContext<'_>, hir::Variant, hir::ModPath),\n+    missing_variants: Option<Vec<Variant>>,\n ) {\n-    let variants = enum_.variants(ctx.db);\n+    let mut process_variant = |variant: Variant| {\n+        let self_path = hir::ModPath::from_segments(\n+            hir::PathKind::Plain,\n+            iter::once(known::SELF_TYPE).chain(iter::once(variant.name(ctx.db))),\n+        );\n+\n+        cb(acc, ctx, variant, self_path);\n+    };\n+\n+    let variants = match missing_variants {\n+        Some(missing_variants) => missing_variants,\n+        None => enum_.variants(ctx.db),\n+    };\n \n     if let Some(impl_) = impl_.as_ref().and_then(|impl_| ctx.sema.to_def(impl_)) {\n         if impl_.self_ty(ctx.db).as_adt() == Some(hir::Adt::Enum(enum_)) {\n-            for &variant in &variants {\n-                let self_path = hir::ModPath::from_segments(\n-                    hir::PathKind::Plain,\n-                    iter::once(known::SELF_TYPE).chain(iter::once(variant.name(ctx.db))),\n-                );\n-                cb(acc, ctx, variant, self_path);\n-            }\n+            variants.iter().for_each(|variant| process_variant(*variant));\n         }\n     }\n "}, {"sha": "8946011280a9ee0491b3745c91269c4a0ef8d16d", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -208,6 +208,7 @@ pub(crate) fn complete_expr_path(\n                             |acc, ctx, variant, path| {\n                                 acc.add_qualified_enum_variant(ctx, path_ctx, variant, path)\n                             },\n+                            None,\n                         );\n                     }\n                 }"}, {"sha": "0979f6a6dfc7d492e8b5bc619a719d572b9faf8f", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -5,10 +5,7 @@ use ide_db::imports::{\n     insert_use::ImportScope,\n };\n use itertools::Itertools;\n-use syntax::{\n-    ast::{self},\n-    AstNode, SyntaxNode, T,\n-};\n+use syntax::{ast, AstNode, SyntaxNode, T};\n \n use crate::{\n     context::{"}, {"sha": "6ad6a06f11aea1749a016a1542a4324738bca1f4", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -58,6 +58,7 @@ pub(crate) fn complete_pattern(\n                 |acc, ctx, variant, path| {\n                     acc.add_qualified_variant_pat(ctx, pattern_ctx, variant, path);\n                 },\n+                Some(pattern_ctx.missing_variants.clone()),\n             );\n         }\n     }"}, {"sha": "954e88e093e125d65897353525bb206f25e191ba", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -220,6 +220,8 @@ pub(super) struct PatternContext {\n     /// The record pattern this name or ref is a field of\n     pub(super) record_pat: Option<ast::RecordPat>,\n     pub(super) impl_: Option<ast::Impl>,\n+    /// List of missing variants in a match expr\n+    pub(super) missing_variants: Vec<hir::Variant>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "73375250b5fef604ee0956f36176aea1dcdde0a4", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -1,7 +1,7 @@\n //! Module responsible for analyzing the code surrounding the cursor for completion.\n use std::iter;\n \n-use hir::{Semantics, Type, TypeInfo};\n+use hir::{Semantics, Type, TypeInfo, Variant};\n use ide_db::{active_parameter::ActiveParameter, RootDatabase};\n use syntax::{\n     algo::{find_node_at_offset, non_trivia_sibling},\n@@ -1111,6 +1111,9 @@ fn pattern_context_for(\n     pat: ast::Pat,\n ) -> PatternContext {\n     let mut param_ctx = None;\n+\n+    let mut missing_variants = vec![];\n+\n     let (refutability, has_type_ascription) =\n     pat\n         .syntax()\n@@ -1140,7 +1143,52 @@ fn pattern_context_for(\n                         })();\n                         return (PatternRefutability::Irrefutable, has_type_ascription)\n                     },\n-                    ast::MatchArm(_) => PatternRefutability::Refutable,\n+                    ast::MatchArm(match_arm) => {\n+                       let missing_variants_opt = match_arm\n+                            .syntax()\n+                            .parent()\n+                            .and_then(ast::MatchArmList::cast)\n+                            .and_then(|match_arm_list| {\n+                                match_arm_list\n+                                .syntax()\n+                                .parent()\n+                                .and_then(ast::MatchExpr::cast)\n+                                .and_then(|match_expr| {\n+                                    let expr_opt = find_opt_node_in_file(&original_file, match_expr.expr());\n+\n+                                    expr_opt.and_then(|expr| {\n+                                        sema.type_of_expr(&expr)?\n+                                        .adjusted()\n+                                        .autoderef(sema.db)\n+                                        .find_map(|ty| match ty.as_adt() {\n+                                            Some(hir::Adt::Enum(e)) => Some(e),\n+                                            _ => None,\n+                                        }).and_then(|enum_| {\n+                                            Some(enum_.variants(sema.db))\n+                                        })\n+                                    })\n+                                }).and_then(|variants| {\n+                                   Some(variants.iter().filter_map(|variant| {\n+                                        let variant_name = variant.name(sema.db).to_string();\n+\n+                                        let variant_already_present = match_arm_list.arms().any(|arm| {\n+                                            arm.pat().and_then(|pat| {\n+                                                let pat_already_present = pat.syntax().to_string().contains(&variant_name);\n+                                                pat_already_present.then(|| pat_already_present)\n+                                            }).is_some()\n+                                        });\n+\n+                                        (!variant_already_present).then_some(variant.clone())\n+                                    }).collect::<Vec<Variant>>())\n+                                })\n+                        });\n+\n+                        if let Some(missing_variants_) = missing_variants_opt {\n+                            missing_variants = missing_variants_;\n+                        };\n+\n+                        PatternRefutability::Refutable\n+                    },\n                     ast::LetExpr(_) => PatternRefutability::Refutable,\n                     ast::ForExpr(_) => PatternRefutability::Irrefutable,\n                     _ => PatternRefutability::Irrefutable,\n@@ -1162,6 +1210,7 @@ fn pattern_context_for(\n         ref_token,\n         record_pat: None,\n         impl_: fetch_immediate_impl(sema, original_file, pat.syntax()),\n+        missing_variants,\n     }\n }\n "}, {"sha": "9cf766ce66c55f08f61c79531f5780cadc398c32", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn render_struct_pat(\n     let lookup = format_literal_lookup(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n-    Some(build_completion(ctx, label, lookup, pat, strukt, false))\n+    Some(build_completion(ctx, label, lookup, pat, strukt, true))\n }\n \n pub(crate) fn render_variant_pat("}, {"sha": "8b8c56d1d5a71d43901c30263610aa2b2fbcd288", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "patch": "@@ -46,6 +46,47 @@ fn foo(s: Struct) {\n     );\n }\n \n+#[test]\n+fn record_pattern_field_enum() {\n+    check(\n+        r#\"\n+enum Baz { FOO, BAR }\n+\n+fn foo(baz: Baz) {\n+    match baz {\n+        Baz::FOO => (),\n+        $0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            en Baz\n+            bn Baz::BAR Baz::BAR$0\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+enum Baz { FOO, BAR }\n+\n+fn foo(baz: Baz) {\n+    match baz {\n+        FOO => (),\n+        $0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            en Baz\n+            bn Baz::BAR Baz::BAR$0\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn pattern_enum_variant() {\n     check("}]}