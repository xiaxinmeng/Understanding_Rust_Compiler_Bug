{"sha": "28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZDUxZTNmZDJjY2NkYjlmZWZhYjcxYjQ3NmZkODY4YTIzNjNhYzk=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-11T22:10:11Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-11T22:12:25Z"}, "message": "Add support for indexing tags in blocks.", "tree": {"sha": "55cffdf76ee450919e60c24ec74ae12ee0b13dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55cffdf76ee450919e60c24ec74ae12ee0b13dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "html_url": "https://github.com/rust-lang/rust/commit/28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/comments", "author": null, "committer": null, "parents": [{"sha": "5c21f039903311a9403b7fe7cfa0d2e455a7c4f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c21f039903311a9403b7fe7cfa0d2e455a7c4f0", "html_url": "https://github.com/rust-lang/rust/commit/5c21f039903311a9403b7fe7cfa0d2e455a7c4f0"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "c17eddeee78a3c13d326f76e3d14278fb874b6fa", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "patch": "@@ -66,9 +66,15 @@ type meta_item = spanned[meta_item_];\n type meta_item_ = rec(ident name, str value);\n \n type block = spanned[block_];\n+type block_index = hashmap[ident, block_index_entry];\n+tag block_index_entry {\n+    bie_item(@item);\n+    bie_local(@local);\n+    bie_tag_variant(@item /* tag item */, uint /* variant index */);\n+}\n type block_ = rec(vec[@stmt] stmts,\n                   option.t[@expr] expr,\n-                  hashmap[ident,uint] index);\n+                  hashmap[ident,block_index_entry] index);\n \n type variant_def = tup(def_id /* tag */, def_id /* variant */);\n "}, {"sha": "58cbac00846eb7126d46c416baf50f6ca562f0f4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "patch": "@@ -1478,39 +1478,43 @@ impure fn parse_source_stmt(parser p) -> @ast.stmt {\n }\n \n fn index_block(vec[@ast.stmt] stmts, option.t[@ast.expr] expr) -> ast.block_ {\n-    auto index = new_str_hash[uint]();\n-    auto u = 0u;\n+    auto index = new_str_hash[ast.block_index_entry]();\n     for (@ast.stmt s in stmts) {\n         alt (s.node) {\n             case (ast.stmt_decl(?d)) {\n                 alt (d.node) {\n                     case (ast.decl_local(?loc)) {\n-                        index.insert(loc.ident, u);\n+                        index.insert(loc.ident, ast.bie_local(loc));\n                     }\n                     case (ast.decl_item(?it)) {\n                         alt (it.node) {\n                             case (ast.item_fn(?i, _, _, _, _)) {\n-                                index.insert(i, u);\n+                                index.insert(i, ast.bie_item(it));\n                             }\n                             case (ast.item_mod(?i, _, _)) {\n-                                index.insert(i, u);\n+                                index.insert(i, ast.bie_item(it));\n                             }\n                             case (ast.item_ty(?i, _, _, _, _)) {\n-                                index.insert(i, u);\n+                                index.insert(i, ast.bie_item(it));\n                             }\n-                            case (ast.item_tag(?i, _, _, _)) {\n-                                index.insert(i, u);\n+                            case (ast.item_tag(?i, ?variants, _, _)) {\n+                                index.insert(i, ast.bie_item(it));\n+                                let uint vid = 0u;\n+                                for (ast.variant v in variants) {\n+                                    auto t = ast.bie_tag_variant(it, vid);\n+                                    index.insert(v.name, t);\n+                                    vid += 1u;\n+                                }\n                             }\n                             case (ast.item_obj(?i, _, _, _, _)) {\n-                                index.insert(i, u);\n+                                index.insert(i, ast.bie_item(it));\n                             }\n                         }\n                     }\n                 }\n             }\n             case (_) { /* fall through */ }\n         }\n-        u += 1u;\n     }\n     ret rec(stmts=stmts, expr=expr, index=index);\n }"}, {"sha": "1079489e96b65edff3018d20afb7a3c06d23bd1a", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d51e3fd2cccdb9fefab71b476fd868a2363ac9/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=28d51e3fd2cccdb9fefab71b476fd868a2363ac9", "patch": "@@ -342,6 +342,40 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n         ret none[def_wrap];\n     }\n \n+    fn found_tag(@ast.item item, uint variant_idx) -> def_wrap {\n+        alt (item.node) {\n+            case (ast.item_tag(_, ?variants, _, ?tid)) {\n+                auto vid = variants.(variant_idx).id;\n+                auto t = ast.def_variant(tid, vid);\n+                ret def_wrap_other(t);\n+            }\n+            case (_) {\n+                log \"tag item not actually a tag\";\n+                fail;\n+            }\n+        }\n+    }\n+\n+    fn check_block(ast.ident i, &ast.block_ b) -> option.t[def_wrap] {\n+        alt (b.index.find(i)) {\n+            case (some[ast.block_index_entry](?ix)) {\n+                alt(ix) {\n+                    case (ast.bie_item(?it)) {\n+                        ret some(found_def_item(it));\n+                    }\n+                    case (ast.bie_local(?l)) {\n+                        auto t = ast.def_local(l.id);\n+                        ret some(def_wrap_other(t));\n+                    }\n+                    case (ast.bie_tag_variant(?item, ?variant_idx)) {\n+                        ret some(found_tag(item, variant_idx));\n+                    }\n+                }\n+            }\n+            case (_) { ret none[def_wrap]; }\n+        }\n+    }\n+\n     fn in_scope(ast.ident i, &scope s) -> option.t[def_wrap] {\n         alt (s) {\n \n@@ -368,7 +402,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n                             }\n                         }\n                     }\n-                    case (ast.item_tag(_, _, ?ty_params, _)) {\n+                    case (ast.item_tag(_, ?variants, ?ty_params, ?tag_id)) {\n                         for (ast.ty_param tp in ty_params) {\n                             if (_str.eq(tp.ident, i)) {\n                                 auto t = ast.def_ty_arg(tp.id);\n@@ -414,13 +448,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n             }\n \n             case (scope_block(?b)) {\n-                alt (b.node.index.find(i)) {\n-                    case (some[uint](?ix)) {\n-                        auto x = found_decl_stmt(b.node.stmts.(ix));\n-                        ret some(x);\n-                    }\n-                    case (_) { /* fall through */  }\n-                }\n+                ret check_block(i, b.node);\n             }\n \n             case (scope_arm(?a)) {"}]}