{"sha": "0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMmI5YTU1MDgxODZjMTZhMmU3ODJmNDdjZTdlMGUxYzVmYjhkMzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-16T20:03:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-16T20:03:06Z"}, "message": "Merge #5766\n\n5766: Hacky support for fn-like proc macros r=matklad a=jonas-schievink\n\nIt turns out that this is all that's needed to get something like this working:\r\n\r\n```rust\r\n#[proc_macro]\r\npub fn function_like_macro(_args: TokenStream) -> TokenStream {\r\n    TokenStream::from_str(\"fn fn_success() {}\").unwrap()\r\n}\r\n```\r\n\r\n```rust\r\nfunction_like_macro!();\r\n\r\nfn f() {\r\n    fn_success();\r\n}\r\n```\r\n\r\nThe drawback is that it also makes this work, because there is no distinction between different proc macro kinds in the rest of r-a:\r\n\r\n```rust\r\n#[derive(function_like_macro)]\r\nstruct S {}\r\n\r\nfn f() {\r\n    fn_success();\r\n}\r\n```\r\n\r\nAnother issue is that it seems to panic, and then panic, when using this on the rustc code base, due to some issue in the inscrutable proc macro bridge code.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "67baa61adac64374fc70cf22947212abb83be29f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67baa61adac64374fc70cf22947212abb83be29f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOZD6CRBK7hj4Ov3rIwAAdHIIACqzFkwFQ8s2ldc/YkWjKlAD\nvVO2zUnjnb29Pl5ZPgCbx/7a3jy4ampf5JPuQuFNQpk8HjiNjVkvGJSRuWU5mWY6\n/nHGMktKdJ3v972L7OKlK+PXw7K+3Alan8kTjCrvwz9i5YX5QWR/jeXzqkgvURug\nBKGt/Qk6euTOeTCRQaE7EcoHVf39m1+M8Ra7u6rA7DkMji9U2zi07s0jeohrFkf0\n5bWCBLjD2iaOefpkWDwH2+7HpVKONSU41/jde6EJWn1QiQJk1iWn/wfjiLET8OnV\nUmAJjakUt5ouLZunzis3hLObh+WUTBKnLINetsnghKS+toBB7CL0j6INXbcASYQ=\n=bLye\n-----END PGP SIGNATURE-----\n", "payload": "tree 67baa61adac64374fc70cf22947212abb83be29f\nparent 6deb9087bb95352c345470a3e23a9c9f1549bab0\nparent bee56e68a3e6b8d70bd8320f6372b95959e377df\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597608186 +0000\ncommitter GitHub <noreply@github.com> 1597608186 +0000\n\nMerge #5766\n\n5766: Hacky support for fn-like proc macros r=matklad a=jonas-schievink\n\nIt turns out that this is all that's needed to get something like this working:\r\n\r\n```rust\r\n#[proc_macro]\r\npub fn function_like_macro(_args: TokenStream) -> TokenStream {\r\n    TokenStream::from_str(\"fn fn_success() {}\").unwrap()\r\n}\r\n```\r\n\r\n```rust\r\nfunction_like_macro!();\r\n\r\nfn f() {\r\n    fn_success();\r\n}\r\n```\r\n\r\nThe drawback is that it also makes this work, because there is no distinction between different proc macro kinds in the rest of r-a:\r\n\r\n```rust\r\n#[derive(function_like_macro)]\r\nstruct S {}\r\n\r\nfn f() {\r\n    fn_success();\r\n}\r\n```\r\n\r\nAnother issue is that it seems to panic, and then panic, when using this on the rustc code base, due to some issue in the inscrutable proc macro bridge code.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "html_url": "https://github.com/rust-lang/rust/commit/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6deb9087bb95352c345470a3e23a9c9f1549bab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6deb9087bb95352c345470a3e23a9c9f1549bab0", "html_url": "https://github.com/rust-lang/rust/commit/6deb9087bb95352c345470a3e23a9c9f1549bab0"}, {"sha": "bee56e68a3e6b8d70bd8320f6372b95959e377df", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee56e68a3e6b8d70bd8320f6372b95959e377df", "html_url": "https://github.com/rust-lang/rust/commit/bee56e68a3e6b8d70bd8320f6372b95959e377df"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "d5e87cf7d59cbf5c5453c2d4cf0da381714292aa", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "patch": "@@ -89,9 +89,8 @@ impl ProcMacroClient {\n                 macros\n                     .into_iter()\n                     .filter_map(|(name, kind)| {\n-                        // FIXME: Support custom derive only for now.\n                         match kind {\n-                            ProcMacroKind::CustomDerive => {\n+                            ProcMacroKind::CustomDerive | ProcMacroKind::FuncLike => {\n                                 let name = SmolStr::new(&name);\n                                 let expander: Arc<dyn tt::TokenExpander> =\n                                     Arc::new(ProcMacroProcessExpander {\n@@ -101,7 +100,8 @@ impl ProcMacroClient {\n                                     });\n                                 Some((name, expander))\n                             }\n-                            _ => None,\n+                            // FIXME: Attribute macro are currently unsupported.\n+                            ProcMacroKind::Attr => None,\n                         }\n                     })\n                     .collect()"}]}