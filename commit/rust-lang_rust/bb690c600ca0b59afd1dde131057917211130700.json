{"sha": "bb690c600ca0b59afd1dde131057917211130700", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNjkwYzYwMGNhMGI1OWFmZDFkZGUxMzEwNTc5MTcyMTExMzA3MDA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-09T09:25:04Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-09T09:25:04Z"}, "message": "Rollup merge of #49988 - clarcharr:never_docs, r=steveklabnik\n\nMention Result<!, E> in never docs.\n\nFixes #48096.", "tree": {"sha": "3296e6146bcbcf556dfc9b550a06f11642161cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3296e6146bcbcf556dfc9b550a06f11642161cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb690c600ca0b59afd1dde131057917211130700", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlryvnAACgkQ/vbIBR0O\nATxZ+A/9E/7c137u9Q4RWa9CgOb0OYMUT3AA2y+g6iiGnlipMDYcGhlCdIHOtxfr\n/YV9IQ+jrcuf631gvEn4XpIGkBpmC1if/Z0IQBV/j74vvksHrlHnb5B64g27tpDG\niIA7b/iKxjySQOSH1DgJn/6hSZLRXgMS3kqMHbAy+62gcB9GpB/dnEhMX8J+s7iI\nOVkY+ujQcyU+vg/tkwMW6tFGOULLGSFyht4bz5UOteOpcL9jcJfkr+85raS2z0K6\n8JgzjkodlE1zmWPx5GTCdCoBasVB10zF5L6tDSG39pj0VPpgSceLmibIxQY4Omvg\nPOZOY1Ec+Bn7RiF3UosMTpBxPdgXs0goe7KBlYJzCFUaI9CqIULbyHKHSdQFZ/wz\ngkgC4t7SoQejGvog6qASl6ZONOI11nG/EktALgw7IR8+r1VNbvPRrfu7ib0naap1\nqrHr/JVUgcvdlFWIkZKWw19NBYP1vyTAYFmf2hURYZNPAT+1UfmWtiNGSmBLxWgt\nSEgPP2SX5Ncqo5ZWgckqJJLF+55TKGpKQ3f81fKbc0Ll+IJCjLg6Du8hJzKS02V2\nSamDK9sLCQXxnk5dN/5SvkbvWWg37zlcOJSQXv14bXhvwPYYoddUvLK8y1wi5S7R\npuWMDxTenIS7o3GTIMosj6f9WYl0HPpZ47/BwfFRa8HdMnG96xM=\n=QTSR\n-----END PGP SIGNATURE-----", "payload": "tree 3296e6146bcbcf556dfc9b550a06f11642161cf7\nparent 8e7f6dbdd720ebc48e6ef815ecb15fa5535e24cc\nparent fc6d6c98dedca297c09016615011bee448e5e468\nauthor kennytm <kennytm@gmail.com> 1525857904 +0800\ncommitter kennytm <kennytm@gmail.com> 1525857904 +0800\n\nRollup merge of #49988 - clarcharr:never_docs, r=steveklabnik\n\nMention Result<!, E> in never docs.\n\nFixes #48096.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb690c600ca0b59afd1dde131057917211130700", "html_url": "https://github.com/rust-lang/rust/commit/bb690c600ca0b59afd1dde131057917211130700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb690c600ca0b59afd1dde131057917211130700/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7f6dbdd720ebc48e6ef815ecb15fa5535e24cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7f6dbdd720ebc48e6ef815ecb15fa5535e24cc", "html_url": "https://github.com/rust-lang/rust/commit/8e7f6dbdd720ebc48e6ef815ecb15fa5535e24cc"}, {"sha": "fc6d6c98dedca297c09016615011bee448e5e468", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6d6c98dedca297c09016615011bee448e5e468", "html_url": "https://github.com/rust-lang/rust/commit/fc6d6c98dedca297c09016615011bee448e5e468"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "437d7d74cae0d7b3f1c52dc66398e2b3290f6b62", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bb690c600ca0b59afd1dde131057917211130700/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb690c600ca0b59afd1dde131057917211130700/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=bb690c600ca0b59afd1dde131057917211130700", "patch": "@@ -116,6 +116,8 @@ mod prim_bool { }\n ///\n /// # `!` and generics\n ///\n+/// ## Infallible errors\n+///\n /// The main place you'll see `!` used explicitly is in generic code. Consider the [`FromStr`]\n /// trait:\n ///\n@@ -144,9 +146,60 @@ mod prim_bool { }\n /// [`Ok`] variant. This illustrates another behaviour of `!` - it can be used to \"delete\" certain\n /// enum variants from generic types like `Result`.\n ///\n+/// ## Infinite loops\n+///\n+/// While [`Result<T, !>`] is very useful for removing errors, `!` can also be used to remove\n+/// successes as well. If we think of [`Result<T, !>`] as \"if this function returns, it has not\n+/// errored,\" we get a very intuitive idea of [`Result<!, E>`] as well: if the function returns, it\n+/// *has* errored.\n+///\n+/// For example, consider the case of a simple web server, which can be simplified to:\n+///\n+/// ```ignore (hypothetical-example)\n+/// loop {\n+///     let (client, request) = get_request().expect(\"disconnected\");\n+///     let response = request.process();\n+///     response.send(client);\n+/// }\n+/// ```\n+///\n+/// Currently, this isn't ideal, because we simply panic whenever we fail to get a new connection.\n+/// Instead, we'd like to keep track of this error, like this:\n+///\n+/// ```ignore (hypothetical-example)\n+/// loop {\n+///     match get_request() {\n+///         Err(err) => break err,\n+///         Ok((client, request)) => {\n+///             let response = request.process();\n+///             response.send(client);\n+///         },\n+///     }\n+/// }\n+/// ```\n+///\n+/// Now, when the server disconnects, we exit the loop with an error instead of panicking. While it\n+/// might be intuitive to simply return the error, we might want to wrap it in a [`Result<!, E>`]\n+/// instead:\n+///\n+/// ```ignore (hypothetical-example)\n+/// fn server_loop() -> Result<!, ConnectionError> {\n+///     loop {\n+///         let (client, request) = get_request()?;\n+///         let response = request.process();\n+///         response.send(client);\n+///     }\n+/// }\n+/// ```\n+///\n+/// Now, we can use `?` instead of `match`, and the return type makes a lot more sense: if the loop\n+/// ever stops, it means that an error occurred. We don't even have to wrap the loop in an `Ok`\n+/// because `!` coerces to `Result<!, ConnectionError>` automatically.\n+///\n /// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n /// [`Result<String, !>`]: result/enum.Result.html\n /// [`Result<T, !>`]: result/enum.Result.html\n+/// [`Result<!, E>`]: result/enum.Result.html\n /// [`Ok`]: result/enum.Result.html#variant.Ok\n /// [`String`]: string/struct.String.html\n /// [`Err`]: result/enum.Result.html#variant.Err"}]}