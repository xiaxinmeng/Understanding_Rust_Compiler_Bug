{"sha": "a5acb7b4ba98044a73f26a68810190a3401c75ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YWNiN2I0YmE5ODA0NGE3M2YyNmE2ODgxMDE5MGEzNDAxYzc1ZWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-15T12:19:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T12:19:16Z"}, "message": "Rollup merge of #86947 - m-ou-se:assert-matches-to-submodule, r=yaahc\n\nMove assert_matches to an inner module\n\nFixes #82913", "tree": {"sha": "77b4a99f5f49a2b4682dc68f9517ebd08ce31f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b4a99f5f49a2b4682dc68f9517ebd08ce31f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5acb7b4ba98044a73f26a68810190a3401c75ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8CfECRBK7hj4Ov3rIwAA2lAIAFMzr+9vUeiAMSYrnD9AIBu4\nnJbOb4RNC7iHPztOm6OIhobP592gA58qUER453UCgSG+ZgslW7NX03BS7g+nmXtH\nP6ZDfdHR9PBVQps0kTA2Kq0sB1m+/zoQwF2Fub15L98EWVORu6IY1FEw4hlimmOT\nkYk7/7mChJrcA60n8TtLdzr1Rj4N4/0WqRzcA+TiVIekI21OHOY6XvczEJV0Qckp\n4GUeioAVDuNJUb8CNX6hu/i9/HljtPvyv6XoiYp5o+As2uBd9Nr6ec+AaS7oJ+zu\nwn2BuHi3TEdyRewWZqj7LA11dtrGF989j2SHr2vzVrYvS0C17Nl+W+iAR4Gfl1g=\n=vyaF\n-----END PGP SIGNATURE-----\n", "payload": "tree 77b4a99f5f49a2b4682dc68f9517ebd08ce31f23\nparent 98130137d95ca130dedd2501c2e6478734658683\nparent e3044432c7d1d5ec64a3e96f7856df74d9e43b43\nauthor Yuki Okushi <jtitor@2k36.org> 1626351556 +0900\ncommitter GitHub <noreply@github.com> 1626351556 +0900\n\nRollup merge of #86947 - m-ou-se:assert-matches-to-submodule, r=yaahc\n\nMove assert_matches to an inner module\n\nFixes #82913\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5acb7b4ba98044a73f26a68810190a3401c75ee", "html_url": "https://github.com/rust-lang/rust/commit/a5acb7b4ba98044a73f26a68810190a3401c75ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5acb7b4ba98044a73f26a68810190a3401c75ee/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98130137d95ca130dedd2501c2e6478734658683", "url": "https://api.github.com/repos/rust-lang/rust/commits/98130137d95ca130dedd2501c2e6478734658683", "html_url": "https://github.com/rust-lang/rust/commit/98130137d95ca130dedd2501c2e6478734658683"}, {"sha": "e3044432c7d1d5ec64a3e96f7856df74d9e43b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3044432c7d1d5ec64a3e96f7856df74d9e43b43", "html_url": "https://github.com/rust-lang/rust/commit/e3044432c7d1d5ec64a3e96f7856df74d9e43b43"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "1c66f831b5f4b40b705d0b5b8901c6661a6ba4f3", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -6,6 +6,7 @@ use crate::ich::StableHashingContext;\n use rustc_ast as ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_span::{BytePos, NormalizedPos, SourceFile};\n+use std::assert::assert_matches;\n \n use smallvec::SmallVec;\n "}, {"sha": "194c478cc99d75e3c69eea9a8e91a9b3ccbb39bc", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -6,6 +6,7 @@\n //! integer. It is crucial that these operations call `check_align` *before*\n //! short-circuiting the empty case!\n \n+use std::assert::assert_matches;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::convert::{TryFrom, TryInto};"}, {"sha": "01d33409a423800c730ea7644a6dd1517056d2fc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -179,6 +179,16 @@ use prelude::v1::*;\n #[macro_use]\n mod macros;\n \n+// We don't export this through #[macro_export] for now, to avoid breakage.\n+// See https://github.com/rust-lang/rust/issues/82913\n+#[cfg(not(test))]\n+#[unstable(feature = \"assert_matches\", issue = \"82775\")]\n+/// Unstable module containing the unstable `assert_matches` macro.\n+pub mod assert {\n+    #[unstable(feature = \"assert_matches\", issue = \"82775\")]\n+    pub use crate::macros::{assert_matches, debug_assert_matches};\n+}\n+\n #[macro_use]\n mod internal_macros;\n "}, {"sha": "8ce441e80bfb7eed4edeed29b7578fea7dfa2dee", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -127,6 +127,8 @@ macro_rules! assert_ne {\n /// ```\n /// #![feature(assert_matches)]\n ///\n+/// use std::assert::assert_matches;\n+///\n /// let a = 1u32.checked_add(2);\n /// let b = 1u32.checked_sub(2);\n /// assert_matches!(a, Some(_));\n@@ -135,10 +137,10 @@ macro_rules! assert_ne {\n /// let c = Ok(\"abc\".to_string());\n /// assert_matches!(c, Ok(x) | Err(x) if x.len() < 100);\n /// ```\n-#[macro_export]\n #[unstable(feature = \"assert_matches\", issue = \"82775\")]\n #[allow_internal_unstable(core_panic)]\n-macro_rules! assert_matches {\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro assert_matches {\n     ($left:expr, $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => ({\n         match $left {\n             $( $pattern )|+ $( if $guard )? => {}\n@@ -150,7 +152,7 @@ macro_rules! assert_matches {\n                 );\n             }\n         }\n-    });\n+    }),\n     ($left:expr, $( $pattern:pat_param )|+ $( if $guard: expr )?, $($arg:tt)+) => ({\n         match $left {\n             $( $pattern )|+ $( if $guard )? => {}\n@@ -162,7 +164,7 @@ macro_rules! assert_matches {\n                 );\n             }\n         }\n-    });\n+    }),\n }\n \n /// Asserts that a boolean expression is `true` at runtime.\n@@ -284,6 +286,8 @@ macro_rules! debug_assert_ne {\n /// ```\n /// #![feature(assert_matches)]\n ///\n+/// use std::assert::debug_assert_matches;\n+///\n /// let a = 1u32.checked_add(2);\n /// let b = 1u32.checked_sub(2);\n /// debug_assert_matches!(a, Some(_));\n@@ -295,8 +299,9 @@ macro_rules! debug_assert_ne {\n #[macro_export]\n #[unstable(feature = \"assert_matches\", issue = \"82775\")]\n #[allow_internal_unstable(assert_matches)]\n-macro_rules! debug_assert_matches {\n-    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_matches!($($arg)*); })\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro debug_assert_matches($($arg:tt)*) {\n+    if $crate::cfg!(debug_assertions) { $crate::assert::assert_matches!($($arg)*); }\n }\n \n /// Returns whether the given expression matches any of the given patterns."}, {"sha": "472bca3460f4678d5d404d6b36279b7be5b9250b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -548,8 +548,8 @@ pub use std_detect::{\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::{\n-    assert_eq, assert_matches, assert_ne, debug_assert, debug_assert_eq, debug_assert_matches,\n-    debug_assert_ne, matches, r#try, todo, unimplemented, unreachable, write, writeln,\n+    assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, r#try, todo,\n+    unimplemented, unreachable, write, writeln,\n };\n \n // Re-export built-in macros defined through libcore."}, {"sha": "714a6561a6d0990b0bc2255b6b2b0105deb617f2", "filename": "src/test/ui/macros/assert-matches-macro-msg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-matches-macro-msg.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -6,6 +6,8 @@\n \n #![feature(assert_matches)]\n \n+use std::assert::assert_matches;\n+\n fn main() {\n     assert_matches!(1 + 1, 3, \"1 + 1 definitely should be 3\");\n }"}, {"sha": "a6fa5128d2f862d66136cdc22e98883f9ed56ed1", "filename": "src/test/ui/matches2021.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fmatches2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fmatches2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches2021.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -6,6 +6,8 @@\n \n #![feature(assert_matches)]\n \n+use std::assert::assert_matches;\n+\n fn main() {\n     assert!(matches!((), ()));\n     assert_matches!((), ());"}, {"sha": "5532c8b90e32685aecd7ff4f252860c585c92567", "filename": "src/test/ui/resolve/resolve-hint-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    assert(true);\n-    //~^ ERROR expected function, found macro `assert`\n+    assert_eq(1, 1);\n+    //~^ ERROR expected function, found macro `assert_eq`\n }"}, {"sha": "efcfc7198ab51291f49e763c4627838e83298457", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5acb7b4ba98044a73f26a68810190a3401c75ee/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=a5acb7b4ba98044a73f26a68810190a3401c75ee", "patch": "@@ -1,13 +1,13 @@\n-error[E0423]: expected function, found macro `assert`\n+error[E0423]: expected function, found macro `assert_eq`\n   --> $DIR/resolve-hint-macro.rs:2:5\n    |\n-LL |     assert(true);\n-   |     ^^^^^^ not a function\n+LL |     assert_eq(1, 1);\n+   |     ^^^^^^^^^ not a function\n    |\n help: use `!` to invoke the macro\n    |\n-LL |     assert!(true);\n-   |           ^\n+LL |     assert_eq!(1, 1);\n+   |              ^\n \n error: aborting due to previous error\n "}]}