{"sha": "9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "node_id": "C_kwDOAAsO6NoAKDk2NTBhNDE2OGYyZDVmNGVkYjMzMzhhNDg0YWI1YzhkMWE0YjBlNTI", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-21T03:13:28Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-21T03:47:27Z"}, "message": "Improve code based on feedback.\n\nThis patch improves the readability of some of the code by using\nif-let-chains. Also, make use of the `add_feature_diagnostics` function.", "tree": {"sha": "a65986cbf03362300ce0da4d810fb3544286854e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65986cbf03362300ce0da4d810fb3544286854e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "html_url": "https://github.com/rust-lang/rust/commit/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5", "html_url": "https://github.com/rust-lang/rust/commit/f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5"}], "stats": {"total": 100, "additions": 38, "deletions": 62}, "files": [{"sha": "805050e681b0da998288a3a3752095e0057efd08", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "patch": "@@ -662,29 +662,27 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             span,\n             self.allow_gen_future.clone(),\n         );\n-        if self.tcx.features().closure_track_caller {\n-            let track_caller = self\n-                .attrs\n-                .get(&outer_hir_id.local_id)\n-                .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n-            if track_caller {\n-                self.lower_attrs(\n-                    hir_id,\n-                    &[Attribute {\n-                        kind: AttrKind::Normal(ptr::P(NormalAttr {\n-                            item: AttrItem {\n-                                path: Path::from_ident(Ident::new(sym::track_caller, span)),\n-                                args: AttrArgs::Empty,\n-                                tokens: None,\n-                            },\n+\n+        if self.tcx.features().closure_track_caller\n+            && let Some(attrs) = self.attrs.get(&outer_hir_id.local_id)\n+            && attrs.into_iter().any(|attr| attr.has_name(sym::track_caller))\n+        {\n+            self.lower_attrs(\n+                hir_id,\n+                &[Attribute {\n+                    kind: AttrKind::Normal(ptr::P(NormalAttr {\n+                        item: AttrItem {\n+                            path: Path::from_ident(Ident::new(sym::track_caller, span)),\n+                            args: AttrArgs::Empty,\n                             tokens: None,\n-                        })),\n-                        id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n-                        style: AttrStyle::Outer,\n-                        span: unstable_span,\n-                    }],\n-                    );\n-            }\n+                        },\n+                        tokens: None,\n+                    })),\n+                    id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n+                    style: AttrStyle::Outer,\n+                    span: unstable_span,\n+                }],\n+            );\n         }\n \n         let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };"}, {"sha": "2eb409a5ddd5e12297262ade97e6bb20ce48dd06", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "patch": "@@ -351,7 +351,7 @@ lint_builtin_mutable_transmutes =\n lint_builtin_unstable_features = unstable feature\n \n lint_ungated_async_fn_track_caller = `#[track_caller]` on async functions is a no-op\n-     .suggestion = enable this unstable feature\n+     .label = this function will not propagate the caller location\n \n lint_builtin_unreachable_pub = unreachable `pub` {$what}\n     .suggestion = consider restricting its visibility"}, {"sha": "d6de6e70ead808a888d8a56a611a424c3f36e2f4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "patch": "@@ -1416,33 +1416,27 @@ impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if fn_kind.asyncness() == IsAsync::Async && !cx.tcx.features().closure_track_caller {\n+        if fn_kind.asyncness() == IsAsync::Async\n+            && !cx.tcx.features().closure_track_caller\n+            && let attrs = cx.tcx.hir().attrs(hir_id)\n             // Now, check if the function has the `#[track_caller]` attribute\n-            let attrs = cx.tcx.hir().attrs(hir_id);\n-            let maybe_track_caller = attrs.iter().find(|attr| attr.has_name(sym::track_caller));\n-            if let Some(attr) = maybe_track_caller {\n+            && let Some(attr) = attrs.iter().find(|attr| attr.has_name(sym::track_caller))\n+            {\n                 cx.struct_span_lint(\n                     UNGATED_ASYNC_FN_TRACK_CALLER,\n                     attr.span,\n                     fluent::lint_ungated_async_fn_track_caller,\n                     |lint| {\n-                        lint.span_label(\n-                            span,\n-                            \"this function will not propagate the caller location\",\n+                        lint.span_label(span, fluent::label);\n+                        rustc_session::parse::add_feature_diagnostics(\n+                            lint,\n+                            &cx.tcx.sess.parse_sess,\n+                            sym::closure_track_caller,\n                         );\n-                        if cx.tcx.sess.is_nightly_build() {\n-                            lint.span_suggestion(\n-                                attr.span,\n-                                fluent::suggestion,\n-                                \"closure_track_caller\",\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n                         lint\n                     },\n                 );\n             }\n-        }\n     }\n }\n "}, {"sha": "6443e14296da884ace58a3f1fed5a1db97647751", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-track-caller.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs?ref=f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5", "patch": "@@ -1,9 +0,0 @@\n-// check-pass\n-// edition:2021\n-\n-#[track_caller] //~ WARN `#[track_caller]` on async functions is a no-op\n-async fn foo() {}\n-\n-fn main() {\n-    foo();\n-}"}, {"sha": "b41077a0b924d95d6c082f2eba176c64d36dcd1e", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-track-caller.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr?ref=f702e89f9de9ffb651ffb3b6b8dde5d9ffd1e4d5", "patch": "@@ -1,12 +0,0 @@\n-warning: `#[track_caller]` on async functions is a no-op\n-  --> $DIR/issue-104588-no-op-track-caller.rs:4:1\n-   |\n-LL | #[track_caller]\n-   | ^^^^^^^^^^^^^^^ help: enable this unstable feature: `closure_track_caller`\n-LL | async fn foo() {}\n-   | ----------------- this function will not propagate the caller location\n-   |\n-   = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "51ea225f4cbd45d56be94c0ed874515dd30b1cc6", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.nofeat.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr?ref=9650a4168f2d5f4edb3338a484ab5c8d1a4b0e52", "patch": "@@ -2,23 +2,28 @@ warning: `#[track_caller]` on async functions is a no-op\n   --> $DIR/panic-track-caller.rs:50:1\n    |\n LL |   #[track_caller]\n-   |   ^^^^^^^^^^^^^^^ help: enable this unstable feature: `closure_track_caller`\n+   |   ^^^^^^^^^^^^^^^\n LL | / async fn bar_track_caller() {\n LL | |     panic!()\n LL | | }\n    | |_- this function will not propagate the caller location\n    |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n    = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n \n warning: `#[track_caller]` on async functions is a no-op\n   --> $DIR/panic-track-caller.rs:62:5\n    |\n LL |       #[track_caller]\n-   |       ^^^^^^^^^^^^^^^ help: enable this unstable feature: `closure_track_caller`\n+   |       ^^^^^^^^^^^^^^^\n LL | /     async fn bar_assoc() {\n LL | |         panic!();\n LL | |     }\n    | |_____- this function will not propagate the caller location\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n \n warning: 2 warnings emitted\n "}]}