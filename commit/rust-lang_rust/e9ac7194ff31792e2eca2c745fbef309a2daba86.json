{"sha": "e9ac7194ff31792e2eca2c745fbef309a2daba86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWM3MTk0ZmYzMTc5MmUyZWNhMmM3NDVmYmVmMzA5YTJkYWJhODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-26T01:02:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-26T01:02:02Z"}, "message": "auto merge of #7365 : cmr/rust/syntax_cleanup, r=Aatch\n\nSets the stage for further cleanup (especially mass-slaughter of `@`)", "tree": {"sha": "879558b9ab5aad3f51922884e1f41f8b424b375e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879558b9ab5aad3f51922884e1f41f8b424b375e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ac7194ff31792e2eca2c745fbef309a2daba86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ac7194ff31792e2eca2c745fbef309a2daba86", "html_url": "https://github.com/rust-lang/rust/commit/e9ac7194ff31792e2eca2c745fbef309a2daba86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ac7194ff31792e2eca2c745fbef309a2daba86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd1438770ae371406327304cb6ad4501db256ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd1438770ae371406327304cb6ad4501db256ae", "html_url": "https://github.com/rust-lang/rust/commit/efd1438770ae371406327304cb6ad4501db256ae"}, {"sha": "a616531ebbfa4403c024bcb895818980c33687e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a616531ebbfa4403c024bcb895818980c33687e0", "html_url": "https://github.com/rust-lang/rust/commit/a616531ebbfa4403c024bcb895818980c33687e0"}], "stats": {"total": 319, "additions": 97, "deletions": 222}, "files": [{"sha": "fadd2faf0eb51bfef54c850ca73de1959af59fb2", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::to_bytes;\n+use std::to_bytes;\n \n #[deriving(Eq)]\n pub enum Abi {"}, {"sha": "90b2f131b00ee7efc00d8ac6d2eabb60402eaeb0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -10,18 +10,16 @@\n \n // The Rust abstract syntax tree.\n \n-use core::prelude::*;\n-\n use codemap::{span, spanned};\n use abi::AbiSet;\n use opt_vec::OptVec;\n use parse::token::{interner_get, str_to_ident};\n \n-use core::hashmap::HashMap;\n-use core::option::Option;\n-use core::to_bytes::IterBytes;\n-use core::to_bytes;\n-use core::to_str::ToStr;\n+use std::hashmap::HashMap;\n+use std::option::Option;\n+use std::to_bytes::IterBytes;\n+use std::to_bytes;\n+use std::to_str::ToStr;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n "}, {"sha": "d381f934d9ad17db68dd7d2566c26d4b7c6b6c36", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::*;\n use ast;\n@@ -22,9 +20,9 @@ use print::pprust;\n use visit;\n use syntax::parse::token::special_idents;\n \n-use core::cmp;\n-use core::hashmap::HashMap;\n-use core::vec;\n+use std::cmp;\n+use std::hashmap::HashMap;\n+use std::vec;\n \n pub enum path_elt {\n     path_mod(ident),"}, {"sha": "fd8fbc72e57fbbeb52acd172dae56436b2ec279e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,22 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use ast_util;\n use codemap::{span, spanned};\n-use core::cast;\n-use core::local_data;\n use opt_vec;\n use parse::token;\n use visit;\n \n-use core::hashmap::HashMap;\n-use core::int;\n-use core::option;\n-use core::to_bytes;\n+use std::hashmap::HashMap;\n+use std::int;\n+use std::option;\n+use std::to_bytes;\n+use std::cast;\n+use std::local_data;\n \n pub fn path_name_i(idents: &[ident]) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n@@ -793,7 +791,7 @@ pub fn getLast(arr: &~[Mrk]) -> uint {\n mod test {\n     use ast::*;\n     use super::*;\n-    use core::io;\n+    use std::io;\n \n     #[test] fn xorpush_test () {\n         let mut s = ~[];"}, {"sha": "a1a0c70062883843a578b0b052f1edfd1dfc803d", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -10,7 +10,7 @@\n \n // Functions dealing with attributes and meta_items\n \n-use core::prelude::*;\n+use extra;\n \n use ast;\n use codemap::{spanned, dummy_spanned};\n@@ -19,10 +19,8 @@ use codemap::BytePos;\n use diagnostic::span_handler;\n use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n-use core::hashmap::HashSet;\n-use core::vec;\n-use extra;\n-\n+use std::hashmap::HashSet;\n+use std::vec;\n /* Constructors */\n \n pub fn mk_name_value_item_str(name: @str, value: @str)"}, {"sha": "5efc96e16b535d22402264641ce27da1f7cd12eb", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -21,11 +21,9 @@ source code snippets, etc.\n \n */\n \n-use core::prelude::*;\n-\n-use core::cmp;\n-use core::to_bytes;\n-use core::uint;\n+use std::cmp;\n+use std::to_bytes;\n+use std::uint;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {"}, {"sha": "13fa01c96e120a60a678ed807b24c1dfd5e77d0a", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use codemap::{Pos, span};\n use codemap;\n \n-use core::io;\n-use core::uint;\n-use core::vec;\n+use std::io;\n+use std::uint;\n+use std::vec;\n use extra::term;\n \n pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,"}, {"sha": "532757346d0ae2b39642db2105d3646702dbec2c", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -12,16 +12,15 @@\n  * Inline assembly support.\n  */\n \n-use core::prelude::*;\n-\n-use core::vec;\n use ast;\n use codemap::span;\n use ext::base;\n use ext::base::*;\n use parse;\n use parse::token;\n \n+use std::vec;\n+\n enum State {\n     Asm,\n     Outputs,"}, {"sha": "282a28ff9e07df289a8f2a6f69ee8833267e290f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::vec;\n use ast;\n use ast::Name;\n use codemap;\n@@ -22,7 +19,8 @@ use parse;\n use parse::token;\n use parse::token::{ident_to_str, intern, str_to_ident};\n \n-use core::hashmap::HashMap;\n+use std::vec;\n+use std::hashmap::HashMap;\n \n // new-style macro! tt code:\n //\n@@ -535,7 +533,7 @@ fn satisfies_pred<K : Eq + Hash + IterBytes,V>(map : &mut HashMap<K,V>,\n #[cfg(test)]\n mod test {\n     use super::MapChain;\n-    use core::hashmap::HashMap;\n+    use std::hashmap::HashMap;\n \n     #[test] fn testenv () {\n         let mut a = HashMap::new();"}, {"sha": "02d5991e1a7bb762fedc9569038d8ba334eac97c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::ident;\n use ast;"}, {"sha": "80ab54b7e2cfe1540ca6184420dba22ce5a10cef", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;"}, {"sha": "edaf2b8cae6747bab73f7dd865cb46f38c9133f2", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{meta_item, item, expr};\n use codemap::span;\n use ext::base::ExtCtxt;"}, {"sha": "cea88bb7bbb75c7176edde7994806a6860c339af", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{meta_item, item, expr};\n use codemap::span;\n use ext::base::ExtCtxt;"}, {"sha": "3b9691cd42c0050c39886e17bbcf114f0d145d85", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{meta_item, item, expr};\n use codemap::span;"}, {"sha": "ccfb34a3a2f5429f0ee0849da96a751a239804f2", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n+use std::prelude::*;\n \n use ast::{meta_item, item, expr};\n use codemap::span;"}, {"sha": "84d7320fe1c19bc52416633d22e12b3f5cfb5d61", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{meta_item, item, expr};\n use codemap::span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n-use core::cmp::{Ordering, Equal, Less, Greater};\n+use std::cmp::{Ordering, Equal, Less, Greater};\n \n pub fn expand_deriving_totalord(cx: @ExtCtxt,\n                                 span: span,"}, {"sha": "77dbd96255d12b19313160daf533774e34cad3ed", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -13,9 +13,8 @@ The compiler code necessary for #[deriving(Decodable)]. See\n encodable.rs for more.\n */\n \n-use core::prelude::*;\n-use core::vec;\n-use core::uint;\n+use std::vec;\n+use std::uint;\n \n use ast::{meta_item, item, expr, m_mutbl};\n use codemap::span;"}, {"sha": "5514fd0b6ab5bdd360521d6a2ad39206e2f33244", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -75,8 +75,6 @@ would yield functions like:\n     }\n */\n \n-use core::prelude::*;\n-\n use ast::{meta_item, item, expr, m_imm, m_mutbl};\n use codemap::span;\n use ext::base::ExtCtxt;"}, {"sha": "17bbe7a333e659e0f6740b660bf251ba8187cbd2", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -162,8 +162,6 @@ StaticEnum(<ast::enum_def of C>, ~[(<ident of C0>, Left(1)),\n \n */\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{enum_def, expr, ident, Generics, struct_def};\n \n@@ -172,8 +170,8 @@ use ext::build::AstBuilder;\n use codemap::{span,respan};\n use opt_vec;\n \n-use core::uint;\n-use core::vec;\n+use std::uint;\n+use std::vec;\n \n pub use self::ty::*;\n mod ty;\n@@ -195,7 +193,7 @@ pub struct TraitDef<'self> {\n pub struct MethodDef<'self> {\n     /// name of the method\n     name: &'self str,\n-    /// List of generics, e.g. `R: core::rand::Rng`\n+    /// List of generics, e.g. `R: std::rand::Rng`\n     generics: LifetimeBounds<'self>,\n \n     /// Whether there is a self argument (outer Option) i.e. whether"}, {"sha": "8403234f8925222850d4f56420cff13a883ddc09", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{meta_item, item, expr, and};\n use codemap::span;\n use ext::base::ExtCtxt;"}, {"sha": "537d9efbb26d9ea62d89af96c0b3482102966f8a", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -18,8 +18,6 @@ library.\n \n */\n \n-use core::prelude::*;\n-\n use ast::{enum_def, ident, item, Generics, meta_item, struct_def};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;"}, {"sha": "dfbc028ddf6afa6833aa2832856b0760460c1520", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{meta_item, item, expr, ident};\n use codemap::span;\n use ext::base::ExtCtxt;\n use ext::build::{AstBuilder, Duplicate};\n use ext::deriving::generic::*;\n \n-use core::vec;\n+use std::vec;\n \n pub fn expand_deriving_rand(cx: @ExtCtxt,\n                             span: span,"}, {"sha": "d1d4d173a3f333145eef4a9d74f189f38006bf58", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{meta_item, item, expr};\n use codemap::span;"}, {"sha": "9da6bf27eadaecd75c8bcc785fd015f676ce83f2", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -13,8 +13,6 @@ A mini version of ast::Ty, which is easier to use, and features an\n explicit `Self` type to use when specifying impls to be derived.\n */\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{expr,Generics,ident};\n use ext::base::ExtCtxt;\n@@ -29,7 +27,7 @@ pub enum PtrTy<'self> {\n     Borrowed(Option<&'self str>, ast::mutability), // &['lifetime] [mut]\n }\n \n-/// A path, e.g. `::core::option::Option::<int>` (global). Has support\n+/// A path, e.g. `::std::option::Option::<int>` (global). Has support\n /// for type parameters and a lifetime.\n pub struct Path<'self> {\n     path: ~[&'self str],"}, {"sha": "471e72123524b1ce411ae8ed6409dfd0ecdf312b", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{meta_item, item, expr};\n use codemap::span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use core::vec;\n+use std::vec;\n \n pub fn expand_deriving_zero(cx: @ExtCtxt,\n                             span: span,"}, {"sha": "a6cb6155878790cc3cd901507bdb0715b6b917f3", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -14,15 +14,13 @@\n  * interface.\n  */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n \n-use core::os;\n+use std::os;\n \n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {"}, {"sha": "7fc784320ac1d858d82d10fc9cdc32380c84a620", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{blk_, attribute_, attr_outer, meta_word};\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n@@ -27,7 +25,7 @@ use parse::token::{ident_to_str, intern};\n use visit;\n use visit::Visitor;\n \n-use core::vec;\n+use std::vec;\n \n pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                    cx: @ExtCtxt,\n@@ -758,8 +756,6 @@ mod test {\n     use util::parser_testing::{string_to_item, string_to_pat, strs_to_idents};\n     use visit::{mk_vt};\n \n-    use core::option::{None, Some};\n-\n     // make sure that fail! is present\n     #[test] fn fail_exists_test () {\n         let src = @\"fn main() { fail!(\\\"something appropriately gloomy\\\");}\";"}, {"sha": "76073199f64579c71c90b8498f44bb610658bc92", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -14,17 +14,15 @@\n  * compiler syntax extension plugin interface.\n  */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n \n-use core::option;\n-use core::unstable::extfmt::ct::*;\n-use core::vec;\n+use std::option;\n+use std::unstable::extfmt::ct::*;\n+use std::vec;\n use parse::token::{str_to_ident};\n \n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n@@ -267,7 +265,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n     let mut stms = ~[];\n \n     /* Translate each piece (portion of the fmt expression) by invoking the\n-       corresponding function in core::unstable::extfmt. Each function takes a\n+       corresponding function in std::unstable::extfmt. Each function takes a\n        buffer to insert data into along with the data being formatted. */\n     let npieces = pieces.len();\n     do vec::consume(pieces) |i, pc| {"}, {"sha": "5b789cbc26c1e73bb9569ec85cb8d574f2864e30", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,17 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::vec;\n use ast;\n use codemap;\n use ext::base::*;\n use ext::base;\n use print;\n use parse::token::{get_ident_interner};\n \n-use core::io;\n+use std::vec;\n+use std::io;\n \n pub fn expand_syntax_ext(cx: @ExtCtxt,\n                          sp: codemap::span,"}, {"sha": "1af6e7810a57714d415e097f354138bfcec2f511", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -13,13 +13,11 @@\n // To start with, it will be use dummy spans, but it might someday do\n // something smarter.\n \n-use core::prelude::*;\n-\n use ast::ident;\n use ast;\n use codemap::span;\n \n-use core::vec;\n+use std::vec;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "8c2898737a35fe1fca072ae5efe209b097e0c9ea", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -29,8 +29,6 @@ that.\n \n */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::ExtCtxt;"}, {"sha": "b1f98d78fb39ef741604c943f0d40355017b95a3", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -37,8 +37,6 @@ updating the states using rule (2) until there are no changes.\n \n */\n \n-use core::prelude::*;\n-\n use ext::base::ExtCtxt;\n use ext::pipes::proto::{protocol_};\n "}, {"sha": "165d3c39c6b91cf24c5d9a7d05a8b5ffd7f72f5b", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -52,7 +52,6 @@ use ext::pipes::pipec::gen_init;\n use ext::pipes::proto::visit;\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n-use core::option::None;\n \n pub mod ast_builder;\n pub mod parse_proto;"}, {"sha": "21bb826623943cc27a25c4064e1e9e1db4cd4d4e", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -10,8 +10,6 @@\n \n // Parsing pipes protocols from token trees.\n \n-use core::prelude::*;\n-\n use ast_util;\n use ext::pipes::proto::*;\n use parse::common::SeqSep;"}, {"sha": "a75a20a0fa97c2cd04270336c136eee1609b359b", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -10,8 +10,6 @@\n \n // A protocol compiler for Rust.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{dummy_sp, spanned};\n use ext::base::ExtCtxt;\n@@ -23,7 +21,7 @@ use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::vec;\n+use std::vec;\n \n pub trait gen_send {\n     fn gen_send(&mut self, cx: @ExtCtxt, try: bool) -> @ast::item;"}, {"sha": "e86ced847d74adcd5f2cfaccea03c33bf16053ce", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::ExtCtxt;"}, {"sha": "db1902753a3844f7cc01a28d5ec24746738a373d", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::vec;\n use ast;\n use codemap::{BytePos, Pos, span};\n use ext::base::ExtCtxt;\n@@ -20,6 +17,8 @@ use parse::token::*;\n use parse::token;\n use parse;\n \n+use std::vec;\n+\n /**\n *\n * Quasiquoting works via token trees.\n@@ -32,8 +31,6 @@ use parse;\n */\n \n pub mod rt {\n-    use core::prelude::*;\n-\n     use ast;\n     use ext::base::ExtCtxt;\n     use parse;"}, {"sha": "71dc82be414362fd4b66b4923074777ef30a10cb", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap;\n use codemap::{Pos, ExpandedFrom, span};\n@@ -21,9 +19,9 @@ use parse;\n use parse::token::{get_ident_interner};\n use print::pprust;\n \n-use core::io;\n-use core::result;\n-use core::vec;\n+use std::io;\n+use std::result;\n+use std::vec;\n \n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include"}, {"sha": "299706b2d40bddf3b2b74dee2757926bf7d1cf00", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::vec;\n use ast;\n use codemap::span;\n use ext::base::ExtCtxt;\n@@ -19,6 +16,8 @@ use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::keywords;\n \n+use std::vec;\n+\n pub fn expand_trace_macros(cx: @ExtCtxt,\n                            sp: span,\n                            tt: &[ast::token_tree])"}, {"sha": "7c69bdd01c8152334f6dcb558154d4074e4bfbc6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -10,8 +10,6 @@\n \n // Earley-like parser for macros.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use codemap::{BytePos, mk_sp};\n@@ -22,9 +20,9 @@ use parse::parser::Parser;\n use parse::token::{Token, EOF, to_str, nonterminal, get_ident_interner, ident_to_str};\n use parse::token;\n \n-use core::hashmap::HashMap;\n-use core::uint;\n-use core::vec;\n+use std::hashmap::HashMap;\n+use std::uint;\n+use std::vec;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "80dd0c7247b498a3b9f0ce13e2058e9258b46388", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::vec;\n use ast::{ident, matcher_, matcher, match_tok, match_nonterminal, match_seq};\n use ast::{tt_delim};\n use ast;\n@@ -26,7 +23,8 @@ use parse::token::{get_ident_interner, special_idents, gensym_ident, ident_to_st\n use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n-use core::io;\n+use std::vec;\n+use std::io;\n \n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: span,"}, {"sha": "92feaa154fed170971852fb6cb35879d4d175f46", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n use codemap::{span, dummy_sp};\n@@ -19,8 +17,8 @@ use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident};\n use parse::token::{ident_to_str};\n use parse::lexer::TokenAndSpan;\n \n-use core::hashmap::HashMap;\n-use core::option;\n+use std::hashmap::HashMap;\n+use std::option;\n \n ///an unzipping of `token_tree`s\n struct TtFrame {"}, {"sha": "2c7c335a84109064b2d79572b44c903323cd94a5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use codemap::{span, spanned};\n use parse::token;\n use opt_vec::OptVec;\n \n-use core::vec;\n+use std::vec;\n \n pub trait ast_fold {\n     fn fold_crate(@self, &crate) -> crate;\n@@ -1011,5 +1009,4 @@ mod test {\n                                     token::get_ident_interner()),\n                      ~\"zz!zz((zz$zz:zz$(zz $zz:zz)zz+=>(zz$(zz$zz$zz)+)))\");\n     }\n-\n }"}, {"sha": "fe050fc99f19d712ef81b929aa584d8848daa897", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -16,8 +16,7 @@\n  * other useful things like `push()` and `len()`.\n  */\n \n-use core::prelude::*;\n-use core::vec::VecIterator;\n+use std::vec::VecIterator;\n \n #[deriving(Encodable, Decodable)]\n pub enum OptVec<T> {"}, {"sha": "2baf08b68f1c6f394338ef8848a4ae785ac63295", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos};\n use diagnostic;\n@@ -20,9 +18,9 @@ use parse::lexer;\n use parse::token;\n use parse::token::{get_ident_interner};\n \n-use core::io;\n-use core::str;\n-use core::uint;\n+use std::io;\n+use std::str;\n+use std::uint;\n \n #[deriving(Eq)]\n pub enum cmnt_style {"}, {"sha": "cde4c754d560eba1fb208d1b8ec40e8c8e367474", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{BytePos, spanned};\n use parse::lexer::reader;"}, {"sha": "2092f0fa5facddb821df24f1215e3ebc4c0f1c04", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos, span};\n use codemap;\n@@ -19,9 +17,9 @@ use ext::tt::transcribe::{dup_tt_reader};\n use parse::token;\n use parse::token::{str_to_ident};\n \n-use core::char;\n-use core::either;\n-use core::u64;\n+use std::char;\n+use std::either;\n+use std::u64;\n \n pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n@@ -789,7 +787,6 @@ mod test {\n \n     use ast;\n     use codemap::{BytePos, CodeMap, span};\n-    use core::option::None;\n     use diagnostic;\n     use parse::token;\n     use parse::token::{str_to_ident};"}, {"sha": "d54c64e7ee60ecd32a036fc75e312b6aec0398df", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -20,10 +20,8 @@ use parse::attr::parser_attr;\n use parse::lexer::reader;\n use parse::parser::Parser;\n \n-use core::io;\n-use core::option::{None, Option, Some};\n-use core::path::Path;\n-use core::result::{Err, Ok};\n+use std::io;\n+use std::path::Path;\n \n pub mod lexer;\n pub mod parser;\n@@ -335,9 +333,7 @@ mod test {\n     use super::*;\n     use extra::serialize::Encodable;\n     use extra;\n-    use core::io;\n-    use core::option::Some;\n-    use core::option::None;\n+    use std::io;\n     use codemap::{span, BytePos, spanned};\n     use opt_vec;\n     use ast;"}, {"sha": "32508f3b477a105f6b92f4ec950e38cbb556a772", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -17,17 +17,15 @@ Obsolete syntax that becomes too hard to parse can be\n removed.\n */\n \n-use core::prelude::*;\n-\n use ast::{expr, expr_lit, lit_nil, attribute};\n use ast;\n use codemap::{span, respan};\n use parse::parser::Parser;\n use parse::token::{keywords, Token};\n use parse::token;\n \n-use core::str;\n-use core::to_bytes;\n+use std::str;\n+use std::to_bytes;\n \n /// The specific types of unsupported syntax\n #[deriving(Eq)]\n@@ -127,7 +125,7 @@ impl Parser {\n             ),\n             ObsoleteSwap => (\n                 \"swap\",\n-                \"Use core::util::{swap, replace} instead\"\n+                \"Use std::util::{swap, replace} instead\"\n             ),\n             ObsoleteUnsafeBlock => (\n                 \"non-standalone unsafe block\","}, {"sha": "35c09ff1b56abbbadf628ced3dfbf4a524c1f2c4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi;\n use abi::AbiSet;\n use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};\n@@ -92,10 +90,10 @@ use parse::{new_sub_parser_from_file, next_node_id, ParseSess};\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::either::Either;\n-use core::either;\n-use core::hashmap::HashSet;\n-use core::vec;\n+use std::either::Either;\n+use std::either;\n+use std::hashmap::HashSet;\n+use std::vec;\n \n #[deriving(Eq)]\n enum restriction {"}, {"sha": "2ddae73a3fcd93b021fc3b79899e899eebce7fd7", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,21 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::Name;\n use ast_util;\n use parse::token;\n use util::interner::StrInterner;\n use util::interner;\n \n-use core::cast;\n-use core::char;\n-use core::cmp::Equiv;\n-use core::local_data;\n-use core::rand;\n-use core::rand::RngUtil;\n+use std::cast;\n+use std::char;\n+use std::cmp::Equiv;\n+use std::local_data;\n+use std::rand;\n+use std::rand::RngUtil;\n \n #[deriving(Encodable, Decodable, Eq)]\n pub enum binop {"}, {"sha": "4e03d9bac70407b4eebf2cc3ecca5391427178a1", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -61,10 +61,8 @@\n  * avoid combining it with other lines and making matters even worse.\n  */\n \n-use core::prelude::*;\n-\n-use core::io;\n-use core::vec;\n+use std::io;\n+use std::vec;\n \n #[deriving(Eq)]\n pub enum breaks { consistent, inconsistent, }"}, {"sha": "277cc6208fb08177cc307797f0fd036ae8e7fda5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::{RegionTyParamBound, TraitTyParamBound, required, provided};\n use ast;\n@@ -29,10 +27,10 @@ use print::pp::{breaks, consistent, inconsistent, eof};\n use print::pp;\n use print::pprust;\n \n-use core::char;\n-use core::io;\n-use core::u64;\n-use core::uint;\n+use std::char;\n+use std::io;\n+use std::u64;\n+use std::uint;\n \n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {\n@@ -2251,8 +2249,6 @@ mod test {\n     use ast;\n     use ast_util;\n     use codemap;\n-    use core::cmp::Eq;\n-    use core::option::None;\n     use parse::token;\n \n     fn string_check<T:Eq> (given : &T, expected: &T) {"}, {"sha": "395017cef3b773fe3165e519d88ab4d5c134ddbe", "filename": "src/libsyntax/syntax.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -23,16 +23,7 @@\n #[allow(non_camel_case_types)];\n #[deny(deprecated_pattern)];\n \n-#[no_core];\n-#[no_std];\n-\n-extern mod core(name = \"std\");\n-extern mod extra(name = \"extra\");\n-\n-// For deriving(Encodable) purposes...\n-extern mod std(name = \"std\");\n-\n-use core::prelude::*;\n+extern mod extra;\n \n pub mod util {\n     pub mod interner;"}, {"sha": "af37c1d27d82163003fec388b5cb231c96a4df15", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -12,13 +12,8 @@\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n \n-// allow the interner_key macro to escape this module:\n-#[macro_escape];\n-\n-use core::prelude::*;\n-\n-use core::cmp::Equiv;\n-use core::hashmap::HashMap;\n+use std::cmp::Equiv;\n+use std::hashmap::HashMap;\n \n pub struct Interner<T> {\n     priv map: @mut HashMap<T, uint>,"}, {"sha": "4340d6bb6a2d4982dff59b6b107c34f0a25b5cee", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::option::{Option,None};\n use ast;\n use parse::{new_parse_sess};\n use parse::{ParseSess,string_to_filemap,filemap_to_tts};"}, {"sha": "9b816ce5e5b7cf0bdb831ff13befa2e45558a832", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ac7194ff31792e2eca2c745fbef309a2daba86/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e9ac7194ff31792e2eca2c745fbef309a2daba86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::*;\n use ast;"}]}