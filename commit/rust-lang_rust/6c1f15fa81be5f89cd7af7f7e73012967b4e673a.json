{"sha": "6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMWYxNWZhODFiZTVmODljZDdhZjdmN2U3MzAxMjk2N2I0ZTY3M2E=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-02T06:37:26Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-02T06:43:25Z"}, "message": "Fix ICE when a future-incompat-report has its command-line level capped\n\nFixes #78660\n\nWith PR https://github.com/rust-lang/rust/pull/75534 merged, we now run\nmore lint-related code for future-incompat-report, even when their final\nlevel is Allow. Some lint-related code was not expecting `Level::Allow`,\nand had an explicit panic.\n\nThis PR explicitly tracks the lint level set on the command line before\n`--cap-lints` is applied. This is used to emit a more precise error\nnote (e.g. we don't say that `-W lint-name` was specified on the\ncommand line just because a lint was capped to Warn). As a result, we\ncan now correctly emit a note that `-A` was used if we got\n`Level::Allow` from the command line (before the cap is applied).", "tree": {"sha": "255f70d53542ab18d9f63633b8c9f7b8f57a21a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255f70d53542ab18d9f63633b8c9f7b8f57a21a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+fqpsACgkQtAh+UQ6Y\nsWS31Q/+MYvqWBdnHcMphNJwxfd8xyzKfogiwU58u+/M9wkp5wAxwDjNqDpQf1y0\nkgbQfA2JAUd9O8r06RDtM8IBZkPrVwCXcENqYgehb9woZP85z/8zIaxp3MhtJahP\na9ZG7+ZmnepFb6mJvCPfUE8Bd407yHWdwwbcRLqqolaUST7bpJWkTl8s+lMkFVqV\nUB1xp9hbfbittD94IWUsFO0DWJ3cp5DbU9IDJ9XsdnM3U1qNhy2YIanRhRxBwrYd\nwv1RHaYZYrbOqAPpVLuoHDU3++PuyuxL80t5ckUh9kmK1hXFdn/rqJwwCmAg7TZR\nEAXSNMjOZ79wV4AVYh3RYfigg+kEXZClfDlRqGJkuVs3cCDBsWDjfJ5BWNT3LuRH\nmdGeHVlqBrti2xfmW/DTewxT5MDwG1dx7xrcDmbMvTwPKp9qYwSg52kXMFdlPzNK\nG1NKFOLpU+OxmD4vF6I6aZToaUXO6W2hOQgSJ8ZQ9QEXWhyIYC6yq+HE0PN6ccb9\nMl3wlrrYv8uSTX2sM+4zPdWxJFi34sdYy8OkxQj7XI3Ku8Uhe3uTT+XJq+frrdUZ\ncCTE5JrKu0Dvxe/K5ssIogPoIfPYniHowTwxIDJ6srmrcoo3MyInOidr8FBUpv+O\nF4zmzMBASM3FoNTkk/rZedEZlfIHJ3NSgNFTn4y0QV3gF6xUQu8=\n=gyK0\n-----END PGP SIGNATURE-----", "payload": "tree 255f70d53542ab18d9f63633b8c9f7b8f57a21a4\nparent d8ef0d7757742862116c455345120dcbfb7e74e0\nauthor Aaron Hill <aa1ronham@gmail.com> 1604299046 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604299405 -0500\n\nFix ICE when a future-incompat-report has its command-line level capped\n\nFixes #78660\n\nWith PR https://github.com/rust-lang/rust/pull/75534 merged, we now run\nmore lint-related code for future-incompat-report, even when their final\nlevel is Allow. Some lint-related code was not expecting `Level::Allow`,\nand had an explicit panic.\n\nThis PR explicitly tracks the lint level set on the command line before\n`--cap-lints` is applied. This is used to emit a more precise error\nnote (e.g. we don't say that `-W lint-name` was specified on the\ncommand line just because a lint was capped to Warn). As a result, we\ncan now correctly emit a note that `-A` was used if we got\n`Level::Allow` from the command line (before the cap is applied).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "html_url": "https://github.com/rust-lang/rust/commit/6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ef0d7757742862116c455345120dcbfb7e74e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ef0d7757742862116c455345120dcbfb7e74e0", "html_url": "https://github.com/rust-lang/rust/commit/d8ef0d7757742862116c455345120dcbfb7e74e0"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "aca28988364e6802a0d83e9ea3528cd58f80e330", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "patch": "@@ -74,6 +74,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             store.check_lint_name_cmdline(sess, &lint_name, level);\n+            let orig_level = level;\n \n             // If the cap is less than this specified level, e.g., if we've got\n             // `--cap-lints allow` but we've also got `-D foo` then we ignore\n@@ -88,7 +89,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 self.check_gated_lint(id, DUMMY_SP);\n-                let src = LintSource::CommandLine(lint_flag_val);\n+                let src = LintSource::CommandLine(lint_flag_val, orig_level);\n                 specs.insert(id, (level, src));\n             }\n         }\n@@ -123,7 +124,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                             diag_builder.note(&rationale.as_str());\n                         }\n                     }\n-                    LintSource::CommandLine(_) => {\n+                    LintSource::CommandLine(_, _) => {\n                         diag_builder.note(\"`forbid` lint level was set on command line\");\n                     }\n                 }\n@@ -422,7 +423,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             let forbidden_lint_name = match forbid_src {\n                 LintSource::Default => id.to_string(),\n                 LintSource::Node(name, _, _) => name.to_string(),\n-                LintSource::CommandLine(name) => name.to_string(),\n+                LintSource::CommandLine(name, _) => name.to_string(),\n             };\n             let (lint_attr_name, lint_attr_span) = match *src {\n                 LintSource::Node(name, span, _) => (name, span),\n@@ -446,7 +447,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         diag_builder.note(&rationale.as_str());\n                     }\n                 }\n-                LintSource::CommandLine(_) => {\n+                LintSource::CommandLine(_, _) => {\n                     diag_builder.note(\"`forbid` lint level was set on command line\");\n                 }\n             }"}, {"sha": "781c1744ac62da86d15d91f5955a4b2fe482e4e6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "patch": "@@ -22,23 +22,25 @@ pub enum LintSource {\n     Node(Symbol, Span, Option<Symbol> /* RFC 2383 reason */),\n \n     /// Lint level was set by a command-line flag.\n-    CommandLine(Symbol),\n+    /// The provided `Level` is the level specified on the command line -\n+    /// the actual level may be lower due to `--cap-lints`\n+    CommandLine(Symbol, Level),\n }\n \n impl LintSource {\n     pub fn name(&self) -> Symbol {\n         match *self {\n             LintSource::Default => symbol::kw::Default,\n             LintSource::Node(name, _, _) => name,\n-            LintSource::CommandLine(name) => name,\n+            LintSource::CommandLine(name, _) => name,\n         }\n     }\n \n     pub fn span(&self) -> Span {\n         match *self {\n             LintSource::Default => DUMMY_SP,\n             LintSource::Node(_, span, _) => span,\n-            LintSource::CommandLine(_) => DUMMY_SP,\n+            LintSource::CommandLine(_, _) => DUMMY_SP,\n         }\n     }\n }\n@@ -279,12 +281,12 @@ pub fn struct_lint_level<'s, 'd>(\n                     &format!(\"`#[{}({})]` on by default\", level.as_str(), name),\n                 );\n             }\n-            LintSource::CommandLine(lint_flag_val) => {\n-                let flag = match level {\n+            LintSource::CommandLine(lint_flag_val, orig_level) => {\n+                let flag = match orig_level {\n                     Level::Warn => \"-W\",\n                     Level::Deny => \"-D\",\n                     Level::Forbid => \"-F\",\n-                    Level::Allow => panic!(),\n+                    Level::Allow => \"-A\",\n                 };\n                 let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n                 if lint_flag_val.as_str() == name {"}, {"sha": "4d98f0ad62d4ddceff454fc3106e60c84ad392e7", "filename": "src/test/ui/lint/issue-78660-cap-lints-future-compat.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.rs?ref=6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -D warnings --cap-lints allow\n+// check-pass\n+\n+// Regression test for issue #78660\n+// Tests that we don't ICE when a future-incompat-report lint has\n+// has a command-line source, but is capped to allow\n+\n+fn main() {\n+    [\"hi\"].into_iter();\n+}"}, {"sha": "79958ba90d409c9f8eb4af66051261dea3b5eef8", "filename": "src/test/ui/lint/issue-78660-cap-lints-future-compat.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c1f15fa81be5f89cd7af7f7e73012967b4e673a/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-78660-cap-lints-future-compat.stderr?ref=6c1f15fa81be5f89cd7af7f7e73012967b4e673a", "patch": "@@ -0,0 +1,11 @@\n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/issue-78660-cap-lints-future-compat.rs:9:12\n+   |\n+LL |     [\"hi\"].into_iter();\n+   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = note: `-D array-into-iter` implied by `-D warnings`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+"}]}