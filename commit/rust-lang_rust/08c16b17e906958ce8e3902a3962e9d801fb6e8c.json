{"sha": "08c16b17e906958ce8e3902a3962e9d801fb6e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YzE2YjE3ZTkwNjk1OGNlOGUzOTAyYTM5NjJlOWQ4MDFmYjZlOGM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T15:42:45Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T15:42:49Z"}, "message": "Fix --pretty normal, reorganize some code in driver.rs\n\nThere is now only one path doing crate expanding and typechecking,\nwhich should make it less likely for the pretty-printing code to be\nbroken by changes to the compilation pipeline.\n\nCloses #1536", "tree": {"sha": "33f52fbbe665171d368ee3610413498d9ea426f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f52fbbe665171d368ee3610413498d9ea426f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c16b17e906958ce8e3902a3962e9d801fb6e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c16b17e906958ce8e3902a3962e9d801fb6e8c", "html_url": "https://github.com/rust-lang/rust/commit/08c16b17e906958ce8e3902a3962e9d801fb6e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c16b17e906958ce8e3902a3962e9d801fb6e8c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "html_url": "https://github.com/rust-lang/rust/commit/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc"}], "stats": {"total": 111, "additions": 63, "deletions": 48}, "files": [{"sha": "59ef6737a36b44d65a43fb845468fcd7ec595878", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 63, "deletions": 48, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/08c16b17e906958ce8e3902a3962e9d801fb6e8c/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c16b17e906958ce8e3902a3962e9d801fb6e8c/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=08c16b17e906958ce8e3902a3962e9d801fb6e8c", "patch": "@@ -20,7 +20,7 @@ import back::{x86, x86_64};\n \n tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }\n \n-fn default_configuration(sess: session::session, argv0: str, input: str) ->\n+fn default_configuration(sess: session, argv0: str, input: str) ->\n    ast::crate_cfg {\n     let libc =\n         alt sess.targ_cfg.os {\n@@ -48,7 +48,7 @@ fn default_configuration(sess: session::session, argv0: str, input: str) ->\n          mk(\"build_input\", input)];\n }\n \n-fn build_configuration(sess: session::session, argv0: str, input: str) ->\n+fn build_configuration(sess: session, argv0: str, input: str) ->\n    ast::crate_cfg {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n@@ -76,31 +76,27 @@ fn parse_cfgspecs(cfgspecs: [str]) -> ast::crate_cfg {\n \n fn input_is_stdin(filename: str) -> bool { filename == \"-\" }\n \n-fn parse_input(sess: session::session, cfg: ast::crate_cfg, input: str) ->\n+fn parse_input(sess: session, cfg: ast::crate_cfg, input: str) ->\n    @ast::crate {\n     if !input_is_stdin(input) {\n         parser::parse_crate_from_file(input, cfg, sess.parse_sess)\n-    } else { parse_input_src(sess, cfg, input).crate }\n+    } else {\n+        let srcbytes = get_input_stream(sess, input).read_whole_stream();\n+        let srcstring = str::unsafe_from_bytes(srcbytes);\n+        parser::parse_crate_from_source_str(input, srcstring, cfg,\n+                                            sess.parse_sess)\n+    }\n }\n \n-fn parse_input_src(sess: session::session, cfg: ast::crate_cfg, infile: str)\n-   -> {crate: @ast::crate, src: str} {\n-    let src_stream = if infile != \"-\" {\n+fn get_input_stream(sess: session, infile: str) -> io::reader {\n+    if !input_is_stdin(infile) {\n         alt io::file_reader(infile) {\n           result::ok(reader) { reader }\n           result::err(e) {\n             sess.fatal(e)\n           }\n         }\n-    } else {\n-        io::stdin()\n-    };\n-    let srcbytes = src_stream.read_whole_stream();\n-    let src = str::unsafe_from_bytes(srcbytes);\n-    let crate =\n-        parser::parse_crate_from_source_str(infile, src, cfg,\n-                                            sess.parse_sess);\n-    ret {crate: crate, src: src};\n+    } else { io::stdin() }\n }\n \n fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n@@ -113,7 +109,7 @@ fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n     ret rv;\n }\n \n-fn inject_libcore_reference(sess: session::session,\n+fn inject_libcore_reference(sess: session,\n                             crate: @ast::crate) -> @ast::crate {\n \n     fn spanned<T: copy>(x: T) -> @ast::spanned<T> {\n@@ -134,14 +130,22 @@ fn inject_libcore_reference(sess: session::session,\n                  with crate.node} with *crate }\n }\n \n+enum compile_upto {\n+    cu_parse;\n+    cu_expand;\n+    cu_typeck;\n+    cu_no_trans;\n+    cu_everything;\n+}\n \n-fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n-                 outdir: option::t<str>, output: option::t<str>) {\n-\n+fn compile_upto(sess: session, cfg: ast::crate_cfg,\n+                input: str, upto: compile_upto,\n+                outputs: option::t<output_filenames>)\n+    -> {crate: @ast::crate, tcx: option::t<ty::ctxt>} {\n     let time_passes = sess.opts.time_passes;\n     let crate =\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n-    if sess.opts.parse_only { ret; }\n+    if upto == cu_parse { ret {crate: crate, tcx: none}; }\n \n     sess.building_library =\n         session::building_library(sess.opts.crate_type, crate);\n@@ -156,6 +160,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         time(time_passes, \"expansion\",\n              bind syntax::ext::expand::expand_crate(sess, crate));\n \n+    if upto == cu_expand { ret {crate: crate, tcx: none}; }\n     if sess.opts.libcore {\n         crate = inject_libcore_reference(sess, crate);\n     }\n@@ -177,6 +182,9 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     let (method_map, dict_map) =\n         time(time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, impl_map, crate));\n+\n+    if upto == cu_typeck { ret {crate: crate, tcx: some(ty_cx)}; }\n+\n     time(time_passes, \"block-use checking\",\n          bind middle::block_use::check_crate(ty_cx, crate));\n     time(time_passes, \"function usage\",\n@@ -195,9 +203,9 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n-    if sess.opts.no_trans { ret; }\n \n-    let outputs = build_output_filenames(input, outdir, output, sess);\n+    if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx)}; }\n+    let outputs = option::get(outputs);\n \n     let (llmod, link_meta) =\n         time(time_passes, \"translation\",\n@@ -212,14 +220,25 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         sess.opts.output_type != link::output_type_exe ||\n             sess.opts.static && sess.building_library;\n \n-    if stop_after_codegen { ret; }\n+    if stop_after_codegen { ret {crate: crate, tcx: some(ty_cx)}; }\n \n     time(time_passes, \"Linking\",\n          bind link::link_binary(sess, outputs.obj_filename,\n                                 outputs.out_filename, link_meta));\n+    ret {crate: crate, tcx: some(ty_cx)};\n }\n \n-fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n+fn compile_input(sess: session, cfg: ast::crate_cfg, input: str,\n+                 outdir: option::t<str>, output: option::t<str>) {\n+\n+    let upto = if sess.opts.parse_only { cu_parse }\n+               else if sess.opts.no_trans { cu_no_trans }\n+               else { cu_everything };\n+    let outputs = build_output_filenames(input, outdir, output, sess);\n+    compile_upto(sess, cfg, input, upto, some(outputs));\n+}\n+\n+fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n                       ppm: pp_mode) {\n     fn ann_paren_for_expr(node: pprust::ann_node) {\n         alt node { pprust::node_expr(s, expr) { pprust::popen(s); } _ { } }\n@@ -260,33 +279,27 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     // to collect comments and literals, and we need to support reading\n     // from stdin, we're going to just suck the source into a string\n     // so both the parser and pretty-printer can use it.\n-    let crate_src = parse_input_src(sess, cfg, input);\n-    let crate = crate_src.crate;\n-    let src = crate_src.src;\n+    let upto = alt ppm {\n+      ppm_expanded. { cu_expand }\n+      ppm_typed. { cu_typeck }\n+      _ { cu_parse }\n+    };\n+    let {crate, tcx} = compile_upto(sess, cfg, input, upto, none);\n+    let src = get_input_stream(sess, input);\n \n-    let ann;\n+    let ann: pprust::pp_ann = pprust::no_ann();\n     alt ppm {\n-      ppm_expanded. {\n-        crate = syntax::ext::expand::expand_crate(sess, crate);\n-        ann = pprust::no_ann();\n-      }\n       ppm_typed. {\n-        crate = syntax::ext::expand::expand_crate(sess, crate);\n-        let amap = middle::ast_map::map_crate(*crate);\n-        let {def_map, impl_map, _} =\n-            resolve::resolve_crate(sess, amap, crate);\n-        let freevars = freevars::annotate_freevars(def_map, crate);\n-        let ty_cx = ty::mk_ctxt(sess, def_map, amap, freevars);\n-        typeck::check_crate(ty_cx, impl_map, crate);\n-        ann = {pre: ann_paren_for_expr, post: bind ann_typed_post(ty_cx, _)};\n+        ann = {pre: ann_paren_for_expr,\n+               post: bind ann_typed_post(option::get(tcx), _)};\n       }\n       ppm_identified. {\n         ann = {pre: ann_paren_for_expr, post: ann_identified_post};\n       }\n-      ppm_normal. { ann = pprust::no_ann(); }\n+      ppm_expanded. | ppm_normal. {}\n     }\n     pprust::print_crate(sess.codemap, sess.diagnostic, crate, input,\n-                        io::string_reader(src), io::stdout(), ann);\n+                        src, io::stdout(), ann);\n }\n \n fn get_os(triple: str) -> option<session::os> {\n@@ -453,7 +466,7 @@ fn build_session_options(match: getopts::match,\n }\n \n fn build_session(sopts: @session::options, input: str,\n-                 demitter: diagnostic::emitter) -> session::session {\n+                 demitter: diagnostic::emitter) -> session {\n     let target_cfg = build_target_config(sopts, demitter);\n     let cstore = cstore::mk_cstore();\n     let filesearch = filesearch::mk_filesearch(\n@@ -480,7 +493,7 @@ fn build_session(sopts: @session::options, input: str,\n       working_dir: fs::dirname(input)}\n }\n \n-fn parse_pretty(sess: session::session, &&name: str) -> pp_mode {\n+fn parse_pretty(sess: session, &&name: str) -> pp_mode {\n     if str::eq(name, \"normal\") {\n         ret ppm_normal;\n     } else if str::eq(name, \"expanded\") {\n@@ -509,11 +522,13 @@ fn opts() -> [getopts::opt] {\n          optflag(\"warn-unused-imports\")];\n }\n \n+type output_filenames = @{out_filename: str, obj_filename:str};\n+\n fn build_output_filenames(ifile: str,\n                           odir: option::t<str>,\n                           ofile: option::t<str>,\n-                          sess: session::session)\n-        -> @{out_filename: str, obj_filename:str} {\n+                          sess: session)\n+        -> output_filenames {\n     let obj_path = \"\";\n     let out_path: str = \"\";\n     let sopts = sess.opts;\n@@ -599,7 +614,7 @@ fn early_error(emitter: diagnostic::emitter, msg: str) -> ! {\n     fail;\n }\n \n-fn list_metadata(sess: session::session, path: str, out: io::writer) {\n+fn list_metadata(sess: session, path: str, out: io::writer) {\n     metadata::creader::list_file_metadata(sess, path, out);\n }\n "}]}