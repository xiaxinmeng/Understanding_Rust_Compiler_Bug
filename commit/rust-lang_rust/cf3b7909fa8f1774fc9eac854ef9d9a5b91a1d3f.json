{"sha": "cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmM2I3OTA5ZmE4ZjE3NzRmYzllYWM4NTRlZjlkOWE1YjkxYTFkM2Y=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:15:59Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:39:57Z"}, "message": "Make recursion_limit and type_length_limit thread-safe", "tree": {"sha": "ae10733caa36a1c80e598099d34cadb98f8e6f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae10733caa36a1c80e598099d34cadb98f8e6f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "html_url": "https://github.com/rust-lang/rust/commit/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472b416592f494aa4fe0db50802ba49803cec26d", "url": "https://api.github.com/repos/rust-lang/rust/commits/472b416592f494aa4fe0db50802ba49803cec26d", "html_url": "https://github.com/rust-lang/rust/commit/472b416592f494aa4fe0db50802ba49803cec26d"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "077a20315a2afbea668a2327557062740e2a5d2b", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -18,17 +18,17 @@\n use session::Session;\n use syntax::ast;\n \n-use std::cell::Cell;\n+use rustc_data_structures::sync::Once;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, \"recursion_limit\",\n-                 \"recursion limit\");\n+                 \"recursion limit\", 64);\n     update_limit(sess, krate, &sess.type_length_limit, \"type_length_limit\",\n-                 \"type length limit\");\n+                 \"type length limit\", 1048576);\n }\n \n-fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Cell<usize>,\n-                name: &str, description: &str) {\n+fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Once<usize>,\n+                name: &str, description: &str, default: usize) {\n     for attr in &krate.attrs {\n         if !attr.check_name(name) {\n             continue;\n@@ -45,4 +45,5 @@ fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Cell<usize>,\n                   \"malformed {} attribute, expected #![{}=\\\"N\\\"]\",\n                   description, name);\n     }\n+    limit.set(default);\n }"}, {"sha": "afb62aca582feb084833c4f997a1dd18f53cbdaa", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -26,7 +26,7 @@ use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n \n-use rustc_data_structures::sync::{Lrc, Lock, OneThread};\n+use rustc_data_structures::sync::{Lrc, Lock, OneThread, Once};\n \n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n@@ -46,13 +46,13 @@ use rustc_back::target::{Target, TargetTriple};\n use rustc_data_structures::flock;\n use jobserver::Client;\n \n+use std;\n use std::cell::{self, Cell, RefCell};\n use std::collections::HashMap;\n use std::env;\n use std::fmt;\n use std::io::Write;\n use std::path::{Path, PathBuf};\n-use std::sync::{Once, ONCE_INIT};\n use std::time::Duration;\n use std::sync::mpsc;\n \n@@ -105,10 +105,10 @@ pub struct Session {\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n-    pub recursion_limit: Cell<usize>,\n+    pub recursion_limit: Once<usize>,\n \n     /// The maximum length of types during monomorphization.\n-    pub type_length_limit: Cell<usize>,\n+    pub type_length_limit: Once<usize>,\n \n     /// The maximum number of stackframes allowed in const eval\n     pub const_eval_stack_frame_limit: Cell<usize>,\n@@ -1147,8 +1147,8 @@ pub fn build_session_(\n         dependency_formats: RefCell::new(FxHashMap()),\n         crate_disambiguator: RefCell::new(None),\n         features: RefCell::new(None),\n-        recursion_limit: Cell::new(64),\n-        type_length_limit: Cell::new(1048576),\n+        recursion_limit: Once::new(),\n+        type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: Cell::new(100),\n         const_eval_step_limit: Cell::new(1_000_000),\n         next_node_id: Cell::new(NodeId::new(1)),\n@@ -1188,7 +1188,7 @@ pub fn build_session_(\n         // per-process.\n         jobserver_from_env: unsafe {\n             static mut GLOBAL_JOBSERVER: *mut Option<Client> = 0 as *mut _;\n-            static INIT: Once = ONCE_INIT;\n+            static INIT: std::sync::Once = std::sync::ONCE_INIT;\n             INIT.call_once(|| {\n                 GLOBAL_JOBSERVER = Box::into_raw(Box::new(Client::from_env()));\n             });"}, {"sha": "9f21ea14d0f326bbf30e87e676df094d3a6e94ae", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -345,7 +345,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().sess.recursion_limit.get();\n+                        let recursion_limit = *self.tcx().sess.recursion_limit.get();\n                         if self.depth >= recursion_limit {\n                             let obligation = Obligation::with_depth(\n                                 self.cause.clone(),\n@@ -566,7 +566,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                     found cache entry: in-progress\");\n \n             // But for now, let's classify this as an overflow:\n-            let recursion_limit = selcx.tcx().sess.recursion_limit.get();\n+            let recursion_limit = *selcx.tcx().sess.recursion_limit.get();\n             let obligation = Obligation::with_depth(cause.clone(),\n                                                     recursion_limit,\n                                                     param_env,\n@@ -848,7 +848,7 @@ fn project_type<'cx, 'gcx, 'tcx>(\n     debug!(\"project(obligation={:?})\",\n            obligation);\n \n-    let recursion_limit = selcx.tcx().sess.recursion_limit.get();\n+    let recursion_limit = *selcx.tcx().sess.recursion_limit.get();\n     if obligation.recursion_depth >= recursion_limit {\n         debug!(\"project: overflow!\");\n         selcx.infcx().report_overflow_error(&obligation, true);"}, {"sha": "5e0a4ca3305526fbc3aafcc3252959440066f429", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -109,7 +109,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                     Reveal::UserFacing => ty,\n \n                     Reveal::All => {\n-                        let recursion_limit = self.tcx().sess.recursion_limit.get();\n+                        let recursion_limit = *self.tcx().sess.recursion_limit.get();\n                         if self.anon_depth >= recursion_limit {\n                             let obligation = Obligation::with_depth(\n                                 self.cause.clone(),"}, {"sha": "51493f26194970403ec4acd389b183d57f9739d5", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -997,7 +997,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     {\n         // Watch out for overflow. This intentionally bypasses (and does\n         // not update) the cache.\n-        let recursion_limit = self.infcx.tcx.sess.recursion_limit.get();\n+        let recursion_limit = *self.infcx.tcx.sess.recursion_limit.get();\n         if stack.obligation.recursion_depth >= recursion_limit {\n             self.infcx().report_overflow_error(&stack.obligation, true);\n         }"}, {"sha": "91c616224071eac58910e3290e14c5a682214d73", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -898,7 +898,7 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     let (param_env, ty) = query.into_parts();\n \n-    let rec_limit = tcx.sess.recursion_limit.get();\n+    let rec_limit = *tcx.sess.recursion_limit.get();\n     let depth = tcx.layout_depth.get();\n     if depth > rec_limit {\n         tcx.sess.fatal("}, {"sha": "8372cbdd5df8b31ba724987bd59fd3864adf4ba8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -783,7 +783,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n         let features = sess.features_untracked();\n         let cfg = syntax::ext::expand::ExpansionConfig {\n             features: Some(&features),\n-            recursion_limit: sess.recursion_limit.get(),\n+            recursion_limit: *sess.recursion_limit.get(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n             should_test: sess.opts.test,\n             ..syntax::ext::expand::ExpansionConfig::default(crate_name.to_string())"}, {"sha": "1189da1092998c5d774e9d27a073cb35eedc945b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -457,7 +457,7 @@ fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Code that needs to instantiate the same function recursively\n     // more than the recursion limit is assumed to be causing an\n     // infinite expansion.\n-    if recursion_depth > tcx.sess.recursion_limit.get() {\n+    if recursion_depth > *tcx.sess.recursion_limit.get() {\n         let error = format!(\"reached the recursion limit while instantiating `{}`\",\n                             instance);\n         if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n@@ -484,7 +484,7 @@ fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // which means that rustc basically hangs.\n     //\n     // Bail out in these cases to avoid that bad user experience.\n-    let type_length_limit = tcx.sess.type_length_limit.get();\n+    let type_length_limit = *tcx.sess.type_length_limit.get();\n     if type_length > type_length_limit {\n         // The instance name is already known to be too long for rustc. Use\n         // `{:.64}` to avoid blasting the user's terminal with thousands of"}, {"sha": "5f4daf0d568f82c397f3c8aaaa4f63fc3d52472b", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -153,7 +153,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n         span, for_ty, depth, ty\n     );\n \n-    if depth >= tcx.sess.recursion_limit.get() {\n+    if depth >= *tcx.sess.recursion_limit.get() {\n         return Ok(DtorckConstraint {\n             outlives: vec![],\n             dtorck_types: vec![],"}, {"sha": "a87058d1fa593a8171c3ce44cbdd089c7b7d26c0", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=cf3b7909fa8f1774fc9eac854ef9d9a5b91a1d3f", "patch": "@@ -56,9 +56,9 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n             return Some((self.cur_ty, 0));\n         }\n \n-        if self.steps.len() >= tcx.sess.recursion_limit.get() {\n+        if self.steps.len() >= *tcx.sess.recursion_limit.get() {\n             // We've reached the recursion limit, error gracefully.\n-            let suggested_limit = tcx.sess.recursion_limit.get() * 2;\n+            let suggested_limit = *tcx.sess.recursion_limit.get() * 2;\n             let msg = format!(\"reached the recursion limit while auto-dereferencing {:?}\",\n                               self.cur_ty);\n             let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg.clone());"}]}