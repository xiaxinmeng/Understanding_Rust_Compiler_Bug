{"sha": "2143e48e36e48223e00fffed71acadaf5330f61a", "node_id": "C_kwDOAAsO6NoAKDIxNDNlNDhlMzZlNDgyMjNlMDBmZmZlZDcxYWNhZGFmNTMzMGY2MWE", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-26T14:02:01Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-30T19:13:40Z"}, "message": "Rustdoc-Json: Add tests for dyn and HRTBs", "tree": {"sha": "71c4ad2648b72e69a96d6953b9f0e31285355af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c4ad2648b72e69a96d6953b9f0e31285355af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2143e48e36e48223e00fffed71acadaf5330f61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2143e48e36e48223e00fffed71acadaf5330f61a", "html_url": "https://github.com/rust-lang/rust/commit/2143e48e36e48223e00fffed71acadaf5330f61a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2143e48e36e48223e00fffed71acadaf5330f61a/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95729dcc733edd9f639855081cae8e24bc44fb30", "url": "https://api.github.com/repos/rust-lang/rust/commits/95729dcc733edd9f639855081cae8e24bc44fb30", "html_url": "https://github.com/rust-lang/rust/commit/95729dcc733edd9f639855081cae8e24bc44fb30"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "79eeb996dcc5d95e359e85c2b06e3b9b5c20a877", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2143e48e36e48223e00fffed71acadaf5330f61a/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143e48e36e48223e00fffed71acadaf5330f61a/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=2143e48e36e48223e00fffed71acadaf5330f61a", "patch": "@@ -1,8 +1,10 @@\n // ignore-tidy-linelength\n \n-// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items\" 1\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 2\n // @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n-// @is - \"$.index[*][?(@.name=='dyn')].inner.items[0]\" $sync_int_gen\n+// @set ref_fn = - \"$.index[*][?(@.name=='RefFn')].id\"\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n \n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n@@ -19,3 +21,16 @@\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n+\n+// @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"resolved_path\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;"}, {"sha": "55bc043ad29cd144d4cfe7e5471c68de27eceb61", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2143e48e36e48223e00fffed71acadaf5330f61a/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2143e48e36e48223e00fffed71acadaf5330f61a/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=2143e48e36e48223e00fffed71acadaf5330f61a", "patch": "@@ -0,0 +1,23 @@\n+\n+// @has hrtb.json\n+\n+// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\",\"kind\": \"generic\"}'\n+// @is - \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+pub fn genfn<F>(f: F)\n+where\n+    for<'a, 'b> F: Fn(&'a i32, &'b i32),\n+{\n+    let zero = 0;\n+    f(&zero, &zero);\n+}\n+\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"resolved_path\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.name\" '\"Fn\"'\n+pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n+    let zero = 0;\n+    f(&zero, &zero);\n+}"}]}