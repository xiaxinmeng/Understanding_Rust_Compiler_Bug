{"sha": "4de31816bfd81501131d90c72b6ac6e38e0770a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTMxODE2YmZkODE1MDExMzFkOTBjNzJiNmFjNmUzOGUwNzcwYTE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T00:47:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T00:47:38Z"}, "message": "Rollup merge of #81491 - jryans:rustdoc-deref-ice-81395, r=GuillaumeGomez\n\nBalance sidebar `Deref` cycle check with main content\n\nThe `Deref` cycle checks added as part of #80653 were \"unbalanced\" in the sense\nthat the main content code path checks for cycles _before_ descending, while the\nsidebar checks _after_. Checking _before_ is correct, so this changes the\nsidebar path to match the main content path.\n\nFixes #81395\n\nr? ```@GuillaumeGomez```", "tree": {"sha": "60306b45f776ba7f181e4ffbcaf779f5aa955d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60306b45f776ba7f181e4ffbcaf779f5aa955d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de31816bfd81501131d90c72b6ac6e38e0770a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFf4qCRBK7hj4Ov3rIwAAdHIIAIbXCLO2sIDygxkawqWgFG9q\nzelaf4mkNyGLldGwGHxTz7jffRensONOSHPSghUw9RtdrOtIDa33R0R7b5lx+Zc8\nPndRmQEXdtL8HzhR9aCx42iwjS1A9e8GKBpy+8GaZr/6LLNPBm6Sey7dlXbWZs2k\nl8godvyI8qwzG+urArdWKpaIXVFJ5mhm0VNGMrMuKbCbkUYklgLEehxuRrY3O+Ta\nYh95sj9rpxQuLJEvJTnAR8xungC2AUlA6SSBN//aVn5KBiSOqGze54+u/K1jbX/3\nNBq8o9UCBVhD5k5ZBX0oI1USIEfCFhkgmo5A1CO9u4ucNE4Z8RyX80MQRsMgEM4=\n=KZl+\n-----END PGP SIGNATURE-----\n", "payload": "tree 60306b45f776ba7f181e4ffbcaf779f5aa955d2a\nparent fd868d02d150ce5cd73fbe7f3aee06ca14333ac8\nparent 7e3217845dc5dea331b26efb2bf51b60afae2082\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612054058 +0100\ncommitter GitHub <noreply@github.com> 1612054058 +0100\n\nRollup merge of #81491 - jryans:rustdoc-deref-ice-81395, r=GuillaumeGomez\n\nBalance sidebar `Deref` cycle check with main content\n\nThe `Deref` cycle checks added as part of #80653 were \"unbalanced\" in the sense\nthat the main content code path checks for cycles _before_ descending, while the\nsidebar checks _after_. Checking _before_ is correct, so this changes the\nsidebar path to match the main content path.\n\nFixes #81395\n\nr? ```@GuillaumeGomez```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de31816bfd81501131d90c72b6ac6e38e0770a1", "html_url": "https://github.com/rust-lang/rust/commit/4de31816bfd81501131d90c72b6ac6e38e0770a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de31816bfd81501131d90c72b6ac6e38e0770a1/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd868d02d150ce5cd73fbe7f3aee06ca14333ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd868d02d150ce5cd73fbe7f3aee06ca14333ac8", "html_url": "https://github.com/rust-lang/rust/commit/fd868d02d150ce5cd73fbe7f3aee06ca14333ac8"}, {"sha": "7e3217845dc5dea331b26efb2bf51b60afae2082", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3217845dc5dea331b26efb2bf51b60afae2082", "html_url": "https://github.com/rust-lang/rust/commit/7e3217845dc5dea331b26efb2bf51b60afae2082"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "6909ab870db61a82556b15aebaf0ef2954a34580", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4de31816bfd81501131d90c72b6ac6e38e0770a1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31816bfd81501131d90c72b6ac6e38e0770a1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4de31816bfd81501131d90c72b6ac6e38e0770a1", "patch": "@@ -3510,6 +3510,7 @@ fn render_assoc_items(\n                     \"deref-methods-{:#}\",\n                     type_.print(cx.cache())\n                 )));\n+                debug!(\"Adding {} to deref id map\", type_.print(cx.cache()));\n                 cx.deref_id_map\n                     .borrow_mut()\n                     .insert(type_.def_id_full(cx.cache()).unwrap(), id.clone());\n@@ -3626,6 +3627,7 @@ fn render_deref_methods(\n             _ => None,\n         })\n         .expect(\"Expected associated type binding\");\n+    debug!(\"Render deref methods for {:#?}, target {:#?}\", impl_.inner_impl().for_, target);\n     let what =\n         AssocItemRender::DerefFor { trait_: deref_type, type_: real_target, deref_mut_: deref_mut };\n     if let Some(did) = target.def_id_full(cx.cache()) {\n@@ -4416,6 +4418,15 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n         })\n     {\n         debug!(\"found target, real_target: {:?} {:?}\", target, real_target);\n+        if let Some(did) = target.def_id_full(cx.cache()) {\n+            if let Some(type_did) = impl_.inner_impl().for_.def_id_full(cx.cache()) {\n+                // `impl Deref<Target = S> for S`\n+                if did == type_did {\n+                    // Avoid infinite cycles\n+                    return;\n+                }\n+            }\n+        }\n         let deref_mut = v\n             .iter()\n             .filter(|i| i.inner_impl().trait_.is_some())\n@@ -4464,13 +4475,6 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n                     .filter(|i| i.inner_impl().trait_.is_some())\n                     .find(|i| i.inner_impl().trait_.def_id_full(cx.cache()) == c.deref_trait_did)\n                 {\n-                    if let Some(type_did) = impl_.inner_impl().for_.def_id_full(cx.cache()) {\n-                        // `impl Deref<Target = S> for S`\n-                        if target_did == type_did {\n-                            // Avoid infinite cycles\n-                            return;\n-                        }\n-                    }\n                     sidebar_deref_methods(cx, out, target_deref_impl, target_impls);\n                 }\n             }"}, {"sha": "bc64beb1b939d9207588c6a9f1edca81d1ac8b7e", "filename": "src/test/rustdoc-ui/deref-generic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4de31816bfd81501131d90c72b6ac6e38e0770a1/src%2Ftest%2Frustdoc-ui%2Fderef-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de31816bfd81501131d90c72b6ac6e38e0770a1/src%2Ftest%2Frustdoc-ui%2Fderef-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fderef-generic.rs?ref=4de31816bfd81501131d90c72b6ac6e38e0770a1", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// #81395: Fix ICE when recursing into Deref target only differing in type args\n+\n+pub struct Generic<T>(T);\n+\n+impl<'a> std::ops::Deref for Generic<&'a mut ()> {\n+    type Target = Generic<&'a ()>;\n+    fn deref(&self) -> &Self::Target {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<'a> Generic<&'a ()> {\n+    pub fn some_method(&self) {}\n+}"}]}