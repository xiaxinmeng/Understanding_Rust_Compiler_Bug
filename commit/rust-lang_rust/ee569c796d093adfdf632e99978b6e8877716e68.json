{"sha": "ee569c796d093adfdf632e99978b6e8877716e68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTY5Yzc5NmQwOTNhZGZkZjYzMmU5OTk3OGI2ZTg4Nzc3MTZlNjg=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-10-23T14:28:53Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-03T10:41:55Z"}, "message": "Rename `BoundTy` field `level` -> `index`", "tree": {"sha": "ff71a48a7406417c44130820551f55029bc1209a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff71a48a7406417c44130820551f55029bc1209a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee569c796d093adfdf632e99978b6e8877716e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee569c796d093adfdf632e99978b6e8877716e68", "html_url": "https://github.com/rust-lang/rust/commit/ee569c796d093adfdf632e99978b6e8877716e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee569c796d093adfdf632e99978b6e8877716e68/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dd303aa894e65219117b831f5c6284ec1077eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd303aa894e65219117b831f5c6284ec1077eae", "html_url": "https://github.com/rust-lang/rust/commit/3dd303aa894e65219117b831f5c6284ec1077eae"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "6c1070f74e0d59c0be708edf15f4a99de06b539c", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=ee569c796d093adfdf632e99978b6e8877716e68", "patch": "@@ -117,7 +117,7 @@ impl FlagComputation {\n \n             &ty::Bound(bound_ty) => {\n                 self.add_flags(TypeFlags::HAS_CANONICAL_VARS);\n-                self.add_binder(bound_ty.level);\n+                self.add_binder(bound_ty.index);\n             }\n \n             &ty::Infer(infer) => {"}, {"sha": "87ff5d2a36d89c637c13f55daf5a399f62782512", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=ee569c796d093adfdf632e99978b6e8877716e68", "patch": "@@ -655,11 +655,11 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Shifter<'a, 'gcx, 'tcx> {\n     fn fold_ty(&mut self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n         match ty.sty {\n             ty::Bound(bound_ty) => {\n-                if self.amount == 0 || bound_ty.level < self.current_index {\n+                if self.amount == 0 || bound_ty.index < self.current_index {\n                     ty\n                 } else {\n                     let shifted = ty::BoundTy {\n-                        level: bound_ty.level.shifted_in(self.amount),\n+                        index: bound_ty.index.shifted_in(self.amount),\n                         var: bound_ty.var,\n                         kind: bound_ty.kind,\n                     };"}, {"sha": "9c20d9a238e93c285f9450746d31d96c1c71d542", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ee569c796d093adfdf632e99978b6e8877716e68", "patch": "@@ -1230,7 +1230,7 @@ newtype_index! {\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct BoundTy {\n-    pub level: DebruijnIndex,\n+    pub index: DebruijnIndex,\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n@@ -1241,13 +1241,13 @@ pub enum BoundTyKind {\n     Param(InternedString),\n }\n \n-impl_stable_hash_for!(struct BoundTy { level, var, kind });\n+impl_stable_hash_for!(struct BoundTy { index, var, kind });\n impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n \n impl BoundTy {\n-    pub fn new(level: DebruijnIndex, var: BoundVar) -> Self {\n+    pub fn new(index: DebruijnIndex, var: BoundVar) -> Self {\n         BoundTy {\n-            level,\n+            index,\n             var,\n             kind: BoundTyKind::Anon,\n         }"}, {"sha": "222bbc67b0d52eba679f69a59553908c20d53c2f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee569c796d093adfdf632e99978b6e8877716e68/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ee569c796d093adfdf632e99978b6e8877716e68", "patch": "@@ -1120,10 +1120,10 @@ define_print! {\n                 Bound(bound_ty) => {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Anon => {\n-                            if bound_ty.level == ty::INNERMOST {\n+                            if bound_ty.index == ty::INNERMOST {\n                                 write!(f, \"?{}\", bound_ty.var.index())\n                             } else {\n-                                write!(f, \"?{}_{}\", bound_ty.level.index(), bound_ty.var.index())\n+                                write!(f, \"?{}_{}\", bound_ty.index.index(), bound_ty.var.index())\n                             }\n                         }\n "}]}