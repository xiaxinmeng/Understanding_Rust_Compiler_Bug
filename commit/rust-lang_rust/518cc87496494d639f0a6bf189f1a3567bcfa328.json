{"sha": "518cc87496494d639f0a6bf189f1a3567bcfa328", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOGNjODc0OTY0OTRkNjM5ZjBhNmJmMTg5ZjFhMzU2N2JjZmEzMjg=", "commit": {"author": {"name": "Zac Winter", "email": "plasticcaz@gmail.com", "date": "2018-09-06T13:54:54Z"}, "committer": {"name": "Zac Winter", "email": "plasticcaz@gmail.com", "date": "2018-09-06T13:57:04Z"}, "message": "Moved TokenSet into it's own file.", "tree": {"sha": "ac9a756c5cfc83fed671f57e20a2f05d8b00e539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac9a756c5cfc83fed671f57e20a2f05d8b00e539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/518cc87496494d639f0a6bf189f1a3567bcfa328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/518cc87496494d639f0a6bf189f1a3567bcfa328", "html_url": "https://github.com/rust-lang/rust/commit/518cc87496494d639f0a6bf189f1a3567bcfa328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/518cc87496494d639f0a6bf189f1a3567bcfa328/comments", "author": {"login": "Plasticcaz", "id": 10754310, "node_id": "MDQ6VXNlcjEwNzU0MzEw", "avatar_url": "https://avatars.githubusercontent.com/u/10754310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Plasticcaz", "html_url": "https://github.com/Plasticcaz", "followers_url": "https://api.github.com/users/Plasticcaz/followers", "following_url": "https://api.github.com/users/Plasticcaz/following{/other_user}", "gists_url": "https://api.github.com/users/Plasticcaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Plasticcaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Plasticcaz/subscriptions", "organizations_url": "https://api.github.com/users/Plasticcaz/orgs", "repos_url": "https://api.github.com/users/Plasticcaz/repos", "events_url": "https://api.github.com/users/Plasticcaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Plasticcaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Plasticcaz", "id": 10754310, "node_id": "MDQ6VXNlcjEwNzU0MzEw", "avatar_url": "https://avatars.githubusercontent.com/u/10754310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Plasticcaz", "html_url": "https://github.com/Plasticcaz", "followers_url": "https://api.github.com/users/Plasticcaz/followers", "following_url": "https://api.github.com/users/Plasticcaz/following{/other_user}", "gists_url": "https://api.github.com/users/Plasticcaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Plasticcaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Plasticcaz/subscriptions", "organizations_url": "https://api.github.com/users/Plasticcaz/orgs", "repos_url": "https://api.github.com/users/Plasticcaz/repos", "events_url": "https://api.github.com/users/Plasticcaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Plasticcaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751562d2f77a7bc3eeeffbf8e53c9f3515fa9653", "url": "https://api.github.com/repos/rust-lang/rust/commits/751562d2f77a7bc3eeeffbf8e53c9f3515fa9653", "html_url": "https://github.com/rust-lang/rust/commit/751562d2f77a7bc3eeeffbf8e53c9f3515fa9653"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "e19805b9d337d095bc0c7907717150eee0a2e774", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=518cc87496494d639f0a6bf189f1a3567bcfa328", "patch": "@@ -32,7 +32,8 @@ mod type_params;\n mod types;\n \n use {\n-    parser_api::{Marker, CompletedMarker, Parser, TokenSet},\n+    token_set::TokenSet,\n+    parser_api::{Marker, CompletedMarker, Parser},\n     SyntaxKind::{self, *},\n };\n pub(crate) use self::{"}, {"sha": "7a30f5d3870a55671809b1fc2176375edf5b2ff7", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=518cc87496494d639f0a6bf189f1a3567bcfa328", "patch": "@@ -31,6 +31,7 @@ pub mod algo;\n pub mod ast;\n mod lexer;\n #[macro_use]\n+mod token_set;\n mod parser_api;\n mod grammar;\n mod parser_impl;"}, {"sha": "c4753140ef6ddd35b9437285d963586fb0eff3df", "filename": "crates/libsyntax2/src/parser_api.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs?ref=518cc87496494d639f0a6bf189f1a3567bcfa328", "patch": "@@ -1,45 +1,10 @@\n use {\n+    token_set::TokenSet,\n     parser_impl::ParserImpl,\n     SyntaxKind::{self, ERROR},\n     drop_bomb::DropBomb,\n };\n \n-#[derive(Clone, Copy)]\n-pub(crate) struct TokenSet(pub(crate) u128);\n-\n-fn mask(kind: SyntaxKind) -> u128 {\n-    1u128 << (kind as usize)\n-}\n-\n-impl TokenSet {\n-    pub const EMPTY: TokenSet = TokenSet(0);\n-\n-    pub fn contains(&self, kind: SyntaxKind) -> bool {\n-        self.0 & mask(kind) != 0\n-    }\n-}\n-\n-#[macro_export]\n-macro_rules! token_set {\n-    ($($t:ident),*) => { TokenSet($(1u128 << ($t as usize))|*) };\n-    ($($t:ident),* ,) => { token_set!($($t),*) };\n-}\n-\n-#[macro_export]\n-macro_rules! token_set_union {\n-    ($($ts:expr),*) => { TokenSet($($ts.0)|*) };\n-    ($($ts:expr),* ,) => { token_set_union!($($ts),*) };\n-}\n-\n-#[test]\n-fn token_set_works_for_tokens() {\n-    use SyntaxKind::*;\n-    let ts = token_set! { EOF, SHEBANG };\n-    assert!(ts.contains(EOF));\n-    assert!(ts.contains(SHEBANG));\n-    assert!(!ts.contains(PLUS));\n-}\n-\n /// `Parser` struct provides the low-level API for\n /// navigating through the stream of tokens and\n /// constructing the parse tree. The actual parsing"}, {"sha": "c83fba81bfa0c2ab7db0a73aa8bcc780ee0e9646", "filename": "crates/libsyntax2/src/token_set.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518cc87496494d639f0a6bf189f1a3567bcfa328/crates%2Flibsyntax2%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Ftoken_set.rs?ref=518cc87496494d639f0a6bf189f1a3567bcfa328", "patch": "@@ -0,0 +1,37 @@\n+use SyntaxKind;\n+\n+#[derive(Clone, Copy)]\n+pub(crate) struct TokenSet(pub(crate) u128);\n+\n+fn mask(kind: SyntaxKind) -> u128 {\n+    1u128 << (kind as usize)\n+}\n+\n+impl TokenSet {\n+    pub const EMPTY: TokenSet = TokenSet(0);\n+\n+    pub fn contains(&self, kind: SyntaxKind) -> bool {\n+        self.0 & mask(kind) != 0\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! token_set {\n+    ($($t:ident),*) => { TokenSet($(1u128 << ($t as usize))|*) };\n+    ($($t:ident),* ,) => { token_set!($($t),*) };\n+}\n+\n+#[macro_export]\n+macro_rules! token_set_union {\n+    ($($ts:expr),*) => { TokenSet($($ts.0)|*) };\n+    ($($ts:expr),* ,) => { token_set_union!($($ts),*) };\n+}\n+\n+#[test]\n+fn token_set_works_for_tokens() {\n+    use SyntaxKind::*;\n+    let ts = token_set! { EOF, SHEBANG };\n+    assert!(ts.contains(EOF));\n+    assert!(ts.contains(SHEBANG));\n+    assert!(!ts.contains(PLUS));\n+}"}]}