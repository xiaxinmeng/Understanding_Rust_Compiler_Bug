{"sha": "a2467b945c43eac05e46ac55d990aa9fb89ed581", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDY3Yjk0NWM0M2VhYzA1ZTQ2YWM1NWQ5OTBhYTlmYjg5ZWQ1ODE=", "commit": {"author": {"name": "Dzmitry Malyshau", "email": "kvarkus@gmail.com", "date": "2014-07-19T21:33:17Z"}, "committer": {"name": "Dzmitry Malyshau", "email": "kvarkus@gmail.com", "date": "2014-07-19T21:33:17Z"}, "message": "Fixed lifetimes on syntax deriving structs, implemented Clone", "tree": {"sha": "67d0d691267468b6550e71c8fbc90e5ab56e3379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d0d691267468b6550e71c8fbc90e5ab56e3379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2467b945c43eac05e46ac55d990aa9fb89ed581", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2467b945c43eac05e46ac55d990aa9fb89ed581", "html_url": "https://github.com/rust-lang/rust/commit/a2467b945c43eac05e46ac55d990aa9fb89ed581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2467b945c43eac05e46ac55d990aa9fb89ed581/comments", "author": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a6e2b41421928206cc71be27da1239b4598ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a6e2b41421928206cc71be27da1239b4598ed1", "html_url": "https://github.com/rust-lang/rust/commit/e0a6e2b41421928206cc71be27da1239b4598ed1"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "5d8b56606986b08c62e359f722dcf8a0fc0f8a3f", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2467b945c43eac05e46ac55d990aa9fb89ed581/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2467b945c43eac05e46ac55d990aa9fb89ed581/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=a2467b945c43eac05e46ac55d990aa9fb89ed581", "patch": "@@ -24,13 +24,15 @@ use parse::token::special_idents;\n use std::gc::Gc;\n \n /// The types of pointers\n+#[deriving(Clone)]\n pub enum PtrTy<'a> {\n     /// &'lifetime mut\n     Borrowed(Option<&'a str>, ast::Mutability),\n }\n \n /// A path, e.g. `::std::option::Option::<int>` (global). Has support\n /// for type parameters and a lifetime.\n+#[deriving(Clone)]\n pub struct Path<'a> {\n     pub path: Vec<&'a str> ,\n     pub lifetime: Option<&'a str>,\n@@ -81,6 +83,7 @@ impl<'a> Path<'a> {\n }\n \n /// A type. Supports pointers (except for *), Self, and literals\n+#[deriving(Clone)]\n pub enum Ty<'a> {\n     Self,\n     /// &/Box/ Ty\n@@ -107,7 +110,7 @@ pub fn borrowed_self<'r>() -> Ty<'r> {\n     borrowed(box Self)\n }\n \n-pub fn nil_ty() -> Ty<'static> {\n+pub fn nil_ty<'r>() -> Ty<'r> {\n     Tuple(Vec::new())\n }\n \n@@ -205,13 +208,14 @@ fn mk_generics(lifetimes: Vec<ast::Lifetime>, ty_params: Vec<ast::TyParam> ) ->\n }\n \n /// Lifetimes and bounds on type parameters\n+#[deriving(Clone)]\n pub struct LifetimeBounds<'a> {\n     pub lifetimes: Vec<&'a str>,\n     pub bounds: Vec<(&'a str, Option<ast::TyParamBound>, Vec<Path<'a>>)>,\n }\n \n impl<'a> LifetimeBounds<'a> {\n-    pub fn empty() -> LifetimeBounds<'static> {\n+    pub fn empty() -> LifetimeBounds<'a> {\n         LifetimeBounds {\n             lifetimes: Vec::new(), bounds: Vec::new()\n         }"}]}