{"sha": "86812902402758bb2ffa2ff594fcfd3546bab6aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ODEyOTAyNDAyNzU4YmIyZmZhMmZmNTk0ZmNmZDM1NDZiYWI2YWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-06T11:21:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-06T11:31:10Z"}, "message": "compiletest: account for `ui` reference files when deciding to skip", "tree": {"sha": "30ef857ea62cb25dfcb590a663dba6bbe7269e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ef857ea62cb25dfcb590a663dba6bbe7269e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86812902402758bb2ffa2ff594fcfd3546bab6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86812902402758bb2ffa2ff594fcfd3546bab6aa", "html_url": "https://github.com/rust-lang/rust/commit/86812902402758bb2ffa2ff594fcfd3546bab6aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86812902402758bb2ffa2ff594fcfd3546bab6aa/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cafe46c2f82d8c465dce0276197a630cb91127", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cafe46c2f82d8c465dce0276197a630cb91127", "html_url": "https://github.com/rust-lang/rust/commit/a4cafe46c2f82d8c465dce0276197a630cb91127"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "48c3c5c819862a406d129363d1a23303a288dd55", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=86812902402758bb2ffa2ff594fcfd3546bab6aa", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::str::FromStr;\n use std::path::PathBuf;\n \n-use test::ColorConfig;\n+use test::{ColorConfig, TestPaths};\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n@@ -221,3 +221,17 @@ pub struct Config {\n     pub llvm_cxxflags: String,\n     pub nodejs: Option<String>,\n }\n+\n+/// Used by `ui` tests to generate things like `foo.stderr` from `foo.rs`.\n+pub fn expected_output_path(testpaths: &TestPaths, revision: Option<&str>, kind: &str) -> PathBuf {\n+    assert!(UI_EXTENSIONS.contains(&kind));\n+    let extension = match revision {\n+        Some(r) => format!(\"{}.{}\", r, kind),\n+        None => kind.to_string(),\n+    };\n+    testpaths.file.with_extension(extension)\n+}\n+\n+pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT];\n+pub const UI_STDERR: &str = \"stderr\";\n+pub const UI_STDOUT: &str = \"stdout\";"}, {"sha": "e7851c3632761c67c3510071dc82fb52c5dd5d72", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=86812902402758bb2ffa2ff594fcfd3546bab6aa", "patch": "@@ -26,6 +26,7 @@ pub struct EarlyProps {\n     pub ignore: bool,\n     pub should_fail: bool,\n     pub aux: Vec<String>,\n+    pub revisions: Vec<String>,\n }\n \n impl EarlyProps {\n@@ -34,6 +35,7 @@ impl EarlyProps {\n             ignore: false,\n             should_fail: false,\n             aux: Vec::new(),\n+            revisions: vec![],\n         };\n \n         iter_header(testfile,\n@@ -50,6 +52,10 @@ impl EarlyProps {\n                 props.aux.push(s);\n             }\n \n+            if let Some(r) = config.parse_revisions(ln) {\n+                props.revisions.extend(r);\n+            }\n+\n             props.should_fail = props.should_fail || config.parse_name_directive(ln, \"should-fail\");\n         });\n "}, {"sha": "fac3b71f82cc444c5bcdd78312549dea3b047f4e", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=86812902402758bb2ffa2ff594fcfd3546bab6aa", "patch": "@@ -34,6 +34,7 @@ use filetime::FileTime;\n use getopts::Options;\n use common::Config;\n use common::{DebugInfoGdb, DebugInfoLldb, Mode, Pretty};\n+use common::{expected_output_path, UI_EXTENSIONS};\n use test::{ColorConfig, TestPaths};\n use util::logv;\n \n@@ -673,6 +674,20 @@ fn up_to_date(config: &Config, testpaths: &TestPaths, props: &EarlyProps) -> boo\n         inputs.push(mtime(&rustdoc_path));\n         inputs.push(mtime(&rust_src_dir.join(\"src/etc/htmldocck.py\")));\n     }\n+\n+    // UI test files.\n+    for extension in UI_EXTENSIONS {\n+        for revision in &props.revisions {\n+            let path = &expected_output_path(testpaths, Some(revision), extension);\n+            inputs.push(mtime(path));\n+        }\n+\n+        if props.revisions.is_empty() {\n+            let path = &expected_output_path(testpaths, None, extension);\n+            inputs.push(mtime(path));\n+        }\n+    }\n+\n     inputs.iter().any(|input| *input > stamp)\n }\n "}, {"sha": "4b430f0cd70d5bfa2511a80a8ae0074e5936d93f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86812902402758bb2ffa2ff594fcfd3546bab6aa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=86812902402758bb2ffa2ff594fcfd3546bab6aa", "patch": "@@ -12,6 +12,7 @@ use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use common::{Incremental, MirOpt, RunMake, Ui};\n+use common::{expected_output_path, UI_STDERR, UI_STDOUT};\n use diff;\n use errors::{self, Error, ErrorKind};\n use filetime::FileTime;\n@@ -2387,10 +2388,10 @@ impl<'test> TestCx<'test> {\n \n         let proc_res = self.compile_test();\n \n-        let expected_stderr_path = self.expected_output_path(\"stderr\");\n+        let expected_stderr_path = self.expected_output_path(UI_STDERR);\n         let expected_stderr = self.load_expected_output(&expected_stderr_path);\n \n-        let expected_stdout_path = self.expected_output_path(\"stdout\");\n+        let expected_stdout_path = self.expected_output_path(UI_STDOUT);\n         let expected_stdout = self.load_expected_output(&expected_stdout_path);\n \n         let normalized_stdout =\n@@ -2672,11 +2673,7 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn expected_output_path(&self, kind: &str) -> PathBuf {\n-        let extension = match self.revision {\n-            Some(r) => format!(\"{}.{}\", r, kind),\n-            None => kind.to_string(),\n-        };\n-        self.testpaths.file.with_extension(extension)\n+        expected_output_path(&self.testpaths, self.revision, kind)\n     }\n \n     fn load_expected_output(&self, path: &Path) -> String {"}]}