{"sha": "ed74ac169e3e79ff4ce59329a06223e23f2b99b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNzRhYzE2OWUzZTc5ZmY0Y2U1OTMyOWEwNjIyM2UyM2YyYjk5YjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-16T01:26:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-16T01:54:02Z"}, "message": "core::rt: Narrow down the unsafety of the thread-local scheduler\n\nOnly when borrowing the I/O implementation do we need unsafety", "tree": {"sha": "1726a7bdd5a99ee216be66e194563574a62d5a35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1726a7bdd5a99ee216be66e194563574a62d5a35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed74ac169e3e79ff4ce59329a06223e23f2b99b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed74ac169e3e79ff4ce59329a06223e23f2b99b6", "html_url": "https://github.com/rust-lang/rust/commit/ed74ac169e3e79ff4ce59329a06223e23f2b99b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed74ac169e3e79ff4ce59329a06223e23f2b99b6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68583a25a0b31bc113cf1f4ec479339cbf876e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68583a25a0b31bc113cf1f4ec479339cbf876e4d", "html_url": "https://github.com/rust-lang/rust/commit/68583a25a0b31bc113cf1f4ec479339cbf876e4d"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "8fb8e2a1d102af96edf72bb58f0e481106da80d7", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ed74ac169e3e79ff4ce59329a06223e23f2b99b6/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed74ac169e3e79ff4ce59329a06223e23f2b99b6/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=ed74ac169e3e79ff4ce59329a06223e23f2b99b6", "patch": "@@ -14,7 +14,7 @@ use cast::transmute;\n \n use super::work_queue::WorkQueue;\n use super::stack::{StackPool, StackSegment};\n-use super::rtio::{EventLoop, EventLoopObject};\n+use super::rtio::{EventLoop, EventLoopObject, IoFactoryObject};\n use super::context::Context;\n \n #[cfg(test)] use super::uvio::UvEventLoop;\n@@ -96,12 +96,12 @@ pub impl Scheduler {\n         // Give ownership of the scheduler (self) to the thread\n         local::put(self);\n \n-        let scheduler = Scheduler::unsafe_local_borrow();\n+        let scheduler = unsafe { local::borrow() };\n         fn run_scheduler_once() {\n-            let scheduler = Scheduler::local_take();\n+            let scheduler = Scheduler::take_local();\n             if scheduler.resume_task_from_queue() {\n                 // Ok, a task ran. Nice! We'll do it again later\n-                do Scheduler::local_borrow |scheduler| {\n+                do Scheduler::borrow_local |scheduler| {\n                     scheduler.event_loop.callback(run_scheduler_once);\n                 }\n             }\n@@ -113,21 +113,27 @@ pub impl Scheduler {\n         return local::take();\n     }\n \n-    /// Get a mutable pointer to the thread-local scheduler.\n+    /// Get a mutable pointer to the thread-local I/O\n     /// # Safety Note\n     /// This allows other mutable aliases to the scheduler, both in the current\n     /// execution context and other execution contexts.\n-    fn unsafe_local_borrow() -> &mut Scheduler {\n-        unsafe { local::borrow() }\n+    unsafe fn borrow_local_io() -> &mut IoFactoryObject {\n+        unsafe {\n+            let io = local::borrow().event_loop.io().unwrap();\n+            transmute::<&mut IoFactoryObject, &mut IoFactoryObject>(io)\n+        }\n     }\n \n-    fn local_borrow(f: &fn(&mut Scheduler)) {\n+    /// Borrow the thread-local scheduler from thread-local storage.\n+    /// While the scheduler is borrowed it is not available in TLS.\n+    fn borrow_local(f: &fn(&mut Scheduler)) {\n         let mut sched = local::take();\n         f(sched);\n         local::put(sched);\n     }\n \n-    fn local_take() -> ~Scheduler {\n+    /// Take ownership of the scheduler from thread local storage\n+    fn take_local() -> ~Scheduler {\n         local::take()\n     }\n \n@@ -163,14 +169,14 @@ pub impl Scheduler {\n         local::put(self);\n \n         // Take pointers to both the task and scheduler's saved registers.\n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         let (sched_context, _, next_task_context) = sched.get_contexts();\n         let next_task_context = next_task_context.unwrap();\n         // Context switch to the task, restoring it's registers\n         // and saving the scheduler's\n         Context::swap(sched_context, next_task_context);\n \n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         // The running task should have passed ownership elsewhere\n         assert!(sched.current_task.is_none());\n \n@@ -194,7 +200,7 @@ pub impl Scheduler {\n \n         local::put(self);\n \n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         let (sched_context, last_task_context, _) = sched.get_contexts();\n         let last_task_context = last_task_context.unwrap();\n         Context::swap(last_task_context, sched_context);\n@@ -225,13 +231,13 @@ pub impl Scheduler {\n \n         local::put(self);\n \n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         let (sched_context, last_task_context, _) = sched.get_contexts();\n         let last_task_context = last_task_context.unwrap();\n         Context::swap(last_task_context, sched_context);\n \n         // We could be executing in a different thread now\n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         sched.run_cleanup_job();\n     }\n \n@@ -250,14 +256,14 @@ pub impl Scheduler {\n \n         local::put(self);\n \n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         let (_, last_task_context, next_task_context) = sched.get_contexts();\n         let last_task_context = last_task_context.unwrap();\n         let next_task_context = next_task_context.unwrap();\n         Context::swap(last_task_context, next_task_context);\n \n         // We could be executing in a different thread now\n-        let sched = Scheduler::unsafe_local_borrow();\n+        let sched = unsafe { local::borrow() };\n         sched.run_cleanup_job();\n     }\n \n@@ -355,12 +361,12 @@ pub impl Task {\n             // This is the first code to execute after the initial\n             // context switch to the task. The previous context may\n             // have asked us to do some cleanup.\n-            let sched = Scheduler::unsafe_local_borrow();\n+            let sched = unsafe { local::borrow() };\n             sched.run_cleanup_job();\n \n             start();\n \n-            let sched = Scheduler::local_take();\n+            let sched = Scheduler::take_local();\n             sched.terminate_current_task();\n         };\n         return wrapper;\n@@ -420,7 +426,7 @@ fn test_swap_tasks() {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task1 = ~do Task::new(&mut sched.stack_pool) {\n             unsafe { *count_ptr = *count_ptr + 1; }\n-            let mut sched = Scheduler::local_take();\n+            let mut sched = Scheduler::take_local();\n             let task2 = ~do Task::new(&mut sched.stack_pool) {\n                 unsafe { *count_ptr = *count_ptr + 1; }\n             };\n@@ -452,7 +458,7 @@ fn test_run_a_lot_of_tasks_queued() {\n         assert!(count == MAX);\n \n         fn run_task(count_ptr: *mut int) {\n-            do Scheduler::local_borrow |sched| {\n+            do Scheduler::borrow_local |sched| {\n                 let task = ~do Task::new(&mut sched.stack_pool) {\n                     unsafe {\n                         *count_ptr = *count_ptr + 1;\n@@ -485,7 +491,7 @@ fn test_run_a_lot_of_tasks_direct() {\n         assert!(count == MAX);\n \n         fn run_task(count_ptr: *mut int) {\n-            let mut sched = Scheduler::local_take();\n+            let mut sched = Scheduler::take_local();\n             let task = ~do Task::new(&mut sched.stack_pool) {\n                 unsafe {\n                     *count_ptr = *count_ptr + 1;\n@@ -505,11 +511,11 @@ fn test_block_task() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::local_take();\n+            let sched = Scheduler::take_local();\n             assert!(sched.in_task_context());\n             do sched.deschedule_running_task_and_then() |task| {\n                 let task = Cell(task);\n-                do Scheduler::local_borrow |sched| {\n+                do Scheduler::borrow_local |sched| {\n                     assert!(!sched.in_task_context());\n                     sched.task_queue.push_back(task.take());\n                 }"}, {"sha": "051d4ee7df9d39bdf0e06e4b584bc019f7fcf7b4", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ed74ac169e3e79ff4ce59329a06223e23f2b99b6/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed74ac169e3e79ff4ce59329a06223e23f2b99b6/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=ed74ac169e3e79ff4ce59329a06223e23f2b99b6", "patch": "@@ -104,14 +104,14 @@ impl IoFactory for UvIoFactory {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n-        let scheduler = Scheduler::local_take();\n+        let scheduler = Scheduler::take_local();\n         assert!(scheduler.in_task_context());\n \n         // Block this task and take ownership, switch to scheduler context\n         do scheduler.deschedule_running_task_and_then |task| {\n \n             rtdebug!(\"connect: entered scheduler context\");\n-            do Scheduler::local_borrow |scheduler| {\n+            do Scheduler::borrow_local |scheduler| {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut tcp_watcher = TcpWatcher::new(self.uv_loop());\n@@ -133,7 +133,7 @@ impl IoFactory for UvIoFactory {\n                 unsafe { (*result_cell_ptr).put_back(maybe_stream); }\n \n                 // Context switch\n-                let scheduler = Scheduler::local_take();\n+                let scheduler = Scheduler::take_local();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -178,7 +178,7 @@ impl TcpListener for UvTcpListener {\n \n         let server_tcp_watcher = self.watcher();\n \n-        let scheduler = Scheduler::local_take();\n+        let scheduler = Scheduler::take_local();\n         assert!(scheduler.in_task_context());\n \n         do scheduler.deschedule_running_task_and_then |task| {\n@@ -201,7 +201,7 @@ impl TcpListener for UvTcpListener {\n \n                 rtdebug!(\"resuming task from listen\");\n                 // Context switch\n-                let scheduler = Scheduler::local_take();\n+                let scheduler = Scheduler::take_local();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -241,13 +241,13 @@ impl Stream for UvStream {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Result<uint, ()>> = &result_cell;\n \n-        let scheduler = Scheduler::local_take();\n+        let scheduler = Scheduler::take_local();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&mut [u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |task| {\n             rtdebug!(\"read: entered scheduler context\");\n-            do Scheduler::local_borrow |scheduler| {\n+            do Scheduler::borrow_local |scheduler| {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut watcher = watcher;\n@@ -275,7 +275,7 @@ impl Stream for UvStream {\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n \n-                let scheduler = Scheduler::local_take();\n+                let scheduler = Scheduler::take_local();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -287,7 +287,7 @@ impl Stream for UvStream {\n     fn write(&mut self, buf: &[u8]) -> Result<(), ()> {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Result<(), ()>> = &result_cell;\n-        let scheduler = Scheduler::local_take();\n+        let scheduler = Scheduler::take_local();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n@@ -306,7 +306,7 @@ impl Stream for UvStream {\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n \n-                let scheduler = Scheduler::local_take();\n+                let scheduler = Scheduler::take_local();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -322,8 +322,7 @@ fn test_simple_io_no_connect() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::unsafe_local_borrow();\n-            let io = sched.event_loop.io().unwrap();\n+            let io = unsafe { Scheduler::borrow_local_io() };\n             let addr = Ipv4(127, 0, 0, 1, 2926);\n             let maybe_chan = io.connect(addr);\n             assert!(maybe_chan.is_none());\n@@ -341,16 +340,14 @@ fn test_simple_tcp_server_and_client() {\n         let addr = Ipv4(127, 0, 0, 1, 2929);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::unsafe_local_borrow();\n-            let io = sched.event_loop.io().unwrap();\n+            let io = unsafe { Scheduler::borrow_local_io() };\n             let mut stream = io.connect(addr).unwrap();\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             stream.close();\n         };\n \n         let server_task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::unsafe_local_borrow();\n-            let io = sched.event_loop.io().unwrap();\n+            let io = unsafe { Scheduler::borrow_local_io() };\n             let mut listener = io.bind(addr).unwrap();\n             let mut stream = listener.listen().unwrap();\n             let mut buf = [0, .. 2048];\n@@ -378,8 +375,7 @@ fn test_read_and_block() {\n         let addr = Ipv4(127, 0, 0, 1, 2930);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::unsafe_local_borrow();\n-            let io = sched.event_loop.io().unwrap();\n+            let io = unsafe { Scheduler::borrow_local_io() };\n             let mut stream = io.connect(addr).unwrap();\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -389,8 +385,7 @@ fn test_read_and_block() {\n         };\n \n         let server_task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::unsafe_local_borrow();\n-            let io = sched.event_loop.io().unwrap();\n+            let io = unsafe { Scheduler::borrow_local_io() };\n             let mut listener = io.bind(addr).unwrap();\n             let mut stream = listener.listen().unwrap();\n             let mut buf = [0, .. 2048];\n@@ -408,13 +403,13 @@ fn test_read_and_block() {\n                 }\n                 reads += 1;\n \n-                let scheduler = Scheduler::local_take();\n+                let scheduler = Scheduler::take_local();\n                 // Yield to the other task in hopes that it\n                 // will trigger a read callback while we are\n                 // not ready for it\n                 do scheduler.deschedule_running_task_and_then |task| {\n                     let task = Cell(task);\n-                    do Scheduler::local_borrow |scheduler| {\n+                    do Scheduler::borrow_local |scheduler| {\n                         scheduler.task_queue.push_back(task.take());\n                     }\n                 }\n@@ -441,8 +436,7 @@ fn test_read_read_read() {\n         let addr = Ipv4(127, 0, 0, 1, 2931);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::unsafe_local_borrow();\n-            let io = sched.event_loop.io().unwrap();\n+            let io = unsafe { Scheduler::borrow_local_io() };\n             let mut stream = io.connect(addr).unwrap();\n             let mut buf = [0, .. 2048];\n             let mut total_bytes_read = 0;"}]}