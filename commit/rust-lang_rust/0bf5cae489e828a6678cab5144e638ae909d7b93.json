{"sha": "0bf5cae489e828a6678cab5144e638ae909d7b93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjVjYWU0ODllODI4YTY2NzhjYWI1MTQ0ZTYzOGFlOTA5ZDdiOTM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T20:36:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:07:58Z"}, "message": "Remove __query_compute module.", "tree": {"sha": "0236feb9e625303e9c6b95585e2ea992597f3872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0236feb9e625303e9c6b95585e2ea992597f3872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf5cae489e828a6678cab5144e638ae909d7b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf5cae489e828a6678cab5144e638ae909d7b93", "html_url": "https://github.com/rust-lang/rust/commit/0bf5cae489e828a6678cab5144e638ae909d7b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf5cae489e828a6678cab5144e638ae909d7b93/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97eda01bb79de1e0a52994f52cfb5a527687f505", "url": "https://api.github.com/repos/rust-lang/rust/commits/97eda01bb79de1e0a52994f52cfb5a527687f505", "html_url": "https://github.com/rust-lang/rust/commit/97eda01bb79de1e0a52994f52cfb5a527687f505"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "bfae0075c8d076732ae287e3a220096cbb0907f0", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0bf5cae489e828a6678cab5144e638ae909d7b93/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf5cae489e828a6678cab5144e638ae909d7b93/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=0bf5cae489e828a6678cab5144e638ae909d7b93", "patch": "@@ -951,16 +951,6 @@ macro_rules! define_queries_inner {\n             })*\n         }\n \n-        // This module and the functions in it exist only to provide a\n-        // predictable symbol name prefix for query providers. This is helpful\n-        // for analyzing queries in profilers.\n-        pub(super) mod __query_compute {\n-            $(#[inline(never)]\n-            pub fn $name<F: FnOnce() -> R, R>(f: F) -> R {\n-                f()\n-            })*\n-        }\n-\n         $(impl<$tcx> QueryConfig<$tcx> for queries::$name<$tcx> {\n             type Key = $K;\n             type Value = $V;\n@@ -997,16 +987,14 @@ macro_rules! define_queries_inner {\n \n             #[inline]\n             fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n-                __query_compute::$name(move || {\n-                    let provider = tcx.queries.providers.get(key.query_crate())\n-                        // HACK(eddyb) it's possible crates may be loaded after\n-                        // the query engine is created, and because crate loading\n-                        // is not yet integrated with the query engine, such crates\n-                        // would be missing appropriate entries in `providers`.\n-                        .unwrap_or(&tcx.queries.fallback_extern_providers)\n-                        .$name;\n-                    provider(tcx, key)\n-                })\n+                let provider = tcx.queries.providers.get(key.query_crate())\n+                    // HACK(eddyb) it's possible crates may be loaded after\n+                    // the query engine is created, and because crate loading\n+                    // is not yet integrated with the query engine, such crates\n+                    // would be missing appropriate entries in `providers`.\n+                    .unwrap_or(&tcx.queries.fallback_extern_providers)\n+                    .$name;\n+                provider(tcx, key)\n             }\n \n             fn hash_result("}]}