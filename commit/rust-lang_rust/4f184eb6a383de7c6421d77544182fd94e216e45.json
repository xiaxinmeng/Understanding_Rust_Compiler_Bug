{"sha": "4f184eb6a383de7c6421d77544182fd94e216e45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMTg0ZWI2YTM4M2RlN2M2NDIxZDc3NTQ0MTgyZmQ5NGUyMTZlNDU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-06T19:23:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-06T19:23:25Z"}, "message": "Rollup merge of #48012 - scottmcm:faster-rangeinclusive-fold, r=alexcrichton\n\nOverride try_[r]fold for RangeInclusive\n\nBecause the last item needs special handling, it seems that LLVM has trouble canonicalizing the loops in external iteration.  With the override, it becomes obvious that the start==end case exits the loop (as opposed to the one *after* that exiting the loop in external iteration).\n\nDemo adapted from https://github.com/rust-lang/rust/issues/45222\n```rust\n#[no_mangle]\npub fn foo3r(n: u64) -> u64 {\n    let mut count = 0;\n    (0..n).for_each(|_| {\n        (0 ..= n).rev().for_each(|j| {\n            count += j;\n        })\n    });\n    count\n}\n```\n\n<details>\n <summary>Current nightly ASM, 100 lines (https://play.rust-lang.org/?gist=f5674c702c6e2045c3aab5d03763e5f6&version=nightly&mode=release)</summary>\n\n```asm\nfoo3r:\n\tpushq\t%rbx\n.Lcfi0:\n.Lcfi1:\n\ttestq\t%rdi, %rdi\n\tje\t.LBB0_1\n\ttestb\t$1, %dil\n\tjne\t.LBB0_4\n\txorl\t%eax, %eax\n\txorl\t%r8d, %r8d\n\tcmpq\t$1, %rdi\n\tjne\t.LBB0_11\n\tjmp\t.LBB0_23\n.LBB0_1:\n\txorl\t%eax, %eax\n\tpopq\t%rbx\n\tretq\n.LBB0_4:\n\txorl\t%r8d, %r8d\n\tmovq\t$-1, %r9\n\txorl\t%eax, %eax\n\tmovq\t%rdi, %r11\n\txorl\t%r10d, %r10d\n\tjmp\t.LBB0_5\n.LBB0_8:\n\taddq\t%r11, %rax\n\tmovq\t%rsi, %r11\n\tmovq\t%rdx, %r10\n.LBB0_5:\n\tcmpq\t%r11, %r10\n\tmovl\t$1, %ecx\n\tcmovbq\t%r9, %rcx\n\tcmoveq\t%r8, %rcx\n\ttestq\t%rcx, %rcx\n\tmovl\t$0, %esi\n\tmovl\t$1, %edx\n\tje\t.LBB0_8\n\tcmpq\t$-1, %rcx\n\tjne\t.LBB0_9\n\tleaq\t-1(%r11), %rsi\n\tmovq\t%r10, %rdx\n\tjmp\t.LBB0_8\n.LBB0_9:\n\tmovl\t$1, %r8d\n\tcmpq\t$1, %rdi\n\tje\t.LBB0_23\n.LBB0_11:\n\txorl\t%r9d, %r9d\n\tmovq\t$-1, %r10\n.LBB0_12:\n\tmovq\t%rdi, %rsi\n\txorl\t%r11d, %r11d\n\tjmp\t.LBB0_13\n.LBB0_16:\n\taddq\t%rsi, %rax\n\tmovq\t%rcx, %rsi\n\tmovq\t%rbx, %r11\n.LBB0_13:\n\tcmpq\t%rsi, %r11\n\tmovl\t$1, %edx\n\tcmovbq\t%r10, %rdx\n\tcmoveq\t%r9, %rdx\n\ttestq\t%rdx, %rdx\n\tmovl\t$0, %ecx\n\tmovl\t$1, %ebx\n\tje\t.LBB0_16\n\tcmpq\t$-1, %rdx\n\tjne\t.LBB0_17\n\tleaq\t-1(%rsi), %rcx\n\tmovq\t%r11, %rbx\n\tjmp\t.LBB0_16\n.LBB0_17:\n\tmovq\t%rdi, %rcx\n\txorl\t%r11d, %r11d\n\tjmp\t.LBB0_18\n.LBB0_21:\n\taddq\t%rcx, %rax\n\tmovq\t%rsi, %rcx\n\tmovq\t%rbx, %r11\n.LBB0_18:\n\tcmpq\t%rcx, %r11\n\tmovl\t$1, %edx\n\tcmovbq\t%r10, %rdx\n\tcmoveq\t%r9, %rdx\n\ttestq\t%rdx, %rdx\n\tmovl\t$0, %esi\n\tmovl\t$1, %ebx\n\tje\t.LBB0_21\n\tcmpq\t$-1, %rdx\n\tjne\t.LBB0_22\n\tleaq\t-1(%rcx), %rsi\n\tmovq\t%r11, %rbx\n\tjmp\t.LBB0_21\n.LBB0_22:\n\taddq\t$2, %r8\n\tcmpq\t%rdi, %r8\n\tjne\t.LBB0_12\n.LBB0_23:\n\tpopq\t%rbx\n\tretq\n.Lfunc_end0:\n```\n</details><br>\n\nWith this PR:\n```asm\nfoo3r:\n\ttest\trcx, rcx\n\tje\t.LBB3_1\n\tlea\tr8, [rcx - 1]\n\tlea\trdx, [rcx - 2]\n\tmov\trax, r8\n\tmul\trdx\n\tshld\trdx, rax, 63\n\timul\tr8, r8\n\tadd\tr8, rcx\n\tsub\tr8, rdx\n\timul\tr8, rcx\n\tmov\trax, r8\n\tret\n.LBB3_1:\n\txor\tr8d, r8d\n\tmov\trax, r8\n\tret\n```", "tree": {"sha": "c0230f57cbe36bf35d275528d87bc627b48b2d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0230f57cbe36bf35d275528d87bc627b48b2d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f184eb6a383de7c6421d77544182fd94e216e45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaegCtCRBK7hj4Ov3rIwAAdHIIAGFeOk2Ynh7aapZua9Rq4PnV\nyhisDsWQypBG4udr9stmHLnB8BWcw2CY9MGHdvtKEk/Sp3pGpcSGVz93ZR8ID+bI\ndu1o0wb4TdqikqaVV//YiS07cksDXtFwmCd4rF8SAvWA9X9OwTWU2V+DN0EWkGWA\ntBEOpvPZ+eGjANOrI0jrtWMkeESLMmYvWijTMfN45iQllB+1EczzxsodauG9JyhW\nZWcogNJ5IC22Fxeo8ARnkSnDMoaA31ut6VE5FIV5i3EOVlPlkROW53vVQS1pp3Cy\nwLscng2jduqA/QWUhIw+9nFoxJRwppPTie4SNArz5enchP6cOfMTAwTTTzPgNj8=\n=4PPX\n-----END PGP SIGNATURE-----\n", "payload": "tree c0230f57cbe36bf35d275528d87bc627b48b2d29\nparent a026e8a972729c7f97e40b78e0904a2cf321f227\nparent 1b1e887f4d40e5800a8d5ae81f8574806e7ba21a\nauthor kennytm <kennytm@gmail.com> 1517945005 +0800\ncommitter GitHub <noreply@github.com> 1517945005 +0800\n\nRollup merge of #48012 - scottmcm:faster-rangeinclusive-fold, r=alexcrichton\n\nOverride try_[r]fold for RangeInclusive\n\nBecause the last item needs special handling, it seems that LLVM has trouble canonicalizing the loops in external iteration.  With the override, it becomes obvious that the start==end case exits the loop (as opposed to the one *after* that exiting the loop in external iteration).\n\nDemo adapted from https://github.com/rust-lang/rust/issues/45222\n```rust\n#[no_mangle]\npub fn foo3r(n: u64) -> u64 {\n    let mut count = 0;\n    (0..n).for_each(|_| {\n        (0 ..= n).rev().for_each(|j| {\n            count += j;\n        })\n    });\n    count\n}\n```\n\n<details>\n <summary>Current nightly ASM, 100 lines (https://play.rust-lang.org/?gist=f5674c702c6e2045c3aab5d03763e5f6&version=nightly&mode=release)</summary>\n\n```asm\nfoo3r:\n\tpushq\t%rbx\n.Lcfi0:\n.Lcfi1:\n\ttestq\t%rdi, %rdi\n\tje\t.LBB0_1\n\ttestb\t$1, %dil\n\tjne\t.LBB0_4\n\txorl\t%eax, %eax\n\txorl\t%r8d, %r8d\n\tcmpq\t$1, %rdi\n\tjne\t.LBB0_11\n\tjmp\t.LBB0_23\n.LBB0_1:\n\txorl\t%eax, %eax\n\tpopq\t%rbx\n\tretq\n.LBB0_4:\n\txorl\t%r8d, %r8d\n\tmovq\t$-1, %r9\n\txorl\t%eax, %eax\n\tmovq\t%rdi, %r11\n\txorl\t%r10d, %r10d\n\tjmp\t.LBB0_5\n.LBB0_8:\n\taddq\t%r11, %rax\n\tmovq\t%rsi, %r11\n\tmovq\t%rdx, %r10\n.LBB0_5:\n\tcmpq\t%r11, %r10\n\tmovl\t$1, %ecx\n\tcmovbq\t%r9, %rcx\n\tcmoveq\t%r8, %rcx\n\ttestq\t%rcx, %rcx\n\tmovl\t$0, %esi\n\tmovl\t$1, %edx\n\tje\t.LBB0_8\n\tcmpq\t$-1, %rcx\n\tjne\t.LBB0_9\n\tleaq\t-1(%r11), %rsi\n\tmovq\t%r10, %rdx\n\tjmp\t.LBB0_8\n.LBB0_9:\n\tmovl\t$1, %r8d\n\tcmpq\t$1, %rdi\n\tje\t.LBB0_23\n.LBB0_11:\n\txorl\t%r9d, %r9d\n\tmovq\t$-1, %r10\n.LBB0_12:\n\tmovq\t%rdi, %rsi\n\txorl\t%r11d, %r11d\n\tjmp\t.LBB0_13\n.LBB0_16:\n\taddq\t%rsi, %rax\n\tmovq\t%rcx, %rsi\n\tmovq\t%rbx, %r11\n.LBB0_13:\n\tcmpq\t%rsi, %r11\n\tmovl\t$1, %edx\n\tcmovbq\t%r10, %rdx\n\tcmoveq\t%r9, %rdx\n\ttestq\t%rdx, %rdx\n\tmovl\t$0, %ecx\n\tmovl\t$1, %ebx\n\tje\t.LBB0_16\n\tcmpq\t$-1, %rdx\n\tjne\t.LBB0_17\n\tleaq\t-1(%rsi), %rcx\n\tmovq\t%r11, %rbx\n\tjmp\t.LBB0_16\n.LBB0_17:\n\tmovq\t%rdi, %rcx\n\txorl\t%r11d, %r11d\n\tjmp\t.LBB0_18\n.LBB0_21:\n\taddq\t%rcx, %rax\n\tmovq\t%rsi, %rcx\n\tmovq\t%rbx, %r11\n.LBB0_18:\n\tcmpq\t%rcx, %r11\n\tmovl\t$1, %edx\n\tcmovbq\t%r10, %rdx\n\tcmoveq\t%r9, %rdx\n\ttestq\t%rdx, %rdx\n\tmovl\t$0, %esi\n\tmovl\t$1, %ebx\n\tje\t.LBB0_21\n\tcmpq\t$-1, %rdx\n\tjne\t.LBB0_22\n\tleaq\t-1(%rcx), %rsi\n\tmovq\t%r11, %rbx\n\tjmp\t.LBB0_21\n.LBB0_22:\n\taddq\t$2, %r8\n\tcmpq\t%rdi, %r8\n\tjne\t.LBB0_12\n.LBB0_23:\n\tpopq\t%rbx\n\tretq\n.Lfunc_end0:\n```\n</details><br>\n\nWith this PR:\n```asm\nfoo3r:\n\ttest\trcx, rcx\n\tje\t.LBB3_1\n\tlea\tr8, [rcx - 1]\n\tlea\trdx, [rcx - 2]\n\tmov\trax, r8\n\tmul\trdx\n\tshld\trdx, rax, 63\n\timul\tr8, r8\n\tadd\tr8, rcx\n\tsub\tr8, rdx\n\timul\tr8, rcx\n\tmov\trax, r8\n\tret\n.LBB3_1:\n\txor\tr8d, r8d\n\tmov\trax, r8\n\tret\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f184eb6a383de7c6421d77544182fd94e216e45", "html_url": "https://github.com/rust-lang/rust/commit/4f184eb6a383de7c6421d77544182fd94e216e45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f184eb6a383de7c6421d77544182fd94e216e45/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a026e8a972729c7f97e40b78e0904a2cf321f227", "url": "https://api.github.com/repos/rust-lang/rust/commits/a026e8a972729c7f97e40b78e0904a2cf321f227", "html_url": "https://github.com/rust-lang/rust/commit/a026e8a972729c7f97e40b78e0904a2cf321f227"}, {"sha": "1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "html_url": "https://github.com/rust-lang/rust/commit/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "3b034efcce14ccbcc972b01090d564a32a630517", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4f184eb6a383de7c6421d77544182fd94e216e45/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f184eb6a383de7c6421d77544182fd94e216e45/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=4f184eb6a383de7c6421d77544182fd94e216e45", "patch": "@@ -10,7 +10,7 @@\n \n use convert::TryFrom;\n use mem;\n-use ops::{self, Add, Sub};\n+use ops::{self, Add, Sub, Try};\n use usize;\n \n use super::{FusedIterator, TrustedLen};\n@@ -397,6 +397,28 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    {\n+        let mut accum = init;\n+        if self.start <= self.end {\n+            loop {\n+                let (x, done) =\n+                    if self.start < self.end {\n+                        let n = self.start.add_one();\n+                        (mem::replace(&mut self.start, n), false)\n+                    } else {\n+                        self.end.replace_zero();\n+                        (self.start.replace_one(), true)\n+                    };\n+                accum = f(accum, x)?;\n+                if done { break }\n+            }\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n@@ -418,6 +440,28 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             _ => None,\n         }\n     }\n+\n+    #[inline]\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    {\n+        let mut accum = init;\n+        if self.start <= self.end {\n+            loop {\n+                let (x, done) =\n+                    if self.start < self.end {\n+                        let n = self.end.sub_one();\n+                        (mem::replace(&mut self.end, n), false)\n+                    } else {\n+                        self.start.replace_one();\n+                        (self.end.replace_zero(), true)\n+                    };\n+                accum = f(accum, x)?;\n+                if done { break }\n+            }\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "dc866d180bfa0c122db5b96789a010895a47cc18", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f184eb6a383de7c6421d77544182fd94e216e45/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f184eb6a383de7c6421d77544182fd94e216e45/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=4f184eb6a383de7c6421d77544182fd94e216e45", "patch": "@@ -1459,6 +1459,26 @@ fn test_range_inclusive_min() {\n     assert_eq!(r.min(), None);\n }\n \n+#[test]\n+fn test_range_inclusive_folds() {\n+    assert_eq!((1..=10).sum::<i32>(), 55);\n+    assert_eq!((1..=10).rev().sum::<i32>(), 55);\n+\n+    let mut it = 40..=50;\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it, 44..=50);\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it, 44..=47);\n+\n+    let mut it = 10..=20;\n+    assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(165));\n+    assert_eq!(it, 1..=0);\n+\n+    let mut it = 10..=20;\n+    assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(165));\n+    assert_eq!(it, 1..=0);\n+}\n+\n #[test]\n fn test_repeat() {\n     let mut it = repeat(42);"}]}