{"sha": "4feeceecd14d41cb74d10f15933aba3acdd6cc91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWVjZWVjZDE0ZDQxY2I3NGQxMGYxNTkzM2FiYTNhY2RkNmNjOTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-29T19:10:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-03T14:03:28Z"}, "message": "Introduce an option for disabling deduplication of diagnostics", "tree": {"sha": "4f055f83b1e50b99e36df45f59beccb8f48c4a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f055f83b1e50b99e36df45f59beccb8f48c4a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4feeceecd14d41cb74d10f15933aba3acdd6cc91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4feeceecd14d41cb74d10f15933aba3acdd6cc91", "html_url": "https://github.com/rust-lang/rust/commit/4feeceecd14d41cb74d10f15933aba3acdd6cc91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4feeceecd14d41cb74d10f15933aba3acdd6cc91/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/30ddb5a8c1e85916da0acdc665d6a16535a12dd6", "html_url": "https://github.com/rust-lang/rust/commit/30ddb5a8c1e85916da0acdc665d6a16535a12dd6"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "999c3470e71e1c5ce69f3dda2b76d720056e0d44", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4feeceecd14d41cb74d10f15933aba3acdd6cc91", "patch": "@@ -329,6 +329,8 @@ pub struct HandlerFlags {\n     /// show macro backtraces even for non-local macros.\n     /// (rustc: see `-Z external-macro-backtrace`)\n     pub external_macro_backtrace: bool,\n+    /// If true, identical diagnostics are reported only once.\n+    pub deduplicate_diagnostics: bool,\n }\n \n impl Drop for HandlerInner {\n@@ -736,16 +738,16 @@ impl HandlerInner {\n             self.emitted_diagnostic_codes.insert(code.clone());\n         }\n \n-        let diagnostic_hash = {\n+        let already_emitted = |this: &mut Self| {\n             use std::hash::Hash;\n             let mut hasher = StableHasher::new();\n             diagnostic.hash(&mut hasher);\n-            hasher.finish()\n+            let diagnostic_hash = hasher.finish();\n+            !this.emitted_diagnostics.insert(diagnostic_hash)\n         };\n \n-        // Only emit the diagnostic if we haven't already emitted an equivalent\n-        // one:\n-        if self.emitted_diagnostics.insert(diagnostic_hash) {\n+        // Only emit the diagnostic if we haven't already emitted an equivalent one.\n+        if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n             self.emitter.emit_diagnostic(diagnostic);\n             if diagnostic.is_error() {\n                 self.deduplicated_err_count += 1;"}, {"sha": "656c1b019b2e2ead069151c9589be1316b61a693", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=4feeceecd14d41cb74d10f15933aba3acdd6cc91", "patch": "@@ -946,4 +946,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n         \"fix undefined behavior when a thread doesn't eventually make progress \\\n          (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n+    deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+        \"deduplicate identical diagnostics\"),\n }"}, {"sha": "7375c5e88c028fc291b8e69846e096692aae7f3e", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=4feeceecd14d41cb74d10f15933aba3acdd6cc91", "patch": "@@ -943,12 +943,11 @@ pub fn build_session_with_source_map(\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n \n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n-\n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n     let dont_buffer_diagnostics = sopts.debugging_opts.dont_buffer_diagnostics;\n     let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n-\n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n+    let deduplicate_diagnostics = sopts.debugging_opts.deduplicate_diagnostics.unwrap_or(true);\n \n     let write_dest = match diagnostics_output {\n         DiagnosticOutput::Default => None,\n@@ -964,7 +963,7 @@ pub fn build_session_with_source_map(\n             report_delayed_bugs,\n             dont_buffer_diagnostics,\n             external_macro_backtrace,\n-            ..Default::default()\n+            deduplicate_diagnostics,\n         },\n     );\n "}, {"sha": "3493b7c54c43b4773bf440a7f927305976a7c040", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4feeceecd14d41cb74d10f15933aba3acdd6cc91/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=4feeceecd14d41cb74d10f15933aba3acdd6cc91", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:345:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:347:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}]}