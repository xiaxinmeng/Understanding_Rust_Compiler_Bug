{"sha": "70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTFmNGZjNmQ5NTFkZmMwNTQ3ZmY1YWNiM2Q4NzgwZDE2NjM1ZTY=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-02-09T00:50:14Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-02-14T01:34:26Z"}, "message": "Disallow projections from impl Trait types", "tree": {"sha": "027bc5b7852157f590de2fdf71267321796be296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/027bc5b7852157f590de2fdf71267321796be296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "html_url": "https://github.com/rust-lang/rust/commit/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f72c0de141573eef56f13fd48a3af12deaee4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75f72c0de141573eef56f13fd48a3af12deaee4f", "html_url": "https://github.com/rust-lang/rust/commit/75f72c0de141573eef56f13fd48a3af12deaee4f"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "14ea5c0ce7982f726b7e78c4d0814d890f549024", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "patch": "@@ -447,7 +447,7 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n                 struct_span_err!(self.session, t.span, E0666,\n                                  \"nested `impl Trait` is not allowed\")\n                     .span_label(outer_impl_trait, \"outer `impl Trait`\")\n-                    .span_label(t.span, \"devilishly nested `impl Trait` here\")\n+                    .span_label(t.span, \"nested `impl Trait` here\")\n                     .emit();\n \n             }\n@@ -482,6 +482,66 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     }\n }\n \n+// Bans `impl Trait` in path projections like `<impl Iterator>::Item` or `Foo::Bar<impl Trait>`.\n+struct ImplTraitProjectionVisitor<'a> {\n+    session: &'a Session,\n+    is_banned: bool,\n+}\n+\n+impl<'a> ImplTraitProjectionVisitor<'a> {\n+    fn with_ban<F>(&mut self, f: F)\n+        where F: FnOnce(&mut ImplTraitProjectionVisitor<'a>)\n+    {\n+        let old_is_banned = self.is_banned;\n+        self.is_banned = true;\n+        f(self);\n+        self.is_banned = old_is_banned;\n+    }\n+}\n+\n+impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n+    fn visit_ty(&mut self, t: &'a Ty) {\n+        match t.node {\n+            TyKind::ImplTrait(_) => {\n+                if self.is_banned {\n+                    struct_span_err!(self.session, t.span, E0667,\n+                                 \"`impl Trait` is not allowed in path parameters\")\n+                        .emit();\n+                }\n+            }\n+            TyKind::Path(ref qself, ref path) => {\n+                // We allow these:\n+                //  - `Option<impl Trait>`\n+                //  - `option::Option<impl Trait>`\n+                //  - `option::Option<T>::Foo<impl Trait>\n+                //\n+                // But not these:\n+                //  - `<impl Trait>::Foo`\n+                //  - `option::Option<impl Trait>::Foo`.\n+                //\n+                // To implement this, we disallow `impl Trait` from `qself`\n+                // (for cases like `<impl Trait>::Foo>`)\n+                // but we allow `impl Trait` in `PathParameters`\n+                // iff there are no more PathSegments.\n+                if let Some(ref qself) = *qself {\n+                    // `impl Trait` in `qself` is always illegal\n+                    self.with_ban(|this| this.visit_ty(&qself.ty));\n+                }\n+\n+                for (i, segment) in path.segments.iter().enumerate() {\n+                    // Allow `impl Trait` iff we're on the final path segment\n+                    if i == (path.segments.len() - 1) {\n+                        visit::walk_path_segment(self, path.span, segment);\n+                    } else {\n+                        self.with_ban(|this|\n+                            visit::walk_path_segment(this, path.span, segment));\n+                    }\n+                }\n+            }\n+            _ => visit::walk_ty(self, t),\n+        }\n+    }\n+}\n \n pub fn check_crate(session: &Session, krate: &Crate) {\n     visit::walk_crate(\n@@ -490,5 +550,11 @@ pub fn check_crate(session: &Session, krate: &Crate) {\n             outer_impl_trait: None,\n         }, krate);\n \n+    visit::walk_crate(\n+        &mut ImplTraitProjectionVisitor {\n+            session,\n+            is_banned: false,\n+        }, krate);\n+\n     visit::walk_crate(&mut AstValidator { session: session }, krate)\n }"}, {"sha": "980808a6905c1705ca33253e8854505e3a77aec1", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "patch": "@@ -321,4 +321,5 @@ register_diagnostics! {\n     E0568, // auto traits can not have super traits\n     E0642, // patterns aren't allowed in methods without bodies\n     E0666, // nested `impl Trait` is illegal\n+    E0667, // `impl Trait` in projections\n }"}, {"sha": "e34b7799fb72481938970c1aaa9b46d10d20c218", "filename": "src/test/ui/impl_trait_projections.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(conservative_impl_trait, universal_impl_trait)]\n+\n+use std::fmt::Debug;\n+use std::option;\n+\n+fn parametrized_type_is_allowed() -> Option<impl Debug> {\n+    Some(5i32)\n+}\n+\n+fn path_parametrized_type_is_allowed() -> option::Option<impl Debug> {\n+    Some(5i32)\n+}\n+\n+fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+//~^^ ERROR ambiguous associated type\n+    x.next().unwrap()\n+}\n+\n+fn projection_with_named_trait_is_disallowed(x: impl Iterator)\n+    -> <impl Iterator as Iterator>::Item\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+{\n+    x.next().unwrap()\n+}\n+\n+fn projection_with_named_trait_inside_path_is_disallowed()\n+    -> <::std::ops::Range<impl Debug> as Iterator>::Item\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+{\n+    (1i32..100).next().unwrap()\n+}\n+\n+fn main() {}"}, {"sha": "2e8bfc931f82e6b6cc63ee91d30b0f6e3a560cec", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70e1f4fc6d951dfc0547ff5acb3d8780d16635e6/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=70e1f4fc6d951dfc0547ff5acb3d8780d16635e6", "patch": "@@ -0,0 +1,28 @@\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:23:51\n+   |\n+23 | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+   |                                                   ^^^^^^^^^^^^^\n+\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:30:9\n+   |\n+30 |     -> <impl Iterator as Iterator>::Item\n+   |         ^^^^^^^^^^^^^\n+\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/impl_trait_projections.rs:37:27\n+   |\n+37 |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n+   |                           ^^^^^^^^^^\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/impl_trait_projections.rs:23:50\n+   |\n+23 | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<impl std::iter::Iterator as Trait>::Item`\n+\n+error: aborting due to 4 previous errors\n+"}]}