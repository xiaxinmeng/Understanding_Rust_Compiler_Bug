{"sha": "fa3d56aca898897abe1d3154cacfa0a3a2619b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhM2Q1NmFjYTg5ODg5N2FiZTFkMzE1NGNhY2ZhMGEzYTI2MTliNjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-20T17:20:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-20T17:20:10Z"}, "message": "Rollup merge of #53213 - tmccombs:stable-ipconstructors, r=KodrAus\n\nStabilize IP associated constants\n\nFixes #44582", "tree": {"sha": "48e9a1c199976c744f8cba783b641e0e43dafae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e9a1c199976c744f8cba783b641e0e43dafae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa3d56aca898897abe1d3154cacfa0a3a2619b64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbevhLCRBK7hj4Ov3rIwAAdHIIAKx5yMW+j4ofzO6HRfKI28w8\niJe9bOmpg7kKKvZhf9kUdlk3QsVzS2hqcOfDn4D7i/mR/9QlzU+lc3HMM9It0JQ3\naihFmxzjlIRCXSsGNmRXrE3VWNJGq1IfAMpbDbOfKr5zp8zF2j6fe0NbbK8H6E30\nKyx2ynm0+wtpHPUph3mXDECaKzKDe82gi3+oUiFFqCxWlhG/KpHvB25BFJ2j32B5\nQWf7Kgblx/XeFBsxJoP4H9npLIPKlIyAR9hUMcvObhhHByyqKWqYe3/k1lpy09pu\n86rkuSgCR3otV3DaY4GxGMfVUldnL3Jx4mc1/18gzeB3MmRzG14zTEAotxnTLKY=\n=wdE6\n-----END PGP SIGNATURE-----\n", "payload": "tree 48e9a1c199976c744f8cba783b641e0e43dafae9\nparent b51723a87277c47ebf3160750ebf0173cd7f9b6f\nparent e6244e597978bb3c73c3b222a860a033dea6acf4\nauthor kennytm <kennytm@gmail.com> 1534785610 +0800\ncommitter GitHub <noreply@github.com> 1534785610 +0800\n\nRollup merge of #53213 - tmccombs:stable-ipconstructors, r=KodrAus\n\nStabilize IP associated constants\n\nFixes #44582\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3d56aca898897abe1d3154cacfa0a3a2619b64", "html_url": "https://github.com/rust-lang/rust/commit/fa3d56aca898897abe1d3154cacfa0a3a2619b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa3d56aca898897abe1d3154cacfa0a3a2619b64/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51723a87277c47ebf3160750ebf0173cd7f9b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51723a87277c47ebf3160750ebf0173cd7f9b6f", "html_url": "https://github.com/rust-lang/rust/commit/b51723a87277c47ebf3160750ebf0173cd7f9b6f"}, {"sha": "e6244e597978bb3c73c3b222a860a033dea6acf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6244e597978bb3c73c3b222a860a033dea6acf4", "html_url": "https://github.com/rust-lang/rust/commit/e6244e597978bb3c73c3b222a860a033dea6acf4"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "d45a66ef6653257455594c7239fe002bc91acbb9", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fa3d56aca898897abe1d3154cacfa0a3a2619b64/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa3d56aca898897abe1d3154cacfa0a3a2619b64/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=fa3d56aca898897abe1d3154cacfa0a3a2619b64", "patch": "@@ -357,47 +357,38 @@ impl Ipv4Addr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ip_constructors)]\n     /// use std::net::Ipv4Addr;\n     ///\n     /// let addr = Ipv4Addr::LOCALHOST;\n     /// assert_eq!(addr, Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n-    #[unstable(feature = \"ip_constructors\",\n-               reason = \"requires greater scrutiny before stabilization\",\n-               issue = \"44582\")]\n+    #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const LOCALHOST: Self = Ipv4Addr::new(127, 0, 0, 1);\n \n     /// An IPv4 address representing an unspecified address: 0.0.0.0\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ip_constructors)]\n     /// use std::net::Ipv4Addr;\n     ///\n     /// let addr = Ipv4Addr::UNSPECIFIED;\n     /// assert_eq!(addr, Ipv4Addr::new(0, 0, 0, 0));\n     /// ```\n-    #[unstable(feature = \"ip_constructors\",\n-               reason = \"requires greater scrutiny before stabilization\",\n-               issue = \"44582\")]\n+    #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const UNSPECIFIED: Self = Ipv4Addr::new(0, 0, 0, 0);\n \n     /// An IPv4 address representing the broadcast address: 255.255.255.255\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ip_constructors)]\n     /// use std::net::Ipv4Addr;\n     ///\n     /// let addr = Ipv4Addr::BROADCAST;\n     /// assert_eq!(addr, Ipv4Addr::new(255, 255, 255, 255));\n     /// ```\n-    #[unstable(feature = \"ip_constructors\",\n-               reason = \"requires greater scrutiny before stabilization\",\n-               issue = \"44582\")]\n+    #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const BROADCAST: Self = Ipv4Addr::new(255, 255, 255, 255);\n \n     /// Returns the four eight-bit integers that make up this address.\n@@ -896,31 +887,25 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ip_constructors)]\n     /// use std::net::Ipv6Addr;\n     ///\n     /// let addr = Ipv6Addr::LOCALHOST;\n     /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n-    #[unstable(feature = \"ip_constructors\",\n-               reason = \"requires greater scrutiny before stabilization\",\n-               issue = \"44582\")]\n+    #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const LOCALHOST: Self = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n \n     /// An IPv6 address representing the unspecified address: `::`\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(ip_constructors)]\n     /// use std::net::Ipv6Addr;\n     ///\n     /// let addr = Ipv6Addr::UNSPECIFIED;\n     /// assert_eq!(addr, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));\n     /// ```\n-    #[unstable(feature = \"ip_constructors\",\n-               reason = \"requires greater scrutiny before stabilization\",\n-               issue = \"44582\")]\n+    #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const UNSPECIFIED: Self = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0);\n \n     /// Returns the eight 16-bit segments that make up this address."}]}