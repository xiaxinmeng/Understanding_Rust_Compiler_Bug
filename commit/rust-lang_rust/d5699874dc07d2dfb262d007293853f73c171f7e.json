{"sha": "d5699874dc07d2dfb262d007293853f73c171f7e", "node_id": "C_kwDOAAsO6NoAKGQ1Njk5ODc0ZGMwN2QyZGZiMjYyZDAwNzI5Mzg1M2Y3M2MxNzFmN2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T18:13:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T18:13:36Z"}, "message": "Auto merge of #111882 - matthiaskrgr:rollup-1xyv5mq, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #111427 ([rustdoc][JSON] Use exclusively externally tagged enums in the JSON representation)\n - #111486 (Pretty-print inherent projections correctly)\n - #111722 (Document stack-protector option)\n - #111761 (fix(resolve): not defined `extern crate shadow_name`)\n - #111845 (Update books)\n - #111851 (CFI: Fix encode_region: unexpected ReEarlyBound(0, 'a))\n - #111871 (Migrate GUI colors test to original CSS color format)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9cf6c3ba8661137ebe3f702646600bc32bbab57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf6c3ba8661137ebe3f702646600bc32bbab57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5699874dc07d2dfb262d007293853f73c171f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5699874dc07d2dfb262d007293853f73c171f7e", "html_url": "https://github.com/rust-lang/rust/commit/d5699874dc07d2dfb262d007293853f73c171f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5699874dc07d2dfb262d007293853f73c171f7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dd1cde59ee86e5d61469ee1befe09c132c777d", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd1cde59ee86e5d61469ee1befe09c132c777d", "html_url": "https://github.com/rust-lang/rust/commit/52dd1cde59ee86e5d61469ee1befe09c132c777d"}, {"sha": "f737ec40e6914c7a3d6cc36f742e031137dd0171", "url": "https://api.github.com/repos/rust-lang/rust/commits/f737ec40e6914c7a3d6cc36f742e031137dd0171", "html_url": "https://github.com/rust-lang/rust/commit/f737ec40e6914c7a3d6cc36f742e031137dd0171"}], "stats": {"total": 1637, "additions": 882, "deletions": 755}, "files": [{"sha": "b003916b03d637338a64321cead19afa8f5142c9", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -246,6 +246,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"bincode\"\n+version = \"1.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.3.2\"\n@@ -4351,6 +4360,7 @@ dependencies = [\n name = \"rustdoc-json-types\"\n version = \"0.1.0\"\n dependencies = [\n+ \"bincode\",\n  \"rustc-hash\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "11ad5b49df2ef24d766123e3d0bdaa52570f3648", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -58,11 +58,12 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n+            ty::Alias(ty::Inherent, _) => bug!(\"type_name: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"type_name: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"type_name: unexpected `GeneratorWitnessMIR`\"),\n         }"}, {"sha": "a064174e2616b6514c798309bfcf7809e3fd99b4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1164,6 +1164,22 @@ pub trait PrettyPrinter<'tcx>:\n         traits.entry(trait_ref).or_default().extend(proj_ty);\n     }\n \n+    fn pretty_print_inherent_projection(\n+        self,\n+        alias_ty: &ty::AliasTy<'tcx>,\n+    ) -> Result<Self::Path, Self::Error> {\n+        let def_key = self.tcx().def_key(alias_ty.def_id);\n+        self.path_generic_args(\n+            |cx| {\n+                cx.path_append(\n+                    |cx| cx.path_qualified(alias_ty.self_ty(), None),\n+                    &def_key.disambiguated_data,\n+                )\n+            },\n+            &alias_ty.substs[1..],\n+        )\n+    }\n+\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }\n@@ -2821,7 +2837,11 @@ define_print_and_forward_display! {\n     }\n \n     ty::AliasTy<'tcx> {\n-        p!(print_def_path(self.def_id, self.substs));\n+        if let DefKind::Impl { of_trait: false } = cx.tcx().def_kind(cx.tcx().parent(self.def_id)) {\n+            p!(pretty_print_inherent_projection(self))\n+        } else {\n+            p!(print_def_path(self.def_id, self.substs));\n+        }\n     }\n \n     ty::ClosureKind {"}, {"sha": "b3d0e4ba258941b08d1033eae329d8d83360911a", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -873,6 +873,11 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n                     let msg = \"macro-expanded `extern crate` items cannot \\\n                                        shadow names passed with `--extern`\";\n                     self.r.tcx.sess.span_err(item.span, msg);\n+                    // `return` is intended to discard this binding because it's an\n+                    // unregistered ambiguity error which would result in a panic\n+                    // caused by inconsistency `path_res`\n+                    // more details: https://github.com/rust-lang/rust/pull/111761\n+                    return;\n                 }\n             }\n             let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert("}, {"sha": "1e31a0ff27824da3fc3876c5690a6c635b8ff6aa", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -106,7 +106,7 @@ impl Determinacy {\n /// A specific scope in which a name can be looked up.\n /// This enum is currently used only for early resolution (imports and macros),\n /// but not for late resolution yet.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n enum Scope<'a> {\n     DeriveHelpers(LocalExpnId),\n     DeriveHelpersCompat,"}, {"sha": "254ede4e6a00af65133353711f580d2a300b4060", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n \n@@ -241,6 +241,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n                 Ok(self)\n             }\n \n+            ty::Alias(ty::Inherent, _) => panic!(\"unexpected inherent projection\"),\n+\n             _ => self.pretty_print_type(ty),\n         }\n     }"}, {"sha": "da8a16dee8ac7abc88c8f7097bc6c262a9ad58de", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -272,12 +272,11 @@ fn encode_region<'tcx>(\n             s.push('E');\n             compress(dict, DictKey::Region(region), &mut s);\n         }\n-        RegionKind::ReErased => {\n+        RegionKind::ReEarlyBound(..) | RegionKind::ReErased => {\n             s.push_str(\"u6region\");\n             compress(dict, DictKey::Region(region), &mut s);\n         }\n-        RegionKind::ReEarlyBound(..)\n-        | RegionKind::ReFree(..)\n+        RegionKind::ReFree(..)\n         | RegionKind::ReStatic\n         | RegionKind::ReError(_)\n         | RegionKind::ReVar(..)\n@@ -704,14 +703,15 @@ fn transform_predicates<'tcx>(\n ) -> &'tcx List<ty::PolyExistentialPredicate<'tcx>> {\n     let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> = predicates\n         .iter()\n-        .map(|predicate| match predicate.skip_binder() {\n+        .filter_map(|predicate| match predicate.skip_binder() {\n             ty::ExistentialPredicate::Trait(trait_ref) => {\n                 let trait_ref = ty::TraitRef::identity(tcx, trait_ref.def_id);\n-                ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+                Some(ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n                     ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n-                ))\n+                )))\n             }\n-            _ => predicate,\n+            ty::ExistentialPredicate::Projection(..) => None,\n+            ty::ExistentialPredicate::AutoTrait(..) => Some(predicate),\n         })\n         .collect();\n     tcx.mk_poly_existential_predicates(&predicates)"}, {"sha": "4cccc6398927c331f1b2347bb5ab0c29cb4e8cc6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -433,7 +433,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n@@ -482,6 +482,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 self = r.print(self)?;\n             }\n \n+            ty::Alias(ty::Inherent, _) => bug!(\"symbol_names: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"symbol_names: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"symbol_names: unexpected `GeneratorWitnessMIR`\"),\n         }"}, {"sha": "f2aed2fe8e9f55508c86ba3aa4b6789b18a08a22", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1 +1 @@\n-Subproject commit d9eb4c3f75435b008881062ffa77bf0d1527b37d\n+Subproject commit f2aed2fe8e9f55508c86ba3aa4b6789b18a08a22"}, {"sha": "b5f018fb5930cb733b0a8aaf2eed975d4771e74d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1 +1 @@\n-Subproject commit b5f7500fc40775096c2bbd204eae096612cf9047\n+Subproject commit b5f018fb5930cb733b0a8aaf2eed975d4771e74d"}, {"sha": "553d99b02a53b4133a40d5bd2e19958c67487c00", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1 +1 @@\n-Subproject commit 28dc0f3576b55f5e57c5d6e65cd68ba3161e9fd5\n+Subproject commit 553d99b02a53b4133a40d5bd2e19958c67487c00"}, {"sha": "f1e637883fafeb83bdd5906ee7f467e4d35b7337", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1 +1 @@\n-Subproject commit 28dbeaf5c44bc7f5111ad412e99f2d7c5cec6c90\n+Subproject commit f1e637883fafeb83bdd5906ee7f467e4d35b7337"}, {"sha": "a82a53248d485d0cfd597f208dba51761c0893d6", "filename": "src/doc/rustc/src/exploit-mitigations.md", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -115,9 +115,9 @@ equivalent.\n   <tr>\n    <td>Stack smashing protection\n    </td>\n-   <td>No\n+   <td>Yes\n    </td>\n-   <td>\n+   <td>Nightly\n    </td>\n   </tr>\n   <tr>\n@@ -432,18 +432,16 @@ saved return instruction pointer, and checking if this value has changed\n when returning from a function. This is also known as \u201cStack Protector\u201d or\n \u201cStack Smashing Protector (SSP)\u201d.\n \n-The Rust compiler does not support stack smashing protection. However, more\n-comprehensive alternatives to stack smashing protection exist, such as\n-shadow and safe stack (see backward-edge control flow protection).\n+The Rust compiler supports stack smashing protection on nightly builds[42].\n \n ![Screenshot of IDA Pro listing cross references to __stack_chk_fail in hello-rust.](images/image3.png \"Cross references to __stack_chk_fail in hello-rust.\")\n Fig. 14. IDA Pro listing cross references to `__stack_chk_fail` in\n hello-rust.\n \n To check if stack smashing protection is enabled for a given binary, search\n-for cross references to `__stack_chk_fail`. The only cross references to\n-`__stack_chk_fail` in hello-rust are from the statically-linked libbacktrace\n-library (see Fig. 14).\n+for cross references to `__stack_chk_fail`. The presence of these\n+cross-references in Rust-compiled code (e.g., `hello_rust::main`) indicates\n+that the stack smashing protection is enabled (see Fig. 14).\n \n \n ### Forward-edge control flow protection\n@@ -697,3 +695,6 @@ defaults (unrelated to `READ_IMPLIES_EXEC`).\n \n 41. \u201cControlFlowIntegrity.\u201d The Rust Unstable Book.\n     [https://doc.rust-lang.org/unstable-book/compiler-flags/sanitizer.html#controlflowintegrity](../unstable-book/compiler-flags/sanitizer.html#controlflowintegrity).\n+\n+42. bbjornse. \u201cadd codegen option for using LLVM stack smash protection #84197.\u201d\n+    GitHub. <https://github.com/rust-lang/rust/pull/84197>"}, {"sha": "ef02c605ead8a217a6991f4e7c137ee73ac6c520", "filename": "src/doc/rustc/src/images/image3.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Fdoc%2Frustc%2Fsrc%2Fimages%2Fimage3.png", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Fdoc%2Frustc%2Fsrc%2Fimages%2Fimage3.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fimages%2Fimage3.png?ref=d5699874dc07d2dfb262d007293853f73c171f7e"}, {"sha": "d3548036d4c727caae87ef487dea7f3b65ae1dcb", "filename": "src/rustdoc-json-types/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Frustdoc-json-types%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Frustdoc-json-types%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2FCargo.toml?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -12,3 +12,4 @@ rustc-hash = \"1.1.0\"\n \n [dev-dependencies]\n serde_json = \"1.0\"\n+bincode = \"1\""}, {"sha": "ba8eeaa66824a8afd85b7f0cff3d17f03612125f", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,7 +8,7 @@ use serde::{Deserialize, Serialize};\n use std::path::PathBuf;\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 25;\n+pub const FORMAT_VERSION: u32 = 26;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -83,7 +83,6 @@ pub struct Item {\n     /// Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)\n     pub attrs: Vec<String>,\n     pub deprecation: Option<Deprecation>,\n-    #[serde(flatten)]\n     pub inner: ItemEnum,\n }\n \n@@ -222,7 +221,7 @@ pub enum ItemKind {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n-#[serde(tag = \"kind\", content = \"inner\", rename_all = \"snake_case\")]\n+#[serde(rename_all = \"snake_case\")]\n pub enum ItemEnum {\n     Module(Module),\n     ExternCrate {\n@@ -543,7 +542,6 @@ pub enum Term {\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n-#[serde(tag = \"kind\", content = \"inner\")]\n pub enum Type {\n     /// Structs, enums, and unions\n     ResolvedPath(Path),"}, {"sha": "1126d5f786f4dd594bb9aaddd1cd8eed77965603", "filename": "src/rustdoc-json-types/tests.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Frustdoc-json-types%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/src%2Frustdoc-json-types%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Ftests.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,11 +8,15 @@ fn test_struct_info_roundtrip() {\n         impls: vec![],\n     });\n \n+    // JSON\n     let struct_json = serde_json::to_string(&s).unwrap();\n-\n     let de_s = serde_json::from_str(&struct_json).unwrap();\n-\n     assert_eq!(s, de_s);\n+\n+    // Bincode\n+    let encoded: Vec<u8> = bincode::serialize(&s).unwrap();\n+    let decoded: ItemEnum = bincode::deserialize(&encoded).unwrap();\n+    assert_eq!(s, decoded);\n }\n \n #[test]\n@@ -24,9 +28,13 @@ fn test_union_info_roundtrip() {\n         impls: vec![],\n     });\n \n+    // JSON\n     let union_json = serde_json::to_string(&u).unwrap();\n-\n     let de_u = serde_json::from_str(&union_json).unwrap();\n-\n     assert_eq!(u, de_u);\n+\n+    // Bincode\n+    let encoded: Vec<u8> = bincode::serialize(&u).unwrap();\n+    let decoded: ItemEnum = bincode::deserialize(&encoded).unwrap();\n+    assert_eq!(u, decoded);\n }"}, {"sha": "ebb26cd35c09cdc2811ea40f135e4fb438e654bf", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -536,15 +536,15 @@ pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n // CHECK: ![[TYPE93]] = !{i64 0, !\"_ZTSFvPFu3i32S_EE\"}\n // CHECK: ![[TYPE94]] = !{i64 0, !\"_ZTSFvPFu3i32S_ES0_E\"}\n // CHECK: ![[TYPE95]] = !{i64 0, !\"_ZTSFvPFu3i32S_ES0_S0_E\"}\n-// CHECK: ![[TYPE96]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n-// CHECK: ![[TYPE97]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n-// CHECK: ![[TYPE98]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n-// CHECK: ![[TYPE99]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n-// CHECK: ![[TYPE100]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n-// CHECK: ![[TYPE101]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n-// CHECK: ![[TYPE102]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEEE\"}\n-// CHECK: ![[TYPE103]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_E\"}\n-// CHECK: ![[TYPE104]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu{{[0-9]+}}NtNtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnce6OutputIu5tupleIu3i32EES1_u6regionEES6_S6_E\"}\n+// CHECK: ![[TYPE96]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu6regionEEE\"}\n+// CHECK: ![[TYPE97]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu6regionEES3_E\"}\n+// CHECK: ![[TYPE98]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function2FnIu5paramEu6regionEES3_S3_E\"}\n+// CHECK: ![[TYPE99]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu6regionEEE\"}\n+// CHECK: ![[TYPE100]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu6regionEES3_E\"}\n+// CHECK: ![[TYPE101]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function5FnMutIu5paramEu6regionEES3_S3_E\"}\n+// CHECK: ![[TYPE102]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu6regionEEE\"}\n+// CHECK: ![[TYPE103]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu6regionEES3_E\"}\n+// CHECK: ![[TYPE104]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtNtC{{[[:print:]]+}}_4core3ops8function6FnOnceIu5paramEu6regionEES3_S3_E\"}\n // CHECK: ![[TYPE105]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEEE\"}\n // CHECK: ![[TYPE106]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEES2_E\"}\n // CHECK: ![[TYPE107]] = !{i64 0, !\"_ZTSFvu3refIu3dynIu{{[0-9]+}}NtNtC{{[[:print:]]+}}_4core6marker4Sendu6regionEES2_S2_E\"}"}, {"sha": "0f79adab7bd6ac8f12d1f0e6321c3e8bb9e33d1a", "filename": "tests/codegen/sanitizer-cfi-emit-type-metadata-trait-objects.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-trait-objects.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -39,6 +39,20 @@ impl<T, U> Trait3<U> for T {\n     }\n }\n \n+pub trait Trait4<'a, T> {\n+    type Output: 'a;\n+    fn qux(&self, _: &T) -> Self::Output;\n+}\n+\n+pub struct Type4;\n+\n+impl<'a, T, U> Trait4<'a, U> for T {\n+    type Output = &'a i32;\n+    fn qux(&self, _: &U) -> Self::Output {\n+        &0\n+    }\n+}\n+\n pub fn foo1(a: &dyn Trait1) {\n     a.foo();\n     // CHECK-LABEL: define{{.*}}4foo1{{.*}}!type !{{[0-9]+}}\n@@ -84,6 +98,23 @@ pub fn bar3() {\n     // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE3:[[:print:]]+]]\")\n }\n \n+pub fn foo4<'a>(a: &dyn Trait4<'a, Type4, Output = &'a i32>) {\n+    let b = Type4;\n+    a.qux(&b);\n+    // CHECK-LABEL: define{{.*}}4foo4{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE4:[[:print:]]+]]\")\n+}\n+\n+pub fn bar4<'a>() {\n+    let a = Type4;\n+    foo4(&a);\n+    let b = &a as &dyn Trait4<'a, Type4, Output = &'a i32>;\n+    b.qux(&a);\n+    // CHECK-LABEL: define{{.*}}4bar4{{.*}}!type !{{[0-9]+}}\n+    // CHECK:       call i1 @llvm.type.test({{i8\\*|ptr}} {{%f|%[0-9]}}, metadata !\"[[TYPE4:[[:print:]]+]]\")\n+}\n+\n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE1]]\"}\n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE2]]\"}\n // CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE3]]\"}\n+// CHECK: !{{[0-9]+}} = !{i64 0, !\"[[TYPE4]]\"}"}, {"sha": "004a67e7df2eefa579962539dedb88c073ac2f85", "filename": "tests/codegen/sanitizer-kcfi-emit-type-metadata-trait-objects.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsanitizer-kcfi-emit-type-metadata-trait-objects.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -63,6 +63,20 @@ impl<T, U> Trait3<U> for T {\n     }\n }\n \n+pub trait Trait4<'a, T> {\n+    type Output: 'a;\n+    fn qux(&self, _: &T) -> Self::Output;\n+}\n+\n+pub struct Type4;\n+\n+impl<'a, T, U> Trait4<'a, U> for T {\n+    type Output = &'a i32;\n+    fn qux(&self, _: &U) -> Self::Output {\n+        &0\n+    }\n+}\n+\n pub fn foo1(a: &dyn Trait1) {\n     a.foo();\n     // CHECK-LABEL: define{{.*}}4foo1{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n@@ -108,6 +122,23 @@ pub fn bar3() {\n     // CHECK:       call void %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type3\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE3:[[:print:]]+]]) ]\n }\n \n+pub fn foo4<'a>(a: &dyn Trait4<'a, Type4, Output = &'a i32>) {\n+    let b = Type4;\n+    a.qux(&b);\n+    // CHECK-LABEL: define{{.*}}4foo4{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call align 4 {{ptr|i32\\*}} %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type4\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE4:[[:print:]]+]]) ]\n+}\n+\n+pub fn bar4<'a>() {\n+    let a = Type4;\n+    foo4(&a);\n+    let b = &a as &dyn Trait4<'a, Type4, Output = &'a i32>;\n+    b.qux(&a);\n+    // CHECK-LABEL: define{{.*}}4bar4{{.*}}!{{<unknown kind #36>|kcfi_type}} !{{[0-9]+}}\n+    // CHECK:       call align 4 {{ptr|i32\\*}} %{{[0-9]}}({{\\{\\}\\*|ptr}} align 1 {{%[a-z]\\.0|%_[0-9]}}, {{\\{\\}\\*|ptr|%Type4\\*}} align 1 {{%[a-z]\\.0|%_[0-9]}}){{.*}}[ \"kcfi\"(i32 [[TYPE4:[[:print:]]+]]) ]\n+}\n+\n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE1]]}\n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE2]]}\n // CHECK: !{{[0-9]+}} = !{i32 [[TYPE3]]}\n+// CHECK: !{{[0-9]+}} = !{i32 [[TYPE4]]}"}, {"sha": "6adc36b0edb1cf256590004ebd4c6af681311e19", "filename": "tests/rustdoc-gui/jump-to-def-background.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-gui%2Fjump-to-def-background.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-gui%2Fjump-to-def-background.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fjump-to-def-background.goml?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -17,6 +17,6 @@ define-function: (\n     },\n )\n \n-call-function: (\"check-background-color\", (\"ayu\", \"rgb(51, 51, 51)\"))\n-call-function: (\"check-background-color\", (\"dark\", \"rgb(51, 51, 51)\"))\n-call-function: (\"check-background-color\", (\"light\", \"rgb(238, 238, 238)\"))\n+call-function: (\"check-background-color\", (\"ayu\", \"#333\"))\n+call-function: (\"check-background-color\", (\"dark\", \"#333\"))\n+call-function: (\"check-background-color\", (\"light\", \"#eee\"))"}, {"sha": "05c2d4283934cfe1b365e360b5bb53be9f5983a6", "filename": "tests/rustdoc-json/assoc_items.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fassoc_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fassoc_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fassoc_items.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,35 +3,32 @@\n pub struct Simple;\n \n impl Simple {\n-    // @is \"$.index[*][?(@.name=='CONSTANT')].kind\" \\\"assoc_const\\\"\n+    // @has \"$.index[*][?(@.name=='CONSTANT')].inner.assoc_const\"\n     pub const CONSTANT: usize = 0;\n }\n \n pub trait EasyToImpl {\n-    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].kind\" \\\"assoc_type\\\"\n-    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].inner.default\" null\n-    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].inner.bounds\" []\n+    // @has \"$.index[*][?(@.docs=='ToDeclare trait')].inner.assoc_type\"\n+    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].inner.assoc_type.default\" null\n+    // @is \"$.index[*][?(@.docs=='ToDeclare trait')].inner.assoc_type.bounds\" []\n     /// ToDeclare trait\n     type ToDeclare;\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].kind\" \\\"assoc_const\\\"\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.default\" null\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.type.kind\" '\"primitive\"'\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.type.inner\" '\"usize\"'\n+    // @has \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.assoc_const\"\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.assoc_const.default\" null\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE trait')].inner.assoc_const.type.primitive\" '\"usize\"'\n     /// AN_ATTRIBUTE trait\n     const AN_ATTRIBUTE: usize;\n }\n \n impl EasyToImpl for Simple {\n-    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].kind\" '\"assoc_type\"'\n-    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].inner.default.kind\" \\\"primitive\\\"\n-    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].inner.default.inner\" \\\"usize\\\"\n+    // @has \"$.index[*][?(@.docs=='ToDeclare impl')].inner.assoc_type\"\n+    // @is \"$.index[*][?(@.docs=='ToDeclare impl')].inner.assoc_type.default.primitive\" \\\"usize\\\"\n     /// ToDeclare impl\n     type ToDeclare = usize;\n \n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].kind\" '\"assoc_const\"'\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.type.kind\" \\\"primitive\\\"\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.type.inner\" \\\"usize\\\"\n-    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.default\" \\\"12\\\"\n+    // @has \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.assoc_const\"\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.assoc_const.type.primitive\" \\\"usize\\\"\n+    // @is \"$.index[*][?(@.docs=='AN_ATTRIBUTE impl')].inner.assoc_const.default\" \\\"12\\\"\n     /// AN_ATTRIBUTE impl\n     const AN_ATTRIBUTE: usize = 12;\n }"}, {"sha": "a2a5c4a71460cfa66ec932db6bfb6ce90f4cd659", "filename": "tests/rustdoc-json/blanket_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fblanket_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fblanket_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fblanket_impls.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,7 +2,7 @@\n \n #![no_std]\n \n-// @has \"$.index[*][?(@.name=='Error')].kind\" \\\"assoc_type\\\"\n-// @has \"$.index[*][?(@.name=='Error')].inner.default.kind\" \\\"resolved_path\\\"\n-// @has \"$.index[*][?(@.name=='Error')].inner.default.inner.name\" \\\"Infallible\\\"\n+// @has \"$.index[*][?(@.name=='Error')].inner.assoc_type\"\n+// @has \"$.index[*][?(@.name=='Error')].inner.assoc_type.default.resolved_path\"\n+// @has \"$.index[*][?(@.name=='Error')].inner.assoc_type.default.resolved_path.name\" \\\"Infallible\\\"\n pub struct ForBlanketTryFromImpl;"}, {"sha": "dbfc5c2cf6bc8962582e070cc988a5be49e7853f", "filename": "tests/rustdoc-json/enums/discriminant/basic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,12 +1,12 @@\n #[repr(i8)]\n pub enum Ordering {\n-    // @is \"$.index[*][?(@.name=='Less')].inner.discriminant.expr\" '\"-1\"'\n-    // @is \"$.index[*][?(@.name=='Less')].inner.discriminant.value\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.variant.discriminant.expr\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.variant.discriminant.value\" '\"-1\"'\n     Less = -1,\n-    // @is \"$.index[*][?(@.name=='Equal')].inner.discriminant.expr\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Equal')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.variant.discriminant.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.variant.discriminant.value\" '\"0\"'\n     Equal = 0,\n-    // @is \"$.index[*][?(@.name=='Greater')].inner.discriminant.expr\" '\"1\"'\n-    // @is \"$.index[*][?(@.name=='Greater')].inner.discriminant.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.variant.discriminant.expr\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.variant.discriminant.value\" '\"1\"'\n     Greater = 1,\n }"}, {"sha": "ddcad58a5500163415d9674d78c3f5fdc3f0c402", "filename": "tests/rustdoc-json/enums/discriminant/expr.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,30 +1,30 @@\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Addition')].inner.discriminant.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Addition')].inner.discriminant.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.variant.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.variant.discriminant.expr\" '\"{ _ }\"'\n     Addition = 0 + 0,\n-    // @is \"$.index[*][?(@.name=='Bin')].inner.discriminant.value\" '\"1\"'\n-    // @is \"$.index[*][?(@.name=='Bin')].inner.discriminant.expr\" '\"0b1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.variant.discriminant.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.variant.discriminant.expr\" '\"0b1\"'\n     Bin = 0b1,\n-    // @is \"$.index[*][?(@.name=='Oct')].inner.discriminant.value\" '\"2\"'\n-    // @is \"$.index[*][?(@.name=='Oct')].inner.discriminant.expr\" '\"0o2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.variant.discriminant.value\" '\"2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.variant.discriminant.expr\" '\"0o2\"'\n     Oct = 0o2,\n-    // @is \"$.index[*][?(@.name=='PubConst')].inner.discriminant.value\" '\"3\"'\n-    // @is \"$.index[*][?(@.name=='PubConst')].inner.discriminant.expr\" '\"THREE\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant.discriminant.value\" '\"3\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant.discriminant.expr\" '\"THREE\"'\n     PubConst = THREE,\n-    // @is \"$.index[*][?(@.name=='Hex')].inner.discriminant.value\" '\"4\"'\n-    // @is \"$.index[*][?(@.name=='Hex')].inner.discriminant.expr\" '\"0x4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.variant.discriminant.value\" '\"4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.variant.discriminant.expr\" '\"0x4\"'\n     Hex = 0x4,\n-    // @is \"$.index[*][?(@.name=='Cast')].inner.discriminant.value\" '\"5\"'\n-    // @is \"$.index[*][?(@.name=='Cast')].inner.discriminant.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.variant.discriminant.value\" '\"5\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.variant.discriminant.expr\" '\"{ _ }\"'\n     Cast = 5 as isize,\n-    // @is \"$.index[*][?(@.name=='PubCall')].inner.discriminant.value\" '\"6\"'\n-    // @is \"$.index[*][?(@.name=='PubCall')].inner.discriminant.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant.discriminant.value\" '\"6\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant.discriminant.expr\" '\"{ _ }\"'\n     PubCall = six(),\n-    // @is \"$.index[*][?(@.name=='PrivCall')].inner.discriminant.value\" '\"7\"'\n-    // @is \"$.index[*][?(@.name=='PrivCall')].inner.discriminant.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant.discriminant.value\" '\"7\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant.discriminant.expr\" '\"{ _ }\"'\n     PrivCall = seven(),\n-    // @is \"$.index[*][?(@.name=='PrivConst')].inner.discriminant.value\" '\"8\"'\n-    // @is \"$.index[*][?(@.name=='PrivConst')].inner.discriminant.expr\" '\"EIGHT\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant.discriminant.value\" '\"8\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant.discriminant.expr\" '\"EIGHT\"'\n     PrivConst = EIGHT,\n }\n "}, {"sha": "47fb7040896c3dfde125bed7ccdfd4f613514b77", "filename": "tests/rustdoc-json/enums/discriminant/limits.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -4,40 +4,40 @@\n \n #[repr(u64)]\n pub enum U64 {\n-    // @is \"$.index[*][?(@.name=='U64Min')].inner.discriminant.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='U64Min')].inner.discriminant.expr\" '\"u64::MIN\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant.discriminant.expr\" '\"u64::MIN\"'\n     U64Min = u64::MIN,\n-    // @is \"$.index[*][?(@.name=='U64Max')].inner.discriminant.value\" '\"18446744073709551615\"'\n-    // @is \"$.index[*][?(@.name=='U64Max')].inner.discriminant.expr\" '\"u64::MAX\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant.discriminant.value\" '\"18446744073709551615\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant.discriminant.expr\" '\"u64::MAX\"'\n     U64Max = u64::MAX,\n }\n \n #[repr(i64)]\n pub enum I64 {\n-    // @is \"$.index[*][?(@.name=='I64Min')].inner.discriminant.value\" '\"-9223372036854775808\"'\n-    // @is \"$.index[*][?(@.name=='I64Min')].inner.discriminant.expr\" '\"i64::MIN\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant.discriminant.value\" '\"-9223372036854775808\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant.discriminant.expr\" '\"i64::MIN\"'\n     I64Min = i64::MIN,\n-    // @is \"$.index[*][?(@.name=='I64Max')].inner.discriminant.value\" '\"9223372036854775807\"'\n-    // @is \"$.index[*][?(@.name=='I64Max')].inner.discriminant.expr\" '\"i64::MAX\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant.discriminant.value\" '\"9223372036854775807\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant.discriminant.expr\" '\"i64::MAX\"'\n     I64Max = i64::MAX,\n }\n \n #[repr(u128)]\n pub enum U128 {\n-    // @is \"$.index[*][?(@.name=='U128Min')].inner.discriminant.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='U128Min')].inner.discriminant.expr\" '\"u128::MIN\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant.discriminant.expr\" '\"u128::MIN\"'\n     U128Min = u128::MIN,\n-    // @is \"$.index[*][?(@.name=='U128Max')].inner.discriminant.value\" '\"340282366920938463463374607431768211455\"'\n-    // @is \"$.index[*][?(@.name=='U128Max')].inner.discriminant.expr\" '\"u128::MAX\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant.discriminant.value\" '\"340282366920938463463374607431768211455\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant.discriminant.expr\" '\"u128::MAX\"'\n     U128Max = u128::MAX,\n }\n \n #[repr(i128)]\n pub enum I128 {\n-    // @is \"$.index[*][?(@.name=='I128Min')].inner.discriminant.value\" '\"-170141183460469231731687303715884105728\"'\n-    // @is \"$.index[*][?(@.name=='I128Min')].inner.discriminant.expr\" '\"i128::MIN\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant.discriminant.value\" '\"-170141183460469231731687303715884105728\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant.discriminant.expr\" '\"i128::MIN\"'\n     I128Min = i128::MIN,\n-    // @is \"$.index[*][?(@.name=='I128Max')].inner.discriminant.value\" '\"170141183460469231731687303715884105727\"'\n-    // @is \"$.index[*][?(@.name=='I128Max')].inner.discriminant.expr\" '\"i128::MAX\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant.discriminant.value\" '\"170141183460469231731687303715884105727\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant.discriminant.expr\" '\"i128::MAX\"'\n     I128Max = i128::MAX,\n }"}, {"sha": "9c3db81c66336dd11a38781a978c5b26c117c697", "filename": "tests/rustdoc-json/enums/discriminant/num_underscore_and_suffix.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,15 +1,17 @@\n+// ignore-tidy-linelength\n+\n #[repr(u32)]\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Basic')].inner.discriminant.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Basic')].inner.discriminant.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.variant.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.variant.discriminant.expr\" '\"0\"'\n     Basic = 0,\n-    // @is \"$.index[*][?(@.name=='Suffix')].inner.discriminant.value\" '\"10\"'\n-    // @is \"$.index[*][?(@.name=='Suffix')].inner.discriminant.expr\" '\"10u32\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant.discriminant.value\" '\"10\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant.discriminant.expr\" '\"10u32\"'\n     Suffix = 10u32,\n-    // @is \"$.index[*][?(@.name=='Underscore')].inner.discriminant.value\" '\"100\"'\n-    // @is \"$.index[*][?(@.name=='Underscore')].inner.discriminant.expr\" '\"1_0_0\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant.discriminant.value\" '\"100\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant.discriminant.expr\" '\"1_0_0\"'\n     Underscore = 1_0_0,\n-    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.discriminant.value\" '\"1000\"'\n-    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.discriminant.expr\" '\"1_0_0_0u32\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant.discriminant.value\" '\"1000\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant.discriminant.expr\" '\"1_0_0_0u32\"'\n     SuffixUnderscore = 1_0_0_0u32,\n }"}, {"sha": "38ba1caf140b1146b2c948b2208997999d04f5df", "filename": "tests/rustdoc-json/enums/discriminant/only_some_have_discriminant.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,10 +1,12 @@\n+// ignore-tidy-linelength\n+\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Has')].inner.discriminant\" '{\"expr\":\"0\", \"value\":\"0\"}'\n+    // @is \"$.index[*][?(@.name=='Has')].inner.variant.discriminant\" '{\"expr\":\"0\", \"value\":\"0\"}'\n     Has = 0,\n-    // @is \"$.index[*][?(@.name=='Doesnt')].inner.discriminant\" null\n+    // @is \"$.index[*][?(@.name=='Doesnt')].inner.variant.discriminant\" null\n     Doesnt,\n-    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.discriminant\" null\n+    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.variant.discriminant\" null\n     AlsoDoesnt,\n-    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.discriminant\" '{\"expr\":\"44\", \"value\":\"44\"}'\n+    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.variant.discriminant\" '{\"expr\":\"44\", \"value\":\"44\"}'\n     AlsoHas = 44,\n }"}, {"sha": "c4b087c3635ac04f7df48ebeff3a2094e2816a8c", "filename": "tests/rustdoc-json/enums/discriminant/struct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,13 +3,13 @@\n #[repr(i32)]\n // @is \"$.index[*][?(@.name=='Foo')].attrs\" '[\"#[repr(i32)]\"]'\n pub enum Foo {\n-    // @is    \"$.index[*][?(@.name=='Struct')].inner.discriminant\" null\n-    // @count \"$.index[*][?(@.name=='Struct')].inner.kind.struct.fields[*]\" 0\n+    // @is    \"$.index[*][?(@.name=='Struct')].inner.variant.discriminant\" null\n+    // @count \"$.index[*][?(@.name=='Struct')].inner.variant.kind.struct.fields[*]\" 0\n     Struct {},\n-    // @is    \"$.index[*][?(@.name=='StructWithDiscr')].inner.discriminant\" '{\"expr\": \"42\", \"value\": \"42\"}'\n-    // @count \"$.index[*][?(@.name=='StructWithDiscr')].inner.kind.struct.fields[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='StructWithDiscr')].inner.variant.discriminant\" '{\"expr\": \"42\", \"value\": \"42\"}'\n+    // @count \"$.index[*][?(@.name=='StructWithDiscr')].inner.variant.kind.struct.fields[*]\" 1\n     StructWithDiscr { x: i32 } = 42,\n-    // @is    \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.discriminant\"  '{\"expr\": \"0x42\", \"value\": \"66\"}'\n-    // @count \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.kind.struct.fields[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.variant.discriminant\"  '{\"expr\": \"0x42\", \"value\": \"66\"}'\n+    // @count \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.variant.kind.struct.fields[*]\" 2\n     StructWithHexDiscr { x: i32, y: bool } = 0x42,\n }"}, {"sha": "7da82ec8ea4c1276345d79141ad28badd2499de9", "filename": "tests/rustdoc-json/enums/discriminant/tuple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,13 +3,13 @@\n #[repr(u32)]\n // @is \"$.index[*][?(@.name=='Foo')].attrs\" '[\"#[repr(u32)]\"]'\n pub enum Foo {\n-    // @is    \"$.index[*][?(@.name=='Tuple')].inner.discriminant\" null\n-    // @count \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple[*]\" 0\n+    // @is    \"$.index[*][?(@.name=='Tuple')].inner.variant.discriminant\" null\n+    // @count \"$.index[*][?(@.name=='Tuple')].inner.variant.kind.tuple[*]\" 0\n     Tuple(),\n-    // @is    \"$.index[*][?(@.name=='TupleWithDiscr')].inner.discriminant\" '{\"expr\": \"1\", \"value\": \"1\"}'\n-    // @count \"$.index[*][?(@.name=='TupleWithDiscr')].inner.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='TupleWithDiscr')].inner.variant.discriminant\" '{\"expr\": \"1\", \"value\": \"1\"}'\n+    // @count \"$.index[*][?(@.name=='TupleWithDiscr')].inner.variant.kind.tuple[*]\" 1\n     TupleWithDiscr(i32) = 1,\n-    // @is    \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.discriminant\" '{\"expr\": \"0b10\", \"value\": \"2\"}'\n-    // @count \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.variant.discriminant\" '{\"expr\": \"0b10\", \"value\": \"2\"}'\n+    // @count \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.variant.kind.tuple[*]\" 2\n     TupleWithBinDiscr(i32, i32) = 0b10,\n }"}, {"sha": "b00156124fc2dc94d7cd920f66c67b067aca99bd", "filename": "tests/rustdoc-json/enums/doc_link_to_foreign_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdoc_link_to_foreign_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fdoc_link_to_foreign_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fdoc_link_to_foreign_variant.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,7 +5,7 @@\n extern crate color;\n use color::Color::Red;\n \n-// @set red = \"$.index[*][?(@.inner.is_crate == true)].links.Red\"\n+// @set red = \"$.index[*][?(@.inner.module.is_crate)].links.Red\"\n \n // @!has \"$.index[*][?(@.name == 'Red')]\"\n // @!has \"$.index[*][?(@.name == 'Color')]\""}, {"sha": "5c0d0ffd3dfbecf392c10edeb3fa3ba3b6fd1b4c", "filename": "tests/rustdoc-json/enums/field_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Ffield_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Ffield_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Ffield_hidden.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,8 +5,8 @@\n \n // @has \"$.index[*][?(@.name=='ParseError')]\"\n // @has \"$.index[*][?(@.name=='UnexpectedEndTag')]\"\n-// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.kind.tuple\" [null]\n-// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.discriminant\" null\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant.kind.tuple\" [null]\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant.discriminant\" null\n \n pub enum ParseError {\n     UnexpectedEndTag(#[doc(hidden)] u32),"}, {"sha": "e283c07400655c3a1f905f332add15ba41ccee63", "filename": "tests/rustdoc-json/enums/kind.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fkind.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,28 +5,28 @@\n \n pub enum Foo {\n     // @set Unit = \"$.index[*][?(@.name=='Unit')].id\"\n-    // @is \"$.index[*][?(@.name=='Unit')].inner.kind\" '\"plain\"'\n+    // @is \"$.index[*][?(@.name=='Unit')].inner.variant.kind\" '\"plain\"'\n     Unit,\n     // @set Named = \"$.index[*][?(@.name=='Named')].id\"\n-    // @is \"$.index[*][?(@.name=='Named')].inner.kind.struct\" '{\"fields\": [], \"fields_stripped\": false}'\n+    // @is \"$.index[*][?(@.name=='Named')].inner.variant.kind.struct\" '{\"fields\": [], \"fields_stripped\": false}'\n     Named {},\n     // @set Tuple = \"$.index[*][?(@.name=='Tuple')].id\"\n-    // @is \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple\" []\n+    // @is \"$.index[*][?(@.name=='Tuple')].inner.variant.kind.tuple\" []\n     Tuple(),\n     // @set NamedField = \"$.index[*][?(@.name=='NamedField')].id\"\n-    // @set x = \"$.index[*][?(@.name=='x' && @.kind=='struct_field')].id\"\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.kind.struct.fields[*]\" $x\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.kind.struct.fields_stripped\" false\n+    // @set x = \"$.index[*][?(@.name=='x' && @.inner.struct_field)].id\"\n+    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant.kind.struct.fields[*]\" $x\n+    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant.kind.struct.fields_stripped\" false\n     NamedField { x: i32 },\n     // @set TupleField = \"$.index[*][?(@.name=='TupleField')].id\"\n-    // @set tup_field = \"$.index[*][?(@.name=='0' && @.kind=='struct_field')].id\"\n-    // @is \"$.index[*][?(@.name=='TupleField')].inner.kind.tuple[*]\" $tup_field\n+    // @set tup_field = \"$.index[*][?(@.name=='0' && @.inner.struct_field)].id\"\n+    // @is \"$.index[*][?(@.name=='TupleField')].inner.variant.kind.tuple[*]\" $tup_field\n     TupleField(i32),\n }\n \n-// @is    \"$.index[*][?(@.name=='Foo')].inner.variants[0]\" $Unit\n-// @is    \"$.index[*][?(@.name=='Foo')].inner.variants[1]\" $Named\n-// @is    \"$.index[*][?(@.name=='Foo')].inner.variants[2]\" $Tuple\n-// @is    \"$.index[*][?(@.name=='Foo')].inner.variants[3]\" $NamedField\n-// @is    \"$.index[*][?(@.name=='Foo')].inner.variants[4]\" $TupleField\n-// @count \"$.index[*][?(@.name=='Foo')].inner.variants[*]\" 5\n+// @is    \"$.index[*][?(@.name=='Foo')].inner.enum.variants[0]\" $Unit\n+// @is    \"$.index[*][?(@.name=='Foo')].inner.enum.variants[1]\" $Named\n+// @is    \"$.index[*][?(@.name=='Foo')].inner.enum.variants[2]\" $Tuple\n+// @is    \"$.index[*][?(@.name=='Foo')].inner.enum.variants[3]\" $NamedField\n+// @is    \"$.index[*][?(@.name=='Foo')].inner.enum.variants[4]\" $TupleField\n+// @count \"$.index[*][?(@.name=='Foo')].inner.enum.variants[*]\" 5"}, {"sha": "2676c4e4157820cd08d7e65cc575a821fe576ac8", "filename": "tests/rustdoc-json/enums/struct_field_hidden.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,8 +9,8 @@ pub enum Foo {\n         // @set y = \"$.index[*][?(@.name=='y')].id\"\n         y: i32,\n     },\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields_stripped\" true\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[0]\" $b\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[1]\" $y\n-    // @count \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[*]\" 2\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.variant.kind.struct.fields_stripped\" true\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.variant.kind.struct.fields[0]\" $b\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.variant.kind.struct.fields[1]\" $y\n+    // @count \"$.index[*][?(@.name=='Variant')].inner.variant.kind.struct.fields[*]\" 2\n }"}, {"sha": "3aeb0356420a49518e3a795f437899045f2612a9", "filename": "tests/rustdoc-json/enums/tuple_fields_hidden.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -14,47 +14,47 @@\n // @set 3.3.1 = \"$.index[*][?(@.docs=='3.3.1')].id\"\n \n pub enum EnumWithStrippedTupleVariants {\n-    // @count \"$.index[*][?(@.name=='None')].inner.kind.tuple[*]\" 0\n+    // @count \"$.index[*][?(@.name=='None')].inner.variant.kind.tuple[*]\" 0\n     None(),\n \n-    // @count \"$.index[*][?(@.name=='One')].inner.kind.tuple[*]\" 1\n-    // @is    \"$.index[*][?(@.name=='One')].inner.kind.tuple[0]\" $1.1.0\n+    // @count \"$.index[*][?(@.name=='One')].inner.variant.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='One')].inner.variant.kind.tuple[0]\" $1.1.0\n     One(/** 1.1.0*/ bool),\n-    // @count \"$.index[*][?(@.name=='OneHidden')].inner.kind.tuple[*]\" 1\n-    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.kind.tuple[0]\" null\n+    // @count \"$.index[*][?(@.name=='OneHidden')].inner.variant.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.variant.kind.tuple[0]\" null\n     OneHidden(#[doc(hidden)] bool),\n \n-    // @count \"$.index[*][?(@.name=='Two')].inner.kind.tuple[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='Two')].inner.kind.tuple[0]\" $2.1.0\n-    // @is    \"$.index[*][?(@.name=='Two')].inner.kind.tuple[1]\" $2.1.1\n+    // @count \"$.index[*][?(@.name=='Two')].inner.variant.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='Two')].inner.variant.kind.tuple[0]\" $2.1.0\n+    // @is    \"$.index[*][?(@.name=='Two')].inner.variant.kind.tuple[1]\" $2.1.1\n     Two(/** 2.1.0*/ bool, /** 2.1.1*/ bool),\n-    // @count \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[0]\" null\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[1]\" $2.2.1\n+    // @count \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant.kind.tuple[1]\" $2.2.1\n     TwoLeftHidden(#[doc(hidden)] bool, /** 2.2.1*/ bool),\n-    // @count \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[0]\" $2.3.0\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[1]\" null\n+    // @count \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant.kind.tuple[0]\" $2.3.0\n+    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant.kind.tuple[1]\" null\n     TwoRightHidden(/** 2.3.0*/ bool, #[doc(hidden)] bool),\n-    // @count \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[0]\" null\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[1]\" null\n+    // @count \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant.kind.tuple[1]\" null\n     TwoBothHidden(#[doc(hidden)] bool, #[doc(hidden)] bool),\n \n-    // @count \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[0]\" null\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[1]\" $3.1.1\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[2]\" $3.1.2\n+    // @count \"$.index[*][?(@.name=='Three1')].inner.variant.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant.kind.tuple[1]\" $3.1.1\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant.kind.tuple[2]\" $3.1.2\n     Three1(#[doc(hidden)] bool, /** 3.1.1*/ bool, /** 3.1.2*/ bool),\n-    // @count \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[0]\" $3.2.0\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[1]\" null\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[2]\" $3.2.2\n+    // @count \"$.index[*][?(@.name=='Three2')].inner.variant.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant.kind.tuple[0]\" $3.2.0\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant.kind.tuple[1]\" null\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant.kind.tuple[2]\" $3.2.2\n     Three2(/** 3.2.0*/ bool, #[doc(hidden)] bool, /** 3.2.2*/ bool),\n-    // @count \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[0]\" $3.3.0\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[1]\" $3.3.1\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[2]\" null\n+    // @count \"$.index[*][?(@.name=='Three3')].inner.variant.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant.kind.tuple[0]\" $3.3.0\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant.kind.tuple[1]\" $3.3.1\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant.kind.tuple[2]\" null\n     Three3(/** 3.3.0*/ bool, /** 3.3.1*/ bool, #[doc(hidden)] bool),\n }\n \n@@ -70,14 +70,14 @@ pub enum EnumWithStrippedTupleVariants {\n // @is \"$.index[*][?(@.docs=='3.3.0')].name\" '\"0\"'\n // @is \"$.index[*][?(@.docs=='3.3.1')].name\" '\"1\"'\n \n-// @is \"$.index[*][?(@.docs=='1.1.0')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='2.1.0')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='2.1.1')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='2.2.1')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='2.3.0')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='3.1.1')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='3.1.2')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='3.2.0')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='3.2.2')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='3.3.0')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n-// @is \"$.index[*][?(@.docs=='3.3.1')].inner\" '{\"kind\": \"primitive\", \"inner\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='1.1.0')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='2.1.0')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='2.1.1')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='2.2.1')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='2.3.0')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='3.1.1')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='3.1.2')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='3.2.0')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='3.2.2')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='3.3.0')].inner.struct_field\" '{\"primitive\": \"bool\"}'\n+// @is \"$.index[*][?(@.docs=='3.3.1')].inner.struct_field\" '{\"primitive\": \"bool\"}'"}, {"sha": "49990ec53315fe9f496a2d4b404436f1f19efa17", "filename": "tests/rustdoc-json/enums/use_glob.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fuse_glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fuse_glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fuse_glob.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -10,9 +10,9 @@ pub enum Color {\n     Blue,\n }\n \n-// @set use_Color = \"$.index[*][?(@.kind == 'import')].id\"\n-// @is \"$.index[*][?(@.kind == 'import')].inner.id\" $Color\n-// @is \"$.index[*][?(@.kind == 'import')].inner.glob\" true\n+// @set use_Color = \"$.index[*][?(@.inner.import)].id\"\n+// @is \"$.index[*][?(@.inner.import)].inner.import.id\" $Color\n+// @is \"$.index[*][?(@.inner.import)].inner.import.glob\" true\n pub use Color::*;\n \n-// @ismany \"$.index[*][?(@.name == 'use_glob')].inner.items[*]\" $Color $use_Color\n+// @ismany \"$.index[*][?(@.name == 'use_glob')].inner.module.items[*]\" $Color $use_Color"}, {"sha": "8190e1cbe81d3872bb52577eed973bdd501dbef5", "filename": "tests/rustdoc-json/enums/use_variant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fuse_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fuse_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fuse_variant.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -6,10 +6,10 @@ pub enum AlwaysNone {\n     // @set None = \"$.index[*][?(@.name == 'None')].id\"\n     None,\n }\n-// @is \"$.index[*][?(@.name == 'AlwaysNone')].inner.variants[*]\" $None\n+// @is \"$.index[*][?(@.name == 'AlwaysNone')].inner.enum.variants[*]\" $None\n \n-// @set use_None = \"$.index[*][?(@.kind == 'import')].id\"\n-// @is \"$.index[*][?(@.kind == 'import')].inner.id\" $None\n+// @set use_None = \"$.index[*][?(@.inner.import)].id\"\n+// @is \"$.index[*][?(@.inner.import)].inner.import.id\" $None\n pub use AlwaysNone::None;\n \n-// @ismany \"$.index[*][?(@.name == 'use_variant')].inner.items[*]\" $AlwaysNone $use_None\n+// @ismany \"$.index[*][?(@.name == 'use_variant')].inner.module.items[*]\" $AlwaysNone $use_None"}, {"sha": "a79e899d85f3f005fbd0d6b32d5421360090bdf2", "filename": "tests/rustdoc-json/enums/use_variant_foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fuse_variant_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fuse_variant_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fuse_variant_foreign.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,7 +2,7 @@\n \n extern crate color;\n \n-// @is \"$.index[*][?(@.inner.name == 'Red')].kind\" '\"import\"'\n+// @has \"$.index[*].inner.import[?(@.name == 'Red')]\"\n pub use color::Color::Red;\n \n // @!has \"$.index[*][?(@.name == 'Red')]\""}, {"sha": "fe40f1a5d5db67996ad2179e89103dfc1acc6ff9", "filename": "tests/rustdoc-json/enums/variant_struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fvariant_struct.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,10 +1,10 @@\n // @is \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n+// @has \"$.index[*][?(@.name=='EnumStruct')].inner.enum\"\n pub enum EnumStruct {\n-    // @is \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='x')].inner.struct_field\"\n     // @set x = \"$.index[*][?(@.name=='x')].id\"\n-    // @is \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='y')].inner.struct_field\"\n     // @set y = \"$.index[*][?(@.name=='y')].id\"\n-    // @ismany \"$.index[*][?(@.name=='VariantS')].inner.kind.struct.fields[*]\" $x $y\n+    // @ismany \"$.index[*][?(@.name=='VariantS')].inner.variant.kind.struct.fields[*]\" $x $y\n     VariantS { x: u32, y: String },\n }"}, {"sha": "358fc1079cb834a67822538f861a851deb2301fa", "filename": "tests/rustdoc-json/enums/variant_tuple_struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,10 +1,10 @@\n // @is \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n+// @has \"$.index[*][?(@.name=='EnumTupleStruct')].inner.enum\"\n pub enum EnumTupleStruct {\n-    // @is \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='0')].inner.struct_field\"\n     // @set f0 = \"$.index[*][?(@.name=='0')].id\"\n-    // @is \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n+    // @has \"$.index[*][?(@.name=='1')].inner.struct_field\"\n     // @set f1 = \"$.index[*][?(@.name=='1')].id\"\n-    // @ismany \"$.index[*][?(@.name=='VariantA')].inner.kind.tuple[*]\" $f0 $f1\n+    // @ismany \"$.index[*][?(@.name=='VariantA')].inner.variant.kind.tuple[*]\" $f0 $f1\n     VariantA(u32, String),\n }"}, {"sha": "77c0e82330f26feea4d5e79a16516560b8ecef5a", "filename": "tests/rustdoc-json/fn_pointer/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffn_pointer%2Fabi.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,23 +2,23 @@\n \n #![feature(abi_vectorcall)]\n \n-// @is \"$.index[*][?(@.name=='AbiRust')].inner.type.inner.header.abi\" \\\"Rust\\\"\n+// @is \"$.index[*][?(@.name=='AbiRust')].inner.typedef.type.function_pointer.header.abi\" \\\"Rust\\\"\n pub type AbiRust = fn();\n \n-// @is \"$.index[*][?(@.name=='AbiC')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='AbiC')].inner.typedef.type.function_pointer.header.abi\" '{\"C\": {\"unwind\": false}}'\n pub type AbiC = extern \"C\" fn();\n \n-// @is \"$.index[*][?(@.name=='AbiSystem')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='AbiSystem')].inner.typedef.type.function_pointer.header.abi\" '{\"System\": {\"unwind\": false}}'\n pub type AbiSystem = extern \"system\" fn();\n \n-// @is \"$.index[*][?(@.name=='AbiCUnwind')].inner.type.inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='AbiCUnwind')].inner.typedef.type.function_pointer.header.abi\" '{\"C\": {\"unwind\": true}}'\n pub type AbiCUnwind = extern \"C-unwind\" fn();\n \n-// @is \"$.index[*][?(@.name=='AbiSystemUnwind')].inner.type.inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='AbiSystemUnwind')].inner.typedef.type.function_pointer.header.abi\" '{\"System\": {\"unwind\": true}}'\n pub type AbiSystemUnwind = extern \"system-unwind\" fn();\n \n-// @is \"$.index[*][?(@.name=='AbiVecorcall')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+// @is \"$.index[*][?(@.name=='AbiVecorcall')].inner.typedef.type.function_pointer.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n pub type AbiVecorcall = extern \"vectorcall\" fn();\n \n-// @is \"$.index[*][?(@.name=='AbiVecorcallUnwind')].inner.type.inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+// @is \"$.index[*][?(@.name=='AbiVecorcallUnwind')].inner.typedef.type.function_pointer.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n pub type AbiVecorcallUnwind = extern \"vectorcall-unwind\" fn();"}, {"sha": "48672f12da1a4eb5e026ab44d3a83ee496486b4c", "filename": "tests/rustdoc-json/fn_pointer/generics.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,12 +3,11 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @count \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[*]\" 1\n-// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][0]\" '\"val\"'\n-// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'c\\\"\n-// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.output\" '{ \"kind\": \"primitive\", \"inner\": \"i32\" }'\n-// @count \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[*]\" 1\n-// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].name\" \\\"\\'c\\\"\n-// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @count \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.decl.inputs[*]\" 1\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.decl.inputs[0][0]\" '\"val\"'\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.decl.inputs[0][1].borrowed_ref.lifetime\" \\\"\\'c\\\"\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.decl.output.primitive\" \\\"i32\\\"\n+// @count \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.generic_params[*]\" 1\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.generic_params[0].name\" \\\"\\'c\\\"\n+// @is \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.typedef.type.function_pointer.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n pub type WithHigherRankTraitBounds = for<'c> fn(val: &'c i32) -> i32;"}, {"sha": "0ab776c21eda2d52a5ae06a29a4d07bd81958975", "filename": "tests/rustdoc-json/fn_pointer/qualifiers.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffn_pointer%2Fqualifiers.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,9 +1,11 @@\n-// @is \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.unsafe\" false\n-// @is \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.const\" false\n-// @is \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header.async\" false\n+// ignore-tidy-linelength\n+\n+// @is \"$.index[*][?(@.name=='FnPointer')].inner.typedef.type.function_pointer.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='FnPointer')].inner.typedef.type.function_pointer.header.const\" false\n+// @is \"$.index[*][?(@.name=='FnPointer')].inner.typedef.type.function_pointer.header.async\" false\n pub type FnPointer = fn();\n \n-// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.unsafe\" true\n-// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.const\" false\n-// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header.async\" false\n+// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.typedef.type.function_pointer.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.typedef.type.function_pointer.header.const\" false\n+// @is \"$.index[*][?(@.name=='UnsafePointer')].inner.typedef.type.function_pointer.header.async\" false\n pub type UnsafePointer = unsafe fn();"}, {"sha": "d7b98b5924b84edfa2d258334ce7029cbc357312", "filename": "tests/rustdoc-json/fns/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fabi.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,23 +2,23 @@\n \n #![feature(abi_vectorcall)]\n \n-// @is \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+// @is \"$.index[*][?(@.name=='abi_rust')].inner.function.header.abi\" \\\"Rust\\\"\n pub fn abi_rust() {}\n \n-// @is \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='abi_c')].inner.function.header.abi\" '{\"C\": {\"unwind\": false}}'\n pub extern \"C\" fn abi_c() {}\n \n-// @is \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+// @is \"$.index[*][?(@.name=='abi_system')].inner.function.header.abi\" '{\"System\": {\"unwind\": false}}'\n pub extern \"system\" fn abi_system() {}\n \n-// @is \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='abi_c_unwind')].inner.function.header.abi\" '{\"C\": {\"unwind\": true}}'\n pub extern \"C-unwind\" fn abi_c_unwind() {}\n \n-// @is \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+// @is \"$.index[*][?(@.name=='abi_system_unwind')].inner.function.header.abi\" '{\"System\": {\"unwind\": true}}'\n pub extern \"system-unwind\" fn abi_system_unwind() {}\n \n-// @is \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+// @is \"$.index[*][?(@.name=='abi_vectorcall')].inner.function.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n pub extern \"vectorcall\" fn abi_vectorcall() {}\n \n-// @is \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+// @is \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.function.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}"}, {"sha": "8192f2e6ae633a70f85d5e0087545e56cf1b82a8", "filename": "tests/rustdoc-json/fns/async_return.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fasync_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fasync_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fasync_return.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,32 +5,30 @@\n \n use std::future::Future;\n \n-// @is \"$.index[*][?(@.name=='get_int')].inner.decl.output\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n-// @is \"$.index[*][?(@.name=='get_int')].inner.header.async\" false\n+// @is \"$.index[*][?(@.name=='get_int')].inner.function.decl.output.primitive\" \\\"i32\\\"\n+// @is \"$.index[*][?(@.name=='get_int')].inner.function.header.async\" false\n pub fn get_int() -> i32 {\n     42\n }\n \n-// @is \"$.index[*][?(@.name=='get_int_async')].inner.decl.output\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n-// @is \"$.index[*][?(@.name=='get_int_async')].inner.header.async\" true\n+// @is \"$.index[*][?(@.name=='get_int_async')].inner.function.decl.output.primitive\" \\\"i32\\\"\n+// @is \"$.index[*][?(@.name=='get_int_async')].inner.function.header.async\" true\n pub async fn get_int_async() -> i32 {\n     42\n }\n \n-// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.kind\" '\"impl_trait\"'\n-// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.inner[0].trait_bound.trait.name\" '\"Future\"'\n-// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].name\" '\"Output\"'\n-// @is \"$.index[*][?(@.name=='get_int_future')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].binding.equality.type\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n-// @is \"$.index[*][?(@.name=='get_int_future')].inner.header.async\" false\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.function.decl.output.impl_trait[0].trait_bound.trait.name\" '\"Future\"'\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.function.decl.output.impl_trait[0].trait_bound.trait.args.angle_bracketed.bindings[0].name\" '\"Output\"'\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.function.decl.output.impl_trait[0].trait_bound.trait.args.angle_bracketed.bindings[0].binding.equality.type.primitive\"  \\\"i32\\\"\n+// @is \"$.index[*][?(@.name=='get_int_future')].inner.function.header.async\" false\n pub fn get_int_future() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.kind\" '\"impl_trait\"'\n-// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.inner[0].trait_bound.trait.name\" '\"Future\"'\n-// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].name\" '\"Output\"'\n-// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.decl.output.inner[0].trait_bound.trait.args.angle_bracketed.bindings[0].binding.equality.type\" '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n-// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.header.async\" true\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.function.decl.output.impl_trait[0].trait_bound.trait.name\" '\"Future\"'\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.function.decl.output.impl_trait[0].trait_bound.trait.args.angle_bracketed.bindings[0].name\" '\"Output\"'\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.function.decl.output.impl_trait[0].trait_bound.trait.args.angle_bracketed.bindings[0].binding.equality.type.primitive\" \\\"i32\\\"\n+// @is \"$.index[*][?(@.name=='get_int_future_async')].inner.function.header.async\" true\n pub async fn get_int_future_async() -> impl Future<Output = i32> {\n     async { 42 }\n }"}, {"sha": "d6ea343b9911ae72fd878f80d8c6abe14600a173", "filename": "tests/rustdoc-json/fns/extern_c_variadic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fextern_c_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fextern_c_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fextern_c_variadic.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,8 +2,8 @@\n #![no_core]\n \n extern \"C\" {\n-    // @is \"$.index[*][?(@.name == 'not_variadic')].inner.decl.c_variadic\" false\n+    // @is \"$.index[*][?(@.name == 'not_variadic')].inner.function.decl.c_variadic\" false\n     pub fn not_variadic(_: i32);\n-    // @is \"$.index[*][?(@.name == 'variadic')].inner.decl.c_variadic\" true\n+    // @is \"$.index[*][?(@.name == 'variadic')].inner.function.decl.c_variadic\" true\n     pub fn variadic(_: i32, ...);\n }"}, {"sha": "539d17f831ebf6e980700829e1287455d295091b", "filename": "tests/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,59 +9,55 @@ pub trait Foo {}\n // @set generic_foo = \"$.index[*][?(@.name=='GenericFoo')].id\"\n pub trait GenericFoo<'a> {}\n \n-// @is \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n-// @count \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n-// @is \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n-// @is \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.default\" 'null'\n-// @count \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[*]\" 1\n-// @is \"$.index[*][?(@.name=='generics')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" '$foo'\n-// @count \"$.index[*][?(@.name=='generics')].inner.decl.inputs[*]\" 1\n-// @is \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][0]\" '\"f\"'\n-// @is \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n-// @is \"$.index[*][?(@.name=='generics')].inner.decl.inputs[0][1].inner\" '\"F\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.function.generics.where_predicates\" \"[]\"\n+// @count \"$.index[*][?(@.name=='generics')].inner.function.generics.params[*]\" 1\n+// @is \"$.index[*][?(@.name=='generics')].inner.function.generics.params[0].name\" '\"F\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.function.generics.params[0].kind.type.default\" 'null'\n+// @count \"$.index[*][?(@.name=='generics')].inner.function.generics.params[0].kind.type.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='generics')].inner.function.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" '$foo'\n+// @count \"$.index[*][?(@.name=='generics')].inner.function.decl.inputs[*]\" 1\n+// @is \"$.index[*][?(@.name=='generics')].inner.function.decl.inputs[0][0]\" '\"f\"'\n+// @is \"$.index[*][?(@.name=='generics')].inner.function.decl.inputs[0][1].generic\" '\"F\"'\n pub fn generics<F: Foo>(f: F) {}\n \n-// @is \"$.index[*][?(@.name=='impl_trait')].inner.generics.where_predicates\" \"[]\"\n-// @count \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[*]\" 1\n-// @is \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].name\" '\"impl Foo\"'\n-// @is \"$.index[*][?(@.name=='impl_trait')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $foo\n-// @count \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[*]\" 1\n-// @is \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][0]\" '\"f\"'\n-// @is \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @count \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[*]\" 1\n-// @is \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.function.generics.where_predicates\" \"[]\"\n+// @count \"$.index[*][?(@.name=='impl_trait')].inner.function.generics.params[*]\" 1\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.function.generics.params[0].name\" '\"impl Foo\"'\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.function.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $foo\n+// @count \"$.index[*][?(@.name=='impl_trait')].inner.function.decl.inputs[*]\" 1\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.function.decl.inputs[0][0]\" '\"f\"'\n+// @count \"$.index[*][?(@.name=='impl_trait')].inner.function.decl.inputs[0][1].impl_trait[*]\" 1\n+// @is \"$.index[*][?(@.name=='impl_trait')].inner.function.decl.inputs[0][1].impl_trait[0].trait_bound.trait.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 3\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 3\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.params[*]\" 3\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.params[0].name\" '\"F\"'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.decl.inputs[*]\" 3\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.decl.inputs[0][0]\" '\"f\"'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.decl.inputs[0][1].generic\" '\"F\"'\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[*]\" 3\n \n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[0].bound_predicate.type.generic\" \\\"F\\\"\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n \n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.id\" $generic_foo\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.type.generic\" \\\"G\\\"\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.id\" $generic_foo\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind.lifetime.outlives\" \"[]\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n \n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n-// @count \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n-// @is \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.type.borrowed_ref.lifetime\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.type.borrowed_ref.type.generic\" \\\"H\\\"\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n+// @count \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='where_clase')].inner.function.generics.where_predicates[2].bound_predicate.generic_params[0].kind.lifetime.outlives\" \"[]\"\n pub fn where_clase<F, G, H>(f: F, g: G, h: H)\n where\n     F: Foo,"}, {"sha": "27d842066f4e233c20549ca087c4f25e526a517b", "filename": "tests/rustdoc-json/fns/generic_returns.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fgeneric_returns.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,15 +3,14 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @count \"$.index[*][?(@.name=='generic_returns')].inner.items[*]\" 2\n+// @count \"$.index[*][?(@.name=='generic_returns')].inner.module.items[*]\" 2\n \n // @set foo = \"$.index[*][?(@.name=='Foo')].id\"\n pub trait Foo {}\n \n-// @is \"$.index[*][?(@.name=='get_foo')].inner.decl.inputs\" []\n-// @is \"$.index[*][?(@.name=='get_foo')].inner.decl.output.kind\" '\"impl_trait\"'\n-// @count \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[*]\" 1\n-// @is \"$.index[*][?(@.name=='get_foo')].inner.decl.output.inner[0].trait_bound.trait.id\" $foo\n+// @is \"$.index[*][?(@.name=='get_foo')].inner.function.decl.inputs\" []\n+// @count \"$.index[*][?(@.name=='get_foo')].inner.function.decl.output.impl_trait[*]\" 1\n+// @is \"$.index[*][?(@.name=='get_foo')].inner.function.decl.output.impl_trait[0].trait_bound.trait.id\" $foo\n pub fn get_foo() -> impl Foo {\n     Fooer {}\n }"}, {"sha": "5239a6f21f534e08413d5c7bd8c459aea1d9bc1f", "filename": "tests/rustdoc-json/fns/generics.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -6,21 +6,20 @@\n // @set wham_id = \"$.index[*][?(@.name=='Wham')].id\"\n pub trait Wham {}\n \n-// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.where_predicates\" []\n-// @count \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[*]\" 1\n-// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].name\" '\"T\"'\n-// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n-// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n-// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.decl.inputs\" '[[\"w\", {\"inner\": \"T\", \"kind\": \"generic\"}]]'\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.function.generics.where_predicates\" []\n+// @count \"$.index[*][?(@.name=='one_generic_param_fn')].inner.function.generics.params[*]\" 1\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.function.generics.params[0].name\" '\"T\"'\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.function.generics.params[0].kind.type.synthetic\" false\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.function.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n+// @is    \"$.index[*][?(@.name=='one_generic_param_fn')].inner.function.decl.inputs\" '[[\"w\", {\"generic\": \"T\"}]]'\n pub fn one_generic_param_fn<T: Wham>(w: T) {}\n \n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.where_predicates\" []\n-// @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[*]\" 1\n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].name\" '\"impl Wham\"'\n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n-// @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[*]\" 1\n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][0]\" '\"w\"'\n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $wham_id\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.generics.where_predicates\" []\n+// @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.generics.params[*]\" 1\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.generics.params[0].name\" '\"impl Wham\"'\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.generics.params[0].kind.type.synthetic\" true\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $wham_id\n+// @count \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.decl.inputs[*]\" 1\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.decl.inputs[0][0]\" '\"w\"'\n+// @is    \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.function.decl.inputs[0][1].impl_trait[0].trait_bound.trait.id\" $wham_id\n pub fn one_synthetic_generic_param_fn(w: impl Wham) {}"}, {"sha": "55f24797ac0dc662c260e3cb859e9700dc236acd", "filename": "tests/rustdoc-json/fns/pattern_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fpattern_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fpattern_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fpattern_arg.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,7 +1,7 @@\n-// @is \"$.index[*][?(@.name=='fst')].inner.decl.inputs[0][0]\" '\"(x, _)\"'\n+// @is \"$.index[*][?(@.name=='fst')].inner.function.decl.inputs[0][0]\" '\"(x, _)\"'\n pub fn fst<X, Y>((x, _): (X, Y)) -> X {\n     x\n }\n \n-// @is \"$.index[*][?(@.name=='drop_int')].inner.decl.inputs[0][0]\" '\"_\"'\n+// @is \"$.index[*][?(@.name=='drop_int')].inner.function.decl.inputs[0][0]\" '\"_\"'\n pub fn drop_int(_: i32) {}"}, {"sha": "643865a3f07f13838e938d68fb39cb4c8cafdb11", "filename": "tests/rustdoc-json/fns/qualifiers.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Fqualifiers.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,33 +1,33 @@\n // edition:2018\n \n-// @is \"$.index[*][?(@.name=='nothing_fn')].inner.header.async\" false\n-// @is \"$.index[*][?(@.name=='nothing_fn')].inner.header.const\"  false\n-// @is \"$.index[*][?(@.name=='nothing_fn')].inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='nothing_fn')].inner.function.header.async\" false\n+// @is \"$.index[*][?(@.name=='nothing_fn')].inner.function.header.const\"  false\n+// @is \"$.index[*][?(@.name=='nothing_fn')].inner.function.header.unsafe\" false\n pub fn nothing_fn() {}\n \n-// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.header.async\"  false\n-// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.header.const\"  false\n-// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.function.header.async\"  false\n+// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.function.header.const\"  false\n+// @is \"$.index[*][?(@.name=='unsafe_fn')].inner.function.header.unsafe\" true\n pub unsafe fn unsafe_fn() {}\n \n-// @is \"$.index[*][?(@.name=='const_fn')].inner.header.async\"  false\n-// @is \"$.index[*][?(@.name=='const_fn')].inner.header.const\"  true\n-// @is \"$.index[*][?(@.name=='const_fn')].inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='const_fn')].inner.function.header.async\"  false\n+// @is \"$.index[*][?(@.name=='const_fn')].inner.function.header.const\"  true\n+// @is \"$.index[*][?(@.name=='const_fn')].inner.function.header.unsafe\" false\n pub const fn const_fn() {}\n \n-// @is \"$.index[*][?(@.name=='async_fn')].inner.header.async\"  true\n-// @is \"$.index[*][?(@.name=='async_fn')].inner.header.const\"  false\n-// @is \"$.index[*][?(@.name=='async_fn')].inner.header.unsafe\" false\n+// @is \"$.index[*][?(@.name=='async_fn')].inner.function.header.async\"  true\n+// @is \"$.index[*][?(@.name=='async_fn')].inner.function.header.const\"  false\n+// @is \"$.index[*][?(@.name=='async_fn')].inner.function.header.unsafe\" false\n pub async fn async_fn() {}\n \n-// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.async\"  true\n-// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.const\"  false\n-// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.function.header.async\"  true\n+// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.function.header.const\"  false\n+// @is \"$.index[*][?(@.name=='async_unsafe_fn')].inner.function.header.unsafe\" true\n pub async unsafe fn async_unsafe_fn() {}\n \n-// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.async\"  false\n-// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.const\"  true\n-// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header.unsafe\" true\n+// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.function.header.async\"  false\n+// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.function.header.const\"  true\n+// @is \"$.index[*][?(@.name=='const_unsafe_fn')].inner.function.header.unsafe\" true\n pub const unsafe fn const_unsafe_fn() {}\n \n // It's impossible for a function to be both const and async, so no test for that"}, {"sha": "e8a7dce8b0aac862163dc94cc85a85ae34ed6cc5", "filename": "tests/rustdoc-json/fns/return_type_alias.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Freturn_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ffns%2Freturn_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ffns%2Freturn_type_alias.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,8 +3,7 @@\n /// @set foo = \"$.index[*][?(@.name=='Foo')].id\"\n pub type Foo = i32;\n \n-// @is \"$.index[*][?(@.name=='demo')].inner.decl.output.kind\" '\"resolved_path\"'\n-// @is \"$.index[*][?(@.name=='demo')].inner.decl.output.inner.id\" $foo\n+// @is \"$.index[*][?(@.name=='demo')].inner.function.decl.output.resolved_path.id\" $foo\n pub fn demo() -> Foo {\n     42\n }"}, {"sha": "99c57ff654093e8701cc2758a34eeaa13e9542cb", "filename": "tests/rustdoc-json/generic-associated-types/gats.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fgeneric-associated-types%2Fgats.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,34 +9,32 @@ pub trait Sized {}\n pub trait Display {}\n \n pub trait LendingIterator {\n-    // @count \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*]\" 1\n-    // @is \"$.index[*][?(@.name=='LendingItem')].inner.generics.params[*].name\" \\\"\\'a\\\"\n-    // @count \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*]\" 1\n-    // @is \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.type.inner\" \\\"Self\\\"\n-    // @is \"$.index[*][?(@.name=='LendingItem')].inner.generics.where_predicates[*].bound_predicate.bounds[*].outlives\" \\\"\\'a\\\"\n-    // @count \"$.index[*][?(@.name=='LendingItem')].inner.bounds[*]\" 1\n+    // @count \"$.index[*][?(@.name=='LendingItem')].inner.assoc_type.generics.params[*]\" 1\n+    // @is \"$.index[*][?(@.name=='LendingItem')].inner.assoc_type.generics.params[*].name\" \\\"\\'a\\\"\n+    // @count \"$.index[*][?(@.name=='LendingItem')].inner.assoc_type.generics.where_predicates[*]\" 1\n+    // @is \"$.index[*][?(@.name=='LendingItem')].inner.assoc_type.generics.where_predicates[*].bound_predicate.type.generic\" \\\"Self\\\"\n+    // @is \"$.index[*][?(@.name=='LendingItem')].inner.assoc_type.generics.where_predicates[*].bound_predicate.bounds[*].outlives\" \\\"\\'a\\\"\n+    // @count \"$.index[*][?(@.name=='LendingItem')].inner.assoc_type.bounds[*]\" 1\n     type LendingItem<'a>: Display\n     where\n         Self: 'a;\n \n-    // @is \"$.index[*][?(@.name=='lending_next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n-    // @count \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 1\n-    // @count \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.args.angle_bracketed.bindings[*]\" 0\n-    // @is \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.self_type.inner\" \\\"Self\\\"\n-    // @is \"$.index[*][?(@.name=='lending_next')].inner.decl.output.inner.name\" \\\"LendingItem\\\"\n+    // @count \"$.index[*][?(@.name=='lending_next')].inner.function.decl.output.qualified_path.args.angle_bracketed.args[*]\" 1\n+    // @count \"$.index[*][?(@.name=='lending_next')].inner.function.decl.output.qualified_path.args.angle_bracketed.bindings[*]\" 0\n+    // @is \"$.index[*][?(@.name=='lending_next')].inner.function.decl.output.qualified_path.self_type.generic\" \\\"Self\\\"\n+    // @is \"$.index[*][?(@.name=='lending_next')].inner.function.decl.output.qualified_path.name\" \\\"LendingItem\\\"\n     fn lending_next<'a>(&'a self) -> Self::LendingItem<'a>;\n }\n \n pub trait Iterator {\n-    // @count \"$.index[*][?(@.name=='Item')].inner.generics.params[*]\" 0\n-    // @count \"$.index[*][?(@.name=='Item')].inner.generics.where_predicates[*]\" 0\n-    // @count \"$.index[*][?(@.name=='Item')].inner.bounds[*]\" 1\n+    // @count \"$.index[*][?(@.name=='Item')].inner.assoc_type.generics.params[*]\" 0\n+    // @count \"$.index[*][?(@.name=='Item')].inner.assoc_type.generics.where_predicates[*]\" 0\n+    // @count \"$.index[*][?(@.name=='Item')].inner.assoc_type.bounds[*]\" 1\n     type Item: Display;\n \n-    // @is \"$.index[*][?(@.name=='next')].inner.decl.output.kind\" \\\"qualified_path\\\"\n-    // @count \"$.index[*][?(@.name=='next')].inner.decl.output.inner.args.angle_bracketed.args[*]\" 0\n-    // @count \"$.index[*][?(@.name=='next')].inner.decl.output.inner.args.angle_bracketed.bindings[*]\" 0\n-    // @is \"$.index[*][?(@.name=='next')].inner.decl.output.inner.self_type.inner\" \\\"Self\\\"\n-    // @is \"$.index[*][?(@.name=='next')].inner.decl.output.inner.name\" \\\"Item\\\"\n+    // @count \"$.index[*][?(@.name=='next')].inner.function.decl.output.qualified_path.args.angle_bracketed.args[*]\" 0\n+    // @count \"$.index[*][?(@.name=='next')].inner.function.decl.output.qualified_path.args.angle_bracketed.bindings[*]\" 0\n+    // @is \"$.index[*][?(@.name=='next')].inner.function.decl.output.qualified_path.self_type.generic\" \\\"Self\\\"\n+    // @is \"$.index[*][?(@.name=='next')].inner.function.decl.output.qualified_path.name\" \\\"Item\\\"\n     fn next<'a>(&'a self) -> Self::Item;\n }"}, {"sha": "f37ce0abb4144b205d755885f62aec0752993156", "filename": "tests/rustdoc-json/glob_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fglob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fglob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fglob_import.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,7 +5,7 @@\n #![no_core]\n \n // @has \"$.index[*][?(@.name=='glob')]\"\n-// @has \"$.index[*][?(@.kind=='import')].inner.name\" \\\"*\\\"\n+// @has \"$.index[*][?(@.inner.import)].inner.import.name\" \\\"*\\\"\n \n \n mod m1 {"}, {"sha": "ace37e5b3dfe3c25a01d0ab83c31a132fcd1cfba", "filename": "tests/rustdoc-json/impls/auto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Fauto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Fauto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fauto.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -12,7 +12,8 @@ impl Foo {\n }\n \n // Testing spans, so all tests below code\n-// @is \"$.index[*][?(@.kind=='impl' && @.inner.synthetic==true)].span\" null\n // @is \"$.index[*][?(@.docs=='has span')].span.begin\" \"[10, 0]\"\n // @is \"$.index[*][?(@.docs=='has span')].span.end\" \"[12, 1]\"\n+// FIXME: this doesn't work due to https://github.com/freestrings/jsonpath/issues/91\n+// is \"$.index[*][?(@.inner.impl.synthetic==true)].span\" null\n pub struct Foo;"}, {"sha": "20e1cecd778cd40ec0bf15fa7f693cfa54241090", "filename": "tests/rustdoc-json/impls/foreign_for_local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Fforeign_for_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Fforeign_for_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fforeign_for_local.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,7 +3,7 @@ extern crate foreign_trait;\n \n /// ForeignTrait id hack\n pub use foreign_trait::ForeignTrait as _;\n-// @set ForeignTrait = \"$.index[*][?(@.docs=='ForeignTrait id hack')].inner.id\"\n+// @set ForeignTrait = \"$.index[*][?(@.docs=='ForeignTrait id hack')].inner.import.id\"\n \n pub struct LocalStruct;\n // @set LocalStruct = \"$.index[*][?(@.name=='LocalStruct')].id\"\n@@ -12,7 +12,7 @@ pub struct LocalStruct;\n impl foreign_trait::ForeignTrait for LocalStruct {}\n \n // @set impl = \"$.index[*][?(@.docs=='foreign for local')].id\"\n-// @is \"$.index[*][?(@.docs=='foreign for local')].inner.for.inner.id\" $LocalStruct\n-// @is \"$.index[*][?(@.docs=='foreign for local')].inner.trait.id\" $ForeignTrait\n+// @is \"$.index[*][?(@.docs=='foreign for local')].inner.impl.for.resolved_path.id\" $LocalStruct\n+// @is \"$.index[*][?(@.docs=='foreign for local')].inner.impl.trait.id\" $ForeignTrait\n \n-// @has \"$.index[*][?(@.name=='LocalStruct')].inner.impls[*]\" $impl\n+// @has \"$.index[*][?(@.name=='LocalStruct')].inner.struct.impls[*]\" $impl"}, {"sha": "d2b0665dcafac6afe643524d8373a9b781060df1", "filename": "tests/rustdoc-json/impls/import_from_private.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -4,19 +4,19 @@\n #![no_core]\n \n mod bar {\n-    // @set baz = \"$.index[*][?(@.kind=='struct')].id\"\n+    // @set baz = \"$.index[*][?(@.inner.struct)].id\"\n     pub struct Baz;\n-    // @set impl = \"$.index[*][?(@.kind=='impl')].id\"\n+    // @set impl = \"$.index[*][?(@.inner.impl)].id\"\n     impl Baz {\n-        // @set doit = \"$.index[*][?(@.kind=='function')].id\"\n+        // @set doit = \"$.index[*][?(@.inner.function)].id\"\n         pub fn doit() {}\n     }\n }\n \n-// @set import = \"$.index[*][?(@.kind=='import')].id\"\n+// @set import = \"$.index[*][?(@.inner.import)].id\"\n pub use bar::Baz;\n \n-// @is \"$.index[*][?(@.kind=='module')].inner.items[*]\" $import\n-// @is \"$.index[*][?(@.kind=='import')].inner.id\" $baz\n-// @is \"$.index[*][?(@.kind=='struct')].inner.impls[*]\" $impl\n-// @is \"$.index[*][?(@.kind=='impl')].inner.items[*]\" $doit\n+// @is \"$.index[*].inner.module.items[*]\" $import\n+// @is \"$.index[*].inner.import.id\" $baz\n+// @is \"$.index[*].inner.struct.impls[*]\" $impl\n+// @is \"$.index[*].inner.impl.items[*]\" $doit"}, {"sha": "72352ce88da024723ee3103a1e777709cd21b058", "filename": "tests/rustdoc-json/impls/local_for_foreign.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Flocal_for_foreign.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,7 +3,7 @@ extern crate foreign_struct;\n \n /// ForeignStruct id hack\n pub use foreign_struct::ForeignStruct as _;\n-// @set ForeignStruct = \"$.index[*][?(@.docs=='ForeignStruct id hack')].inner.id\"\n+// @set ForeignStruct = \"$.index[*][?(@.docs=='ForeignStruct id hack')].inner.import.id\"\n \n pub trait LocalTrait {}\n // @set LocalTrait = \"$.index[*][?(@.name=='LocalTrait')].id\"\n@@ -12,7 +12,7 @@ pub trait LocalTrait {}\n impl LocalTrait for foreign_struct::ForeignStruct {}\n \n // @set impl = \"$.index[*][?(@.docs=='local for foreign')].id\"\n-// @is \"$.index[*][?(@.docs=='local for foreign')].inner.trait.id\" $LocalTrait\n-// @is \"$.index[*][?(@.docs=='local for foreign')].inner.for.inner.id\" $ForeignStruct\n+// @is \"$.index[*][?(@.docs=='local for foreign')].inner.impl.trait.id\" $LocalTrait\n+// @is \"$.index[*][?(@.docs=='local for foreign')].inner.impl.for.resolved_path.id\" $ForeignStruct\n \n-// @is \"$.index[*][?(@.name=='LocalTrait')].inner.implementations[*]\" $impl\n+// @is \"$.index[*][?(@.name=='LocalTrait')].inner.trait.implementations[*]\" $impl"}, {"sha": "37a720003295a20fb629cb54478d551f4981441b", "filename": "tests/rustdoc-json/impls/local_for_local.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,7 +9,7 @@ pub trait Trait {}\n /// impl\n impl Trait for Struct {}\n \n-// @is \"$.index[*][?(@.name=='Struct')].inner.impls[*]\" $impl\n-// @is \"$.index[*][?(@.name=='Trait')].inner.implementations[*]\" $impl\n-// @is \"$.index[*][?(@.docs=='impl')].inner.trait.id\" $trait\n-// @is \"$.index[*][?(@.docs=='impl')].inner.for.inner.id\" $struct\n+// @is \"$.index[*][?(@.name=='Struct')].inner.struct.impls[*]\" $impl\n+// @is \"$.index[*][?(@.name=='Trait')].inner.trait.implementations[*]\" $impl\n+// @is \"$.index[*][?(@.docs=='impl')].inner.impl.trait.id\" $trait\n+// @is \"$.index[*][?(@.docs=='impl')].inner.impl.for.resolved_path.id\" $struct"}, {"sha": "769dd3f0a2c02e9f7a2fd9893f433d24d007324e", "filename": "tests/rustdoc-json/impls/local_for_local_primitive.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,14 +5,13 @@\n // @set Local = \"$.index[*][?(@.name=='Local')].id\"\n pub trait Local {}\n \n-// @is \"$.index[*][?(@.docs=='Local for bool')].inner.trait.id\" $Local\n-// @is \"$.index[*][?(@.docs=='Local for bool')].inner.for.kind\" '\"primitive\"'\n-// @is \"$.index[*][?(@.docs=='Local for bool')].inner.for.inner\" '\"bool\"'\n+// @is \"$.index[*][?(@.docs=='Local for bool')].inner.impl.trait.id\" $Local\n+// @is \"$.index[*][?(@.docs=='Local for bool')].inner.impl.for.primitive\" '\"bool\"'\n /// Local for bool\n impl Local for bool {}\n \n // @set impl =  \"$.index[*][?(@.docs=='Local for bool')].id\"\n-// @is \"$.index[*][?(@.name=='Local')].inner.implementations[*]\" $impl\n+// @is \"$.index[*][?(@.name=='Local')].inner.trait.implementations[*]\" $impl\n \n // FIXME(#101695): Test bool's `impls` include \"Local for bool\"\n // @has \"$.index[*][?(@.name=='bool')]\""}, {"sha": "85278c0e08c8066713938cb54832dd211faf1ace", "filename": "tests/rustdoc-json/impls/local_for_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fimpls%2Flocal_for_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Flocal_for_primitive.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,6 +2,6 @@\n pub trait Local {}\n \n // @set impl = \"$.index[*][?(@.docs=='local for bool')].id\"\n-// @is \"$.index[*][?(@.name=='Local')].inner.implementations[*]\" $impl\n+// @is \"$.index[*][?(@.name=='Local')].inner.trait.implementations[*]\" $impl\n /// local for bool\n impl Local for bool {}"}, {"sha": "dc28258a8b674c763459324b56a62d378304c7e5", "filename": "tests/rustdoc-json/lifetime/longest.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Flifetime%2Flongest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Flifetime%2Flongest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Flifetime%2Flongest.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,30 +3,27 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @is \"$.index[*][?(@.name=='longest')].inner.generics.params[0].name\"  \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n-// @is \"$.index[*][?(@.name=='longest')].inner.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n-// @count \"$.index[*][?(@.name=='longest')].inner.generics.params[*]\" 1\n-// @is \"$.index[*][?(@.name=='longest')].inner.generics.where_predicates\" []\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.generics.params[0].name\"  \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.generics.params[0].kind\"  '{\"lifetime\": {\"outlives\": []}}'\n+// @count \"$.index[*][?(@.name=='longest')].inner.function.generics.params[*]\" 1\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.generics.where_predicates\" []\n \n-// @count \"$.index[*][?(@.name=='longest')].inner.decl.inputs[*]\" 2\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][0]\" '\"l\"'\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][0]\" '\"r\"'\n+// @count \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[*]\" 2\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[0][0]\" '\"l\"'\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[1][0]\" '\"r\"'\n \n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.mutable\" false\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[0][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[0][1].borrowed_ref.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[0][1].borrowed_ref.mutable\" false\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[0][1].borrowed_ref.type.primitive\" \\\"str\\\"\n \n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.mutable\" false\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.inputs[1][1].inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[1][1].borrowed_ref.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[1][1].borrowed_ref.mutable\" false\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.inputs[1][1].borrowed_ref.type.primitive\" \\\"str\\\"\n \n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.mutable\" false\n-// @is \"$.index[*][?(@.name=='longest')].inner.decl.output.inner.type\" '{\"inner\": \"str\", \"kind\": \"primitive\"}'\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.output.borrowed_ref.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.output.borrowed_ref.mutable\" false\n+// @is \"$.index[*][?(@.name=='longest')].inner.function.decl.output.borrowed_ref.type.primitive\" \\\"str\\\"\n \n pub fn longest<'a>(l: &'a str, r: &'a str) -> &'a str {\n     if l.len() > r.len() { l } else { r }"}, {"sha": "6e105b382b001a1deb24be306635b08748b8bcc9", "filename": "tests/rustdoc-json/lifetime/outlives.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Flifetime%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Flifetime%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Flifetime%2Foutlives.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,21 +3,19 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @count \"$.index[*][?(@.name=='foo')].inner.generics.params[*]\" 3\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates\" []\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[1].name\" \\\"\\'b\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[2].name\" '\"T\"'\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[0].kind.lifetime.outlives\" []\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[1].kind.lifetime.outlives\" [\\\"\\'a\\\"]\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.default\" null\n-// @count \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[*]\" 1\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.params[2].kind.type.bounds[0].outlives\" \\\"\\'b\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.mutable\" false\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" \\\"\\'b\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.mutable\" false\n-// @is \"$.index[*][?(@.name=='foo')].inner.decl.inputs[0][1].inner.type.inner.type\" '{\"inner\": \"T\", \"kind\": \"generic\"}'\n+// @count \"$.index[*][?(@.name=='foo')].inner.function.generics.params[*]\" 3\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.where_predicates\" []\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[1].name\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[2].name\" '\"T\"'\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[0].kind.lifetime.outlives\" []\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[1].kind.lifetime.outlives\" [\\\"\\'a\\\"]\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[2].kind.type.default\" null\n+// @count \"$.index[*][?(@.name=='foo')].inner.function.generics.params[2].kind.type.bounds[*]\" 1\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.params[2].kind.type.bounds[0].outlives\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.decl.inputs[0][1].borrowed_ref.lifetime\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.decl.inputs[0][1].borrowed_ref.mutable\" false\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.decl.inputs[0][1].borrowed_ref.type.borrowed_ref.lifetime\" \\\"\\'b\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.decl.inputs[0][1].borrowed_ref.type.borrowed_ref.mutable\" false\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.decl.inputs[0][1].borrowed_ref.type.borrowed_ref.type.generic\" \\\"T\\\"\n pub fn foo<'a, 'b: 'a, T: 'b>(_: &'a &'b T) {}"}, {"sha": "b8279298c1e71a56da30f43cd79d55366058dacd", "filename": "tests/rustdoc-json/methods/abi.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fmethods%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fmethods%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fmethods%2Fabi.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,47 +8,47 @@\n pub struct Foo;\n \n impl Foo {\n-    // @is \"$.index[*][?(@.name=='abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    // @is \"$.index[*][?(@.name=='abi_rust')].inner.function.header.abi\" \\\"Rust\\\"\n     pub fn abi_rust() {}\n \n-    // @is \"$.index[*][?(@.name=='abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='abi_c')].inner.function.header.abi\" '{\"C\": {\"unwind\": false}}'\n     pub extern \"C\" fn abi_c() {}\n \n-    // @is \"$.index[*][?(@.name=='abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='abi_system')].inner.function.header.abi\" '{\"System\": {\"unwind\": false}}'\n     pub extern \"system\" fn abi_system() {}\n \n-    // @is \"$.index[*][?(@.name=='abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='abi_c_unwind')].inner.function.header.abi\" '{\"C\": {\"unwind\": true}}'\n     pub extern \"C-unwind\" fn abi_c_unwind() {}\n \n-    // @is \"$.index[*][?(@.name=='abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='abi_system_unwind')].inner.function.header.abi\" '{\"System\": {\"unwind\": true}}'\n     pub extern \"system-unwind\" fn abi_system_unwind() {}\n \n-    // @is \"$.index[*][?(@.name=='abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    // @is \"$.index[*][?(@.name=='abi_vectorcall')].inner.function.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n     pub extern \"vectorcall\" fn abi_vectorcall() {}\n \n-    // @is \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    // @is \"$.index[*][?(@.name=='abi_vectorcall_unwind')].inner.function.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n     pub extern \"vectorcall-unwind\" fn abi_vectorcall_unwind() {}\n }\n \n pub trait Bar {\n-    // @is \"$.index[*][?(@.name=='trait_abi_rust')].inner.header.abi\" \\\"Rust\\\"\n+    // @is \"$.index[*][?(@.name=='trait_abi_rust')].inner.function.header.abi\" \\\"Rust\\\"\n     fn trait_abi_rust() {}\n \n-    // @is \"$.index[*][?(@.name=='trait_abi_c')].inner.header.abi\" '{\"C\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_c')].inner.function.header.abi\" '{\"C\": {\"unwind\": false}}'\n     extern \"C\" fn trait_abi_c() {}\n \n-    // @is \"$.index[*][?(@.name=='trait_abi_system')].inner.header.abi\" '{\"System\": {\"unwind\": false}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_system')].inner.function.header.abi\" '{\"System\": {\"unwind\": false}}'\n     extern \"system\" fn trait_abi_system() {}\n \n-    // @is \"$.index[*][?(@.name=='trait_abi_c_unwind')].inner.header.abi\" '{\"C\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_c_unwind')].inner.function.header.abi\" '{\"C\": {\"unwind\": true}}'\n     extern \"C-unwind\" fn trait_abi_c_unwind() {}\n \n-    // @is \"$.index[*][?(@.name=='trait_abi_system_unwind')].inner.header.abi\" '{\"System\": {\"unwind\": true}}'\n+    // @is \"$.index[*][?(@.name=='trait_abi_system_unwind')].inner.function.header.abi\" '{\"System\": {\"unwind\": true}}'\n     extern \"system-unwind\" fn trait_abi_system_unwind() {}\n \n-    // @is \"$.index[*][?(@.name=='trait_abi_vectorcall')].inner.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n+    // @is \"$.index[*][?(@.name=='trait_abi_vectorcall')].inner.function.header.abi.Other\" '\"\\\"vectorcall\\\"\"'\n     extern \"vectorcall\" fn trait_abi_vectorcall() {}\n \n-    // @is \"$.index[*][?(@.name=='trait_abi_vectorcall_unwind')].inner.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n+    // @is \"$.index[*][?(@.name=='trait_abi_vectorcall_unwind')].inner.function.header.abi.Other\" '\"\\\"vectorcall-unwind\\\"\"'\n     extern \"vectorcall-unwind\" fn trait_abi_vectorcall_unwind() {}\n }"}, {"sha": "65977bc826fe900d6796543a705113a4fff975f5", "filename": "tests/rustdoc-json/methods/qualifiers.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fmethods%2Fqualifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fmethods%2Fqualifiers.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,34 +3,34 @@\n pub struct Foo;\n \n impl Foo {\n-    // @is \"$.index[*][?(@.name=='const_meth')].inner.header.async\" false\n-    // @is \"$.index[*][?(@.name=='const_meth')].inner.header.const\"  true\n-    // @is \"$.index[*][?(@.name=='const_meth')].inner.header.unsafe\" false\n+    // @is \"$.index[*][?(@.name=='const_meth')].inner.function.header.async\" false\n+    // @is \"$.index[*][?(@.name=='const_meth')].inner.function.header.const\"  true\n+    // @is \"$.index[*][?(@.name=='const_meth')].inner.function.header.unsafe\" false\n     pub const fn const_meth() {}\n \n-    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.header.async\"  false\n-    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.header.const\"  false\n-    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.header.unsafe\" false\n+    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.function.header.async\"  false\n+    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.function.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='nothing_meth')].inner.function.header.unsafe\" false\n     pub fn nothing_meth() {}\n \n-    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.header.async\"  false\n-    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.header.const\"  false\n-    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.header.unsafe\" true\n+    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.function.header.async\"  false\n+    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.function.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='unsafe_meth')].inner.function.header.unsafe\" true\n     pub unsafe fn unsafe_meth() {}\n \n-    // @is \"$.index[*][?(@.name=='async_meth')].inner.header.async\"  true\n-    // @is \"$.index[*][?(@.name=='async_meth')].inner.header.const\"  false\n-    // @is \"$.index[*][?(@.name=='async_meth')].inner.header.unsafe\" false\n+    // @is \"$.index[*][?(@.name=='async_meth')].inner.function.header.async\"  true\n+    // @is \"$.index[*][?(@.name=='async_meth')].inner.function.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='async_meth')].inner.function.header.unsafe\" false\n     pub async fn async_meth() {}\n \n-    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.async\"  true\n-    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.const\"  false\n-    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header.unsafe\" true\n+    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.function.header.async\"  true\n+    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.function.header.const\"  false\n+    // @is \"$.index[*][?(@.name=='async_unsafe_meth')].inner.function.header.unsafe\" true\n     pub async unsafe fn async_unsafe_meth() {}\n \n-    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.async\"  false\n-    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.const\"  true\n-    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header.unsafe\" true\n+    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.function.header.async\"  false\n+    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.function.header.const\"  true\n+    // @is \"$.index[*][?(@.name=='const_unsafe_meth')].inner.function.header.unsafe\" true\n     pub const unsafe fn const_unsafe_meth() {}\n \n     // It's impossible for a method to be both const and async, so no test for that"}, {"sha": "e012cfc5014cad5367240cc4936eb0e63cc83d09", "filename": "tests/rustdoc-json/nested.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fnested.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,30 +2,31 @@\n // compile-flags: --crate-version 1.0.0\n \n // @is \"$.crate_version\" \\\"1.0.0\\\"\n-// @is \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n-// @is \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n+// @has \"$.index[*][?(@.name=='nested')].inner.module\"\n+// @is \"$.index[*][?(@.name=='nested')].inner.module.is_crate\" true\n \n // @set l1_id = \"$.index[*][?(@.name=='l1')].id\"\n-// @ismany \"$.index[*][?(@.name=='nested')].inner.items[*]\" $l1_id\n+// @ismany \"$.index[*][?(@.name=='nested')].inner.module.items[*]\" $l1_id\n \n-// @is \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n-// @is \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n+// @has \"$.index[*][?(@.name=='l1')].inner.module\"\n+// @is \"$.index[*][?(@.name=='l1')].inner.module.is_crate\" false\n pub mod l1 {\n-    // @is \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n-    // @is \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n+    // @has \"$.index[*][?(@.name=='l3')].inner.module\"\n+    // @is \"$.index[*][?(@.name=='l3')].inner.module.is_crate\" false\n     // @set l3_id = \"$.index[*][?(@.name=='l3')].id\"\n     pub mod l3 {\n \n-        // @is \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n-        // @is \"$.index[*][?(@.name=='L4')].inner.kind\" \\\"unit\\\"\n+        // @has \"$.index[*][?(@.name=='L4')].inner.struct\"\n+        // @is \"$.index[*][?(@.name=='L4')].inner.struct.kind\" '\"unit\"'\n         // @set l4_id = \"$.index[*][?(@.name=='L4')].id\"\n-        // @ismany \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n+        // @ismany \"$.index[*][?(@.name=='l3')].inner.module.items[*]\" $l4_id\n         pub struct L4;\n     }\n-    // @is \"$.index[*][?(@.inner.source=='l3::L4')].kind\" \\\"import\\\"\n-    // @is \"$.index[*][?(@.inner.source=='l3::L4')].inner.glob\" false\n-    // @is \"$.index[*][?(@.inner.source=='l3::L4')].inner.id\" $l4_id\n-    // @set l4_use_id = \"$.index[*][?(@.inner.source=='l3::L4')].id\"\n+    // @is \"$.index[*][?(@.inner.import)].inner.import.glob\" false\n+    // @is \"$.index[*][?(@.inner.import)].inner.import.source\" '\"l3::L4\"'\n+    // @is \"$.index[*][?(@.inner.import)].inner.import.glob\" false\n+    // @is \"$.index[*][?(@.inner.import)].inner.import.id\" $l4_id\n+    // @set l4_use_id = \"$.index[*][?(@.inner.import)].id\"\n     pub use l3::L4;\n }\n-// @ismany \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id $l4_use_id\n+// @ismany \"$.index[*][?(@.name=='l1')].inner.module.items[*]\" $l3_id $l4_use_id"}, {"sha": "cabee0b1caa5a878add286d1b0d77389697ce39c", "filename": "tests/rustdoc-json/non_lifetime_binders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fnon_lifetime_binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fnon_lifetime_binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fnon_lifetime_binders.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -16,9 +16,9 @@ struct PhantomData<T_>;\n \n pub struct Wrapper<T_>(PhantomData<T_>);\n \n-// @count \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[*]\" 2\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[0].name\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[1].name\" \\\"T\\\"\n-// @is \"$.index[*][?(@.name=='foo')].inner.generics.where_predicates[0].bound_predicate.generic_params[1].kind\" '{ \"type\": { \"bounds\": [], \"default\": null, \"synthetic\": false } }'\n+// @count \"$.index[*][?(@.name=='foo')].inner.function.generics.where_predicates[0].bound_predicate.generic_params[*]\" 2\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.where_predicates[0].bound_predicate.generic_params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.where_predicates[0].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.where_predicates[0].bound_predicate.generic_params[1].name\" \\\"T\\\"\n+// @is \"$.index[*][?(@.name=='foo')].inner.function.generics.where_predicates[0].bound_predicate.generic_params[1].kind\" '{ \"type\": { \"bounds\": [], \"default\": null, \"synthetic\": false } }'\n pub fn foo() where for<'a, T> &'a Wrapper<T>: Trait {}"}, {"sha": "562c7e4d79bbce8906907afd3211d7b4c0cc51df", "filename": "tests/rustdoc-json/primitives/local_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -14,7 +14,7 @@ mod prim_i32 {}\n // @set local_i32 = \"$.index[*][?(@.name=='i32')].id\"\n \n // @has \"$.index[*][?(@.name=='local_primitive')]\"\n-// @ismany \"$.index[*][?(@.name=='local_primitive')].inner.items[*]\" $local_i32\n+// @ismany \"$.index[*][?(@.name=='local_primitive')].inner.module.items[*]\" $local_i32\n // @is \"$.index[*][?(@.name=='local_primitive')].links['prim@i32']\" $local_i32\n \n // Let's ensure the `prim_i32` module isn't present in the output JSON:"}, {"sha": "4b7b7646b89301a3d6be8e4bfce176165af5c136", "filename": "tests/rustdoc-json/primitives/primitive_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -15,7 +15,7 @@ impl i32 {\n         self\n     }\n \n-    // @is \"$.index[*][?(@.docs=='Only core can do this')].inner.items[*]\" $identity\n+    // @is \"$.index[*][?(@.docs=='Only core can do this')].inner.impl.items[*]\" $identity\n }\n \n // @set Trait = \"$.index[*][?(@.name=='Trait')].id\"\n@@ -30,5 +30,5 @@ mod prim_i32 {}\n \n // @set i32 = \"$.index[*][?(@.docs=='i32')].id\"\n // @is \"$.index[*][?(@.docs=='i32')].name\" '\"i32\"'\n-// @is \"$.index[*][?(@.docs=='i32')].inner.name\" '\"i32\"'\n-// @ismany \"$.index[*][?(@.docs=='i32')].inner.impls[*]\" $impl_i32 $impl_trait_for_i32\n+// @is \"$.index[*][?(@.docs=='i32')].inner.primitive.name\" '\"i32\"'\n+// @ismany \"$.index[*][?(@.docs=='i32')].inner.primitive.impls[*]\" $impl_i32 $impl_trait_for_i32"}, {"sha": "5f251b3b89010c69312d55dccee12dee90884a7e", "filename": "tests/rustdoc-json/primitives/primitive_type.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,22 +1,17 @@\n #![feature(never_type)]\n \n // @is \"$.index[*][?(@.name=='PrimNever')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='PrimNever')].inner.type.kind\" \\\"primitive\\\"\n-// @is \"$.index[*][?(@.name=='PrimNever')].inner.type.inner\" \\\"never\\\"\n+// @is \"$.index[*][?(@.name=='PrimNever')].inner.typedef.type.primitive\" \\\"never\\\"\n pub type PrimNever = !;\n \n-// @is \"$.index[*][?(@.name=='PrimStr')].inner.type.kind\" \\\"primitive\\\"\n-// @is \"$.index[*][?(@.name=='PrimStr')].inner.type.inner\" \\\"str\\\"\n+// @is \"$.index[*][?(@.name=='PrimStr')].inner.typedef.type.primitive\" \\\"str\\\"\n pub type PrimStr = str;\n \n-// @is \"$.index[*][?(@.name=='PrimBool')].inner.type.kind\" \\\"primitive\\\"\n-// @is \"$.index[*][?(@.name=='PrimBool')].inner.type.inner\" \\\"bool\\\"\n+// @is \"$.index[*][?(@.name=='PrimBool')].inner.typedef.type.primitive\" \\\"bool\\\"\n pub type PrimBool = bool;\n \n-// @is \"$.index[*][?(@.name=='PrimChar')].inner.type.kind\" \\\"primitive\\\"\n-// @is \"$.index[*][?(@.name=='PrimChar')].inner.type.inner\" \\\"char\\\"\n+// @is \"$.index[*][?(@.name=='PrimChar')].inner.typedef.type.primitive\" \\\"char\\\"\n pub type PrimChar = char;\n \n-// @is \"$.index[*][?(@.name=='PrimU8')].inner.type.kind\" \\\"primitive\\\"\n-// @is \"$.index[*][?(@.name=='PrimU8')].inner.type.inner\" \\\"u8\\\"\n+// @is \"$.index[*][?(@.name=='PrimU8')].inner.typedef.type.primitive\" \\\"u8\\\"\n pub type PrimU8 = u8;"}, {"sha": "f8118b82094e1988f357488374b10666f6f997dc", "filename": "tests/rustdoc-json/primitives/use_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -13,8 +13,8 @@ mod usize {}\n // @!is \"$.index[*][?(@.name=='checked_add')]\" $local_crate_id\n // @!has \"$.index[*][?(@.name=='is_ascii_uppercase')]\"\n \n-// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='my_i32')].inner.id\" null\n+// @is \"$.index[*].inner.import[?(@.name=='my_i32')].id\" null\n pub use i32 as my_i32;\n \n-// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='u32')].inner.id\" null\n+// @is \"$.index[*].inner.import[?(@.name=='u32')].id\" null\n pub use u32;"}, {"sha": "1c5fed8c6b2b7309ce4fac2067a04c8a45e6c319", "filename": "tests/rustdoc-json/reexport/doc_inline_external_crate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fdoc_inline_external_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fdoc_inline_external_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fdoc_inline_external_crate.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,10 +1,11 @@\n // Regression Test for https://github.com/rust-lang/rust/issues/110138\n // aux-build: enum_with_discriminant.rs\n+// ignore-tidy-linelength\n \n #[doc(inline)]\n pub extern crate enum_with_discriminant;\n \n // @!has '$.index[*][?(@.docs == \"Should not be inlined\")]'\n-// @is '$.index[*][?(@.name == \"enum_with_discriminant\")].kind' '\"extern_crate\"'\n+// @has '$.index[*][?(@.name == \"enum_with_discriminant\")].inner.extern_crate'\n // @set enum_with_discriminant = '$.index[*][?(@.name == \"enum_with_discriminant\")].id'\n-// @is '$.index[*][?(@.name == \"doc_inline_external_crate\")].inner.items[*]' $enum_with_discriminant\n+// @is '$.index[*][?(@.name == \"doc_inline_external_crate\")].inner.module.items[*]' $enum_with_discriminant"}, {"sha": "37ca279b352ca0555e3f89e755156e97eef79164", "filename": "tests/rustdoc-json/reexport/export_extern_crate_as_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fexport_extern_crate_as_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fexport_extern_crate_as_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fexport_extern_crate_as_self.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -7,5 +7,5 @@\n \n // ignore-tidy-linelength\n \n-// @is \"$.index[*][?(@.kind=='module')].name\" \\\"export_extern_crate_as_self\\\"\n+// @is \"$.index[*][?(@.inner.module)].name\" \\\"export_extern_crate_as_self\\\"\n pub extern crate self as export_extern_crate_as_self; // Must be the same name as the crate already has"}, {"sha": "553ee79b44e4bb144e22a6f1f9ec7e8c3b236326", "filename": "tests/rustdoc-json/reexport/extern_crate_glob.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fextern_crate_glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fextern_crate_glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fextern_crate_glob.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -6,5 +6,6 @@ extern crate enum_with_discriminant;\n pub use enum_with_discriminant::*;\n \n // @!has '$.index[*][?(@.docs == \"Should not be inlined\")]'\n-// @set use = '$.index[*][?(@.inner.name == \"enum_with_discriminant\")].id'\n-// @is '$.index[*][?(@.name == \"extern_crate_glob\")].inner.items[*]' $use\n+// @is '$.index[*][?(@.inner.import)].inner.import.name' \\\"enum_with_discriminant\\\"\n+// @set use = '$.index[*][?(@.inner.import)].id'\n+// @is '$.index[*][?(@.name == \"extern_crate_glob\")].inner.module.items[*]' $use"}, {"sha": "dee35ba78dc45535847205db355e0b243d6cb58f", "filename": "tests/rustdoc-json/reexport/glob_collision.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fglob_collision.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,26 +3,28 @@\n #![feature(no_core)]\n #![no_core]\n \n-// @set m1 = \"$.index[*][?(@.name == 'm1' && @.kind == 'module')].id\"\n-// @is \"$.index[*][?(@.name == 'm1' && @.kind == 'module')].inner.items\" []\n-// @is \"$.index[*][?(@.name == 'm1' && @.kind == 'module')].inner.is_stripped\" true\n+// @set m1 = \"$.index[*][?(@.name == 'm1' && @.inner.module)].id\"\n+// @is \"$.index[*][?(@.name == 'm1')].inner.module.items\" []\n+// @is \"$.index[*][?(@.name == 'm1')].inner.module.is_stripped\" true\n mod m1 {\n     pub fn f() {}\n }\n-// @set m2 = \"$.index[*][?(@.name == 'm2' && @.kind == 'module')].id\"\n-// @is \"$.index[*][?(@.name == 'm2' && @.kind == 'module')].inner.items\" []\n-// @is \"$.index[*][?(@.name == 'm2' && @.kind == 'module')].inner.is_stripped\" true\n+// @set m2 = \"$.index[*][?(@.name == 'm2' && @.inner.module)].id\"\n+// @is \"$.index[*][?(@.name == 'm2')].inner.module.items\" []\n+// @is \"$.index[*][?(@.name == 'm2')].inner.module.is_stripped\" true\n mod m2 {\n     pub fn f(_: u8) {}\n }\n \n-// @set m1_use = \"$.index[*][?(@.inner.name=='m1')].id\"\n-// @is \"$.index[*][?(@.inner.name=='m1')].inner.id\" $m1\n-// @is \"$.index[*][?(@.inner.name=='m1')].inner.glob\" true\n+// @set m1_use = \"$.index[*][?(@.docs=='m1 re-export')].id\"\n+// @is \"$.index[*].inner.import[?(@.name=='m1')].id\" $m1\n+// @is \"$.index[*].inner.import[?(@.name=='m1')].glob\" true\n+/// m1 re-export\n pub use m1::*;\n-// @set m2_use = \"$.index[*][?(@.inner.name=='m2')].id\"\n-// @is \"$.index[*][?(@.inner.name=='m2')].inner.id\" $m2\n-// @is \"$.index[*][?(@.inner.name=='m2')].inner.glob\" true\n+// @set m2_use = \"$.index[*][?(@.docs=='m2 re-export')].id\"\n+// @is \"$.index[*].inner.import[?(@.name=='m2')].id\" $m2\n+// @is \"$.index[*].inner.import[?(@.name=='m2')].glob\" true\n+/// m2 re-export\n pub use m2::*;\n \n-// @ismany \"$.index[*][?(@.inner.is_crate==true)].inner.items[*]\" $m1_use $m2_use\n+// @ismany \"$.index[*].inner.module[?(@.is_crate==true)].items[*]\" $m1_use $m2_use"}, {"sha": "8b7150c8fd706989d05f3985dfde61b2ec635226", "filename": "tests/rustdoc-json/reexport/glob_empty_mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_empty_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_empty_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fglob_empty_mod.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,8 +1,8 @@\n // Regression test for https://github.com/rust-lang/rust/issues/100973\n \n-// @is \"$.index[*][?(@.name=='m1' && @.kind == 'module')].inner.is_stripped\" true\n+// @is \"$.index[*][?(@.name=='m1' && @.inner.module)].inner.module.is_stripped\" true\n // @set m1 = \"$.index[*][?(@.name=='m1')].id\"\n mod m1 {}\n \n-// @is \"$.index[*][?(@.inner.name=='m1' && @.kind=='import')].inner.id\" $m1\n+// @is \"$.index[*][?(@.inner.import)].inner.import.id\" $m1\n pub use m1::*;"}, {"sha": "78edfaf0aa8d752b33a8bfb2bf091401a04ec8f2", "filename": "tests/rustdoc-json/reexport/glob_extern.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fglob_extern.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,21 +3,20 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n-// @is \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='mod1')].inner.module.is_stripped\" \"true\"\n mod mod1 {\n     extern \"C\" {\n         // @set public_fn_id = \"$.index[*][?(@.name=='public_fn')].id\"\n         pub fn public_fn();\n         // @!has \"$.index[*][?(@.name=='private_fn')]\"\n         fn private_fn();\n     }\n-    // @ismany \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $public_fn_id\n+    // @ismany \"$.index[*][?(@.name=='mod1')].inner.module.items[*]\" $public_fn_id\n     // @set mod1_id = \"$.index[*][?(@.name=='mod1')].id\"\n }\n \n-// @is \"$.index[*][?(@.kind=='import')].inner.glob\" true\n-// @is \"$.index[*][?(@.kind=='import')].inner.id\" $mod1_id\n-// @set use_id = \"$.index[*][?(@.kind=='import')].id\"\n-// @ismany \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $use_id\n+// @is \"$.index[*][?(@.inner.import)].inner.import.glob\" true\n+// @is \"$.index[*][?(@.inner.import)].inner.import.id\" $mod1_id\n+// @set use_id = \"$.index[*][?(@.inner.import)].id\"\n+// @ismany \"$.index[*][?(@.name=='glob_extern')].inner.module.items[*]\" $use_id\n pub use mod1::*;"}, {"sha": "ae4e87d23bc543170972a6db1e28afd1b3093be2", "filename": "tests/rustdoc-json/reexport/glob_private.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fglob_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fglob_private.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,11 +3,9 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @is \"$.index[*][?(@.name=='mod1')].kind\" \\\"module\\\"\n-// @is \"$.index[*][?(@.name=='mod1')].inner.is_stripped\" \"true\"\n+// @is \"$.index[*][?(@.name=='mod1')].inner.module.is_stripped\" \"true\"\n mod mod1 {\n-    // @is \"$.index[*][?(@.name=='mod2')].kind\" \\\"module\\\"\n-    // @is \"$.index[*][?(@.name=='mod2')].inner.is_stripped\" \"true\"\n+    // @is \"$.index[*][?(@.name=='mod2')].inner.module.is_stripped\" \"true\"\n     mod mod2 {\n         // @set m2pub_id = \"$.index[*][?(@.name=='Mod2Public')].id\"\n         pub struct Mod2Public;\n@@ -16,7 +14,9 @@ mod mod1 {\n         struct Mod2Private;\n     }\n \n-    // @set mod2_use_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='mod2')].id\"\n+    // @set mod2_use_id = \"$.index[*][?(@.docs=='Mod2 re-export')].id\"\n+    // @is \"$.index[*][?(@.docs=='Mod2 re-export')].inner.import.name\" \\\"mod2\\\"\n+    /// Mod2 re-export\n     pub use self::mod2::*;\n \n     // @set m1pub_id = \"$.index[*][?(@.name=='Mod1Public')].id\"\n@@ -25,9 +25,11 @@ mod mod1 {\n     struct Mod1Private;\n }\n \n-// @set mod1_use_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='mod1')].id\"\n+// @set mod1_use_id = \"$.index[*][?(@.docs=='Mod1 re-export')].id\"\n+// @is \"$.index[*][?(@.docs=='Mod1 re-export')].inner.import.name\" \\\"mod1\\\"\n+/// Mod1 re-export\n pub use mod1::*;\n \n-// @ismany \"$.index[*][?(@.name=='mod2')].inner.items[*]\" $m2pub_id\n-// @ismany \"$.index[*][?(@.name=='mod1')].inner.items[*]\" $m1pub_id $mod2_use_id\n-// @ismany \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $mod1_use_id\n+// @ismany \"$.index[*][?(@.name=='mod2')].inner.module.items[*]\" $m2pub_id\n+// @ismany \"$.index[*][?(@.name=='mod1')].inner.module.items[*]\" $m1pub_id $mod2_use_id\n+// @ismany \"$.index[*][?(@.name=='glob_private')].inner.module.items[*]\" $mod1_use_id"}, {"sha": "f81445bd48da8bdc51b7111d7ceb7cecaba1e5a4", "filename": "tests/rustdoc-json/reexport/in_root_and_mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -7,10 +7,10 @@ mod foo {\n     pub struct Foo;\n }\n \n-// @has \"$.index[*][?(@.kind=='import' && @.inner.source=='foo::Foo')]\"\n+// @has \"$.index[*].inner[?(@.import.source=='foo::Foo')]\"\n pub use foo::Foo;\n \n pub mod bar {\n-    // @has \"$.index[*][?(@.kind=='import' && @.inner.source=='crate::foo::Foo')]\"\n+    // @has \"$.index[*].inner[?(@.import.source=='crate::foo::Foo')]\"\n     pub use crate::foo::Foo;\n }"}, {"sha": "c5c41b25f7ec0938c9084a4f7b69fd584a8a6d4d", "filename": "tests/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,18 +3,20 @@\n \n pub mod foo {\n     // @set bar_id = \"$.index[*][?(@.name=='Bar')].id\"\n-    // @ismany \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    // @ismany \"$.index[*][?(@.name=='foo')].inner.module.items[*]\" $bar_id\n     pub struct Bar;\n }\n \n-// @set root_import_id = \"$.index[*][?(@.inner.source=='foo::Bar')].id\"\n-// @is \"$.index[*][?(@.inner.source=='foo::Bar')].inner.id\" $bar_id\n-// @has \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.items[*]\" $root_import_id\n+// @set root_import_id = \"$.index[*][?(@.docs=='Outer re-export')].id\"\n+// @is \"$.index[*].inner[?(@.import.source=='foo::Bar')].import.id\" $bar_id\n+// @has \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.module.items[*]\" $root_import_id\n+/// Outer re-export\n pub use foo::Bar;\n \n pub mod baz {\n-    // @set baz_import_id = \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n-    // @is \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n-    // @ismany \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    // @set baz_import_id = \"$.index[*][?(@.docs=='Inner re-export')].id\"\n+    // @is \"$.index[*].inner[?(@.import.source=='crate::foo::Bar')].import.id\" $bar_id\n+    // @ismany \"$.index[*][?(@.name=='baz')].inner.module.items[*]\" $baz_import_id\n+    /// Inner re-export\n     pub use crate::foo::Bar;\n }"}, {"sha": "ac0632b98a95a73fd51fc69e8eb7295a0f9c9b8c", "filename": "tests/rustdoc-json/reexport/macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fmacro.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,7 +9,8 @@ macro_rules! repro {\n     () => {};\n }\n \n-// @set repro2_id = \"$.index[*][?(@.inner.name=='repro2')].id\"\n+// @set repro2_id = \"$.index[*][?(@.docs=='Re-export')].id\"\n+/// Re-export\n pub use crate::repro as repro2;\n \n-// @ismany \"$.index[*][?(@.name=='macro')].inner.items[*]\" $repro_id $repro2_id\n+// @ismany \"$.index[*][?(@.name=='macro')].inner.module.items[*]\" $repro_id $repro2_id"}, {"sha": "1c49f213d1a71594e97998154555484eeb745b6e", "filename": "tests/rustdoc-json/reexport/mod_not_included.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fmod_not_included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fmod_not_included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fmod_not_included.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,6 +9,6 @@ mod m1 {\n \n pub use m1::x;\n \n-// @has \"$.index[*][?(@.name=='x' && @.kind=='function')]\"\n-// @has \"$.index[*][?(@.kind=='import' && @.inner.name=='x')].inner.source\" '\"m1::x\"'\n+// @has \"$.index[*][?(@.name=='x' && @.inner.function)]\"\n+// @has \"$.index[*].inner[?(@.import.name=='x')].import.source\" '\"m1::x\"'\n // @!has \"$.index[*][?(@.name=='m1')]\""}, {"sha": "8c8152bd16c3ba96558cfad0c1f656ff4feb3051", "filename": "tests/rustdoc-json/reexport/private_twice_one_inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fprivate_twice_one_inline.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -11,18 +11,18 @@ extern crate pub_struct as foo;\n #[doc(inline)]\n \n // @set crate_use_id = \"$.index[*][?(@.docs=='Hack A')].id\"\n-// @set foo_id = \"$.index[*][?(@.docs=='Hack A')].inner.id\"\n+// @set foo_id = \"$.index[*][?(@.docs=='Hack A')].inner.import.id\"\n /// Hack A\n pub use foo::Foo;\n \n // @set bar_id = \"$.index[*][?(@.name=='bar')].id\"\n pub mod bar {\n-    // @is \"$.index[*][?(@.docs=='Hack B')].inner.id\" $foo_id\n+    // @is \"$.index[*][?(@.docs=='Hack B')].inner.import.id\" $foo_id\n     // @set bar_use_id = \"$.index[*][?(@.docs=='Hack B')].id\"\n-    // @ismany \"$.index[*][?(@.name=='bar')].inner.items[*]\" $bar_use_id\n+    // @ismany \"$.index[*][?(@.name=='bar')].inner.module.items[*]\" $bar_use_id\n     /// Hack B\n     pub use foo::Foo;\n }\n \n-// @ismany \"$.index[*][?(@.kind=='import')].id\" $crate_use_id $bar_use_id\n-// @ismany \"$.index[*][?(@.name=='private_twice_one_inline')].inner.items[*]\" $bar_id $crate_use_id\n+// @ismany \"$.index[*][?(@.inner.import)].id\" $crate_use_id $bar_use_id\n+// @ismany \"$.index[*][?(@.name=='private_twice_one_inline')].inner.module.items[*]\" $bar_id $crate_use_id"}, {"sha": "cdcbf2a2bc86cd830f75e251969cd60bfffb913c", "filename": "tests/rustdoc-json/reexport/private_two_names.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fprivate_two_names.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,15 +8,19 @@\n \n // @!has \"$.index[*][?(@.name=='style')]\"\n mod style {\n-    // @set color_struct_id = \"$.index[*][?(@.kind=='struct' && @.name=='Color')].id\"\n+    // @set color_struct_id = \"$.index[*][?(@.inner.struct && @.name=='Color')].id\"\n     pub struct Color;\n }\n \n-// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].inner.id\" $color_struct_id\n-// @set color_export_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='Color')].id\"\n+// @is \"$.index[*][?(@.docs=='First re-export')].inner.import.id\" $color_struct_id\n+// @is \"$.index[*][?(@.docs=='First re-export')].inner.import.name\" \\\"Color\\\"\n+// @set color_export_id = \"$.index[*][?(@.docs=='First re-export')].id\"\n+/// First re-export\n pub use style::Color;\n-// @is \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].inner.id\" $color_struct_id\n-// @set colour_export_id = \"$.index[*][?(@.kind=='import' && @.inner.name=='Colour')].id\"\n+// @is \"$.index[*][?(@.docs=='Second re-export')].inner.import.id\" $color_struct_id\n+// @is \"$.index[*][?(@.docs=='Second re-export')].inner.import.name\" \\\"Colour\\\"\n+// @set colour_export_id = \"$.index[*][?(@.docs=='Second re-export')].id\"\n+/// Second re-export\n pub use style::Color as Colour;\n \n-// @ismany \"$.index[*][?(@.name=='private_two_names')].inner.items[*]\" $color_export_id $colour_export_id\n+// @ismany \"$.index[*][?(@.name=='private_two_names')].inner.module.items[*]\" $color_export_id $colour_export_id"}, {"sha": "61075088af9dd5b893fb168c767bb6ccf5ed5e14", "filename": "tests/rustdoc-json/reexport/reexport_method_from_private_module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Freexport_method_from_private_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Freexport_method_from_private_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Freexport_method_from_private_module.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,9 +1,9 @@\n // Regression test for <https://github.com/rust-lang/rust/issues/102583>.\n \n // @set impl_S = \"$.index[*][?(@.docs=='impl S')].id\"\n-// @has \"$.index[*][?(@.name=='S')].inner.impls[*]\" $impl_S\n+// @has \"$.index[*][?(@.name=='S')].inner.struct.impls[*]\" $impl_S\n // @set is_present = \"$.index[*][?(@.name=='is_present')].id\"\n-// @is \"$.index[*][?(@.docs=='impl S')].inner.items[*]\" $is_present\n+// @is \"$.index[*][?(@.docs=='impl S')].inner.impl.items[*]\" $is_present\n // @!has \"$.index[*][?(@.name=='hidden_impl')]\"\n // @!has \"$.index[*][?(@.name=='hidden_fn')]\"\n "}, {"sha": "9114460231dc84d266bd2ee90d44da1904a8b55f", "filename": "tests/rustdoc-json/reexport/rename_private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Frename_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Frename_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Frename_private.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -3,11 +3,11 @@\n #![no_core]\n #![feature(no_core)]\n \n-// @!has \"$.index[*][?(@.kind=='inner')]\"\n+// @!has \"$.index[*][?(@.name=='inner')]\"\n mod inner {\n     // @has \"$.index[*][?(@.name=='Public')]\"\n     pub struct Public;\n }\n \n-// @is \"$.index[*][?(@.kind=='import')].inner.name\" \\\"NewName\\\"\n+// @is \"$.index[*][?(@.inner.import)].inner.import.name\" \\\"NewName\\\"\n pub use inner::Public as NewName;"}, {"sha": "d0fd314bd8c9969294e1c84baad48ac23366526e", "filename": "tests/rustdoc-json/reexport/rename_public.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Frename_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Frename_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Frename_public.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -6,12 +6,13 @@\n // @set inner_id = \"$.index[*][?(@.name=='inner')].id\"\n pub mod inner {\n     // @set public_id = \"$.index[*][?(@.name=='Public')].id\"\n-    // @ismany \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @ismany \"$.index[*][?(@.name=='inner')].inner.module.items[*]\" $public_id\n     pub struct Public;\n }\n-// @set import_id = \"$.index[*][?(@.inner.name=='NewName')].id\"\n-// @!has \"$.index[*][?(@.inner.name=='Public')]\"\n-// @is \"$.index[*][?(@.inner.name=='NewName')].inner.source\" \\\"inner::Public\\\"\n+// @set import_id = \"$.index[*][?(@.docs=='Re-export')].id\"\n+// @!has \"$.index[*].inner[?(@.import.name=='Public')]\"\n+// @is \"$.index[*].inner[?(@.import.name=='NewName')].import.source\" \\\"inner::Public\\\"\n+/// Re-export\n pub use inner::Public as NewName;\n \n-// @ismany \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id $import_id\n+// @ismany \"$.index[*][?(@.name=='rename_public')].inner.module.items[*]\" $inner_id $import_id"}, {"sha": "6a765b733016e8a05c81d143f2255ea8bdbcd30d", "filename": "tests/rustdoc-json/reexport/same_name_different_types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsame_name_different_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsame_name_different_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fsame_name_different_types.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -16,10 +16,10 @@ pub mod nested {\n     pub fn Foo() {}\n }\n \n-// @ismany \"$.index[*][?(@.inner.name == 'Foo' && @.kind == 'import')].inner.id\" $foo_fn $foo_struct\n-// @ismany \"$.index[*][?(@.inner.name == 'Bar' && @.kind == 'import')].inner.id\" $foo_fn $foo_struct\n+// @ismany \"$.index[*].inner[?(@.import.name == 'Foo')].import.id\" $foo_fn $foo_struct\n+// @ismany \"$.index[*].inner[?(@.import.name == 'Bar')].import.id\" $foo_fn $foo_struct\n \n-// @count \"$.index[*][?(@.inner.name == 'Foo' && @.kind == 'import')]\" 2\n+// @count \"$.index[*].inner[?(@.import.name == 'Foo')]\" 2\n pub use nested::Foo;\n-// @count \"$.index[*][?(@.inner.name == 'Bar' && @.kind == 'import')]\" 2\n+// @count \"$.index[*].inner[?(@.import.name == 'Bar')]\" 2\n pub use Foo as Bar;"}, {"sha": "a00547dc348118f6b1b5c4efc2a9f2d39ec71761", "filename": "tests/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -11,11 +11,13 @@ mod inner {\n     pub trait Trait {}\n }\n \n-// @set export_id = \"$.index[*][?(@.inner.name=='Trait')].id\"\n-// @is \"$.index[*][?(@.inner.name=='Trait')].inner.id\" $trait_id\n+// @set export_id = \"$.index[*][?(@.docs=='First re-export')].id\"\n+// @is \"$.index[*].inner[?(@.import.name=='Trait')].import.id\" $trait_id\n+/// First re-export\n pub use inner::Trait;\n-// @set reexport_id = \"$.index[*][?(@.inner.name=='Reexport')].id\"\n-// @is \"$.index[*][?(@.inner.name=='Reexport')].inner.id\" $trait_id\n+// @set reexport_id = \"$.index[*][?(@.docs=='Second re-export')].id\"\n+// @is \"$.index[*].inner[?(@.import.name=='Reexport')].import.id\" $trait_id\n+/// Second re-export\n pub use inner::Trait as Reexport;\n \n-// @ismany \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id $export_id\n+// @ismany \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.module.items[*]\" $reexport_id $export_id"}, {"sha": "462efee51bf4093226dd13999d6f2be10b7dd671", "filename": "tests/rustdoc-json/reexport/simple_private.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fsimple_private.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,9 +8,9 @@ mod inner {\n     pub struct Public;\n }\n \n-// @is \"$.index[*][?(@.kind=='import')].inner.name\" \\\"Public\\\"\n-// @is \"$.index[*][?(@.kind=='import')].inner.id\" $pub_id\n-// @set use_id = \"$.index[*][?(@.kind=='import')].id\"\n+// @is \"$.index[*][?(@.inner.import)].inner.import.name\" \\\"Public\\\"\n+// @is \"$.index[*][?(@.inner.import)].inner.import.id\" $pub_id\n+// @set use_id = \"$.index[*][?(@.inner.import)].id\"\n pub use inner::Public;\n \n-// @ismany \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $use_id\n+// @ismany \"$.index[*][?(@.name=='simple_private')].inner.module.items[*]\" $use_id"}, {"sha": "1373f96f87f070434c3daa7d7a7e9301a8bd4d11", "filename": "tests/rustdoc-json/reexport/simple_public.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freexport%2Fsimple_public.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -7,12 +7,13 @@\n pub mod inner {\n \n     // @set public_id = \"$.index[*][?(@.name=='Public')].id\"\n-    // @ismany \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    // @ismany \"$.index[*][?(@.name=='inner')].inner.module.items[*]\" $public_id\n     pub struct Public;\n }\n \n-// @set import_id = \"$.index[*][?(@.inner.name=='Public')].id\"\n-// @is \"$.index[*][?(@.inner.name=='Public')].inner.source\" \\\"inner::Public\\\"\n+// @set import_id = \"$.index[*][?(@.docs=='Outer')].id\"\n+// @is \"$.index[*][?(@.docs=='Outer')].inner.import.source\" \\\"inner::Public\\\"\n+/// Outer\n pub use inner::Public;\n \n-// @ismany \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id $inner_id\n+// @ismany \"$.index[*][?(@.name=='simple_public')].inner.module.items[*]\" $import_id $inner_id"}, {"sha": "0ce81b5e59fa6ddffdb8170f56cbb2574158d005", "filename": "tests/rustdoc-json/return_private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freturn_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Freturn_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Freturn_private.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,8 +8,8 @@ mod secret {\n     pub struct Secret;\n }\n \n-// @is \"$.index[*][?(@.name=='get_secret')].kind\" \\\"function\\\"\n-// @is \"$.index[*][?(@.name=='get_secret')].inner.decl.output.inner.name\" \\\"secret::Secret\\\"\n+// @has \"$.index[*][?(@.name=='get_secret')].inner.function\"\n+// @is \"$.index[*][?(@.name=='get_secret')].inner.function.decl.output.resolved_path.name\" \\\"secret::Secret\\\"\n pub fn get_secret() -> secret::Secret {\n     secret::Secret\n }"}, {"sha": "777260100d6f132d88ffbd47394cfeda0689deb0", "filename": "tests/rustdoc-json/structs/plain_all_pub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,7 +5,7 @@ pub struct Demo {\n \n // @set x = \"$.index[*][?(@.name=='x')].id\"\n // @set y = \"$.index[*][?(@.name=='y')].id\"\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[1]\" $y\n-// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 2\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" false\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[0]\" $x\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[1]\" $y\n+// @count \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[*]\" 2\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields_stripped\" false"}, {"sha": "1ff4489ef6b62b54a428aa8339f29d0edbb0e509", "filename": "tests/rustdoc-json/structs/plain_doc_hidden.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -6,6 +6,6 @@ pub struct Demo {\n \n // @set x = \"$.index[*][?(@.name=='x')].id\"\n // @!has \"$.index[*][?(@.name=='y')].id\"\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n-// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 1\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[0]\" $x\n+// @count \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[*]\" 1\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields_stripped\" true"}, {"sha": "c037c0251b9c82cc71fe15908612cae313c35607", "filename": "tests/rustdoc-json/structs/plain_empty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Fplain_empty.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,5 +1,5 @@\n // @is \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n-// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.kind.plain.fields_stripped\" false\n-// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.kind.plain.fields\" []\n+// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.struct\"\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.struct.kind.plain.fields_stripped\" false\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.struct.kind.plain.fields\" []\n pub struct PlainEmpty {}"}, {"sha": "ff061be62d133f86f3407f76738c1e86a269666e", "filename": "tests/rustdoc-json/structs/plain_pub_priv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -4,6 +4,6 @@ pub struct Demo {\n }\n \n // @set x = \"$.index[*][?(@.name=='x')].id\"\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n-// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 1\n-// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[0]\" $x\n+// @count \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields[*]\" 1\n+// @is \"$.index[*][?(@.name=='Demo')].inner.struct.kind.plain.fields_stripped\" true"}, {"sha": "16ab95ed27150704c59dc41793f3f77ca8e61557", "filename": "tests/rustdoc-json/structs/tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Ftuple.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,4 +1,4 @@\n // @is \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n-// @is \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple\" '[null, null]'\n+// @has \"$.index[*][?(@.name=='Tuple')].inner.struct\"\n+// @is \"$.index[*][?(@.name=='Tuple')].inner.struct.kind.tuple\" '[null, null]'\n pub struct Tuple(u32, String);"}, {"sha": "4d4af8558bbc5e220a5db70eae8bc808ae9b922e", "filename": "tests/rustdoc-json/structs/tuple_empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,2 +1,2 @@\n-// @is \"$.index[*][?(@.name=='TupleUnit')].inner.kind.tuple\" []\n+// @is \"$.index[*][?(@.name=='TupleUnit')].inner.struct.kind.tuple\" []\n pub struct TupleUnit();"}, {"sha": "a669ba1dfcc6bd4210c738db916d09a29bf8f8fa", "filename": "tests/rustdoc-json/structs/tuple_pub_priv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -7,7 +7,7 @@ pub struct Demo(\n \n // @set field = \"$.index[*][?(@.docs=='field')].id\"\n \n-// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[0]\" null\n-// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[1]\" $field\n-// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[2]\" null\n-// @count \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[*]\" 3\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.struct.kind.tuple[0]\" null\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.struct.kind.tuple[1]\" $field\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.struct.kind.tuple[2]\" null\n+// @count \"$.index[*][?(@.name=='Demo')].inner.struct.kind.tuple[*]\" 3"}, {"sha": "640d3fb786523d953f5ed059650e22702d9dfc29", "filename": "tests/rustdoc-json/structs/unit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Funit.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,4 +1,4 @@\n // @is \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n-// @is \"$.index[*][?(@.name=='Unit')].inner.kind\" \\\"unit\\\"\n+// @has \"$.index[*][?(@.name=='Unit')].inner.struct\"\n+// @is \"$.index[*][?(@.name=='Unit')].inner.struct.kind\" \\\"unit\\\"\n pub struct Unit;"}, {"sha": "d721cbdbe25734a07d72715d37ed1327000dd175", "filename": "tests/rustdoc-json/structs/with_generics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Fwith_generics.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,13 +1,13 @@\n use std::collections::HashMap;\n \n // @is \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n-// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n-// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type.bounds\" []\n-// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n-// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type.bounds\" []\n-// @is \"$.index[*][?(@.name=='WithGenerics')].inner.kind.plain.fields_stripped\" true\n-// @is \"$.index[*][?(@.name=='WithGenerics')].inner.kind.plain.fields\" []\n+// @has \"$.index[*][?(@.name=='WithGenerics')].inner.struct\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.struct.generics.params[0].name\" \\\"T\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.struct.generics.params[0].kind.type.bounds\" []\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.struct.generics.params[1].name\" \\\"U\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.struct.generics.params[1].kind.type.bounds\" []\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.struct.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.struct.kind.plain.fields\" []\n pub struct WithGenerics<T, U> {\n     stuff: Vec<T>,\n     things: HashMap<U, U>,"}, {"sha": "e0285a9e68840f95e023780508f79f7245c99ca6", "filename": "tests/rustdoc-json/structs/with_primitives.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,9 +1,11 @@\n+// ignore-tidy-linelength\n+\n // @is \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n-// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n-// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.kind.plain.fields_stripped\" true\n-// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.kind.plain.fields\" []\n+// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.struct\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.struct.generics.params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.struct.generics.params[0].kind.lifetime.outlives\" []\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.struct.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.struct.kind.plain.fields\" []\n pub struct WithPrimitives<'a> {\n     num: u32,\n     s: &'a str,"}, {"sha": "219e2d9bc54f40d628882be1b9bdba8f358f81c7", "filename": "tests/rustdoc-json/traits/has_body.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Fhas_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftraits%2Fhas_body.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,21 +1,21 @@\n // @has \"$.index[*][?(@.name=='Foo')]\"\n pub trait Foo {\n-    // @is \"$.index[*][?(@.name=='no_self')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='no_self')].inner.function.has_body\" false\n     fn no_self();\n-    // @is \"$.index[*][?(@.name=='move_self')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='move_self')].inner.function.has_body\" false\n     fn move_self(self);\n-    // @is \"$.index[*][?(@.name=='ref_self')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='ref_self')].inner.function.has_body\" false\n     fn ref_self(&self);\n \n-    // @is \"$.index[*][?(@.name=='no_self_def')].inner.has_body\" true\n+    // @is \"$.index[*][?(@.name=='no_self_def')].inner.function.has_body\" true\n     fn no_self_def() {}\n-    // @is \"$.index[*][?(@.name=='move_self_def')].inner.has_body\" true\n+    // @is \"$.index[*][?(@.name=='move_self_def')].inner.function.has_body\" true\n     fn move_self_def(self) {}\n-    // @is \"$.index[*][?(@.name=='ref_self_def')].inner.has_body\" true\n+    // @is \"$.index[*][?(@.name=='ref_self_def')].inner.function.has_body\" true\n     fn ref_self_def(&self) {}\n }\n \n pub trait Bar: Clone {\n-    // @is \"$.index[*][?(@.name=='method')].inner.has_body\" false\n+    // @is \"$.index[*][?(@.name=='method')].inner.function.has_body\" false\n     fn method(&self, param: usize);\n }"}, {"sha": "7d351ad61be24f5fa66070f55f1594093ecd77c3", "filename": "tests/rustdoc-json/traits/implementors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Fimplementors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Fimplementors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftraits%2Fimplementors.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -2,18 +2,18 @@\n #![no_core]\n \n // @set wham = \"$.index[*][?(@.name=='Wham')].id\"\n-// @count \"$.index[*][?(@.name=='Wham')].inner.implementations[*]\" 1\n-// @set gmWham = \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\"\n+// @count \"$.index[*][?(@.name=='Wham')].inner.trait.implementations[*]\" 1\n+// @set gmWham = \"$.index[*][?(@.name=='Wham')].inner.trait.implementations[0]\"\n pub trait Wham {}\n \n-// @count \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[*]\" 1\n-// @is \"$.index[*][?(@.name=='GeorgeMichael')].inner.impls[0]\" $gmWham\n+// @count \"$.index[*][?(@.name=='GeorgeMichael')].inner.struct.impls[*]\" 1\n+// @is \"$.index[*][?(@.name=='GeorgeMichael')].inner.struct.impls[0]\" $gmWham\n // @set gm = \"$.index[*][?(@.name=='Wham')].id\"\n \n // jsonpath_lib isnt expressive enough (for now) to get the \"impl\" item, so we\n // just check it isn't pointing to the type, but when you port to jsondocck-ng\n // check what the impl item is\n-// @!is \"$.index[*][?(@.name=='Wham')].inner.implementations[0]\" $gm\n+// @!is \"$.index[*][?(@.name=='Wham')].inner.trait.implementations[0]\" $gm\n pub struct GeorgeMichael {}\n \n impl Wham for GeorgeMichael {}"}, {"sha": "2123ac40427ea0155bfe1a8c5975b2d1e55bb4f6", "filename": "tests/rustdoc-json/traits/supertrait.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Fsupertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftraits%2Fsupertrait.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -8,19 +8,19 @@\n pub trait Loud {}\n \n // @set very_loud_id = \"$.index[*][?(@.name=='VeryLoud')].id\"\n-// @count \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[*]\" 1\n-// @is    \"$.index[*][?(@.name=='VeryLoud')].inner.bounds[0].trait_bound.trait.id\" $loud_id\n+// @count \"$.index[*][?(@.name=='VeryLoud')].inner.trait.bounds[*]\" 1\n+// @is    \"$.index[*][?(@.name=='VeryLoud')].inner.trait.bounds[0].trait_bound.trait.id\" $loud_id\n pub trait VeryLoud: Loud {}\n \n // @set sounds_good_id = \"$.index[*][?(@.name=='SoundsGood')].id\"\n pub trait SoundsGood {}\n \n-// @count \"$.index[*][?(@.name=='MetalBand')].inner.bounds[*]\" 2\n-// @is    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[0].trait_bound.trait.id\" $very_loud_id\n-// @is    \"$.index[*][?(@.name=='MetalBand')].inner.bounds[1].trait_bound.trait.id\" $sounds_good_id\n+// @count \"$.index[*][?(@.name=='MetalBand')].inner.trait.bounds[*]\" 2\n+// @is    \"$.index[*][?(@.name=='MetalBand')].inner.trait.bounds[0].trait_bound.trait.id\" $very_loud_id\n+// @is    \"$.index[*][?(@.name=='MetalBand')].inner.trait.bounds[1].trait_bound.trait.id\" $sounds_good_id\n pub trait MetalBand: VeryLoud + SoundsGood {}\n \n-// @count \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[*]\" 2\n-// @is    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[1].trait_bound.trait.id\" $very_loud_id\n-// @is    \"$.index[*][?(@.name=='DnabLatem')].inner.bounds[0].trait_bound.trait.id\" $sounds_good_id\n+// @count \"$.index[*][?(@.name=='DnabLatem')].inner.trait.bounds[*]\" 2\n+// @is    \"$.index[*][?(@.name=='DnabLatem')].inner.trait.bounds[1].trait_bound.trait.id\" $very_loud_id\n+// @is    \"$.index[*][?(@.name=='DnabLatem')].inner.trait.bounds[0].trait_bound.trait.id\" $sounds_good_id\n pub trait DnabLatem: SoundsGood + VeryLoud {}"}, {"sha": "4fcc26f7de2ce3641e55eb5f9b2b2a5a69607807", "filename": "tests/rustdoc-json/traits/trait_alias.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftraits%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftraits%2Ftrait_alias.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -4,24 +4,24 @@\n #![feature(trait_alias)]\n \n // @set Orig = \"$.index[*][?(@.name == 'Orig')].id\"\n-// @is \"$.index[*][?(@.name == 'Orig')].kind\" '\"trait\"'\n+// @has \"$.index[*][?(@.name == 'Orig')].inner.trait\"\n pub trait Orig<T> {}\n \n // @set Alias = \"$.index[*][?(@.name == 'Alias')].id\"\n-// @is \"$.index[*][?(@.name == 'Alias')].kind\" '\"trait_alias\"'\n-// @is \"$.index[*][?(@.name == 'Alias')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @count \"$.index[*][?(@.name == 'Alias')].inner.params[*]\" 1\n-// @is \"$.index[*][?(@.name == 'Alias')].inner.params[0].trait_bound.trait.id\" $Orig\n-// @is \"$.index[*][?(@.name == 'Alias')].inner.params[0].trait_bound.trait.args.angle_bracketed.args[0].type.inner\" '\"i32\"'\n+// @has \"$.index[*][?(@.name == 'Alias')].inner.trait_alias\"\n+// @is \"$.index[*][?(@.name == 'Alias')].inner.trait_alias.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @count \"$.index[*][?(@.name == 'Alias')].inner.trait_alias.params[*]\" 1\n+// @is \"$.index[*][?(@.name == 'Alias')].inner.trait_alias.params[0].trait_bound.trait.id\" $Orig\n+// @is \"$.index[*][?(@.name == 'Alias')].inner.trait_alias.params[0].trait_bound.trait.args.angle_bracketed.args[0].type.primitive\" '\"i32\"'\n pub trait Alias = Orig<i32>;\n \n pub struct Struct;\n \n impl Orig<i32> for Struct {}\n \n-// @is \"$.index[*][?(@.name=='takes_alias')].inner.decl.inputs[0][1].kind\" '\"impl_trait\"'\n-// @is \"$.index[*][?(@.name=='takes_alias')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.id\" $Alias\n-// @is \"$.index[*][?(@.name=='takes_alias')].inner.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $Alias\n+// @has \"$.index[*][?(@.name=='takes_alias')].inner.function.decl.inputs[0][1].impl_trait\"\n+// @is \"$.index[*][?(@.name=='takes_alias')].inner.function.decl.inputs[0][1].impl_trait[0].trait_bound.trait.id\" $Alias\n+// @is \"$.index[*][?(@.name=='takes_alias')].inner.function.generics.params[0].kind.type.bounds[0].trait_bound.trait.id\" $Alias\n pub fn takes_alias(_: impl Alias) {}\n // FIXME: Should the trait be mentioned in both the decl and generics?\n "}, {"sha": "e5ee60fad59f4b16fb281db2a327ed0809877e82", "filename": "tests/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,46 +1,46 @@\n // ignore-tidy-linelength\n use std::fmt::Debug;\n \n-// @count \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 3\n+// @count \"$.index[*][?(@.name=='dyn')].inner.module.items[*]\" 3\n // @set sync_int_gen = \"$.index[*][?(@.name=='SyncIntGen')].id\"\n // @set ref_fn       = \"$.index[*][?(@.name=='RefFn')].id\"\n // @set weird_order  = \"$.index[*][?(@.name=='WeirdOrder')].id\"\n-// @ismany \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen $ref_fn $weird_order\n+// @ismany \"$.index[*][?(@.name=='dyn')].inner.module.items[*]\" $sync_int_gen $ref_fn $weird_order\n \n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n-// @count \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"dyn_trait\\\"\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.lifetime\" \\\"\\'static\\\"\n-// @count \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[*]\" 3\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Fn\"'\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Send\"'\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.name\" '\"Sync\"'\n-// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @has    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @has    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.name\" \\\"Box\\\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.bindings\" []\n+// @count \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args\" 1\n+// @has    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait\"\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.lifetime\" \\\"\\'static\\\"\n+// @count \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[*]\" 3\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[0].generic_params\" []\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[1].generic_params\" []\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[2].generic_params\" []\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[0].trait.name\" '\"Fn\"'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[1].trait.name\" '\"Send\"'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[2].trait.name\" '\"Sync\"'\n+// @is    \"$.index[*][?(@.name=='SyncIntGen')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[0].trait.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"primitive\": \"i32\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n \n-// @is \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"dyn_trait\"'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n-// @count \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+// @has \"$.index[*][?(@.name=='RefFn')].inner.typedef\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n+// @has \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.mutable\" 'false'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.lifetime\" \"\\\"'a\\\"\"\n+// @has \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.lifetime\" null\n+// @count \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[*]\" 1\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[0].trait.name\" '\"Fn\"'\n+// @has \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[0].trait.args.parenthesized.inputs[0].borrowed_ref\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[0].trait.args.parenthesized.inputs[0].borrowed_ref.lifetime\" \"\\\"'b\\\"\"\n+// @has \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[0].trait.args.parenthesized.output.borrowed_ref\"\n+// @is \"$.index[*][?(@.name=='RefFn')].inner.typedef.type.borrowed_ref.type.dyn_trait.traits[0].trait.args.parenthesized.output.borrowed_ref.lifetime\" \"\\\"'b\\\"\"\n pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n \n-// @is    \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.name\" '\"Send\"'\n-// @is    \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.name\" '\"Debug\"'\n+// @is    \"$.index[*][?(@.name=='WeirdOrder')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[0].trait.name\" '\"Send\"'\n+// @is    \"$.index[*][?(@.name=='WeirdOrder')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.dyn_trait.traits[1].trait.name\" '\"Debug\"'\n pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "c30146ce9e036875a51584d43614d24ef64ccc67", "filename": "tests/rustdoc-json/type/extern.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Fextern.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -6,5 +6,4 @@ extern {\n }\n \n // @is \"$.index[*][?(@.docs=='No inner information')].name\" '\"Foo\"'\n-// @is \"$.index[*][?(@.docs=='No inner information')].kind\" '\"foreign_type\"'\n-// @!has \"$.index[*][?(@.docs=='No inner information')].inner\"\n+// @is \"$.index[*][?(@.docs=='No inner information')].inner\" \\\"foreign_type\\\""}, {"sha": "424c5dce273a25d07f646480fbfbe05da8b47d16", "filename": "tests/rustdoc-json/type/fn_lifetime.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Ffn_lifetime.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,27 +1,26 @@\n // ignore-tidy-linelength\n \n-// @is \"$.index[*][?(@.name=='GenericFn')].kind\" \\\"typedef\\\"\n+// @has \"$.index[*][?(@.name=='GenericFn')].inner.typedef\"\n \n-// @ismany \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].name\" \\\"\\'a\\\"\n-// @has    \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime\"\n-// @count  \"$.index[*][?(@.name=='GenericFn')].inner.generics.params[*].kind.lifetime.outlives[*]\" 0\n-// @count  \"$.index[*][?(@.name=='GenericFn')].inner.generics.where_predicates[*]\" 0\n-// @is     \"$.index[*][?(@.name=='GenericFn')].inner.type.kind\" \\\"function_pointer\\\"\n-// @count  \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.generic_params[*]\" 0\n-// @count  \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*]\" 1\n-// @is     \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is     \"$.index[*][?(@.name=='GenericFn')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+// @ismany \"$.index[*][?(@.name=='GenericFn')].inner.typedef.generics.params[*].name\" \\\"\\'a\\\"\n+// @has    \"$.index[*][?(@.name=='GenericFn')].inner.typedef.generics.params[*].kind.lifetime\"\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.typedef.generics.params[*].kind.lifetime.outlives[*]\" 0\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.typedef.generics.where_predicates[*]\" 0\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.typedef.type.function_pointer.generic_params[*]\" 0\n+// @count  \"$.index[*][?(@.name=='GenericFn')].inner.typedef.type.function_pointer.decl.inputs[*]\" 1\n+// @is     \"$.index[*][?(@.name=='GenericFn')].inner.typedef.type.function_pointer.decl.inputs[*][1].borrowed_ref.lifetime\" \\\"\\'a\\\"\n+// @is     \"$.index[*][?(@.name=='GenericFn')].inner.typedef.type.function_pointer.decl.output.borrowed_ref.lifetime\" \\\"\\'a\\\"\n \n pub type GenericFn<'a> = fn(&'a i32) -> &'a i32;\n \n-// @is    \"$.index[*][?(@.name=='ForAll')].kind\" \\\"typedef\\\"\n-// @count \"$.index[*][?(@.name=='ForAll')].inner.generics.params[*]\" 0\n-// @count \"$.index[*][?(@.name=='ForAll')].inner.generics.where_predicates[*]\" 0\n-// @count \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*]\" 1\n-// @is    \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].name\" \\\"\\'a\\\"\n-// @has   \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime\"\n-// @count \"$.index[*][?(@.name=='ForAll')].inner.type.inner.generic_params[*].kind.lifetime.outlives[*]\" 0\n-// @count \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*]\" 1\n-// @is    \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.inputs[*][1].inner.lifetime\" \\\"\\'a\\\"\n-// @is    \"$.index[*][?(@.name=='ForAll')].inner.type.inner.decl.output.inner.lifetime\" \\\"\\'a\\\"\n+// @has    \"$.index[*][?(@.name=='ForAll')].inner.typedef\"\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.typedef.generics.params[*]\" 0\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.typedef.generics.where_predicates[*]\" 0\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.generic_params[*]\" 1\n+// @is    \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.generic_params[*].name\" \\\"\\'a\\\"\n+// @has   \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.generic_params[*].kind.lifetime\"\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.generic_params[*].kind.lifetime.outlives[*]\" 0\n+// @count \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.decl.inputs[*]\" 1\n+// @is    \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.decl.inputs[*][1].borrowed_ref.lifetime\" \\\"\\'a\\\"\n+// @is    \"$.index[*][?(@.name=='ForAll')].inner.typedef.type.function_pointer.decl.output.borrowed_ref.lifetime\" \\\"\\'a\\\"\n pub type ForAll = for<'a> fn(&'a i32) -> &'a i32;"}, {"sha": "b46428745324f997c769265e3e8508c005e7b7e6", "filename": "tests/rustdoc-json/type/generic_default.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fgeneric_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Fgeneric_default.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -9,25 +9,25 @@ pub enum Result<T, E> {\n // @set my_error = \"$.index[*][?(@.name=='MyError')].id\"\n pub struct MyError {}\n \n-// @is    \"$.index[*][?(@.name=='MyResult')].kind\" \\\"typedef\\\"\n-// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.where_predicates[*]\" 0\n-// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.params[*]\" 2\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].name\" \\\"T\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].name\" \\\"E\\\"\n-// @has   \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type\"\n-// @has   \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type\"\n-// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.bounds[*]\" 0\n-// @count \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.bounds[*]\" 0\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[0].kind.type.default\" null\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.kind\" \\\"resolved_path\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.id\" $my_error\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.generics.params[1].kind.type.default.inner.name\" \\\"MyError\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.kind\" \\\"resolved_path\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.id\" $result\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.name\" \\\"Result\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.bindings\" []\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"generic\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.kind\" \\\"generic\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[0].type.inner\" \\\"T\\\"\n-// @is    \"$.index[*][?(@.name=='MyResult')].inner.type.inner.args.angle_bracketed.args[1].type.inner\" \\\"E\\\"\n+// @has    \"$.index[*][?(@.name=='MyResult')].inner.typedef\"\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.where_predicates[*]\" 0\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[*]\" 2\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[0].name\" \\\"T\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[1].name\" \\\"E\\\"\n+// @has   \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[0].kind.type\"\n+// @has   \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[1].kind.type\"\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[0].kind.type.bounds[*]\" 0\n+// @count \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[1].kind.type.bounds[*]\" 0\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[0].kind.type.default\" null\n+// @has    \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[1].kind.type.default.resolved_path\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[1].kind.type.default.resolved_path.id\" $my_error\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.generics.params[1].kind.type.default.resolved_path.name\" \\\"MyError\\\"\n+// @has    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.id\" $result\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.name\" \\\"Result\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.args.angle_bracketed.bindings\" []\n+// @has    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.generic\"\n+// @has    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.args.angle_bracketed.args[1].type.generic\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.args.angle_bracketed.args[0].type.generic\" \\\"T\\\"\n+// @is    \"$.index[*][?(@.name=='MyResult')].inner.typedef.type.resolved_path.args.angle_bracketed.args[1].type.generic\" \\\"E\\\"\n pub type MyResult<T, E = MyError> = Result<T, E>;"}, {"sha": "f7ac878ceaa7ea0d9131912122854917b9393e84", "filename": "tests/rustdoc-json/type/hrtb.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n \n-// @is \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\",\"kind\": \"generic\"}'\n-// @is \"$.index[*][?(@.name=='genfn')].inner.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is \"$.index[*][?(@.name=='genfn')].inner.function.generics.where_predicates[0].bound_predicate.type\" '{\"generic\": \"F\"}'\n+// @is \"$.index[*][?(@.name=='genfn')].inner.function.generics.where_predicates[0].bound_predicate.generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n pub fn genfn<F>(f: F)\n where\n     for<'a, 'b> F: Fn(&'a i32, &'b i32),\n@@ -10,14 +10,12 @@ where\n     f(&zero, &zero);\n }\n \n-// @is \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @is \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n-// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"dyn_trait\"'\n-// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n-// @count \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n-// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n-// @is \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.name\" '\"Fn\"'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.function.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.function.generics\" '{\"params\": [], \"where_predicates\": []}'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.function.decl.inputs[0][1].borrowed_ref.type.dyn_trait.lifetime\" null\n+// @count \"$.index[*][?(@.name=='dynfn')].inner.function.decl.inputs[0][1].borrowed_ref.type.dyn_trait.traits[*]\" 1\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.function.decl.inputs[0][1].borrowed_ref.type.dyn_trait.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is \"$.index[*][?(@.name=='dynfn')].inner.function.decl.inputs[0][1].borrowed_ref.type.dyn_trait.traits[0].trait.name\" '\"Fn\"'\n pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n     let zero = 0;\n     f(&zero, &zero);"}, {"sha": "64c6c53ce47216cf61f6fd5f104129e5bc979007", "filename": "tests/rustdoc-json/type/inherent_associated_type.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -12,18 +12,15 @@ pub struct Owner;\n pub fn create() -> Owner::Metadata {\n     OwnerMetadata\n }\n-// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.kind' '\"qualified_path\"'\n-// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.name' '\"Metadata\"'\n-// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.trait' null\n-// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.kind' '\"resolved_path\"'\n-// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.inner.id' $Owner\n+// @is '$.index[*][?(@.name==\"create\")].inner.function.decl.output.qualified_path.name' '\"Metadata\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.function.decl.output.qualified_path.trait' null\n+// @is '$.index[*][?(@.name==\"create\")].inner.function.decl.output.qualified_path.self_type.resolved_path.id' $Owner\n \n /// impl\n impl Owner {\n     /// iat\n     pub type Metadata = OwnerMetadata;\n }\n // @set iat = '$.index[*][?(@.docs==\"iat\")].id'\n-// @is '$.index[*][?(@.docs==\"impl\")].inner.items[*]' $iat\n-// @is '$.index[*][?(@.docs==\"iat\")].kind' '\"assoc_type\"'\n-// @is '$.index[*][?(@.docs==\"iat\")].inner.default.inner.id' $OwnerMetadata\n+// @is '$.index[*][?(@.docs==\"impl\")].inner.impl.items[*]' $iat\n+// @is '$.index[*][?(@.docs==\"iat\")].inner.assoc_type.default.resolved_path.id' $OwnerMetadata"}, {"sha": "2e9b13d0cac23686a6808a0e443c8ec30c7c0a6f", "filename": "tests/rustdoc-json/type/inherent_associated_type_bound.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,14 +5,12 @@\n // @set Carrier = '$.index[*][?(@.name==\"Carrier\")].id'\n pub struct Carrier<'a>(&'a ());\n \n-// @is '$.index[*][?(@.name==\"User\")].inner.type.kind' '\"function_pointer\"'\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.generic_params[*].name' \\\"\"'b\"\\\"\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].kind' '\"qualified_path\"'\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.id' $Carrier\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.args.angle_bracketed.args[0].lifetime' \\\"\"'b\"\\\"\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.name' '\"Focus\"'\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.trait' null\n-// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.args.angle_bracketed.args[0].type.inner' '\"i32\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.typedef.type.function_pointer.generic_params[*].name' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.typedef.type.function_pointer.decl.inputs[0][1].qualified_path.self_type.resolved_path.id' $Carrier\n+// @is '$.index[*][?(@.name==\"User\")].inner.typedef.type.function_pointer.decl.inputs[0][1].qualified_path.self_type.resolved_path.args.angle_bracketed.args[0].lifetime' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.typedef.type.function_pointer.decl.inputs[0][1].qualified_path.name' '\"Focus\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.typedef.type.function_pointer.decl.inputs[0][1].qualified_path.trait' null\n+// @is '$.index[*][?(@.name==\"User\")].inner.typedef.type.function_pointer.decl.inputs[0][1].qualified_path.args.angle_bracketed.args[0].type.primitive' '\"i32\"'\n \n pub type User = for<'b> fn(Carrier<'b>::Focus<i32>);\n "}, {"sha": "942e323efca3e521395d6395653acc21f3a0eb13", "filename": "tests/rustdoc-json/type/inherent_associated_type_projections.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -5,11 +5,10 @@\n // @set Parametrized = '$.index[*][?(@.name==\"Parametrized\")].id'\n pub struct Parametrized<T>(T);\n \n-// @is '$.index[*][?(@.name==\"Test\")].inner.type.kind' '\"qualified_path\"'\n-// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.id' $Parametrized\n-// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.args.angle_bracketed.args[0].type' '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n-// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.name' '\"Proj\"'\n-// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.trait' null\n+// @is '$.index[*][?(@.name==\"Test\")].inner.typedef.type.qualified_path.self_type.resolved_path.id' $Parametrized\n+// @is '$.index[*][?(@.name==\"Test\")].inner.typedef.type.qualified_path.self_type.resolved_path.args.angle_bracketed.args[0].type.primitive' \\\"i32\\\"\n+// @is '$.index[*][?(@.name==\"Test\")].inner.typedef.type.qualified_path.name' '\"Proj\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.typedef.type.qualified_path.trait' null\n pub type Test = Parametrized<i32>::Proj;\n \n /// param_bool\n@@ -29,5 +28,5 @@ impl Parametrized<i32> {\n // @set param_bool_proj = '$.index[*][?(@.docs==\"param_bool_proj\")].id'\n // @set param_i32_proj = '$.index[*][?(@.docs==\"param_i32_proj\")].id'\n \n-// @is '$.index[*][?(@.docs==\"param_bool\")].inner.items[*]' $param_bool_proj\n-// @is '$.index[*][?(@.docs==\"param_i32\")].inner.items[*]' $param_i32_proj\n+// @is '$.index[*][?(@.docs==\"param_bool\")].inner.impl.items[*]' $param_bool_proj\n+// @is '$.index[*][?(@.docs==\"param_i32\")].inner.impl.items[*]' $param_i32_proj"}, {"sha": "7456892df1bb27d9757afb50c64c828dd7494a0e", "filename": "tests/rustdoc-json/unions/impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Funions%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Funions%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Funions%2Fimpl.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,15 +1,15 @@\n #![no_std]\n \n // @is \"$.index[*][?(@.name=='Ux')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='Ux')].kind\" \\\"union\\\"\n+// @has \"$.index[*][?(@.name=='Ux')].inner.union\"\n pub union Ux {\n     a: u32,\n     b: u64\n }\n \n // @is \"$.index[*][?(@.name=='Num')].visibility\" \\\"public\\\"\n-// @is \"$.index[*][?(@.name=='Num')].kind\" \\\"trait\\\"\n+// @has \"$.index[*][?(@.name=='Num')].inner.trait\"\n pub trait Num {}\n \n-// @count \"$.index[*][?(@.name=='Ux')].inner.impls\" 1\n+// @count \"$.index[*][?(@.name=='Ux')].inner.union.impls\" 1\n impl Num for Ux {}"}, {"sha": "22b70e1ce8c50bd94d2aac1f5e66f593dcf15fe7", "filename": "tests/rustdoc-json/unions/union.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Funions%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Frustdoc-json%2Funions%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Funions%2Funion.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -1,15 +1,15 @@\n // @has \"$.index[*][?(@.name=='Union')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Union')].kind\" \\\"union\\\"\n-// @!has \"$.index[*][?(@.name=='Union')].inner.struct_type\"\n+// @has \"$.index[*][?(@.name=='Union')].inner.union\"\n+// @!has \"$.index[*][?(@.name=='Union')].inner.union.struct_type\"\n // @set Union = \"$.index[*][?(@.name=='Union')].id\"\n pub union Union {\n     int: i32,\n     float: f32,\n }\n \n \n-// @is \"$.index[*][?(@.name=='make_int_union')].inner.decl.output.kind\" '\"resolved_path\"'\n-// @is \"$.index[*][?(@.name=='make_int_union')].inner.decl.output.inner.id\" $Union\n+// @has \"$.index[*][?(@.name=='make_int_union')].inner.function.decl.output.resolved_path\"\n+// @is \"$.index[*][?(@.name=='make_int_union')].inner.function.decl.output.resolved_path.id\" $Union\n pub fn make_int_union(int: i32) -> Union {\n     Union { int }\n }"}, {"sha": "694cb494a15dc9280dbf44300b2e33fd56b584ff", "filename": "tests/ui/imports/issue-109148.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fui%2Fimports%2Fissue-109148.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fui%2Fimports%2Fissue-109148.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-109148.rs?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -0,0 +1,15 @@\n+// edition: 2021\n+\n+// https://github.com/rust-lang/rust/pull/111761#issuecomment-1557777314\n+macro_rules! m {\n+    () => {\n+        extern crate core as std;\n+        //~^ ERROR macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+    }\n+}\n+\n+m!();\n+\n+use std::mem;\n+\n+fn main() {}"}, {"sha": "6cc1221cfe9935ccb5cdfac488e01a9f8f79e1f4", "filename": "tests/ui/imports/issue-109148.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fui%2Fimports%2Fissue-109148.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5699874dc07d2dfb262d007293853f73c171f7e/tests%2Fui%2Fimports%2Fissue-109148.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-109148.stderr?ref=d5699874dc07d2dfb262d007293853f73c171f7e", "patch": "@@ -0,0 +1,13 @@\n+error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+  --> $DIR/issue-109148.rs:6:9\n+   |\n+LL |         extern crate core as std;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | m!();\n+   | ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}