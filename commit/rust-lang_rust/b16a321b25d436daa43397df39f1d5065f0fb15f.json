{"sha": "b16a321b25d436daa43397df39f1d5065f0fb15f", "node_id": "C_kwDOAAsO6NoAKGIxNmEzMjFiMjVkNDM2ZGFhNDMzOTdkZjM5ZjFkNTA2NWYwZmIxNWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-08T06:13:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-08T06:13:26Z"}, "message": "Rollup merge of #107757 - clubby789:setup-settings-json, r=jyn514\n\nAllow automatically creating vscode `settings.json` with `x setup`\n\nCloses #107703", "tree": {"sha": "97b241f872a57f30c9f41239f263864859cd3b45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b241f872a57f30c9f41239f263864859cd3b45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16a321b25d436daa43397df39f1d5065f0fb15f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4z2GCRBK7hj4Ov3rIwAAxnEIADqcqjVG04fvOwy4tIhoCJZG\n/2Nv/gP2tU9dgLG8NEJLhH2jOiYc8n/7vQXcfQgSBT9dsjlXh//hz7RKMMDKEq3s\nW6I1ibtPBfb5b95Uzt/JkCEZWvvZoNSEnRzClW0/WceOG+gYcVQNWf++FEqm6ooz\n4FYxnmPIhddILD/FgzuPylwZJ5S6sQDrZgOrdNcB6Czv/7IFVdjSAS8IPqII1E12\n4GfewQ+UB+QOxowAC0p8Noww3OcskDokTDD8iBkwlXfMWelJIrx3LZmGljBnFdxp\nxiW+Nw0zcrsnIef4BxXsj3e5sy5Fh4ilEiUYBq08LZjXRArjmTcRdh3Nb57yYqA=\n=e105\n-----END PGP SIGNATURE-----\n", "payload": "tree 97b241f872a57f30c9f41239f263864859cd3b45\nparent 00efb0cb960e4b89a80cad7d44fa0eefd223f513\nparent eb18293cec81d3e717f5287f305f7f3c596eb5d6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675836806 +0100\ncommitter GitHub <noreply@github.com> 1675836806 +0100\n\nRollup merge of #107757 - clubby789:setup-settings-json, r=jyn514\n\nAllow automatically creating vscode `settings.json` with `x setup`\n\nCloses #107703\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16a321b25d436daa43397df39f1d5065f0fb15f", "html_url": "https://github.com/rust-lang/rust/commit/b16a321b25d436daa43397df39f1d5065f0fb15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16a321b25d436daa43397df39f1d5065f0fb15f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00efb0cb960e4b89a80cad7d44fa0eefd223f513", "url": "https://api.github.com/repos/rust-lang/rust/commits/00efb0cb960e4b89a80cad7d44fa0eefd223f513", "html_url": "https://github.com/rust-lang/rust/commit/00efb0cb960e4b89a80cad7d44fa0eefd223f513"}, {"sha": "eb18293cec81d3e717f5287f305f7f3c596eb5d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb18293cec81d3e717f5287f305f7f3c596eb5d6", "html_url": "https://github.com/rust-lang/rust/commit/eb18293cec81d3e717f5287f305f7f3c596eb5d6"}], "stats": {"total": 187, "additions": 161, "deletions": 26}, "files": [{"sha": "c98a52450849e9bc9bce15d17a92a5d1e40edd72", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 121, "deletions": 26, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/b16a321b25d436daa43397df39f1d5065f0fb15f/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16a321b25d436daa43397df39f1d5065f0fb15f/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=b16a321b25d436daa43397df39f1d5065f0fb15f", "patch": "@@ -1,6 +1,7 @@\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::Config;\n use crate::{t, VERSION};\n+use sha2::Digest;\n use std::env::consts::EXE_SUFFIX;\n use std::fmt::Write as _;\n use std::fs::File;\n@@ -10,6 +11,9 @@ use std::process::Command;\n use std::str::FromStr;\n use std::{fmt, fs, io};\n \n+#[cfg(test)]\n+mod tests;\n+\n #[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n pub enum Profile {\n     Compiler,\n@@ -19,6 +23,13 @@ pub enum Profile {\n     User,\n }\n \n+/// A list of historical hashes of `src/etc/vscode_settings.json`.\n+/// New entries should be appended whenever this is updated so we can detected\n+/// outdated vs. user-modified settings files.\n+static SETTINGS_HASHES: &[&str] =\n+    &[\"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\"];\n+static VSCODE_SETTINGS: &str = include_str!(\"../etc/vscode_settings.json\");\n+\n impl Profile {\n     fn include_path(&self, src_path: &Path) -> PathBuf {\n         PathBuf::from(format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), self))\n@@ -155,6 +166,7 @@ pub fn setup(config: &Config, profile: Profile) {\n \n     if !config.dry_run() {\n         t!(install_git_hook_maybe(&config));\n+        t!(create_vscode_settings_maybe(&config));\n     }\n \n     println!();\n@@ -351,6 +363,34 @@ pub fn interactive_path() -> io::Result<Profile> {\n     Ok(template)\n }\n \n+#[derive(PartialEq)]\n+enum PromptResult {\n+    Yes,   // y/Y/yes\n+    No,    // n/N/no\n+    Print, // p/P/print\n+}\n+\n+/// Prompt a user for a answer, looping until they enter an accepted input or nothing\n+fn prompt_user(prompt: &str) -> io::Result<Option<PromptResult>> {\n+    let mut input = String::new();\n+    loop {\n+        print!(\"{prompt} \");\n+        io::stdout().flush()?;\n+        input.clear();\n+        io::stdin().read_line(&mut input)?;\n+        match input.trim().to_lowercase().as_str() {\n+            \"y\" | \"yes\" => return Ok(Some(PromptResult::Yes)),\n+            \"n\" | \"no\" => return Ok(Some(PromptResult::No)),\n+            \"p\" | \"print\" => return Ok(Some(PromptResult::Print)),\n+            \"\" => return Ok(None),\n+            _ => {\n+                eprintln!(\"error: unrecognized option '{}'\", input.trim());\n+                eprintln!(\"note: press Ctrl+C to exit\");\n+            }\n+        };\n+    }\n+}\n+\n // install a git hook to automatically run tidy, if they want\n fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n     let git = t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n@@ -363,43 +403,98 @@ fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n         return Ok(());\n     }\n \n-    let mut input = String::new();\n-    println!();\n     println!(\n-        \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n+        \"\\nRust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n If you'd like, x.py can install a git hook for you that will automatically run `test tidy` before\n pushing your code to ensure your code is up to par. If you decide later that this behavior is\n undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     );\n \n-    let should_install = loop {\n-        print!(\"Would you like to install the git hook?: [y/N] \");\n-        io::stdout().flush()?;\n-        input.clear();\n-        io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().as_str() {\n-            \"y\" | \"yes\" => true,\n-            \"n\" | \"no\" | \"\" => false,\n-            _ => {\n-                eprintln!(\"error: unrecognized option '{}'\", input.trim());\n-                eprintln!(\"note: press Ctrl+C to exit\");\n-                continue;\n-            }\n-        };\n-    };\n-\n-    if should_install {\n-        let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n-        match fs::hard_link(src, &dst) {\n-            Err(e) => eprintln!(\n+    if prompt_user(\"Would you like to install the git hook?: [y/N]\")? != Some(PromptResult::Yes) {\n+        println!(\"Ok, skipping installation!\");\n+        return Ok(());\n+    }\n+    let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n+    match fs::hard_link(src, &dst) {\n+        Err(e) => {\n+            eprintln!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\",\n                 dst.display(),\n                 e\n-            ),\n-            Ok(_) => println!(\"Linked `src/etc/pre-push.sh` to `.git/hooks/pre-push`\"),\n+            );\n+            return Err(e);\n+        }\n+        Ok(_) => println!(\"Linked `src/etc/pre-push.sh` to `.git/hooks/pre-push`\"),\n+    };\n+    Ok(())\n+}\n+\n+/// Create a `.vscode/settings.json` file for rustc development, or just print it\n+fn create_vscode_settings_maybe(config: &Config) -> io::Result<()> {\n+    let (current_hash, historical_hashes) = SETTINGS_HASHES.split_last().unwrap();\n+    let vscode_settings = config.src.join(\".vscode\").join(\"settings.json\");\n+    // If None, no settings.json exists\n+    // If Some(true), is a previous version of settings.json\n+    // If Some(false), is not a previous version (i.e. user modified)\n+    // If it's up to date we can just skip this\n+    let mut mismatched_settings = None;\n+    if let Ok(current) = fs::read_to_string(&vscode_settings) {\n+        let mut hasher = sha2::Sha256::new();\n+        hasher.update(&current);\n+        let hash = hex::encode(hasher.finalize().as_slice());\n+        if hash == *current_hash {\n+            return Ok(());\n+        } else if historical_hashes.contains(&hash.as_str()) {\n+            mismatched_settings = Some(true);\n+        } else {\n+            mismatched_settings = Some(false);\n+        }\n+    }\n+    println!(\n+        \"\\nx.py can automatically install the recommended `.vscode/settings.json` file for rustc development\"\n+    );\n+    match mismatched_settings {\n+        Some(true) => eprintln!(\n+            \"warning: existing `.vscode/settings.json` is out of date, x.py will update it\"\n+        ),\n+        Some(false) => eprintln!(\n+            \"warning: existing `.vscode/settings.json` has been modified by user, x.py will back it up and replace it\"\n+        ),\n+        _ => (),\n+    }\n+    let should_create = match prompt_user(\n+        \"Would you like to create/update `settings.json`, or only print suggested settings?: [y/p/N]\",\n+    )? {\n+        Some(PromptResult::Yes) => true,\n+        Some(PromptResult::Print) => false,\n+        _ => {\n+            println!(\"Ok, skipping settings!\");\n+            return Ok(());\n+        }\n+    };\n+    if should_create {\n+        let path = config.src.join(\".vscode\");\n+        if !path.exists() {\n+            fs::create_dir(&path)?;\n+        }\n+        let verb = match mismatched_settings {\n+            // exists but outdated, we can replace this\n+            Some(true) => \"Updated\",\n+            // exists but user modified, back it up\n+            Some(false) => {\n+                // exists and is not current version or outdated, so back it up\n+                let mut backup = vscode_settings.clone();\n+                backup.set_extension(\"bak\");\n+                eprintln!(\"warning: copying `settings.json` to `settings.json.bak`\");\n+                fs::copy(&vscode_settings, &backup)?;\n+                \"Updated\"\n+            }\n+            _ => \"Created\",\n         };\n+        fs::write(&vscode_settings, &VSCODE_SETTINGS)?;\n+        println!(\"{verb} `.vscode/settings.json`\");\n     } else {\n-        println!(\"Ok, skipping installation!\");\n+        println!(\"\\n{VSCODE_SETTINGS}\");\n     }\n     Ok(())\n }"}, {"sha": "dcf9d18e63210165e38bff00e86cc9c3370bad1a", "filename": "src/bootstrap/setup/tests.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b16a321b25d436daa43397df39f1d5065f0fb15f/src%2Fbootstrap%2Fsetup%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16a321b25d436daa43397df39f1d5065f0fb15f/src%2Fbootstrap%2Fsetup%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup%2Ftests.rs?ref=b16a321b25d436daa43397df39f1d5065f0fb15f", "patch": "@@ -0,0 +1,14 @@\n+use super::{SETTINGS_HASHES, VSCODE_SETTINGS};\n+use sha2::Digest;\n+\n+#[test]\n+fn check_matching_settings_hash() {\n+    let mut hasher = sha2::Sha256::new();\n+    hasher.update(&VSCODE_SETTINGS);\n+    let hash = hex::encode(hasher.finalize().as_slice());\n+    assert_eq!(\n+        &hash,\n+        SETTINGS_HASHES.last().unwrap(),\n+        \"Update `SETTINGS_HASHES` with the new hash of `src/etc/vscode_settings.json`\"\n+    );\n+}"}, {"sha": "cd61a38c5da987c7176353c28d7f040be75b8a6b", "filename": "src/etc/vscode_settings.json", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b16a321b25d436daa43397df39f1d5065f0fb15f/src%2Fetc%2Fvscode_settings.json", "raw_url": "https://github.com/rust-lang/rust/raw/b16a321b25d436daa43397df39f1d5065f0fb15f/src%2Fetc%2Fvscode_settings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvscode_settings.json?ref=b16a321b25d436daa43397df39f1d5065f0fb15f", "patch": "@@ -0,0 +1,26 @@\n+{\n+    \"rust-analyzer.checkOnSave.overrideCommand\": [\n+        \"python3\",\n+        \"x.py\",\n+        \"check\",\n+        \"--json-output\"\n+    ],\n+    \"rust-analyzer.linkedProjects\": [\"src/bootstrap/Cargo.toml\", \"Cargo.toml\"],\n+    \"rust-analyzer.rustfmt.overrideCommand\": [\n+        \"./build/host/rustfmt/bin/rustfmt\",\n+        \"--edition=2021\"\n+    ],\n+    \"rust-analyzer.procMacro.server\": \"./build/host/stage0/libexec/rust-analyzer-proc-macro-srv\",\n+    \"rust-analyzer.procMacro.enable\": true,\n+    \"rust-analyzer.cargo.buildScripts.enable\": true,\n+    \"rust-analyzer.cargo.buildScripts.invocationLocation\": \"root\",\n+    \"rust-analyzer.cargo.buildScripts.invocationStrategy\": \"once\",\n+    \"rust-analyzer.cargo.buildScripts.overrideCommand\": [\n+        \"python3\",\n+        \"x.py\",\n+        \"check\",\n+        \"--json-output\"\n+    ],\n+    \"rust-analyzer.cargo.sysroot\": \"./build/host/stage0-sysroot\",\n+    \"rust-analyzer.rustc.source\": \"./Cargo.toml\"\n+}"}]}