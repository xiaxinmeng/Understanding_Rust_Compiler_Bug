{"sha": "4b831569f67a8e8bd5131f92966cd186784b495f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODMxNTY5ZjY3YThlOGJkNTEzMWY5Mjk2NmNkMTg2Nzg0YjQ5NWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T07:08:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T07:08:24Z"}, "message": "implement floats by running the ops on the host architecture", "tree": {"sha": "20a22169eb29bf6cd322225bfe441d2fcbf1233f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a22169eb29bf6cd322225bfe441d2fcbf1233f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b831569f67a8e8bd5131f92966cd186784b495f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXe1zoAAoJEFbW7qD8Z6xGPLsP/3ZHsORmdIZtbYFZI0lk9NrS\nEyLUHY61C133aupGRIDlwcj3psFHqXTiHVsU0RXfg1CWBOkPcPxakC4seZvfUf7n\nDD+u6qB5XZ3/2N40xOmrCY7D4KYniqAp5X//ewvZEIr6nUAY8PTwnyoSCx1Lg0eB\naYaseFN694eD4enzX1tpZ8TwQ5R/Fld54zdL2FcOGkwNtUZ2ZlyprbopJrPZwoT0\nxaLwUkK50UnWH69XJ9p6RU+GLC6Obhcmqdp1Gy/+d54FVurnA6xHwag/qsYP22eh\nX6lkTPS9kjWiYQ0ITYKNPRs2z4Fmeavu5EYL21D5Ek+H3RcpBEMBYXwFU8grUDEN\npOUgH/A19GmwRQ9WERD/Hi19WJDxEfPQw0LlQrUxnA01yQM5DL6nEm563YGRHm8L\nJ7jNTUh4EusZ7aD0oCzZCWqOTp90Xuo/zKEpCd8/40rWItlEPgT541f1PFSS/p9s\nZrX/Xvr2LjSp3qXzF4G/wX1JMIm0X/ecB0j0J3aD41/IYWl1jwZB6Q1jC4AdniRt\n77gylxhTF1LQeH31k3nmrZSUBEAKfjhYlLf8DmdmPaSSduRpaAhWmW6ZDEWKw2I/\nyBkqQYfj0dWx8Q1th5YvVSc3o9zkMxa7F09frElzByZ70bEst10E3jcJ9w7HtnZl\nATIm0ibiLWilmsvcR1dK\n=xKa2\n-----END PGP SIGNATURE-----", "payload": "tree 20a22169eb29bf6cd322225bfe441d2fcbf1233f\nparent a7cc77a010cb842c258b36130df8b9f601970fde\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467702504 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467702504 +0200\n\nimplement floats by running the ops on the host architecture"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b831569f67a8e8bd5131f92966cd186784b495f", "html_url": "https://github.com/rust-lang/rust/commit/4b831569f67a8e8bd5131f92966cd186784b495f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b831569f67a8e8bd5131f92966cd186784b495f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7cc77a010cb842c258b36130df8b9f601970fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cc77a010cb842c258b36130df8b9f601970fde", "html_url": "https://github.com/rust-lang/rust/commit/a7cc77a010cb842c258b36130df8b9f601970fde"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "8ca37a6517715e19ddcabb3adc0b0d84a6d37acf", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b831569f67a8e8bd5131f92966cd186784b495f/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b831569f67a8e8bd5131f92966cd186784b495f/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4b831569f67a8e8bd5131f92966cd186784b495f", "patch": "@@ -169,7 +169,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     // TODO(solson): Try making const_to_primval instead.\n     fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<'tcx, Pointer> {\n         use rustc::middle::const_val::ConstVal::*;\n-        use rustc_const_math::{ConstInt, ConstIsize, ConstUsize};\n+        use rustc_const_math::{ConstInt, ConstIsize, ConstUsize, ConstFloat};\n+        use std::mem::transmute;\n         macro_rules! i2p {\n             ($i:ident, $n:expr) => {{\n                 let ptr = self.memory.allocate($n);\n@@ -178,7 +179,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }}\n         }\n         match *const_val {\n-            Float(_f) => unimplemented!(),\n+            Float(ConstFloat::F32(f)) => {\n+                let i = unsafe { transmute::<_, u32>(f) };\n+                i2p!(i, 4)\n+            },\n+            Float(ConstFloat::F64(f)) => {\n+                let i = unsafe { transmute::<_, u64>(f) };\n+                i2p!(i, 8)\n+            },\n+            Float(ConstFloat::FInfer{..}) => unreachable!(),\n             Integral(ConstInt::Infer(_)) => unreachable!(),\n             Integral(ConstInt::InferSigned(_)) => unreachable!(),\n             Integral(ConstInt::I8(i)) => i2p!(i, 1),\n@@ -824,7 +833,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        use syntax::ast::{IntTy, UintTy};\n+        use syntax::ast::{IntTy, UintTy, FloatTy};\n+        use std::mem::transmute;\n         let val = match (self.memory.pointer_size(), &ty.sty) {\n             (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n             (_, &ty::TyChar)              => {\n@@ -848,6 +858,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             (_, &ty::TyUint(UintTy::U32)) => PrimVal::U32(self.memory.read_uint(ptr, 4)? as u32),\n             (8, &ty::TyUint(UintTy::Us)) |\n             (_, &ty::TyUint(UintTy::U64)) => PrimVal::U64(self.memory.read_uint(ptr, 8)? as u64),\n+            (_, &ty::TyFloat(FloatTy::F32)) => {\n+                let i = self.memory.read_uint(ptr, 4)? as u32;\n+                PrimVal::F32(unsafe { transmute(i) })\n+            },\n+            (_, &ty::TyFloat(FloatTy::F64)) => {\n+                let i = self.memory.read_uint(ptr, 8)?;\n+                PrimVal::F64(unsafe { transmute(i) })\n+            },\n \n             (_, &ty::TyFnDef(def_id, substs, fn_ty)) => {\n                 PrimVal::FnPtr(self.memory.create_fn_ptr(def_id, substs, fn_ty))"}, {"sha": "92f69d575f18cf69f72e0cc2c2770f9ae4be0d68", "filename": "src/memory.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b831569f67a8e8bd5131f92966cd186784b495f/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b831569f67a8e8bd5131f92966cd186784b495f/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=4b831569f67a8e8bd5131f92966cd186784b495f", "patch": "@@ -394,6 +394,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn write_primval(&mut self, ptr: Pointer, val: PrimVal) -> EvalResult<'tcx, ()> {\n+        use std::mem::transmute;\n         let pointer_size = self.pointer_size();\n         match val {\n             PrimVal::Bool(b) => self.write_bool(ptr, b),\n@@ -407,6 +408,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n             PrimVal::Char(c) => self.write_uint(ptr, c as u64, 4),\n             PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n+            PrimVal::F32(f) => self.write_uint(ptr, unsafe { transmute::<_, u32>(f) } as u64, 4),\n+            PrimVal::F64(f) => self.write_uint(ptr, unsafe { transmute::<_, u64>(f) }, 8),\n             PrimVal::FnPtr(_p) |\n             PrimVal::AbstractPtr(_p) => unimplemented!(),\n         }"}, {"sha": "f6f9a025770a229ad67e6cb4d4a6ebc30491dc4c", "filename": "src/primval.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4b831569f67a8e8bd5131f92966cd186784b495f/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b831569f67a8e8bd5131f92966cd186784b495f/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=4b831569f67a8e8bd5131f92966cd186784b495f", "patch": "@@ -13,6 +13,8 @@ pub enum PrimVal {\n     FnPtr(Pointer),\n     IntegerPtr(u64),\n     Char(char),\n+\n+    F32(f32), F64(f64),\n }\n \n /// returns the result of the operation and whether the operation overflowed\n@@ -57,6 +59,34 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         })\n     }\n \n+    macro_rules! float_binops {\n+        ($v:ident, $l:ident, $r:ident) => ({\n+            match bin_op {\n+                Add    => $v($l + $r),\n+                Sub    => $v($l - $r),\n+                Mul    => $v($l * $r),\n+                Div    => $v($l / $r),\n+                Rem    => $v($l % $r),\n+\n+                // invalid float ops\n+                BitXor => unreachable!(),\n+                BitAnd => unreachable!(),\n+                BitOr  => unreachable!(),\n+                Shl => unreachable!(),\n+                Shr => unreachable!(),\n+\n+                // directly comparing floats is questionable\n+                // miri could forbid it, or at least miri as rust const eval should forbid it\n+                Eq => Bool($l == $r),\n+                Ne => Bool($l != $r),\n+                Lt => Bool($l < $r),\n+                Le => Bool($l <= $r),\n+                Gt => Bool($l > $r),\n+                Ge => Bool($l >= $r),\n+            }\n+        })\n+    }\n+\n     fn unrelated_ptr_ops<'tcx>(bin_op: mir::BinOp) -> EvalResult<'tcx, PrimVal> {\n         use rustc::mir::repr::BinOp::*;\n         match bin_op {\n@@ -128,6 +158,8 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n         (U16(l), U16(r)) => int_binops!(U16, l, r),\n         (U32(l), U32(r)) => int_binops!(U32, l, r),\n         (U64(l), U64(r)) => int_binops!(U64, l, r),\n+        (F32(l), F32(r)) => float_binops!(F32, l, r),\n+        (F64(l), F64(r)) => float_binops!(F64, l, r),\n         (Char(l), Char(r)) => match bin_op {\n             Eq => Bool(l == r),\n             Ne => Bool(l != r),\n@@ -211,6 +243,9 @@ pub fn unary_op<'tcx>(un_op: mir::UnOp, val: PrimVal) -> EvalResult<'tcx, PrimVa\n         (Not, U16(n)) => Ok(U16(!n)),\n         (Not, U32(n)) => Ok(U32(!n)),\n         (Not, U64(n)) => Ok(U64(!n)),\n+\n+        (Neg, F64(n)) => Ok(F64(-n)),\n+        (Neg, F32(n)) => Ok(F32(-n)),\n         _ => Err(EvalError::Unimplemented(format!(\"unimplemented unary op: {:?}, {:?}\", un_op, val))),\n     }\n }"}, {"sha": "504fffca756082bbf5baa60ce8d5fe606fd8fe1e", "filename": "tests/run-pass/floats.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b831569f67a8e8bd5131f92966cd186784b495f/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b831569f67a8e8bd5131f92966cd186784b495f/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=4b831569f67a8e8bd5131f92966cd186784b495f", "patch": "@@ -0,0 +1,8 @@\n+\n+fn main() {\n+    assert_eq!(6.0_f32*6.0_f32, 36.0_f32);\n+    assert_eq!(6.0_f64*6.0_f64, 36.0_f64);\n+    assert_eq!(-{5.0_f32}, -5.0_f32);\n+    assert!((5.0_f32/0.0).is_infinite());\n+    assert!((-5.0_f32).sqrt().is_nan());\n+}"}]}