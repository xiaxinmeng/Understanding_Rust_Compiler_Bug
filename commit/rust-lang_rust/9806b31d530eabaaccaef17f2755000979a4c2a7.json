{"sha": "9806b31d530eabaaccaef17f2755000979a4c2a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MDZiMzFkNTMwZWFiYWFjY2FlZjE3ZjI3NTUwMDA5NzlhNGMyYTc=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-17T20:21:29Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-17T20:21:29Z"}, "message": "Rename lint, improve documentation", "tree": {"sha": "593b06a4c25517d1dd6bf7c7d375ac67489fe650", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/593b06a4c25517d1dd6bf7c7d375ac67489fe650"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9806b31d530eabaaccaef17f2755000979a4c2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9806b31d530eabaaccaef17f2755000979a4c2a7", "html_url": "https://github.com/rust-lang/rust/commit/9806b31d530eabaaccaef17f2755000979a4c2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9806b31d530eabaaccaef17f2755000979a4c2a7/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a2dd4cb8f8f386656f6207ff007f068d170887", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a2dd4cb8f8f386656f6207ff007f068d170887", "html_url": "https://github.com/rust-lang/rust/commit/29a2dd4cb8f8f386656f6207ff007f068d170887"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "822bae14ff9171c248ba7ac1e27be7dd709a0f6c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9806b31d530eabaaccaef17f2755000979a4c2a7/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9806b31d530eabaaccaef17f2755000979a4c2a7/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=9806b31d530eabaaccaef17f2755000979a4c2a7", "patch": "@@ -624,20 +624,26 @@ declare_lint! {\n }\n \n \n-/// **What it does:** Checks for using `fold` to implement `any`.\n+/// **What it does:** Checks for using `fold` when a more succint alternative exists.\n+/// Specifically, this checks for `fold`s which could be replaced by `any`, `all`,\n+/// `sum` or `product`.\n ///\n /// **Why is this bad?** Readability.\n ///\n-/// **Known problems:** Changes semantics - the suggested replacement is short-circuiting.\n+/// **Known problems:** None.\n ///\n /// **Example:**\n /// ```rust\n /// let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n /// ```\n+/// This could be written as:\n+/// ```rust\n+/// let _ = (0..3).any(|x| x > 2);\n+/// ```\n declare_lint! {\n-    pub FOLD_ANY,\n+    pub UNNECESSARY_FOLD,\n     Warn,\n-    \"using `fold` to emulate the behaviour of `any`\"\n+    \"using `fold` when a more succint alternative exists\"\n }\n \n impl LintPass for Pass {\n@@ -671,7 +677,7 @@ impl LintPass for Pass {\n             STRING_EXTEND_CHARS,\n             ITER_CLONED_COLLECT,\n             USELESS_ASREF,\n-            FOLD_ANY\n+            UNNECESSARY_FOLD\n         )\n     }\n }\n@@ -736,7 +742,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"as_mut\"]) {\n                     lint_asref(cx, expr, \"as_mut\", arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"fold\"]) {\n-                    lint_fold_any(cx, expr, arglists[0]);\n+                    lint_unnecessary_fold(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &method_call.name.as_str(), args);\n@@ -1125,7 +1131,7 @@ fn lint_iter_cloned_collect(cx: &LateContext, expr: &hir::Expr, iter_args: &[hir\n     }\n }\n \n-fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n+fn lint_unnecessary_fold(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n     // Check that this is a call to Iterator::fold rather than just some function called fold\n     if !match_trait_method(cx, expr, &paths::ITERATOR) {\n         return;\n@@ -1138,7 +1144,8 @@ fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n         cx: &LateContext,\n         fold_args: &[hir::Expr],\n         op: hir::BinOp_,\n-        replacement_method_name: &str) {\n+        replacement_method_name: &str,\n+        replacement_has_args: bool) {\n \n         if_chain! {\n             // Extract the body of the closure passed to fold\n@@ -1158,24 +1165,31 @@ fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n             if path.segments.len() == 1 && &path.segments[0].name == &first_arg_ident;\n \n             then {\n-                let right_source = snippet(cx, right_expr.span, \"EXPR\");\n-\n                 // Span containing `.fold(...)`\n                 let fold_span = fold_args[0].span.next_point().with_hi(fold_args[2].span.hi() + BytePos(1));\n \n+                let sugg = if replacement_has_args {\n+                    format!(\n+                        \".{replacement}(|{s}| {r})\",\n+                        replacement = replacement_method_name,\n+                        s = second_arg_ident,\n+                        r = snippet(cx, right_expr.span, \"EXPR\")\n+                    )\n+                } else {\n+                    format!(\n+                        \".{replacement}()\",\n+                        replacement = replacement_method_name,\n+                    )\n+                };\n+\n                 span_lint_and_sugg(\n                     cx,\n-                    FOLD_ANY,\n+                    UNNECESSARY_FOLD,\n                     fold_span,\n                     // TODO: don't suggest e.g. .any(|x| f(x)) if we can suggest .any(f)\n                     \"this `.fold` can be written more succinctly using another method\",\n                     \"try\",\n-                    format!(\n-                        \".{replacement}(|{s}| {r})\",\n-                        replacement = replacement_method_name,\n-                        s = second_arg_ident,\n-                        r = right_source\n-                    )\n+                    sugg\n                 );\n             }\n         }\n@@ -1186,16 +1200,16 @@ fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n         hir::ExprLit(ref lit) => {\n             match lit.node {\n                 ast::LitKind::Bool(false) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiOr, \"any\"\n+                    cx, fold_args, hir::BinOp_::BiOr, \"any\", true\n                 ),\n                 ast::LitKind::Bool(true) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiAnd, \"all\"\n+                    cx, fold_args, hir::BinOp_::BiAnd, \"all\", true\n                 ),\n                 ast::LitKind::Int(0, _) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiAdd, \"sum\"\n+                    cx, fold_args, hir::BinOp_::BiAdd, \"sum\", false\n                 ),\n                 ast::LitKind::Int(1, _) => check_fold_with_op(\n-                    cx, fold_args, hir::BinOp_::BiMul, \"product\"\n+                    cx, fold_args, hir::BinOp_::BiMul, \"product\", false\n                 ),\n                 _ => return\n             }"}]}