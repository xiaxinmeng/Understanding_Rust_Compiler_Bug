{"sha": "07659996221446273065651ff9c0fcb00935eb03", "node_id": "C_kwDOAAsO6NoAKDA3NjU5OTk2MjIxNDQ2MjczMDY1NjUxZmY5YzBmY2IwMDkzNWViMDM", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-07-30T08:56:45Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T17:20:57Z"}, "message": "add eq constraints on associated constants", "tree": {"sha": "d8ec7e7793412d8ae5f67f00ace1e021bad1f402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8ec7e7793412d8ae5f67f00ace1e021bad1f402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07659996221446273065651ff9c0fcb00935eb03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07659996221446273065651ff9c0fcb00935eb03", "html_url": "https://github.com/rust-lang/rust/commit/07659996221446273065651ff9c0fcb00935eb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07659996221446273065651ff9c0fcb00935eb03/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34c0797528172ede89480e3033f7a5e71ea4735", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34c0797528172ede89480e3033f7a5e71ea4735", "html_url": "https://github.com/rust-lang/rust/commit/a34c0797528172ede89480e3033f7a5e71ea4735"}], "stats": {"total": 308, "additions": 195, "deletions": 113}, "files": [{"sha": "9d447f3b5cb534473d91310af501d2f4902a85f3", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -224,7 +224,7 @@ pub enum AngleBracketedArg {\n     /// Argument for a generic parameter.\n     Arg(GenericArg),\n     /// Constraint for an associated item.\n-    Constraint(AssocTyConstraint),\n+    Constraint(AssocConstraint),\n }\n \n impl AngleBracketedArg {\n@@ -1843,19 +1843,21 @@ impl UintTy {\n /// A constraint on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or\n /// `A: TraitA + TraitB` in `Foo<A: TraitA + TraitB>`).\n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct AssocTyConstraint {\n+pub struct AssocConstraint {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub gen_args: Option<GenericArgs>,\n-    pub kind: AssocTyConstraintKind,\n+    pub kind: AssocConstraintKind,\n     pub span: Span,\n }\n \n-/// The kinds of an `AssocTyConstraint`.\n+/// The kinds of an `AssocConstraint`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub enum AssocTyConstraintKind {\n-    /// E.g., `A = Bar` in `Foo<A = Bar>`.\n+pub enum AssocConstraintKind {\n+    /// E.g., `A = Bar` in `Foo<A = Bar>` where A is an associated type.\n     Equality { ty: P<Ty> },\n+    /// E.g., `A = 3` in `Foo<N = 3>` where N is an associated const.\n+    ConstEquality { c: AnonConst },\n     /// E.g. `A: TraitA + TraitB` in `Foo<A: TraitA + TraitB>`.\n     Bound { bounds: GenericBounds },\n }"}, {"sha": "ba68ff691caeddf566b09090786a1c3f5837a6fc", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -165,8 +165,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_lifetime(l, self);\n     }\n \n-    fn visit_ty_constraint(&mut self, t: &mut AssocTyConstraint) {\n-        noop_visit_ty_constraint(t, self);\n+    fn visit_constraint(&mut self, t: &mut AssocConstraint) {\n+        noop_visit_constraint(t, self);\n     }\n \n     fn visit_foreign_mod(&mut self, nm: &mut ForeignMod) {\n@@ -430,8 +430,8 @@ pub fn noop_flat_map_arm<T: MutVisitor>(mut arm: Arm, vis: &mut T) -> SmallVec<[\n     smallvec![arm]\n }\n \n-pub fn noop_visit_ty_constraint<T: MutVisitor>(\n-    AssocTyConstraint { id, ident, gen_args, kind, span }: &mut AssocTyConstraint,\n+pub fn noop_visit_constraint<T: MutVisitor>(\n+    AssocConstraint { id, ident, gen_args, kind, span }: &mut AssocConstraint,\n     vis: &mut T,\n ) {\n     vis.visit_id(id);\n@@ -440,12 +440,9 @@ pub fn noop_visit_ty_constraint<T: MutVisitor>(\n         vis.visit_generic_args(gen_args);\n     }\n     match kind {\n-        AssocTyConstraintKind::Equality { ref mut ty } => {\n-            vis.visit_ty(ty);\n-        }\n-        AssocTyConstraintKind::Bound { ref mut bounds } => {\n-            visit_bounds(bounds, vis);\n-        }\n+        AssocConstraintKind::Equality { ref mut ty } => vis.visit_ty(ty),\n+        AssocConstraintKind::ConstEquality { ref mut c } => vis.visit_anon_const(c),\n+        AssocConstraintKind::Bound { ref mut bounds } => visit_bounds(bounds, vis),\n     }\n     vis.visit_span(span);\n }\n@@ -555,7 +552,7 @@ pub fn noop_visit_angle_bracketed_parameter_data<T: MutVisitor>(\n     let AngleBracketedArgs { args, span } = data;\n     visit_vec(args, |arg| match arg {\n         AngleBracketedArg::Arg(arg) => vis.visit_generic_arg(arg),\n-        AngleBracketedArg::Constraint(constraint) => vis.visit_ty_constraint(constraint),\n+        AngleBracketedArg::Constraint(constraint) => vis.visit_constraint(constraint),\n     });\n     vis.visit_span(span);\n }"}, {"sha": "f054f4de2f9d028fdd3312c3b8ac2f994678b9d5", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -190,8 +190,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n         walk_generic_arg(self, generic_arg)\n     }\n-    fn visit_assoc_ty_constraint(&mut self, constraint: &'ast AssocTyConstraint) {\n-        walk_assoc_ty_constraint(self, constraint)\n+    fn visit_assoc_constraint(&mut self, constraint: &'ast AssocConstraint) {\n+        walk_assoc_constraint(self, constraint)\n     }\n     fn visit_attribute(&mut self, attr: &'ast Attribute) {\n         walk_attribute(self, attr)\n@@ -464,7 +464,7 @@ where\n             for arg in &data.args {\n                 match arg {\n                     AngleBracketedArg::Arg(a) => visitor.visit_generic_arg(a),\n-                    AngleBracketedArg::Constraint(c) => visitor.visit_assoc_ty_constraint(c),\n+                    AngleBracketedArg::Constraint(c) => visitor.visit_assoc_constraint(c),\n                 }\n             }\n         }\n@@ -486,19 +486,15 @@ where\n     }\n }\n \n-pub fn walk_assoc_ty_constraint<'a, V: Visitor<'a>>(\n-    visitor: &mut V,\n-    constraint: &'a AssocTyConstraint,\n-) {\n+pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'a AssocConstraint) {\n     visitor.visit_ident(constraint.ident);\n     if let Some(ref gen_args) = constraint.gen_args {\n         visitor.visit_generic_args(gen_args.span(), gen_args);\n     }\n     match constraint.kind {\n-        AssocTyConstraintKind::Equality { ref ty } => {\n-            visitor.visit_ty(ty);\n-        }\n-        AssocTyConstraintKind::Bound { ref bounds } => {\n+        AssocConstraintKind::Equality { ref ty } => visitor.visit_ty(ty),\n+        AssocConstraintKind::ConstEquality { ref c } => visitor.visit_anon_const(c),\n+        AssocConstraintKind::Bound { ref bounds } => {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n     }"}, {"sha": "450f42385848e51c5bd3e9bf853b98f69e4313b2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -960,7 +960,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// returns a `hir::TypeBinding` representing `Item`.\n     fn lower_assoc_ty_constraint(\n         &mut self,\n-        constraint: &AssocTyConstraint,\n+        constraint: &AssocConstraint,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n@@ -997,10 +997,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         let kind = match constraint.kind {\n-            AssocTyConstraintKind::Equality { ref ty } => {\n+            AssocConstraintKind::Equality { ref ty } => {\n                 hir::TypeBindingKind::Equality { ty: self.lower_ty(ty, itctx) }\n             }\n-            AssocTyConstraintKind::Bound { ref bounds } => {\n+            AssocConstraintKind::ConstEquality { ref c } => {\n+                hir::TypeBindingKind::Const { c: self.lower_anon_const(c) }\n+            }\n+            AssocConstraintKind::Bound { ref bounds } => {\n                 let mut capturable_lifetimes;\n                 let mut parent_def_id = self.current_hir_id_owner;\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior."}, {"sha": "2c575cfdbdceb7ed408f4a1e3aeaa51fde1be864", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -138,10 +138,11 @@ impl<'a> AstValidator<'a> {\n         self.outer_impl_trait = old;\n     }\n \n-    fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n+    fn visit_assoc_constraint_from_generic_args(&mut self, constraint: &'a AssocConstraint) {\n         match constraint.kind {\n-            AssocTyConstraintKind::Equality { .. } => {}\n-            AssocTyConstraintKind::Bound { .. } => {\n+            AssocConstraintKind::Equality { .. } => {}\n+            AssocConstraintKind::ConstEquality { .. } => {}\n+            AssocConstraintKind::Bound { .. } => {\n                 if self.is_assoc_ty_bound_banned {\n                     self.err_handler().span_err(\n                         constraint.span,\n@@ -150,7 +151,7 @@ impl<'a> AstValidator<'a> {\n                 }\n             }\n         }\n-        self.visit_assoc_ty_constraint(constraint);\n+        self.visit_assoc_constraint(constraint);\n     }\n \n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n@@ -1277,7 +1278,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         // are allowed to contain nested `impl Trait`.\n                         AngleBracketedArg::Constraint(constraint) => {\n                             self.with_impl_trait(None, |this| {\n-                                this.visit_assoc_ty_constraint_from_generic_args(constraint);\n+                                this.visit_assoc_constraint_from_generic_args(constraint);\n                             });\n                         }\n                     }\n@@ -1586,11 +1587,11 @@ fn deny_equality_constraints(\n                                     let len = assoc_path.segments.len() - 1;\n                                     let gen_args = args.as_ref().map(|p| (**p).clone());\n                                     // Build `<Bar = RhsTy>`.\n-                                    let arg = AngleBracketedArg::Constraint(AssocTyConstraint {\n+                                    let arg = AngleBracketedArg::Constraint(AssocConstraint {\n                                         id: rustc_ast::node_id::DUMMY_NODE_ID,\n                                         ident: *ident,\n                                         gen_args,\n-                                        kind: AssocTyConstraintKind::Equality {\n+                                        kind: AssocConstraintKind::Equality {\n                                             ty: predicate.rhs_ty.clone(),\n                                         },\n                                         span: ident.span,"}, {"sha": "0cc74a1ac0b6246ec806e071fd70af49609ed13f", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n-use rustc_ast::{AssocTyConstraint, AssocTyConstraintKind, NodeId};\n+use rustc_ast::{AssocConstraint, AssocConstraintKind, NodeId};\n use rustc_ast::{PatKind, RangeEnd, VariantData};\n use rustc_errors::struct_span_err;\n use rustc_feature::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n@@ -622,16 +622,16 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, span)\n     }\n \n-    fn visit_assoc_ty_constraint(&mut self, constraint: &'a AssocTyConstraint) {\n-        if let AssocTyConstraintKind::Bound { .. } = constraint.kind {\n+    fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {\n+        if let AssocConstraintKind::Bound { .. } = constraint.kind {\n             gate_feature_post!(\n                 &self,\n                 associated_type_bounds,\n                 constraint.span,\n                 \"associated type bounds are unstable\"\n             )\n         }\n-        visit::walk_assoc_ty_constraint(self, constraint)\n+        visit::walk_assoc_constraint(self, constraint)\n     }\n \n     fn visit_assoc_item(&mut self, i: &'a ast::AssocItem, ctxt: AssocCtxt) {"}, {"sha": "a4a48cc8e8a7f1d279cadb2dc2daf4953865134f", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -126,9 +126,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_generic_args(self, path_span, generic_args)\n     }\n-    fn visit_assoc_ty_constraint(&mut self, constraint: &AssocTyConstraint) {\n+    fn visit_assoc_constraint(&mut self, constraint: &AssocConstraint) {\n         self.count += 1;\n-        walk_assoc_ty_constraint(self, constraint)\n+        walk_assoc_constraint(self, constraint)\n     }\n     fn visit_attribute(&mut self, _attr: &Attribute) {\n         self.count += 1;"}, {"sha": "381860244678d5c6b00cdaa62cd833d25c96a192", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -952,16 +952,20 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n+    pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocConstraint) {\n         self.print_ident(constraint.ident);\n         constraint.gen_args.as_ref().map(|args| self.print_generic_args(args, false));\n         self.space();\n         match &constraint.kind {\n-            ast::AssocTyConstraintKind::Equality { ty } => {\n+            ast::AssocConstraintKind::Equality { ty } => {\n                 self.word_space(\"=\");\n                 self.print_type(ty);\n             }\n-            ast::AssocTyConstraintKind::Bound { bounds } => {\n+            ast::AssocConstraintKind::ConstEquality { c } => {\n+                self.word_space(\"=\");\n+                self.print_expr_anon_const(c);\n+            }\n+            ast::AssocConstraintKind::Bound { bounds } => {\n                 self.print_type_bounds(\":\", &*bounds);\n             }\n         }"}, {"sha": "039bb0db0aa792ab3d72cb2c0163281e7456c602", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -2136,6 +2136,8 @@ pub enum TypeBindingKind<'hir> {\n     Constraint { bounds: &'hir [GenericBound<'hir>] },\n     /// E.g., `Foo<Bar = ()>`.\n     Equality { ty: &'hir Ty<'hir> },\n+    /// E.g., `Foo<N = 3>`.\n+    Const { c: AnonConst },\n }\n \n impl TypeBinding<'_> {"}, {"sha": "56b32cde9d54fd8fb9d8bf7e73bf44215dcedd3c", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -827,9 +827,8 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n     visitor.visit_ident(type_binding.ident);\n     visitor.visit_generic_args(type_binding.span, type_binding.gen_args);\n     match type_binding.kind {\n-        TypeBindingKind::Equality { ref ty } => {\n-            visitor.visit_ty(ty);\n-        }\n+        TypeBindingKind::Equality { ref ty } => visitor.visit_ty(ty),\n+        TypeBindingKind::Const { ref c } => visitor.visit_anon_const(c),\n         TypeBindingKind::Constraint { bounds } => {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }"}, {"sha": "a76af35a8e62648829f18c0a98185e115f2e2862", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -1756,6 +1756,10 @@ impl<'a> State<'a> {\n                         self.word_space(\"=\");\n                         self.print_type(ty);\n                     }\n+                    hir::TypeBindingKind::Const { ref c } => {\n+                        self.word_space(\"=\");\n+                        self.print_anon_const(c);\n+                    }\n                     hir::TypeBindingKind::Constraint { bounds } => {\n                         self.print_bounds(\":\", bounds);\n                     }"}, {"sha": "abecc8d1a8be5620a2ad7c92fa5f03925c6c8ae6", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -738,8 +738,9 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                                         | ast::GenericArg::Const(_) => false,\n                                     },\n                                     ast::AngleBracketedArg::Constraint(c) => match c.kind {\n-                                        ast::AssocTyConstraintKind::Bound { .. } => true,\n-                                        ast::AssocTyConstraintKind::Equality { ref ty } => {\n+                                        ast::AssocConstraintKind::Bound { .. } => true,\n+                                        ast::AssocConstraintKind::ConstEquality { .. } => false,\n+                                        ast::AssocConstraintKind::Equality { ref ty } => {\n                                             involves_impl_trait(ty)\n                                         }\n                                     },"}, {"sha": "9e7e8dc838af3a0257559ef523e6a7b441eaa3fb", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -814,6 +814,25 @@ pub struct ProjectionPredicate<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n+/// This kind of predicate has no *direct* correspondent in the\n+/// syntax, but it roughly corresponds to the syntactic forms:\n+///\n+/// 1. `T: TraitRef<..., Item = Const>`\n+/// 2. `<T as TraitRef<...>>::Item == Const` (NYI)\n+///\n+/// In particular, form #1 is \"desugared\" to the combination of a\n+/// normal trait predicate (`T: TraitRef<...>`) and one of these\n+/// predicates. Form #2 is a broader form in that it also permits\n+/// equality between arbitrary types. Processing an instance of\n+/// Form #2 eventually yields one of these `ProjectionPredicate`\n+/// instances to normalize the LHS.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug)]\n+#[derive(HashStable, TypeFoldable)]\n+pub struct ConstPredicate<'tcx> {\n+    pub projection: ProjectionTy<'tcx>,\n+    pub c: &'tcx Const<'tcx>,\n+}\n+\n pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {"}, {"sha": "7c2d8ba21a26cc6d62dd5e411c602d9fe437efc2", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -4,8 +4,8 @@ use crate::maybe_whole;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Token};\n use rustc_ast::{\n-    self as ast, AngleBracketedArg, AngleBracketedArgs, AnonConst, AssocTyConstraint,\n-    AssocTyConstraintKind, BlockCheckMode, GenericArg, GenericArgs, Generics, ParenthesizedArgs,\n+    self as ast, AngleBracketedArg, AngleBracketedArgs, AnonConst, AssocConstraint,\n+    AssocConstraintKind, BlockCheckMode, GenericArg, GenericArgs, Generics, ParenthesizedArgs,\n     Path, PathSegment, QSelf,\n };\n use rustc_errors::{pluralize, Applicability, PResult};\n@@ -469,24 +469,21 @@ impl<'a> Parser<'a> {\n                         // Parse associated type constraint bound.\n \n                         let bounds = self.parse_generic_bounds(Some(self.prev_token.span))?;\n-                        AssocTyConstraintKind::Bound { bounds }\n+                        AssocConstraintKind::Bound { bounds }\n                     } else if self.eat(&token::Eq) {\n-                        // Parse associated type equality constraint\n-\n-                        let ty = self.parse_assoc_equality_term(ident, self.prev_token.span)?;\n-                        AssocTyConstraintKind::Equality { ty }\n+                        self.parse_assoc_equality_term(ident, self.prev_token.span)?\n                     } else {\n                         unreachable!();\n                     };\n \n                     let span = lo.to(self.prev_token.span);\n \n                     // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n-                    if let AssocTyConstraintKind::Bound { .. } = kind {\n+                    if let AssocConstraintKind::Bound { .. } = kind {\n                         self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n                     }\n                     let constraint =\n-                        AssocTyConstraint { id: ast::DUMMY_NODE_ID, ident, gen_args, kind, span };\n+                        AssocConstraint { id: ast::DUMMY_NODE_ID, ident, gen_args, kind, span };\n                     Ok(Some(AngleBracketedArg::Constraint(constraint)))\n                 } else {\n                     Ok(Some(AngleBracketedArg::Arg(arg)))\n@@ -499,22 +496,22 @@ impl<'a> Parser<'a> {\n     /// Parse the term to the right of an associated item equality constraint.\n     /// That is, parse `<term>` in `Item = <term>`.\n     /// Right now, this only admits types in `<term>`.\n-    fn parse_assoc_equality_term(&mut self, ident: Ident, eq: Span) -> PResult<'a, P<ast::Ty>> {\n+    fn parse_assoc_equality_term(\n+        &mut self,\n+        ident: Ident,\n+        eq: Span,\n+    ) -> PResult<'a, AssocConstraintKind> {\n         let arg = self.parse_generic_arg(None)?;\n         let span = ident.span.to(self.prev_token.span);\n-        match arg {\n-            Some(GenericArg::Type(ty)) => return Ok(ty),\n-            Some(GenericArg::Const(expr)) => {\n-                self.struct_span_err(span, \"cannot constrain an associated constant to a value\")\n-                    .span_label(ident.span, \"this associated constant...\")\n-                    .span_label(expr.value.span, \"...cannot be constrained to this value\")\n-                    .emit();\n-            }\n+        let ty = match arg {\n+            Some(GenericArg::Type(ty)) => ty,\n+            Some(GenericArg::Const(c)) => return Ok(AssocConstraintKind::ConstEquality { c }),\n             Some(GenericArg::Lifetime(lt)) => {\n                 self.struct_span_err(span, \"associated lifetimes are not supported\")\n                     .span_label(lt.ident.span, \"the lifetime is given here\")\n                     .help(\"if you meant to specify a trait object, write `dyn Trait + 'lifetime`\")\n                     .emit();\n+                self.mk_ty(span, ast::TyKind::Err)\n             }\n             None => {\n                 let after_eq = eq.shrink_to_hi();\n@@ -542,8 +539,8 @@ impl<'a> Parser<'a> {\n                 };\n                 return Err(err);\n             }\n-        }\n-        Ok(self.mk_ty(span, ast::TyKind::Err))\n+        };\n+        Ok(AssocConstraintKind::Equality { ty })\n     }\n \n     /// We do not permit arbitrary expressions as const arguments. They must be one of:"}, {"sha": "963a625aaeadae7df2eb12d6542b482bc2ad4ed9", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -338,9 +338,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_path_segment(self, path_span, path_segment)\n     }\n \n-    fn visit_assoc_ty_constraint(&mut self, constraint: &'v ast::AssocTyConstraint) {\n-        self.record(\"AssocTyConstraint\", Id::None, constraint);\n-        ast_visit::walk_assoc_ty_constraint(self, constraint)\n+    fn visit_assoc_constraint(&mut self, constraint: &'v ast::AssocConstraint) {\n+        self.record(\"AssocConstraint\", Id::None, constraint);\n+        ast_visit::walk_assoc_constraint(self, constraint)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {"}, {"sha": "2d847f6145d6f096780d2454752986a9063dcc34", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -124,6 +124,7 @@ struct ConvertedBinding<'a, 'tcx> {\n #[derive(Debug)]\n enum ConvertedBindingKind<'a, 'tcx> {\n     Equality(Ty<'tcx>),\n+    Const(&'tcx Const<'tcx>),\n     Constraint(&'a [hir::GenericBound<'a>]),\n }\n \n@@ -604,7 +605,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     hir::TypeBindingKind::Equality { ty } => {\n                         ConvertedBindingKind::Equality(self.ast_ty_to_ty(ty))\n                     }\n-                    hir::TypeBindingKind::Constraint { bounds } => {\n+                    hir::TypeBindingKind::Const { ref c } => {\n+                        let local_did = self.tcx().hir().local_def_id(c.hir_id);\n+                        let c = Const::from_anon_const(self.tcx(), local_did);\n+                        ConvertedBindingKind::Const(&c)\n+                    }\n+                    hir::TypeBindingKind::Constraint { ref bounds } => {\n                         ConvertedBindingKind::Constraint(bounds)\n                     }\n                 };\n@@ -1231,6 +1237,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     binding.span,\n                 ));\n             }\n+            ConvertedBindingKind::Const(c) => {\n+                bounds.const_bounds.push((\n+                    projection_ty.map_bound(|projection_ty| ty::ConstPredicate {\n+                        projection: projection_ty,\n+                        c,\n+                    }),\n+                    binding.span,\n+                ));\n+            }\n             ConvertedBindingKind::Constraint(ast_bounds) => {\n                 // \"Desugar\" a constraint like `T: Iterator<Item: Debug>` to\n                 //"}, {"sha": "47c3ea5457578117c9242b1b4d25bd208cba2dd6", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 47, "deletions": 22, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -37,6 +37,12 @@ pub struct Bounds<'tcx> {\n     /// here.\n     pub projection_bounds: Vec<(ty::PolyProjectionPredicate<'tcx>, Span)>,\n \n+    /// A list of const equality bounds. So if you had `T:\n+    /// Iterator<N = 4>` this would include `<T as\n+    /// Iterator>::N => 4`. Note that the self-type is explicit\n+    /// here.\n+    pub const_bounds: Vec<(ty::Binder<'tcx, ty::ConstPredicate<'tcx>>, Span)>,\n+\n     /// `Some` if there is *no* `?Sized` predicate. The `span`\n     /// is the location in the source of the `T` declaration which can\n     /// be cited as the source of the `T: Sized` requirement.\n@@ -48,14 +54,19 @@ impl<'tcx> Bounds<'tcx> {\n     /// where-clauses). Because some of our bounds listings (e.g.,\n     /// regions) don't include the self-type, you must supply the\n     /// self-type here (the `param_ty` parameter).\n-    pub fn predicates(\n-        &self,\n+    pub fn predicates<'out, 's>(\n+        &'s self,\n         tcx: TyCtxt<'tcx>,\n         param_ty: Ty<'tcx>,\n-    ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n+        // the output must live shorter than the duration of the borrow of self and 'tcx.\n+    ) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> + 'out\n+    where\n+        'tcx: 'out,\n+        's: 'out,\n+    {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n-            tcx.lang_items().sized_trait().map(|sized| {\n+            tcx.lang_items().sized_trait().map(move |sized| {\n                 let trait_ref = ty::Binder::dummy(ty::TraitRef {\n                     def_id: sized,\n                     substs: tcx.mk_substs_trait(param_ty, &[]),\n@@ -64,25 +75,39 @@ impl<'tcx> Bounds<'tcx> {\n             })\n         });\n \n-        sized_predicate\n-            .into_iter()\n-            .chain(self.region_bounds.iter().map(|&(region_bound, span)| {\n-                (\n-                    region_bound\n-                        .map_bound(|region_bound| ty::OutlivesPredicate(param_ty, region_bound))\n-                        .to_predicate(tcx),\n-                    span,\n-                )\n-            }))\n-            .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n+        let region_preds = self.region_bounds.iter().map(move |&(region_bound, span)| {\n+            let pred = region_bound\n+                .map_bound(|region_bound| ty::OutlivesPredicate(param_ty, region_bound))\n+                .to_predicate(tcx);\n+            (pred, span)\n+        });\n+        let trait_bounds =\n+            self.trait_bounds.iter().map(move |&(bound_trait_ref, span, constness)| {\n                 let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);\n                 (predicate, span)\n-            }))\n-            .chain(\n-                self.projection_bounds\n-                    .iter()\n-                    .map(|&(projection, span)| (projection.to_predicate(tcx), span)),\n-            )\n-            .collect()\n+            });\n+        let projection_bounds = self\n+            .projection_bounds\n+            .iter()\n+            .map(move |&(projection, span)| (projection.to_predicate(tcx), span));\n+        let const_bounds = self.const_bounds.iter().map(move |&(bound, span)| {\n+            // FIXME(...): what about the projection's generics?\n+            // Is this the right local defid? Or should I get the self ty then\n+            let pred = bound\n+                .map_bound(|cp| {\n+                    let got =\n+                        ty::Const::from_anon_const(tcx, cp.projection.item_def_id.expect_local());\n+                    ty::PredicateKind::ConstEquate(cp.c, got)\n+                })\n+                .to_predicate(tcx);\n+            (pred, span)\n+        });\n+\n+        sized_predicate\n+            .into_iter()\n+            .chain(region_preds)\n+            .chain(trait_bounds)\n+            .chain(projection_bounds)\n+            .chain(const_bounds)\n     }\n }"}, {"sha": "7cb100a0a83f09f6f8d5e15ae62e6b24b922c0bc", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -2450,7 +2450,7 @@ fn predicates_from_bound<'tcx>(\n ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     let mut bounds = Bounds::default();\n     astconv.add_bounds(param_ty, [bound].into_iter(), &mut bounds, bound_vars);\n-    bounds.predicates(astconv.tcx(), param_ty)\n+    bounds.predicates(astconv.tcx(), param_ty).collect()\n }\n \n fn compute_sig_of_foreign_fn_decl<'tcx>("}, {"sha": "6d992629a00ffecda0271ae81cd97c857aa94a7e", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -67,11 +67,11 @@ fn opaque_type_bounds<'tcx>(\n         let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n         <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, ast_bounds, None, span);\n-        let bounds = bounds.predicates(tcx, item_ty);\n+        let preds = bounds.predicates(tcx, item_ty);\n \n+        let bounds = tcx.arena.alloc_from_iter(preds);\n         debug!(\"opaque_type_bounds({}) = {:?}\", tcx.def_path_str(opaque_def_id), bounds);\n-\n-        tcx.arena.alloc_slice(&bounds)\n+        bounds\n     })\n }\n "}, {"sha": "169cb618a7d93888a402870df366590e06c3dabf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -2117,7 +2117,8 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n             hir::TypeBindingKind::Equality { ref ty } => {\n                 TypeBindingKind::Equality { ty: ty.clean(cx) }\n             }\n-            hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n+            hir::TypeBindingKind::Const { c: _ } => todo!(),\n+            hir::TypeBindingKind::Constraint { ref bounds } => TypeBindingKind::Constraint {\n                 bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),\n             },\n         }"}, {"sha": "9332d16afe54fe38bec45efaff4715a74d63218e", "filename": "src/test/ui/associated-consts/assoc-const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+pub trait Foo {\n+  const N: usize;\n+}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {\n+  const N: usize = 3;\n+}\n+\n+fn foo<F: Foo<N=3>>() {}\n+fn main() {}"}, {"sha": "d4f037677e0894c1bd6d4618e717811bf0069773", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -645,12 +645,13 @@ pub fn eq_generic_bound(l: &GenericBound, r: &GenericBound) -> bool {\n     }\n }\n \n-pub fn eq_assoc_constraint(l: &AssocTyConstraint, r: &AssocTyConstraint) -> bool {\n-    use AssocTyConstraintKind::*;\n+pub fn eq_assoc_constraint(l: &AssocConstraint, r: &AssocConstraint) -> bool {\n+    use AssocConstraintKind::*;\n     eq_id(l.ident, r.ident)\n         && match (&l.kind, &r.kind) {\n             (Equality { ty: l }, Equality { ty: r }) => eq_ty(l, r),\n             (Bound { bounds: l }, Bound { bounds: r }) => over(l, r, eq_generic_bound),\n+            (ConstEquality { c: l }, ConstEquality { c: r }) => eq_anon_const(l, r),\n             _ => false,\n         }\n }"}, {"sha": "4bad9742a0ef4278cc0c1c43410860b05010be09", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07659996221446273065651ff9c0fcb00935eb03/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07659996221446273065651ff9c0fcb00935eb03/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=07659996221446273065651ff9c0fcb00935eb03", "patch": "@@ -141,7 +141,7 @@ pub(crate) enum SegmentParam<'a> {\n     Const(&'a ast::AnonConst),\n     LifeTime(&'a ast::Lifetime),\n     Type(&'a ast::Ty),\n-    Binding(&'a ast::AssocTyConstraint),\n+    Binding(&'a ast::AssocConstraint),\n }\n \n impl<'a> SegmentParam<'a> {\n@@ -176,9 +176,9 @@ impl<'a> Rewrite for SegmentParam<'a> {\n     }\n }\n \n-impl Rewrite for ast::AssocTyConstraint {\n+impl Rewrite for ast::AssocConstraint {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        use ast::AssocTyConstraintKind::{Bound, Equality};\n+        use ast::AssocConstraintKind::{Bound, Equality, ConstEquality};\n \n         let mut result = String::with_capacity(128);\n         result.push_str(rewrite_ident(context, self.ident));\n@@ -192,8 +192,8 @@ impl Rewrite for ast::AssocTyConstraint {\n \n         let infix = match (&self.kind, context.config.type_punctuation_density()) {\n             (Bound { .. }, _) => \": \",\n-            (Equality { .. }, TypeDensity::Wide) => \" = \",\n-            (Equality { .. }, TypeDensity::Compressed) => \"=\",\n+            (ConstEquality { .. } | Equality { .. }, TypeDensity::Wide) => \" = \",\n+            (ConstEquality { .. } | Equality { .. }, TypeDensity::Compressed) => \"=\",\n         };\n         result.push_str(infix);\n \n@@ -206,11 +206,12 @@ impl Rewrite for ast::AssocTyConstraint {\n     }\n }\n \n-impl Rewrite for ast::AssocTyConstraintKind {\n+impl Rewrite for ast::AssocConstraintKind {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n-            ast::AssocTyConstraintKind::Equality { ty } => ty.rewrite(context, shape),\n-            ast::AssocTyConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n+            ast::AssocConstraintKind::Equality { ty } => ty.rewrite(context, shape),\n+            ast::AssocConstraintKind::ConstEquality { c } => c.rewrite(context, shape),\n+            ast::AssocConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n         }\n     }\n }"}]}