{"sha": "e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDJmNTcwZDlhN2YyZTc3ZTRiNDliN2E3ZTBmMzI5ZGUyYjVlMTg=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-02-13T12:11:50Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T06:54:46Z"}, "message": "Add a -Z time option which prints only passes which runs once", "tree": {"sha": "9b88d87271380c37145a7c33dffb883750a863ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b88d87271380c37145a7c33dffb883750a863ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "html_url": "https://github.com/rust-lang/rust/commit/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb4890dfe6db0279fdd3cda19f9643873ae3db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb4890dfe6db0279fdd3cda19f9643873ae3db9", "html_url": "https://github.com/rust-lang/rust/commit/3eb4890dfe6db0279fdd3cda19f9643873ae3db9"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "1912ff7a9d711c6c3a971b459e509ca10fbd98b5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "patch": "@@ -1200,6 +1200,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"when using two-phase-borrows, allow two phases even for non-autoref `&mut` borrows\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n+    time: bool = (false, parse_bool, [UNTRACKED],\n+        \"measure time of rustc processes\"),\n     count_llvm_insns: bool = (false, parse_bool,\n         [UNTRACKED_WITH_WARNING(true,\n         \"The output generated by `-Z count_llvm_insns` might not be reliable \\"}, {"sha": "ac4f6270869291bb8e6638017f89f37a21466347", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "patch": "@@ -501,6 +501,9 @@ impl Session {\n         self.opts.debugging_opts.verbose\n     }\n     pub fn time_passes(&self) -> bool {\n+        self.opts.debugging_opts.time_passes || self.opts.debugging_opts.time\n+    }\n+    pub fn time_extended(&self) -> bool {\n         self.opts.debugging_opts.time_passes\n     }\n     pub fn profile_queries(&self) -> bool {"}, {"sha": "aaadbf289356811091d4ff393b53f845a562fd44", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "patch": "@@ -12,7 +12,7 @@ use crate::session::{CrateDisambiguator, Session};\n use crate::ty;\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n-use crate::util::common::time;\n+use crate::util::common::{time, time_ext};\n \n use errors::Diagnostic;\n use rustc_data_structures::fx::FxHashMap;\n@@ -1082,23 +1082,22 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let desc = &format!(\"encode_query_results for {}\",\n         unsafe { ::std::intrinsics::type_name::<Q>() });\n \n-    time(tcx.sess, desc, || {\n+    time_ext(tcx.sess.time_extended(), Some(tcx.sess), desc, || {\n+        let map = Q::query_cache(tcx).borrow();\n+        assert!(map.active.is_empty());\n+        for (key, entry) in map.results.iter() {\n+            if Q::cache_on_disk(tcx, key.clone()) {\n+                let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n-    let map = Q::query_cache(tcx).borrow();\n-    assert!(map.active.is_empty());\n-    for (key, entry) in map.results.iter() {\n-        if Q::cache_on_disk(tcx, key.clone()) {\n-            let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+                // Record position of the cache entry\n+                query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.position())));\n \n-            // Record position of the cache entry\n-            query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.position())));\n-\n-            // Encode the type check tables with the SerializedDepNodeIndex\n-            // as tag.\n-            encoder.encode_tagged(dep_node, &entry.value)?;\n+                // Encode the type check tables with the SerializedDepNodeIndex\n+                // as tag.\n+                encoder.encode_tagged(dep_node, &entry.value)?;\n+            }\n         }\n-    }\n \n-    Ok(())\n+        Ok(())\n     })\n }"}, {"sha": "f10bc0516e5bf38a9c049ab3e053bd3d9d40dd93", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n use rustc_codegen_ssa::CodegenResults;\n-use rustc::util::common::time;\n+use rustc::util::common::{time, time_ext};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n@@ -1319,7 +1319,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n         let name = cratepath.file_name().unwrap().to_str().unwrap();\n         let name = &name[3..name.len() - 5]; // chop off lib/.rlib\n \n-        time(sess, &format!(\"altering {}.rlib\", name), || {\n+        time_ext(sess.time_extended(), Some(sess), &format!(\"altering {}.rlib\", name), || {\n             let cfg = archive_config(sess, &dst, Some(cratepath));\n             let mut archive = ArchiveBuilder::new(cfg);\n             archive.update_symbols();"}, {"sha": "9980ffd737120110e7e798c67a566d75ab53b3ef", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "patch": "@@ -125,7 +125,7 @@ impl ModuleConfig {\n         self.verify_llvm_ir = sess.verify_llvm_ir();\n         self.no_prepopulate_passes = sess.opts.cg.no_prepopulate_passes;\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n-        self.time_passes = sess.time_passes();\n+        self.time_passes = sess.time_extended();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode ||\n                               sess.opts.cg.linker_plugin_lto.enabled();\n@@ -1085,7 +1085,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n         opts: Arc::new(sess.opts.clone()),\n-        time_passes: sess.time_passes(),\n+        time_passes: sess.time_extended(),\n         profiler: sess.self_profiling.clone(),\n         exported_symbols,\n         plugin_passes: sess.plugin_llvm_passes.borrow().clone(),"}, {"sha": "ac10683598aa7e183262881ffc85669db03dfc23", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=e842f570d9a7f2e77e4b49b7a7e0f329de2b5e18", "patch": "@@ -403,8 +403,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         errors_buffer: &mut Vec<Diagnostic>,\n     ) -> Option<ClosureRegionRequirements<'gcx>> {\n-        common::time(\n-            infcx.tcx.sess,\n+        common::time_ext(\n+            infcx.tcx.sess.time_extended(),\n+            Some(infcx.tcx.sess),\n             &format!(\"solve_nll_region_constraints({:?})\", mir_def_id),\n             || self.solve_inner(infcx, mir, mir_def_id, errors_buffer),\n         )"}]}