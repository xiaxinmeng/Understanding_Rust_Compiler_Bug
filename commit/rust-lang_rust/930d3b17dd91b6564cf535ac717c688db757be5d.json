{"sha": "930d3b17dd91b6564cf535ac717c688db757be5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMGQzYjE3ZGQ5MWI2NTY0Y2Y1MzVhYzcxN2M2ODhkYjc1N2JlNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-26T18:29:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-26T18:29:57Z"}, "message": "Auto merge of #44741 - qmx:trans_fulfill_obligation_should_not_crash, r=nikomatsakis\n\nuse param_env on the trait_cache key\n\nWe bailed from making trans_fulfill_obligation return `Option` or `Result`, just made it less prone to crashing outside trans\n\nr? @nikomatsakis", "tree": {"sha": "4735865d8ef2f673b63d1dee7edf37f643eeb888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4735865d8ef2f673b63d1dee7edf37f643eeb888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/930d3b17dd91b6564cf535ac717c688db757be5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/930d3b17dd91b6564cf535ac717c688db757be5d", "html_url": "https://github.com/rust-lang/rust/commit/930d3b17dd91b6564cf535ac717c688db757be5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/930d3b17dd91b6564cf535ac717c688db757be5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c4510adc81bd7623bc2993b42ee7d87320f1f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4510adc81bd7623bc2993b42ee7d87320f1f2b", "html_url": "https://github.com/rust-lang/rust/commit/1c4510adc81bd7623bc2993b42ee7d87320f1f2b"}, {"sha": "9d52cb2f84fe3e3c1a4a1945de8116d60290b05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d52cb2f84fe3e3c1a4a1945de8116d60290b05b", "html_url": "https://github.com/rust-lang/rust/commit/9d52cb2f84fe3e3c1a4a1945de8116d60290b05b"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "947e7117c4ea2d42842b528f76b4d7e593c3d540", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/930d3b17dd91b6564cf535ac717c688db757be5d/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930d3b17dd91b6564cf535ac717c688db757be5d/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=930d3b17dd91b6564cf535ac717c688db757be5d", "patch": "@@ -19,7 +19,7 @@ use std::cell::RefCell;\n use std::marker::PhantomData;\n use syntax::ast;\n use syntax_pos::Span;\n-use traits::{FulfillmentContext, Obligation, ObligationCause, Reveal, SelectionContext, Vtable};\n+use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, Vtable};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::{Subst, Substs};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -31,24 +31,25 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// (necessarily) resolve all nested obligations on the impl. Note\n     /// that type check should guarantee to us that all nested\n     /// obligations *could be* resolved if we wanted to.\n+    /// Assumes that this is run after the entire crate has been successfully type-checked.\n     pub fn trans_fulfill_obligation(self,\n                                     span: Span,\n+                                    param_env: ty::ParamEnv<'tcx>,\n                                     trait_ref: ty::PolyTraitRef<'tcx>)\n                                     -> Vtable<'tcx, ()>\n     {\n         // Remove any references to regions; this helps improve caching.\n         let trait_ref = self.erase_regions(&trait_ref);\n \n-        self.trans_trait_caches.trait_cache.memoize(trait_ref, || {\n+        self.trans_trait_caches.trait_cache.memoize((param_env, trait_ref), || {\n             debug!(\"trans::fulfill_obligation(trait_ref={:?}, def_id={:?})\",\n-                   trait_ref, trait_ref.def_id());\n+                   (param_env, trait_ref), trait_ref.def_id());\n \n             // Do the initial selection for the obligation. This yields the\n             // shallow result we are looking for -- that is, what specific impl.\n             self.infer_ctxt().enter(|infcx| {\n                 let mut selcx = SelectionContext::new(&infcx);\n \n-                let param_env = ty::ParamEnv::empty(Reveal::All);\n                 let obligation_cause = ObligationCause::misc(span,\n                                                              ast::DUMMY_NODE_ID);\n                 let obligation = Obligation::new(obligation_cause,\n@@ -167,7 +168,7 @@ pub struct TraitSelectionCache<'tcx> {\n }\n \n impl<'tcx> DepTrackingMapConfig for TraitSelectionCache<'tcx> {\n-    type Key = ty::PolyTraitRef<'tcx>;\n+    type Key = (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>);\n     type Value = Vtable<'tcx, ()>;\n     fn to_dep_kind() -> DepKind {\n         DepKind::TraitSelect"}, {"sha": "62ccd55b483caf314a40636ff37dc6505e34e3a2", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/930d3b17dd91b6564cf535ac717c688db757be5d/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/930d3b17dd91b6564cf535ac717c688db757be5d/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=930d3b17dd91b6564cf535ac717c688db757be5d", "patch": "@@ -112,7 +112,8 @@ fn resolve_associated_item<'a, 'tcx>(\n            def_id, trait_id, rcvr_substs);\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = tcx.trans_fulfill_obligation(DUMMY_SP, ty::Binder(trait_ref));\n+    let vtbl = tcx.trans_fulfill_obligation(\n+        DUMMY_SP, ty::ParamEnv::empty(traits::Reveal::All), ty::Binder(trait_ref));\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n@@ -226,7 +227,8 @@ pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n     });\n \n-    match tcx.trans_fulfill_obligation(DUMMY_SP, trait_ref) {\n+    match tcx.trans_fulfill_obligation(\n+        DUMMY_SP, ty::ParamEnv::empty(traits::Reveal::All), trait_ref) {\n         traits::VtableImpl(traits::VtableImplData { impl_def_id, .. }) => {\n             tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n         }"}, {"sha": "3cc815ef34eddb36ed1d78189f17cba4aefcb76d", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/930d3b17dd91b6564cf535ac717c688db757be5d/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/930d3b17dd91b6564cf535ac717c688db757be5d/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=930d3b17dd91b6564cf535ac717c688db757be5d", "patch": "@@ -23,7 +23,7 @@\n # Each tool has a list of people to ping\n \n # ping @oli-obk @RalfJung @eddyb\n-miri = \"Testing\"\n+miri = \"Broken\"\n \n # ping @Manishearth @llogiq @mcarton @oli-obk\n clippy = \"Broken\""}]}