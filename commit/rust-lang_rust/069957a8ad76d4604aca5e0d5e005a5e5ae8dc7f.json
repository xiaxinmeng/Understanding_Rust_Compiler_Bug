{"sha": "069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OTk1N2E4YWQ3NmQ0NjA0YWNhNWUwZDVlMDA1YTVlNWFlOGRjN2Y=", "commit": {"author": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2019-03-26T14:12:14Z"}, "committer": {"name": "F\u00e9lix Fischer", "email": "felix91gr@gmail.com", "date": "2019-04-02T14:39:43Z"}, "message": "Add TransmutingNull Lint\n* Late Lint pass, catches:\n  * One liner: 0 -> null -> transmute\n  * One liner: std:null() -> transmute\n  * Const (which resolves to null) -> transmute\n* UI Test case for Lint\n* Updated test for issue 3849, because now the lint that code generated is in Clippy.\n* Expanded `const.rs` miri-based Constant Folding code, to cover\n  raw pointers", "tree": {"sha": "6bb53b3e79d4300484896ee3445a8815a4836b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb53b3e79d4300484896ee3445a8815a4836b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "html_url": "https://github.com/rust-lang/rust/commit/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/comments", "author": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "felix91gr", "id": 11747623, "node_id": "MDQ6VXNlcjExNzQ3NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/11747623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felix91gr", "html_url": "https://github.com/felix91gr", "followers_url": "https://api.github.com/users/felix91gr/followers", "following_url": "https://api.github.com/users/felix91gr/following{/other_user}", "gists_url": "https://api.github.com/users/felix91gr/gists{/gist_id}", "starred_url": "https://api.github.com/users/felix91gr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felix91gr/subscriptions", "organizations_url": "https://api.github.com/users/felix91gr/orgs", "repos_url": "https://api.github.com/users/felix91gr/repos", "events_url": "https://api.github.com/users/felix91gr/events{/privacy}", "received_events_url": "https://api.github.com/users/felix91gr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a11568fc5b995c2641560415e97244165dd278", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a11568fc5b995c2641560415e97244165dd278", "html_url": "https://github.com/rust-lang/rust/commit/25a11568fc5b995c2641560415e97244165dd278"}], "stats": {"total": 209, "additions": 195, "deletions": 14}, "files": [{"sha": "7837b899b533e0494a6c2e1bbf98bccc344e5fe7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -1022,6 +1022,7 @@ All notable changes to this project will be documented in this file.\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n [`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref\n+[`transmuting_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmuting_null\n [`trivial_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivial_regex\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity"}, {"sha": "43b477d2cef3e2d839850d1ba572c8c4731ccbc6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 297 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 298 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "66fbf18f3dd0c68209982629163809c0861d580f", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -41,6 +41,8 @@ pub enum Constant {\n     Repeat(Box<Constant>, u64),\n     /// A tuple of constants.\n     Tuple(Vec<Constant>),\n+    /// A raw pointer.\n+    RawPtr(u128),\n     /// A literal with syntax error.\n     Err(Symbol),\n }\n@@ -109,6 +111,9 @@ impl Hash for Constant {\n                 c.hash(state);\n                 l.hash(state);\n             },\n+            Constant::RawPtr(u) => {\n+                u.hash(state);\n+            },\n             Constant::Err(ref s) => {\n                 s.hash(state);\n             },\n@@ -192,7 +197,7 @@ pub fn constant_simple<'c, 'cc>(\n     constant(lcx, tables, e).and_then(|(cst, res)| if res { None } else { Some(cst) })\n }\n \n-/// Creates a `ConstEvalLateContext` from the given `LateContext` and `TypeckTables`\n+/// Creates a `ConstEvalLateContext` from the given `LateContext` and `TypeckTables`.\n pub fn constant_context<'c, 'cc>(\n     lcx: &LateContext<'c, 'cc>,\n     tables: &'c ty::TypeckTables<'cc>,\n@@ -215,7 +220,7 @@ pub struct ConstEvalLateContext<'a, 'tcx: 'a> {\n }\n \n impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n-    /// simple constant folding: Insert an expression, get a constant or none.\n+    /// Simple constant folding: Insert an expression, get a constant or none.\n     pub fn expr(&mut self, e: &Expr) -> Option<Constant> {\n         match e.node {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id),\n@@ -238,7 +243,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             }),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),\n             ExprKind::Call(ref callee, ref args) => {\n-                // We only handle a few const functions for now\n+                // We only handle a few const functions for now.\n                 if_chain! {\n                     if args.is_empty();\n                     if let ExprKind::Path(qpath) = &callee.node;\n@@ -262,7 +267,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     }\n                 }\n             },\n-            // TODO: add other expressions\n+            // TODO: add other expressions.\n             _ => None,\n         }\n     }\n@@ -304,13 +309,13 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n-    /// create `Some(Vec![..])` of all constants, unless there is any\n-    /// non-constant part\n+    /// Create `Some(Vec![..])` of all constants, unless there is any\n+    /// non-constant part.\n     fn multi(&mut self, vec: &[Expr]) -> Option<Vec<Constant>> {\n         vec.iter().map(|elem| self.expr(elem)).collect::<Option<_>>()\n     }\n \n-    /// lookup a possibly constant expression from a ExprKind::Path\n+    /// Lookup a possibly constant expression from a ExprKind::Path.\n     fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n         use rustc::mir::interpret::GlobalId;\n \n@@ -334,14 +339,14 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                 if ret.is_some() {\n                     self.needed_resolution = true;\n                 }\n-                return ret;\n+                ret\n             },\n-            _ => {},\n+            // FIXME: cover all useable cases.\n+            _ => None,\n         }\n-        None\n     }\n \n-    /// A block can only yield a constant if it only has one constant expression\n+    /// A block can only yield a constant if it only has one constant expression.\n     fn block(&mut self, block: &Block) -> Option<Constant> {\n         if block.stmts.is_empty() {\n             block.expr.as_ref().and_then(|b| self.expr(b))\n@@ -467,7 +472,13 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n             ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(\n                 b.try_into().expect(\"invalid f64 bit representation\"),\n             ))),\n-            // FIXME: implement other conversion\n+            ty::RawPtr(type_and_mut) => {\n+                if let ty::Uint(_) = type_and_mut.ty.sty {\n+                    return Some(Constant::RawPtr(b));\n+                }\n+                None\n+            },\n+            // FIXME: implement other conversions.\n             _ => None,\n         },\n         ConstValue::Slice(Scalar::Ptr(ptr), n) => match result.ty.sty {\n@@ -484,7 +495,7 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n             },\n             _ => None,\n         },\n-        // FIXME: implement other conversions\n+        // FIXME: implement other conversions.\n         _ => None,\n     }\n }"}, {"sha": "f7d9524c6a282ad34e578dbf81e28f19bb53b957", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -255,6 +255,7 @@ pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n+pub mod transmuting_null;\n pub mod trivially_copy_pass_by_ref;\n pub mod types;\n pub mod unicode;\n@@ -570,6 +571,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box types::RefToMut);\n     reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n     reg.register_late_lint_pass(box missing_const_for_fn::MissingConstForFn);\n+    reg.register_late_lint_pass(box transmuting_null::Pass);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -841,6 +843,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n+        transmuting_null::TRANSMUTING_NULL,\n         trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n@@ -1078,6 +1081,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         swap::ALMOST_SWAPPED,\n         transmute::WRONG_TRANSMUTE,\n+        transmuting_null::TRANSMUTING_NULL,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::CAST_PTR_ALIGNMENT,\n         types::CAST_REF_TO_MUT,"}, {"sha": "445abc4832aab26348d6408cdf340d3a18a9f913", "filename": "clippy_lints/src/transmuting_null.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -0,0 +1,112 @@\n+use crate::consts::{constant_context, Constant};\n+use crate::utils::{match_qpath, span_lint};\n+use if_chain::if_chain;\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::LitKind;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for transmute calls which would receive a null pointer.\n+    ///\n+    /// **Why is this bad?** Transmuting a null pointer is undefined behavior.\n+    ///\n+    /// **Known problems:** Not all cases can be detected at the moment of this writing.\n+    /// For example, variables which hold a null pointer and are then fed to a `transmute`\n+    /// call, aren't detectable yet.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let null_ref: &u64 = unsafe { std::mem::transmute(0 as *const u64) };\n+    /// ```\n+    pub TRANSMUTING_NULL,\n+    correctness,\n+    \"transmutes from a null pointer to a reference, which is undefined behavior\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TRANSMUTING_NULL,)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"TransmutingNull\"\n+    }\n+}\n+\n+const LINT_MSG: &str = \"transmuting a known null pointer into a reference.\";\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Call(ref func, ref args) = expr.node;\n+            if let ExprKind::Path(ref path) = func.node;\n+            if match_qpath(path, &[\"std\", \"mem\", \"transmute\"]);\n+            if args.len() == 1;\n+\n+            then {\n+\n+                // Catching transmute over constants that resolve to `null`.\n+                let mut const_eval_context = constant_context(cx, cx.tables);\n+                if_chain! {\n+                    if let ExprKind::Path(ref _qpath) = args[0].node;\n+                    let x = const_eval_context.expr(&args[0]);\n+                    if let Some(constant) = x;\n+                    if let Constant::RawPtr(ptr_value) = constant;\n+                    if ptr_value == 0;\n+                    then {\n+                        span_lint(\n+                            cx,\n+                            TRANSMUTING_NULL,\n+                            expr.span,\n+                            LINT_MSG)\n+                    }\n+                }\n+\n+                // Catching:\n+                // `std::mem::transmute(0 as *const i32)`\n+                if_chain! {\n+                    if let ExprKind::Cast(ref inner_expr, ref _cast_ty) = args[0].node;\n+                    if let ExprKind::Lit(ref lit) = inner_expr.node;\n+                    if let LitKind::Int(0, _) = lit.node;\n+                    then {\n+                        span_lint(\n+                            cx,\n+                            TRANSMUTING_NULL,\n+                            expr.span,\n+                            LINT_MSG)\n+                    }\n+                }\n+\n+                // Catching:\n+                // `std::mem::transmute(std::ptr::null::<i32>())`\n+                if_chain! {\n+                    if let ExprKind::Call(ref func1, ref args1) = args[0].node;\n+                    if let ExprKind::Path(ref path1) = func1.node;\n+                    if match_qpath(path1, &[\"std\", \"ptr\", \"null\"]);\n+                    if args1.len() == 0;\n+                    then {\n+                        span_lint(\n+                            cx,\n+                            TRANSMUTING_NULL,\n+                            expr.span,\n+                            LINT_MSG)\n+                    }\n+                }\n+\n+                // FIXME:\n+                // Also catch transmutations of variables which are known nulls.\n+                // To do this, MIR const propagation seems to be the better tool.\n+                // Whenever MIR const prop routines are more developed, this will\n+                // become available. As of this writing (25/03/19) it is not yet.\n+            }\n+        }\n+    }\n+}"}, {"sha": "bae4570e539a1b834d60014aafa2f6b627fb753d", "filename": "tests/ui/issue_3849.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/tests%2Fui%2Fissue_3849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/tests%2Fui%2Fissue_3849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_3849.rs?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -1,6 +1,7 @@\n #![allow(dead_code)]\n #![allow(clippy::zero_ptr)]\n #![allow(clippy::transmute_ptr_to_ref)]\n+#![allow(clippy::transmuting_null)]\n \n pub const ZPTR: *const usize = 0 as *const _;\n "}, {"sha": "ea3ee8edc81b1b65cd16aea50dab9da6d311d44b", "filename": "tests/ui/transmuting_null.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/tests%2Fui%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/tests%2Fui%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmuting_null.rs?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -0,0 +1,30 @@\n+#![allow(dead_code)]\n+#![warn(clippy::transmuting_null)]\n+#![allow(clippy::zero_ptr)]\n+#![allow(clippy::transmute_ptr_to_ref)]\n+#![allow(clippy::eq_op)]\n+\n+// Easy to lint because these only span one line.\n+fn one_liners() {\n+    unsafe {\n+        let _: &u64 = std::mem::transmute(0 as *const u64);\n+        let _: &u64 = std::mem::transmute(std::ptr::null::<u64>());\n+    }\n+}\n+\n+pub const ZPTR: *const usize = 0 as *const _;\n+pub const NOT_ZPTR: *const usize = 1 as *const _;\n+\n+fn transmute_const() {\n+    unsafe {\n+        // Should raise a lint.\n+        let _: &u64 = std::mem::transmute(ZPTR);\n+        // Should NOT raise a lint.\n+        let _: &u64 = std::mem::transmute(NOT_ZPTR);\n+    }\n+}\n+\n+fn main() {\n+    one_liners();\n+    transmute_const();\n+}"}, {"sha": "05f91ee2adaa8b37e2ffd769445166e13aa7e112", "filename": "tests/ui/transmuting_null.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/tests%2Fui%2Ftransmuting_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f/tests%2Fui%2Ftransmuting_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmuting_null.stderr?ref=069957a8ad76d4604aca5e0d5e005a5e5ae8dc7f", "patch": "@@ -0,0 +1,22 @@\n+error: transmuting a known null pointer into a reference.\n+  --> $DIR/transmuting_null.rs:10:23\n+   |\n+LL |         let _: &u64 = std::mem::transmute(0 as *const u64);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::transmuting-null` implied by `-D warnings`\n+\n+error: transmuting a known null pointer into a reference.\n+  --> $DIR/transmuting_null.rs:11:23\n+   |\n+LL |         let _: &u64 = std::mem::transmute(std::ptr::null::<u64>());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmuting a known null pointer into a reference.\n+  --> $DIR/transmuting_null.rs:21:23\n+   |\n+LL |         let _: &u64 = std::mem::transmute(ZPTR);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}