{"sha": "7e3493e5e3a0cc7b4c99f36865305b241ff993d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMzQ5M2U1ZTNhMGNjN2I0Yzk5ZjM2ODY1MzA1YjI0MWZmOTkzZDA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T09:04:27Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcore: use unboxed closures in the fields of `Inspect`", "tree": {"sha": "acdf4a35acdd5decd65294269224654345f11223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acdf4a35acdd5decd65294269224654345f11223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e3493e5e3a0cc7b4c99f36865305b241ff993d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3493e5e3a0cc7b4c99f36865305b241ff993d0", "html_url": "https://github.com/rust-lang/rust/commit/7e3493e5e3a0cc7b4c99f36865305b241ff993d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e3493e5e3a0cc7b4c99f36865305b241ff993d0/comments", "author": null, "committer": null, "parents": [{"sha": "a051ba1dffa2648a9cd25d39f70fbb5089505762", "url": "https://api.github.com/repos/rust-lang/rust/commits/a051ba1dffa2648a9cd25d39f70fbb5089505762", "html_url": "https://github.com/rust-lang/rust/commit/a051ba1dffa2648a9cd25d39f70fbb5089505762"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "36b902dbee12e341d9bc0cfe24be25ffb72a92b7", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e3493e5e3a0cc7b4c99f36865305b241ff993d0/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3493e5e3a0cc7b4c99f36865305b241ff993d0/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=7e3493e5e3a0cc7b4c99f36865305b241ff993d0", "patch": "@@ -432,7 +432,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn inspect<'r>(self, f: |&A|: 'r) -> Inspect<'r, A, Self> {\n+    fn inspect<F>(self, f: F) -> Inspect<A, Self, F> where F: FnMut(&A) {\n         Inspect{iter: self, f: f}\n     }\n \n@@ -777,7 +777,10 @@ pub trait ExactSizeIterator<A> : DoubleEndedIterator<A> {\n #[unstable = \"trait is unstable\"]\n impl<A, T: ExactSizeIterator<A>> ExactSizeIterator<(uint, A)> for Enumerate<T> {}\n #[unstable = \"trait is unstable\"]\n-impl<'a, A, T: ExactSizeIterator<A>> ExactSizeIterator<A> for Inspect<'a, A, T> {}\n+impl<A, I, F> ExactSizeIterator<A> for Inspect<A, I, F> where\n+    I: ExactSizeIterator<A>,\n+    F: FnMut(&A),\n+{}\n #[unstable = \"trait is unstable\"]\n impl<A, T: ExactSizeIterator<A>> ExactSizeIterator<A> for Rev<T> {}\n #[unstable = \"trait is unstable\"]\n@@ -2012,12 +2015,12 @@ impl<T> Fuse<T> {\n /// element before yielding it.\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[unstable = \"waiting for unboxed closures\"]\n-pub struct Inspect<'a, A, T> {\n-    iter: T,\n-    f: |&A|: 'a\n+pub struct Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n+    iter: I,\n+    f: F,\n }\n \n-impl<'a, A, T> Inspect<'a, A, T> {\n+impl<A, I, F> Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n     #[inline]\n     fn do_inspect(&mut self, elt: Option<A>) -> Option<A> {\n         match elt {\n@@ -2030,7 +2033,7 @@ impl<'a, A, T> Inspect<'a, A, T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, T: Iterator<A>> Iterator<A> for Inspect<'a, A, T> {\n+impl<A, I, F> Iterator<A> for Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         let next = self.iter.next();\n@@ -2044,8 +2047,10 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for Inspect<'a, A, T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A>\n-for Inspect<'a, A, T> {\n+impl<A, I, F> DoubleEndedIterator<A> for Inspect<A, I, F> where\n+    I: DoubleEndedIterator<A>,\n+    F: FnMut(&A),\n+{\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         let next = self.iter.next_back();\n@@ -2054,8 +2059,10 @@ for Inspect<'a, A, T> {\n }\n \n #[experimental = \"trait is experimental\"]\n-impl<'a, A, T: RandomAccessIterator<A>> RandomAccessIterator<A>\n-for Inspect<'a, A, T> {\n+impl<A, I, F> RandomAccessIterator<A> for Inspect<A, I, F> where\n+    I: RandomAccessIterator<A>,\n+    F: FnMut(&A),\n+{\n     #[inline]\n     fn indexable(&self) -> uint {\n         self.iter.indexable()"}]}