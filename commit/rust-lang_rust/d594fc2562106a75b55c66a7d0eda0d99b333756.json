{"sha": "d594fc2562106a75b55c66a7d0eda0d99b333756", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OTRmYzI1NjIxMDZhNzViNTVjNjZhN2QwZWRhMGQ5OWIzMzM3NTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-10T20:27:39Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-03T08:17:25Z"}, "message": "rustc_metadata: don't encode an empty slice for inferred_outlives.", "tree": {"sha": "f3f480be0bcd25a9d842af4554acbd4c612bd185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f480be0bcd25a9d842af4554acbd4c612bd185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d594fc2562106a75b55c66a7d0eda0d99b333756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d594fc2562106a75b55c66a7d0eda0d99b333756", "html_url": "https://github.com/rust-lang/rust/commit/d594fc2562106a75b55c66a7d0eda0d99b333756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d594fc2562106a75b55c66a7d0eda0d99b333756/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd7cbaa38d852507d594de7143351bf2e44cc7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7cbaa38d852507d594de7143351bf2e44cc7c4", "html_url": "https://github.com/rust-lang/rust/commit/cd7cbaa38d852507d594de7143351bf2e44cc7c4"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "771d01a4b6a1dbe67dec3a95092d4847f825b0bd", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d594fc2562106a75b55c66a7d0eda0d99b333756/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d594fc2562106a75b55c66a7d0eda0d99b333756/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d594fc2562106a75b55c66a7d0eda0d99b333756", "patch": "@@ -671,7 +671,9 @@ impl<'a, 'tcx> CrateMetadata {\n         item_id: DefIndex,\n         tcx: TyCtxt<'tcx>,\n     ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n-        self.root.per_def.inferred_outlives.get(self, item_id).unwrap().decode((self, tcx))\n+        self.root.per_def.inferred_outlives.get(self, item_id).map(|predicates| {\n+            predicates.decode((self, tcx))\n+        }).unwrap_or_default()\n     }\n \n     crate fn get_super_predicates("}, {"sha": "05cc63a01f306f20926006a2c96fa6b3eb1939ed", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d594fc2562106a75b55c66a7d0eda0d99b333756/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d594fc2562106a75b55c66a7d0eda0d99b333756/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d594fc2562106a75b55c66a7d0eda0d99b333756", "patch": "@@ -842,8 +842,10 @@ impl EncodeContext<'tcx> {\n \n     fn encode_inferred_outlives(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_inferred_outlives({:?})\", def_id);\n-        record!(self.per_def.inferred_outlives[def_id] <-\n-            self.tcx.inferred_outlives_of(def_id));\n+        let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n+        if !inferred_outlives.is_empty() {\n+            record!(self.per_def.inferred_outlives[def_id] <- inferred_outlives);\n+        }\n     }\n \n     fn encode_super_predicates(&mut self, def_id: DefId) {"}, {"sha": "f644b7264320b79076c4e6fe2c643fc2a1e5740c", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d594fc2562106a75b55c66a7d0eda0d99b333756/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d594fc2562106a75b55c66a7d0eda0d99b333756/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=d594fc2562106a75b55c66a7d0eda0d99b333756", "patch": "@@ -249,6 +249,7 @@ crate struct LazyPerDefTables<'tcx> {\n     // doesn't handle shorthands in its own (de)serialization impls,\n     // as it's an `enum` for which we want to derive (de)serialization,\n     // so the `ty::codec` APIs handle the whole `&'tcx [...]` at once.\n+    // Also, as an optimization, a missing entry indicates an empty `&[]`.\n     pub inferred_outlives: Lazy!(PerDefTable<Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>),\n     pub super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n "}]}