{"sha": "bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWI1ZjVlZGViOTFmYTdmYzliZDdjMjIwZDY5OTg1ZTAxNzViYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-07T02:26:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-07T02:26:45Z"}, "message": "Auto merge of #29666 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #29617, #29622, #29656, #29659, #29660\n- Failed merges:", "tree": {"sha": "3b8244879018938a1650fcebe24e0d2949ee4d25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8244879018938a1650fcebe24e0d2949ee4d25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "html_url": "https://github.com/rust-lang/rust/commit/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3e7e73c6086bead3949476c4f0c8231e6a0fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3e7e73c6086bead3949476c4f0c8231e6a0fc8", "html_url": "https://github.com/rust-lang/rust/commit/1e3e7e73c6086bead3949476c4f0c8231e6a0fc8"}, {"sha": "d9dd67d90829ae2ce9422b264a1971e8e9c45c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dd67d90829ae2ce9422b264a1971e8e9c45c5a", "html_url": "https://github.com/rust-lang/rust/commit/d9dd67d90829ae2ce9422b264a1971e8e9c45c5a"}], "stats": {"total": 89, "additions": 68, "deletions": 21}, "files": [{"sha": "b6087e82ba1384c4af3adf2dc68e92316f0d4caf", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -1 +1 @@\n-Subproject commit 93d0384373750b52996fd7f8249adaae39f562d8\n+Subproject commit b6087e82ba1384c4af3adf2dc68e92316f0d4caf"}, {"sha": "cc6cfc2f4a0973d0faf6142200759c9293fdcdbe", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -121,6 +121,7 @@ languages. It will not compile:\n \n ```ignore\n use std::thread;\n+use std::time::Duration;\n \n fn main() {\n     let mut data = vec![1, 2, 3];\n@@ -131,7 +132,7 @@ fn main() {\n         });\n     }\n \n-    thread::sleep_ms(50);\n+    thread::sleep(Duration::from_millis(50));\n }\n ```\n \n@@ -165,6 +166,7 @@ indivisible operations which can't have data races.\n ```ignore\n use std::thread;\n use std::sync::Arc;\n+use std::time::Duration;\n \n fn main() {\n     let mut data = Arc::new(vec![1, 2, 3]);\n@@ -176,7 +178,7 @@ fn main() {\n         });\n     }\n \n-    thread::sleep_ms(50);\n+    thread::sleep(Duration::from_millis(50));\n }\n ```\n \n@@ -207,6 +209,7 @@ Here's the working version:\n ```rust\n use std::sync::{Arc, Mutex};\n use std::thread;\n+use std::time::Duration;\n \n fn main() {\n     let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n@@ -219,7 +222,7 @@ fn main() {\n         });\n     }\n \n-    thread::sleep_ms(50);\n+    thread::sleep(Duration::from_millis(50));\n }\n ```\n \n@@ -241,6 +244,7 @@ Let's examine the body of the thread more closely:\n ```rust\n # use std::sync::{Arc, Mutex};\n # use std::thread;\n+# use std::time::Duration;\n # fn main() {\n #     let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n #     for i in 0..3 {\n@@ -250,7 +254,7 @@ thread::spawn(move || {\n     data[i] += 1;\n });\n #     }\n-#     thread::sleep_ms(50);\n+#     thread::sleep(Duration::from_millis(50));\n # }\n ```\n "}, {"sha": "5f66a5b9e297c7eae8324dbec5ffa3ee5065efca", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -264,6 +264,7 @@ eat. Here\u2019s the next version:\n \n ```rust\n use std::thread;\n+use std::time::Duration;\n \n struct Philosopher {\n     name: String,\n@@ -279,7 +280,7 @@ impl Philosopher {\n     fn eat(&self) {\n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n@@ -313,13 +314,13 @@ from the standard library, and so we need to `use` it.\n     fn eat(&self) {\n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n ```\n \n-We now print out two messages, with a `sleep_ms()` in the middle. This will\n+We now print out two messages, with a `sleep` in the middle. This will\n simulate the time it takes a philosopher to eat.\n \n If you run this program, you should see each philosopher eat in turn:\n@@ -345,6 +346,7 @@ Here\u2019s the next iteration:\n \n ```rust\n use std::thread;\n+use std::time::Duration;\n \n struct Philosopher {\n     name: String,\n@@ -360,7 +362,7 @@ impl Philosopher {\n     fn eat(&self) {\n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n@@ -493,6 +495,7 @@ Let\u2019s modify the program to use the `Table`:\n \n ```rust\n use std::thread;\n+use std::time::Duration;\n use std::sync::{Mutex, Arc};\n \n struct Philosopher {\n@@ -512,12 +515,12 @@ impl Philosopher {\n \n     fn eat(&self, table: &Table) {\n         let _left = table.forks[self.left].lock().unwrap();\n-        thread::sleep_ms(150);\n+        thread::sleep(Duration::from_millis(150));\n         let _right = table.forks[self.right].lock().unwrap();\n \n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n@@ -598,12 +601,12 @@ We now need to construct those `left` and `right` values, so we add them to\n ```rust,ignore\n fn eat(&self, table: &Table) {\n     let _left = table.forks[self.left].lock().unwrap();\n-    thread::sleep_ms(150);\n+    thread::sleep(Duration::from_millis(150));\n     let _right = table.forks[self.right].lock().unwrap();\n \n     println!(\"{} is eating.\", self.name);\n \n-    thread::sleep_ms(1000);\n+    thread::sleep(Duration::from_millis(1000));\n \n     println!(\"{} is done eating.\", self.name);\n }\n@@ -614,8 +617,8 @@ We have three new lines. We\u2019ve added an argument, `table`. We access the\n the fork at that particular index. That gives us access to the `Mutex` at that\n index, and we call `lock()` on it. If the mutex is currently being accessed by\n someone else, we\u2019ll block until it becomes available. We have also a call to\n-`thread::sleep_ms` between the moment first fork is picked and the moment the\n-second forked is picked, as the process  of picking up the fork is not\n+`thread::sleep` between the moment the first fork is picked and the moment the\n+second forked is picked, as the process of picking up the fork is not\n immediate.\n \n The call to `lock()` might fail, and if it does, we want to crash. In this"}, {"sha": "f61b4d8ed8d5ce55fc1596f6168fb385879bfa47", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -24,9 +24,29 @@ compiled program, and exists for the entire duration it runs. The `greeting`\n binding is a reference to this statically allocated string. String slices\n have a fixed size, and cannot be mutated.\n \n-A `String`, on the other hand, is a heap-allocated string. This string is\n-growable, and is also guaranteed to be UTF-8. `String`s are commonly created by\n-converting from a string slice using the `to_string` method.\n+String literals can span multiple lines. There are two forms. The first will\n+include the newline and the leading spaces:\n+\n+```rust\n+let s = \"foo\n+    bar\";\n+\n+assert_eq!(\"foo\\n        bar\", s);\n+```\n+\n+The second, with a `\\`, does not trim the spaces:\n+\n+```rust\n+let s = \"foo\\\n+    bar\"; \n+\n+assert_eq!(\"foobar\", s);\n+```\n+\n+Rust has more than just `&str`s though. A `String`, is a heap-allocated string.\n+This string is growable, and is also guaranteed to be UTF-8. `String`s are\n+commonly created by converting from a string slice using the `to_string`\n+method.\n \n ```rust\n let mut s = \"Hello\".to_string(); // mut s: String"}, {"sha": "f835322ee716e24ee44b83e1a4ebd316a2760580", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -74,7 +74,9 @@ visualize what\u2019s going on with memory. Your operating system presents a view o\n memory to your program that\u2019s pretty simple: a huge list of addresses, from 0\n to a large number, representing how much RAM your computer has. For example, if\n you have a gigabyte of RAM, your addresses go from `0` to `1,073,741,823`. That\n-number comes from 2<sup>30</sup>, the number of bytes in a gigabyte.\n+number comes from 2<sup>30</sup>, the number of bytes in a gigabyte. [^gigabyte]\n+\n+[^gigabyte]: \u2018Gigabyte\u2019 can mean two things: 10^9, or 2^30. The SI standard resolved this by stating that \u2018gigabyte\u2019 is 10^9, and \u2018gibibyte\u2019 is 2^30. However, very few people use this terminology, and rely on context to differentiate. We follow in that tradition here.\n \n This memory is kind of like a giant array: addresses start at zero and go\n up to the final number. So here\u2019s a diagram of our first stack frame:"}, {"sha": "09dec375a69a54ef639cf9e666d48cad7ca7abb5", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -344,6 +344,11 @@ pub fn is_const_fn(cstore: &cstore::CStore, did: DefId) -> bool {\n     decoder::is_const_fn(&*cdata, did.index)\n }\n \n+pub fn is_static(cstore: &cstore::CStore, did: DefId) -> bool {\n+    let cdata = cstore.get_crate_data(did.krate);\n+    decoder::is_static(&*cdata, did.index)\n+}\n+\n pub fn is_impl(cstore: &cstore::CStore, did: DefId) -> bool {\n     let cdata = cstore.get_crate_data(did.krate);\n     decoder::is_impl(&*cdata, did.index)"}, {"sha": "b102213eff02153eb6c4575481705b41824c0265", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -1425,6 +1425,14 @@ pub fn is_const_fn(cdata: Cmd, id: DefIndex) -> bool {\n     }\n }\n \n+pub fn is_static(cdata: Cmd, id: DefIndex) -> bool {\n+    let item_doc = cdata.lookup_item(id);\n+    match item_family(item_doc) {\n+        ImmStatic | MutStatic => true,\n+        _ => false,\n+    }\n+}\n+\n pub fn is_impl(cdata: Cmd, id: DefIndex) -> bool {\n     let item_doc = cdata.lookup_item(id);\n     match item_family(item_doc) {"}, {"sha": "4a99f2142d790671b82091f101d6750963660a67", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -2875,7 +2875,8 @@ pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n         sess.cstore.iter_crate_data(|cnum, _| {\n             let syms = csearch::get_reachable_ids(&sess.cstore, cnum);\n             reachable_symbols.extend(syms.into_iter().filter(|did| {\n-                csearch::is_extern_fn(&sess.cstore, *did, shared_ccx.tcx())\n+                csearch::is_extern_fn(&sess.cstore, *did, shared_ccx.tcx()) ||\n+                csearch::is_static(&sess.cstore, *did)\n             }).map(|did| {\n                 csearch::get_symbol(&sess.cstore, did)\n             }));"}, {"sha": "e84b5509c50362d2a510d5ab4452d57325701882", "filename": "src/test/run-make/issue-14500/foo.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.c?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n extern void foo();\n+extern char FOO_STATIC;\n \n int main() {\n     foo();\n-    return 0;\n+    return (int)FOO_STATIC;\n }"}, {"sha": "a91d8d6a21df47e5045b80e4280e4c5763ddabb7", "filename": "src/test/run-make/issue-14500/foo.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-14500%2Ffoo.rs?ref=bb9b5f5edeb91fa7fc9bd7c220d69985e0175ba2", "patch": "@@ -10,3 +10,6 @@\n \n #[no_mangle]\n pub extern fn foo() {}\n+\n+#[no_mangle]\n+pub static FOO_STATIC: u8 = 0;"}]}