{"sha": "8b45c24b510e80a77c01881736ed0fad8770850e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDVjMjRiNTEwZTgwYTc3YzAxODgxNzM2ZWQwZmFkODc3MDg1MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-19T15:04:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-19T15:04:46Z"}, "message": "Auto merge of #45301 - ishitatsuyuki:llvm5-backport, r=alexcrichton\n\nBackport ThinLTO LLVM 5 fixes\n\nThis makes building nightly more convenient on Arch.", "tree": {"sha": "22b5d8d40a7cba536d9b850f85b384c6ef2f5c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b5d8d40a7cba536d9b850f85b384c6ef2f5c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b45c24b510e80a77c01881736ed0fad8770850e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b45c24b510e80a77c01881736ed0fad8770850e", "html_url": "https://github.com/rust-lang/rust/commit/8b45c24b510e80a77c01881736ed0fad8770850e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b45c24b510e80a77c01881736ed0fad8770850e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "html_url": "https://github.com/rust-lang/rust/commit/e3fb84e951e3c602d2dbbfebbd4ee275ac414893"}, {"sha": "3efa00365fc13f3145b143ee41b90fb5405b334f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efa00365fc13f3145b143ee41b90fb5405b334f", "html_url": "https://github.com/rust-lang/rust/commit/3efa00365fc13f3145b143ee41b90fb5405b334f"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "b397ad1e98f74e12ceb79eadf9f8403fd7bd7bee", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8b45c24b510e80a77c01881736ed0fad8770850e/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8b45c24b510e80a77c01881736ed0fad8770850e/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=8b45c24b510e80a77c01881736ed0fad8770850e", "patch": "@@ -26,11 +26,13 @@\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n #if LLVM_VERSION_GE(4, 0)\n-#include \"llvm/Object/ModuleSummaryIndexObjectFile.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n+#if LLVM_VERSION_LE(4, 0)\n+#include \"llvm/Object/ModuleSummaryIndexObjectFile.h\"\n+#endif\n #endif\n \n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n@@ -888,6 +890,33 @@ addPreservedGUID(const ModuleSummaryIndex &Index,\n     return;\n   Preserved.insert(GUID);\n \n+#if LLVM_VERSION_GE(5, 0)\n+  auto Info = Index.getValueInfo(GUID);\n+  if (!Info) {\n+    return;\n+  }\n+  for (auto &Summary : Info.getSummaryList()) {\n+    for (auto &Ref : Summary->refs()) {\n+      addPreservedGUID(Index, Preserved, Ref.getGUID());\n+    }\n+\n+    GlobalValueSummary *GVSummary = Summary.get();\n+    if (isa<FunctionSummary>(GVSummary)) {\n+      auto *FS = cast<FunctionSummary>(GVSummary);\n+      for (auto &Call: FS->calls()) {\n+        addPreservedGUID(Index, Preserved, Call.first.getGUID());\n+      }\n+      for (auto &GUID: FS->type_tests()) {\n+        addPreservedGUID(Index, Preserved, GUID);\n+      }\n+    }\n+    if (isa<AliasSummary>(GVSummary)) {\n+      auto *AS = cast<AliasSummary>(GVSummary);\n+      auto GUID = AS->getAliasee().getOriginalName();\n+      addPreservedGUID(Index, Preserved, GUID);\n+    }\n+  }\n+#else\n   auto SummaryList = Index.findGlobalValueSummaryList(GUID);\n   if (SummaryList == Index.end())\n     return;\n@@ -919,6 +948,7 @@ addPreservedGUID(const ModuleSummaryIndex &Index,\n       addPreservedGUID(Index, Preserved, GUID);\n     }\n   }\n+#endif\n }\n \n // The main entry point for creating the global ThinLTO analysis. The structure\n@@ -939,6 +969,12 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n \n     Ret->ModuleMap[module->identifier] = mem_buffer;\n \n+#if LLVM_VERSION_GE(5, 0)\n+    if (Error Err = readModuleSummaryIndex(mem_buffer, Ret->Index, i)) {\n+      LLVMRustSetLastError(toString(std::move(Err)).c_str());\n+      return nullptr;\n+    }\n+#else\n     Expected<std::unique_ptr<object::ModuleSummaryIndexObjectFile>> ObjOrErr =\n       object::ModuleSummaryIndexObjectFile::create(mem_buffer);\n     if (!ObjOrErr) {\n@@ -947,6 +983,7 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n     }\n     auto Index = (*ObjOrErr)->takeIndex();\n     Ret->Index.mergeFrom(std::move(Index), i);\n+#endif\n   }\n \n   // Collect for each module the list of function it defines (GUID -> Summary)\n@@ -965,6 +1002,15 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   // combined index\n   //\n   // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp`\n+#if LLVM_VERSION_GE(5, 0)\n+  computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n+  ComputeCrossModuleImport(\n+    Ret->Index,\n+    Ret->ModuleToDefinedGVSummaries,\n+    Ret->ImportLists,\n+    Ret->ExportLists\n+  );\n+#else\n   auto DeadSymbols = computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n   ComputeCrossModuleImport(\n     Ret->Index,\n@@ -973,6 +1019,7 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n     Ret->ExportLists,\n     &DeadSymbols\n   );\n+#endif\n \n   // Resolve LinkOnce/Weak symbols, this has to be computed early be cause it\n   // impacts the caching.\n@@ -981,8 +1028,13 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   StringMap<std::map<GlobalValue::GUID, GlobalValue::LinkageTypes>> ResolvedODR;\n   DenseMap<GlobalValue::GUID, const GlobalValueSummary *> PrevailingCopy;\n   for (auto &I : Ret->Index) {\n+#if LLVM_VERSION_GE(5, 0)\n+    if (I.second.SummaryList.size() > 1)\n+      PrevailingCopy[I.first] = getFirstDefinitionForLinker(I.second.SummaryList);\n+#else\n     if (I.second.size() > 1)\n       PrevailingCopy[I.first] = getFirstDefinitionForLinker(I.second);\n+#endif\n   }\n   auto isPrevailing = [&](GlobalValue::GUID GUID, const GlobalValueSummary *S) {\n     const auto &Prevailing = PrevailingCopy.find(GUID);"}]}