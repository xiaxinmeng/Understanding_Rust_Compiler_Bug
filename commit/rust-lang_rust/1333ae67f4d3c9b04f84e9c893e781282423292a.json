{"sha": "1333ae67f4d3c9b04f84e9c893e781282423292a", "node_id": "C_kwDOAAsO6NoAKDEzMzNhZTY3ZjRkM2M5YjA0Zjg0ZTljODkzZTc4MTI4MjQyMzI5MmE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-13T18:58:19Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-15T07:24:48Z"}, "message": "Remove trailing semicolon from macro call span", "tree": {"sha": "4465c19413af76259db4a478d9f3204d932aca39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4465c19413af76259db4a478d9f3204d932aca39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1333ae67f4d3c9b04f84e9c893e781282423292a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1333ae67f4d3c9b04f84e9c893e781282423292a", "html_url": "https://github.com/rust-lang/rust/commit/1333ae67f4d3c9b04f84e9c893e781282423292a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1333ae67f4d3c9b04f84e9c893e781282423292a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75a734a43546911f1365c604c5d2c7383d98a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75a734a43546911f1365c604c5d2c7383d98a89", "html_url": "https://github.com/rust-lang/rust/commit/c75a734a43546911f1365c604c5d2c7383d98a89"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "f548e2848a771b143f1c3d99694459d3cd5047b8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1333ae67f4d3c9b04f84e9c893e781282423292a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1333ae67f4d3c9b04f84e9c893e781282423292a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=1333ae67f4d3c9b04f84e9c893e781282423292a", "patch": "@@ -1024,12 +1024,10 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         placeholder(fragment_kind, NodeId::placeholder_from_expn_id(expn_id), vis)\n     }\n \n-    fn collect_bang(\n-        &mut self,\n-        mac: ast::MacCall,\n-        span: Span,\n-        kind: AstFragmentKind,\n-    ) -> AstFragment {\n+    fn collect_bang(&mut self, mac: ast::MacCall, kind: AstFragmentKind) -> AstFragment {\n+        // cache the macro call span so that it can be\n+        // easily adjusted for incremental compilation\n+        let span = mac.span();\n         self.collect(kind, InvocationKind::Bang { mac, span })\n     }\n \n@@ -1216,7 +1214,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n             if let ast::ExprKind::MacCall(mac) = expr.kind {\n                 self.check_attributes(&expr.attrs, &mac);\n-                self.collect_bang(mac, expr.span, AstFragmentKind::Expr).make_expr().into_inner()\n+                self.collect_bang(mac, AstFragmentKind::Expr).make_expr().into_inner()\n             } else {\n                 assign_id!(self, &mut expr.id, || {\n                     ensure_sufficient_stack(|| noop_visit_expr(&mut expr, self));\n@@ -1312,7 +1310,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n             if let ast::ExprKind::MacCall(mac) = expr.kind {\n                 self.check_attributes(&expr.attrs, &mac);\n-                self.collect_bang(mac, expr.span, AstFragmentKind::OptExpr)\n+                self.collect_bang(mac, AstFragmentKind::OptExpr)\n                     .make_opt_expr()\n                     .map(|expr| expr.into_inner())\n             } else {\n@@ -1333,9 +1331,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         visit_clobber(pat, |mut pat| match mem::replace(&mut pat.kind, PatKind::Wild) {\n-            PatKind::MacCall(mac) => {\n-                self.collect_bang(mac, pat.span, AstFragmentKind::Pat).make_pat()\n-            }\n+            PatKind::MacCall(mac) => self.collect_bang(mac, AstFragmentKind::Pat).make_pat(),\n             _ => unreachable!(),\n         });\n     }\n@@ -1354,12 +1350,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     .make_stmts();\n             }\n \n-            let span = stmt.span;\n             match self.take_stmt_bang(stmt) {\n                 Ok((add_semicolon, mac, attrs)) => {\n                     self.check_attributes(&attrs, &mac);\n-                    let mut stmts =\n-                        self.collect_bang(mac, span, AstFragmentKind::Stmts).make_stmts();\n+                    let mut stmts = self.collect_bang(mac, AstFragmentKind::Stmts).make_stmts();\n \n                     // If this is a macro invocation with a semicolon, then apply that\n                     // semicolon to the final statement produced by expansion.\n@@ -1427,7 +1421,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 item.attrs = attrs;\n                 item.and_then(|item| match item.kind {\n                     ItemKind::MacCall(mac) => {\n-                        self.collect_bang(mac, span, AstFragmentKind::Items).make_items()\n+                        self.collect_bang(mac, AstFragmentKind::Items).make_items()\n                     }\n                     _ => unreachable!(),\n                 })\n@@ -1536,9 +1530,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             ast::AssocItemKind::MacCall(ref mac) => {\n                 self.check_attributes(&item.attrs, &mac);\n                 item.and_then(|item| match item.kind {\n-                    ast::AssocItemKind::MacCall(mac) => self\n-                        .collect_bang(mac, item.span, AstFragmentKind::TraitItems)\n-                        .make_trait_items(),\n+                    ast::AssocItemKind::MacCall(mac) => {\n+                        self.collect_bang(mac, AstFragmentKind::TraitItems).make_trait_items()\n+                    }\n                     _ => unreachable!(),\n                 })\n             }\n@@ -1561,9 +1555,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             ast::AssocItemKind::MacCall(ref mac) => {\n                 self.check_attributes(&item.attrs, &mac);\n                 item.and_then(|item| match item.kind {\n-                    ast::AssocItemKind::MacCall(mac) => self\n-                        .collect_bang(mac, item.span, AstFragmentKind::ImplItems)\n-                        .make_impl_items(),\n+                    ast::AssocItemKind::MacCall(mac) => {\n+                        self.collect_bang(mac, AstFragmentKind::ImplItems).make_impl_items()\n+                    }\n                     _ => unreachable!(),\n                 })\n             }\n@@ -1580,9 +1574,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         };\n \n         visit_clobber(ty, |mut ty| match mem::replace(&mut ty.kind, ast::TyKind::Err) {\n-            ast::TyKind::MacCall(mac) => {\n-                self.collect_bang(mac, ty.span, AstFragmentKind::Ty).make_ty()\n-            }\n+            ast::TyKind::MacCall(mac) => self.collect_bang(mac, AstFragmentKind::Ty).make_ty(),\n             _ => unreachable!(),\n         });\n     }\n@@ -1607,9 +1599,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             ast::ForeignItemKind::MacCall(ref mac) => {\n                 self.check_attributes(&foreign_item.attrs, &mac);\n                 foreign_item.and_then(|item| match item.kind {\n-                    ast::ForeignItemKind::MacCall(mac) => self\n-                        .collect_bang(mac, item.span, AstFragmentKind::ForeignItems)\n-                        .make_foreign_items(),\n+                    ast::ForeignItemKind::MacCall(mac) => {\n+                        self.collect_bang(mac, AstFragmentKind::ForeignItems).make_foreign_items()\n+                    }\n                     _ => unreachable!(),\n                 })\n             }"}]}