{"sha": "e47fec56dd438c416ce45b06c9b3b23103c4ee3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0N2ZlYzU2ZGQ0MzhjNDE2Y2U0NWIwNmM5YjNiMjMxMDNjNGVlM2E=", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2019-11-09T18:43:11Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-01-09T18:41:40Z"}, "message": "Make Layout::new const", "tree": {"sha": "493d459085ad3cebc4040aceeacec705ce6782e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/493d459085ad3cebc4040aceeacec705ce6782e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47fec56dd438c416ce45b06c9b3b23103c4ee3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47fec56dd438c416ce45b06c9b3b23103c4ee3a", "html_url": "https://github.com/rust-lang/rust/commit/e47fec56dd438c416ce45b06c9b3b23103c4ee3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47fec56dd438c416ce45b06c9b3b23103c4ee3a/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c404ce689f7692f2c9b1df51803faf88ba11d2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c404ce689f7692f2c9b1df51803faf88ba11d2e8", "html_url": "https://github.com/rust-lang/rust/commit/c404ce689f7692f2c9b1df51803faf88ba11d2e8"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "37672888d012754c5a7dfd0baab9b11cc70f7168", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e47fec56dd438c416ce45b06c9b3b23103c4ee3a/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47fec56dd438c416ce45b06c9b3b23103c4ee3a/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=e47fec56dd438c416ce45b06c9b3b23103c4ee3a", "patch": "@@ -17,7 +17,7 @@ use crate::usize;\n #[derive(Debug)]\n pub struct Excess(pub NonNull<u8>, pub usize);\n \n-fn size_align<T>() -> (usize, usize) {\n+const fn size_align<T>() -> (usize, usize) {\n     (mem::size_of::<T>(), mem::align_of::<T>())\n }\n \n@@ -121,13 +121,12 @@ impl Layout {\n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n-    pub fn new<T>() -> Self {\n+    pub const fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n         // Note that the align is guaranteed by rustc to be a power of two and\n         // the size+align combo is guaranteed to fit in our address space. As a\n         // result use the unchecked constructor here to avoid inserting code\n         // that panics if it isn't optimized well enough.\n-        debug_assert!(Layout::from_size_align(size, align).is_ok());\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n "}]}