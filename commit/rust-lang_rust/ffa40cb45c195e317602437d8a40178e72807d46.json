{"sha": "ffa40cb45c195e317602437d8a40178e72807d46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTQwY2I0NWMxOTVlMzE3NjAyNDM3ZDhhNDAxNzhlNzI4MDdkNDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T22:08:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T22:08:20Z"}, "message": "address review comments", "tree": {"sha": "8eac50ad63f555a86e184e6330c2ba829ee00d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eac50ad63f555a86e184e6330c2ba829ee00d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa40cb45c195e317602437d8a40178e72807d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa40cb45c195e317602437d8a40178e72807d46", "html_url": "https://github.com/rust-lang/rust/commit/ffa40cb45c195e317602437d8a40178e72807d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa40cb45c195e317602437d8a40178e72807d46/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "369058eacde8ffdfeed9b362b10720799729a835", "url": "https://api.github.com/repos/rust-lang/rust/commits/369058eacde8ffdfeed9b362b10720799729a835", "html_url": "https://github.com/rust-lang/rust/commit/369058eacde8ffdfeed9b362b10720799729a835"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "703a0dae6331931892cc2cac62c30922d8ed6473", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ffa40cb45c195e317602437d8a40178e72807d46/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa40cb45c195e317602437d8a40178e72807d46/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ffa40cb45c195e317602437d8a40178e72807d46", "patch": "@@ -3474,37 +3474,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             // If this `if` expr is the parent's function return expr, the cause of the type\n             // coercion is the return type, point at it. (#25228)\n-            let mut ret_reason = None;\n-            if let Node::Block(block) = self.tcx.hir().get_by_hir_id(\n-                self.tcx.hir().get_parent_node_by_hir_id(\n-                    self.tcx.hir().get_parent_node_by_hir_id(then_expr.hir_id),\n-                ),\n-            ) {\n-                // check that the body's parent is an fn\n-                let parent = self.tcx.hir().get_by_hir_id(\n-                    self.tcx.hir().get_parent_node_by_hir_id(\n-                        self.tcx.hir().get_parent_node_by_hir_id(block.hir_id),\n-                    ),\n-                );\n-                if let (Some(expr), Node::Item(hir::Item {\n-                    node: hir::ItemKind::Fn(..), ..\n-                })) = (&block.expr, parent) {\n-                    // check that the `if` expr without `else` is the fn body's expr\n-                    if expr.span == sp {\n-                        ret_reason = self.get_fn_decl(then_expr.hir_id).map(|(fn_decl, _)| (\n-                            fn_decl.output.span(),\n-                            format!(\"found `{}` because of this return type\", fn_decl.output),\n-                        ));\n-                    }\n-                }\n-            }\n+            let ret_reason = self.maybe_get_coercion_reason(then_expr.hir_id, sp);\n+\n             let else_cause = self.cause(sp, ObligationCauseCode::IfExpressionWithNoElse);\n             coerce.coerce_forced_unit(self, &else_cause, &mut |err| {\n                 if let Some((sp, msg)) = &ret_reason {\n                     err.span_label(*sp, msg.as_str());\n                 }\n-                err.note(\"`if` expressions without `else` must evaluate to `()`\");\n-            }, true);\n+                err.note(\"`if` expressions without `else` evaluate to `()`\");\n+                err.help(\"consider adding an `else` block that evaluates to the expected type\");\n+            }, ret_reason.is_none());\n \n             // If the condition is false we can't diverge.\n             self.diverges.set(cond_diverges);\n@@ -3518,6 +3497,33 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n+        if let Node::Block(block) = self.tcx.hir().get_by_hir_id(\n+            self.tcx.hir().get_parent_node_by_hir_id(\n+                self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n+            ),\n+        ) {\n+            // check that the body's parent is an fn\n+            let parent = self.tcx.hir().get_by_hir_id(\n+                self.tcx.hir().get_parent_node_by_hir_id(\n+                    self.tcx.hir().get_parent_node_by_hir_id(block.hir_id),\n+                ),\n+            );\n+            if let (Some(expr), Node::Item(hir::Item {\n+                node: hir::ItemKind::Fn(..), ..\n+            })) = (&block.expr, parent) {\n+                // check that the `if` expr without `else` is the fn body's expr\n+                if expr.span == sp {\n+                    return self.get_fn_decl(hir_id).map(|(fn_decl, _)| (\n+                        fn_decl.output.span(),\n+                        format!(\"expected `{}` because of this return type\", fn_decl.output),\n+                    ));\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n     // Check field access expressions\n     fn check_field(&self,\n                    expr: &'gcx hir::Expr,"}, {"sha": "062e0b9c44d795f3d128abd903b0f5034a92c552", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=ffa40cb45c195e317602437d8a40178e72807d46", "patch": "@@ -2,15 +2,16 @@ error[E0317]: if may be missing an else clause\n   --> $DIR/if-without-else-as-fn-expr.rs:2:5\n    |\n LL |   fn foo(bar: usize) -> usize {\n-   |                         ----- found `usize` because of this return type\n+   |                         ----- expected `usize` because of this return type\n LL | /     if bar % 5 == 0 {\n LL | |         return 3;\n LL | |     }\n-   | |_____^ expected (), found usize\n+   | |_____^ expected usize, found ()\n    |\n-   = note: expected type `()`\n-              found type `usize`\n-   = note: `if` expressions without `else` must evaluate to `()`\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n \n error: aborting due to previous error\n "}, {"sha": "cb1df141bcb8db815c33f0856d0bc538d29eab79", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=ffa40cb45c195e317602437d8a40178e72807d46", "patch": "@@ -6,7 +6,8 @@ LL |     let a = if true { true };\n    |\n    = note: expected type `()`\n               found type `bool`\n-   = note: `if` expressions without `else` must evaluate to `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n \n error: aborting due to previous error\n "}, {"sha": "53397c8ec90b931bb23eaf3032ccecce83e5545b", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=ffa40cb45c195e317602437d8a40178e72807d46", "patch": "@@ -13,7 +13,8 @@ LL | |     };\n    |\n    = note: expected type `()`\n               found type `{integer}`\n-   = note: `if` expressions without `else` must evaluate to `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n \n error: aborting due to previous error\n "}, {"sha": "323f5ac6547a09bd4a7668dc682be781ad0c69ec", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffa40cb45c195e317602437d8a40178e72807d46/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=ffa40cb45c195e317602437d8a40178e72807d46", "patch": "@@ -6,7 +6,8 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: expected type `()`\n               found type `isize`\n-   = note: `if` expressions without `else` must evaluate to `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}]}