{"sha": "cbd561d41f61201decae3adb45fe827d30aa96ec", "node_id": "C_kwDOAAsO6NoAKGNiZDU2MWQ0MWY2MTIwMWRlY2FlM2FkYjQ1ZmU4MjdkMzBhYTk2ZWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-17T10:01:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-17T10:01:07Z"}, "message": "Rollup merge of #98441 - calebzulawski:simd_as, r=oli-obk\n\nImplement simd_as for pointers\n\nExpands `simd_as` (and `simd_cast`) to handle pointer-to-pointer, pointer-to-integer, and integer-to-pointer conversions.\n\ncc ``@programmerjake`` ``@thomcc``", "tree": {"sha": "61f8f4dce1a826fd0cb071559ab21f7fa925c8b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f8f4dce1a826fd0cb071559ab21f7fa925c8b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd561d41f61201decae3adb45fe827d30aa96ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjJZrjCRBK7hj4Ov3rIwAAdTAIAJ+REzfwKBxbjedOXBOTaja8\nJwxya2//jlkab1Rxoia9P/lMkTG0PXaSivou9IzXc/N93FJ7XN9l11vTRiTXMquY\n+rEYpEtcuwP+nUJ7+LE4KTJ9NxTbG13jh4qWYw5J7CTApj7P022jiJ1UOaOp38Tp\nJpPbKzpgMBitW+6oA6C1oIznDaf1ePmrW7xheRKDMkQgdPYoqgem9z4VAtIjUncx\nEFaIm/bkOhdGoDqxr6ekgwfS9PQCecJLStEYtts0ffi0k/LiWSaEFan4lJwMYcYZ\nn44f6/0Mw7Z3Q0XBrqAlj0bVJoFVqAjb7BgmZ6Qr7s7h9VWw9OCYidAbbSK3hcg=\n=vKMF\n-----END PGP SIGNATURE-----\n", "payload": "tree 61f8f4dce1a826fd0cb071559ab21f7fa925c8b8\nparent 3ad81e0dd854d0edaeea7429fba6c2255c6a27ef\nparent 3f2ce0624dfed866f758521b225e26c00b3250d8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663408867 +0530\ncommitter GitHub <noreply@github.com> 1663408867 +0530\n\nRollup merge of #98441 - calebzulawski:simd_as, r=oli-obk\n\nImplement simd_as for pointers\n\nExpands `simd_as` (and `simd_cast`) to handle pointer-to-pointer, pointer-to-integer, and integer-to-pointer conversions.\n\ncc ``@programmerjake`` ``@thomcc``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd561d41f61201decae3adb45fe827d30aa96ec", "html_url": "https://github.com/rust-lang/rust/commit/cbd561d41f61201decae3adb45fe827d30aa96ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd561d41f61201decae3adb45fe827d30aa96ec/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad81e0dd854d0edaeea7429fba6c2255c6a27ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad81e0dd854d0edaeea7429fba6c2255c6a27ef", "html_url": "https://github.com/rust-lang/rust/commit/3ad81e0dd854d0edaeea7429fba6c2255c6a27ef"}, {"sha": "3f2ce0624dfed866f758521b225e26c00b3250d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ce0624dfed866f758521b225e26c00b3250d8", "html_url": "https://github.com/rust-lang/rust/commit/3f2ce0624dfed866f758521b225e26c00b3250d8"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "a640de42a6a86a3df51a5e5c3f48f7ae56acad91", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/cbd561d41f61201decae3adb45fe827d30aa96ec/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd561d41f61201decae3adb45fe827d30aa96ec/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=cbd561d41f61201decae3adb45fe827d30aa96ec", "patch": "@@ -1705,6 +1705,97 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n     bitwise_red!(simd_reduce_all: vector_reduce_and, true);\n     bitwise_red!(simd_reduce_any: vector_reduce_or, true);\n \n+    if name == sym::simd_cast_ptr {\n+        require_simd!(ret_ty, \"return\");\n+        let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n+        require!(\n+            in_len == out_len,\n+            \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+            in_len,\n+            in_ty,\n+            ret_ty,\n+            out_len\n+        );\n+\n+        match in_elem.kind() {\n+            ty::RawPtr(p) => {\n+                let (metadata, check_sized) = p.ty.ptr_metadata_ty(bx.tcx, |ty| {\n+                    bx.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), ty)\n+                });\n+                assert!(!check_sized); // we are in codegen, so we shouldn't see these types\n+                require!(metadata.is_unit(), \"cannot cast fat pointer `{}`\", in_elem)\n+            }\n+            _ => return_error!(\"expected pointer, got `{}`\", in_elem),\n+        }\n+        match out_elem.kind() {\n+            ty::RawPtr(p) => {\n+                let (metadata, check_sized) = p.ty.ptr_metadata_ty(bx.tcx, |ty| {\n+                    bx.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), ty)\n+                });\n+                assert!(!check_sized); // we are in codegen, so we shouldn't see these types\n+                require!(metadata.is_unit(), \"cannot cast to fat pointer `{}`\", out_elem)\n+            }\n+            _ => return_error!(\"expected pointer, got `{}`\", out_elem),\n+        }\n+\n+        if in_elem == out_elem {\n+            return Ok(args[0].immediate());\n+        } else {\n+            return Ok(bx.pointercast(args[0].immediate(), llret_ty));\n+        }\n+    }\n+\n+    if name == sym::simd_expose_addr {\n+        require_simd!(ret_ty, \"return\");\n+        let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n+        require!(\n+            in_len == out_len,\n+            \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+            in_len,\n+            in_ty,\n+            ret_ty,\n+            out_len\n+        );\n+\n+        match in_elem.kind() {\n+            ty::RawPtr(_) => {}\n+            _ => return_error!(\"expected pointer, got `{}`\", in_elem),\n+        }\n+        match out_elem.kind() {\n+            ty::Uint(ty::UintTy::Usize) => {}\n+            _ => return_error!(\"expected `usize`, got `{}`\", out_elem),\n+        }\n+\n+        return Ok(bx.ptrtoint(args[0].immediate(), llret_ty));\n+    }\n+\n+    if name == sym::simd_from_exposed_addr {\n+        require_simd!(ret_ty, \"return\");\n+        let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n+        require!(\n+            in_len == out_len,\n+            \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+            in_len,\n+            in_ty,\n+            ret_ty,\n+            out_len\n+        );\n+\n+        match in_elem.kind() {\n+            ty::Uint(ty::UintTy::Usize) => {}\n+            _ => return_error!(\"expected `usize`, got `{}`\", in_elem),\n+        }\n+        match out_elem.kind() {\n+            ty::RawPtr(_) => {}\n+            _ => return_error!(\"expected pointer, got `{}`\", out_elem),\n+        }\n+\n+        return Ok(bx.inttoptr(args[0].immediate(), llret_ty));\n+    }\n+\n     if name == sym::simd_cast || name == sym::simd_as {\n         require_simd!(ret_ty, \"return\");\n         let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());"}, {"sha": "ae4d1a4635bee090aaaaf05656b5ca678def6447", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd561d41f61201decae3adb45fe827d30aa96ec/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd561d41f61201decae3adb45fe827d30aa96ec/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cbd561d41f61201decae3adb45fe827d30aa96ec", "patch": "@@ -1322,9 +1322,11 @@ symbols! {\n         simd_as,\n         simd_bitmask,\n         simd_cast,\n+        simd_cast_ptr,\n         simd_ceil,\n         simd_div,\n         simd_eq,\n+        simd_expose_addr,\n         simd_extract,\n         simd_fabs,\n         simd_fcos,\n@@ -1340,6 +1342,7 @@ symbols! {\n         simd_fmin,\n         simd_fpow,\n         simd_fpowi,\n+        simd_from_exposed_addr,\n         simd_fsin,\n         simd_fsqrt,\n         simd_gather,"}, {"sha": "c7425ff7865f7350411d7f8bd78d7abeecf42ae8", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd561d41f61201decae3adb45fe827d30aa96ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd561d41f61201decae3adb45fe827d30aa96ec/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=cbd561d41f61201decae3adb45fe827d30aa96ec", "patch": "@@ -477,7 +477,11 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         sym::simd_scatter => (3, vec![param(0), param(1), param(2)], tcx.mk_unit()),\n         sym::simd_insert => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         sym::simd_extract => (2, vec![param(0), tcx.types.u32], param(1)),\n-        sym::simd_cast | sym::simd_as => (2, vec![param(0)], param(1)),\n+        sym::simd_cast\n+        | sym::simd_as\n+        | sym::simd_cast_ptr\n+        | sym::simd_expose_addr\n+        | sym::simd_from_exposed_addr => (2, vec![param(0)], param(1)),\n         sym::simd_bitmask => (2, vec![param(0)], param(1)),\n         sym::simd_select | sym::simd_select_bitmask => {\n             (2, vec![param(0), param(1), param(1)], param(1))"}, {"sha": "1d13720bcd31e17e4689fe513bcbc14e2aabcfc1", "filename": "src/test/ui/simd/intrinsic/ptr-cast.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cbd561d41f61201decae3adb45fe827d30aa96ec/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd561d41f61201decae3adb45fe827d30aa96ec/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fptr-cast.rs?ref=cbd561d41f61201decae3adb45fe827d30aa96ec", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_cast_ptr<T, U>(x: T) -> U;\n+    fn simd_expose_addr<T, U>(x: T) -> U;\n+    fn simd_from_exposed_addr<T, U>(x: T) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct V<T>([T; 2]);\n+\n+fn main() {\n+    unsafe {\n+        let mut foo = 4i8;\n+        let ptr = &mut foo as *mut i8;\n+\n+        let ptrs = V::<*mut i8>([ptr, core::ptr::null_mut()]);\n+\n+        // change constness and type\n+        let const_ptrs: V<*const u8> = simd_cast_ptr(ptrs);\n+\n+        let exposed_addr: V<usize> = simd_expose_addr(const_ptrs);\n+\n+        let from_exposed_addr: V<*mut i8> = simd_from_exposed_addr(exposed_addr);\n+\n+        assert!(const_ptrs.0 == [ptr as *const u8, core::ptr::null()]);\n+        assert!(exposed_addr.0 == [ptr as usize, 0]);\n+        assert!(from_exposed_addr.0 == ptrs.0);\n+    }\n+}"}]}