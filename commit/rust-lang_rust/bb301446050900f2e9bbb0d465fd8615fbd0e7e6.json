{"sha": "bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzAxNDQ2MDUwOTAwZjJlOWJiYjBkNDY1ZmQ4NjE1ZmJkMGU3ZTY=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-09-25T21:24:20Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-18T02:14:14Z"}, "message": "Lifted generics into TraitItem and ImplItem from MethodSig -- HIR now matches AST", "tree": {"sha": "726dbe41917bd6a7de63cdcc940e3a99044d3625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726dbe41917bd6a7de63cdcc940e3a99044d3625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "html_url": "https://github.com/rust-lang/rust/commit/bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892e4689efb163ab220ee353b15b70833b9baeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/892e4689efb163ab220ee353b15b70833b9baeb0", "html_url": "https://github.com/rust-lang/rust/commit/892e4689efb163ab220ee353b15b70833b9baeb0"}], "stats": {"total": 113, "additions": 42, "deletions": 71}, "files": [{"sha": "d99d7cd897b9fe2ea3aa3b9c46f9184880c3bc0c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -780,9 +780,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n         FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(_, sig, ..) => {\n-            visitor.visit_generics(&sig.generics);\n-        }\n+        FnKind::Method(..) |\n         FnKind::Closure(_) => {}\n     }\n }\n@@ -802,6 +800,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) {\n     visitor.visit_name(trait_item.span, trait_item.name);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n+    visitor.visit_generics(&trait_item.generics);\n     match trait_item.node {\n         TraitItemKind::Const(ref ty, default) => {\n             visitor.visit_id(trait_item.id);\n@@ -810,7 +809,6 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         }\n         TraitItemKind::Method(ref sig, TraitMethod::Required(ref names)) => {\n             visitor.visit_id(trait_item.id);\n-            visitor.visit_generics(&sig.generics);\n             visitor.visit_fn_decl(&sig.decl);\n             for name in names {\n                 visitor.visit_name(name.span, name.node);\n@@ -852,6 +850,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         ref vis,\n         ref defaultness,\n         ref attrs,\n+        ref generics,\n         ref node,\n         span\n     } = *impl_item;\n@@ -860,6 +859,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_vis(vis);\n     visitor.visit_defaultness(defaultness);\n     walk_list!(visitor, visit_attribute, attrs);\n+    visitor.visit_generics(generics);\n     match *node {\n         ImplItemKind::Const(ref ty, body) => {\n             visitor.visit_id(impl_item.id);"}, {"sha": "81da69a575c43725eb49802c28bb1dd4fce9f977", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -1539,6 +1539,7 @@ impl<'a> LoweringContext<'a> {\n                 hir_id,\n                 name: this.lower_ident(i.ident),\n                 attrs: this.lower_attrs(&i.attrs),\n+                generics: this.lower_generics(&i.generics),\n                 node: match i.node {\n                     TraitItemKind::Const(ref ty, ref default) => {\n                         hir::TraitItemKind::Const(this.lower_ty(ty),\n@@ -1548,15 +1549,15 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     TraitItemKind::Method(ref sig, None) => {\n                         let names = this.lower_fn_args_to_names(&sig.decl);\n-                        hir::TraitItemKind::Method(this.lower_method_sig(&i.generics, sig),\n+                        hir::TraitItemKind::Method(this.lower_method_sig(sig),\n                                                    hir::TraitMethod::Required(names))\n                     }\n                     TraitItemKind::Method(ref sig, Some(ref body)) => {\n                         let body_id = this.lower_body(Some(&sig.decl), |this| {\n                             let body = this.lower_block(body, false);\n                             this.expr_block(body, ThinVec::new())\n                         });\n-                        hir::TraitItemKind::Method(this.lower_method_sig(&i.generics, sig),\n+                        hir::TraitItemKind::Method(this.lower_method_sig(sig),\n                                                    hir::TraitMethod::Provided(body_id))\n                     }\n                     TraitItemKind::Type(ref bounds, ref default) => {\n@@ -1603,6 +1604,7 @@ impl<'a> LoweringContext<'a> {\n                 hir_id,\n                 name: this.lower_ident(i.ident),\n                 attrs: this.lower_attrs(&i.attrs),\n+                generics: this.lower_generics(&i.generics),\n                 vis: this.lower_visibility(&i.vis, None),\n                 defaultness: this.lower_defaultness(i.defaultness, true /* [1] */),\n                 node: match i.node {\n@@ -1615,7 +1617,7 @@ impl<'a> LoweringContext<'a> {\n                             let body = this.lower_block(body, false);\n                             this.expr_block(body, ThinVec::new())\n                         });\n-                        hir::ImplItemKind::Method(this.lower_method_sig(&i.generics, sig), body_id)\n+                        hir::ImplItemKind::Method(this.lower_method_sig(sig), body_id)\n                     }\n                     ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(this.lower_ty(ty)),\n                     ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n@@ -1727,9 +1729,8 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn lower_method_sig(&mut self, generics: &Generics, sig: &MethodSig) -> hir::MethodSig {\n+    fn lower_method_sig(&mut self, sig: &MethodSig) -> hir::MethodSig {\n         hir::MethodSig {\n-            generics: self.lower_generics(generics),\n             abi: sig.abi,\n             unsafety: self.lower_unsafety(sig.unsafety),\n             constness: self.lower_constness(sig.constness),"}, {"sha": "fb3fc8a2da4f3ed00ac5aea67fa24e33dfabc588", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -1295,7 +1295,6 @@ pub struct MethodSig {\n     pub constness: Constness,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n-    pub generics: Generics,\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -1316,6 +1315,7 @@ pub struct TraitItem {\n     pub name: Name,\n     pub hir_id: HirId,\n     pub attrs: HirVec<Attribute>,\n+    pub generics: Generics,\n     pub node: TraitItemKind,\n     pub span: Span,\n }\n@@ -1360,6 +1360,7 @@ pub struct ImplItem {\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n     pub attrs: HirVec<Attribute>,\n+    pub generics: Generics,\n     pub node: ImplItemKind,\n     pub span: Span,\n }"}, {"sha": "4eee9cbfc2d6e419ed6f95b0035da344902e0dd9", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -880,6 +880,7 @@ impl<'a> State<'a> {\n     pub fn print_method_sig(&mut self,\n                             name: ast::Name,\n                             m: &hir::MethodSig,\n+                            generics: &hir::Generics,\n                             vis: &hir::Visibility,\n                             arg_names: &[Spanned<ast::Name>],\n                             body_id: Option<hir::BodyId>)\n@@ -889,7 +890,7 @@ impl<'a> State<'a> {\n                       m.constness,\n                       m.abi,\n                       Some(name),\n-                      &m.generics,\n+                      generics,\n                       vis,\n                       arg_names,\n                       body_id)\n@@ -905,12 +906,12 @@ impl<'a> State<'a> {\n                 self.print_associated_const(ti.name, &ty, default, &hir::Inherited)?;\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n-                self.print_method_sig(ti.name, sig, &hir::Inherited, arg_names, None)?;\n+                self.print_method_sig(ti.name, sig, &ti.generics, &hir::Inherited, arg_names, None)?;\n                 self.s.word(\";\")?;\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ti.name, sig, &hir::Inherited, &[], Some(body))?;\n+                self.print_method_sig(ti.name, sig, &ti.generics, &hir::Inherited, &[], Some(body))?;\n                 self.nbsp()?;\n                 self.end()?; // need to close a box\n                 self.end()?; // need to close a box\n@@ -938,7 +939,7 @@ impl<'a> State<'a> {\n             }\n             hir::ImplItemKind::Method(ref sig, body) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ii.name, sig, &ii.vis, &[], Some(body))?;\n+                self.print_method_sig(ii.name, sig, &ii.generics, &ii.vis, &[], Some(body))?;\n                 self.nbsp()?;\n                 self.end()?; // need to close a box\n                 self.end()?; // need to close a box"}, {"sha": "994f0bd16b1f85094756bdebacdd07cd6cc94ecc", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -232,8 +232,7 @@ impl_stable_hash_for!(struct hir::MethodSig {\n     unsafety,\n     constness,\n     abi,\n-    decl,\n-    generics\n+    decl\n });\n \n impl_stable_hash_for!(struct hir::TypeBinding {\n@@ -709,13 +708,15 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::TraitItem {\n             hir_id: _,\n             name,\n             ref attrs,\n+            ref generics,\n             ref node,\n             span\n         } = *self;\n \n         hcx.hash_hir_item_like(attrs, |hcx| {\n             name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n         });\n@@ -744,6 +745,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItem {\n             ref vis,\n             defaultness,\n             ref attrs,\n+            ref generics,\n             ref node,\n             span\n         } = *self;\n@@ -753,6 +755,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItem {\n             vis.hash_stable(hcx, hasher);\n             defaultness.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n         });"}, {"sha": "2037bc01a5bc94a5bfe513a48f1b865e5fb3b0b9", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -58,11 +58,10 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n }\n \n fn method_might_be_inlined<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                     sig: &hir::MethodSig,\n                                      impl_item: &hir::ImplItem,\n                                      impl_src: DefId) -> bool {\n     if attr::requests_inline(&impl_item.attrs) ||\n-        generics_require_inlining(&sig.generics) {\n+        generics_require_inlining(&impl_item.generics) {\n         return true\n     }\n     if let Some(impl_node_id) = tcx.hir.as_local_node_id(impl_src) {\n@@ -176,8 +175,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Some(hir_map::NodeImplItem(impl_item)) => {\n                 match impl_item.node {\n                     hir::ImplItemKind::Const(..) => true,\n-                    hir::ImplItemKind::Method(ref sig, _) => {\n-                        if generics_require_inlining(&sig.generics) ||\n+                    hir::ImplItemKind::Method(..) => {\n+                        if generics_require_inlining(&impl_item.generics) ||\n                                 attr::requests_inline(&impl_item.attrs) {\n                             true\n                         } else {\n@@ -293,9 +292,9 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ImplItemKind::Const(_, body) => {\n                         self.visit_nested_body(body);\n                     }\n-                    hir::ImplItemKind::Method(ref sig, body) => {\n+                    hir::ImplItemKind::Method(_, body) => {\n                         let did = self.tcx.hir.get_parent_did(search_item);\n-                        if method_might_be_inlined(self.tcx, sig, impl_item, did) {\n+                        if method_might_be_inlined(self.tcx, impl_item, did) {\n                             self.visit_nested_body(body)\n                         }\n                     }"}, {"sha": "dc912f1c1b6165a918fdb708f4b330e258053f60", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -412,7 +412,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         if let hir::TraitItemKind::Method(ref sig, _) = trait_item.node {\n             self.visit_early_late(\n                 Some(self.hir_map.get_parent(trait_item.id)),\n-                &sig.decl, &sig.generics,\n+                &sig.decl, &trait_item.generics,\n                 |this| intravisit::walk_trait_item(this, trait_item))\n         } else {\n             intravisit::walk_trait_item(self, trait_item);\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n             self.visit_early_late(\n                 Some(self.hir_map.get_parent(impl_item.id)),\n-                &sig.decl, &sig.generics,\n+                &sig.decl, &impl_item.generics,\n                 |this| intravisit::walk_impl_item(this, impl_item))\n         } else {\n             intravisit::walk_impl_item(self, impl_item);"}, {"sha": "554a858bcc17342f4d67f63383e702cd1f0dc87d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -568,15 +568,11 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let num_trait_m_type_params = trait_m_generics.types.len();\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n-        let span = match tcx.hir.expect_impl_item(impl_m_node_id).node {\n-            ImplItemKind::Method(ref impl_m_sig, _) => {\n-                if impl_m_sig.generics.is_parameterized() {\n-                    impl_m_sig.generics.span\n-                } else {\n-                    impl_m_span\n-                }\n-            }\n-            _ => bug!(\"{:?} is not a method\", impl_m),\n+        let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);\n+        let span = if impl_m_item.generics.is_parameterized() {\n+            impl_m_item.generics.span\n+        } else {\n+            impl_m_span\n         };\n \n         let mut err = struct_span_err!(tcx.sess,"}, {"sha": "68ba1b4c44c81f61b35a6d6be0c3b0f478711d11", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb301446050900f2e9bbb0d465fd8615fbd0e7e6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bb301446050900f2e9bbb0d465fd8615fbd0e7e6", "patch": "@@ -261,19 +261,9 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let item_node_id = tcx.hir.as_local_node_id(item_def_id).unwrap();\n     let ast_generics = match tcx.hir.get(item_node_id) {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => return result\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n \n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => return result\n-            }\n-        }\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {\n@@ -818,12 +808,12 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match node {\n         hir_map::NodeTraitItem(item) => match item.node {\n             hir::TraitItemKind::Method(ref sig, _) =>\n-                has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n+                has_late_bound_regions(tcx, &item.generics, &sig.decl),\n             _ => None,\n         },\n         hir_map::NodeImplItem(item) => match item.node {\n             hir::ImplItemKind::Method(ref sig, _) =>\n-                has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n+                has_late_bound_regions(tcx, &item.generics, &sig.decl),\n             _ => None,\n         },\n         hir_map::NodeForeignItem(item) => match item.node {\n@@ -881,19 +871,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n \n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {\n@@ -1353,19 +1333,9 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n \n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {"}]}