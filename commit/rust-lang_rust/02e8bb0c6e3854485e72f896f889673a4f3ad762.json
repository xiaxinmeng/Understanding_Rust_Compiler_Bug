{"sha": "02e8bb0c6e3854485e72f896f889673a4f3ad762", "node_id": "C_kwDOAAsO6NoAKDAyZThiYjBjNmUzODU0NDg1ZTcyZjg5NmY4ODk2NzNhNGYzYWQ3NjI", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:57:57Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:57:57Z"}, "message": "Return Option", "tree": {"sha": "035b5094dadc84551576b593c30823353e89ff23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/035b5094dadc84551576b593c30823353e89ff23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e8bb0c6e3854485e72f896f889673a4f3ad762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e8bb0c6e3854485e72f896f889673a4f3ad762", "html_url": "https://github.com/rust-lang/rust/commit/02e8bb0c6e3854485e72f896f889673a4f3ad762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e8bb0c6e3854485e72f896f889673a4f3ad762/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de213c4fe10a001d1f55c76f157c1d9173694bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de213c4fe10a001d1f55c76f157c1d9173694bc", "html_url": "https://github.com/rust-lang/rust/commit/9de213c4fe10a001d1f55c76f157c1d9173694bc"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "6b49bb2631c19bff46535620f4bdf8c3a7590562", "filename": "crates/ide-db/src/tests/line_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02e8bb0c6e3854485e72f896f889673a4f3ad762/crates%2Fide-db%2Fsrc%2Ftests%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e8bb0c6e3854485e72f896f889673a4f3ad762/crates%2Fide-db%2Fsrc%2Ftests%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftests%2Fline_index.rs?ref=02e8bb0c6e3854485e72f896f889673a4f3ad762", "patch": "@@ -29,8 +29,8 @@ fn test_every_chars() {\n         assert_eq!(got_lin_col, lin_col);\n \n         for (enc, col) in [(WideEncoding::Utf16, col_utf16), (WideEncoding::Utf32, col_utf32)] {\n-            let wide_lin_col = line_index.to_wide(enc, lin_col);\n-            let got_lin_col = line_index.to_utf8(enc, wide_lin_col);\n+            let wide_lin_col = line_index.to_wide(enc, lin_col).unwrap();\n+            let got_lin_col = line_index.to_utf8(enc, wide_lin_col).unwrap();\n             assert_eq!(got_lin_col, lin_col);\n             assert_eq!(wide_lin_col.col, col)\n         }"}, {"sha": "cd74a5500d0a9d47cb609cbbd0caa41086d0e9b4", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02e8bb0c6e3854485e72f896f889673a4f3ad762/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e8bb0c6e3854485e72f896f889673a4f3ad762/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=02e8bb0c6e3854485e72f896f889673a4f3ad762", "patch": "@@ -31,7 +31,10 @@ pub(crate) fn offset(line_index: &LineIndex, position: lsp_types::Position) -> R\n         PositionEncoding::Utf8 => LineCol { line: position.line, col: position.character },\n         PositionEncoding::Wide(enc) => {\n             let line_col = WideLineCol { line: position.line, col: position.character };\n-            line_index.index.to_utf8(enc, line_col)\n+            line_index\n+                .index\n+                .to_utf8(enc, line_col)\n+                .ok_or_else(|| format_err!(\"Invalid wide col offset\"))?\n         }\n     };\n     let text_size ="}, {"sha": "b9d853e202a2db5438585808a370401a0a1043f1", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02e8bb0c6e3854485e72f896f889673a4f3ad762/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e8bb0c6e3854485e72f896f889673a4f3ad762/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=02e8bb0c6e3854485e72f896f889673a4f3ad762", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::P\n     match line_index.encoding {\n         PositionEncoding::Utf8 => lsp_types::Position::new(line_col.line, line_col.col),\n         PositionEncoding::Wide(enc) => {\n-            let line_col = line_index.index.to_wide(enc, line_col);\n+            let line_col = line_index.index.to_wide(enc, line_col).unwrap();\n             lsp_types::Position::new(line_col.line, line_col.col)\n         }\n     }"}, {"sha": "3c10fbe20c5e22e270939025b68a87709ea7a173", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02e8bb0c6e3854485e72f896f889673a4f3ad762/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e8bb0c6e3854485e72f896f889673a4f3ad762/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=02e8bb0c6e3854485e72f896f889673a4f3ad762", "patch": "@@ -156,15 +156,15 @@ impl LineIndex {\n     }\n \n     /// Transforms the `LineCol` with the given `WideEncoding` into a `WideLineCol`.\n-    pub fn to_wide(&self, enc: WideEncoding, line_col: LineCol) -> WideLineCol {\n+    pub fn to_wide(&self, enc: WideEncoding, line_col: LineCol) -> Option<WideLineCol> {\n         let col = self.utf8_to_wide_col(enc, line_col.line, line_col.col.into());\n-        WideLineCol { line: line_col.line, col: col as u32 }\n+        Some(WideLineCol { line: line_col.line, col: col as u32 })\n     }\n \n     /// Transforms the `WideLineCol` with the given `WideEncoding` into a `LineCol`.\n-    pub fn to_utf8(&self, enc: WideEncoding, line_col: WideLineCol) -> LineCol {\n+    pub fn to_utf8(&self, enc: WideEncoding, line_col: WideLineCol) -> Option<LineCol> {\n         let col = self.wide_to_utf8_col(enc, line_col.line, line_col.col);\n-        LineCol { line: line_col.line, col: col.into() }\n+        Some(LineCol { line: line_col.line, col: col.into() })\n     }\n \n     /// Returns an iterator over the ranges for the lines."}]}