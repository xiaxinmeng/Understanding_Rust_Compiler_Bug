{"sha": "b65c0a5893e0ed88119a00062ae26e86375e4883", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NWMwYTU4OTNlMGVkODgxMTlhMDAwNjJhZTI2ZTg2Mzc1ZTQ4ODM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-13T16:56:14Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-13T17:05:46Z"}, "message": "Expose `find_insert_use_container`", "tree": {"sha": "82af43903281d911054ee212fb821d2e891ae7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82af43903281d911054ee212fb821d2e891ae7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65c0a5893e0ed88119a00062ae26e86375e4883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65c0a5893e0ed88119a00062ae26e86375e4883", "html_url": "https://github.com/rust-lang/rust/commit/b65c0a5893e0ed88119a00062ae26e86375e4883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65c0a5893e0ed88119a00062ae26e86375e4883/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9eb54c617f3712e3affaa9ab56bc9bfb21bf728", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9eb54c617f3712e3affaa9ab56bc9bfb21bf728", "html_url": "https://github.com/rust-lang/rust/commit/e9eb54c617f3712e3affaa9ab56bc9bfb21bf728"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "c1ff0de7b0b8afca5ef6941fd73e69c9152435a3", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65c0a5893e0ed88119a00062ae26e86375e4883/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65c0a5893e0ed88119a00062ae26e86375e4883/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=b65c0a5893e0ed88119a00062ae26e86375e4883", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::FxHashSet;\n \n use crate::assist_config::SnippetCap;\n \n-pub(crate) use insert_use::insert_use_statement;\n+pub(crate) use insert_use::{find_insert_use_container, insert_use_statement};\n \n #[derive(Clone, Copy, Debug)]\n pub(crate) enum Cursor<'a> {"}, {"sha": "8c4f33e59ac9d9e217ca124926011a48a86274c7", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b65c0a5893e0ed88119a00062ae26e86375e4883/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65c0a5893e0ed88119a00062ae26e86375e4883/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=b65c0a5893e0ed88119a00062ae26e86375e4883", "patch": "@@ -12,6 +12,20 @@ use ra_syntax::{\n use ra_text_edit::TextEditBuilder;\n \n use crate::assist_context::AssistContext;\n+use either::Either;\n+\n+/// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n+pub(crate) fn find_insert_use_container(\n+    position: &SyntaxNode,\n+    ctx: &AssistContext,\n+) -> Option<Either<ast::ItemList, ast::SourceFile>> {\n+    ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n+        if let Some(module) = ast::Module::cast(n.clone()) {\n+            return module.item_list().map(|it| Either::Left(it));\n+        }\n+        Some(Either::Right(ast::SourceFile::cast(n)?))\n+    })\n+}\n \n /// Creates and inserts a use statement for the given path to import.\n /// The use statement is inserted in the scope most appropriate to the\n@@ -24,15 +38,11 @@ pub(crate) fn insert_use_statement(\n     builder: &mut TextEditBuilder,\n ) {\n     let target = path_to_import.to_string().split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n-    let container = ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n-        if let Some(module) = ast::Module::cast(n.clone()) {\n-            return module.item_list().map(|it| it.syntax().clone());\n-        }\n-        ast::SourceFile::cast(n).map(|it| it.syntax().clone())\n-    });\n+    let container = find_insert_use_container(position, ctx);\n \n     if let Some(container) = container {\n-        let action = best_action_for_target(container, position.clone(), &target);\n+        let syntax = container.either(|l| l.syntax().clone(), |r| r.syntax().clone());\n+        let action = best_action_for_target(syntax, position.clone(), &target);\n         make_assist(&action, &target, builder);\n     }\n }"}]}