{"sha": "4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNTljOTJiYzRkNGQ2ZTViMmI2NmM0Y2MwOGRkMWEwNTgyODNhMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-07T08:36:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-07T08:36:11Z"}, "message": "Auto merge of #40873 - cramertj:on-demandify-queries, r=nikomatsakis\n\nOn demandify reachability\n\ncc https://github.com/rust-lang/rust/issues/40746\n\nI tried following this guidance from #40746:\n> The following tasks currently execute before a tcx is built, but they could be easily converted into queries that are requested after tcx is built. The main reason they are the way they are was to avoid a gratuitious refcell (but using the refcell map seems fine)...\n\nbut the result of moving `region_maps` out of `TyCtxt` and into a query caused a lot of churn, and seems like it could potentially result in a rather large performance hit, since it means a dep-graph lookup on every use of `region_maps` (rather than just a field access). Possibly `TyCtxt` could store a `RefCell<Option<RegionMap>>` internally and use that to prevent repeat lookups, but that feels like it's duplicating the work of the dep-graph. @nikomatsakis What did you have in mind for this?", "tree": {"sha": "3ac2a85c507f549dfc2c8720419cad0fa64eacee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac2a85c507f549dfc2c8720419cad0fa64eacee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "html_url": "https://github.com/rust-lang/rust/commit/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c5197d4878253804d91e0c30ed92e0a965b663", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5197d4878253804d91e0c30ed92e0a965b663", "html_url": "https://github.com/rust-lang/rust/commit/b9c5197d4878253804d91e0c30ed92e0a965b663"}, {"sha": "aab2cca046670295bc1a430a8b1c23d755f9bd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aab2cca046670295bc1a430a8b1c23d755f9bd5a", "html_url": "https://github.com/rust-lang/rust/commit/aab2cca046670295bc1a430a8b1c23d755f9bd5a"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "e5dd48534a6a136ad452e09c9a01226dd1f7196e", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "patch": "@@ -15,11 +15,11 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use hir::def::Def;\n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, CrateNum};\n use ty::{self, TyCtxt};\n+use ty::maps::Providers;\n use middle::privacy;\n use session::config;\n use util::nodemap::{NodeSet, FxHashSet};\n@@ -362,7 +362,11 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n }\n \n pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n-    let _task = tcx.dep_graph.in_task(DepNode::Reachability);\n+    ty::queries::reachable_set::get(tcx, DUMMY_SP, LOCAL_CRATE)\n+}\n+\n+fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> NodeSet {\n+    debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n \n@@ -408,3 +412,10 @@ pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n     // Return the set of reachable symbols.\n     reachable_context.reachable_symbols\n }\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        reachable_set,\n+        ..*providers\n+    };\n+}"}, {"sha": "823bdc9e092ac8290801a25a1b8b3e7ac83a61dd", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "patch": "@@ -15,6 +15,7 @@ use middle::privacy::AccessLevels;\n use mir;\n use session::CompileResult;\n use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n+use util::nodemap::NodeSet;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n@@ -209,6 +210,11 @@ impl<'tcx> QueryDescription for queries::typeck_item_bodies<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::reachable_set<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        format!(\"reachability\")\n+    }\n+}\n \n macro_rules! define_maps {\n     (<$tcx:tt>\n@@ -440,6 +446,8 @@ define_maps! { <'tcx>\n     /// Performs the privacy check and computes \"access levels\".\n     pub privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n \n+    pub reachable_set: reachability_dep_node(CrateNum) -> NodeSet,\n+\n     pub mir_shims: mir_shim(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>\n }\n \n@@ -451,6 +459,10 @@ fn crate_inherent_impls_dep_node(_: CrateNum) -> DepNode<DefId> {\n     DepNode::Coherence\n }\n \n+fn reachability_dep_node(_: CrateNum) -> DepNode<DefId> {\n+    DepNode::Reachability\n+}\n+\n fn mir_shim(instance: ty::InstanceDef) -> DepNode<DefId> {\n     instance.dep_node()\n }"}, {"sha": "0fb386341a9f3e0b1f8ba70a0550777ef1f2efb6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4c59c92bc4d4d6e5b2b66c4cc08dd1a058283a0d", "patch": "@@ -889,6 +889,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     rustc_privacy::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n+    reachable::provide(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);"}]}