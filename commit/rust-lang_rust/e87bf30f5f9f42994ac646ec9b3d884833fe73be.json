{"sha": "e87bf30f5f9f42994ac646ec9b3d884833fe73be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4N2JmMzBmNWY5ZjQyOTk0YWM2NDZlYzliM2Q4ODQ4MzNmZTczYmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T14:54:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T14:58:31Z"}, "message": "propagate user-ascribes types down onto resulting bindings\n\nBut only in very simple cases.", "tree": {"sha": "e5806087cffa313f29e80d728dc193907cb685a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5806087cffa313f29e80d728dc193907cb685a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e87bf30f5f9f42994ac646ec9b3d884833fe73be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e87bf30f5f9f42994ac646ec9b3d884833fe73be", "html_url": "https://github.com/rust-lang/rust/commit/e87bf30f5f9f42994ac646ec9b3d884833fe73be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e87bf30f5f9f42994ac646ec9b3d884833fe73be/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5", "html_url": "https://github.com/rust-lang/rust/commit/a8710539cb75bac5bdd2b4bcebe292d6a9a444c5"}], "stats": {"total": 206, "additions": 171, "deletions": 35}, "files": [{"sha": "5f35c9fea0a337248d24634e744a0c6b5427fe99", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -24,6 +24,7 @@ impl_stable_hash_for!(enum mir::LocalKind { Var, Temp, Arg, ReturnPointer });\n impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     mutability,\n     ty,\n+    user_ty,\n     name,\n     source_info,\n     visibility_scope,"}, {"sha": "3450eec8082f37a2bf9885173b7cf438c50c697e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -640,6 +640,12 @@ pub struct LocalDecl<'tcx> {\n     /// Type of this local.\n     pub ty: Ty<'tcx>,\n \n+    /// If the user manually ascribed a type to this variable,\n+    /// e.g. via `let x: T`, then we carry that type here. The MIR\n+    /// borrow checker needs this information since it can affect\n+    /// region inference.\n+    pub user_ty: Option<CanonicalTy<'tcx>>,\n+\n     /// Name of the local, used in debuginfo and pretty-printing.\n     ///\n     /// Note that function arguments can also have this set to `Some(_)`\n@@ -802,6 +808,7 @@ impl<'tcx> LocalDecl<'tcx> {\n         LocalDecl {\n             mutability,\n             ty,\n+            user_ty: None,\n             name: None,\n             source_info: SourceInfo {\n                 span,\n@@ -821,6 +828,7 @@ impl<'tcx> LocalDecl<'tcx> {\n         LocalDecl {\n             mutability: Mutability::Mut,\n             ty: return_ty,\n+            user_ty: None,\n             source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE,\n@@ -2613,6 +2621,7 @@ BraceStructTypeFoldableImpl! {\n         is_user_variable,\n         internal,\n         ty,\n+        user_ty,\n         name,\n         source_info,\n         visibility_scope,"}, {"sha": "0beb5ac0a3cb51e42e9e053a2f751b264ae11715", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -721,6 +721,7 @@ macro_rules! make_mir_visitor {\n                 let LocalDecl {\n                     mutability: _,\n                     ref $($mutability)* ty,\n+                    ref $($mutability)* user_ty,\n                     name: _,\n                     ref $($mutability)* source_info,\n                     ref $($mutability)* visibility_scope,\n@@ -732,6 +733,9 @@ macro_rules! make_mir_visitor {\n                     local,\n                     source_info: *source_info,\n                 });\n+                if let Some(user_ty) = user_ty {\n+                    self.visit_canonical_ty(user_ty);\n+                }\n                 self.visit_source_info(source_info);\n                 self.visit_source_scope(visibility_scope);\n             }"}, {"sha": "de96539ec30f106a8e3df51123b22657992f89ce", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -275,6 +275,25 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n     fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n         self.super_local_decl(local, local_decl);\n         self.sanitize_type(local_decl, local_decl.ty);\n+\n+        if let Some(user_ty) = local_decl.user_ty {\n+            if let Err(terr) = self.cx.relate_type_and_user_type(\n+                local_decl.ty,\n+                ty::Variance::Invariant,\n+                user_ty,\n+                Locations::All,\n+            ) {\n+                span_mirbug!(\n+                    self,\n+                    local,\n+                    \"bad user type on variable {:?}: {:?} != {:?} ({:?})\",\n+                    local,\n+                    local_decl.ty,\n+                    local_decl.user_ty,\n+                    terr,\n+                );\n+            }\n+        }\n     }\n \n     fn visit_mir(&mut self, mir: &Mir<'tcx>) {"}, {"sha": "bfb6daee6041ea80f58e2a80a2bbf5e18ad284ac", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -143,7 +143,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             None, remainder_span, lint_level, slice::from_ref(&pattern),\n                             ArmHasGuard(false), None);\n \n-                        this.visit_bindings(&pattern, &mut |this, _, _, _, node, span, _| {\n+                        this.visit_bindings(&pattern, None, &mut |this, _, _, _, node, span, _, _| {\n                             this.storage_live_binding(block, node, span, OutsideGuard);\n                             this.schedule_drop_for_binding(node, span, OutsideGuard);\n                         })"}, {"sha": "5708ac4e6b50f7dfd58a57a374c9c8c87e366aa0", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -296,6 +296,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let ptr_temp = this.local_decls.push(LocalDecl {\n                         mutability: Mutability::Mut,\n                         ty: ptr_ty,\n+                        user_ty: None,\n                         name: None,\n                         source_info,\n                         visibility_scope: source_info.scope,"}, {"sha": "42510f5d71c526b55643e9a71dda1e518ea9c712", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -399,7 +399,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let num_patterns = patterns.len();\n         self.visit_bindings(\n             &patterns[0],\n-            &mut |this, mutability, name, mode, var, span, ty| {\n+            None,\n+            &mut |this, mutability, name, mode, var, span, ty, user_ty| {\n                 if visibility_scope.is_none() {\n                     visibility_scope =\n                         Some(this.new_source_scope(scope_span, LintLevel::Inherited, None));\n@@ -421,6 +422,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     num_patterns,\n                     var,\n                     ty,\n+                    user_ty,\n                     has_guard,\n                     opt_match_place.map(|(x, y)| (x.cloned(), y)),\n                     patterns[0].span,\n@@ -470,10 +472,21 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         );\n     }\n \n-    pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, f: &mut F)\n-    where\n-        F: FnMut(&mut Self, Mutability, Name, BindingMode, NodeId, Span, Ty<'tcx>),\n-    {\n+    pub fn visit_bindings(\n+        &mut self,\n+        pattern: &Pattern<'tcx>,\n+        pattern_user_ty: Option<CanonicalTy<'tcx>>,\n+        f: &mut impl FnMut(\n+            &mut Self,\n+            Mutability,\n+            Name,\n+            BindingMode,\n+            NodeId,\n+            Span,\n+            Ty<'tcx>,\n+            Option<CanonicalTy<'tcx>>,\n+        ),\n+    ) {\n         match *pattern.kind {\n             PatternKind::Binding {\n                 mutability,\n@@ -484,9 +497,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ref subpattern,\n                 ..\n             } => {\n-                f(self, mutability, name, mode, var, pattern.span, ty);\n+                f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty);\n                 if let Some(subpattern) = subpattern.as_ref() {\n-                    self.visit_bindings(subpattern, f);\n+                    self.visit_bindings(subpattern, pattern_user_ty, f);\n                 }\n             }\n             PatternKind::Array {\n@@ -499,21 +512,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ref slice,\n                 ref suffix,\n             } => {\n+                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n                 for subpattern in prefix.iter().chain(slice).chain(suffix) {\n-                    self.visit_bindings(subpattern, f);\n+                    self.visit_bindings(subpattern, None, f);\n                 }\n             }\n             PatternKind::Constant { .. } | PatternKind::Range { .. } | PatternKind::Wild => {}\n-            PatternKind::AscribeUserType { ref subpattern, .. }\n-            | PatternKind::Deref { ref subpattern } => {\n-                self.visit_bindings(subpattern, f);\n+            PatternKind::Deref { ref subpattern } => {\n+                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n+                self.visit_bindings(subpattern, None, f);\n+            }\n+            PatternKind::AscribeUserType { ref subpattern, user_ty } => {\n+                // This corresponds to something like\n+                //\n+                // ```\n+                // let (p1: T1): T2 = ...;\n+                // ```\n+                //\n+                // Not presently possible, though maybe someday.\n+                assert!(pattern_user_ty.is_none());\n+                self.visit_bindings(subpattern, Some(user_ty), f)\n             }\n             PatternKind::Leaf { ref subpatterns }\n             | PatternKind::Variant {\n                 ref subpatterns, ..\n             } => {\n+                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n                 for subpattern in subpatterns {\n-                    self.visit_bindings(&subpattern.pattern, f);\n+                    self.visit_bindings(&subpattern.pattern, None, f);\n                 }\n             }\n         }\n@@ -1375,6 +1401,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n+        user_var_ty: Option<CanonicalTy<'tcx>>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,\n@@ -1392,7 +1419,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n         let local = LocalDecl::<'tcx> {\n             mutability,\n-            ty: var_ty.clone(),\n+            ty: var_ty,\n+            user_ty: user_var_ty,\n             name: Some(name),\n             source_info,\n             visibility_scope,\n@@ -1424,6 +1452,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // See previous comment.\n                 mutability: Mutability::Not,\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n+                user_ty: None,\n                 name: Some(name),\n                 source_info,\n                 visibility_scope,"}, {"sha": "576c91a02b08daed34dd64fb31da5371800ad30a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -730,6 +730,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n+                user_ty: None,\n                 source_info,\n                 visibility_scope: source_info.scope,\n                 name,"}, {"sha": "f2c011ccee6a5704ffed97ff84204987d05caf1b", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -39,6 +39,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(if_while_or_patterns)]\n #![feature(try_from)]\n #![feature(reverse_bits)]\n+#![feature(underscore_imports)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "a6c0397568578b0de33e84872883ff45a19318cd", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -140,7 +140,9 @@ enum CallKind {\n fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n     let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n-        mutability, ty, name: None,\n+        mutability, ty,\n+        user_ty: None,\n+        name: None,\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,"}, {"sha": "f1f42768ce3248d2ef1483fd1d10a367b3574173", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -303,6 +303,7 @@ fn replace_result_variable<'tcx>(\n     let new_ret = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: ret_ty,\n+        user_ty: None,\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,\n@@ -656,6 +657,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     mir.local_decls[RETURN_PLACE] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_nil(),\n+        user_ty: None,\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,\n@@ -672,6 +674,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n             ty: gen_ty,\n             mutbl: hir::Mutability::MutMutable,\n         }),\n+        user_ty: None,\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,"}, {"sha": "710ccb2053b8492a6a27573026c85d3537fa6c1f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -17,6 +17,7 @@ use rustc::ty::item_path;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use std::fmt::Display;\n+use std::fmt::Write as _;\n use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n@@ -493,14 +494,18 @@ fn write_scope_tree(\n             };\n \n             let indent = indent + INDENT.len();\n-            let indented_var = format!(\n-                \"{0:1$}let {2}{3:?}: {4:?};\",\n+            let mut indented_var = format!(\n+                \"{0:1$}let {2}{3:?}: {4:?}\",\n                 INDENT,\n                 indent,\n                 mut_str,\n                 local,\n                 var.ty\n             );\n+            if let Some(user_ty) = var.user_ty {\n+                write!(indented_var, \" as {:?}\", user_ty).unwrap();\n+            }\n+            indented_var.push_str(\";\");\n             writeln!(\n                 w,\n                 \"{0:1$} // \\\"{2}\\\" in {3}\","}, {"sha": "94ac455c257afdef9f6ad153be763bfe4ddc4ced", "filename": "src/test/ui/nll/user-annotations/patterns.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -3,10 +3,41 @@\n #![feature(nll)]\n \n fn variable_no_initializer() {\n-    // FIXME: It is unclear to me whether this should be an error or not.\n-\n     let x = 22;\n     let y: &'static u32;\n+    y = &x; //~ ERROR\n+}\n+\n+fn tuple_no_initializer() {\n+    // FIXME(#47187): We are not propagating ascribed type through tuples.\n+\n+    let x = 22;\n+    let (y, z): (&'static u32, &'static u32);\n+    y = &x;\n+}\n+\n+fn ref_with_ascribed_static_type() -> u32 {\n+    // Check the behavior in some wacky cases.\n+    let x = 22;\n+    let y = &x; //~ ERROR\n+    let ref z: &'static u32 = y; //~ ERROR\n+    **z\n+}\n+\n+fn ref_with_ascribed_any_type() -> u32 {\n+    let x = 22;\n+    let y = &x;\n+    let ref z: &u32 = y;\n+    **z\n+}\n+\n+struct Single<T> { value: T }\n+\n+fn struct_no_initializer() {\n+    // FIXME(#47187): We are not propagating ascribed type through patterns.\n+\n+    let x = 22;\n+    let Single { value: y }: Single<&'static u32>;\n     y = &x;\n }\n \n@@ -39,8 +70,6 @@ fn pair_variable_with_initializer() {\n     let (y, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n }\n \n-struct Single<T> { value: T }\n-\n fn struct_single_field_variable_with_initializer() {\n     let x = 22;\n     let Single { value: y }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n@@ -73,7 +102,7 @@ fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n }\n \n fn static_to_a_to_static_through_tuple<'a>(x: &'a u32) -> &'static u32 {\n-    // FIXME: The fact that this type-checks is perhaps surprising.\n+    // FIXME(#47187): The fact that this type-checks is perhaps surprising.\n     // What happens is that the right-hand side is constrained to have\n     // type `&'a u32`, which is possible, because it has type\n     // `&'static u32`. The variable `y` is then forced to have type"}, {"sha": "c7c3df83d46012fbf4dbc698a39144a0fa609679", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e87bf30f5f9f42994ac646ec9b3d884833fe73be/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=e87bf30f5f9f42994ac646ec9b3d884833fe73be", "patch": "@@ -1,5 +1,37 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:15:27\n+  --> $DIR/patterns.rs:8:9\n+   |\n+LL |     y = &x; //~ ERROR\n+   |         ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:22:13\n+   |\n+LL |     let y = &x; //~ ERROR\n+   |             ^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/patterns.rs:23:9\n+   |\n+LL |     let ref z: &'static u32 = y; //~ ERROR\n+   |         ^^^^^ borrowed value does not live long enough\n+LL |     **z\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/patterns.rs:46:27\n    |\n LL |     let y: &'static u32 = &x; //~ ERROR\n    |                           ^^ borrowed value does not live long enough\n@@ -9,7 +41,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:20:27\n+  --> $DIR/patterns.rs:51:27\n    |\n LL |     let _: &'static u32 = &x; //~ ERROR\n    |                           ^^ borrowed value does not live long enough\n@@ -20,7 +52,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/patterns.rs:22:41\n+  --> $DIR/patterns.rs:53:41\n    |\n LL |     let _: Vec<&'static String> = vec![&String::new()];\n    |                                         ^^^^^^^^^^^^^ - temporary value only lives until here\n@@ -30,7 +62,7 @@ LL |     let _: Vec<&'static String> = vec![&String::new()];\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/patterns.rs:25:52\n+  --> $DIR/patterns.rs:56:52\n    |\n LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |                                                    ^^^^^^^^^^^^^      - temporary value only lives until here\n@@ -40,7 +72,7 @@ LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/patterns.rs:28:53\n+  --> $DIR/patterns.rs:59:53\n    |\n LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    |                                                     ^^^^^^^^^^^^^      - temporary value only lives until here\n@@ -50,7 +82,7 @@ LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:34:40\n+  --> $DIR/patterns.rs:65:40\n    |\n LL |     let (_, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n    |                                        ^^ borrowed value does not live long enough\n@@ -60,7 +92,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:39:40\n+  --> $DIR/patterns.rs:70:40\n    |\n LL |     let (y, _): (&'static u32, u32) = (&x, 44); //~ ERROR\n    |                                        ^^ borrowed value does not live long enough\n@@ -70,7 +102,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:46:69\n+  --> $DIR/patterns.rs:75:69\n    |\n LL |     let Single { value: y }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n    |                                                                     ^^ borrowed value does not live long enough\n@@ -80,7 +112,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:51:69\n+  --> $DIR/patterns.rs:80:69\n    |\n LL |     let Single { value: _ }: Single<&'static u32> = Single { value: &x }; //~ ERROR\n    |                                                                     ^^ borrowed value does not live long enough\n@@ -90,7 +122,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: `x` does not live long enough\n-  --> $DIR/patterns.rs:59:17\n+  --> $DIR/patterns.rs:88:17\n    |\n LL |         value1: &x, //~ ERROR\n    |                 ^^ borrowed value does not live long enough\n@@ -101,7 +133,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/patterns.rs:72:5\n+  --> $DIR/patterns.rs:101:5\n    |\n LL | fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n    |                                           -- lifetime `'a` defined here\n@@ -110,13 +142,13 @@ LL |     y //~ ERROR\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/patterns.rs:88:40\n+  --> $DIR/patterns.rs:117:40\n    |\n LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n    |                            -- lifetime `'a` defined here\n LL |     let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n    |                                        ^^^^^^^ requires that `'a` must outlive `'static`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}]}