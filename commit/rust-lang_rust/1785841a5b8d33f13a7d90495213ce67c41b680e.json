{"sha": "1785841a5b8d33f13a7d90495213ce67c41b680e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODU4NDFhNWI4ZDMzZjEzYTdkOTA0OTUyMTNjZTY3YzQxYjY4MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-12T03:50:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-12T03:50:14Z"}, "message": "auto merge of #8410 : luqmana/rust/mcpu, r=sanxiyn\n\nAdds `--target-cpu` flag which lets you choose a more specific target cpu instead of just passing the default, `generic`. It's more or less akin to `-mcpu`/`-mtune` in clang/gcc.", "tree": {"sha": "e74a1c6f43b1e714de1bdda3c729538aaf89b8c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e74a1c6f43b1e714de1bdda3c729538aaf89b8c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1785841a5b8d33f13a7d90495213ce67c41b680e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1785841a5b8d33f13a7d90495213ce67c41b680e", "html_url": "https://github.com/rust-lang/rust/commit/1785841a5b8d33f13a7d90495213ce67c41b680e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1785841a5b8d33f13a7d90495213ce67c41b680e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0679436381a57898ca7def194102ecd6f9709673", "url": "https://api.github.com/repos/rust-lang/rust/commits/0679436381a57898ca7def194102ecd6f9709673", "html_url": "https://github.com/rust-lang/rust/commit/0679436381a57898ca7def194102ecd6f9709673"}, {"sha": "fcfd6e7c798f621f40a3ccf5dd8a7f1b130fdfd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfd6e7c798f621f40a3ccf5dd8a7f1b130fdfd4", "html_url": "https://github.com/rust-lang/rust/commit/fcfd6e7c798f621f40a3ccf5dd8a7f1b130fdfd4"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "7320eced7e1be74ab9f2158bfa2a8b6e5e411f1a", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=1785841a5b8d33f13a7d90495213ce67c41b680e", "patch": "@@ -27,7 +27,8 @@ _rustc_opts_switches=(\n     --sysroot'[Override the system root]'\n     --test'[Build a test harness]'\n     --target'[Target triple cpu-manufacturer-kernel\\[-os\\] to compile]'\n-    --target-feature'[Target specific attributes (llc -mattr=help for detail)]'\n+    --target-cpu'[Select target processor (llc -mcpu=help for details)]'\n+    --target-feature'[Target specific attributes (llc -mattr=help for details)]'\n     --android-cross-path'[The path to the Android NDK]'\n     {-v,--version}'[Print version info and exit]'\n )"}, {"sha": "ed6eab5de193a93f6e700f7c01e6e4d4cddf1099", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=1785841a5b8d33f13a7d90495213ce67c41b680e", "patch": "@@ -69,6 +69,7 @@ pub fn llvm_err(sess: Session, msg: ~str) -> ! {\n pub fn WriteOutputFile(sess: Session,\n         PM: lib::llvm::PassManagerRef, M: ModuleRef,\n         Triple: &str,\n+        Cpu: &str,\n         Feature: &str,\n         Output: &str,\n         // FIXME: When #2334 is fixed, change\n@@ -78,19 +79,22 @@ pub fn WriteOutputFile(sess: Session,\n         EnableSegmentedStacks: bool) {\n     unsafe {\n         do Triple.to_c_str().with_ref |Triple| {\n-            do Feature.to_c_str().with_ref |Feature| {\n-                do Output.to_c_str().with_ref |Output| {\n-                    let result = llvm::LLVMRustWriteOutputFile(\n-                            PM,\n-                            M,\n-                            Triple,\n-                            Feature,\n-                            Output,\n-                            FileType,\n-                            OptLevel,\n-                            EnableSegmentedStacks);\n-                    if (!result) {\n-                        llvm_err(sess, ~\"Could not write output\");\n+            do Cpu.to_c_str().with_ref |Cpu| {\n+                do Feature.to_c_str().with_ref |Feature| {\n+                    do Output.to_c_str().with_ref |Output| {\n+                        let result = llvm::LLVMRustWriteOutputFile(\n+                                PM,\n+                                M,\n+                                Triple,\n+                                Cpu,\n+                                Feature,\n+                                Output,\n+                                FileType,\n+                                OptLevel,\n+                                EnableSegmentedStacks);\n+                        if (!result) {\n+                            llvm_err(sess, ~\"Could not write output\");\n+                        }\n                     }\n                 }\n             }\n@@ -346,6 +350,7 @@ pub mod write {\n                             pm.llpm,\n                             llmod,\n                             sess.targ_cfg.target_strs.target_triple,\n+                            opts.target_cpu,\n                             opts.target_feature,\n                             output.to_str(),\n                             lib::llvm::AssemblyFile as c_uint,\n@@ -362,6 +367,7 @@ pub mod write {\n                             pm.llpm,\n                             llmod,\n                             sess.targ_cfg.target_strs.target_triple,\n+                            opts.target_cpu,\n                             opts.target_feature,\n                             output.to_str(),\n                             lib::llvm::ObjectFile as c_uint,\n@@ -376,6 +382,7 @@ pub mod write {\n                         pm.llpm,\n                         llmod,\n                         sess.targ_cfg.target_strs.target_triple,\n+                        opts.target_cpu,\n                         opts.target_feature,\n                         output.to_str(),\n                         FileType as c_uint,"}, {"sha": "aa759bc821a216a33ed07c00f39db6622bdf075b", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=1785841a5b8d33f13a7d90495213ce67c41b680e", "patch": "@@ -684,8 +684,9 @@ pub fn build_session_options(binary: @str,\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n     let sysroot_opt = getopts::opt_maybe_str(matches, \"sysroot\").map_move(|m| @Path(m));\n-    let target_opt = getopts::opt_maybe_str(matches, \"target\");\n-    let target_feature_opt = getopts::opt_maybe_str(matches, \"target-feature\");\n+    let target = getopts::opt_maybe_str(matches, \"target\").unwrap_or_default(host_triple());\n+    let target_cpu = getopts::opt_maybe_str(matches, \"target-cpu\").unwrap_or_default(~\"generic\");\n+    let target_feature = getopts::opt_maybe_str(matches, \"target-feature\").unwrap_or_default(~\"\");\n     let save_temps = getopts::opt_present(matches, \"save-temps\");\n     let opt_level = {\n         if (debugging_opts & session::no_opt) != 0 {\n@@ -713,15 +714,6 @@ pub fn build_session_options(binary: @str,\n     let debuginfo = debugging_opts & session::debug_info != 0 ||\n         extra_debuginfo;\n     let statik = debugging_opts & session::statik != 0;\n-    let target =\n-        match target_opt {\n-            None => host_triple(),\n-            Some(s) => s\n-        };\n-    let target_feature = match target_feature_opt {\n-        None => ~\"\",\n-        Some(s) => s\n-    };\n \n     let addl_lib_search_paths = getopts::opt_strs(matches, \"L\").map(|s| Path(*s));\n     let linker = getopts::opt_maybe_str(matches, \"linker\");\n@@ -760,6 +752,7 @@ pub fn build_session_options(binary: @str,\n         linker_args: linker_args,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n+        target_cpu: target_cpu,\n         target_feature: target_feature,\n         cfg: cfg,\n         binary: binary,\n@@ -876,10 +869,13 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n   optopt(\"\", \"target\",\n                         \"Target triple cpu-manufacturer-kernel[-os]\n                           to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n-                          for detail)\", \"TRIPLE\"),\n+                          for details)\", \"TRIPLE\"),\n+  optopt(\"\", \"target-cpu\",\n+                        \"Select target processor (llc -mcpu=help\n+                          for details)\", \"CPU\"),\n   optopt(\"\", \"target-feature\",\n                         \"Target specific attributes (llc -mattr=help\n-                          for detail)\", \"FEATURE\"),\n+                          for details)\", \"FEATURE\"),\n   optopt(\"\", \"android-cross-path\",\n          \"The path to the Android NDK\", \"PATH\"),\n   optflagopt(\"W\", \"warn\","}, {"sha": "50b29ff16be1a5a456be92758cc2477a24b63af8", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=1785841a5b8d33f13a7d90495213ce67c41b680e", "patch": "@@ -153,6 +153,7 @@ pub struct options {\n     linker_args: ~[~str],\n     maybe_sysroot: Option<@Path>,\n     target_triple: ~str,\n+    target_cpu: ~str,\n     target_feature: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional\n     // items to the crate config, and during parsing the entire crate config\n@@ -340,6 +341,7 @@ pub fn basic_options() -> @options {\n         linker_args: ~[],\n         maybe_sysroot: None,\n         target_triple: host_triple(),\n+        target_cpu: ~\"generic\",\n         target_feature: ~\"\",\n         cfg: ~[],\n         binary: @\"rustc\","}, {"sha": "156aafacfec628d5b375ab75d7ae30a7268f5f0d", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=1785841a5b8d33f13a7d90495213ce67c41b680e", "patch": "@@ -1811,6 +1811,7 @@ pub mod llvm {\n         pub fn LLVMRustWriteOutputFile(PM: PassManagerRef,\n                                        M: ModuleRef,\n                                        Triple: *c_char,\n+                                       Cpu: *c_char,\n                                        Feature: *c_char,\n                                        Output: *c_char,\n                                        // FIXME: When #2334 is fixed,"}, {"sha": "7f2e61092ee0d0d974f555438bd047c64b3e5e80", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1785841a5b8d33f13a7d90495213ce67c41b680e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1785841a5b8d33f13a7d90495213ce67c41b680e", "patch": "@@ -372,6 +372,7 @@ extern \"C\" bool\n LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                         LLVMModuleRef M,\n                         const char *triple,\n+                        const char *cpu,\n                         const char *feature,\n                         const char *path,\n                         TargetMachine::CodeGenFileType FileType,\n@@ -401,7 +402,7 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   std::string Err;\n   std::string Trip(Triple::normalize(triple));\n   std::string FeaturesStr(feature);\n-  std::string CPUStr(\"generic\");\n+  std::string CPUStr(cpu);\n   const Target *TheTarget = TargetRegistry::lookupTarget(Trip, Err);\n   TargetMachine *Target =\n     TheTarget->createTargetMachine(Trip, CPUStr, FeaturesStr,"}]}