{"sha": "4746d37339f77fa4a07be6104e3f6385a8fb67bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDZkMzczMzlmNzdmYTRhMDdiZTYxMDRlM2Y2Mzg1YThmYjY3YmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T03:36:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T05:18:01Z"}, "message": "E0023: handle expected != pat-tup-type", "tree": {"sha": "897977d04d950f7ef6e3706f630f0e1b9a7df052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/897977d04d950f7ef6e3706f630f0e1b9a7df052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4746d37339f77fa4a07be6104e3f6385a8fb67bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4746d37339f77fa4a07be6104e3f6385a8fb67bd", "html_url": "https://github.com/rust-lang/rust/commit/4746d37339f77fa4a07be6104e3f6385a8fb67bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4746d37339f77fa4a07be6104e3f6385a8fb67bd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeaaf8f640c919074983edd8366ab3d10321f2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeaaf8f640c919074983edd8366ab3d10321f2b5", "html_url": "https://github.com/rust-lang/rust/commit/aeaaf8f640c919074983edd8366ab3d10321f2b5"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "32df6c4636c2d88338e4a791e0622f9de924d9af", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=4746d37339f77fa4a07be6104e3f6385a8fb67bd", "patch": "@@ -65,13 +65,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn demand_eqtype_pat(\n+    pub fn demand_eqtype_pat_diag(\n         &self,\n         cause_span: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         match_expr_span: Option<Span>,\n-    ) {\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n         let cause = if let Some(span) = match_expr_span {\n             self.cause(\n                 cause_span,\n@@ -80,9 +80,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             self.misc(cause_span)\n         };\n-        self.demand_eqtype_with_origin(&cause, expected, actual).map(|mut err| err.emit());\n+        self.demand_eqtype_with_origin(&cause, expected, actual)\n     }\n \n+    pub fn demand_eqtype_pat(\n+        &self,\n+        cause_span: Span,\n+        expected: Ty<'tcx>,\n+        actual: Ty<'tcx>,\n+        match_expr_span: Option<Span>,\n+    ) {\n+        self.demand_eqtype_pat_diag(cause_span, expected, actual, match_expr_span)\n+            .map(|mut err| err.emit());\n+    }\n \n     pub fn demand_coerce(&self,\n                          expr: &hir::Expr,"}, {"sha": "71d1cd869a6a2df33e25deb6c199e4763699ff44", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=4746d37339f77fa4a07be6104e3f6385a8fb67bd", "patch": "@@ -703,7 +703,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let pat_ty = pat_ty.fn_sig(tcx).output();\n         let pat_ty = pat_ty.no_bound_vars().expect(\"expected fn type\");\n \n-        self.demand_eqtype_pat(pat.span, expected, pat_ty, match_arm_pat_span);\n+        // Type-check the tuple struct pattern against the expected type.\n+        let diag = self.demand_eqtype_pat_diag(pat.span, expected, pat_ty, match_arm_pat_span);\n+        let had_err = diag.is_some();\n+        diag.map(|mut err| err.emit());\n \n         // Type-check subpatterns.\n         if subpats.len() == variant.fields.len()\n@@ -721,7 +724,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected);\n+            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n             on_error();\n             return tcx.types.err;\n         }\n@@ -734,8 +737,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         res: Res,\n         qpath: &hir::QPath,\n         subpats: &'tcx [P<Pat>],\n-        fields: &[ty::FieldDef],\n-        expected: Ty<'tcx>\n+        fields: &'tcx [ty::FieldDef],\n+        expected: Ty<'tcx>,\n+        had_err: bool,\n     ) {\n         let subpats_ending = pluralize!(subpats.len());\n         let fields_ending = pluralize!(fields.len());\n@@ -763,9 +767,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // More generally, the expected type wants a tuple variant with one field of an\n         // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n         // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n-        let missing_parenthesis = match expected.kind {\n-            ty::Adt(_, substs) if fields.len() == 1 => {\n-                let field_ty = fields[0].ty(self.tcx, substs);\n+        let missing_parenthesis = match (&expected.kind, fields, had_err) {\n+            // #67037: only do this if we could sucessfully type-check the expected type against\n+            // the tuple struct pattern. Otherwise the substs could get out of range on e.g.,\n+            // `let P() = U;` where `P != U` with `struct P<T>(T);`.\n+            (ty::Adt(_, substs), [field], false) => {\n+                let field_ty = self.field_ty(pat_span, field, substs);\n                 match field_ty.kind {\n                     ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n                     _ => false,"}, {"sha": "44bd645598ae05c5962c8b6a9782e16c1c964227", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs?ref=4746d37339f77fa4a07be6104e3f6385a8fb67bd", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #67037.\n+//\n+// In type checking patterns, E0023 occurs when the tuple pattern and the expected\n+// tuple pattern have different number of fields. For example, as below, `P()`,\n+// the tuple struct pattern, has 0 fields, but requires 1 field.\n+//\n+// In emitting E0023, we try to see if this is a case of e.g., `Some(a, b, c)` but where\n+// the scrutinee was of type `Some((a, b, c))`, and suggest that parenthesis be added.\n+//\n+// However, we did not account for the expected type being different than the tuple pattern type.\n+// This caused an issue when the tuple pattern type (`P<T>`) was generic.\n+// Specifically, we tried deriving the 0th field's type using the `substs` of the expected type.\n+// When attempting to substitute `T`, there was no such substitution, so \"out of range\" occured.\n+\n+struct U {} // 0 type parameters offered\n+struct P<T>(T); // 1 type parameter wanted\n+\n+fn main() {\n+    let P() = U {}; //~ ERROR mismatched types\n+    //~^ ERROR this pattern has 0 fields, but the corresponding tuple struct has 1 field\n+}"}, {"sha": "521dd0256f7d52285e4030cb882d57ab46e67649", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4746d37339f77fa4a07be6104e3f6385a8fb67bd/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=4746d37339f77fa4a07be6104e3f6385a8fb67bd", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs:19:9\n+   |\n+LL |     let P() = U {};\n+   |         ^^^ expected struct `U`, found struct `P`\n+   |\n+   = note: expected struct `U`\n+              found struct `P<_>`\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 1 field\n+  --> $DIR/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs:19:9\n+   |\n+LL | struct P<T>(T); // 1 type parameter wanted\n+   | --------------- tuple struct defined here\n+...\n+LL |     let P() = U {};\n+   |         ^^^ expected 1 field, found 0\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0023, E0308.\n+For more information about an error, try `rustc --explain E0023`."}]}