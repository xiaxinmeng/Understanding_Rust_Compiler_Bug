{"sha": "1373c4fcf21930a22150210200bdc14f5f935b3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzNjNGZjZjIxOTMwYTIyMTUwMjEwMjAwYmRjMTRmNWY5MzViM2M=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-13T19:48:07Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-18T10:43:37Z"}, "message": "Properly create debug info for functions\n\nWe're currently using the actual function type as the return type when\ncreating the debug info for a function, so we're actually creating\ndebug info for a function that takes the same parameters, and returns\nthe actual function type, which is completely wrong.", "tree": {"sha": "87bdc45888549e505763924625c3366b54e1a3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87bdc45888549e505763924625c3366b54e1a3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1373c4fcf21930a22150210200bdc14f5f935b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1373c4fcf21930a22150210200bdc14f5f935b3c", "html_url": "https://github.com/rust-lang/rust/commit/1373c4fcf21930a22150210200bdc14f5f935b3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1373c4fcf21930a22150210200bdc14f5f935b3c/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f50dca3865fa510a1d80c94f2272c5ff78dc373", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f50dca3865fa510a1d80c94f2272c5ff78dc373", "html_url": "https://github.com/rust-lang/rust/commit/3f50dca3865fa510a1d80c94f2272c5ff78dc373"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "d1f524038961316a66a69c4a5fe654a538c705fd", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1373c4fcf21930a22150210200bdc14f5f935b3c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373c4fcf21930a22150210200bdc14f5f935b3c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=1373c4fcf21930a22150210200bdc14f5f935b3c", "patch": "@@ -920,7 +920,7 @@ pub fn scope_metadata(fcx: &FunctionContext,\n     }\n }\n \n-fn diverging_type_metadata(cx: &CrateContext) -> DIType {\n+pub fn diverging_type_metadata(cx: &CrateContext) -> DIType {\n     unsafe {\n         llvm::LLVMDIBuilderCreateBasicType(\n             DIB(cx),"}, {"sha": "39def5ed48aee8cdbf6efbb0328d227baeb8b9c2", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1373c4fcf21930a22150210200bdc14f5f935b3c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373c4fcf21930a22150210200bdc14f5f935b3c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=1373c4fcf21930a22150210200bdc14f5f935b3c", "patch": "@@ -18,7 +18,8 @@ use self::utils::{DIB, span_start, assert_type_for_node_id, contains_nodebug_att\n                   create_DIArray, is_node_local_to_unit};\n use self::namespace::{namespace_for_item, NamespaceTreeNode};\n use self::type_names::compute_debuginfo_type_name;\n-use self::metadata::{type_metadata, file_metadata, scope_metadata, TypeMap, compile_unit_metadata};\n+use self::metadata::{type_metadata, diverging_type_metadata};\n+use self::metadata::{file_metadata, scope_metadata, TypeMap, compile_unit_metadata};\n use self::source_loc::InternalDebugLocation;\n \n use llvm;\n@@ -30,7 +31,7 @@ use rustc::ast_map;\n use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n use trans;\n use trans::monomorphize;\n-use middle::ty::Ty;\n+use middle::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n \n@@ -325,7 +326,6 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let function_type_metadata = unsafe {\n         let fn_signature = get_function_signature(cx,\n                                                   fn_ast_id,\n-                                                  &*fn_decl,\n                                                   param_substs,\n                                                   span);\n         llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n@@ -402,35 +402,42 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                         fn_ast_id: ast::NodeId,\n-                                        fn_decl: &ast::FnDecl,\n                                         param_substs: &Substs<'tcx>,\n                                         error_reporting_span: Span) -> DIArray {\n         if cx.sess().opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), &[]);\n         }\n \n-        let mut signature = Vec::with_capacity(fn_decl.inputs.len() + 1);\n-\n         // Return type -- llvm::DIBuilder wants this at index 0\n         assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n-        let return_type = cx.tcx().node_id_to_type(fn_ast_id);\n-        let return_type = monomorphize::apply_param_substs(cx.tcx(),\n-                                                           param_substs,\n-                                                           &return_type);\n-        if return_type.is_nil() {\n-            signature.push(ptr::null_mut())\n-        } else {\n-            signature.push(type_metadata(cx, return_type, codemap::DUMMY_SP));\n-        }\n+        let fn_type = cx.tcx().node_id_to_type(fn_ast_id);\n+\n+        let sig = match fn_type.sty {\n+            ty::TyBareFn(_, ref barefnty) => {\n+                cx.tcx().erase_late_bound_regions(&barefnty.sig)\n+            }\n+            ty::TyClosure(def_id, substs) => {\n+                cx.tcx().erase_late_bound_regions(&cx.tcx().closure_type(def_id, substs).sig)\n+            }\n+\n+            _ => cx.sess().bug(\"get_function_metdata: Expected a function type!\")\n+        };\n+        let sig = monomorphize::apply_param_substs(cx.tcx(), param_substs, &sig);\n+\n+        let mut signature = Vec::with_capacity(sig.inputs.len() + 1);\n+\n+        // Return type -- llvm::DIBuilder wants this at index 0\n+        signature.push(match sig.output {\n+            ty::FnConverging(ret_ty) => match ret_ty.sty {\n+                ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n+                _ => type_metadata(cx, ret_ty, codemap::DUMMY_SP)\n+            },\n+            ty::FnDiverging => diverging_type_metadata(cx)\n+        });\n \n         // Arguments types\n-        for arg in &fn_decl.inputs {\n-            assert_type_for_node_id(cx, arg.pat.id, arg.pat.span);\n-            let arg_type = cx.tcx().node_id_to_type(arg.pat.id);\n-            let arg_type = monomorphize::apply_param_substs(cx.tcx(),\n-                                                            param_substs,\n-                                                            &arg_type);\n-            signature.push(type_metadata(cx, arg_type, codemap::DUMMY_SP));\n+        for &argument_type in &sig.inputs {\n+            signature.push(type_metadata(cx, argument_type, codemap::DUMMY_SP));\n         }\n \n         return create_DIArray(DIB(cx), &signature[..]);"}, {"sha": "57dabadfbd546c9e17ce491a4dd7b817b83c2a6e", "filename": "src/test/debuginfo/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1373c4fcf21930a22150210200bdc14f5f935b3c/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1373c4fcf21930a22150210200bdc14f5f935b3c/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-metadata.rs?ref=1373c4fcf21930a22150210200bdc14f5f935b3c", "patch": "@@ -43,7 +43,7 @@\n // gdb-command:whatis f64\n // gdb-check:type = f64\n // gdb-command:info functions _yyy\n-// gdb-check:[...]![...]_yyy([...])([...]);\n+// gdb-check:[...]![...]_yyy([...]);\n // gdb-command:continue\n \n #![allow(unused_variables)]"}]}