{"sha": "412301b26a8a6edb4cdba2bebb430f5b34e728ac", "node_id": "C_kwDOAAsO6NoAKDQxMjMwMWIyNmE4YTZlZGI0Y2RiYTJiZWJiNDMwZjViMzRlNzI4YWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-11T21:45:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-11T21:45:46Z"}, "message": "Rollup merge of #89471 - nbdd0121:const3, r=fee1-dead\n\nUse Ancestory to check default fn in const impl instead of comparing idents\n\nFixes https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Const.20trait.20impl.20inside.20macro", "tree": {"sha": "8a1fbaa6c944df11f57f85c32e0ab3d9b34c8601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1fbaa6c944df11f57f85c32e0ab3d9b34c8601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/412301b26a8a6edb4cdba2bebb430f5b34e728ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZLCKCRBK7hj4Ov3rIwAAQk8IAHeYeRAXoym+RhpKhfSUJQbs\nd7GBa02Yzmdjwzx/iC2aihJRGAitgiN7Xqzp+S825gDV8iVyPSHffbUcXEazLLeL\ng3JfXwaLIdCiZkRpvZYoCDVJQho34kcgJuMSPuwVYItGHIZZa6xX8NNb9XwttA2n\nmiUByl2n1smkij7SA2uEg7eRQhhUf6KfUULHNLW3n+MLpbmcbPeS15LL2Cvtz0lu\nrsWoYd6vyAphTjid2YCxVOu8z9gDofi7q8ttAq5M+ghc8X+GDlCN9xIzA3zKFoce\nr5kOcywK1+jsVfW75qBEXI8yRkNa3iHBVaowCsWIxbqaLMIUxAwqkYJQf6bCkNE=\n=DMDo\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a1fbaa6c944df11f57f85c32e0ab3d9b34c8601\nparent 5b210643ebf2485aafdf2494de8cf41941a64e95\nparent 0a03f8c78bff3adf164ad2fefd6ea767de25ec9e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1633988746 +0200\ncommitter GitHub <noreply@github.com> 1633988746 +0200\n\nRollup merge of #89471 - nbdd0121:const3, r=fee1-dead\n\nUse Ancestory to check default fn in const impl instead of comparing idents\n\nFixes https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Const.20trait.20impl.20inside.20macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/412301b26a8a6edb4cdba2bebb430f5b34e728ac", "html_url": "https://github.com/rust-lang/rust/commit/412301b26a8a6edb4cdba2bebb430f5b34e728ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/412301b26a8a6edb4cdba2bebb430f5b34e728ac/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b210643ebf2485aafdf2494de8cf41941a64e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b210643ebf2485aafdf2494de8cf41941a64e95", "html_url": "https://github.com/rust-lang/rust/commit/5b210643ebf2485aafdf2494de8cf41941a64e95"}, {"sha": "0a03f8c78bff3adf164ad2fefd6ea767de25ec9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a03f8c78bff3adf164ad2fefd6ea767de25ec9e", "html_url": "https://github.com/rust-lang/rust/commit/0a03f8c78bff3adf164ad2fefd6ea767de25ec9e"}], "stats": {"total": 90, "additions": 64, "deletions": 26}, "files": [{"sha": "a0ceb567f25a6f8d13b6d04bc860153e86a3c478", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/412301b26a8a6edb4cdba2bebb430f5b34e728ac/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412301b26a8a6edb4cdba2bebb430f5b34e728ac/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=412301b26a8a6edb4cdba2bebb430f5b34e728ac", "patch": "@@ -8,7 +8,6 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc_attr as attr;\n-use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -83,30 +82,39 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n         let _: Option<_> = try {\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n-                    let did = imp.of_trait.as_ref()?.trait_def_id()?;\n-                    let mut to_implement = FxHashSet::default();\n-\n-                    for did in self.tcx.associated_item_def_ids(did) {\n+                    let trait_def_id = imp.of_trait.as_ref()?.trait_def_id()?;\n+                    let ancestors = self\n+                        .tcx\n+                        .trait_def(trait_def_id)\n+                        .ancestors(self.tcx, item.def_id.to_def_id())\n+                        .ok()?;\n+                    let mut to_implement = Vec::new();\n+\n+                    for trait_item in self.tcx.associated_items(trait_def_id).in_definition_order()\n+                    {\n                         if let ty::AssocItem {\n                             kind: ty::AssocKind::Fn, ident, defaultness, ..\n-                        } = self.tcx.associated_item(*did)\n+                        } = trait_item\n                         {\n                             // we can ignore functions that do not have default bodies:\n                             // if those are unimplemented it will be catched by typeck.\n-                            if defaultness.has_value()\n-                                && !self.tcx.has_attr(*did, sym::default_method_body_is_const)\n+                            if !defaultness.has_value()\n+                                || self\n+                                    .tcx\n+                                    .has_attr(trait_item.def_id, sym::default_method_body_is_const)\n                             {\n-                                to_implement.insert(ident);\n+                                continue;\n                             }\n-                        }\n-                    }\n \n-                    for it in imp\n-                        .items\n-                        .iter()\n-                        .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n-                    {\n-                        to_implement.remove(&it.ident);\n+                            let is_implemented = ancestors\n+                                .leaf_def(self.tcx, trait_item.ident, trait_item.kind)\n+                                .map(|node_item| !node_item.defining_node.is_from_trait())\n+                                .unwrap_or(false);\n+\n+                            if !is_implemented {\n+                                to_implement.push(ident.to_string());\n+                            }\n+                        }\n                     }\n \n                     // all nonconst trait functions (not marked with #[default_method_body_is_const])\n@@ -118,7 +126,7 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n                                 item.span,\n                                 \"const trait implementations may not use non-const default functions\",\n                             )\n-                            .note(&format!(\"`{}` not implemented\", to_implement.into_iter().map(|id| id.to_string()).collect::<Vec<_>>().join(\"`, `\")))\n+                            .note(&format!(\"`{}` not implemented\", to_implement.join(\"`, `\")))\n                             .emit();\n                     }\n                 }"}, {"sha": "8eefb375b8c1b9346b1520f9a7c7abeb6c6996bd", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.rs", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/412301b26a8a6edb4cdba2bebb430f5b34e728ac/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412301b26a8a6edb4cdba2bebb430f5b34e728ac/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs?ref=412301b26a8a6edb4cdba2bebb430f5b34e728ac", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n \n trait Tr {\n     fn req(&self);\n@@ -18,11 +19,6 @@ impl const Tr for S {\n     fn req(&self) {}\n } //~^^ ERROR const trait implementations may not use non-const default functions\n \n-impl const Tr for u8 {\n-    fn req(&self) {}\n-    fn prov(&self) {}\n-}\n-\n impl const Tr for u16 {\n     fn prov(&self) {}\n     fn default() {}", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs"}, {"sha": "a0916797041114b373ce94bbf1a541db340269fb", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/412301b26a8a6edb4cdba2bebb430f5b34e728ac/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/412301b26a8a6edb4cdba2bebb430f5b34e728ac/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr?ref=412301b26a8a6edb4cdba2bebb430f5b34e728ac", "patch": "@@ -1,5 +1,5 @@\n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn.rs:17:1\n+  --> $DIR/impl-with-default-fn-fail.rs:18:1\n    |\n LL | / impl const Tr for S {\n LL | |     fn req(&self) {}\n@@ -9,7 +9,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn.rs:32:1\n+  --> $DIR/impl-with-default-fn-fail.rs:28:1\n    |\n LL | / impl const Tr for u32 {\n LL | |     fn req(&self) {}\n@@ -20,7 +20,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error[E0046]: not all trait items implemented, missing: `req`\n-  --> $DIR/impl-with-default-fn.rs:26:1\n+  --> $DIR/impl-with-default-fn-fail.rs:22:1\n    |\n LL |     fn req(&self);\n    |     -------------- `req` from trait", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr"}, {"sha": "ba3fec0882b02e306b3fd9919cfb1ca83d477a71", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-pass.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/412301b26a8a6edb4cdba2bebb430f5b34e728ac/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412301b26a8a6edb4cdba2bebb430f5b34e728ac/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs?ref=412301b26a8a6edb4cdba2bebb430f5b34e728ac", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+trait Tr {\n+    fn req(&self);\n+\n+    fn prov(&self) {\n+        println!(\"lul\");\n+        self.req();\n+    }\n+\n+    #[default_method_body_is_const]\n+    fn default() {}\n+}\n+\n+impl const Tr for u8 {\n+    fn req(&self) {}\n+    fn prov(&self) {}\n+}\n+\n+macro_rules! impl_tr {\n+    ($ty: ty) => {\n+        impl const Tr for $ty {\n+            fn req(&self) {}\n+            fn prov(&self) {}\n+        }\n+    }\n+}\n+\n+impl_tr!(u64);\n+\n+fn main() {}"}]}