{"sha": "e5ab49e76251a2c4075f331a47c8d450592b65b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YWI0OWU3NjI1MWEyYzQwNzVmMzMxYTQ3YzhkNDUwNTkyYjY1YjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-13T17:25:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-13T17:25:21Z"}, "message": "Rustup to rustc 1.32.0-nightly (65204a97d 2018-11-12)", "tree": {"sha": "75f622645b199474771f132c115f9a70917f3c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f622645b199474771f132c115f9a70917f3c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ab49e76251a2c4075f331a47c8d450592b65b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ab49e76251a2c4075f331a47c8d450592b65b3", "html_url": "https://github.com/rust-lang/rust/commit/e5ab49e76251a2c4075f331a47c8d450592b65b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ab49e76251a2c4075f331a47c8d450592b65b3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3263bafe0543cb72749cb03de61f26ba1ea4f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3263bafe0543cb72749cb03de61f26ba1ea4f19", "html_url": "https://github.com/rust-lang/rust/commit/a3263bafe0543cb72749cb03de61f26ba1ea4f19"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "a8f2005a64c6c6c44726f9768fac0170d853d47a", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e5ab49e76251a2c4075f331a47c8d450592b65b3/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/e5ab49e76251a2c4075f331a47c8d450592b65b3/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=e5ab49e76251a2c4075f331a47c8d450592b65b3", "patch": "@@ -1,27 +1,27 @@\n-From 13b3aab50eec5bd0ae22ebb76eba4d0ccb90ae14 Mon Sep 17 00:00:00 2001\n+From 7a466d258ff8c795fa52274e0627a39becb3bdf3 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 10 Nov 2018 10:49:26 +0100\n+Date: Tue, 13 Nov 2018 18:11:23 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n  src/libcore/clone.rs         |   4 +-\n- src/libcore/cmp.rs           |   6 +-\n+ src/libcore/cmp.rs           |   6 +--\n  src/libcore/default.rs       |   2 -\n- src/libcore/fmt/num.rs       |   6 +-\n- src/libcore/hash/mod.rs      |  20 ------\n+ src/libcore/fmt/num.rs       |   6 +--\n+ src/libcore/hash/mod.rs      |  20 -------\n  src/libcore/iter/range.rs    |   1 -\n  src/libcore/iter/traits.rs   |   2 +-\n  src/libcore/lib.rs           |   2 -\n  src/libcore/marker.rs        |   4 +-\n  src/libcore/mem.rs           |   2 -\n- src/libcore/num/mod.rs       |  99 ++++++++-------------------\n- src/libcore/num/wrapping.rs  |  14 ++--\n- src/libcore/ops/arith.rs     |  22 +++---\n- src/libcore/ops/bit.rs       |  30 +++------\n- src/libcore/sync/atomic.rs   |  28 --------\n- src/libcore/tests/iter.rs    |  15 -----\n- src/libcore/tests/num/mod.rs |  18 -----\n- src/libcore/time.rs          | 126 -----------------------------------\n+ src/libcore/num/mod.rs       |  99 +++++++++-------------------------\n+ src/libcore/num/wrapping.rs  |  14 ++---\n+ src/libcore/ops/arith.rs     |  22 ++++----\n+ src/libcore/ops/bit.rs       |  30 ++++-------\n+ src/libcore/sync/atomic.rs   |  28 ----------\n+ src/libcore/tests/iter.rs    |  15 ------\n+ src/libcore/tests/num/mod.rs |  18 -------\n+ src/libcore/time.rs          | 126 -------------------------------------------\n  18 files changed, 62 insertions(+), 339 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n@@ -214,10 +214,10 @@ index f95f8e7..549d832 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 3e7db7a..1217d4a 100644\n+index 1fec2e5..04266ee 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -153,14 +153,12 @@ mod uint_macros;\n+@@ -152,14 +152,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -248,7 +248,7 @@ index 662a8dd..856878e 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 1d0b194..cf15fda 100644\n+index d4b7094..3b5a197 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -162,12 +162,10 @@ pub fn forget<T>(t: T) {\n@@ -265,7 +265,7 @@ index 1d0b194..cf15fda 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index c6cbeea..08ef46c 100644\n+index 30b7b45..88a294a 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n @@ -112,7 +112,6 @@ nonzero_integers! {\n@@ -295,7 +295,7 @@ index c6cbeea..08ef46c 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4337,17 +4324,6 @@ impl u64 {\n+@@ -4349,17 +4336,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n@@ -313,7 +313,7 @@ index c6cbeea..08ef46c 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4431,7 +4407,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4443,7 +4419,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -322,7 +322,7 @@ index c6cbeea..08ef46c 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4547,30 +4523,25 @@ macro_rules! rev {\n+@@ -4559,30 +4535,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -357,7 +357,7 @@ index c6cbeea..08ef46c 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4582,21 +4553,21 @@ mod ptr_try_from_impls {\n+@@ -4594,21 +4565,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -387,7 +387,7 @@ index c6cbeea..08ef46c 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4605,24 +4576,24 @@ mod ptr_try_from_impls {\n+@@ -4617,24 +4588,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -420,7 +420,7 @@ index c6cbeea..08ef46c 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4631,24 +4602,20 @@ mod ptr_try_from_impls {\n+@@ -4643,24 +4614,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -449,7 +449,7 @@ index c6cbeea..08ef46c 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4683,7 +4650,7 @@ macro_rules! doit {\n+@@ -4695,7 +4662,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -458,7 +458,7 @@ index c6cbeea..08ef46c 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4851,52 +4818,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4863,52 +4830,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -512,7 +512,7 @@ index c6cbeea..08ef46c 100644\n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n-index 1c826c2..0779e31 100644\n+index 00134a5..ea15481 100644\n --- a/src/libcore/num/wrapping.rs\n +++ b/src/libcore/num/wrapping.rs\n @@ -112,19 +112,17 @@ macro_rules! sh_impl_all {\n@@ -886,11 +886,10 @@ index 2476c07..2075670 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1877,19 +1875,6 @@ fn test_step_replace_signed() {\n-     assert_eq!(y, 5);\n+@@ -1878,19 +1876,6 @@ fn test_step_replace_signed() {\n  }\n  \n--#[test]\n+ #[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n -    let y = x.replace_zero();\n@@ -903,9 +902,10 @@ index 2476c07..2075670 100644\n -    assert_eq!(y, 5);\n -}\n -\n- #[test]\n+-#[test]\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n+     assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n index ab96d31..bb5c1d0 100644\n --- a/src/libcore/tests/num/mod.rs\n@@ -976,7 +976,7 @@ index ab96d31..bb5c1d0 100644\n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index cfbd431..aee8065 100644\n+index 938e975..2ba930d 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -30,7 +30,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -987,7 +987,7 @@ index cfbd431..aee8065 100644\n  \n  /// A `Duration` type to represent a span of time, typically used for system\n  /// timeouts.\n-@@ -273,57 +272,6 @@ impl Duration {\n+@@ -269,57 +268,6 @@ impl Duration {\n      #[inline]\n      pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n  \n@@ -1004,7 +1004,7 @@ index cfbd431..aee8065 100644\n -    /// ```\n -    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n -    #[inline]\n--    pub fn as_millis(&self) -> u128 {\n+-    pub const fn as_millis(&self) -> u128 {\n -        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n -    }\n -\n@@ -1021,7 +1021,7 @@ index cfbd431..aee8065 100644\n -    /// ```\n -    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n -    #[inline]\n--    pub fn as_micros(&self) -> u128 {\n+-    pub const fn as_micros(&self) -> u128 {\n -        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n -    }\n -\n@@ -1038,14 +1038,14 @@ index cfbd431..aee8065 100644\n -    /// ```\n -    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n -    #[inline]\n--    pub fn as_nanos(&self) -> u128 {\n+-    pub const fn as_nanos(&self) -> u128 {\n -        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n -    }\n -\n      /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n      /// if overflow occurred.\n      ///\n-@@ -482,80 +430,6 @@ impl Duration {\n+@@ -478,80 +426,6 @@ impl Duration {\n          (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n      }\n  \n@@ -1127,5 +1127,5 @@ index cfbd431..aee8065 100644\n      ///\n      /// # Examples\n -- \n-2.17.2 (Apple Git-113)\n+2.11.0\n "}]}