{"sha": "eea42733ac070b62492037107ee38028abb71f1a", "node_id": "C_kwDOAAsO6NoAKGVlYTQyNzMzYWMwNzBiNjI0OTIwMzcxMDdlZTM4MDI4YWJiNzFmMWE", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-29T23:14:29Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-23T23:56:22Z"}, "message": "Replace terminator-based const eval limit\n\n- Remove logic that limits const eval based on terminators, and use the\n  stable metric instead (back edges + fn calls)\n- Add unstable flag `tiny-const-eval-limit` to add UI tests that do not\n  have to go up to the regular 2M step limit", "tree": {"sha": "6c78cf3fd8c0fb4b22a3b14d314d4b1af4033d1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c78cf3fd8c0fb4b22a3b14d314d4b1af4033d1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea42733ac070b62492037107ee38028abb71f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea42733ac070b62492037107ee38028abb71f1a", "html_url": "https://github.com/rust-lang/rust/commit/eea42733ac070b62492037107ee38028abb71f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea42733ac070b62492037107ee38028abb71f1a/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d99b0fc8d732bcef84127bf431517922878461f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d99b0fc8d732bcef84127bf431517922878461f", "html_url": "https://github.com/rust-lang/rust/commit/8d99b0fc8d732bcef84127bf431517922878461f"}], "stats": {"total": 199, "additions": 138, "deletions": 61}, "files": [{"sha": "a5bc121485d8cde6a3beb7dd0b1a601b32e1c445", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -561,8 +561,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         throw_unsup_format!(\"pointer arithmetic or comparison is not supported at compile-time\");\n     }\n \n-    fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        // The step limit has already been hit in a previous call to `before_terminator`.\n+    fn increment_const_eval_counter(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        // The step limit has already been hit in a previous call to `increment_const_eval_counter`.\n         if ecx.machine.steps_remaining == 0 {\n             return Ok(());\n         }"}, {"sha": "d13fed7a9c2631fa366200f8686433831c9d558b", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -46,9 +46,6 @@ pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n \n     /// The recursion limit (cached from `tcx.recursion_limit(())`)\n     pub recursion_limit: Limit,\n-\n-    pub const_eval_limit: u32,\n-    pub const_eval_counter: u32,\n }\n \n // The Phantomdata exists to prevent this type from being `Send`. If it were sent across a thread\n@@ -411,8 +408,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             param_env,\n             memory: Memory::new(),\n             recursion_limit: tcx.recursion_limit(),\n-            const_eval_limit: 20,\n-            const_eval_counter: 0,\n         }\n     }\n "}, {"sha": "1f63a4ac537847f00175dec73e31021209e85596", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -243,10 +243,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         ecx.stack_mut()[frame].locals[local].access_mut()\n     }\n \n-    /// Called before a basic block terminator is executed.\n-    /// You can use this to detect endlessly running programs.\n+    /// Called when the interpreter encounters a `StatementKind::ConstEvalCounter` instruction.\n+    /// You can use this to detect long or endlessly running programs.\n     #[inline]\n-    fn before_terminator(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn increment_const_eval_counter(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n "}, {"sha": "274af61ee7c1d5899b1d2d8b3a2700c912d9a0fa", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -293,17 +293,6 @@ where\n     Prov: Provenance + 'static,\n     M: Machine<'mir, 'tcx, Provenance = Prov>,\n {\n-    pub fn increment_const_eval_counter(&mut self) {\n-        self.const_eval_counter = self.const_eval_counter + 1;\n-        if self.const_eval_counter == self.const_eval_limit {\n-            let mut warn = self.tcx.sess.struct_warn(format!(\n-                \"Const eval counter limit ({}) has been crossed\",\n-                self.const_eval_limit\n-            ));\n-            warn.emit();\n-        }\n-    }\n-\n     /// Take a value, which represents a (thin or wide) reference, and make it a place.\n     /// Alignment is just based on the type. This is the inverse of `MemPlace::to_ref()`.\n     ///"}, {"sha": "7668e890c7bc30d5f945969c1cb307503071f53c", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -62,8 +62,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(true);\n         }\n \n-        M::before_terminator(self)?;\n-\n         let terminator = basic_block.terminator();\n         self.terminator(terminator)?;\n         Ok(true)\n@@ -130,7 +128,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Coverage(..) => {}\n \n             ConstEvalCounter => {\n-                self.increment_const_eval_counter();\n+                M::increment_const_eval_counter(self)?;\n             }\n \n             // Defined to do nothing. These are added by optimization passes, to avoid changing the"}, {"sha": "52a4e0e74181f78092fb85230051352b995a23ac", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -802,6 +802,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n+    tracked!(tiny_const_eval_limit, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(trait_solver, TraitSolver::Chalk);\n     tracked!(translate_remapped_path_to_local_path, false);"}, {"sha": "8a61fd2e029bccd2b3157d2f271c363586e90dca", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -75,6 +75,8 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n+const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n+\n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n     fn new(sess: &'tcx Session, data: Mmap, start_pos: usize) -> Self\n@@ -1078,7 +1080,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn const_eval_limit(self) -> Limit {\n-        self.limits(()).const_eval_limit\n+        if self.sess.opts.unstable_opts.tiny_const_eval_limit {\n+            TINY_CONST_EVAL_LIMIT\n+        } else {\n+            self.limits(()).const_eval_limit\n+        }\n     }\n \n     pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {"}, {"sha": "789af0c7bf966d5cc236523387c9f8ce25d8ac7d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1616,6 +1616,8 @@ options! {\n         \"measure time of each LLVM pass (default: no)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n+    tiny_const_eval_limit: bool = (false, parse_bool, [TRACKED],\n+        \"sets a tiny, non-configurable limit for const eval; useful for compiler tests\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]\n     tls_model: Option<TlsModel> = (None, parse_tls_model, [TRACKED],\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),"}, {"sha": "51c5fd69c63776b82ba8e0a6d173a364320a0634", "filename": "src/doc/unstable-book/src/compiler-flags/tiny-const-eval-limit.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftiny-const-eval-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftiny-const-eval-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftiny-const-eval-limit.md?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -0,0 +1,6 @@\n+# `tiny-const-eval-limit`\n+\n+--------------------\n+\n+The `-Ztiny-const-eval-limit` compiler flag sets a tiny, non-configurable limit for const eval.\n+This flag should only be used by const eval tests in the rustc test suite."}, {"sha": "c59596238e1404e955ea21cee425caf0b1648758", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-fn-call.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,4 +1,5 @@\n-// check-pass\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n \n const fn foo() {}\n \n@@ -8,21 +9,23 @@ const fn call_foo() -> u32 {\n     foo();\n     foo();\n     foo();\n+\n     foo();\n     foo();\n     foo();\n     foo();\n     foo();\n+\n     foo();\n     foo();\n     foo();\n     foo();\n     foo();\n+\n     foo();\n     foo();\n     foo();\n-    foo();\n-    foo();\n+    foo(); //~ ERROR evaluation of constant value failed [E0080]\n     0\n }\n "}, {"sha": "ed70975af341db10e70a78b2f9c93884b6b0efae", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-fn-call.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,4 +1,20 @@\n-warning: Const eval counter limit (20) has been crossed\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-fn-call.rs:28:5\n+   |\n+LL |     foo();\n+   |     ^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `call_foo`\n+  --> $DIR/ctfe-fn-call.rs:28:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+note: inside `X`\n+  --> $DIR/ctfe-fn-call.rs:32:16\n+   |\n+LL | const X: u32 = call_foo();\n+   |                ^^^^^^^^^^\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c10b8d83791193558d67f2a9bec809d9f3adecf2", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,24 +1,18 @@\n-// check-pass\n-#![feature(const_for)]\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n \n-const fn labelled_loop() -> u32 {\n-    let mut n = 0;\n-    'outer: loop {\n-        'inner: loop {\n-            n = n + 1;\n-            if n > 5 && n <= 10 {\n-                n = n + 1;\n-                continue 'inner\n-            }\n-            if n > 30 {\n-                break 'outer\n-            }\n+const fn labelled_loop(n: u32) -> u32 {\n+    let mut i = 0;\n+    'mylabel: loop { //~ ERROR evaluation of constant value failed [E0080]\n+        if i > n {\n+            break 'mylabel\n         }\n+        i += 1;\n     }\n-    n\n+    0\n }\n \n-const X: u32 = labelled_loop();\n+const X: u32 = labelled_loop(19);\n \n fn main() {\n     println!(\"{X}\");"}, {"sha": "d9404edd5b1082ab3bd25c62d7a3defe14c6f243", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.stderr", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,4 +1,30 @@\n-warning: Const eval counter limit (20) has been crossed\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-labelled-loop.rs:6:5\n+   |\n+LL | /     'mylabel: loop {\n+LL | |         if i > n {\n+LL | |             break 'mylabel\n+LL | |         }\n+LL | |         i += 1;\n+LL | |     }\n+   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `labelled_loop`\n+  --> $DIR/ctfe-labelled-loop.rs:6:5\n+   |\n+LL | /     'mylabel: loop {\n+LL | |         if i > n {\n+LL | |             break 'mylabel\n+LL | |         }\n+LL | |         i += 1;\n+LL | |     }\n+   | |_____^\n+note: inside `X`\n+  --> $DIR/ctfe-labelled-loop.rs:15:16\n+   |\n+LL | const X: u32 = labelled_loop(19);\n+   |                ^^^^^^^^^^^^^^^^^\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "80ff835f3e8dde38db1c6a7979be89e0743a61ce", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-recursion.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,14 +1,15 @@\n-// check-pass\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n \n const fn recurse(n: u32) -> u32 {\n     if n == 0 {\n         n\n     } else {\n-        recurse(n - 1)\n+        recurse(n - 1) //~ ERROR evaluation of constant value failed [E0080]\n     }\n }\n \n-const X: u32 = recurse(30);\n+const X: u32 = recurse(19);\n \n fn main() {\n     println!(\"{X}\");"}, {"sha": "ed9a31119427a8405a0623b89ea204c769f9f3f4", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-recursion.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,4 +1,25 @@\n-warning: Const eval counter limit (20) has been crossed\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-recursion.rs:8:9\n+   |\n+LL |         recurse(n - 1)\n+   |         ^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `recurse`\n+  --> $DIR/ctfe-recursion.rs:8:9\n+   |\n+LL |         recurse(n - 1)\n+   |         ^^^^^^^^^^^^^^\n+note: [... 18 additional calls inside `recurse` ...]\n+  --> $DIR/ctfe-recursion.rs:8:9\n+   |\n+LL |         recurse(n - 1)\n+   |         ^^^^^^^^^^^^^^\n+note: inside `X`\n+  --> $DIR/ctfe-recursion.rs:12:16\n+   |\n+LL | const X: u32 = recurse(19);\n+   |                ^^^^^^^^^^^\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ca0eec93c5dac5ddbe945fa9a5eea2a90bf8133d", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-simple-loop.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,15 +1,14 @@\n-// check-pass\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n const fn simple_loop(n: u32) -> u32 {\n     let mut index = 0;\n-    let mut res = 0;\n-    while index < n {\n-        res = res + index;\n+    while index < n { //~ ERROR evaluation of constant value failed [E0080]\n         index = index + 1;\n     }\n-    res\n+    0\n }\n \n-const X: u32 = simple_loop(30);\n+const X: u32 = simple_loop(19);\n \n fn main() {\n     println!(\"{X}\");"}, {"sha": "83ff275de70491a318af4c69f0904a3b53807f50", "filename": "src/test/ui/consts/const-eval/stable-metric/ctfe-simple-loop.stderr", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea42733ac070b62492037107ee38028abb71f1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr?ref=eea42733ac070b62492037107ee38028abb71f1a", "patch": "@@ -1,4 +1,24 @@\n-warning: Const eval counter limit (20) has been crossed\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-simple-loop.rs:5:5\n+   |\n+LL | /     while index < n {\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `simple_loop`\n+  --> $DIR/ctfe-simple-loop.rs:5:5\n+   |\n+LL | /     while index < n {\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^\n+note: inside `X`\n+  --> $DIR/ctfe-simple-loop.rs:11:16\n+   |\n+LL | const X: u32 = simple_loop(19);\n+   |                ^^^^^^^^^^^^^^^\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}]}