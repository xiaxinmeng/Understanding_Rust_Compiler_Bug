{"sha": "75c3fd89d47d6da340ef6c1b98e80968d0218337", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzNmZDg5ZDQ3ZDZkYTM0MGVmNmMxYjk4ZTgwOTY4ZDAyMTgzMzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-17T01:33:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T03:22:47Z"}, "message": "Refactor away the field `arenas` of `ModuleS`.", "tree": {"sha": "70b01e430ae7ffea566eefa94ec3c01ee26b47cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b01e430ae7ffea566eefa94ec3c01ee26b47cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c3fd89d47d6da340ef6c1b98e80968d0218337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c3fd89d47d6da340ef6c1b98e80968d0218337", "html_url": "https://github.com/rust-lang/rust/commit/75c3fd89d47d6da340ef6c1b98e80968d0218337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c3fd89d47d6da340ef6c1b98e80968d0218337/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc98f59a48d7c8a65cd1a15656bb6165fb3589f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc98f59a48d7c8a65cd1a15656bb6165fb3589f", "html_url": "https://github.com/rust-lang/rust/commit/bfc98f59a48d7c8a65cd1a15656bb6165fb3589f"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "efc0247e6ff09aa4b004468a20c1bde6e0fc95e2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75c3fd89d47d6da340ef6c1b98e80968d0218337/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c3fd89d47d6da340ef6c1b98e80968d0218337/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=75c3fd89d47d6da340ef6c1b98e80968d0218337", "patch": "@@ -765,17 +765,12 @@ pub struct ModuleS<'a> {\n     // access the children must be preceded with a\n     // `populate_module_if_necessary` call.\n     populated: Cell<bool>,\n-\n-    arenas: &'a ResolverArenas<'a>,\n }\n \n pub type Module<'a> = &'a ModuleS<'a>;\n \n impl<'a> ModuleS<'a> {\n-    fn new(parent_link: ParentLink<'a>,\n-           def: Option<Def>,\n-           external: bool,\n-           arenas: &'a ResolverArenas<'a>) -> Self {\n+    fn new(parent_link: ParentLink<'a>, def: Option<Def>, external: bool) -> Self {\n         ModuleS {\n             parent_link: parent_link,\n             def: def,\n@@ -786,7 +781,6 @@ impl<'a> ModuleS<'a> {\n             globs: RefCell::new((Vec::new())),\n             traits: RefCell::new(None),\n             populated: Cell::new(!external),\n-            arenas: arenas\n         }\n     }\n \n@@ -1136,7 +1130,7 @@ impl<'a> Resolver<'a> {\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let graph_root =\n-            ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false, arenas);\n+            ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false);\n         let graph_root = arenas.alloc_module(graph_root);\n         let mut module_map = NodeMap();\n         module_map.insert(CRATE_NODE_ID, graph_root);\n@@ -1211,12 +1205,12 @@ impl<'a> Resolver<'a> {\n \n     fn new_module(&self, parent_link: ParentLink<'a>, def: Option<Def>, external: bool)\n                   -> Module<'a> {\n-        self.arenas.alloc_module(ModuleS::new(parent_link, def, external, self.arenas))\n+        self.arenas.alloc_module(ModuleS::new(parent_link, def, external))\n     }\n \n     fn new_extern_crate_module(&self, parent_link: ParentLink<'a>, def: Def, local_node_id: NodeId)\n                                -> Module<'a> {\n-        let mut module = ModuleS::new(parent_link, Some(def), false, self.arenas);\n+        let mut module = ModuleS::new(parent_link, Some(def), false);\n         module.extern_crate_id = Some(local_node_id);\n         self.arenas.modules.alloc(module)\n     }"}, {"sha": "05c4430a687007d659914803c7405f099733d3cd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/75c3fd89d47d6da340ef6c1b98e80968d0218337/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c3fd89d47d6da340ef6c1b98e80968d0218337/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=75c3fd89d47d6da340ef6c1b98e80968d0218337", "patch": "@@ -135,14 +135,13 @@ impl<'a> NameResolution<'a> {\n     }\n }\n \n-impl<'a> ::ModuleS<'a> {\n-    fn resolution(&self, name: Name, ns: Namespace) -> &'a RefCell<NameResolution<'a>> {\n-        *self.resolutions.borrow_mut().entry((name, ns))\n-             .or_insert_with(|| self.arenas.alloc_name_resolution())\n+impl<'a> Resolver<'a> {\n+    fn resolution(&self, module: Module<'a>, name: Name, ns: Namespace)\n+                  -> &'a RefCell<NameResolution<'a>> {\n+        *module.resolutions.borrow_mut().entry((name, ns))\n+               .or_insert_with(|| self.arenas.alloc_name_resolution())\n     }\n-}\n \n-impl<'a> Resolver<'a> {\n     /// Attempts to resolve the supplied name in the given module for the given namespace.\n     /// If successful, returns the binding corresponding to the name.\n     pub fn resolve_name_in_module(&mut self,\n@@ -154,7 +153,7 @@ impl<'a> Resolver<'a> {\n                                   -> ResolveResult<&'a NameBinding<'a>> {\n         self.populate_module_if_necessary(module);\n \n-        let resolution = module.resolution(name, ns);\n+        let resolution = self.resolution(module, name, ns);\n         let resolution = match resolution.borrow_state() {\n             ::std::cell::BorrowState::Unused => resolution.borrow_mut(),\n             _ => return Failed(None), // This happens when there is a cycle of imports\n@@ -240,8 +239,9 @@ impl<'a> Resolver<'a> {\n                                 span: Span,\n                                 id: NodeId,\n                                 vis: ty::Visibility) {\n+        let current_module = self.current_module;\n         let directive = self.arenas.alloc_import_directive(ImportDirective {\n-            parent: self.current_module,\n+            parent: current_module,\n             module_path: module_path,\n             target_module: Cell::new(None),\n             subclass: subclass,\n@@ -254,7 +254,7 @@ impl<'a> Resolver<'a> {\n         match directive.subclass {\n             SingleImport { target, .. } => {\n                 for &ns in &[ValueNS, TypeNS] {\n-                    let mut resolution = self.current_module.resolution(target, ns).borrow_mut();\n+                    let mut resolution = self.resolution(current_module, target, ns).borrow_mut();\n                     resolution.single_imports.add_directive(directive);\n                 }\n             }\n@@ -311,7 +311,7 @@ impl<'a> Resolver<'a> {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n         let (new_binding, t) = {\n-            let mut resolution = &mut *module.resolution(name, ns).borrow_mut();\n+            let mut resolution = &mut *self.resolution(module, name, ns).borrow_mut();\n             let was_known = resolution.binding().is_some();\n \n             let t = f(self, resolution);"}]}