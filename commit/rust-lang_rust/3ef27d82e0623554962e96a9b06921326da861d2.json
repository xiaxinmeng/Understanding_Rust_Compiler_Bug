{"sha": "3ef27d82e0623554962e96a9b06921326da861d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZjI3ZDgyZTA2MjM1NTQ5NjJlOTZhOWIwNjkyMTMyNmRhODYxZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T16:35:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-27T13:06:01Z"}, "message": "allow canonicalized regions to carry universe and track max-universe\n\nBut.. we don't really use it for anything right now.", "tree": {"sha": "d093027b6d8a1832ff8d3d9de3b84d93fa26ce82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d093027b6d8a1832ff8d3d9de3b84d93fa26ce82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ef27d82e0623554962e96a9b06921326da861d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef27d82e0623554962e96a9b06921326da861d2", "html_url": "https://github.com/rust-lang/rust/commit/3ef27d82e0623554962e96a9b06921326da861d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ef27d82e0623554962e96a9b06921326da861d2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "784746f57e6e9d76f4ecc0415e8ab926a81ce37e", "url": "https://api.github.com/repos/rust-lang/rust/commits/784746f57e6e9d76f4ecc0415e8ab926a81ce37e", "html_url": "https://github.com/rust-lang/rust/commit/784746f57e6e9d76f4ecc0415e8ab926a81ce37e"}], "stats": {"total": 102, "additions": 61, "deletions": 41}, "files": [{"sha": "16a7f1425abda05289c852850d804a138c3ac4f5", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -1268,7 +1268,7 @@ for traits::VtableGeneratorData<'gcx, N> where N: HashStable<StableHashingContex\n \n impl_stable_hash_for!(\n     impl<'tcx, V> for struct infer::canonical::Canonical<'tcx, V> {\n-        variables, value\n+        max_universe, variables, value\n     }\n );\n \n@@ -1284,7 +1284,7 @@ impl_stable_hash_for!(struct infer::canonical::CanonicalVarInfo {\n \n impl_stable_hash_for!(enum infer::canonical::CanonicalVarKind {\n     Ty(k),\n-    Region\n+    Region(ui),\n });\n \n impl_stable_hash_for!(enum infer::canonical::CanonicalTyVarKind {"}, {"sha": "536da55adc44b4152266d3cf09e50351dbe083a6", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -261,7 +261,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::ReScope(_)\n             | ty::RePlaceholder(..)\n             | ty::ReEmpty\n-            | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n+            | ty::ReErased => self.canonicalize_region_mode\n+                .canonicalize_free_region(self, r),\n \n             ty::ReClosureBound(..) | ty::ReCanonical(_) => {\n                 bug!(\"canonical region encountered during canonicalization\")\n@@ -353,6 +354,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         if !value.has_type_flags(needs_canonical_flags) {\n             let out_value = gcx.lift(value).unwrap();\n             let canon_value = Canonical {\n+                max_universe: ty::UniverseIndex::ROOT,\n                 variables: List::empty(),\n                 value: out_value,\n             };\n@@ -383,7 +385,14 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n \n         let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);\n \n+        let max_universe = canonical_variables\n+            .iter()\n+            .map(|cvar| cvar.universe())\n+            .max()\n+            .unwrap_or(ty::UniverseIndex::ROOT);\n+\n         Canonical {\n+            max_universe,\n             variables: canonical_variables,\n             value: out_value,\n         }\n@@ -451,8 +460,10 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     }\n \n     fn canonical_var_for_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        // TODO: root is not always what we want here, but we'll\n+        // address that in a later commit.\n         let info = CanonicalVarInfo {\n-            kind: CanonicalVarKind::Region,\n+            kind: CanonicalVarKind::Region(ty::UniverseIndex::ROOT),\n         };\n         let b = self.canonical_var(info, r.into());\n         debug_assert_eq!(ty::INNERMOST, b.level);"}, {"sha": "24864d779273b3eb5f9eb356f61fe99fe2828f41", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -53,6 +53,7 @@ mod substitute;\n /// numbered starting from 0 in order of first appearance.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub struct Canonical<'gcx, V> {\n+    pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'gcx>,\n     pub value: V,\n }\n@@ -95,6 +96,12 @@ pub struct CanonicalVarInfo {\n     pub kind: CanonicalVarKind,\n }\n \n+impl CanonicalVarInfo {\n+    pub fn universe(self) -> ty::UniverseIndex {\n+        self.kind.universe()\n+    }\n+}\n+\n /// Describes the \"kind\" of the canonical variable. This is a \"kind\"\n /// in the type-theory sense of the term -- i.e., a \"meta\" type system\n /// that analyzes type-like values.\n@@ -104,7 +111,22 @@ pub enum CanonicalVarKind {\n     Ty(CanonicalTyVarKind),\n \n     /// Region variable `'?R`.\n-    Region,\n+    Region(ty::UniverseIndex),\n+}\n+\n+\n+impl CanonicalVarKind {\n+    pub fn universe(self) -> ty::UniverseIndex {\n+        match self {\n+            // At present, we don't support higher-ranked\n+            // quantification over types, so all type variables are in\n+            // the root universe.\n+            CanonicalVarKind::Ty(_) => ty::UniverseIndex::ROOT,\n+\n+            // Region variables can be created in sub-universes.\n+            CanonicalVarKind::Region(ui) => ui,\n+        }\n+    }\n }\n \n /// Rust actually has more than one category of type variables;\n@@ -220,8 +242,8 @@ impl<'gcx, V> Canonical<'gcx, V> {\n     /// let b: Canonical<'tcx, (T, Ty<'tcx>)> = a.unchecked_map(|v| (v, ty));\n     /// ```\n     pub fn unchecked_map<W>(self, map_op: impl FnOnce(V) -> W) -> Canonical<'gcx, W> {\n-        let Canonical { variables, value } = self;\n-        Canonical { variables, value: map_op(value) }\n+        let Canonical { max_universe, variables, value } = self;\n+        Canonical { max_universe, variables, value: map_op(value) }\n     }\n }\n \n@@ -293,8 +315,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 ty.into()\n             }\n \n-            CanonicalVarKind::Region => self\n-                .next_region_var(RegionVariableOrigin::MiscVariable(span))\n+            CanonicalVarKind::Region(ui) => self\n+                .next_region_var_in_universe(RegionVariableOrigin::MiscVariable(span), ui)\n                 .into(),\n         }\n     }\n@@ -314,6 +336,7 @@ CloneTypeFoldableImpls! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx, C> TypeFoldable<'tcx> for Canonical<'tcx, C> {\n+        max_universe,\n         variables,\n         value,\n     } where C: TypeFoldable<'tcx>\n@@ -322,7 +345,7 @@ BraceStructTypeFoldableImpl! {\n BraceStructLiftImpl! {\n     impl<'a, 'tcx, T> Lift<'tcx> for Canonical<'a, T> {\n         type Lifted = Canonical<'tcx, T::Lifted>;\n-        variables, value\n+        max_universe, variables, value\n     } where T: Lift<'tcx>\n }\n "}, {"sha": "d5233851db8c6dcb2bdec7e3e74f9e6448687e2d", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -38,19 +38,13 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ImpliedOutlivesBounds<\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n-        // FIXME the query should take a `ImpliedOutlivesBounds`\n-        let Canonical {\n-            variables,\n-            value:\n-                ParamEnvAnd {\n-                    param_env,\n-                    value: ImpliedOutlivesBounds { ty },\n-                },\n-        } = canonicalized;\n-        let canonicalized = Canonical {\n-            variables,\n-            value: param_env.and(ty),\n-        };\n+        // FIXME this `unchecked_map` is only necessary because the\n+        // query is defined as taking a `ParamEnvAnd<Ty>`; it should\n+        // take a `ImpliedOutlivesBounds` instead\n+        let canonicalized = canonicalized.unchecked_map(|ParamEnvAnd { param_env, value }| {\n+            let ImpliedOutlivesBounds { ty } = value;\n+            param_env.and(ty)\n+        });\n \n         tcx.implied_outlives_bounds(canonicalized)\n     }"}, {"sha": "cd7c6d76eab5782ce49dc647b3c48c5c5dae7c5e", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -59,18 +59,10 @@ where\n         // FIXME convert to the type expected by the `dropck_outlives`\n         // query. This should eventually be fixed by changing the\n         // *underlying query*.\n-        let Canonical {\n-            variables,\n-            value:\n-                ParamEnvAnd {\n-                    param_env,\n-                    value: DropckOutlives { dropped_ty },\n-                },\n-        } = canonicalized;\n-        let canonicalized = Canonical {\n-            variables,\n-            value: param_env.and(dropped_ty),\n-        };\n+        let canonicalized = canonicalized.unchecked_map(|ParamEnvAnd { param_env, value }| {\n+            let DropckOutlives { dropped_ty } = value;\n+            param_env.and(dropped_ty)\n+        });\n \n         tcx.dropck_outlives(canonicalized)\n     }"}, {"sha": "75f19d133e0e92cde1234a13865389f6c7da5132", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -56,7 +56,7 @@ fn main() {\n //        StorageLive(_4);\n //        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n //        FakeRead(ForLet, _4);\n-//        AscribeUserType(_4, o, UserTypeProjection { base: Ty(Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> }), projs: [] });\n+//        AscribeUserType(_4, o, UserTypeProjection { base: Ty(Canonical { max_universe: U0, variables: [], value: std::option::Option<std::boxed::Box<u32>> }), projs: [] });\n //        StorageLive(_5);\n //        StorageLive(_6);\n //        _6 = move _4;"}, {"sha": "88383190cbce6604e2d296397ce8748075f3ae1d", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -1,4 +1,4 @@\n-error: user substs: Canonical { variables: [], value: UserSubsts { substs: [u32], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U0, variables: [], value: UserSubsts { substs: [u32], user_self_ty: None } }\n   --> $DIR/dump-adt-brace-struct.rs:28:5\n    |\n LL |     SomeStruct::<u32> { t: 22 }; //~ ERROR [u32]"}, {"sha": "3beb994a4e8a5731636422713a23c31d5959541a", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ef27d82e0623554962e96a9b06921326da861d2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ef27d82e0623554962e96a9b06921326da861d2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr?ref=3ef27d82e0623554962e96a9b06921326da861d2", "patch": "@@ -1,22 +1,22 @@\n-error: user substs: Canonical { variables: [], value: UserSubsts { substs: [u32], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U0, variables: [], value: UserSubsts { substs: [u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:36:13\n    |\n LL |     let x = foo::<u32>; //~ ERROR [u32]\n    |             ^^^^^^^^^^\n \n-error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [?0, u32, ?1], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [?0, u32, ?1], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:42:13\n    |\n LL |     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [?0, u32, ?1]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: user substs: Canonical { variables: [], value: UserSubsts { substs: [u8, u16, u32], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U0, variables: [], value: UserSubsts { substs: [u8, u16, u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:46:13\n    |\n LL |     let x = <u8 as Bazoom<u16>>::method::<u32>; //~ ERROR [u8, u16, u32]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [?0, ?1, u32], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [?0, ?1, u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:54:5\n    |\n LL |     y.method::<u32>(44, 66); //~ ERROR [?0, ?1, u32]"}]}