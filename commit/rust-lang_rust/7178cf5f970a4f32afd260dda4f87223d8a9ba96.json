{"sha": "7178cf5f970a4f32afd260dda4f87223d8a9ba96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNzhjZjVmOTcwYTRmMzJhZmQyNjBkZGE0Zjg3MjIzZDhhOWJhOTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T20:56:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T20:56:18Z"}, "message": "Rollup merge of #62984 - nathanwhit:extra_semi_lint, r=varkor\n\nAdd lint for excess trailing semicolons\n\nCloses #60876.\nA caveat (not necessarily a negative, but something to consider) with this implementation is that excess semicolons after return/continue/break now also cause an 'unreachable statement' warning.\n\nFor the following example:\n```\nfn main() {\n    extra_semis();\n}\nfn extra_semis() -> i32 {\n    let mut sum = 0;;;\n    for i in 0..10 {\n        if i == 5 {\n            continue;;\n        } else if i == 9 {\n            break;;\n        } else {\n            sum += i;;\n        }\n    }\n    return sum;;\n}\n```\nThe output is:\n```\nwarning: unnecessary trailing semicolons\n --> src/main.rs:5:21\n  |\n5 |     let mut sum = 0;;;\n  |                     ^^ help: remove these semicolons\n  |\n  = note: `#[warn(redundant_semicolon)]` on by default\n\nwarning: unnecessary trailing semicolon\n --> src/main.rs:8:22\n  |\n8 |             continue;;\n  |                      ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n  --> src/main.rs:10:19\n   |\n10 |             break;;\n   |                   ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n  --> src/main.rs:12:22\n   |\n12 |             sum += i;;\n   |                      ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n  --> src/main.rs:15:16\n   |\n15 |     return sum;;\n   |                ^ help: remove this semicolon\n\nwarning: unreachable statement\n --> src/main.rs:8:22\n  |\n8 |             continue;;\n  |                      ^\n  |\n  = note: `#[warn(unreachable_code)]` on by default\n\nwarning: unreachable statement\n  --> src/main.rs:10:19\n   |\n10 |             break;;\n   |                   ^\n\nwarning: unreachable statement\n  --> src/main.rs:15:16\n   |\n15 |     return sum;;\n   |                ^\n\n```", "tree": {"sha": "1663a71b9c9cf82ff994b7ce35eaf1d52d170c27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1663a71b9c9cf82ff994b7ce35eaf1d52d170c27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7178cf5f970a4f32afd260dda4f87223d8a9ba96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVHVyCRBK7hj4Ov3rIwAAdHIIACdUrsuwA2io9W2BBPcH4m8k\npbfc/Emcn54n5j9sd+tF3+nscC3KvfFuC+zoTU/d8OY4/cDv66ALWSxToA3V2yed\n0mjCsx+jizbufQZx5+UZtShkRaBLd6R3dO/3cOSY6Ko3vi38K/hFpGrOCNzn+ILR\n6jziEI6HLJH0NitTPhHjW4lGWxBhcv3fecdr+luK4Ii1MzDYsyZqx086NZaLTS3I\n3txvfR6jPm3XZSU9MQu9LfnxMzJoxrFOEztPhSjBz5pwt5PfOao12wt2vY6iN+wH\n3lvJ1ebknX4AKAq9PP+sg9W/VM/mD9qk0dk2WlJYx/t+rd0O4TtEbeEiNagGhD4=\n=ITDS\n-----END PGP SIGNATURE-----\n", "payload": "tree 1663a71b9c9cf82ff994b7ce35eaf1d52d170c27\nparent c43d03a19f326f4a323569328cc501e86eb6d22e\nparent 76a134524295a04ed5f336265239ef5f39d089de\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565816178 +0200\ncommitter GitHub <noreply@github.com> 1565816178 +0200\n\nRollup merge of #62984 - nathanwhit:extra_semi_lint, r=varkor\n\nAdd lint for excess trailing semicolons\n\nCloses #60876.\nA caveat (not necessarily a negative, but something to consider) with this implementation is that excess semicolons after return/continue/break now also cause an 'unreachable statement' warning.\n\nFor the following example:\n```\nfn main() {\n    extra_semis();\n}\nfn extra_semis() -> i32 {\n    let mut sum = 0;;;\n    for i in 0..10 {\n        if i == 5 {\n            continue;;\n        } else if i == 9 {\n            break;;\n        } else {\n            sum += i;;\n        }\n    }\n    return sum;;\n}\n```\nThe output is:\n```\nwarning: unnecessary trailing semicolons\n --> src/main.rs:5:21\n  |\n5 |     let mut sum = 0;;;\n  |                     ^^ help: remove these semicolons\n  |\n  = note: `#[warn(redundant_semicolon)]` on by default\n\nwarning: unnecessary trailing semicolon\n --> src/main.rs:8:22\n  |\n8 |             continue;;\n  |                      ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n  --> src/main.rs:10:19\n   |\n10 |             break;;\n   |                   ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n  --> src/main.rs:12:22\n   |\n12 |             sum += i;;\n   |                      ^ help: remove this semicolon\n\nwarning: unnecessary trailing semicolon\n  --> src/main.rs:15:16\n   |\n15 |     return sum;;\n   |                ^ help: remove this semicolon\n\nwarning: unreachable statement\n --> src/main.rs:8:22\n  |\n8 |             continue;;\n  |                      ^\n  |\n  = note: `#[warn(unreachable_code)]` on by default\n\nwarning: unreachable statement\n  --> src/main.rs:10:19\n   |\n10 |             break;;\n   |                   ^\n\nwarning: unreachable statement\n  --> src/main.rs:15:16\n   |\n15 |     return sum;;\n   |                ^\n\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7178cf5f970a4f32afd260dda4f87223d8a9ba96", "html_url": "https://github.com/rust-lang/rust/commit/7178cf5f970a4f32afd260dda4f87223d8a9ba96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7178cf5f970a4f32afd260dda4f87223d8a9ba96/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43d03a19f326f4a323569328cc501e86eb6d22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43d03a19f326f4a323569328cc501e86eb6d22e", "html_url": "https://github.com/rust-lang/rust/commit/c43d03a19f326f4a323569328cc501e86eb6d22e"}, {"sha": "76a134524295a04ed5f336265239ef5f39d089de", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a134524295a04ed5f336265239ef5f39d089de", "html_url": "https://github.com/rust-lang/rust/commit/76a134524295a04ed5f336265239ef5f39d089de"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "fc416be8eeb504a6a7a582e15f9fe1d0c28d46e6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -24,6 +24,7 @@ extern crate rustc;\n \n mod error_codes;\n mod nonstandard_style;\n+mod redundant_semicolon;\n pub mod builtin;\n mod types;\n mod unused;\n@@ -55,6 +56,7 @@ use session::Session;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n+use redundant_semicolon::*;\n use nonstandard_style::*;\n use builtin::*;\n use types::*;\n@@ -98,6 +100,7 @@ macro_rules! early_lint_passes {\n             WhileTrue: WhileTrue,\n             NonAsciiIdents: NonAsciiIdents,\n             IncompleteFeatures: IncompleteFeatures,\n+            RedundantSemicolon: RedundantSemicolon,\n         ]);\n     )\n }"}, {"sha": "7c9df3578b59cd22a168821e94261d6eb8003bb1", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -0,0 +1,52 @@\n+use crate::lint::{EarlyLintPass, LintPass, EarlyContext, LintArray, LintContext};\n+use syntax::ast::{Stmt, StmtKind, ExprKind};\n+use syntax::errors::Applicability;\n+\n+declare_lint! {\n+    pub REDUNDANT_SEMICOLON,\n+    Warn,\n+    \"detects unnecessary trailing semicolons\"\n+}\n+\n+declare_lint_pass!(RedundantSemicolon => [REDUNDANT_SEMICOLON]);\n+\n+impl EarlyLintPass for RedundantSemicolon {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n+        if let StmtKind::Semi(expr) = &stmt.node {\n+            if let ExprKind::Tup(ref v) = &expr.node {\n+                if v.is_empty() {\n+                    // Strings of excess semicolons are encoded as empty tuple expressions\n+                    // during the parsing stage, so we check for empty tuple expressions\n+                    // which span only semicolons\n+                    if let Ok(source_str) = cx.sess().source_map().span_to_snippet(stmt.span) {\n+                        if source_str.chars().all(|c| c == ';') {\n+                            let multiple = (stmt.span.hi() - stmt.span.lo()).0 > 1;\n+                            let msg = if multiple {\n+                                \"unnecessary trailing semicolons\"\n+                            } else {\n+                                \"unnecessary trailing semicolon\"\n+                            };\n+                            let mut err = cx.struct_span_lint(\n+                                REDUNDANT_SEMICOLON,\n+                                stmt.span,\n+                                &msg\n+                            );\n+                            let suggest_msg = if multiple {\n+                                \"remove these semicolons\"\n+                            } else {\n+                                \"remove this semicolon\"\n+                            };\n+                            err.span_suggestion(\n+                                stmt.span,\n+                                &suggest_msg,\n+                                String::new(),\n+                                Applicability::MaybeIncorrect\n+                            );\n+                            err.emit();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "750d8fbbddc001e7f5421ec3a281efa9aeb77d29", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -167,7 +167,22 @@ impl<'a> Parser<'a> {\n                     if self.token == token::Semi {\n                         unused_attrs(&attrs, self);\n                         self.bump();\n-                        return Ok(None);\n+                        let mut last_semi = lo;\n+                        while self.token == token::Semi {\n+                            last_semi = self.token.span;\n+                            self.bump();\n+                        }\n+                        // We are encoding a string of semicolons as an\n+                        // an empty tuple that spans the excess semicolons\n+                        // to preserve this info until the lint stage\n+                        return Ok(Some(Stmt {\n+                            id: ast::DUMMY_NODE_ID,\n+                            span: lo.to(last_semi),\n+                            node: StmtKind::Semi(self.mk_expr(lo.to(last_semi),\n+                                ExprKind::Tup(Vec::new()),\n+                                ThinVec::new()\n+                            )),\n+                        }));\n                     }\n \n                     if self.token == token::CloseDelim(token::Brace) {"}, {"sha": "1307b5d6ddd82a0fbf424c688281201a48f80af3", "filename": "src/test/ui/block-expr-precedence.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fblock-expr-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fblock-expr-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expr-precedence.stderr?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -0,0 +1,8 @@\n+warning: unnecessary trailing semicolons\n+  --> $DIR/block-expr-precedence.rs:60:21\n+   |\n+LL |   if (true) { 12; };;; -num;\n+   |                     ^^ help: remove these semicolons\n+   |\n+   = note: `#[warn(redundant_semicolon)]` on by default\n+"}, {"sha": "f5edbe2a3af531b41ef7d0b9d44bdd5d249ac9a2", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -28,7 +28,10 @@ error: expected `{`, found `;`\n LL |     if not  // lack of braces is [sic]\n    |     -- this `if` statement has a condition, but no block\n LL |         println!(\"Then when?\");\n-   |                               ^ expected `{`\n+   |                               ^\n+   |                               |\n+   |                               expected `{`\n+   |                               help: try placing this code inside a block: `{ ; }`\n \n error: unexpected `2` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:26:24"}, {"sha": "c3f478fe4207757f11efb0d2669a1b7b18ce48c2", "filename": "src/test/ui/parser/doc-before-semi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.rs?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -3,4 +3,6 @@ fn main() {\n     //~^ ERROR found a documentation comment that doesn't document anything\n     //~| HELP maybe a comment was intended\n     ;\n+    //~^ WARNING unnecessary trailing semicolon\n+    //~| HELP remove this semicolon\n }"}, {"sha": "b9ac30b09b2f866ae433ca82709e6146a8008da9", "filename": "src/test/ui/parser/doc-before-semi.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-semi.stderr?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -6,6 +6,14 @@ LL |     /// hi\n    |\n    = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n \n+warning: unnecessary trailing semicolon\n+  --> $DIR/doc-before-semi.rs:5:5\n+   |\n+LL |     ;\n+   |     ^ help: remove this semicolon\n+   |\n+   = note: `#[warn(redundant_semicolon)]` on by default\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0585`."}, {"sha": "55835cb88f4e307c60789ca3506ed89ddb649d92", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -9,7 +9,7 @@ extern crate test_macros;\n \n #[recollect_attr]\n fn a() {\n-    let x: usize = \"hello\";;;;; //~ ERROR mismatched types\n+    let x: usize = \"hello\"; //~ ERROR mismatched types\n }\n \n #[recollect_attr]"}, {"sha": "0290f4b2cc98259377d9c6e0228906291933ed12", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7178cf5f970a4f32afd260dda4f87223d8a9ba96/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=7178cf5f970a4f32afd260dda4f87223d8a9ba96", "patch": "@@ -6,7 +6,7 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:12:20\n    |\n-LL |     let x: usize = \"hello\";;;;;\n+LL |     let x: usize = \"hello\";\n    |                    ^^^^^^^ expected usize, found reference\n    |\n    = note: expected type `usize`"}]}