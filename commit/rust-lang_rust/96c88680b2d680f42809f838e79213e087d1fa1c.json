{"sha": "96c88680b2d680f42809f838e79213e087d1fa1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Yzg4NjgwYjJkNjgwZjQyODA5ZjgzOGU3OTIxM2UwODdkMWZhMWM=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-24T21:59:59Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-24T22:00:03Z"}, "message": "hir_def: move visibility queries from hir_ty to hir_def", "tree": {"sha": "95f172cd93c206914c891f912f4105ac1b466621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f172cd93c206914c891f912f4105ac1b466621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c88680b2d680f42809f838e79213e087d1fa1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c88680b2d680f42809f838e79213e087d1fa1c", "html_url": "https://github.com/rust-lang/rust/commit/96c88680b2d680f42809f838e79213e087d1fa1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c88680b2d680f42809f838e79213e087d1fa1c/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42abfa0f885834c3c2bf61a4d0fafaa3f570debd", "url": "https://api.github.com/repos/rust-lang/rust/commits/42abfa0f885834c3c2bf61a4d0fafaa3f570debd", "html_url": "https://github.com/rust-lang/rust/commit/42abfa0f885834c3c2bf61a4d0fafaa3f570debd"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "068b2ee3858b6936d5d8056da8caa80fea631770", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=96c88680b2d680f42809f838e79213e087d1fa1c", "patch": "@@ -16,6 +16,7 @@ use crate::{\n     item_tree::ItemTree,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::DefMap,\n+    visibility::{self, Visibility},\n     AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId,\n     FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId, LocalFieldId, StaticId,\n     StaticLoc, StructId, StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc, UnionId,\n@@ -131,6 +132,12 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n \n     #[salsa::invoke(ImportMap::import_map_query)]\n     fn import_map(&self, krate: CrateId) -> Arc<ImportMap>;\n+\n+    #[salsa::invoke(visibility::field_visibilities_query)]\n+    fn field_visibilities(&self, var: VariantId) -> Arc<ArenaMap<LocalFieldId, Visibility>>;\n+\n+    #[salsa::invoke(visibility::function_visibility_query)]\n+    fn function_visibility(&self, def: FunctionId) -> Visibility;\n }\n \n fn crate_def_map_wait(db: &dyn DefDatabase, krate: CrateId) -> Arc<DefMap> {"}, {"sha": "7d00a37c40fa4e8160762d0bc7d08976e4eedd80", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=96c88680b2d680f42809f838e79213e087d1fa1c", "patch": "@@ -1,13 +1,17 @@\n //! Defines hir-level representation of visibility (e.g. `pub` and `pub(crate)`).\n \n+use std::sync::Arc;\n+\n use hir_expand::{hygiene::Hygiene, InFile};\n+use la_arena::ArenaMap;\n use syntax::ast;\n \n use crate::{\n     db::DefDatabase,\n     nameres::DefMap,\n     path::{ModPath, PathKind},\n-    ModuleId,\n+    resolver::HasResolver,\n+    FunctionId, HasModule, LocalFieldId, ModuleDefId, ModuleId, VariantId,\n };\n \n /// Visibility of an item, not yet resolved.\n@@ -190,3 +194,29 @@ impl Visibility {\n         }\n     }\n }\n+\n+/// Resolve visibility of all specific fields of a struct or union variant.\n+pub(crate) fn field_visibilities_query(\n+    db: &dyn DefDatabase,\n+    variant_id: VariantId,\n+) -> Arc<ArenaMap<LocalFieldId, Visibility>> {\n+    let var_data = match variant_id {\n+        VariantId::StructId(it) => db.struct_data(it).variant_data.clone(),\n+        VariantId::UnionId(it) => db.union_data(it).variant_data.clone(),\n+        VariantId::EnumVariantId(it) => {\n+            db.enum_data(it.parent).variants[it.local_id].variant_data.clone()\n+        }\n+    };\n+    let resolver = variant_id.module(db).resolver(db);\n+    let mut res = ArenaMap::default();\n+    for (field_id, field_data) in var_data.fields().iter() {\n+        res.insert(field_id, field_data.visibility.resolve(db, &resolver))\n+    }\n+    Arc::new(res)\n+}\n+\n+/// Resolve visibility of a function.\n+pub(crate) fn function_visibility_query(db: &dyn DefDatabase, def: FunctionId) -> Visibility {\n+    let resolver = ModuleDefId::from(def).module(db).unwrap().resolver(db);\n+    db.function_data(def).visibility.resolve(db, &resolver)\n+}"}, {"sha": "91a2e0b5be92e7a11b0fcf7969c27ac1eb49e257", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=96c88680b2d680f42809f838e79213e087d1fa1c", "patch": "@@ -4,8 +4,8 @@ use std::sync::Arc;\n \n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n-    db::DefDatabase, expr::ExprId, visibility::Visibility, ConstParamId, DefWithBodyId, FunctionId,\n-    GenericDefId, ImplId, LocalFieldId, TypeParamId, VariantId,\n+    db::DefDatabase, expr::ExprId, ConstParamId, DefWithBodyId, FunctionId, GenericDefId, ImplId,\n+    LocalFieldId, TypeParamId, VariantId,\n };\n use la_arena::ArenaMap;\n \n@@ -128,12 +128,6 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         krate: CrateId,\n         env: chalk_ir::Environment<chalk::Interner>,\n     ) -> chalk_ir::ProgramClauses<chalk::Interner>;\n-\n-    #[salsa::invoke(crate::lower::field_visibilities_query)]\n-    fn field_visibilities(&self, var: VariantId) -> Arc<ArenaMap<LocalFieldId, Visibility>>;\n-\n-    #[salsa::invoke(crate::lower::fn_visibility_query)]\n-    fn fn_visibility(&self, def: FunctionId) -> Visibility;\n }\n \n fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {"}, {"sha": "cbbb535e554b2442fac14c41d57dab3b26fe87b5", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=96c88680b2d680f42809f838e79213e087d1fa1c", "patch": "@@ -16,10 +16,9 @@ use hir_def::{\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    visibility::Visibility,\n     AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, ModuleDefId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n+    GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::name::Name;\n use la_arena::ArenaMap;\n@@ -868,28 +867,6 @@ pub(crate) fn field_types_query(\n     Arc::new(res)\n }\n \n-/// Resolve visibility of all specific fields of a struct or union variant.\n-pub(crate) fn field_visibilities_query(\n-    db: &dyn HirDatabase,\n-    variant_id: VariantId,\n-) -> Arc<ArenaMap<LocalFieldId, Visibility>> {\n-    let def_db = db.upcast();\n-    let var_data = variant_data(def_db, variant_id);\n-    let resolver = variant_id.module(def_db).resolver(def_db);\n-    let mut res = ArenaMap::default();\n-    for (field_id, field_data) in var_data.fields().iter() {\n-        res.insert(field_id, field_data.visibility.resolve(def_db, &resolver))\n-    }\n-    Arc::new(res)\n-}\n-\n-/// Resolve visibility of a function.\n-pub(crate) fn fn_visibility_query(db: &dyn HirDatabase, def: FunctionId) -> Visibility {\n-    let def_db = db.upcast();\n-    let resolver = ModuleDefId::from(def).module(def_db).unwrap().resolver(def_db);\n-    db.function_data(def).visibility.resolve(def_db, &resolver)\n-}\n-\n /// This query exists only to be used when resolving short-hand associated types\n /// like `T::Item`.\n ///"}, {"sha": "54192ec303f2fe9798bd7beb5842e56ca1ea3dea", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c88680b2d680f42809f838e79213e087d1fa1c/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=96c88680b2d680f42809f838e79213e087d1fa1c", "patch": "@@ -686,7 +686,7 @@ fn is_valid_candidate(\n                 }\n             }\n             if let Some(from_module) = visible_from_module {\n-                if !db.fn_visibility(m).is_visible_from(db.upcast(), from_module) {\n+                if !db.function_visibility(m).is_visible_from(db.upcast(), from_module) {\n                     cov_mark::hit!(autoderef_candidate_not_visible);\n                     return false;\n                 }"}]}