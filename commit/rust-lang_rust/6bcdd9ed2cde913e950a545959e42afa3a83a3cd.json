{"sha": "6bcdd9ed2cde913e950a545959e42afa3a83a3cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiY2RkOWVkMmNkZTkxM2U5NTBhNTQ1OTU5ZTQyYWZhM2E4M2EzY2Q=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-05-24T12:08:53Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-05-24T12:08:53Z"}, "message": "etc: Delete unused helper script", "tree": {"sha": "5630dea67518c3c0fe19ffadbc47e4931e8f2da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5630dea67518c3c0fe19ffadbc47e4931e8f2da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bcdd9ed2cde913e950a545959e42afa3a83a3cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcdd9ed2cde913e950a545959e42afa3a83a3cd", "html_url": "https://github.com/rust-lang/rust/commit/6bcdd9ed2cde913e950a545959e42afa3a83a3cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bcdd9ed2cde913e950a545959e42afa3a83a3cd/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c2642a571e951a15c2bc7550c86f583ad02ffcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2642a571e951a15c2bc7550c86f583ad02ffcd", "html_url": "https://github.com/rust-lang/rust/commit/0c2642a571e951a15c2bc7550c86f583ad02ffcd"}], "stats": {"total": 138, "additions": 0, "deletions": 138}, "files": [{"sha": "73ddfcb04cb2f0bc96302e3d5e2504b1d09e15b5", "filename": "src/etc/2014-06-rewrite-bytes-macros.py", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/0c2642a571e951a15c2bc7550c86f583ad02ffcd/src%2Fetc%2F2014-06-rewrite-bytes-macros.py", "raw_url": "https://github.com/rust-lang/rust/raw/0c2642a571e951a15c2bc7550c86f583ad02ffcd/src%2Fetc%2F2014-06-rewrite-bytes-macros.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2F2014-06-rewrite-bytes-macros.py?ref=0c2642a571e951a15c2bc7550c86f583ad02ffcd", "patch": "@@ -1,138 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import sys\n-import subprocess\n-import re\n-\n-\n-def main():\n-    if len(sys.argv) <= 1:\n-        print('Usage: %s [ --apply ] filename1.rs filename2.rs ...'\n-              % sys.argv[0])\n-    elif sys.argv[1] == '--apply':\n-        for filename in sys.argv[2:]:\n-            patch(filename)\n-    else:\n-        for filename in sys.argv[1:]:\n-            diff(filename)\n-\n-\n-def patch(filename):\n-    source = read(filename)\n-    rewritten = rewrite_bytes_macros(source)\n-    if rewritten is not None and rewritten != source:\n-        write(filename, rewritten)\n-\n-\n-def diff(filename):\n-    rewritten = rewrite_bytes_macros(read(filename))\n-    if rewritten is not None:\n-        p = subprocess.Popen(['diff', '-u', filename, '-'],\n-                             stdin=subprocess.PIPE)\n-        p.stdin.write(rewritten)\n-        p.stdin.close()\n-        p.wait()\n-\n-\n-def read(filename):\n-    with open(filename, 'rb') as f:\n-        return f.read()\n-\n-\n-def write(filename, content):\n-    with open(filename, 'wb') as f:\n-        f.write(content)\n-\n-\n-def rewrite_bytes_macros(source):\n-    rewritten, num_occurrences = BYTES_MACRO_RE.subn(rewrite_one_macro, source)\n-    if num_occurrences > 0:\n-        return rewritten\n-\n-\n-BYTES_MACRO_RE = re.compile(br'bytes!\\(  (?P<args>  [^)]*  )  \\)', re.VERBOSE)\n-\n-\n-def rewrite_one_macro(match):\n-    try:\n-        bytes = parse_bytes(split_args(match.group('args')))\n-        return b'b\"' + b''.join(map(escape, bytes)) + b'\"'\n-    except SkipThisRewrite:\n-        print('Skipped: %s' % match.group(0).decode('utf8', 'replace'))\n-        return match.group(0)\n-\n-\n-class SkipThisRewrite(Exception):\n-    pass\n-\n-\n-def split_args(args):\n-    previous = b''\n-    for arg in args.split(b','):\n-        if previous:\n-            arg = previous + b',' + arg\n-        if arg.count(b'\"') % 2 == 0:\n-            yield arg\n-            previous = b''\n-        else:\n-            previous = arg\n-    if previous:\n-        yield previous\n-\n-\n-def parse_bytes(args):\n-    for arg in args:\n-        arg = arg.strip()\n-        if (arg.startswith(b'\"') and arg.endswith(b'\"')) or (\n-                arg.startswith(b\"'\") and arg.endswith(b\"'\")):\n-            # Escaped newline means something different in Rust and Python.\n-            if b'\\\\\\n' in arg:\n-                raise SkipThisRewrite\n-            for byte in eval(b'u' + arg).encode('utf8'):\n-                yield ord(byte)\n-        else:\n-            if arg.endswith(b'u8'):\n-                arg = arg[:-2]\n-            # Assume that all Rust integer literals\n-            # are valid Python integer literals\n-            value = int(eval(arg))\n-            assert value <= 0xFF\n-            yield value\n-\n-\n-def escape(byte):\n-    c = chr(byte)\n-    escaped = {\n-        b'\\0': br'\\0',\n-        b'\\t': br'\\t',\n-        b'\\n': br'\\n',\n-        b'\\r': br'\\r',\n-        b'\\'': b'\\\\\\'',\n-        b'\\\\': br'\\\\',\n-    }.get(c)\n-    if escaped is not None:\n-        return escaped\n-    elif b' ' <= c <= b'~':\n-        return chr(byte)\n-    else:\n-        return ('\\\\x%02X' % byte).encode('ascii')\n-\n-\n-if str is not bytes:\n-    # Python 3.x\n-    ord = lambda x: x\n-    chr = lambda x: bytes([x])\n-\n-\n-if __name__ == '__main__':\n-    main()"}]}