{"sha": "6fef5f1e243c30deec7728616cdcf21c4547ab9e", "node_id": "C_kwDOAAsO6NoAKDZmZWY1ZjFlMjQzYzMwZGVlYzc3Mjg2MTZjZGNmMjFjNDU0N2FiOWU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-21T09:39:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-21T09:39:50Z"}, "message": "Rollup merge of #97219 - RalfJung:ptr-invalid, r=thomcc\n\nmake ptr::invalid not the same as a regular int2ptr cast\n\nIn Miri, we would like to distinguish `ptr::invalid` from `ptr::from_exposed_provenance`, so that we can provide better diagnostics issues like https://github.com/rust-lang/miri/issues/2134, and so that we can detect the UB in programs like\n```rust\nfn main() {\n    let x = 0u8;\n    let original_ptr = &x as *const u8;\n    let addr = original_ptr.expose_addr();\n    let new_ptr: *const u8 = core::ptr::invalid(addr);\n    unsafe {\n        dbg!(*new_ptr);\n    }\n}\n```\n\nTo achieve that, the two functions need to have different implementations. Currently, both are just `as` casts. We *could* add an intrinsic for this, but it turns out `transmute` already has the right behavior, at least as far as Miri is concerned. So I propose we just use that.\n\nCc `@Gankra`", "tree": {"sha": "d4240968f37b082ffb5261b45d0cdce26181e239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4240968f37b082ffb5261b45d0cdce26181e239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fef5f1e243c30deec7728616cdcf21c4547ab9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiiLNmCRBK7hj4Ov3rIwAA9C4IADMtZ++u9DwvaCPBQtIizLeL\nxTFSvFaLoFIJ1ziTlUl31vmT6VQE8sGwLC4ILrRvLwzrDC5GRxmimhFw/T0e7iUX\nBBKptkMTbMOlpkWT9RCGhK8tvz8WeMaC9odQ+zDUBZYMn3wwKgavRT0szEmab9a5\n2rWL3fcSv+xzjj5cUYsjHTilE3HbZSrRC73B77NtemRVtwcPrA0nqE0K9CJjrUz0\nenPdiQp3Btp7P573V2VtsedNNb+/HEDzDwSS8HQCsfBr7q6UXnIJYbGWiXg702wH\nEOwaQiHxSew4FPNYgwQ7L9CFl2GuOKD0y5vCoy1kENSE/Woc6dLZrqMMyc4efP8=\n=Ys1d\n-----END PGP SIGNATURE-----\n", "payload": "tree d4240968f37b082ffb5261b45d0cdce26181e239\nparent e5c7b21f395d57e870eb90292726d0824a34cd10\nparent 31c3c0449807d22a0f10e7a290a8e4ed114b98d4\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1653125990 +0200\ncommitter GitHub <noreply@github.com> 1653125990 +0200\n\nRollup merge of #97219 - RalfJung:ptr-invalid, r=thomcc\n\nmake ptr::invalid not the same as a regular int2ptr cast\n\nIn Miri, we would like to distinguish `ptr::invalid` from `ptr::from_exposed_provenance`, so that we can provide better diagnostics issues like https://github.com/rust-lang/miri/issues/2134, and so that we can detect the UB in programs like\n```rust\nfn main() {\n    let x = 0u8;\n    let original_ptr = &x as *const u8;\n    let addr = original_ptr.expose_addr();\n    let new_ptr: *const u8 = core::ptr::invalid(addr);\n    unsafe {\n        dbg!(*new_ptr);\n    }\n}\n```\n\nTo achieve that, the two functions need to have different implementations. Currently, both are just `as` casts. We *could* add an intrinsic for this, but it turns out `transmute` already has the right behavior, at least as far as Miri is concerned. So I propose we just use that.\n\nCc `@Gankra`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fef5f1e243c30deec7728616cdcf21c4547ab9e", "html_url": "https://github.com/rust-lang/rust/commit/6fef5f1e243c30deec7728616cdcf21c4547ab9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fef5f1e243c30deec7728616cdcf21c4547ab9e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c7b21f395d57e870eb90292726d0824a34cd10", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c7b21f395d57e870eb90292726d0824a34cd10", "html_url": "https://github.com/rust-lang/rust/commit/e5c7b21f395d57e870eb90292726d0824a34cd10"}, {"sha": "31c3c0449807d22a0f10e7a290a8e4ed114b98d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c3c0449807d22a0f10e7a290a8e4ed114b98d4", "html_url": "https://github.com/rust-lang/rust/commit/31c3c0449807d22a0f10e7a290a8e4ed114b98d4"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "dc229c9ff9b44594645573104ea46b13157686ec", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fef5f1e243c30deec7728616cdcf21c4547ab9e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fef5f1e243c30deec7728616cdcf21c4547ab9e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=6fef5f1e243c30deec7728616cdcf21c4547ab9e", "patch": "@@ -555,7 +555,11 @@ pub const fn null_mut<T>() -> *mut T {\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n pub const fn invalid<T>(addr: usize) -> *const T {\n     // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-    addr as *const T\n+    // We use transmute rather than a cast so tools like Miri can tell that this\n+    // is *not* the same as from_exposed_addr.\n+    // SAFETY: every valid integer is also a valid pointer (as long as you don't dereference that\n+    // pointer).\n+    unsafe { mem::transmute(addr) }\n }\n \n /// Creates an invalid mutable pointer with the given address.\n@@ -582,7 +586,11 @@ pub const fn invalid<T>(addr: usize) -> *const T {\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n     // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-    addr as *mut T\n+    // We use transmute rather than a cast so tools like Miri can tell that this\n+    // is *not* the same as from_exposed_addr.\n+    // SAFETY: every valid integer is also a valid pointer (as long as you don't dereference that\n+    // pointer).\n+    unsafe { mem::transmute(addr) }\n }\n \n /// Convert an address back to a pointer, picking up a previously 'exposed' provenance."}]}