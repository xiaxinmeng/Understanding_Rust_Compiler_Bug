{"sha": "d75f861518cb3b43acd1ae774fd13605a5dfd2d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NWY4NjE1MThjYjNiNDNhY2QxYWU3NzRmZDEzNjA1YTVkZmQyZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-05T12:52:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-05T12:52:30Z"}, "message": "Auto merge of #30102 - jFransham:feature/better-lifetime-errors, r=Manishearth\n\nFixes #30086", "tree": {"sha": "2c19d2cf04d30e0ab8a457d9143dc2ec26624987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c19d2cf04d30e0ab8a457d9143dc2ec26624987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75f861518cb3b43acd1ae774fd13605a5dfd2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75f861518cb3b43acd1ae774fd13605a5dfd2d9", "html_url": "https://github.com/rust-lang/rust/commit/d75f861518cb3b43acd1ae774fd13605a5dfd2d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75f861518cb3b43acd1ae774fd13605a5dfd2d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427514f550e69798e5146de54aff8d7816c523c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/427514f550e69798e5146de54aff8d7816c523c5", "html_url": "https://github.com/rust-lang/rust/commit/427514f550e69798e5146de54aff8d7816c523c5"}, {"sha": "829e8bf2a51b56681fc16bd71140668a1c93d9b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/829e8bf2a51b56681fc16bd71140668a1c93d9b4", "html_url": "https://github.com/rust-lang/rust/commit/829e8bf2a51b56681fc16bd71140668a1c93d9b4"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "d8fc76c76f9e84aaeb4c915eaa0f28d57c9ed989", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d75f861518cb3b43acd1ae774fd13605a5dfd2d9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75f861518cb3b43acd1ae774fd13605a5dfd2d9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d75f861518cb3b43acd1ae774fd13605a5dfd2d9", "patch": "@@ -203,11 +203,15 @@ fn report_elision_failure(\n {\n     let mut m = String::new();\n     let len = params.len();\n+    let mut any_lifetimes = false;\n+\n     for (i, info) in params.into_iter().enumerate() {\n         let ElisionFailureInfo {\n             name, lifetime_count: n, have_bound_regions\n         } = info;\n \n+        any_lifetimes = any_lifetimes || (n > 0);\n+\n         let help_name = if name.is_empty() {\n             format!(\"argument {}\", i + 1)\n         } else {\n@@ -229,17 +233,26 @@ fn report_elision_failure(\n             m.push_str(\", \");\n         }\n     }\n-    if len == 1 {\n-        fileline_help!(tcx.sess, default_span,\n-                       \"this function's return type contains a borrowed value, but \\\n-                        the signature does not say which {} it is borrowed from\",\n-                       m);\n-    } else if len == 0 {\n+\n+    if len == 0 {\n         fileline_help!(tcx.sess, default_span,\n                        \"this function's return type contains a borrowed value, but \\\n                         there is no value for it to be borrowed from\");\n         fileline_help!(tcx.sess, default_span,\n                        \"consider giving it a 'static lifetime\");\n+    } else if !any_lifetimes {\n+        fileline_help!(tcx.sess, default_span,\n+                       \"this function's return type contains a borrowed value with \\\n+                        an elided lifetime, but the lifetime cannot be derived from \\\n+                        the arguments\");\n+        fileline_help!(tcx.sess, default_span,\n+                       \"consider giving it an explicit bounded or 'static \\\n+                        lifetime\");\n+    } else if len == 1 {\n+        fileline_help!(tcx.sess, default_span,\n+                       \"this function's return type contains a borrowed value, but \\\n+                        the signature does not say which {} it is borrowed from\",\n+                       m);\n     } else {\n         fileline_help!(tcx.sess, default_span,\n                        \"this function's return type contains a borrowed value, but \\"}, {"sha": "010803bf25b8a4efd352c6513e9a8d363783b652", "filename": "src/test/compile-fail/issue-26638.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d75f861518cb3b43acd1ae774fd13605a5dfd2d9/src%2Ftest%2Fcompile-fail%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75f861518cb3b43acd1ae774fd13605a5dfd2d9/src%2Ftest%2Fcompile-fail%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26638.rs?ref=d75f861518cb3b43acd1ae774fd13605a5dfd2d9", "patch": "@@ -14,6 +14,10 @@ fn parse_type(iter: Box<Iterator<Item=&str>+'static>) -> &str { iter.next() }\n \n fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n //~^ ERROR missing lifetime specifier [E0106]\n-//~^^ HELP 0 elided free lifetimes\n+//~^^ HELP lifetime cannot be derived\n+\n+fn parse_type_3() -> &str { unimplemented!() }\n+//~^ ERROR missing lifetime specifier [E0106]\n+//~^^ HELP no value for it to be borrowed from\n \n fn main() {}"}]}