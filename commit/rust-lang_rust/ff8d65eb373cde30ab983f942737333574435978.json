{"sha": "ff8d65eb373cde30ab983f942737333574435978", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOGQ2NWViMzczY2RlMzBhYjk4M2Y5NDI3MzczMzM1NzQ0MzU5Nzg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-18T20:05:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-23T22:23:02Z"}, "message": "extra: give up trying to make more fields of context cloneable, just use ARCs.", "tree": {"sha": "7937e60021134361c9f42293d82b7f3f2066ea22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7937e60021134361c9f42293d82b7f3f2066ea22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff8d65eb373cde30ab983f942737333574435978", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8d65eb373cde30ab983f942737333574435978", "html_url": "https://github.com/rust-lang/rust/commit/ff8d65eb373cde30ab983f942737333574435978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff8d65eb373cde30ab983f942737333574435978/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa8553e41735d94cab81dba68c284d81e3f23107", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8553e41735d94cab81dba68c284d81e3f23107", "html_url": "https://github.com/rust-lang/rust/commit/fa8553e41735d94cab81dba68c284d81e3f23107"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "2c2a2a6e90fa6a1f98db44add8812105cf802d30", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ff8d65eb373cde30ab983f942737333574435978/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff8d65eb373cde30ab983f942737333574435978/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=ff8d65eb373cde30ab983f942737333574435978", "patch": "@@ -15,7 +15,7 @@ use digest::DigestUtil;\n use json;\n use sha1::Sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n-use arc::RWARC;\n+use arc::{ARC,RWARC};\n use treemap::TreeMap;\n \n use std::cell::Cell;\n@@ -174,11 +174,12 @@ impl Logger {\n     }\n }\n \n+#[deriving(Clone)]\n struct Context {\n     db: RWARC<Database>,\n-    logger: Logger,\n-    cfg: json::Object,\n-    freshness: TreeMap<~str,@fn(&str,&str)->bool>\n+    logger: RWARC<Logger>,\n+    cfg: ARC<json::Object>,\n+    freshness: ARC<TreeMap<~str,~fn(&str,&str)->bool>>\n }\n \n struct Prep<'self> {\n@@ -228,12 +229,14 @@ fn digest_file(path: &Path) -> ~str {\n \n impl Context {\n \n-    pub fn new(db: RWARC<Database>, lg: Logger, cfg: json::Object) -> Context {\n+    pub fn new(db: RWARC<Database>,\n+               lg: RWARC<Logger>,\n+               cfg: ARC<json::Object>) -> Context {\n         Context {\n             db: db,\n             logger: lg,\n             cfg: cfg,\n-            freshness: TreeMap::new()\n+            freshness: ARC(TreeMap::new())\n         }\n     }\n \n@@ -267,19 +270,20 @@ impl<'self> Prep<'self> {\n     fn is_fresh(&self, cat: &str, kind: &str,\n                 name: &str, val: &str) -> bool {\n         let k = kind.to_owned();\n-        let f = self.ctxt.freshness.find(&k);\n+        let f = self.ctxt.freshness.get().find(&k);\n         let fresh = match f {\n             None => fail!(\"missing freshness-function for '%s'\", kind),\n             Some(f) => (*f)(name, val)\n         };\n-        let lg = self.ctxt.logger;\n-        if fresh {\n-            lg.info(fmt!(\"%s %s:%s is fresh\",\n-                         cat, kind, name));\n-        } else {\n-            lg.info(fmt!(\"%s %s:%s is not fresh\",\n-                         cat, kind, name))\n-        }\n+        do self.ctxt.logger.write |lg| {\n+            if fresh {\n+                lg.info(fmt!(\"%s %s:%s is fresh\",\n+                             cat, kind, name));\n+            } else {\n+                lg.info(fmt!(\"%s %s:%s is not fresh\",\n+                             cat, kind, name))\n+            }\n+        };\n         fresh\n     }\n \n@@ -380,13 +384,21 @@ fn test() {\n     }\n \n     let cx = Context::new(RWARC(Database::new(Path(\"db.json\"))),\n-                          Logger::new(), TreeMap::new());\n+                          RWARC(Logger::new()),\n+                          ARC(TreeMap::new()));\n \n     let s = do cx.with_prep(\"test1\") |prep| {\n+\n+        let subcx = cx.clone();\n+\n         prep.declare_input(\"file\", pth.to_str(), digest_file(&pth));\n         do prep.exec |_exe| {\n             let out = Path(\"foo.o\");\n             run::process_status(\"gcc\", [~\"foo.c\", ~\"-o\", out.to_str()]);\n+\n+            let _proof_of_concept = subcx.prep(\"subfn\");\n+            // Could run sub-rules inside here.\n+\n             out.to_str()\n         }\n     };"}]}