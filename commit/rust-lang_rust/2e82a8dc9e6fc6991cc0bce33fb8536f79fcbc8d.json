{"sha": "2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlODJhOGRjOWU2ZmM2OTkxY2MwYmNlMzNmYjg1MzZmNzlmY2JjOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T09:29:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T09:29:35Z"}, "message": "Auto merge of #1304 - RalfJung:backtrace-sep, r=RalfJung\n\nadd empty line before backtrace, to separate it from help text\n\nI think this improves how things look, and makes it easier to see the help text (it currently kind of drowns next to the backtrace).\n\nBefore:\n```\nerror: unsupported operation: Miri does not support threading\n  --> /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys/unix/thread.rs:68:19\n   |\n68 |         let ret = libc::pthread_create(&mut native, &attr, thread_start, &*p as *const _ as *mut _);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Miri does not support threading\n   |\n   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n   = note: inside `std::sys::unix::thread::Thread::new` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys/unix/thread.rs:68:19\n   = note: inside `std::thread::Builder::spawn_unchecked::<[closure@tests/compile-fail/thread-spawn.rs:6:19: 6:24], ()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/thread/mod.rs:492:26\n   = note: inside `std::thread::Builder::spawn::<[closure@tests/compile-fail/thread-spawn.rs:6:19: 6:24], ()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/thread/mod.rs:386:18\n   = note: inside `std::thread::spawn::<[closure@tests/compile-fail/thread-spawn.rs:6:19: 6:24], ()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/thread/mod.rs:619:5\nnote: inside `main` at tests/compile-fail/thread-spawn.rs:6:5\n  --> tests/compile-fail/thread-spawn.rs:6:5\n   |\n6  |     thread::spawn(|| {});\n   |     ^^^^^^^^^^^^^^^^^^^^\n   = note: inside closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:67:34\n   = note: inside closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:52:73\n   = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<[closure@DefId(1:6030 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys_common/backtrace.rs:130:5\n   = note: inside closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:52:13\n   = note: inside `std::panicking::try::do_call::<[closure@DefId(1:6029 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/panicking.rs:331:40\n   = note: inside `std::panicking::try::<i32, [closure@DefId(1:6029 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe]>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/panicking.rs:274:15\n   = note: inside `std::panic::catch_unwind::<[closure@DefId(1:6029 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/panic.rs:394:14\n   = note: inside `std::rt::lang_start_internal` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:51:25\n   = note: inside `std::rt::lang_start::<()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:67:5\n```\nAfter:\n```\nerror: unsupported operation: Miri does not support threading\n  --> /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys/unix/thread.rs:68:19\n   |\n68 |         let ret = libc::pthread_create(&mut native, &attr, thread_start, &*p as *const _ as *mut _);\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Miri does not support threading\n   |\n   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n\n   = note: inside `std::sys::unix::thread::Thread::new` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys/unix/thread.rs:68:19\n   = note: inside `std::thread::Builder::spawn_unchecked::<[closure@tests/compile-fail/thread-spawn.rs:6:19: 6:24], ()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/thread/mod.rs:492:26\n   = note: inside `std::thread::Builder::spawn::<[closure@tests/compile-fail/thread-spawn.rs:6:19: 6:24], ()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/thread/mod.rs:386:18\n   = note: inside `std::thread::spawn::<[closure@tests/compile-fail/thread-spawn.rs:6:19: 6:24], ()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/thread/mod.rs:619:5\nnote: inside `main` at tests/compile-fail/thread-spawn.rs:6:5\n  --> tests/compile-fail/thread-spawn.rs:6:5\n   |\n6  |     thread::spawn(|| {});\n   |     ^^^^^^^^^^^^^^^^^^^^\n   = note: inside closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:67:34\n   = note: inside closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:52:73\n   = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<[closure@DefId(1:6030 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys_common/backtrace.rs:130:5\n   = note: inside closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:52:13\n   = note: inside `std::panicking::try::do_call::<[closure@DefId(1:6029 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/panicking.rs:331:40\n   = note: inside `std::panicking::try::<i32, [closure@DefId(1:6029 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe]>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/panicking.rs:274:15\n   = note: inside `std::panic::catch_unwind::<[closure@DefId(1:6029 ~ std[2f86]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/panic.rs:394:14\n   = note: inside `std::rt::lang_start_internal` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:51:25\n   = note: inside `std::rt::lang_start::<()>` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:67:5\n```\n\nWhat do you think?", "tree": {"sha": "55a2b9cf28b551ea2e519c3f49265b6f7e1d62f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a2b9cf28b551ea2e519c3f49265b6f7e1d62f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d", "html_url": "https://github.com/rust-lang/rust/commit/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910f87497c0c7893eb56eeb0c6467a4c0cf5e9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/910f87497c0c7893eb56eeb0c6467a4c0cf5e9ee", "html_url": "https://github.com/rust-lang/rust/commit/910f87497c0c7893eb56eeb0c6467a4c0cf5e9ee"}, {"sha": "95ea03c124d988c6c16d826c180a14447e53daa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ea03c124d988c6c16d826c180a14447e53daa8", "html_url": "https://github.com/rust-lang/rust/commit/95ea03c124d988c6c16d826c180a14447e53daa8"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "24e68934c66f8fadfacbdcab8a5e946dd0a301e2", "filename": "src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d", "patch": "@@ -106,7 +106,7 @@ pub fn report_error<'tcx, 'mir>(\n \n     e.print_backtrace();\n     let msg = e.to_string();\n-    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, &helps, true)\n+    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, helps, true)\n }\n \n /// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n@@ -115,7 +115,7 @@ fn report_msg<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     title: &str,\n     span_msg: String,\n-    helps: &[String],\n+    mut helps: Vec<String>,\n     error: bool,\n ) -> Option<i64> {\n     let span = if let Some(frame) = ecx.stack().last() {\n@@ -129,8 +129,12 @@ fn report_msg<'tcx, 'mir>(\n         ecx.tcx.sess.diagnostic().span_note_diag(span, title)\n     };\n     err.span_label(span, span_msg);\n-    for help in helps {\n-        err.help(help);\n+    if !helps.is_empty() {\n+        // Add visual separator before backtrace.\n+        helps.last_mut().unwrap().push_str(\"\\n\");\n+        for help in helps {\n+            err.help(&help);\n+        }\n     }\n     // Add backtrace\n     let frames = ecx.generate_stacktrace();\n@@ -182,7 +186,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     CreatedAlloc(AllocId(id)) =>\n                         format!(\"created allocation with id {}\", id),\n                 };\n-                report_msg(this, \"tracking was triggered\", msg, &[], false);\n+                report_msg(this, \"tracking was triggered\", msg, vec![], false);\n             }\n         });\n     }"}, {"sha": "094be194f178013be1368e71ff3291561e5b4ca8", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=2e82a8dc9e6fc6991cc0bce33fb8536f79fcbc8d", "patch": "@@ -186,8 +186,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n-    // FIXME: on Windows, locks and TLS dtor management allocate and leave that memory in `static`s.\n-    // So we need https://github.com/rust-lang/miri/issues/940 to fix the leaks there.\n+    // FIXME: on Windows, we ignore leaks (https://github.com/rust-lang/miri/issues/1302).\n     let ignore_leaks = config.ignore_leaks || tcx.sess.target.target.target_os == \"windows\";\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {"}]}