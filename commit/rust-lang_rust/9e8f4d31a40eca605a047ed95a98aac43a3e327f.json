{"sha": "9e8f4d31a40eca605a047ed95a98aac43a3e327f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOGY0ZDMxYTQwZWNhNjA1YTA0N2VkOTVhOThhYWM0M2EzZTMyN2Y=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-23T22:31:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-23T22:31:53Z"}, "message": "Pickup ConstReference patterns in FindUsages", "tree": {"sha": "7cd0ee2dfd328dd31db7ef7c25ebf3f4a8361e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd0ee2dfd328dd31db7ef7c25ebf3f4a8361e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8f4d31a40eca605a047ed95a98aac43a3e327f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f4d31a40eca605a047ed95a98aac43a3e327f", "html_url": "https://github.com/rust-lang/rust/commit/9e8f4d31a40eca605a047ed95a98aac43a3e327f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8f4d31a40eca605a047ed95a98aac43a3e327f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a307e4f31f3a66797628cee0645a38216398d9bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a307e4f31f3a66797628cee0645a38216398d9bd", "html_url": "https://github.com/rust-lang/rust/commit/a307e4f31f3a66797628cee0645a38216398d9bd"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "5d0449e5673a63dd6160b3255048bfc34407970f", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f4d31a40eca605a047ed95a98aac43a3e327f/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f4d31a40eca605a047ed95a98aac43a3e327f/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=9e8f4d31a40eca605a047ed95a98aac43a3e327f", "patch": "@@ -1224,4 +1224,29 @@ fn test() {}\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_const_in_pattern() {\n+        check(\n+            r#\"\n+const A$0: i32 = 42;\n+\n+fn main() {\n+    match A {\n+        A => (),\n+        _ => (),\n+    }\n+    if let A = A {}\n+}\n+\"#,\n+            expect![[r#\"\n+                A Const FileId(0) 0..18 6..7\n+\n+                FileId(0) 42..43\n+                FileId(0) 54..55\n+                FileId(0) 97..98\n+                FileId(0) 101..102\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "ddcfbd3f3ff3d7a5ac607f6d6fac827e3f5710c6", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e8f4d31a40eca605a047ed95a98aac43a3e327f/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8f4d31a40eca605a047ed95a98aac43a3e327f/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=9e8f4d31a40eca605a047ed95a98aac43a3e327f", "patch": "@@ -416,10 +416,11 @@ impl<'a> FindUsages<'a> {\n         sink: &mut dyn FnMut(FileId, FileReference) -> bool,\n     ) -> bool {\n         match NameClass::classify(self.sema, name) {\n-            Some(NameClass::PatFieldShorthand { local_def: _, field_ref }) => {\n-                if !matches!(self.def, Definition::Field(_) if &field_ref == self.def) {\n-                    return false;\n-                }\n+            Some(NameClass::PatFieldShorthand { local_def: _, field_ref })\n+                if matches!(\n+                    self.def, Definition::Field(_) if &field_ref == self.def\n+                ) =>\n+            {\n                 let FileRange { file_id, range } = self.sema.original_range(name.syntax());\n                 let reference = FileReference {\n                     range,\n@@ -429,6 +430,12 @@ impl<'a> FindUsages<'a> {\n                 };\n                 sink(file_id, reference)\n             }\n+            Some(NameClass::ConstReference(def)) if *self.def == def => {\n+                let FileRange { file_id, range } = self.sema.original_range(name.syntax());\n+                let reference =\n+                    FileReference { range, name: ast::NameLike::Name(name.clone()), access: None };\n+                sink(file_id, reference)\n+            }\n             _ => false, // not a usage\n         }\n     }"}]}