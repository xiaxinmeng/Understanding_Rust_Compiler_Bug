{"sha": "1f687374cae2fc1ccd8109fb02f939b76665dc8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNjg3Mzc0Y2FlMmZjMWNjZDgxMDlmYjAyZjkzOWI3NjY2NWRjOGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T19:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-18T19:03:54Z"}, "message": "Merge pull request #550 from RalfJung/cargo-miri-test\n\nFix cargo miri test", "tree": {"sha": "eda3674df6c33f28fed41179baac000b864387a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda3674df6c33f28fed41179baac000b864387a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f687374cae2fc1ccd8109fb02f939b76665dc8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGUSaCRBK7hj4Ov3rIwAAdHIIACnt0Ro8XoaXLW3TwhZOZ5Le\nmdWvfj1DXYhNpRgAJIU86q39GWuOHRHqIy8zJ5UBsubPQTAL/ObguAc/DBXpesvn\nBoOkSukn5gMhyQFcBRQ11ZoVngO8MnYV/N7risVVyCewCIgyx/zwghKEC3CV65s+\ngyEyfXZYn2lquBtD200F8vgh4yMWsEDu6/XNFTq9OrmuwFgELzfCtiZwPg313jEq\n/iKuaYsQYm9+HRnbjvAVSanpWGS9ymwF3p+WW5MU+5+dxmmrFjJgfWvBgwoKpuL/\ny0esue8ShMBtxknyfUTxjy2KFI5/QzQDOnkf416HLVy+PHe1mTdd3PGhIyT+6AI=\n=s3X/\n-----END PGP SIGNATURE-----\n", "payload": "tree eda3674df6c33f28fed41179baac000b864387a3\nparent 3a93831c5d6caa0b5944a728f7721d7d08173ede\nparent 4e0fe62bd90bffcec376e7b0877e87ebfece3cfb\nauthor Ralf Jung <post@ralfj.de> 1545159834 +0100\ncommitter GitHub <noreply@github.com> 1545159834 +0100\n\nMerge pull request #550 from RalfJung/cargo-miri-test\n\nFix cargo miri test"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f687374cae2fc1ccd8109fb02f939b76665dc8d", "html_url": "https://github.com/rust-lang/rust/commit/1f687374cae2fc1ccd8109fb02f939b76665dc8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f687374cae2fc1ccd8109fb02f939b76665dc8d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a93831c5d6caa0b5944a728f7721d7d08173ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a93831c5d6caa0b5944a728f7721d7d08173ede", "html_url": "https://github.com/rust-lang/rust/commit/3a93831c5d6caa0b5944a728f7721d7d08173ede"}, {"sha": "4e0fe62bd90bffcec376e7b0877e87ebfece3cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0fe62bd90bffcec376e7b0877e87ebfece3cfb", "html_url": "https://github.com/rust-lang/rust/commit/4e0fe62bd90bffcec376e7b0877e87ebfece3cfb"}], "stats": {"total": 133, "additions": 68, "deletions": 65}, "files": [{"sha": "d1ff80dec08afb8b87a74d87d468f7f2cf244212", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -1 +1 @@\n-nightly-2018-12-14\n+nightly-2018-12-18"}, {"sha": "0a8ddd95a76e5ae3ded5bc4dd65f91f2ad4e36a6", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -171,8 +171,7 @@ fn setup(ask_user: bool) {\n         } else {\n             println!(\"Installing xargo: `cargo install xargo -f`\");\n         }\n-        // FIXME: Go back to using releases, once a 0.3.13 got released.\n-        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\", \"-f\", \"--git\", \"https://github.com/japaric/xargo\"]).status().unwrap().success() {\n+        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\", \"-f\"]).status().unwrap().success() {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }\n@@ -310,9 +309,8 @@ fn main() {\n                 (MiriCommand::Test, \"lib\") => {\n                     // For libraries we call `cargo rustc -- --test <rustc args>`\n                     // Notice now that `--test` is a rustc arg rather than a cargo arg. This tells\n-                    // rustc to build a test harness which calls all #[test] functions. We don't\n-                    // use the harness since we execute each #[test] function's MIR ourselves before\n-                    // compilation even completes, but this option is necessary to build the library.\n+                    // rustc to build a test harness which calls all #[test] functions.\n+                    // We then execute that harness just like any other binary.\n                     if let Err(code) = process(\n                         vec![\"--\".to_string(), \"--test\".to_string()].into_iter().chain(\n                             args,"}, {"sha": "c2255d706339d8d6556f79ea8f1e492cff3709de", "filename": "src/bin/miri.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -23,8 +23,6 @@ use rustc_metadata::cstore::CStore;\n use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n use rustc::session::config::{self, Input, ErrorOutputType};\n-use rustc::hir::{self, itemlikevisit};\n-use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use syntax::ast;\n \n@@ -115,43 +113,12 @@ fn after_analysis<'a, 'tcx>(\n \n     let tcx = state.tcx.unwrap();\n \n-    if std::env::args().any(|arg| arg == \"--test\") {\n-        struct Visitor<'a, 'tcx: 'a> {\n-            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-            state: &'a CompileState<'a, 'tcx>,\n-            validate: bool,\n-        };\n-        impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n-            fn visit_item(&mut self, i: &'hir hir::Item) {\n-                if let hir::ItemKind::Fn(.., body_id) = i.node {\n-                    if i.attrs.iter().any(|attr| {\n-                        attr.name() == \"test\"\n-                    })\n-                    {\n-                        let did = self.tcx.hir().body_owner_def_id(body_id);\n-                        println!(\n-                            \"running test: {}\",\n-                            self.tcx.def_path_debug_str(did),\n-                        );\n-                        miri::eval_main(self.tcx, did, self.validate);\n-                        self.state.session.abort_if_errors();\n-                    }\n-                }\n-            }\n-            fn visit_trait_item(&mut self, _trait_item: &'hir hir::TraitItem) {}\n-            fn visit_impl_item(&mut self, _impl_item: &'hir hir::ImplItem) {}\n-        }\n-        state.hir_crate.unwrap().visit_all_item_likes(\n-            &mut Visitor { tcx, state, validate }\n-        );\n-    } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n-        let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n-        miri::eval_main(tcx, entry_def_id, validate);\n-\n-        state.session.abort_if_errors();\n-    } else {\n-        println!(\"no main function found, assuming auxiliary build\");\n-    }\n+    let (entry_node_id, _, _) = state.session.entry_fn.borrow().expect(\"no main function found!\");\n+    let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n+\n+    miri::eval_main(tcx, entry_def_id, validate);\n+\n+    state.session.abort_if_errors();\n }\n \n fn init_early_loggers() {"}, {"sha": "ab82223f234d0e342e8da3a7a0d89a17c9be74b7", "filename": "src/fn_call.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -426,6 +426,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let paths = &[\n                     (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(4096, dest.layout.size)),\n                     (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_NPROCESSORS_ONLN\"], Scalar::from_int(1, dest.layout.size)),\n                 ];\n                 let mut result = None;\n                 for &(path, path_value) in paths {\n@@ -452,6 +453,10 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 }\n             }\n \n+            \"isatty\" => {\n+                this.write_null(dest)?;\n+            }\n+\n             // Hook pthread calls that go to the thread-local storage memory subsystem\n             \"pthread_key_create\" => {\n                 let key_ptr = this.read_scalar(args[0])?.to_ptr()?;\n@@ -508,10 +513,6 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_null(dest)?;\n             }\n \n-            \"_tlv_atexit\" => {\n-                // FIXME: Register the dtor\n-            },\n-\n             // Determining stack base address\n             \"pthread_attr_init\" | \"pthread_attr_destroy\" | \"pthread_attr_get_np\" |\n             \"pthread_getattr_np\" | \"pthread_self\" | \"pthread_get_stacksize_np\" => {\n@@ -549,7 +550,18 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 this.write_null(dest)?;\n             }\n \n-            // Windows API subs\n+            // macOS API stubs\n+            \"_tlv_atexit\" => {\n+                // FIXME: Register the dtor\n+            },\n+            \"_NSGetArgc\" => {\n+                this.write_scalar(Scalar::Ptr(this.machine.argc.unwrap()), dest)?;\n+            },\n+            \"_NSGetArgv\" => {\n+                this.write_scalar(Scalar::Ptr(this.machine.argv.unwrap()), dest)?;\n+            },\n+\n+            // Windows API stubs\n             \"AddVectoredExceptionHandler\" => {\n                 // any non zero value works for the stdlib. This is just used for stackoverflows anyway\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n@@ -571,8 +583,6 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 // this is c::ERROR_CALL_NOT_IMPLEMENTED\n                 this.write_scalar(Scalar::from_int(120, dest.layout.size), dest)?;\n             },\n-\n-            // Windows TLS\n             \"TlsAlloc\" => {\n                 // This just creates a key; Windows does not natively support TLS dtors.\n "}, {"sha": "e41a92e55f72f322d2c57e9553f9fad7e0a85b04", "filename": "src/lib.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -121,7 +121,11 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n \n     // Second argument (argc): 1\n     let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n-    ecx.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n+    let argc = Scalar::from_int(1, dest.layout.size);\n+    ecx.write_scalar(argc, dest)?;\n+    let argc_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+    ecx.write_scalar(argc, argc_place.into())?;\n+    ecx.machine.argc = Some(argc_place.ptr.to_ptr()?);\n \n     // FIXME: extract main source file path\n     // Third argument (argv): &[b\"foo\"]\n@@ -132,7 +136,11 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     let foo_place = ecx.allocate(foo_layout, MiriMemoryKind::Env.into())?;\n     ecx.write_scalar(Scalar::Ptr(foo), foo_place.into())?;\n     ecx.memory_mut().mark_immutable(foo_place.to_ptr()?.alloc_id)?;\n-    ecx.write_scalar(foo_place.ptr, dest)?;\n+    let argv = foo_place.ptr;\n+    ecx.write_scalar(argv, dest)?;\n+    let argv_place = ecx.allocate(dest.layout, MiriMemoryKind::Env.into())?;\n+    ecx.write_scalar(argv, argv_place.into())?;\n+    ecx.machine.argv = Some(argv_place.ptr.to_ptr()?);\n \n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n@@ -253,6 +261,11 @@ pub struct Evaluator<'tcx> {\n     /// Miri does not expose env vars from the host to the emulated program\n     pub(crate) env_vars: HashMap<Vec<u8>, Pointer<Borrow>>,\n \n+    /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n+    /// These are *pointers* to argc/argv because macOS.\n+    pub(crate) argc: Option<Pointer<Borrow>>,\n+    pub(crate) argv: Option<Pointer<Borrow>>,\n+\n     /// TLS state\n     pub(crate) tls: TlsData<'tcx>,\n \n@@ -267,6 +280,8 @@ impl<'tcx> Evaluator<'tcx> {\n     fn new(validate: bool) -> Self {\n         Evaluator {\n             env_vars: HashMap::default(),\n+            argc: None,\n+            argv: None,\n             tls: TlsData::default(),\n             validate,\n             stacked_borrows: stacked_borrows::State::default(),"}, {"sha": "19e0a147408f29430559da11572af42f3b2a5bfe", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -7,11 +7,11 @@\n \n import sys, subprocess\n \n-def test_cargo_miri():\n-    print(\"==> Testing `cargo miri run` <==\")\n+def test(name, cmd, stdout_ref, stderr_ref):\n+    print(\"==> Testing `{}` <==\".format(name))\n     ## Call `cargo miri`, capture all output\n     p = subprocess.Popen(\n-        [\"cargo\", \"miri\", \"run\", \"-q\"],\n+        cmd,\n         stdout=subprocess.PIPE,\n         stderr=subprocess.PIPE\n     )\n@@ -26,17 +26,19 @@ def test_cargo_miri():\n     # Test for failures\n     if p.returncode != 0:\n         sys.exit(1)\n-    if stdout != open('stdout.ref').read():\n+    if stdout != open(stdout_ref).read():\n         print(\"stdout does not match reference\")\n         sys.exit(1)\n-    if stderr != open('stderr.ref').read():\n+    if stderr != open(stderr_ref).read():\n         print(\"stderr does not match reference\")\n         sys.exit(1)\n \n+def test_cargo_miri_run():\n+    test(\"cargo miri run\", [\"cargo\", \"miri\", \"run\", \"-q\"], \"stdout.ref\", \"stderr.ref\")\n+\n def test_cargo_miri_test():\n-    print(\"==> Testing `cargo miri test` <==\")\n-    subprocess.check_call([\"cargo\", \"miri\", \"test\"])\n+    test(\"cargo miri test\", [\"cargo\", \"miri\", \"test\", \"-q\"], \"test.stdout.ref\", \"test.stderr.ref\")\n \n-test_cargo_miri()\n+test_cargo_miri_run()\n test_cargo_miri_test()\n sys.exit(0)"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "test-cargo-miri/test.stderr.ref", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Ftest.stderr.ref", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Ftest.stderr.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stderr.ref?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d"}, {"sha": "94fd56b0cd6f35daa5ebb935ad751d0256fa65d3", "filename": "test-cargo-miri/test.stdout.ref", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -0,0 +1,7 @@\n+\n+running 2 tests\n+test bar ... ok\n+test baz ... ok\n+\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "9827ae82d6cfd622c8f60090aa67ae727e985be0", "filename": "test-cargo-miri/tests/foo.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Ftests%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/test-cargo-miri%2Ftests%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ffoo.rs?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -2,3 +2,10 @@\n fn bar() {\n     assert_eq!(4, 4);\n }\n+\n+// Having more than 1 test does seem to make a difference\n+// (i.e., this calls ptr::swap which having just one test does not).\n+#[test]\n+fn baz() {\n+    assert_eq!(5, 5);\n+}"}, {"sha": "b7140d72ac3a632d2bf496cf7eeb794cf23c7f78", "filename": "tests/run-pass/btreemap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f687374cae2fc1ccd8109fb02f939b76665dc8d/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f687374cae2fc1ccd8109fb02f939b76665dc8d/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=1f687374cae2fc1ccd8109fb02f939b76665dc8d", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Validation disabled due to https://github.com/rust-lang/rust/issues/54957\n-// compile-flags: -Zmiri-disable-validation\n-\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n pub enum Foo {\n     A(&'static str),"}]}