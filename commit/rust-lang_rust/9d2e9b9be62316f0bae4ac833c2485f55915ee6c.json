{"sha": "9d2e9b9be62316f0bae4ac833c2485f55915ee6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMmU5YjliZTYyMzE2ZjBiYWU0YWM4MzNjMjQ4NWY1NTkxNWVlNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-11T12:15:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-11T12:15:46Z"}, "message": "auto merge of #20859 : mahkoh/rust/as_mut_vec, r=nikomatsakis\n\nCloses #20822", "tree": {"sha": "77719657c95b4cbfb7fbde231237cdddcffc95ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77719657c95b4cbfb7fbde231237cdddcffc95ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d2e9b9be62316f0bae4ac833c2485f55915ee6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2e9b9be62316f0bae4ac833c2485f55915ee6c", "html_url": "https://github.com/rust-lang/rust/commit/9d2e9b9be62316f0bae4ac833c2485f55915ee6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d2e9b9be62316f0bae4ac833c2485f55915ee6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a71ce4f948dd5ae792db4a88c9cc2fae94dfb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a71ce4f948dd5ae792db4a88c9cc2fae94dfb0", "html_url": "https://github.com/rust-lang/rust/commit/71a71ce4f948dd5ae792db4a88c9cc2fae94dfb0"}, {"sha": "a03ae681d3f52ca6a6aaf7ebfd32a51af6d4e4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03ae681d3f52ca6a6aaf7ebfd32a51af6d4e4da", "html_url": "https://github.com/rust-lang/rust/commit/a03ae681d3f52ca6a6aaf7ebfd32a51af6d4e4da"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "e30e7e8600dcbc773117078d6957ee077c71c9ea", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d2e9b9be62316f0bae4ac833c2485f55915ee6c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d2e9b9be62316f0bae4ac833c2485f55915ee6c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9d2e9b9be62316f0bae4ac833c2485f55915ee6c", "patch": "@@ -302,6 +302,7 @@ impl String {\n     /// assert_eq!(String::from_utf16_lossy(v),\n     ///            \"\ud834\udd1emus\\u{FFFD}ic\\u{FFFD}\".to_string());\n     /// ```\n+    #[inline]\n     #[stable]\n     pub fn from_utf16_lossy(v: &[u16]) -> String {\n         unicode_str::utf16_items(v).map(|c| c.to_char_lossy()).collect()\n@@ -556,6 +557,7 @@ impl String {\n     /// assert_eq!(s.remove(1), 'o');\n     /// assert_eq!(s.remove(0), 'o');\n     /// ```\n+    #[inline]\n     #[stable]\n     pub fn remove(&mut self, idx: uint) -> char {\n         let len = self.len();\n@@ -582,6 +584,7 @@ impl String {\n     ///\n     /// If `idx` does not lie on a character boundary or is out of bounds, then\n     /// this function will panic.\n+    #[inline]\n     #[stable]\n     pub fn insert(&mut self, idx: uint, ch: char) {\n         let len = self.len();\n@@ -618,6 +621,7 @@ impl String {\n     /// }\n     /// assert_eq!(s.as_slice(), \"olleh\");\n     /// ```\n+    #[inline]\n     #[stable]\n     pub unsafe fn as_mut_vec<'a>(&'a mut self) -> &'a mut Vec<u8> {\n         &mut self.vec\n@@ -645,6 +649,7 @@ impl String {\n     /// v.push('a');\n     /// assert!(!v.is_empty());\n     /// ```\n+    #[inline]\n     #[stable]\n     pub fn is_empty(&self) -> bool { self.len() == 0 }\n \n@@ -801,6 +806,7 @@ impl Str for String {\n \n #[stable]\n impl Default for String {\n+    #[inline]\n     #[stable]\n     fn default() -> String {\n         String::new()\n@@ -809,13 +815,15 @@ impl Default for String {\n \n #[stable]\n impl fmt::String for String {\n+    #[inline]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(&**self, f)\n     }\n }\n \n #[unstable = \"waiting on fmt stabilization\"]\n impl fmt::Show for String {\n+    #[inline]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Show::fmt(&**self, f)\n     }\n@@ -842,6 +850,7 @@ impl<H: hash::Writer + hash::Hasher> hash::Hash<H> for String {\n impl<'a> Add<&'a str> for String {\n     type Output = String;\n \n+    #[inline]\n     fn add(mut self, other: &str) -> String {\n         self.push_str(other);\n         self\n@@ -881,6 +890,7 @@ impl ops::Index<ops::FullRange> for String {\n impl ops::Deref for String {\n     type Target = str;\n \n+    #[inline]\n     fn deref<'a>(&'a self) -> &'a str {\n         unsafe { mem::transmute(&self.vec[]) }\n     }\n@@ -895,6 +905,7 @@ pub struct DerefString<'a> {\n impl<'a> Deref for DerefString<'a> {\n     type Target = String;\n \n+    #[inline]\n     fn deref<'b>(&'b self) -> &'b String {\n         unsafe { mem::transmute(&*self.x) }\n     }\n@@ -933,6 +944,7 @@ pub trait ToString {\n }\n \n impl<T: fmt::String + ?Sized> ToString for T {\n+    #[inline]\n     fn to_string(&self) -> String {\n         use core::fmt::Writer;\n         let mut buf = String::new();\n@@ -943,12 +955,14 @@ impl<T: fmt::String + ?Sized> ToString for T {\n }\n \n impl IntoCow<'static, String, str> for String {\n+    #[inline]\n     fn into_cow(self) -> CowString<'static> {\n         Cow::Owned(self)\n     }\n }\n \n impl<'a> IntoCow<'a, String, str> for &'a str {\n+    #[inline]\n     fn into_cow(self) -> CowString<'a> {\n         Cow::Borrowed(self)\n     }\n@@ -966,6 +980,7 @@ impl<'a> Str for CowString<'a> {\n }\n \n impl fmt::Writer for String {\n+    #[inline]\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         self.push_str(s);\n         Ok(())"}]}