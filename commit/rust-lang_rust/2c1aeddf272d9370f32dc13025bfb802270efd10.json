{"sha": "2c1aeddf272d9370f32dc13025bfb802270efd10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMWFlZGRmMjcyZDkzNzBmMzJkYzEzMDI1YmZiODAyMjcwZWZkMTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T18:52:49Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T18:52:49Z"}, "message": "incr.comp.: Cache TypeckTables and add -Zincremental-queries flag.", "tree": {"sha": "166d5ba1ced6bd956934ea5a26c2af554ec77d51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/166d5ba1ced6bd956934ea5a26c2af554ec77d51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1aeddf272d9370f32dc13025bfb802270efd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1aeddf272d9370f32dc13025bfb802270efd10", "html_url": "https://github.com/rust-lang/rust/commit/2c1aeddf272d9370f32dc13025bfb802270efd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1aeddf272d9370f32dc13025bfb802270efd10/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1438307e9357904ecb5603023414e554dbeb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1438307e9357904ecb5603023414e554dbeb26", "html_url": "https://github.com/rust-lang/rust/commit/0b1438307e9357904ecb5603023414e554dbeb26"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "c9205f67f661f2b9ccf5f0b2a9b4349960aa5cff", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -327,6 +327,7 @@ impl DepGraph {\n         }\n     }\n \n+    #[inline]\n     pub fn fingerprint_of(&self, dep_node: &DepNode) -> Fingerprint {\n         match self.fingerprints.borrow().get(dep_node) {\n             Some(&fingerprint) => fingerprint,\n@@ -340,6 +341,11 @@ impl DepGraph {\n         self.data.as_ref().unwrap().previous.fingerprint_of(dep_node)\n     }\n \n+    #[inline]\n+    pub fn prev_dep_node_index_of(&self, dep_node: &DepNode) -> SerializedDepNodeIndex {\n+        self.data.as_ref().unwrap().previous.node_to_index(dep_node)\n+    }\n+\n     /// Indicates that a previous work product exists for `v`. This is\n     /// invoked during initial start-up based on what nodes are clean\n     /// (and what files exist in the incr. directory)."}, {"sha": "6c43b5c5ff197acc0c88704fac3ac35a5da2f783", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -44,6 +44,11 @@ impl PreviousDepGraph {\n         self.data.nodes[dep_node_index].0\n     }\n \n+    #[inline]\n+    pub fn node_to_index(&self, dep_node: &DepNode) -> SerializedDepNodeIndex {\n+        self.index[dep_node]\n+    }\n+\n     #[inline]\n     pub fn fingerprint_of(&self, dep_node: &DepNode) -> Option<Fingerprint> {\n         self.index"}, {"sha": "31730960a3458a2d8c925fd9b5dfa615b0333ef7", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -184,7 +184,7 @@ impl DefIndexAddressSpace {\n \n /// A DefId identifies a particular *definition*, by combining a crate\n /// index and a def index.\n-#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, Hash, Copy)]\n pub struct DefId {\n     pub krate: CrateNum,\n     pub index: DefIndex,"}, {"sha": "2857d50fc87bce4c39088e5897f36553210a5321", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -1042,6 +1042,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"enable incremental compilation (experimental)\"),\n     incremental_cc: bool = (false, parse_bool, [UNTRACKED],\n           \"enable cross-crate incremental compilation (even more experimental)\"),\n+    incremental_queries: bool = (false, parse_bool, [UNTRACKED],\n+          \"enable incremental compilation support for queries (experimental)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n         \"print high-level information about incremental reuse (or the lack thereof)\"),\n     incremental_dump_hash: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "066b80cefa4b5073a7d41ee83ee32c056470a228", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use dep_graph::SerializedDepNodeIndex;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use ty::{self, Ty, TyCtxt};\n use ty::maps::queries;\n@@ -25,6 +26,16 @@ pub trait QueryConfig {\n \n pub(super) trait QueryDescription<'tcx>: QueryConfig {\n     fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n+\n+    fn cache_on_disk(_: Self::Key) -> bool {\n+        false\n+    }\n+\n+    fn load_from_disk<'a>(_: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _: SerializedDepNodeIndex)\n+                          -> Self::Value {\n+        bug!(\"QueryDescription::load_from_disk() called for unsupport query.\")\n+    }\n }\n \n impl<'tcx, M: QueryConfig<Key=DefId>> QueryDescription<'tcx> for M {\n@@ -538,3 +549,19 @@ impl<'tcx> QueryDescription<'tcx> for queries::fully_normalize_monormophic_ty<'t\n         format!(\"normalizing types\")\n     }\n }\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n+    #[inline]\n+    fn cache_on_disk(def_id: Self::Key) -> bool {\n+        def_id.is_local()\n+    }\n+\n+    fn load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          id: SerializedDepNodeIndex)\n+                          -> Self::Value {\n+        let typeck_tables: ty::TypeckTables<'tcx> = tcx.on_disk_query_result_cache\n+                                                       .load_query_result(tcx, id);\n+        tcx.alloc_tables(typeck_tables)\n+    }\n+}\n+"}, {"sha": "d325d1437fc3489b0b059de0d86aadde1c646e05", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -32,6 +32,7 @@ use syntax_pos::{BytePos, Span, NO_EXPANSION, DUMMY_SP};\n use ty;\n use ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use ty::context::TyCtxt;\n+use ty::maps::config::QueryDescription;\n use ty::subst::Substs;\n \n // Some magic values used for verifying that encoding and decoding. These are\n@@ -229,9 +230,22 @@ impl<'sess> OnDiskCache<'sess> {\n \n \n         // Encode query results\n-        let query_result_index = EncodedQueryResultIndex::new();\n-        // ... we don't encode anything yet, actually\n+        let mut query_result_index = EncodedQueryResultIndex::new();\n \n+        // Encode TypeckTables\n+        for (def_id, entry) in tcx.maps.typeck_tables_of.borrow().map.iter() {\n+            if ty::maps::queries::typeck_tables_of::cache_on_disk(*def_id) {\n+                let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+\n+                // Record position of the cache entry\n+                query_result_index.push((dep_node, encoder.position()));\n+\n+                // Encode the type check tables with the SerializedDepNodeIndex\n+                // as tag.\n+                let typeck_tables: &ty::TypeckTables<'gcx> = &entry.value;\n+                encoder.encode_tagged(dep_node, typeck_tables)?;\n+            }\n+        }\n \n         // Encode query result index\n         let query_result_index_pos = encoder.position() as u64;\n@@ -522,9 +536,7 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx, 'x> {\n \n impl<'a, 'tcx, 'x> SpecializedDecoder<CrateNum> for CacheDecoder<'a, 'tcx, 'x> {\n     fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> {\n-        let cnum = CrateNum::from_u32(u32::decode(self)?);\n-        let mapped = self.map_encoded_cnum_to_current(cnum);\n-        Ok(mapped)\n+        ty_codec::decode_cnum(self)\n     }\n }\n \n@@ -576,6 +588,8 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<hir::HirId> for CacheDecoder<'a, 'tcx, 'x>\n                          .as_ref()\n                          .unwrap()[&def_path_hash];\n \n+        debug_assert!(def_id.is_local());\n+\n         // The ItemLocalId needs no remapping.\n         let local_id = hir::ItemLocalId::decode(self)?;\n \n@@ -721,6 +735,20 @@ impl<'enc, 'tcx, E> SpecializedEncoder<ty::GenericPredicates<'tcx>>\n     }\n }\n \n+impl<'enc, 'tcx, E> SpecializedEncoder<hir::HirId> for CacheEncoder<'enc, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder\n+{\n+    fn specialized_encode(&mut self, id: &hir::HirId) -> Result<(), Self::Error> {\n+        let hir::HirId {\n+            owner,\n+            local_id,\n+        } = *id;\n+\n+        owner.encode(self)?;\n+        local_id.encode(self)\n+    }\n+}\n+\n // NodeIds are not stable across compilation sessions, so we store them in their\n // HirId representation. This allows use to map them to the current NodeId.\n impl<'enc, 'tcx, E> SpecializedEncoder<NodeId> for CacheEncoder<'enc, 'tcx, E>"}, {"sha": "2f8f724edad1f0fc19c4da81b1d9552d0f9beb90", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -379,18 +379,26 @@ macro_rules! define_maps {\n             {\n                 debug_assert!(tcx.dep_graph.is_green(dep_node_index));\n \n-                // We don't do any caching yet, so recompute.\n-                // The diagnostics for this query have already been promoted to\n-                // the current session during try_mark_green(), so we can ignore\n-                // them here.\n-                let (result, _) = tcx.cycle_check(span, Query::$name(key), || {\n-                    tcx.sess.diagnostic().track_diagnostics(|| {\n-                        // The dep-graph for this computation is already in place\n-                        tcx.dep_graph.with_ignore(|| {\n-                            Self::compute_result(tcx, key)\n+                let result = if tcx.sess.opts.debugging_opts.incremental_queries &&\n+                                Self::cache_on_disk(key) {\n+                    let prev_dep_node_index =\n+                        tcx.dep_graph.prev_dep_node_index_of(dep_node);\n+                    Self::load_from_disk(tcx.global_tcx(), prev_dep_node_index)\n+                } else {\n+                    let (result, _ ) = tcx.cycle_check(span, Query::$name(key), || {\n+                        // The diagnostics for this query have already been\n+                        // promoted to the current session during\n+                        // try_mark_green(), so we can ignore them here.\n+                        tcx.sess.diagnostic().track_diagnostics(|| {\n+                            // The dep-graph for this computation is already in\n+                            // place\n+                            tcx.dep_graph.with_ignore(|| {\n+                                Self::compute_result(tcx, key)\n+                            })\n                         })\n-                    })\n-                })?;\n+                    })?;\n+                    result\n+                };\n \n                 // If -Zincremental-verify-ich is specified, re-hash results from\n                 // the cache and make sure that they have the expected fingerprint."}, {"sha": "8d94039c594f832297bb3d2b058e4ae220478d7b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1aeddf272d9370f32dc13025bfb802270efd10/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2c1aeddf272d9370f32dc13025bfb802270efd10", "patch": "@@ -1387,6 +1387,7 @@ actual:\\n\\\n         if let Some(ref incremental_dir) = self.props.incremental_dir {\n             rustc.args(&[\"-Z\", &format!(\"incremental={}\", incremental_dir.display())]);\n             rustc.args(&[\"-Z\", \"incremental-verify-ich\"]);\n+            rustc.args(&[\"-Z\", \"incremental-queries\"]);\n         }\n \n         match self.config.mode {\n@@ -2614,4 +2615,4 @@ fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n         stdout: stdout.into_bytes(),\n         stderr: stderr.into_bytes(),\n     })\n-}\n\\ No newline at end of file\n+}"}]}