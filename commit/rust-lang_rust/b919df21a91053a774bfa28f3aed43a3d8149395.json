{"sha": "b919df21a91053a774bfa28f3aed43a3d8149395", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTlkZjIxYTkxMDUzYTc3NGJmYTI4ZjNhZWQ0M2EzZDgxNDkzOTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-01T20:25:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T20:25:16Z"}, "message": "Rollup merge of #70590 - RalfJung:miri-backtrace, r=oli-obk\n\nMiri: make backtrace function names and spans match up\n\nCurrently, Miri backtraces are a bit confusing:\n```\nerror: Undefined Behavior: entering unreachable code\n  --> tests/compile-fail/never_transmute_void.rs:10:11\n   |\n10 |     match v {} //~ ERROR  entering unreachable code\n   |           ^ entering unreachable code\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\nnote: inside call to `f` at tests/compile-fail/never_transmute_void.rs:17:5\n  --> tests/compile-fail/never_transmute_void.rs:17:5\n   |\n17 |     f(v); //~ inside call to `f`\n   |     ^^^^\n   = note: inside call to `main` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:67:34\n   = note: inside call to closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:52:73\n   = note: inside call to closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys_common/backtrace.rs:130:5\n```\nWhen reading this like a normal backtrace, one would expect that e.g. the backrace involves the \"main\" function at \"libstd/rt.rs:67:34\". But that is not actually where we are in the main function, that is *where the main function is called*.\n\nThis is not how backtraces are usually rendered (including e.g. with `RUST_BACKTRACE=1`). Usually we print next to each function name where inside that function the frame is currently executing, not where the *parent* frame is executing. With this PR and the Miri side at https://github.com/rust-lang/miri/pull/1283, the backtrace now looks as follows:\n```\nerror: Undefined Behavior: entering unreachable code\n  --> tests/compile-fail/never_transmute_void.rs:10:11\n   |\n10 |     match v {} //~ ERROR entering unreachable code\n   |           ^ entering unreachable code\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n   = note: inside `f` at tests/compile-fail/never_transmute_void.rs:10:11\nnote: inside `main` at tests/compile-fail/never_transmute_void.rs:17:5\n  --> tests/compile-fail/never_transmute_void.rs:17:5\n   |\n17 |     f(v); //~ inside `main`\n   |     ^^^^\n   = note: inside closure at /home/r/src/rust/rustc/src/libstd/rt.rs:67:34\n   = note: inside closure at /home/r/src/rust/rustc/src/libstd/rt.rs:52:73\n   = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<[closure@DefId(1:6034 ~ std[87db]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc/src/libstd/sys_common/backtrace.rs:130:5\n```\nNow function name and printed line numbers match up in the notes.\n\nThis code is partially shared with const-eval, so the change also affects const-eval: instead of printing what is being called at some span, we print which function/constant this span is inside.\n\nWith this, we can also remove the `span` field from Miri's stack frames (which used to track the *caller span* of that frame, quite confusing), and then get of a whole lot of `span` arguments that ultimately just served to fill that field (and as a fallback for `caller_location`, which however was never actually used).\n\nr? @oli-obk", "tree": {"sha": "0f430e082451f2094d51a96c8d37d5a462f58d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f430e082451f2094d51a96c8d37d5a462f58d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b919df21a91053a774bfa28f3aed43a3d8149395", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehPitCRBK7hj4Ov3rIwAAdHIIAIRIlXojwSgulTl9sgA5l0tu\nKtjVAYX9OS+p597kGigQkcsh5mOTJbsfWvsGmbJPX61U+Nv2Ds8xMsckW04Qk5AO\n2XQTvTSQvCh8izjfXietTNCF2YIMN7JTTWGvcYCgmeMqZxDYJGAetJIURSx2QEVt\ncSYOva579W4kNLQ5JAB5JURIkQ7/aFHS2v3OTfJqDOWKKCWSZwT9Id1pteLBjosh\nq+vK2Xo5vbJk9IHDNXCWrv8Hbhy4LGuLACLbUs1vWJ3uXqreE5VAcYLxeCKNZmnH\nHegpW+3hdPzyR7RO+TcnEnhvQv194038xAX6z06qm2ZqFRzQN0RkvZJmJB8xEFI=\n=g1OT\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f430e082451f2094d51a96c8d37d5a462f58d93\nparent 0e0d84c13c55dad7ce0cc07b65366bc0e4198d15\nparent 96deb950ac5771801c66b329707c748f65d41b34\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585772716 +0200\ncommitter GitHub <noreply@github.com> 1585772716 +0200\n\nRollup merge of #70590 - RalfJung:miri-backtrace, r=oli-obk\n\nMiri: make backtrace function names and spans match up\n\nCurrently, Miri backtraces are a bit confusing:\n```\nerror: Undefined Behavior: entering unreachable code\n  --> tests/compile-fail/never_transmute_void.rs:10:11\n   |\n10 |     match v {} //~ ERROR  entering unreachable code\n   |           ^ entering unreachable code\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\nnote: inside call to `f` at tests/compile-fail/never_transmute_void.rs:17:5\n  --> tests/compile-fail/never_transmute_void.rs:17:5\n   |\n17 |     f(v); //~ inside call to `f`\n   |     ^^^^\n   = note: inside call to `main` at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:67:34\n   = note: inside call to closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/rt.rs:52:73\n   = note: inside call to closure at /home/r/.rustup/toolchains/miri/lib/rustlib/src/rust/src/libstd/sys_common/backtrace.rs:130:5\n```\nWhen reading this like a normal backtrace, one would expect that e.g. the backrace involves the \"main\" function at \"libstd/rt.rs:67:34\". But that is not actually where we are in the main function, that is *where the main function is called*.\n\nThis is not how backtraces are usually rendered (including e.g. with `RUST_BACKTRACE=1`). Usually we print next to each function name where inside that function the frame is currently executing, not where the *parent* frame is executing. With this PR and the Miri side at https://github.com/rust-lang/miri/pull/1283, the backtrace now looks as follows:\n```\nerror: Undefined Behavior: entering unreachable code\n  --> tests/compile-fail/never_transmute_void.rs:10:11\n   |\n10 |     match v {} //~ ERROR entering unreachable code\n   |           ^ entering unreachable code\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n   = note: inside `f` at tests/compile-fail/never_transmute_void.rs:10:11\nnote: inside `main` at tests/compile-fail/never_transmute_void.rs:17:5\n  --> tests/compile-fail/never_transmute_void.rs:17:5\n   |\n17 |     f(v); //~ inside `main`\n   |     ^^^^\n   = note: inside closure at /home/r/src/rust/rustc/src/libstd/rt.rs:67:34\n   = note: inside closure at /home/r/src/rust/rustc/src/libstd/rt.rs:52:73\n   = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<[closure@DefId(1:6034 ~ std[87db]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc/src/libstd/sys_common/backtrace.rs:130:5\n```\nNow function name and printed line numbers match up in the notes.\n\nThis code is partially shared with const-eval, so the change also affects const-eval: instead of printing what is being called at some span, we print which function/constant this span is inside.\n\nWith this, we can also remove the `span` field from Miri's stack frames (which used to track the *caller span* of that frame, quite confusing), and then get of a whole lot of `span` arguments that ultimately just served to fill that field (and as a fallback for `caller_location`, which however was never actually used).\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b919df21a91053a774bfa28f3aed43a3d8149395", "html_url": "https://github.com/rust-lang/rust/commit/b919df21a91053a774bfa28f3aed43a3d8149395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b919df21a91053a774bfa28f3aed43a3d8149395/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0d84c13c55dad7ce0cc07b65366bc0e4198d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0d84c13c55dad7ce0cc07b65366bc0e4198d15", "html_url": "https://github.com/rust-lang/rust/commit/0e0d84c13c55dad7ce0cc07b65366bc0e4198d15"}, {"sha": "96deb950ac5771801c66b329707c748f65d41b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/96deb950ac5771801c66b329707c748f65d41b34", "html_url": "https://github.com/rust-lang/rust/commit/96deb950ac5771801c66b329707c748f65d41b34"}], "stats": {"total": 353, "additions": 192, "deletions": 161}, "files": [{"sha": "d46f1bc4cc4d82fa2f4db3ecdf3989b9ec260b72", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -53,9 +53,8 @@ pub struct ConstEvalErr<'tcx> {\n \n #[derive(Debug)]\n pub struct FrameInfo<'tcx> {\n-    /// This span is in the caller.\n-    pub call_site: Span,\n     pub instance: ty::Instance<'tcx>,\n+    pub span: Span,\n     pub lint_root: Option<hir::HirId>,\n }\n \n@@ -65,12 +64,12 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n             if tcx.def_key(self.instance.def_id()).disambiguated_data.data\n                 == DefPathData::ClosureExpr\n             {\n-                write!(f, \"inside call to closure\")?;\n+                write!(f, \"inside closure\")?;\n             } else {\n-                write!(f, \"inside call to `{}`\", self.instance)?;\n+                write!(f, \"inside `{}`\", self.instance)?;\n             }\n-            if !self.call_site.is_dummy() {\n-                let lo = tcx.sess.source_map().lookup_char_pos(self.call_site.lo());\n+            if !self.span.is_dummy() {\n+                let lo = tcx.sess.source_map().lookup_char_pos(self.span.lo());\n                 write!(f, \" at {}:{}:{}\", lo.file.name, lo.line, lo.col.to_usize() + 1)?;\n             }\n             Ok(())\n@@ -168,13 +167,10 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             if let Some(span_msg) = span_msg {\n                 err.span_label(self.span, span_msg);\n             }\n-            // Add spans for the stacktrace.\n-            // Skip the last, which is just the environment of the constant.  The stacktrace\n-            // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n-            // on constant values.\n-            if !self.stacktrace.is_empty() {\n-                for frame_info in &self.stacktrace[..self.stacktrace.len() - 1] {\n-                    err.span_label(frame_info.call_site, frame_info.to_string());\n+            // Add spans for the stacktrace. Don't print a single-line backtrace though.\n+            if self.stacktrace.len() > 1 {\n+                for frame_info in &self.stacktrace {\n+                    err.span_label(frame_info.span, frame_info.to_string());\n                 }\n             }\n             // Let the caller finish the job."}, {"sha": "f7e28cf8d8c2f2ebfbd7715e0d0182a73a38eef2", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -55,6 +55,6 @@ pub fn error_to_const_error<'mir, 'tcx, M: Machine<'mir, 'tcx>>(\n     mut error: InterpErrorInfo<'tcx>,\n ) -> ConstEvalErr<'tcx> {\n     error.print_backtrace();\n-    let stacktrace = ecx.generate_stacktrace(None);\n+    let stacktrace = ecx.generate_stacktrace();\n     ConstEvalErr { error: error.kind, stacktrace, span: ecx.tcx.span }\n }"}, {"sha": "af79198ef6415631ae80ec419fefccba5aaead7c", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -46,7 +46,6 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     ecx.push_stack_frame(\n         cid.instance,\n-        body.span,\n         body,\n         Some(ret.into()),\n         StackPopCleanup::None { cleanup: false },"}, {"sha": "e92634714789495b383426a3d58b654235544f9d", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -8,9 +8,9 @@ use std::hash::Hash;\n use rustc_data_structures::fx::FxHashMap;\n \n use rustc_ast::ast::Mutability;\n+use rustc_hir::def_id::DefId;\n use rustc_middle::mir::AssertMessage;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{def_id::DefId, Span};\n \n use crate::interpret::{\n     self, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind, OpTy,\n@@ -64,7 +64,6 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter> {\n     /// If this returns successfully (`Ok`), the function should just be evaluated normally.\n     fn hook_panic_fn(\n         &mut self,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n     ) -> InterpResult<'tcx> {\n@@ -77,7 +76,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter> {\n \n             let msg_place = self.deref_operand(args[0])?;\n             let msg = Symbol::intern(self.read_str(msg_place)?);\n-            let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n+            let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n             Err(ConstEvalErrKind::Panic { msg, file, line, col }.into())\n         } else {\n@@ -191,7 +190,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n@@ -213,7 +211,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n             } else {\n                 // Some functions we support even if they are non-const -- but avoid testing\n                 // that for const fn!\n-                ecx.hook_panic_fn(span, instance, args)?;\n+                ecx.hook_panic_fn(instance, args)?;\n                 // We certainly do *not* want to actually call the fn\n                 // though, so be sure we return here.\n                 throw_unsup_format!(\"calling non-const function `{}`\", instance)\n@@ -248,13 +246,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.emulate_intrinsic(span, instance, args, ret)? {\n+        if ecx.emulate_intrinsic(instance, args, ret)? {\n             return Ok(());\n         }\n         // An intrinsic that we do not support"}, {"sha": "8f24fc451bc3f724af40b531b39e8907b7cf5f11", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::layout::{self, Align, HasDataLayout, LayoutOf, Size, TyAnd\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc_span::source_map::{self, Span, DUMMY_SP};\n+use rustc_span::source_map::DUMMY_SP;\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n@@ -57,9 +57,6 @@ pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     /// The def_id and substs of the current function.\n     pub instance: ty::Instance<'tcx>,\n \n-    /// The span of the call site.\n-    pub span: source_map::Span,\n-\n     /// Extra data for the machine.\n     pub extra: Extra,\n \n@@ -502,7 +499,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn push_stack_frame(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n-        span: Span,\n         body: &'mir mir::Body<'tcx>,\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n@@ -522,7 +518,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // empty local array, we fill it in below, after we are inside the stack frame and\n             // all methods actually know about the frame\n             locals: IndexVec::new(),\n-            span,\n             instance,\n             stmt: 0,\n             extra,\n@@ -541,7 +536,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // statics and constants don't have `Storage*` statements, no need to look for them\n                 Some(DefKind::Static) | Some(DefKind::Const) | Some(DefKind::AssocConst) => {}\n                 _ => {\n-                    trace!(\"push_stack_frame: {:?}: num_bbs: {}\", span, body.basic_blocks().len());\n                     for block in body.basic_blocks() {\n                         for stmt in block.statements.iter() {\n                             use rustc_middle::mir::StatementKind::{StorageDead, StorageLive};\n@@ -859,33 +853,21 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo<'tcx>> {\n-        let mut last_span = None;\n+    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n         for frame in self.stack().iter().rev() {\n-            // make sure we don't emit frames that are duplicates of the previous\n-            if explicit_span == Some(frame.span) {\n-                last_span = Some(frame.span);\n-                continue;\n-            }\n-            if let Some(last) = last_span {\n-                if last == frame.span {\n-                    continue;\n-                }\n-            } else {\n-                last_span = Some(frame.span);\n-            }\n-\n-            let lint_root = frame.current_source_info().and_then(|source_info| {\n+            let source_info = frame.current_source_info();\n+            let lint_root = source_info.and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }\n             });\n+            let span = source_info.map_or(DUMMY_SP, |source_info| source_info.span);\n \n-            frames.push(FrameInfo { call_site: frame.span, instance: frame.instance, lint_root });\n+            frames.push(FrameInfo { span, instance: frame.instance, lint_root });\n         }\n-        trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n+        trace!(\"generate stacktrace: {:#?}\", frames);\n         frames\n     }\n }\n@@ -899,7 +881,6 @@ where\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'ctx>, hasher: &mut StableHasher) {\n         self.body.hash_stable(hcx, hasher);\n         self.instance.hash_stable(hcx, hasher);\n-        self.span.hash_stable(hcx, hasher);\n         self.return_to_block.hash_stable(hcx, hasher);\n         self.return_place.as_ref().map(|r| &**r).hash_stable(hcx, hasher);\n         self.locals.hash_stable(hcx, hasher);"}, {"sha": "b60377fbcd69a261dfb4a0d3b0b5499a58220d89", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::ty::layout::{LayoutOf, Primitive, Size};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::Span;\n \n use super::{ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n \n@@ -78,7 +77,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Returns `true` if emulation happened.\n     pub fn emulate_intrinsic(\n         &mut self,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n@@ -101,7 +99,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `src/librustc_middle/ty/constness.rs`\n         match intrinsic_name {\n             sym::caller_location => {\n-                let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n+                let span = self.find_closest_untracked_caller_location();\n                 let location = self.alloc_caller_location_for_span(span);\n                 self.write_scalar(location.ptr, dest)?;\n             }\n@@ -118,7 +116,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::needs_drop => self.tcx.types.bool,\n                     sym::type_id => self.tcx.types.u64,\n                     sym::type_name => self.tcx.mk_static_str(),\n-                    _ => span_bug!(span, \"Already checked for nullary intrinsics\"),\n+                    _ => bug!(\"already checked for nullary intrinsics\"),\n                 };\n                 let val = self.const_eval(gid, ty)?;\n                 self.copy_op(val, dest)?;"}, {"sha": "f7e264b01d16df1d27f10ac7e1caf5f608cdcf54", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -12,18 +12,21 @@ use crate::interpret::{\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Walks up the callstack from the intrinsic's callsite, searching for the first callsite in a\n-    /// frame which is not `#[track_caller]`. If the first frame found lacks `#[track_caller]`, then\n-    /// `None` is returned and the callsite of the function invocation itself should be used.\n-    crate fn find_closest_untracked_caller_location(&self) -> Option<Span> {\n-        let mut caller_span = None;\n-        for next_caller in self.stack.iter().rev() {\n-            if !next_caller.instance.def.requires_caller_location(*self.tcx) {\n-                return caller_span;\n-            }\n-            caller_span = Some(next_caller.span);\n-        }\n-\n-        caller_span\n+    /// frame which is not `#[track_caller]`.\n+    crate fn find_closest_untracked_caller_location(&self) -> Span {\n+        self.stack\n+            .iter()\n+            .rev()\n+            // Find first non-`#[track_caller]` frame.\n+            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n+            // Assert that there is always such a frame.\n+            .unwrap()\n+            .current_source_info()\n+            // Assert that the frame we look at is actually executing code currently\n+            // (`current_source_info` is None when we are unwinding and the frame does\n+            // not require cleanup).\n+            .unwrap()\n+            .span\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}, {"sha": "48082a1e3469680126ecbb62ad9da812ada31cdb", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -7,7 +7,7 @@ use std::hash::Hash;\n \n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::{def_id::DefId, Span};\n+use rustc_span::def_id::DefId;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, Frame, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n@@ -135,7 +135,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// was used.\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,\n@@ -156,7 +155,6 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// responsibility to advance the instruction pointer as appropriate.\n     fn call_intrinsic(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, Self::PointerTag>, mir::BasicBlock)>,"}, {"sha": "6ca6f50b0ee7c35b1dcf8a4d6016d6a8b737ffe5", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -4,7 +4,6 @@ use std::convert::TryFrom;\n use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n use rustc_middle::ty::Instance;\n use rustc_middle::{mir, ty};\n-use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n@@ -71,14 +70,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Some((dest, ret)) => Some((self.eval_place(dest)?, ret)),\n                     None => None,\n                 };\n-                self.eval_fn_call(\n-                    fn_val,\n-                    terminator.source_info.span,\n-                    abi,\n-                    &args[..],\n-                    ret,\n-                    *cleanup,\n-                )?;\n+                self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup)?;\n             }\n \n             Drop { location, target, unwind } => {\n@@ -88,7 +80,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n                 let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n-                self.drop_in_place(place, instance, terminator.source_info.span, target, unwind)?;\n+                self.drop_in_place(place, instance, target, unwind)?;\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n@@ -196,7 +188,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     fn eval_fn_call(\n         &mut self,\n         fn_val: FnVal<'tcx, M::ExtraFnVal>,\n-        span: Span,\n         caller_abi: Abi,\n         args: &[OpTy<'tcx, M::PointerTag>],\n         ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n@@ -242,7 +233,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n                 assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n-                M::call_intrinsic(self, span, instance, args, ret, unwind)\n+                M::call_intrinsic(self, instance, args, ret, unwind)\n             }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n@@ -252,14 +243,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::InstanceDef::CloneShim(..)\n             | ty::InstanceDef::Item(_) => {\n                 // We need MIR for this fn\n-                let body = match M::find_mir_or_eval_fn(self, span, instance, args, ret, unwind)? {\n+                let body = match M::find_mir_or_eval_fn(self, instance, args, ret, unwind)? {\n                     Some(body) => body,\n                     None => return Ok(()),\n                 };\n \n                 self.push_stack_frame(\n                     instance,\n-                    span,\n                     body,\n                     ret.map(|p| p.0),\n                     StackPopCleanup::Goto { ret: ret.map(|p| p.1), unwind },\n@@ -407,7 +397,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     OpTy::from(ImmTy { layout: this_receiver_ptr, imm: receiver_place.ptr.into() });\n                 trace!(\"Patched self operand to {:#?}\", args[0]);\n                 // recurse with concrete function\n-                self.eval_fn_call(drop_fn, span, caller_abi, &args, ret, unwind)\n+                self.eval_fn_call(drop_fn, caller_abi, &args, ret, unwind)\n             }\n         }\n     }\n@@ -416,7 +406,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         place: PlaceTy<'tcx, M::PointerTag>,\n         instance: ty::Instance<'tcx>,\n-        span: Span,\n         target: mir::BasicBlock,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n@@ -444,7 +433,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         self.eval_fn_call(\n             FnVal::Instance(instance),\n-            span,\n             Abi::Rust,\n             &[arg.into()],\n             Some((dest.into(), target)),"}, {"sha": "f4cba875620ebe3c29b1b20b47e51b5811efddc1", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -183,7 +183,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n@@ -204,7 +203,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn call_intrinsic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n@@ -361,7 +359,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n         ecx.push_stack_frame(\n             Instance::new(def_id, substs),\n-            span,\n             dummy_body,\n             ret.map(Into::into),\n             StackPopCleanup::None { cleanup: false },"}, {"sha": "f1e91920f17f7b98a9a50db5b0a5b16312cb055d", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -5,7 +5,8 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside call to `foo` at $DIR/validate_uninhabited_zsts.rs:14:26\n+   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n+   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:14:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    | -----------------------------------"}, {"sha": "8ed1431dd31c089a98a5f75ed5e7d17a60859b2f", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -17,7 +17,8 @@ LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n    |     calling a function with ABI C using caller ABI Rust\n-   |     inside call to `call_rust_fn` at $DIR/abi-mismatch.rs:13:17\n+   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:9:5\n+   |     inside `VAL` at $DIR/abi-mismatch.rs:13:17\n ...\n LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n    | --------------------------------------------------------------------------------------"}, {"sha": "5d560fab8351a8cedd03c69ac4c61e26e75e0861", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -12,12 +12,15 @@ LL | |     // Code here does not matter - this is replaced by the\n LL | |     // real drop glue by the compiler.\n LL | |     drop_in_place(to_drop)\n LL | | }\n-   | |_^ calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n+   | | ^\n+   | | |\n+   | |_calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n+   |   inside `std::intrinsics::drop_in_place::<std::vec::Vec<i32>> - shim(Some(std::vec::Vec<i32>))` at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n    | \n   ::: $DIR/drop.rs:23:1\n    |\n LL |   };\n-   |   - inside call to `std::intrinsics::drop_in_place::<std::vec::Vec<i32>> - shim(Some(std::vec::Vec<i32>))` at $DIR/drop.rs:23:1\n+   |   - inside `TEST_BAD` at $DIR/drop.rs:23:1\n \n error: aborting due to previous error\n "}, {"sha": "f1a183b229dd46ee6ae712a8abd20d08a6611aa8", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -5,7 +5,8 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n    |           ptr_offset_from cannot compute offset of pointers into different allocations.\n-   |           inside call to `std::ptr::const_ptr::<impl *const Struct>::offset_from` at $DIR/offset_from_ub.rs:22:27\n+   |           inside `std::ptr::const_ptr::<impl *const Struct>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |           inside `DIFFERENT_ALLOC` at $DIR/offset_from_ub.rs:22:27\n    | \n   ::: $DIR/offset_from_ub.rs:16:1\n    |\n@@ -27,7 +28,8 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n    |           unable to turn bytes into a pointer\n-   |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:28:14\n+   |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |           inside `NOT_PTR` at $DIR/offset_from_ub.rs:28:14\n    | \n   ::: $DIR/offset_from_ub.rs:26:1\n    |\n@@ -44,7 +46,8 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n    |           exact_div: 1isize cannot be divided by 2isize without remainder\n-   |           inside call to `std::ptr::const_ptr::<impl *const u16>::offset_from` at $DIR/offset_from_ub.rs:36:14\n+   |           inside `std::ptr::const_ptr::<impl *const u16>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |           inside `NOT_MULTIPLE_OF_SIZE` at $DIR/offset_from_ub.rs:36:14\n    | \n   ::: $DIR/offset_from_ub.rs:31:1\n    |\n@@ -64,7 +67,8 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n    |           invalid use of NULL pointer\n-   |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:42:14\n+   |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |           inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:42:14\n    | \n   ::: $DIR/offset_from_ub.rs:39:1\n    |\n@@ -82,7 +86,8 @@ LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n    |           unable to turn bytes into a pointer\n-   |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:49:14\n+   |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n+   |           inside `DIFFERENT_INT` at $DIR/offset_from_ub.rs:49:14\n    | \n   ::: $DIR/offset_from_ub.rs:45:1\n    |"}, {"sha": "ca232380897e3baa9e3e4fe2393c2c70665ab566", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 129, "deletions": 65, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b919df21a91053a774bfa28f3aed43a3d8149395/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=b919df21a91053a774bfa28f3aed43a3d8149395", "patch": "@@ -4,76 +4,140 @@ error[E0080]: evaluation of constant value failed\n LL |     hint_unreachable()\n    |     ------------------\n    |     |\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n ...\n LL |     fake_type()\n    |     ^^^^^^^^^^^\n    |     |\n    |     reached the configured maximum number of stack frames\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n \n error: any use of this value will cause an error\n   --> $DIR/uninhabited-const-issue-61744.rs:12:36"}]}