{"sha": "b9b650c412d901dc92f795c4d32eb382f530f7e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YjY1MGM0MTJkOTAxZGM5MmY3OTVjNGQzMmViMzgyZjUzMGY3ZTE=", "commit": {"author": {"name": "James Sanderson", "email": "zofrex@gmail.com", "date": "2018-04-19T18:04:06Z"}, "committer": {"name": "James Sanderson", "email": "zofrex@gmail.com", "date": "2018-04-19T19:06:35Z"}, "message": "Gensym remaining identifiers", "tree": {"sha": "064dc2132ed797d000243b32dd4ed44af38a8e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064dc2132ed797d000243b32dd4ed44af38a8e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b650c412d901dc92f795c4d32eb382f530f7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b650c412d901dc92f795c4d32eb382f530f7e1", "html_url": "https://github.com/rust-lang/rust/commit/b9b650c412d901dc92f795c4d32eb382f530f7e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b650c412d901dc92f795c4d32eb382f530f7e1/comments", "author": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zofrex", "id": 22220, "node_id": "MDQ6VXNlcjIyMjIw", "avatar_url": "https://avatars.githubusercontent.com/u/22220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zofrex", "html_url": "https://github.com/zofrex", "followers_url": "https://api.github.com/users/zofrex/followers", "following_url": "https://api.github.com/users/zofrex/following{/other_user}", "gists_url": "https://api.github.com/users/zofrex/gists{/gist_id}", "starred_url": "https://api.github.com/users/zofrex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zofrex/subscriptions", "organizations_url": "https://api.github.com/users/zofrex/orgs", "repos_url": "https://api.github.com/users/zofrex/repos", "events_url": "https://api.github.com/users/zofrex/events{/privacy}", "received_events_url": "https://api.github.com/users/zofrex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3241d1350ab95e0a7ef4c84cbd828c207f211b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3241d1350ab95e0a7ef4c84cbd828c207f211b5", "html_url": "https://github.com/rust-lang/rust/commit/a3241d1350ab95e0a7ef4c84cbd828c207f211b5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "faeaed76c372a1a5190f388a49c341aa600b11f4", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=b9b650c412d901dc92f795c4d32eb382f530f7e1", "patch": "@@ -64,7 +64,7 @@ pub fn ordering_collapsed(cx: &mut ExtCtxt,\n }\n \n pub fn cs_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n-    let test_id = cx.ident_of(\"__cmp\");\n+    let test_id = cx.ident_of(\"cmp\").gensym();\n     let equals_path = cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n \n     let cmp_path = cx.std_path(&[\"cmp\", \"Ord\", \"cmp\"]);"}, {"sha": "a8c4e0a43ff7676773740ed487fe693c6a0647d7", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=b9b650c412d901dc92f795c4d32eb382f530f7e1", "patch": "@@ -123,7 +123,7 @@ pub fn some_ordering_collapsed(cx: &mut ExtCtxt,\n }\n \n pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n-    let test_id = cx.ident_of(\"__cmp\");\n+    let test_id = cx.ident_of(\"cmp\").gensym();\n     let ordering = cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n     let ordering_expr = cx.expr_path(ordering.clone());\n     let equals_expr = cx.expr_some(span, ordering_expr);"}, {"sha": "b546f5df15799467ad2daf2f8dd9408c4692a9e1", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=b9b650c412d901dc92f795c4d32eb382f530f7e1", "patch": "@@ -70,7 +70,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<E\n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = span.with_ctxt(cx.backtrace());\n     let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n-    let builder = Ident::from_str(\"__debug_trait_builder\");\n+    let builder = Ident::from_str(\"debug_trait_builder\").gensym();\n     let builder_expr = cx.expr_ident(span, builder.clone());\n \n     let fmt = substr.nonself_args[0].clone();"}, {"sha": "8799268b7e0a4c4db602a18dd2f73d1b100fc622", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b650c412d901dc92f795c4d32eb382f530f7e1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=b9b650c412d901dc92f795c4d32eb382f530f7e1", "patch": "@@ -1240,7 +1240,7 @@ impl<'a> MethodDef<'a> {\n         let vi_idents: Vec<ast::Ident> = self_arg_names.iter()\n             .map(|name| {\n                 let vi_suffix = format!(\"{}_vi\", &name[..]);\n-                cx.ident_of(&vi_suffix[..])\n+                cx.ident_of(&vi_suffix[..]).gensym()\n             })\n             .collect::<Vec<ast::Ident>>();\n \n@@ -1616,7 +1616,7 @@ impl<'a> TraitDef<'a> {\n         let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n             let sp = struct_field.span.with_ctxt(self.span.ctxt());\n-            let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i));\n+            let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i)).gensym();\n             paths.push(ident.with_span_pos(sp));\n             let val = cx.expr_path(cx.path_ident(sp, ident));\n             let val = if use_temporaries {"}]}