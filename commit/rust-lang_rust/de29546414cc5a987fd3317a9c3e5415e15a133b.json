{"sha": "de29546414cc5a987fd3317a9c3e5415e15a133b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMjk1NDY0MTRjYzVhOTg3ZmQzMzE3YTljM2U1NDE1ZTE1YTEzM2I=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-28T01:26:21Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:27:39Z"}, "message": "Add and rearrange mutex tests", "tree": {"sha": "2e9a832448353c9b10ee91a88b95ff9a60706960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e9a832448353c9b10ee91a88b95ff9a60706960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de29546414cc5a987fd3317a9c3e5415e15a133b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de29546414cc5a987fd3317a9c3e5415e15a133b", "html_url": "https://github.com/rust-lang/rust/commit/de29546414cc5a987fd3317a9c3e5415e15a133b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de29546414cc5a987fd3317a9c3e5415e15a133b/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735fc12e1ad35e8789a922eb506f64756f499a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/735fc12e1ad35e8789a922eb506f64756f499a32", "html_url": "https://github.com/rust-lang/rust/commit/735fc12e1ad35e8789a922eb506f64756f499a32"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "025ae81372cf80c5059becd5f07cc56de1202803", "filename": "tests/run-pass/sync.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/de29546414cc5a987fd3317a9c3e5415e15a133b/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de29546414cc5a987fd3317a9c3e5415e15a133b/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=de29546414cc5a987fd3317a9c3e5415e15a133b", "patch": "@@ -5,17 +5,18 @@ use std::sync::{Mutex, RwLock, TryLockError};\n extern crate libc;\n \n fn main() {\n-    test_mutex();\n+    test_mutex_stdlib();\n     #[cfg(not(target_os = \"windows\"))] // TODO: implement RwLock on Windows\n     {\n-        test_mutex_libc_recursive();\n+        test_mutex_libc_init_recursive();\n+        test_mutex_libc_init_normal();\n+        test_mutex_libc_static_initializer_recursive();\n         test_rwlock_stdlib();\n-        test_mutex_libc_init();\n         test_rwlock_libc_static_initializer();\n     }\n }\n \n-fn test_mutex() {\n+fn test_mutex_stdlib() {\n     let m = Mutex::new(0);\n     {\n         let _guard = m.lock();\n@@ -26,7 +27,7 @@ fn test_mutex() {\n }\n \n #[cfg(not(target_os = \"windows\"))]\n-fn test_mutex_libc_recursive() {\n+fn test_mutex_libc_init_recursive() {\n     unsafe {\n         let mut attr: libc::pthread_mutexattr_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutexattr_init(&mut attr as *mut _), 0);\n@@ -47,6 +48,39 @@ fn test_mutex_libc_recursive() {\n     }\n }\n \n+#[cfg(not(target_os = \"windows\"))]\n+fn test_mutex_libc_init_normal() {\n+    unsafe {\n+        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n+    }\n+}\n+\n+#[cfg(not(target_os = \"windows\"))]\n+fn test_mutex_libc_static_initializer_recursive() {\n+    let mutex = std::cell::UnsafeCell::new(libc::PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP);\n+    unsafe {\n+        assert_eq!(libc::pthread_mutex_lock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_trylock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_lock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(mutex.get()), libc::EPERM);\n+        assert_eq!(libc::pthread_mutex_destroy(mutex.get()), 0);\n+    }\n+}\n+\n #[cfg(not(target_os = \"windows\"))]\n fn test_rwlock_stdlib() {\n     let rw = RwLock::new(0);\n@@ -67,20 +101,6 @@ fn test_rwlock_stdlib() {\n // need to go a layer deeper and test the behavior of libc functions, because\n // std::sys::unix::rwlock::RWLock keeps track of write_locked and num_readers\n \n-#[cfg(not(target_os = \"windows\"))]\n-fn test_mutex_libc_init() {\n-    unsafe {\n-        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, std::ptr::null_mut()), 0);\n-        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n-    }\n-}\n-\n #[cfg(not(target_os = \"windows\"))]\n fn test_rwlock_libc_static_initializer() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);"}]}