{"sha": "de7e29e5935e35c2ec88d1b87253a128543402e0", "node_id": "C_kwDOAAsO6NoAKGRlN2UyOWU1OTM1ZTM1YzJlYzg4ZDFiODcyNTNhMTI4NTQzNDAyZTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-05T13:10:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T13:10:34Z"}, "message": "Rollup merge of #110773 - mj10021:issue-109502-fix, r=oli-obk\n\nReduce MIR dump file count for MIR-opt tests\n\nAs referenced in issue #109502 , mir-opt tests previously used the -Zdump-mir=all flag, which generates very large output.  This PR only dumps the passes under test, greatly reducing dump output.", "tree": {"sha": "02b570f82b9c982b803544551c85068b73b29d54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b570f82b9c982b803544551c85068b73b29d54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7e29e5935e35c2ec88d1b87253a128543402e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVQBKCRBK7hj4Ov3rIwAAsckIAFUDezaV21Muq4caSeGaui7+\nrizaRSvVCGkkCuFYDk5AlAbtbLgrx//wf9yoK6D+23HWBgB6SQieJoaCpKsy6F/Q\ndObU+CTu2fT/rdcCadZMTGltyhqxgJCQnfKHmOoZ9jdNyiw07eE5rLpPVb9LTMSD\n+buwuoxSrOXAOCLi2mye/L0rsfxmlGxO9Pt44OXYYYNFY8Lc5fHXPJfhGCUpZqXQ\nA/K/92qAzKUwMiJ4dZjyKbffl2co1/ikNGw7eVqlahU71W1LbixY5RYz5REKVCnb\n6l5MAjly7ZnU6GqDCxdZztECrZR8eNzdWD4NV2GlUJYV+dj1zbrKEZHPOc7BZ5A=\n=MVZR\n-----END PGP SIGNATURE-----\n", "payload": "tree 02b570f82b9c982b803544551c85068b73b29d54\nparent 4891f02cff9a282df96b368b2f3f8151a78e9676\nparent c19959f4c30da775220da20993b0b59d95d01d2f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683292234 +0530\ncommitter GitHub <noreply@github.com> 1683292234 +0530\n\nRollup merge of #110773 - mj10021:issue-109502-fix, r=oli-obk\n\nReduce MIR dump file count for MIR-opt tests\n\nAs referenced in issue #109502 , mir-opt tests previously used the -Zdump-mir=all flag, which generates very large output.  This PR only dumps the passes under test, greatly reducing dump output.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7e29e5935e35c2ec88d1b87253a128543402e0", "html_url": "https://github.com/rust-lang/rust/commit/de7e29e5935e35c2ec88d1b87253a128543402e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7e29e5935e35c2ec88d1b87253a128543402e0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4891f02cff9a282df96b368b2f3f8151a78e9676", "url": "https://api.github.com/repos/rust-lang/rust/commits/4891f02cff9a282df96b368b2f3f8151a78e9676", "html_url": "https://github.com/rust-lang/rust/commit/4891f02cff9a282df96b368b2f3f8151a78e9676"}, {"sha": "c19959f4c30da775220da20993b0b59d95d01d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c19959f4c30da775220da20993b0b59d95d01d2f", "html_url": "https://github.com/rust-lang/rust/commit/c19959f4c30da775220da20993b0b59d95d01d2f"}], "stats": {"total": 266, "additions": 164, "deletions": 102}, "files": [{"sha": "841f5b4f6ee208807a04610f3c90f6807234df65", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 66, "deletions": 21, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -319,7 +319,8 @@ impl<'test> TestCx<'test> {\n \n     fn run_cfail_test(&self) {\n         let pm = self.pass_mode();\n-        let proc_res = self.compile_test(WillExecute::No, self.should_emit_metadata(pm));\n+        let proc_res =\n+            self.compile_test(WillExecute::No, self.should_emit_metadata(pm), Vec::new());\n         self.check_if_test_should_compile(&proc_res, pm);\n         self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n@@ -347,7 +348,7 @@ impl<'test> TestCx<'test> {\n     fn run_rfail_test(&self) {\n         let pm = self.pass_mode();\n         let should_run = self.run_if_enabled();\n-        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm));\n+        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm), Vec::new());\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -395,7 +396,7 @@ impl<'test> TestCx<'test> {\n \n     fn run_cpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n-        let proc_res = self.compile_test(WillExecute::No, emit_metadata);\n+        let proc_res = self.compile_test(WillExecute::No, emit_metadata, Vec::new());\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -410,7 +411,7 @@ impl<'test> TestCx<'test> {\n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n         let should_run = self.run_if_enabled();\n-        let proc_res = self.compile_test(should_run, emit_metadata);\n+        let proc_res = self.compile_test(should_run, emit_metadata, Vec::new());\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -440,7 +441,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         let should_run = self.run_if_enabled();\n-        let mut proc_res = self.compile_test(should_run, Emit::None);\n+        let mut proc_res = self.compile_test(should_run, Emit::None, Vec::new());\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -686,7 +687,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, Emit::None);\n+        let compile_result = self.compile_test(should_run, Emit::None, Vec::new());\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -806,7 +807,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compiler_run_result = self.compile_test(should_run, Emit::None);\n+        let compiler_run_result = self.compile_test(should_run, Emit::None, Vec::new());\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n@@ -1043,7 +1044,7 @@ impl<'test> TestCx<'test> {\n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, Emit::None);\n+        let compile_result = self.compile_test(should_run, Emit::None, Vec::new());\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -1482,15 +1483,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn compile_test(&self, will_execute: WillExecute, emit: Emit) -> ProcRes {\n-        self.compile_test_general(will_execute, emit, self.props.local_pass_mode())\n+    fn compile_test(&self, will_execute: WillExecute, emit: Emit, passes: Vec<String>) -> ProcRes {\n+        self.compile_test_general(will_execute, emit, self.props.local_pass_mode(), passes)\n     }\n \n     fn compile_test_general(\n         &self,\n         will_execute: WillExecute,\n         emit: Emit,\n         local_pm: Option<PassMode>,\n+        passes: Vec<String>,\n     ) -> ProcRes {\n         // Only use `make_exe_name` when the test ends up being executed.\n         let output_file = match will_execute {\n@@ -1527,6 +1529,7 @@ impl<'test> TestCx<'test> {\n             emit,\n             allow_unused,\n             LinkToAux::Yes,\n+            passes,\n         );\n \n         self.compose_and_run_compiler(rustc, None)\n@@ -1777,6 +1780,7 @@ impl<'test> TestCx<'test> {\n             Emit::None,\n             AllowUnused::No,\n             LinkToAux::No,\n+            Vec::new(),\n         );\n \n         for key in &aux_props.unset_rustc_env {\n@@ -1908,6 +1912,7 @@ impl<'test> TestCx<'test> {\n         emit: Emit,\n         allow_unused: AllowUnused,\n         link_to_aux: LinkToAux,\n+        passes: Vec<String>, // Vec of passes under mir-opt test to be dumped\n     ) -> Command {\n         let is_aux = input_file.components().map(|c| c.as_os_str()).any(|c| c == \"auxiliary\");\n         let is_rustdoc = self.is_rustdoc() && !is_aux;\n@@ -2008,9 +2013,18 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-Cstrip=debuginfo\");\n             }\n             MirOpt => {\n+                // We check passes under test to minimize the mir-opt test dump\n+                // if files_for_miropt_test parses the passes, we dump only those passes\n+                // otherwise we conservatively pass -Zdump-mir=all\n+                let zdump_arg = if !passes.is_empty() {\n+                    format!(\"-Zdump-mir={}\", passes.join(\" | \"))\n+                } else {\n+                    \"-Zdump-mir=all\".to_string()\n+                };\n+\n                 rustc.args(&[\n                     \"-Copt-level=1\",\n-                    \"-Zdump-mir=all\",\n+                    &zdump_arg,\n                     \"-Zvalidate-mir\",\n                     \"-Zdump-mir-exclude-pass-number\",\n                     \"-Zmir-pretty-relative-line-numbers=yes\",\n@@ -2333,6 +2347,7 @@ impl<'test> TestCx<'test> {\n             Emit::LlvmIr,\n             AllowUnused::No,\n             LinkToAux::Yes,\n+            Vec::new(),\n         );\n \n         self.compose_and_run_compiler(rustc, None)\n@@ -2364,8 +2379,14 @@ impl<'test> TestCx<'test> {\n             None => self.fatal(\"missing 'assembly-output' header\"),\n         }\n \n-        let rustc =\n-            self.make_compile_args(input_file, output_file, emit, AllowUnused::No, LinkToAux::Yes);\n+        let rustc = self.make_compile_args(\n+            input_file,\n+            output_file,\n+            emit,\n+            AllowUnused::No,\n+            LinkToAux::Yes,\n+            Vec::new(),\n+        );\n \n         (self.compose_and_run_compiler(rustc, None), output_path)\n     }\n@@ -2496,6 +2517,7 @@ impl<'test> TestCx<'test> {\n             Emit::None,\n             AllowUnused::Yes,\n             LinkToAux::Yes,\n+            Vec::new(),\n         );\n         new_rustdoc.build_all_auxiliary(&mut rustc);\n \n@@ -2769,7 +2791,7 @@ impl<'test> TestCx<'test> {\n     fn run_codegen_units_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let proc_res = self.compile_test(WillExecute::No, Emit::None);\n+        let proc_res = self.compile_test(WillExecute::No, Emit::None, Vec::new());\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -3310,14 +3332,15 @@ impl<'test> TestCx<'test> {\n         if let Some(FailMode::Build) = self.props.fail_mode {\n             // Make sure a build-fail test cannot fail due to failing analysis (e.g. typeck).\n             let pm = Some(PassMode::Check);\n-            let proc_res = self.compile_test_general(WillExecute::No, Emit::Metadata, pm);\n+            let proc_res =\n+                self.compile_test_general(WillExecute::No, Emit::Metadata, pm, Vec::new());\n             self.check_if_test_should_compile(&proc_res, pm);\n         }\n \n         let pm = self.pass_mode();\n         let should_run = self.should_run(pm);\n         let emit_metadata = self.should_emit_metadata(pm);\n-        let proc_res = self.compile_test(should_run, emit_metadata);\n+        let proc_res = self.compile_test(should_run, emit_metadata, Vec::new());\n         self.check_if_test_should_compile(&proc_res, pm);\n \n         // if the user specified a format in the ui test\n@@ -3479,6 +3502,7 @@ impl<'test> TestCx<'test> {\n                 emit_metadata,\n                 AllowUnused::No,\n                 LinkToAux::Yes,\n+                Vec::new(),\n             );\n             let res = self.compose_and_run_compiler(rustc, None);\n             if !res.status.success() {\n@@ -3497,14 +3521,14 @@ impl<'test> TestCx<'test> {\n         let pm = self.pass_mode();\n         let should_run = self.should_run(pm);\n         let emit_metadata = self.should_emit_metadata(pm);\n-        let proc_res = self.compile_test(should_run, emit_metadata);\n+        let passes = self.get_passes();\n \n+        let proc_res = self.compile_test(should_run, emit_metadata, passes);\n+        self.check_mir_dump();\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n-        self.check_mir_dump();\n-\n         if let WillExecute::Yes = should_run {\n             let proc_res = self.exec_compiled_test();\n \n@@ -3514,6 +3538,26 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn get_passes(&self) -> Vec<String> {\n+        let files = miropt_test_tools::files_for_miropt_test(\n+            &self.testpaths.file,\n+            self.config.get_pointer_width(),\n+        );\n+\n+        let mut out = Vec::new();\n+\n+        for miropt_test_tools::MiroptTestFiles {\n+            from_file: _,\n+            to_file: _,\n+            expected_file: _,\n+            passes,\n+        } in files\n+        {\n+            out.extend(passes);\n+        }\n+        out\n+    }\n+\n     fn check_mir_dump(&self) {\n         let test_file_contents = fs::read_to_string(&self.testpaths.file).unwrap();\n \n@@ -3543,8 +3587,9 @@ impl<'test> TestCx<'test> {\n             &self.testpaths.file,\n             self.config.get_pointer_width(),\n         );\n-\n-        for miropt_test_tools::MiroptTestFiles { from_file, to_file, expected_file } in files {\n+        for miropt_test_tools::MiroptTestFiles { from_file, to_file, expected_file, passes: _ } in\n+            files\n+        {\n             let dumped_string = if let Some(after) = to_file {\n                 self.diff_mir_files(from_file.into(), after.into())\n             } else {"}, {"sha": "f86c3ce0afeaae7868c0942398494ce070a6549f", "filename": "src/tools/miropt-test-tools/src/lib.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -4,6 +4,8 @@ pub struct MiroptTestFiles {\n     pub expected_file: std::path::PathBuf,\n     pub from_file: String,\n     pub to_file: Option<String>,\n+    /// Vec of passes under test to be dumped\n+    pub passes: Vec<String>,\n }\n \n pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<MiroptTestFiles> {\n@@ -28,17 +30,26 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n             let mut expected_file;\n             let from_file;\n             let to_file;\n+            let mut passes = Vec::new();\n \n             if test_name.ends_with(\".diff\") {\n                 let trimmed = test_name.trim_end_matches(\".diff\");\n+                passes.push(trimmed.split('.').last().unwrap().to_owned());\n                 let test_against = format!(\"{}.after.mir\", trimmed);\n                 from_file = format!(\"{}.before.mir\", trimmed);\n                 expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n                 assert!(test_names.next().is_none(), \"two mir pass names specified for MIR diff\");\n                 to_file = Some(test_against);\n             } else if let Some(first_pass) = test_names.next() {\n                 let second_pass = test_names.next().unwrap();\n+                if let Some((first_pass_name, _)) = first_pass.split_once('.') {\n+                    passes.push(first_pass_name.to_owned());\n+                }\n+                if let Some((second_pass_name, _)) = second_pass.split_once('.') {\n+                    passes.push(second_pass_name.to_owned());\n+                }\n                 assert!(test_names.next().is_none(), \"three mir pass names specified for MIR diff\");\n+\n                 expected_file =\n                     format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n                 let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n@@ -51,18 +62,24 @@ pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<\n                     .next()\n                     .expect(\"test_name has an invalid extension\");\n                 let extension = cap.get(1).unwrap().as_str();\n+\n                 expected_file =\n                     format!(\"{}{}{}\", test_name.trim_end_matches(extension), bit_width, extension,);\n                 from_file = test_name.to_string();\n                 assert!(test_names.next().is_none(), \"two mir pass names specified for MIR dump\");\n                 to_file = None;\n+                // the pass name is the third to last string in the test name\n+                // this gets pushed into passes\n+                passes.push(\n+                    test_name.split('.').rev().nth(2).expect(\"invalid test format\").to_string(),\n+                );\n             };\n             if !expected_file.starts_with(&test_crate) {\n                 expected_file = format!(\"{}.{}\", test_crate, expected_file);\n             }\n             let expected_file = test_dir.join(expected_file);\n \n-            out.push(MiroptTestFiles { expected_file, from_file, to_file });\n+            out.push(MiroptTestFiles { expected_file, from_file, to_file, passes });\n         }\n     }\n "}, {"sha": "169e99deee755235eb4d7604d40c432cf866220f", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -21,42 +21,42 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc18\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc19\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc18 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc5\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc19 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc6\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc9\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc5 (size: 0, align: 4) {}\n+alloc6 (size: 0, align: 4) {}\n \n-alloc8 (size: 16, align: 4) {\n-    \u257e\u2500alloc9\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc10\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+alloc9 (size: 16, align: 4) {\n+    \u257e\u2500alloc10\u2500\u257c 03 00 00 00 \u257e\u2500alloc11\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n }\n \n-alloc9 (size: 3, align: 1) {\n+alloc10 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n-alloc10 (size: 3, align: 1) {\n+alloc11 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc13 (size: 24, align: 4) {\n-    0x00 \u2502 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u257e\u2500alloc15\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 \u257e\u2500alloc16\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+alloc14 (size: 24, align: 4) {\n+    0x00 \u2502 \u257e\u2500alloc15\u2500\u257c 03 00 00 00 \u257e\u2500alloc16\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 \u257e\u2500alloc17\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc14 (size: 3, align: 1) {\n+alloc15 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n \n-alloc15 (size: 3, align: 1) {\n+alloc16 (size: 3, align: 1) {\n     6d 6f 70                                        \u2502 mop\n }\n \n-alloc16 (size: 4, align: 1) {\n+alloc17 (size: 4, align: 1) {\n     6d c3 b6 70                                     \u2502 m..p\n }"}, {"sha": "db1f9648843ea2f749e39f3e6a7ba252f51ddd8c", "filename": "tests/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -21,46 +21,46 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc19\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc18 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc5\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc19 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc5 (size: 0, align: 8) {}\n+alloc6 (size: 0, align: 8) {}\n \n-alloc8 (size: 32, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc9 (size: 32, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc9 (size: 3, align: 1) {\n+alloc10 (size: 3, align: 1) {\n     66 6f 6f                                        \u2502 foo\n }\n \n-alloc10 (size: 3, align: 1) {\n+alloc11 (size: 3, align: 1) {\n     62 61 72                                        \u2502 bar\n }\n \n-alloc13 (size: 48, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+alloc14 (size: 48, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc14 (size: 3, align: 1) {\n+alloc15 (size: 3, align: 1) {\n     6d 65 68                                        \u2502 meh\n }\n \n-alloc15 (size: 3, align: 1) {\n+alloc16 (size: 3, align: 1) {\n     6d 6f 70                                        \u2502 mop\n }\n \n-alloc16 (size: 4, align: 1) {\n+alloc17 (size: 4, align: 1) {\n     6d c3 b6 70                                     \u2502 m..p\n }"}, {"sha": "999acb48afec33b64561796ac885fa642ac5e425", "filename": "tests/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -21,41 +21,41 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc22\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc23\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc22 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc9\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc14\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc20\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc23 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc10\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc15\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc21\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc9 (size: 0, align: 4) {}\n+alloc10 (size: 0, align: 4) {}\n \n-alloc14 (size: 8, align: 4) {\n-    \u257e\u2500alloc12\u2500\u257c \u257e\u2500alloc13\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc15 (size: 8, align: 4) {\n+    \u257e\u2500alloc13\u2500\u257c \u257e\u2500alloc14\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc14 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc20 (size: 12, align: 4) {\n-    \u257e\u2500a17+0x3\u2500\u257c \u257e\u2500alloc18\u2500\u257c \u257e\u2500a19+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc21 (size: 12, align: 4) {\n+    \u257e\u2500a18+0x3\u2500\u257c \u257e\u2500alloc19\u2500\u257c \u257e\u2500a20+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc17 (size: 4, align: 1) {\n+alloc18 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc18 (size: 1, align: 1) {\n+alloc19 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc19 (size: 4, align: 1) {\n+alloc20 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "30311890eeef9293fc644712bc89491e29bd70c1", "filename": "tests/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -21,44 +21,44 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc23\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc22 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc23 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc20\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc21\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc9 (size: 0, align: 8) {}\n+alloc10 (size: 0, align: 8) {}\n \n-alloc14 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc15 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc13 (size: 1, align: 1) {\n+alloc14 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc20 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc17+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc19+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc21 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc18+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc19\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc20+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc17 (size: 4, align: 1) {\n+alloc18 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc18 (size: 1, align: 1) {\n+alloc19 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc19 (size: 4, align: 1) {\n+alloc20 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "d592e59fafd795757aceecf691197b4df24c1cf2", "filename": "tests/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -21,30 +21,30 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 4, align: 4) {\n-    \u257e\u2500alloc11\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257e\u2500alloc12\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc11 (size: 168, align: 1) {\n+alloc12 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc6\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc7\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc8\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257e\u2500a9+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc9\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257ea10+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc6 (size: 4, align: 4) {\n+alloc7 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc8 (fn: main)\n+alloc9 (fn: main)\n \n-alloc9 (size: 100, align: 1) {\n+alloc10 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "ca53b28be7cbf4fa2c46c6fa1f23dc7b8b8494b5", "filename": "tests/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/de7e29e5935e35c2ec88d1b87253a128543402e0/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=de7e29e5935e35c2ec88d1b87253a128543402e0", "patch": "@@ -21,31 +21,31 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc11 (size: 180, align: 1) {\n+alloc12 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc6\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc7\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc9+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500alloc10+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc6 (size: 4, align: 4) {\n+alloc7 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc8 (fn: main)\n+alloc9 (fn: main)\n \n-alloc9 (size: 100, align: 1) {\n+alloc10 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}]}