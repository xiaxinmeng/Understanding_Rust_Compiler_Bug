{"sha": "15d78fc398527c5035c092c1c67db600543902d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZDc4ZmMzOTg1MjdjNTAzNWMwOTJjMWM2N2RiNjAwNTQzOTAyZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T16:21:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T16:21:56Z"}, "message": "auto merge of #5329 : wanderview/rust/std-getopts-opts_present, r=graydon\n\nCurrently the opts_present() function only checks to see if the option is\r\nconfigured in the match, but doesn't actually check to see if the option\r\nvalue has been set.  This means that opt_present('h') may return false while\r\nopts_present([~'h']) returns true.\r\n\r\nAdd a test case to catch this condition and fix opts_present() to check\r\nthe value before returning true.\r\n\r\nNote, there is another API difference between these two functions that this\r\ndoes not address.  Currently if you pass a non-configured option to\r\nopt_present() the program will fail!(), but opts_present() simply returns\r\nfalse.  If it is acceptable to standardize on the fail!() then opts_present()\r\nshould probably be implemented in terms of the opt_present() function.", "tree": {"sha": "8af833ec17dcb22d310b7930d6a0404cd8672bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af833ec17dcb22d310b7930d6a0404cd8672bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d78fc398527c5035c092c1c67db600543902d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d78fc398527c5035c092c1c67db600543902d5", "html_url": "https://github.com/rust-lang/rust/commit/15d78fc398527c5035c092c1c67db600543902d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d78fc398527c5035c092c1c67db600543902d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a", "html_url": "https://github.com/rust-lang/rust/commit/34aaf350c2c38435a3b20d454b17f8fbbd2a1d8a"}, {"sha": "4f4f69d731ae8cf42eb898fee1de418e76879552", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f69d731ae8cf42eb898fee1de418e76879552", "html_url": "https://github.com/rust-lang/rust/commit/4f4f69d731ae8cf42eb898fee1de418e76879552"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "54271dadb549ae5203d404cd5402e4e9d2b661ba", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15d78fc398527c5035c092c1c67db600543902d5/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d78fc398527c5035c092c1c67db600543902d5/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=15d78fc398527c5035c092c1c67db600543902d5", "patch": "@@ -372,9 +372,9 @@ pub fn opt_count(mm: &Matches, nm: &str) -> uint {\n pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n     for vec::each(names) |nm| {\n         match find_opt(mm.opts, mkname(*nm)) {\n-          Some(_) => return true,\n-          None    => ()\n-        }\n+            Some(id) if !mm.vals[id].is_empty() => return true,\n+            _ => (),\n+        };\n     }\n     false\n }\n@@ -1177,7 +1177,7 @@ mod tests {\n     #[test]\n     pub fn test_multi() {\n         let args = ~[~\"-e\", ~\"foo\", ~\"--encrypt\", ~\"foo\"];\n-        let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\")];\n+        let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\"), optopt(~\"f\")];\n         let matches = &match getopts(args, opts) {\n           result::Ok(m) => m,\n           result::Err(_) => fail!()\n@@ -1186,6 +1186,7 @@ mod tests {\n         fail_unless!(opts_present(matches, ~[~\"encrypt\"]));\n         fail_unless!(opts_present(matches, ~[~\"encrypt\", ~\"e\"]));\n         fail_unless!(opts_present(matches, ~[~\"e\", ~\"encrypt\"]));\n+        fail_unless!(!opts_present(matches, ~[~\"f\"]));\n         fail_unless!(!opts_present(matches, ~[~\"thing\"]));\n         fail_unless!(!opts_present(matches, ~[]));\n "}]}