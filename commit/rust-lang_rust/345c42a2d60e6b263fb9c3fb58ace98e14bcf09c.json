{"sha": "345c42a2d60e6b263fb9c3fb58ace98e14bcf09c", "node_id": "C_kwDOAAsO6NoAKDM0NWM0MmEyZDYwZTZiMjYzZmI5YzNmYjU4YWNlOThlMTRiY2YwOWM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-07-14T13:30:38Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T02:14:12Z"}, "message": "Stabilize `#![feature(label_break_value)]`\n\n # Stabilization proposal\n\nThe feature was implemented in https://github.com/rust-lang/rust/pull/50045 by est31 and has been in nightly since 2018-05-16 (over 4 years now).\nThere are [no open issues][issue-label] other than the tracking issue. There is a strong consensus that `break` is the right keyword and we should not use `return`.\n\nThere have been several concerns raised about this feature on the tracking issue (other than the one about tests, which has been fixed, and an interaction with try blocks, which has been fixed).\n1. nrc's original comment about cost-benefit analysis: https://github.com/rust-lang/rust/issues/48594#issuecomment-422235234\n2. joshtriplett's comments about seeing use cases: https://github.com/rust-lang/rust/issues/48594#issuecomment-422281176\n3. withoutboats's comments that Rust does not need more control flow constructs: https://github.com/rust-lang/rust/issues/48594#issuecomment-450050630\n\nMany different examples of code that's simpler using this feature have been provided:\n- A lexer by rpjohnst which must repeat code without label-break-value: https://github.com/rust-lang/rust/issues/48594#issuecomment-422502014\n- A snippet by SergioBenitez which avoids using a new function and adding several new return points to a function: https://github.com/rust-lang/rust/issues/48594#issuecomment-427628251. This particular case would also work if `try` blocks were stabilized (at the cost of making the code harder to optimize).\n- Several examples by JohnBSmith: https://github.com/rust-lang/rust/issues/48594#issuecomment-434651395\n- Several examples by Centril: https://github.com/rust-lang/rust/issues/48594#issuecomment-440154733\n- An example by petrochenkov where this is used in the compiler itself to avoid duplicating error checking code: https://github.com/rust-lang/rust/issues/48594#issuecomment-443557569\n- Amanieu recently provided another example related to complex conditions, where try blocks would not have helped: https://github.com/rust-lang/rust/issues/48594#issuecomment-1184213006\n\nAdditionally, petrochenkov notes that this is strictly more powerful than labelled loops due to macros which accidentally exit a loop instead of being consumed by the macro matchers: https://github.com/rust-lang/rust/issues/48594#issuecomment-450246249\n\nnrc later resolved their concern, mostly because of the aforementioned macro problems.\njoshtriplett suggested that macros could be able to generate IR directly\n(https://github.com/rust-lang/rust/issues/48594#issuecomment-451685983) but there are no open RFCs,\nand the design space seems rather speculative.\n\njoshtriplett later resolved his concerns, due to a symmetry between this feature and existing labelled break: https://github.com/rust-lang/rust/issues/48594#issuecomment-632960804\n\nwithoutboats has regrettably left the language team.\n\njoshtriplett later posted that the lang team would consider starting an FCP given a stabilization report: https://github.com/rust-lang/rust/issues/48594#issuecomment-1111269353\n\n[issue-label]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+label%3AF-label_break_value+\n\n ## Report\n\n+ Feature gate:\n    - https://github.com/rust-lang/rust/blob/d695a497bbf4b20d2580b75075faa80230d41667/src/test/ui/feature-gates/feature-gate-label_break_value.rs\n+ Diagnostics:\n    - https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler/rustc_parse/src/parser/diagnostics.rs#L2629\n    - https://github.com/rust-lang/rust/blob/f65bf0b2bb1a99f73095c01a118f3c37d3ee614c/compiler/rustc_resolve/src/diagnostics.rs#L749\n    - https://github.com/rust-lang/rust/blob/f65bf0b2bb1a99f73095c01a118f3c37d3ee614c/compiler/rustc_resolve/src/diagnostics.rs#L1001\n    - https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler/rustc_passes/src/loops.rs#L254\n    - https://github.com/rust-lang/rust/blob/d695a497bbf4b20d2580b75075faa80230d41667/compiler/rustc_parse/src/parser/expr.rs#L2079\n    - https://github.com/rust-lang/rust/blob/d695a497bbf4b20d2580b75075faa80230d41667/compiler/rustc_parse/src/parser/expr.rs#L1569\n+ Tests:\n    - https://github.com/rust-lang/rust/blob/master/src/test/ui/label/label_break_value_continue.rs\n    - https://github.com/rust-lang/rust/blob/master/src/test/ui/label/label_break_value_unlabeled_break.rs\n    - https://github.com/rust-lang/rust/blob/master/src/test/ui/label/label_break_value_illegal_uses.rs\n    - https://github.com/rust-lang/rust/blob/master/src/test/ui/lint/unused_labels.rs\n    - https://github.com/rust-lang/rust/blob/master/src/test/ui/run-pass/for-loop-while/label_break_value.rs\n\n ## Interactions with other features\n\nLabels follow the hygiene of local variables.\n\nlabel-break-value is permitted within `try` blocks:\n```rust\nlet _: Result<(), ()> = try {\n    'foo: {\n        Err(())?;\n        break 'foo;\n    }\n};\n```\n\nlabel-break-value is disallowed within closures, generators, and async blocks:\n```rust\n'a: {\n    || break 'a\n    //~^ ERROR use of unreachable label `'a`\n    //~| ERROR `break` inside of a closure\n}\n```\n\nlabel-break-value is disallowed on [_BlockExpression_]; it can only occur as a [_LoopExpression_]:\n```rust\nfn labeled_match() {\n    match false 'b: { //~ ERROR block label not supported here\n        _ => {}\n    }\n}\n\nmacro_rules! m {\n    ($b:block) => {\n        'lab: $b; //~ ERROR cannot use a `block` macro fragment here\n        unsafe $b; //~ ERROR cannot use a `block` macro fragment here\n        |x: u8| -> () $b; //~ ERROR cannot use a `block` macro fragment here\n    }\n}\n\nfn foo() {\n    m!({});\n}\n```\n\n[_BlockExpression_]: https://doc.rust-lang.org/nightly/reference/expressions/block-expr.html\n[_LoopExpression_]: https://doc.rust-lang.org/nightly/reference/expressions/loop-expr.html", "tree": {"sha": "1048569b5d1083cf9208f7404668902e25413b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1048569b5d1083cf9208f7404668902e25413b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c", "html_url": "https://github.com/rust-lang/rust/commit/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37eeed701adb7a05575e620c24dd9428435ca81e", "url": "https://api.github.com/repos/rust-lang/rust/commits/37eeed701adb7a05575e620c24dd9428435ca81e", "html_url": "https://github.com/rust-lang/rust/commit/37eeed701adb7a05575e620c24dd9428435ca81e"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "c3235f06779b3ee6aacb1ec051ce2c68536c1195", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=345c42a2d60e6b263fb9c3fb58ace98e14bcf09c", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::semicolon_if_nothing_returned)]\n #![allow(clippy::redundant_closure)]\n-#![feature(label_break_value)]\n #![feature(let_else)]\n \n fn get_unit() {}"}, {"sha": "78813e7cc1c39c5aa294f08db14ca9cfe0688a50", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/345c42a2d60e6b263fb9c3fb58ace98e14bcf09c/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=345c42a2d60e6b263fb9c3fb58ace98e14bcf09c", "patch": "@@ -1,31 +1,31 @@\n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:10:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:9:5\n    |\n LL |     println!(\"Hello\")\n    |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n    |\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:14:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:13:5\n    |\n LL |     get_unit()\n    |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:19:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:18:5\n    |\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:25:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:24:9\n    |\n LL |         hello()\n    |         ^^^^^^^ help: add a `;` here: `hello();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:36:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:35:9\n    |\n LL |         ptr::drop_in_place(s.as_mut_ptr())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`"}]}