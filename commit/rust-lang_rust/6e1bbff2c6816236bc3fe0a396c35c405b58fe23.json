{"sha": "6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMWJiZmYyYzY4MTYyMzZiYzNmZTBhMzk2YzM1YzQwNWI1OGZlMjM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T19:50:59Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:25Z"}, "message": "Promoteds also need param envs.\n\nThis also allows us to use the `const_eval` query again without causing cycles", "tree": {"sha": "7e3109ad8da36dce82eaf6f4d56cbf576079d66d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e3109ad8da36dce82eaf6f4d56cbf576079d66d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "html_url": "https://github.com/rust-lang/rust/commit/6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b17567117a881f94b83ae6c80b6808a208e026", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b17567117a881f94b83ae6c80b6808a208e026", "html_url": "https://github.com/rust-lang/rust/commit/36b17567117a881f94b83ae6c80b6808a208e026"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "ed57f81e782167638a72f317bc7b101a4c759d6c", "filename": "src/librustc/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fqueries.rs?ref=6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let instance = ty::Instance::resolve(self, param_env, def_id, substs);\n         if let Some(instance) = instance {\n             if let Some(promoted) = promoted {\n-                self.const_eval_promoted(instance, promoted)\n+                self.const_eval_promoted(param_env, instance, promoted)\n             } else {\n                 self.const_eval_instance(param_env, instance, span)\n             }\n@@ -68,11 +68,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluate a promoted constant.\n     pub fn const_eval_promoted(\n         self,\n+        param_env: ty::ParamEnv<'tcx>,\n         instance: ty::Instance<'tcx>,\n         promoted: mir::Promoted,\n     ) -> ConstEvalResult<'tcx> {\n         let cid = GlobalId { instance, promoted: Some(promoted) };\n-        let param_env = ty::ParamEnv::reveal_all();\n         self.const_eval_validated(param_env.and(cid))\n     }\n }"}, {"sha": "206d3d156735ec758b952e3dc5df5f06e5322511", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "patch": "@@ -757,13 +757,22 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         gid: GlobalId<'tcx>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        let val = if self.tcx.is_static(gid.instance.def_id()) {\n-            self.tcx.const_eval_poly(gid.instance.def_id())?\n-        } else if let Some(promoted) = gid.promoted {\n-            self.tcx.const_eval_promoted(gid.instance, promoted)?\n+        // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n+        // and thus don't care about the parameter environment. While we could just use\n+        // `self.param_env`, that would mean we invoke the query to evaluate the static\n+        // with different parameter environments, thus causing the static to be evaluated\n+        // multiple times.\n+        let param_env = if self.tcx.is_static(gid.instance.def_id()) {\n+            ty::ParamEnv::reveal_all()\n         } else {\n-            self.tcx.const_eval_instance(self.param_env, gid.instance, Some(self.tcx.span))?\n+            self.param_env\n         };\n+        let val = if let Some(promoted) = gid.promoted {\n+            self.tcx.const_eval_promoted(param_env, gid.instance, promoted)?\n+        } else {\n+            self.tcx.const_eval_instance(param_env, gid.instance, Some(self.tcx.span))?\n+        };\n+\n         // Even though `ecx.const_eval` is called from `eval_const_to_op` we can never have a\n         // recursion deeper than one level, because the `tcx.const_eval` above is guaranteed to not\n         // return `ConstValue::Unevaluated`, which is the only way that `eval_const_to_op` will call"}, {"sha": "2cb574bc681b17c006603c7239bd1355b9bde5f6", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "patch": "@@ -537,14 +537,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // potentially requiring the current static to be evaluated again. This is not a\n                 // problem here, because we are building an operand which means an actual read is\n                 // happening.\n-                // FIXME(oli-obk): eliminate all the `const_eval_raw` usages when we get rid of\n-                // `StaticKind` once and for all.\n-                // FIXME the following line should have been:\n-                // return self.const_eval(GlobalId { instance, promoted });\n-                // but since the addition of Promoteds being Constants is causing const validation\n-                // cycles. Promoteds being Constants exercise const validation more often and it\n-                // may have made show up a pre-existing bug.\n-                return Ok(OpTy::from(self.const_eval_raw(GlobalId { instance, promoted })?));\n+                return Ok(OpTy::from(self.const_eval(GlobalId { instance, promoted })?));\n             }\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)"}, {"sha": "ea9fffa883ea5e83fb739323123e01531bd7d44a", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e1bbff2c6816236bc3fe0a396c35c405b58fe23/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=6e1bbff2c6816236bc3fe0a396c35c405b58fe23", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 8 which has size 1\n+   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 9 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}]}