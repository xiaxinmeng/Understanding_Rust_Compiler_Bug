{"sha": "15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c", "node_id": "C_kwDOAAsO6NoAKDE1YWJjODE5NjdiMWM4ZWQ0Y2RlOGIwZTNhYTcyNmFhYTkzMjNjMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-13T21:03:11Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-14T09:55:35Z"}, "message": "remove reudndant function param in check_matcher_core()", "tree": {"sha": "2d3a008d1b631fa311eacf5fcfb18e7672446793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3a008d1b631fa311eacf5fcfb18e7672446793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c", "html_url": "https://github.com/rust-lang/rust/commit/15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75287dd73d09a0712a7196d0604ee05d23908f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/75287dd73d09a0712a7196d0604ee05d23908f59", "html_url": "https://github.com/rust-lang/rust/commit/75287dd73d09a0712a7196d0604ee05d23908f59"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "e2b82580342e89b4d249cb875fb5aa367139296f", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=15abc81967b1c8ed4cde8b0e3aa726aaa9323c0c", "patch": "@@ -478,7 +478,7 @@ pub fn compile_declarative_macro(\n                     )\n                     .pop()\n                     .unwrap();\n-                    valid &= check_lhs_nt_follows(&sess.parse_sess, features, &def, &tt);\n+                    valid &= check_lhs_nt_follows(&sess.parse_sess, &def, &tt);\n                     return tt;\n                 }\n                 sess.parse_sess.span_diagnostic.span_bug(def.span, \"wrong-structured lhs\")\n@@ -563,16 +563,11 @@ pub fn compile_declarative_macro(\n     }))\n }\n \n-fn check_lhs_nt_follows(\n-    sess: &ParseSess,\n-    features: &Features,\n-    def: &ast::Item,\n-    lhs: &mbe::TokenTree,\n-) -> bool {\n+fn check_lhs_nt_follows(sess: &ParseSess, def: &ast::Item, lhs: &mbe::TokenTree) -> bool {\n     // lhs is going to be like TokenTree::Delimited(...), where the\n     // entire lhs is those tts. Or, it can be a \"bare sequence\", not wrapped in parens.\n     if let mbe::TokenTree::Delimited(_, delimited) = lhs {\n-        check_matcher(sess, features, def, &delimited.tts)\n+        check_matcher(sess, def, &delimited.tts)\n     } else {\n         let msg = \"invalid macro matcher; matchers must be contained in balanced delimiters\";\n         sess.span_diagnostic.span_err(lhs.span(), msg);\n@@ -632,16 +627,11 @@ fn check_rhs(sess: &ParseSess, rhs: &mbe::TokenTree) -> bool {\n     false\n }\n \n-fn check_matcher(\n-    sess: &ParseSess,\n-    features: &Features,\n-    def: &ast::Item,\n-    matcher: &[mbe::TokenTree],\n-) -> bool {\n+fn check_matcher(sess: &ParseSess, def: &ast::Item, matcher: &[mbe::TokenTree]) -> bool {\n     let first_sets = FirstSets::new(matcher);\n     let empty_suffix = TokenSet::empty();\n     let err = sess.span_diagnostic.err_count();\n-    check_matcher_core(sess, features, def, &first_sets, matcher, &empty_suffix);\n+    check_matcher_core(sess, def, &first_sets, matcher, &empty_suffix);\n     err == sess.span_diagnostic.err_count()\n }\n \n@@ -955,7 +945,6 @@ impl<'tt> TokenSet<'tt> {\n // see `FirstSets::new`.\n fn check_matcher_core<'tt>(\n     sess: &ParseSess,\n-    features: &Features,\n     def: &ast::Item,\n     first_sets: &FirstSets<'tt>,\n     matcher: &'tt [mbe::TokenTree],\n@@ -1008,7 +997,7 @@ fn check_matcher_core<'tt>(\n                     token::CloseDelim(d.delim),\n                     span.close,\n                 ));\n-                check_matcher_core(sess, features, def, first_sets, &d.tts, &my_suffix);\n+                check_matcher_core(sess, def, first_sets, &d.tts, &my_suffix);\n                 // don't track non NT tokens\n                 last.replace_with_irrelevant();\n \n@@ -1040,8 +1029,7 @@ fn check_matcher_core<'tt>(\n                 // At this point, `suffix_first` is built, and\n                 // `my_suffix` is some TokenSet that we can use\n                 // for checking the interior of `seq_rep`.\n-                let next =\n-                    check_matcher_core(sess, features, def, first_sets, &seq_rep.tts, my_suffix);\n+                let next = check_matcher_core(sess, def, first_sets, &seq_rep.tts, my_suffix);\n                 if next.maybe_empty {\n                     last.add_all(&next);\n                 } else {"}]}