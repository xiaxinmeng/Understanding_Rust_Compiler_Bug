{"sha": "19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTU5Y2I3NDhiNjcxNWNkOTQwZWI2ZmE1YWU0ZTE4NDFkY2ZjZjQ=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-25T00:17:24Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-25T00:17:24Z"}, "message": "Fix tests for Copy bound", "tree": {"sha": "7918d33eb7071c8920a0f3b6eb9ed6dfddad68fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7918d33eb7071c8920a0f3b6eb9ed6dfddad68fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "html_url": "https://github.com/rust-lang/rust/commit/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb61f915db842ec06e6531237f5c73112dd1c7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb61f915db842ec06e6531237f5c73112dd1c7a0", "html_url": "https://github.com/rust-lang/rust/commit/fb61f915db842ec06e6531237f5c73112dd1c7a0"}], "stats": {"total": 54, "additions": 9, "deletions": 45}, "files": [{"sha": "161d7fab81dda7fd074f1aee5d4aaa68d1c6e62a", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=19a59cb748b6715cd940eb6fa5ae4e1841dcfcf4", "patch": "@@ -1032,11 +1032,6 @@ mod big_tests {\n         tabulate_managed(low, high);\n     }\n \n-    #[test]\n-    fn test_linear() {\n-        tabulate_linear();\n-    }\n-\n     fn multiplyVec<T: Copy>(arr: &[const T], num: uint) -> ~[mut T] {\n         let size = arr.len();\n         let res = do vec::from_fn(num) |i| {\n@@ -1125,12 +1120,11 @@ mod big_tests {\n     }\n \n     fn tabulate_managed(lo: uint, hi: uint) {\n-        fn isSorted<T: Ord>(arr: &[const @T], expected_refcount: uint) {\n+        fn isSorted<T: Ord>(arr: &[const @T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n                     fail ~\"Array not sorted\";\n                 }\n-                assert sys::refcount(arr[i]) == expected_refcount;\n             }\n         }\n \n@@ -1144,22 +1138,22 @@ mod big_tests {\n             let arr = vec::to_mut(move arr);\n \n             tim_sort(arr); // *sort\n-            isSorted(arr, 1);\n+            isSorted(arr);\n \n             vec::reverse(arr);\n             tim_sort(arr); // \\sort\n-            isSorted(arr, 1);\n+            isSorted(arr);\n \n             tim_sort(arr); // /sort\n-            isSorted(arr, 1);\n+            isSorted(arr);\n \n             for 3.times {\n                 let i1 = rng.gen_uint_range(0, n);\n                 let i2 = rng.gen_uint_range(0, n);\n                 arr[i1] <-> arr[i2];\n             }\n             tim_sort(arr); // 3sort\n-            isSorted(arr, 1);\n+            isSorted(arr);\n \n             if n >= 10 {\n                 let size = arr.len();\n@@ -1170,7 +1164,7 @@ mod big_tests {\n                 }\n             }\n             tim_sort(arr); // +sort\n-            isSorted(arr, 1);\n+            isSorted(arr);\n \n             for (n/100).times {\n                 let idx = rng.gen_uint_range(0, n);\n@@ -1184,16 +1178,16 @@ mod big_tests {\n                 multiplyVec(part, n)\n             } else { move arr };\n             tim_sort(arr); // ~sort\n-            isSorted(arr, n/4+1);\n+            isSorted(arr);\n \n             let mut arr = vec::from_elem(n, @(-0.5));\n             tim_sort(arr); // =sort\n-            isSorted(arr, n);\n+            isSorted(arr);\n \n             let half = n / 2;\n             let mut arr = makeRange(half).map(|i| @(*i as float));\n             tim_sort(arr); // !sort\n-            isSorted(arr, 1);\n+            isSorted(arr);\n         }\n     }\n \n@@ -1220,36 +1214,6 @@ mod big_tests {\n         pure fn gt(other: &LVal) -> bool { self.val > other.val }\n         pure fn ge(other: &LVal) -> bool { self.val >= other.val }\n     }\n-\n-    fn tabulate_linear() {\n-        fn key(_x: @uint) { }\n-        fn isSorted<T: Ord>(arr: &[const T]) {\n-            for uint::range(0, arr.len()-1) |i| {\n-                if arr[i] > arr[i+1] {\n-                    fail ~\"Array not sorted\";\n-                }\n-            }\n-        }\n-\n-        let n = 1000;\n-        unsafe {\n-            task::local_data::local_data_set(key, @0u);\n-        }\n-\n-        {\n-            let mut arr = do vec::from_fn(n) |i| {\n-                LVal { val: i, key: key }\n-            };\n-            tim_sort(arr);\n-            isSorted(arr);\n-        }\n-\n-        let @dropped = unsafe {\n-            task::local_data::local_data_get(key).get()\n-        };\n-\n-        assert n == dropped;\n-    }\n }\n \n // Local Variables:"}]}