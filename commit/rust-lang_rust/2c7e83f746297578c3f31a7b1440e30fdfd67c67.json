{"sha": "2c7e83f746297578c3f31a7b1440e30fdfd67c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjN2U4M2Y3NDYyOTc1NzhjM2YzMWE3YjE0NDBlMzBmZGZkNjdjNjc=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-13T00:31:43Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-04-13T00:31:43Z"}, "message": "Move `path_len` to ExternCrate", "tree": {"sha": "b48982ce434a3eab0d16bd35cfadf82def0446c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b48982ce434a3eab0d16bd35cfadf82def0446c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7e83f746297578c3f31a7b1440e30fdfd67c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7e83f746297578c3f31a7b1440e30fdfd67c67", "html_url": "https://github.com/rust-lang/rust/commit/2c7e83f746297578c3f31a7b1440e30fdfd67c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7e83f746297578c3f31a7b1440e30fdfd67c67/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e986510bde5baeee952adaeac619dfcb2e62dfbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e986510bde5baeee952adaeac619dfcb2e62dfbc", "html_url": "https://github.com/rust-lang/rust/commit/e986510bde5baeee952adaeac619dfcb2e62dfbc"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "d885bd43bc89dbce656a42db81c6e5aa475bf3cb", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=2c7e83f746297578c3f31a7b1440e30fdfd67c67", "patch": "@@ -12,7 +12,6 @@\n //! from rustc::middle::cstore in no particular order.\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n-use ich::StableHashingContext;\n \n use middle;\n \n@@ -50,29 +49,15 @@ impl_stable_hash_for!(enum middle::cstore::LinkagePreference {\n impl_stable_hash_for!(struct middle::cstore::ExternCrate {\n     src,\n     span,\n+    path_len,\n     direct\n });\n \n-impl<'a> HashStable<StableHashingContext<'a>> for middle::cstore::ExternCrateSource {\n-    fn hash_stable<W: StableHasherResult>(\n-        &self,\n-        hcx: &mut StableHashingContext<'a>,\n-        hasher: &mut StableHasher<W>,\n-    ) {\n-        use middle::cstore::ExternCrateSource::*;\n-\n-        ::std::mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Extern { def_id, path_len } => {\n-                def_id.hash_stable(hcx, hasher);\n-                path_len.hash_stable(hcx, hasher);\n-            }\n-            Use { path_len } => path_len.hash_stable(hcx, hasher),\n-            Path => {}\n-        }\n-    }\n-}\n+impl_stable_hash_for!(enum middle::cstore::ExternCrateSource {\n+    Extern(def_id),\n+    Use,\n+    Path,\n+});\n \n impl_stable_hash_for!(struct middle::cstore::CrateSource {\n     dylib,"}, {"sha": "81fe723deb905885ac9330bc5fe9da39ca4a3d73", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=2c7e83f746297578c3f31a7b1440e30fdfd67c67", "patch": "@@ -153,6 +153,10 @@ pub struct ExternCrate {\n     /// span of the extern crate that caused this to be loaded\n     pub span: Span,\n \n+    /// Number of links to reach the extern;\n+    /// used to select the extern with the shortest path\n+    pub path_len: usize,\n+\n     /// If true, then this crate is the crate named by the extern\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n@@ -162,21 +166,14 @@ pub struct ExternCrate {\n #[derive(Copy, Clone, Debug)]\n pub enum ExternCrateSource {\n     /// Crate is loaded by `extern crate`.\n-    Extern {\n+    Extern(\n         /// def_id of the item in the current crate that caused\n         /// this crate to be loaded; note that there could be multiple\n         /// such ids\n-        def_id: DefId,\n-\n-        /// Number of links to reach the extern crate `def_id`\n-        /// declaration; used to select the extern crate with the shortest\n-        /// path\n-        path_len: usize,\n-    },\n+        DefId,\n+    ),\n     // Crate is loaded by `use`.\n-    Use {\n-        path_len: usize,\n-    },\n+    Use,\n     /// Crate is implicitly loaded by an absolute or an `extern::` path.\n     Path,\n }"}, {"sha": "8189064db6968eeecfcc353eeb03ee8326b419c6", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=2c7e83f746297578c3f31a7b1440e30fdfd67c67", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 if cnum != LOCAL_CRATE {\n                     let opt_extern_crate = self.extern_crate(cnum.as_def_id());\n                     if let Some(ExternCrate {\n-                        src: ExternCrateSource::Extern { def_id, .. },\n+                        src: ExternCrateSource::Extern(def_id),\n                         direct: true,\n                         ..\n                     }) = *opt_extern_crate\n@@ -138,7 +138,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             if cur_def.index == CRATE_DEF_INDEX {\n                 match *self.extern_crate(cur_def) {\n                     Some(ExternCrate {\n-                        src: ExternCrateSource::Extern { def_id, .. },\n+                        src: ExternCrateSource::Extern(def_id),\n                         direct: true,\n                         ..\n                     }) => {"}, {"sha": "f6692579ffa3340d400180f5c0a855c274e9a193", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7e83f746297578c3f31a7b1440e30fdfd67c67/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2c7e83f746297578c3f31a7b1440e30fdfd67c67", "patch": "@@ -367,29 +367,21 @@ impl<'a> CrateLoader<'a> {\n         let cmeta = self.cstore.get_crate_data(cnum);\n         let mut old_extern_crate = cmeta.extern_crate.borrow_mut();\n \n-        fn path_len_reverse(src: ExternCrateSource) -> cmp::Reverse<usize> {\n-            cmp::Reverse(match src {\n-                ExternCrateSource::Extern { path_len, .. } |\n-                ExternCrateSource::Use { path_len } => path_len,\n-                _ => usize::max_value(),\n-            })\n-        }\n-\n         // Prefer:\n         // - something over nothing (tuple.0);\n         // - direct extern crate to indirect (tuple.1);\n         // - shorter paths to longer (tuple.2).\n         let new_rank = (\n             true,\n             extern_crate.direct,\n-            path_len_reverse(extern_crate.src),\n+            cmp::Reverse(extern_crate.path_len),\n         );\n         let old_rank = match *old_extern_crate {\n             None => (false, false, cmp::Reverse(usize::max_value())),\n             Some(ref c) => (\n                 true,\n                 c.direct,\n-                path_len_reverse(c.src),\n+                cmp::Reverse(c.path_len),\n             ),\n         };\n         if old_rank >= new_rank {\n@@ -1089,8 +1081,9 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n                 self.update_extern_crate(\n                     cnum,\n                     ExternCrate {\n-                        src: ExternCrateSource::Extern { def_id, path_len },\n+                        src: ExternCrateSource::Extern(def_id),\n                         span: item.span,\n+                        path_len,\n                         direct: true,\n                     },\n                     &mut FxHashSet(),\n@@ -1116,6 +1109,8 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             ExternCrate {\n                 src: ExternCrateSource::Path,\n                 span,\n+                // to have the least priority in `update_extern_crate`\n+                path_len: usize::max_value(),\n                 direct: true,\n             },\n             &mut FxHashSet(),\n@@ -1141,8 +1136,9 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         self.update_extern_crate(\n             cnum,\n             ExternCrate {\n-                src: ExternCrateSource::Use { path_len },\n+                src: ExternCrateSource::Use,\n                 span,\n+                path_len,\n                 direct: true,\n             },\n             &mut FxHashSet(),"}]}