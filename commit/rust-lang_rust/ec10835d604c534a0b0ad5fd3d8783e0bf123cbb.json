{"sha": "ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTA4MzVkNjA0YzUzNGEwYjBhZDVmZDNkODc4M2UwYmYxMjNjYmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-17T18:20:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T18:20:25Z"}, "message": "Merge #8069\n\n8069: Inject highlight into block doc comments r=Veykril a=Veykril\n\nbors r+\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/6873\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "61d2cafcd79503591022c4c58f51b7a097dc4ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61d2cafcd79503591022c4c58f51b7a097dc4ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUkhpCRBK7hj4Ov3rIwAAdHIIAIWMg38S3BhZc08QREzVftkS\nSnDmayARHl0Ve3A4ay10pZFwC8i4SsfQOsTCeeL+f6yL3KmbujGSAARQ+YfXNruv\nei5nql7o6Mw5gAzNYMXh2y3d+vbTdM3F3+OTHajVqifl4dbe2ojTRfOH3pDarEQU\nEvpnzT4V2o1bkqCWk0upnD3F5+/VguvvTdEp4l5LWcmWd62MWwFXeBsSzT0vc0p5\nchtTxGoKqoX8ACrsWvjXInCBXBfeONImdcZkrbkYF55IrW5xbYsFecz4H04+cX74\nu42acaX7Xm5CGrFKu+LkCC0VMjCTCgimtMUwuIS+M1Wjs6lA9Ray/txuMWEgZe8=\n=8ir+\n-----END PGP SIGNATURE-----\n", "payload": "tree 61d2cafcd79503591022c4c58f51b7a097dc4ea6\nparent 4fa56e3ab10ce3214cae2fdef1973eef406180ce\nparent 37964f9fef5e07684f4ff68142908f6266419faa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616005225 +0000\ncommitter GitHub <noreply@github.com> 1616005225 +0000\n\nMerge #8069\n\n8069: Inject highlight into block doc comments r=Veykril a=Veykril\n\nbors r+\r\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/6873\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "html_url": "https://github.com/rust-lang/rust/commit/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa56e3ab10ce3214cae2fdef1973eef406180ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa56e3ab10ce3214cae2fdef1973eef406180ce", "html_url": "https://github.com/rust-lang/rust/commit/4fa56e3ab10ce3214cae2fdef1973eef406180ce"}, {"sha": "37964f9fef5e07684f4ff68142908f6266419faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/37964f9fef5e07684f4ff68142908f6266419faa", "html_url": "https://github.com/rust-lang/rust/commit/37964f9fef5e07684f4ff68142908f6266419faa"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "7a4f2645fa256691001e7fc5baa2fbdc171b080a", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "patch": "@@ -1,5 +1,7 @@\n //! \"Recursive\" Syntax highlighting for code in doctests and fixtures.\n \n+use std::mem;\n+\n use either::Either;\n use hir::{HasAttrs, Semantics};\n use ide_db::call_info::ActiveParameter;\n@@ -186,34 +188,44 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n             }\n         };\n \n-        match line.find(RUSTDOC_FENCE) {\n-            Some(idx) => {\n-                is_codeblock = !is_codeblock;\n-                // Check whether code is rust by inspecting fence guards\n-                let guards = &line[idx + RUSTDOC_FENCE.len()..];\n-                let is_rust =\n-                    guards.split(',').all(|sub| RUSTDOC_FENCE_TOKENS.contains(&sub.trim()));\n-                is_doctest = is_codeblock && is_rust;\n-                continue;\n+        let mut pos = TextSize::from(prefix.len() as u32);\n+        let mut range_start = range.start();\n+        for line in line.split('\\n') {\n+            let line_len = TextSize::from(line.len() as u32);\n+            let prev_range_start = {\n+                let next_range_start = range_start + line_len + TextSize::from(1);\n+                mem::replace(&mut range_start, next_range_start)\n+            };\n+            // only first line has the prefix so take it away for future iterations\n+            let mut pos = mem::take(&mut pos);\n+\n+            match line.find(RUSTDOC_FENCE) {\n+                Some(idx) => {\n+                    is_codeblock = !is_codeblock;\n+                    // Check whether code is rust by inspecting fence guards\n+                    let guards = &line[idx + RUSTDOC_FENCE.len()..];\n+                    let is_rust =\n+                        guards.split(',').all(|sub| RUSTDOC_FENCE_TOKENS.contains(&sub.trim()));\n+                    is_doctest = is_codeblock && is_rust;\n+                    continue;\n+                }\n+                None if !is_doctest => continue,\n+                None => (),\n             }\n-            None if !is_doctest => continue,\n-            None => (),\n-        }\n-\n-        let mut pos = TextSize::of(prefix);\n-        // whitespace after comment is ignored\n-        if let Some(ws) = line[pos.into()..].chars().next().filter(|c| c.is_whitespace()) {\n-            pos += TextSize::of(ws);\n-        }\n-        // lines marked with `#` should be ignored in output, we skip the `#` char\n-        if let Some(ws) = line[pos.into()..].chars().next().filter(|&c| c == '#') {\n-            pos += TextSize::of(ws);\n-        }\n \n-        new_comments.push(TextRange::at(range.start(), pos));\n+            // whitespace after comment is ignored\n+            if let Some(ws) = line[pos.into()..].chars().next().filter(|c| c.is_whitespace()) {\n+                pos += TextSize::of(ws);\n+            }\n+            // lines marked with `#` should be ignored in output, we skip the `#` char\n+            if line[pos.into()..].starts_with('#') {\n+                pos += TextSize::of('#');\n+            }\n \n-        inj.add(&line[pos.into()..], TextRange::new(range.start() + pos, range.end()));\n-        inj.add_unmapped(\"\\n\");\n+            new_comments.push(TextRange::at(prev_range_start, pos));\n+            inj.add(&line[pos.into()..], TextRange::new(pos, line_len) + prev_range_start);\n+            inj.add_unmapped(\"\\n\");\n+        }\n     }\n     inj.add_unmapped(\"\\n}\");\n "}, {"sha": "d792a23cfc2f03e6bdd4f27b7fd15ddd8de8a60e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "patch": "@@ -81,7 +81,7 @@\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"Foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar</span><span class=\"escape_sequence injected\">\\n</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n@@ -121,4 +121,20 @@\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n+<span class=\"comment documentation\">/**\n+It is beyond me why you'd use these when you got ///\n+```rust\n+</span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span><span class=\"comment documentation\">\n+```\n+ */</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">block_comments</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n+<span class=\"comment documentation\">/**\n+    Really, I don't get it\n+    ```rust\n+</span><span class=\"comment documentation\"> </span><span class=\"none injected\">   </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span><span class=\"comment documentation\">\n+    ```\n+*/</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">block_comments2</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "cf0b86ad00850bc0b0b3e5341c01837d32d8892a", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "patch": "@@ -516,7 +516,7 @@ impl Foo {\n     ///        comment */\n     ///\n     /// let multi_line_string = \"Foo\n-    ///   bar\n+    ///   bar\\n\n     ///          \";\n     ///\n     /// ```\n@@ -557,6 +557,22 @@ macro_rules! noop {\n /// let _ = example(&alloc::vec![1, 2, 3]);\n /// ```\n pub fn mix_and_match() {}\n+\n+/**\n+It is beyond me why you'd use these when you got ///\n+```rust\n+let _ = example(&[1, 2, 3]);\n+```\n+ */\n+pub fn block_comments() {}\n+\n+/**\n+    Really, I don't get it\n+    ```rust\n+    let _ = example(&[1, 2, 3]);\n+    ```\n+*/\n+pub fn block_comments2() {}\n \"#\n         .trim(),\n         expect_file![\"./test_data/highlight_doctest.html\"],"}]}