{"sha": "d5bee64df400126279e71562352936d5e4d14433", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YmVlNjRkZjQwMDEyNjI3OWU3MTU2MjM1MjkzNmQ1ZTRkMTQ0MzM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-04-11T00:03:07Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-04-14T22:32:24Z"}, "message": "Prefer unprefixed paths for well known structs", "tree": {"sha": "0b4844e06f70ef70c3dfa26ffd644ba5c0282f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b4844e06f70ef70c3dfa26ffd644ba5c0282f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5bee64df400126279e71562352936d5e4d14433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bee64df400126279e71562352936d5e4d14433", "html_url": "https://github.com/rust-lang/rust/commit/d5bee64df400126279e71562352936d5e4d14433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5bee64df400126279e71562352936d5e4d14433/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "182d99cfd1a551b9daa3d7f6896775278fb2962e", "url": "https://api.github.com/repos/rust-lang/rust/commits/182d99cfd1a551b9daa3d7f6896775278fb2962e", "html_url": "https://github.com/rust-lang/rust/commit/182d99cfd1a551b9daa3d7f6896775278fb2962e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "cd88c8f46b3c0c6b3ef78a0342306b7b6a0642a9", "filename": "src/libstd/sys/redox/ext/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -17,9 +17,9 @@ use mem;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n \n-/// Redox-specific extensions to [`ffi::OsString`].\n+/// Redox-specific extensions to [`OsString`].\n ///\n-/// [`ffi::OsString`]: ../../../../std/ffi/struct.OsString.html\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a byte vector.\n@@ -41,9 +41,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Redox-specific extensions to [`ffi::OsStr`].\n+/// Redox-specific extensions to [`OsStr`].\n ///\n-/// [`ffi::OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c1dba6edda484f66e6f702555d91ce372166f826", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -260,12 +260,12 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// Redox-specific extensions for [`fs::FileType`].\n+/// Redox-specific extensions for [`FileType`].\n ///\n /// Adds support for special Unix file types such as block/character devices,\n /// pipes, and sockets.\n ///\n-/// [`fs::FileType`]: ../../../../std/fs/struct.FileType.html\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device."}, {"sha": "cfb6d5fc703a614ef84e1c2b363ed8d7bb8b48c5", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -18,7 +18,7 @@ use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n-/// Redox-specific extensions to the [`process::Command`] builder.\n+/// Redox-specific extensions to the [`process::Command`] builder,\n ///\n /// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8347145db5aaf493a9c8ad3cf379415c5897a5bd", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -17,9 +17,9 @@ use mem;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n \n-/// Unix-specific extensions to [`ffi::OsString`].\n+/// Unix-specific extensions to [`OsString`].\n ///\n-/// [`ffi::OsString`]: ../../../../std/ffi/struct.OsString.html\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an [`OsString`] from a byte vector.\n@@ -68,9 +68,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Unix-specific extensions to [`ffi::OsStr`].\n+/// Unix-specific extensions to [`OsStr`].\n ///\n-/// [`ffi::OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4e981012669033ff393d85a44f1511bab82df6a0", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -20,9 +20,9 @@ use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n use sys::platform::fs::MetadataExt as UnixMetadataExt;\n \n-/// Unix-specific extensions to [`fs::File`].\n+/// Unix-specific extensions to [`File`].\n ///\n-/// [`fs::File`]: ../../../../std/fs/struct.File.html\n+/// [`File`]: ../../../../std/fs/struct.File.html\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n@@ -555,12 +555,12 @@ impl MetadataExt for fs::Metadata {\n     fn blocks(&self) -> u64 { self.st_blocks() }\n }\n \n-/// Unix-specific extensions for [`fs::FileType`].\n+/// Unix-specific extensions for [`FileType`].\n ///\n /// Adds support for special Unix file types such as block/character devices,\n /// pipes, and sockets.\n ///\n-/// [`fs::FileType`]: ../../../../std/fs/struct.FileType.html\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device."}, {"sha": "98d4355248990a92ec748b667409e91b1e5a1f2d", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -76,9 +76,9 @@ use sys_common::{FromInner, AsInner};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use sys_common::wtf8::EncodeWide;\n \n-/// Windows-specific extensions to [`ffi::OsString`].\n+/// Windows-specific extensions to [`OsString`].\n ///\n-/// [`ffi::OsString`]: ../../../../std/ffi/struct.OsString.html\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n@@ -111,9 +111,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Windows-specific extensions to [`ffi::OsStr`].\n+/// Windows-specific extensions to [`OsStr`].\n ///\n-/// [`ffi::OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially"}, {"sha": "78c9e95a05501d0821602ab330ecc8cde75ff178", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bee64df400126279e71562352936d5e4d14433/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=d5bee64df400126279e71562352936d5e4d14433", "patch": "@@ -18,9 +18,9 @@ use path::Path;\n use sys;\n use sys_common::{AsInnerMut, AsInner};\n \n-/// Windows-specific extensions to [`fs::File`].\n+/// Windows-specific extensions to [`File`].\n ///\n-/// [`fs::File`]: ../../../fs/struct.File.html\n+/// [`File`]: ../../../fs/struct.File.html\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Seeks to a given position and reads a number of bytes.\n@@ -444,11 +444,11 @@ impl MetadataExt for Metadata {\n     fn file_size(&self) -> u64 { self.as_inner().size() }\n }\n \n-/// Windows-specific extensions to [`fs::FileType`].\n+/// Windows-specific extensions to [`FileType`].\n ///\n /// On Windows, a symbolic link knows whether it is a file or directory.\n ///\n-/// [`fs::FileType`]: ../../../../std/fs/struct.FileType.html\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a symbolic link that is also a directory."}]}