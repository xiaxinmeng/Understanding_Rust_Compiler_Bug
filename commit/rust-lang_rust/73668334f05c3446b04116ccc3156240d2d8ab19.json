{"sha": "73668334f05c3446b04116ccc3156240d2d8ab19", "node_id": "C_kwDOAAsO6NoAKDczNjY4MzM0ZjA1YzM0NDZiMDQxMTZjY2MzMTU2MjQwZDJkOGFiMTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-14T15:26:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-14T15:26:58Z"}, "message": "Merge #10767\n\n10767: minor: Rename intern_macro -> intern_macro_call r=Veykril a=Veykril\n\nWe potentially want to intern macro definitions so the names would probably collide\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "19e64214b19b5d8b978eed73f551cd6348755700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e64214b19b5d8b978eed73f551cd6348755700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73668334f05c3446b04116ccc3156240d2d8ab19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhkSrCCRBK7hj4Ov3rIwAAWhIIAGA/mlwCNReO6hWbJeotXIr2\nRHhndllL6HG0oXmBX9V1w4M/ypdhfX5zDXCinZE3kuUSVVDoMmG8VQ/BS3p/dPXX\nRcZq4trd6uOaANWFreUUpoA2KaBGrcELCqF//wfWHIB0VLpeWDXmYhVUveWm7E2c\nyBR/SiZdPIynOphmSgAkp8h0Zk83fIJP5ODbrjIE92pAqUKyPI9O56L/yhDHPf0o\nndiuAYI5R7jCxNt/GJuQ+jyJR9N5UaHhrGXHa7zNBVmltTOCJcNDA5Dvgo0sdKSk\nVDotgAS+xW2L4DnW9ApXcUxGYZ0qdjfotk7n3XGQMfqcF6iqcgagSgr6EiPOtak=\n=aQ/s\n-----END PGP SIGNATURE-----\n", "payload": "tree 19e64214b19b5d8b978eed73f551cd6348755700\nparent 4b9b714b5c3346db1f1c77ae84392b68c6f65d56\nparent 5c0b895f6906fac04cb4f8eddb888425e3dddba6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636903618 +0000\ncommitter GitHub <noreply@github.com> 1636903618 +0000\n\nMerge #10767\n\n10767: minor: Rename intern_macro -> intern_macro_call r=Veykril a=Veykril\n\nWe potentially want to intern macro definitions so the names would probably collide\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73668334f05c3446b04116ccc3156240d2d8ab19", "html_url": "https://github.com/rust-lang/rust/commit/73668334f05c3446b04116ccc3156240d2d8ab19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73668334f05c3446b04116ccc3156240d2d8ab19/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b714b5c3346db1f1c77ae84392b68c6f65d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b714b5c3346db1f1c77ae84392b68c6f65d56", "html_url": "https://github.com/rust-lang/rust/commit/4b9b714b5c3346db1f1c77ae84392b68c6f65d56"}, {"sha": "5c0b895f6906fac04cb4f8eddb888425e3dddba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b895f6906fac04cb4f8eddb888425e3dddba6", "html_url": "https://github.com/rust-lang/rust/commit/5c0b895f6906fac04cb4f8eddb888425e3dddba6"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "e25d867845824c9f6cb9e78297beab99e24d02ff", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -5,7 +5,7 @@\n //! But we need this for at least LRU caching at the query level.\n pub use hir_def::db::*;\n pub use hir_expand::db::{\n-    AstDatabase, AstDatabaseStorage, AstIdMapQuery, HygieneFrameQuery, InternMacroQuery,\n+    AstDatabase, AstDatabaseStorage, AstIdMapQuery, HygieneFrameQuery, InternMacroCallQuery,\n     MacroArgTextQuery, MacroDefQuery, MacroExpandQuery, ParseMacroExpansionQuery,\n };\n pub use hir_ty::db::*;"}, {"sha": "0cf868e64e1e4926636b249684797c3e736eda38", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -842,7 +842,7 @@ impl<'db> SemanticsImpl<'db> {\n     fn resolve_attr_macro_call(&self, item: &ast::Item) -> Option<MacroDef> {\n         let item_in_file = self.find_file(item.syntax().clone()).with_value(item.clone());\n         let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(item_in_file))?;\n-        Some(MacroDef { id: self.db.lookup_intern_macro(macro_call_id).def })\n+        Some(MacroDef { id: self.db.lookup_intern_macro_call(macro_call_id).def })\n     }\n \n     fn resolve_path(&self, path: &ast::Path) -> Option<PathResolution> {"}, {"sha": "b486beea7dc444dba2e959399d447cd8cbc48ef9", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -1141,7 +1141,7 @@ impl DefCollector<'_> {\n                         &resolver,\n                     ) {\n                         Ok(call_id) => {\n-                            let loc: MacroCallLoc = self.db.lookup_intern_macro(call_id);\n+                            let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call_id);\n                             if let MacroDefKind::ProcMacro(exp, ..) = &loc.def.kind {\n                                 if exp.is_dummy() {\n                                     // Proc macros that cannot be expanded are treated as not\n@@ -1214,7 +1214,7 @@ impl DefCollector<'_> {\n         // First, fetch the raw expansion result for purposes of error reporting. This goes through\n         // `macro_expand_error` to avoid depending on the full expansion result (to improve\n         // incrementality).\n-        let loc: MacroCallLoc = self.db.lookup_intern_macro(macro_call_id);\n+        let loc: MacroCallLoc = self.db.lookup_intern_macro_call(macro_call_id);\n         let err = self.db.macro_expand_error(macro_call_id);\n         if let Some(err) = err {\n             let diag = match err {"}, {"sha": "c20dae8e6f7941dbe39d99db267d64e96551b756", "filename": "crates/hir_expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -168,7 +168,7 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: MacroCallId) -> tt::TokenTree {\n     // FIXME: make hygiene works for builtin derive macro\n     // such that $crate can be used here.\n     let cg = db.crate_graph();\n-    let krate = db.lookup_intern_macro(id).krate;\n+    let krate = db.lookup_intern_macro_call(id).krate;\n \n     // XXX\n     //  All crates except core itself should have a dependency on core,"}, {"sha": "3add4c1103096030ec9d53ce107aa918fefd33b7", "filename": "crates/hir_expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -326,7 +326,7 @@ fn cfg_expand(\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n-    let loc = db.lookup_intern_macro(id);\n+    let loc = db.lookup_intern_macro_call(id);\n     let expr = CfgExpr::parse(tt);\n     let enabled = db.crate_graph()[loc.krate].cfg_options.check(&expr) != Some(false);\n     let expanded = if enabled { quote!(true) } else { quote!(false) };\n@@ -338,7 +338,7 @@ fn panic_expand(\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+    let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     // Expand to a macro call `$crate::panic::panic_{edition}`\n     let krate = tt::Ident { text: \"$crate\".into(), id: tt::TokenId::unspecified() };\n     let mut call = if db.crate_graph()[loc.krate].edition == Edition::Edition2021 {\n@@ -531,7 +531,7 @@ fn include_str_expand(\n }\n \n fn get_env_inner(db: &dyn AstDatabase, arg_id: MacroCallId, key: &str) -> Option<String> {\n-    let krate = db.lookup_intern_macro(arg_id).krate;\n+    let krate = db.lookup_intern_macro_call(arg_id).krate;\n     db.crate_graph()[krate].env.get(key)\n }\n "}, {"sha": "747a19a5092717571dbd03616422627dc3285cb6", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -103,7 +103,7 @@ pub trait AstDatabase: SourceDatabase {\n     /// We encode macro definitions into ids of macro calls, this what allows us\n     /// to be incremental.\n     #[salsa::interned]\n-    fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n+    fn intern_macro_call(&self, macro_call: MacroCallLoc) -> MacroCallId;\n \n     /// Lowers syntactic macro call to a token tree representation.\n     #[salsa::transparent]\n@@ -139,7 +139,7 @@ pub fn expand_speculative(\n     speculative_args: &SyntaxNode,\n     token_to_map: SyntaxToken,\n ) -> Option<(SyntaxNode, SyntaxToken)> {\n-    let loc = db.lookup_intern_macro(actual_macro_call);\n+    let loc = db.lookup_intern_macro_call(actual_macro_call);\n     let macro_def = db.macro_def(loc.def).ok()?;\n     let token_range = token_to_map.text_range();\n \n@@ -231,7 +231,7 @@ fn parse_macro_expansion(\n         // Note:\n         // The final goal we would like to make all parse_macro success,\n         // such that the following log will not call anyway.\n-        let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+        let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n         let node = loc.kind.to_node(db);\n \n         // collect parent information for warning log\n@@ -296,7 +296,7 @@ fn parse_macro_expansion(\n \n fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n     let arg = db.macro_arg_text(id)?;\n-    let loc = db.lookup_intern_macro(id);\n+    let loc = db.lookup_intern_macro_call(id);\n \n     let node = SyntaxNode::new_root(arg);\n     let censor = censor_for_macro_input(&loc, &node);\n@@ -339,7 +339,7 @@ fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<Sy\n }\n \n fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n-    let loc = db.lookup_intern_macro(id);\n+    let loc = db.lookup_intern_macro_call(id);\n     let arg = loc.kind.arg(db)?;\n     if matches!(loc.kind, MacroCallKind::FnLike { .. }) {\n         let first = arg.first_child_or_token().map_or(T![.], |it| it.kind());\n@@ -402,7 +402,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Result<Arc<TokenExpander>,\n \n fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<Option<Arc<tt::Subtree>>> {\n     let _p = profile::span(\"macro_expand\");\n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+    let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     if let Some(eager) = &loc.eager {\n         return ExpandResult {\n             value: Some(eager.arg_or_expansion.clone()),\n@@ -443,7 +443,7 @@ fn macro_expand_error(db: &dyn AstDatabase, macro_call: MacroCallId) -> Option<E\n }\n \n fn expand_proc_macro(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<tt::Subtree> {\n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+    let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     let macro_arg = match db.macro_arg(id) {\n         Some(it) => it,\n         None => return ExpandResult::str_err(\"No arguments for proc-macro\".to_string()),\n@@ -488,7 +488,7 @@ fn hygiene_frame(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<HygieneFrame>\n }\n \n fn macro_expand_to(db: &dyn AstDatabase, id: MacroCallId) -> ExpandTo {\n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+    let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     loc.kind.expand_to()\n }\n "}, {"sha": "ea57c2c41012298f18082c956bc7213f7cff71d3", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -119,7 +119,7 @@ pub fn expand_eager_macro(\n     // When `lazy_expand` is called, its *parent* file must be already exists.\n     // Here we store an eager macro id for the argument expanded subtree here\n     // for that purpose.\n-    let arg_id = db.intern_macro(MacroCallLoc {\n+    let arg_id = db.intern_macro_call(MacroCallLoc {\n         def,\n         krate,\n         eager: Some(EagerCallInfo {\n@@ -157,7 +157,7 @@ pub fn expand_eager_macro(\n             kind: MacroCallKind::FnLike { ast_id: call_id, expand_to },\n         };\n \n-        Ok(db.intern_macro(loc))\n+        Ok(db.intern_macro_call(loc))\n     } else {\n         panic!(\"called `expand_eager_macro` on non-eager macro def {:?}\", def);\n     }"}, {"sha": "e74c7052174b59c082cf94a182983e0133d916d1", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -141,7 +141,7 @@ impl HygieneInfo {\n         let token_id = self.exp_map.token_by_range(token)?;\n         let (mut token_id, origin) = self.macro_def.map_id_up(token_id);\n \n-        let loc = db.lookup_intern_macro(self.file.macro_call_id);\n+        let loc = db.lookup_intern_macro_call(self.file.macro_call_id);\n \n         let (token_map, tt) = match &loc.kind {\n             MacroCallKind::Attr { attr_args, .. } => match self.macro_arg_shift.unshift(token_id) {\n@@ -213,7 +213,7 @@ impl HygieneFrame {\n         let (info, krate, local_inner) = match file_id.0 {\n             HirFileIdRepr::FileId(_) => (None, None, false),\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 let info =\n                     make_hygiene_info(db, macro_file, &loc).map(|info| (loc.kind.file_id(), info));\n                 match loc.def.kind {"}, {"sha": "fdb639f55d2ecf09110969b699e2b53e91ab8b64", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -148,7 +148,7 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(file_id) => file_id,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 let file_id = match &loc.eager {\n                     Some(EagerCallInfo { included_file: Some(file), .. }) => (*file).into(),\n                     _ => loc.kind.file_id(),\n@@ -162,7 +162,7 @@ impl HirFileId {\n         let mut level = 0;\n         let mut curr = self;\n         while let HirFileIdRepr::MacroFile(macro_file) = curr.0 {\n-            let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+            let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n \n             level += 1;\n             curr = loc.kind.file_id();\n@@ -175,7 +175,7 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 Some(loc.kind.to_node(db))\n             }\n         }\n@@ -186,7 +186,7 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n \n                 let arg_tt = loc.kind.arg(db)?;\n \n@@ -231,7 +231,7 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 let item = match loc.def.kind {\n                     MacroDefKind::BuiltInDerive(..) => loc.kind.to_node(db),\n                     _ => return None,\n@@ -245,7 +245,7 @@ impl HirFileId {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => false,\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 match loc.def.kind {\n                     MacroDefKind::ProcMacro(_, ProcMacroKind::CustomDerive, _) => true,\n                     _ => false,\n@@ -258,7 +258,7 @@ impl HirFileId {\n     pub fn is_include_macro(&self, db: &dyn db::AstDatabase) -> bool {\n         match self.0 {\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 matches!(loc.eager, Some(EagerCallInfo { included_file: Some(_), .. }))\n             }\n             _ => false,\n@@ -269,7 +269,7 @@ impl HirFileId {\n     pub fn is_attr_macro(&self, db: &dyn db::AstDatabase) -> bool {\n         match self.0 {\n             HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n                 matches!(loc.kind, MacroCallKind::Attr { .. })\n             }\n             _ => false,\n@@ -288,7 +288,7 @@ impl MacroDefId {\n         krate: CrateId,\n         kind: MacroCallKind,\n     ) -> MacroCallId {\n-        db.intern_macro(MacroCallLoc { def: self, krate, eager: None, kind })\n+        db.intern_macro_call(MacroCallLoc { def: self, krate, eager: None, kind })\n     }\n \n     pub fn ast_id(&self) -> Either<AstId<ast::Macro>, AstId<ast::Fn>> {\n@@ -402,7 +402,7 @@ impl ExpansionInfo {\n                 HirFileIdRepr::FileId(_) => return None,\n                 HirFileIdRepr::MacroFile(macro_file) => macro_file.macro_call_id,\n             };\n-            let loc = db.lookup_intern_macro(call_id);\n+            let loc = db.lookup_intern_macro_call(call_id);\n \n             let token_range = token.value.text_range();\n             match &loc.kind {\n@@ -458,7 +458,7 @@ impl ExpansionInfo {\n             HirFileIdRepr::FileId(_) => return None,\n             HirFileIdRepr::MacroFile(macro_file) => macro_file.macro_call_id,\n         };\n-        let loc = db.lookup_intern_macro(call_id);\n+        let loc = db.lookup_intern_macro_call(call_id);\n \n         let (token_map, tt) = match &loc.kind {\n             MacroCallKind::Attr { attr_args, .. } => match self.macro_arg_shift.unshift(token_id) {"}, {"sha": "bba270421cfe8786d636ca3a41e886846dd8f8ba", "filename": "crates/ide_db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73668334f05c3446b04116ccc3156240d2d8ab19/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=73668334f05c3446b04116ccc3156240d2d8ab19", "patch": "@@ -78,7 +78,7 @@ impl RootDatabase {\n             hir::db::ParseMacroExpansionQuery\n             hir::db::MacroExpandQuery\n             hir::db::HygieneFrameQuery\n-            hir::db::InternMacroQuery\n+            hir::db::InternMacroCallQuery\n \n             // DefDatabase\n             hir::db::FileItemTreeQuery"}]}