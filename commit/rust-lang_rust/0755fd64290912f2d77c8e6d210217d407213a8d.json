{"sha": "0755fd64290912f2d77c8e6d210217d407213a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NTVmZDY0MjkwOTEyZjJkNzdjOGU2ZDIxMDIxN2Q0MDcyMTNhOGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-05T16:37:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-05T16:37:22Z"}, "message": "Merge pull request #376 from bjorn3/fix_some_tests\n\nFix a couple of compile-fail tests", "tree": {"sha": "13821fc5e2258771e2b79ef52806d1c7391b96f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13821fc5e2258771e2b79ef52806d1c7391b96f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0755fd64290912f2d77c8e6d210217d407213a8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbFrxDCRBK7hj4Ov3rIwAAdHIIAJwZ7Br76WHdUAAL63WmIMEU\nqe3eoa9U993L0Re9DRqKkpNcc4io6WOFJzrNm1nydPbtRa0VjZpIQAY7Q8nJu0bE\n4rGkv+6sao1fEivyTcd75TwTpUjGEp6M0nAW5OUvzusyQeWYUsqMRtmnJXtPYOKh\nAPdkAos6Go6SbEXRLZzCeqEe31WhEL/zXH1XBGsynajG0cOxHTd0JjvwUWPY6wWP\n2/zeJ1f5+EeDPNNuprgBUbsa+KUuI/s42AgwK9Hn5dVMGcgztbK/wp2XFVqJ634L\nUKaRrbntRC+waRsvFhHCV9fPEB3qEjOIaTFYAG/hCQsA/YXvbt/Dkw7DMWAxMS8=\n=h4e5\n-----END PGP SIGNATURE-----\n", "payload": "tree 13821fc5e2258771e2b79ef52806d1c7391b96f8\nparent 9ba64e290a97328fc3be43563a10b9eab12aad3e\nparent ac25a513af7900a5ad2b10498d50591f28ba0db4\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1528216642 +0200\ncommitter GitHub <noreply@github.com> 1528216642 +0200\n\nMerge pull request #376 from bjorn3/fix_some_tests\n\nFix a couple of compile-fail tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0755fd64290912f2d77c8e6d210217d407213a8d", "html_url": "https://github.com/rust-lang/rust/commit/0755fd64290912f2d77c8e6d210217d407213a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0755fd64290912f2d77c8e6d210217d407213a8d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba64e290a97328fc3be43563a10b9eab12aad3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba64e290a97328fc3be43563a10b9eab12aad3e", "html_url": "https://github.com/rust-lang/rust/commit/9ba64e290a97328fc3be43563a10b9eab12aad3e"}, {"sha": "ac25a513af7900a5ad2b10498d50591f28ba0db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac25a513af7900a5ad2b10498d50591f28ba0db4", "html_url": "https://github.com/rust-lang/rust/commit/ac25a513af7900a5ad2b10498d50591f28ba0db4"}], "stats": {"total": 311, "additions": 154, "deletions": 157}, "files": [{"sha": "e8bbe164611da909bea679d631aaace40862cfbc", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -249,6 +249,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n         Ok(()) => {\n             let leaks = ecx.memory().leak_report();\n             if leaks != 0 {\n+                // TODO: Prevent leaks which aren't supposed to be there\n                 //tcx.sess.err(\"the evaluated program leaked memory\");\n             }\n         }"}, {"sha": "9730fe473aa5d2194460977d8022ee5dc0883ee2", "filename": "tests/compile-fail/alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falignment.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -5,7 +5,8 @@ fn main() {\n     let x_ptr: *mut u8 = &mut x[0];\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n-        *y_ptr = 42; //~ ERROR tried to access memory with alignment 1, but alignment\n+        *y_ptr = 42; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to access memory with alignment 1, but alignment\n     }\n     panic!(\"unreachable in miri\");\n }"}, {"sha": "cf0632393ad6d803649f2236b7489d6bc152ac25", "filename": "tests/compile-fail/assume.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ ERROR: `assume` argument was false\n+        std::intrinsics::assume(x > 42); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE `assume` argument was false\n     }\n }"}, {"sha": "89f5e048a36d9fbe098bd769d6194ea71ba47e00", "filename": "tests/compile-fail/bitop-beyond-alignment.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -28,10 +28,11 @@ fn mk_rec() -> Rec {\n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n     let p: usize = unsafe { mem::transmute(u) };\n     let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    return (p & (u64_align + 1)) == 0; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n }\n \n pub fn main() {\n     let x = mk_rec();\n-    assert!(is_u64_aligned(&x.t));\n+    assert!(is_u64_aligned(&x.t)); //~ NOTE inside call to `is_u64_aligned\n }"}, {"sha": "39b53da0b75cde1d849468a4bbd3b60b4a4c21de", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -7,5 +7,6 @@ fn main() {\n         std::mem::transmute::<&usize, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    (*g)(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "19344b13ba7c9300eda6965e4b88a1939a883691", "filename": "tests/compile-fail/cast_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -5,5 +5,6 @@ fn main() {\n         std::mem::transmute::<fn(), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function with sig fn() through a function pointer of type fn(i32)\n+    g(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to call a function with sig fn() through a function pointer of type fn(i32)\n }"}, {"sha": "23868c0e57db419a06c40fa9b67d684892bb2cd5", "filename": "tests/compile-fail/cast_fn_ptr2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -5,5 +5,6 @@ fn main() {\n         std::mem::transmute::<fn((i32,i32)), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function with sig fn((i32, i32)) through a function pointer of type fn(i32)\n+    g(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to call a function with sig fn((i32, i32)) through a function pointer of type fn(i32)\n }"}, {"sha": "c7556ae06b93e08b563bced30e7fbf979c3e71b6", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -6,5 +6,6 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR a memory access tried to interpret some bytes as a pointer\n+    g(42) //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "18fbc61b6d07090b800f1cee18acf372374420f6", "filename": "tests/compile-fail/copy_nonoverlapping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopy_nonoverlapping.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(core_intrinsics)]\n \n-use std::intrinsics::*;\n-\n //error-pattern: copy_nonoverlapping called on overlapping ranges\n \n fn main() {"}, {"sha": "d952187eba45647de2b67e310660b9f0fa7604b7", "filename": "tests/compile-fail/ctlz_nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fctlz_nonzero.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -10,6 +10,7 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        ctlz_nonzero(0u8); //~ ERROR: ctlz_nonzero called on 0\n+        ctlz_nonzero(0u8); //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE ctlz_nonzero called on 0\n     }\n }"}, {"sha": "b308484622bc4f30ebe3268fcf8c30c6e16a1ef6", "filename": "tests/compile-fail/cttz_nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcttz_nonzero.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -10,6 +10,7 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        cttz_nonzero(0u8); //~ ERROR: cttz_nonzero called on 0\n+        cttz_nonzero(0u8); //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE cttz_nonzero called on 0\n     }\n }"}, {"sha": "d42c1d33b530a79b43842796a37bd75e8490ed8c", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -3,6 +3,7 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR: dangling pointer was dereferenced\n+    let x = unsafe { *p }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE dangling pointer was dereferenced\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "36e99cb11f72538c603695fbe6610771d759d85d", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,14 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: incorrect alloc info: expected size 1 and align 2, got size 1 and align 1\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "f1271cefd1ac14044df20a16fe50cbaf39820672", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,14 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "58fcb7409495ca3dccd24acaf7076feaabea4b17", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,15 +2,15 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: tried to deallocate dangling pointer\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }\n }"}, {"sha": "a56df5bce408e81cfaa0bde60280f6411a26a066", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,7 +2,8 @@ fn f() {}\n \n fn main() {\n     let x: i32 = unsafe {\n-        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR: tried to dereference a function pointer\n+        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to dereference a function pointer\n     };\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "c90ca8d15cceab36cf6ceabd7fa5ab581947c8b8", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -11,5 +11,6 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 1 / 0; //~ ERROR: DivisionByZero\n+    let _n = 1 / 0; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempt to divide by zero\n }"}, {"sha": "014c551df0f13d91ff695cac5c984dbeedb8a85d", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -7,6 +7,7 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR: tried to treat a memory pointer as a function pointer\n+        f() //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to treat a memory pointer as a function pointer\n     }\n }"}, {"sha": "20eb6573989c004defcd07c6056cf3a440cbe0d5", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -10,5 +10,6 @@ fn main() {\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x : fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR: tried to use a function pointer after offsetting it\n+    x(); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to use a function pointer after offsetting it\n }"}, {"sha": "07c407966a8fdf52a0c47abdffdadb1d0751569c", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n-    let b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR: invalid boolean value read\n-    if b { unreachable!() } else { unreachable!() }\n+    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n+    if b { unreachable!() } else { unreachable!() } //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE invalid boolean value read\n }"}, {"sha": "69d7e3e427d4b6fae8816778f64b8e3c62721e2c", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -9,9 +9,10 @@ pub enum Foo {\n fn main() {\n     let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n     match f {\n-        Foo::A => {}, //~ ERROR invalid enum discriminant value read\n+        Foo::A => {},\n         Foo::B => {},\n         Foo::C => {},\n         Foo::D => {},\n     }\n-}\n+} //~ ERROR constant evaluation error [E0080]\n+//~^ NOTE entered unreachable code"}, {"sha": "15ce2f2f79525912bca237d72d1d8325ba4c51ef", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ERROR tried to interpret an invalid 32-bit value as a char: 4294967295\n+    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to interpret an invalid 32-bit value as a char: 4294967295\n         'a' => {},\n         'b' => {},\n         _ => {},"}, {"sha": "06920fa0acf16647786fc4d82a7047a18d5c18e1", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,6 +1,7 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42; //~ ERROR tried to modify constant memory\n+    *y = 42;  //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to modify constant memory\n     assert_eq!(*x, 42);\n }"}, {"sha": "de8815ffd9c4ec2f49560e97981db1c4e4095168", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -7,7 +7,8 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR entered unreachable code\n+        *(y as *const _ as *const !)  //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE entered unreachable code\n     };\n     f(x)\n }"}, {"sha": "3422d52f9c044c480551f110c05e5700ffb9d87f", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -9,7 +9,8 @@ struct Human;\n \n fn main() {\n     let x: ! = unsafe {\n-        std::mem::transmute::<Human, !>(Human) //~ ERROR entered unreachable code\n+        std::mem::transmute::<Human, !>(Human) //~ ERROR constant evaluation error [E0080]\n+        //^~ NOTE entered unreachable code\n     };\n     f(x)\n }"}, {"sha": "4f1499483eda24b9534e11211b70f45b5e612537", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -8,12 +8,13 @@\n enum Void {}\n \n fn f(v: Void) -> ! {\n-    match v {} //~ ERROR entered unreachable code\n+    match v {} //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE entered unreachable code\n }\n \n fn main() {\n     let v: Void = unsafe {\n         std::mem::transmute::<(), Void>(())\n     };\n-    f(v);\n+    f(v); //~ inside call to `f`\n }"}, {"sha": "70df937c4c7c5d9abc9090b47454506c16de78e4", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR: invalid use of NULL pointer\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE invalid use of NULL pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d4aebb912ee1707ef795f555cfa88497b1ff82e9", "filename": "tests/compile-fail/oom.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Foom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Foom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foom.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,7 +0,0 @@\n-#![feature(custom_attribute, attr_literals)]\n-#![miri(memory_size=4095)]\n-\n-fn main() {\n-    let _x = [42; 1024];\n-    //~^ERROR tried to allocate 4096 more bytes, but only\n-}"}, {"sha": "6c973bcf4016ddfba9b859b4ceaacaa35244c135", "filename": "tests/compile-fail/oom2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Foom2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Foom2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foom2.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,14 +0,0 @@\n-// Validation forces more allocation; disable it.\n-// compile-flags: -Zmir-emit-validate=0\n-#![feature(box_syntax, custom_attribute, attr_literals)]\n-#![miri(memory_size=1024)]\n-\n-// On 64bit platforms, the allocator needs 32 bytes allocated to pass a return value, so that's the error we see.\n-// On 32bit platforms, it's just 16 bytes.\n-// error-pattern: tried to allocate\n-\n-fn main() {\n-    loop {\n-        ::std::mem::forget(box 42);\n-    }\n-}"}, {"sha": "e19a616a191651db51acc1fabce20565261fb500", "filename": "tests/compile-fail/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing math\n+// error-pattern: attempt to add with overflow\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "d8811e7abcd2555b8c0c1ea0138315acb30483f3", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: which has size 2\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "54738cf81fbd8bd058587c39c1707c535796dd23", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: memory access at offset 6, outside bounds of allocation\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE memory access at offset 6, outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "e50e4250364995affbb90817bb6af060075bfb2d", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -12,5 +12,6 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 2i64 << -1; //~ Overflow(Shl)\n+    let _n = 2i64 << -1; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempt to shift left with overflow\n }"}, {"sha": "4447b9d7579a7b9e2d91de423bbd909c64bef5f8", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -12,5 +12,6 @@\n \n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n-    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ Overflow(Shr)\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE suiriuruihrihue\n }"}, {"sha": "c291815e2e79ab5f7447433711280b7f1987b66c", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -11,5 +11,6 @@\n #![allow(exceeding_bitshifts)]\n \n fn main() {\n-    let _n = 1i64 >> 64; //~ Overflow(Shr)\n+    let _n = 1i64 >> 64; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempt to shift right with overflow\n }"}, {"sha": "fabbef5004d771a718b9dfe9fcd7f54b996ccc46", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -6,6 +6,7 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR: attempted to read undefined bytes\n+    let x = *p; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "012af897e83703cb30afacb736e330257dd52dbf", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -3,5 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const usize;\n     let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _ = ptr_bytes % 432; //~ ERROR: tried to access part of a pointer value as raw bytes\n+    let _ = ptr_bytes % 432; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "4d25a36a3c883159452bb064053999770f4a013b", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -3,5 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR: tried to access part of a pointer value as raw bytes\n+    let _ = unsafe { *z }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "72ae1b123e8a266596c4d368c3459d51b401632f", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,7 +1,8 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR: attempted to do invalid arithmetic on pointers\n+    if x < y { //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }\n }"}, {"sha": "52bcf24cf6b8fa78e954371b3607efcf6730f0eb", "filename": "tests/compile-fail/ptr_bitops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fptr_bitops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fptr_bitops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     let bytes = [0i8, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let one = bytes.as_ptr().wrapping_offset(1);\n     let three = bytes.as_ptr().wrapping_offset(3);\n-    let res = (one as usize) | (three as usize); //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let res = (one as usize) | (three as usize); //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n     println!(\"{}\", res);\n }"}, {"sha": "56403d619ffadf38ae792b811fa5ad9d96231fd9", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     let x = &1;\n     // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n     let x = x as *const i32;\n-    let x = x as u8; //~ ERROR: a raw memory access tried to access part of a pointer value as raw bytes\n+    let x = x as u8; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n     let _ = unsafe { *x };\n }"}, {"sha": "32ab2daebf0d0443b5aab4572cfa2e5892b1b8d5", "filename": "tests/compile-fail/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_overflow.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: overflowing math\n+//error-pattern: attempt to add with overflow\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}, {"sha": "e44f26c4c4cfbb1c849dce1c92fbeb1d1a56463f", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -24,6 +24,7 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR: tried to access part of a pointer value as raw bytes\n+        let _x = *d_alias; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to access part of a pointer value as raw bytes\n     }\n }"}, {"sha": "fae8246c5d29c2bbec346a2200e6180a20df7354", "filename": "tests/compile-fail/reallocate-bad-alignment-2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,16 +0,0 @@\n-#![feature(alloc, allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n-\n-// error-pattern: incorrect alloc info: expected size 1 and align 2, got size 1 and align 1\n-\n-fn main() {\n-    unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        // Try realloc with a too big alignment.\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 2), Layout::from_size_align_unchecked(1, 1)).unwrap();\n-    }\n-}"}, {"sha": "6a928de07eec3dfe908e7d0332d3d70780354bdb", "filename": "tests/compile-fail/reallocate-bad-alignment.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,16 +0,0 @@\n-#![feature(alloc, allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n-\n-// error-pattern: incorrect alloc info: expected size 1 and align 1, got size 1 and align 2\n-\n-fn main() {\n-    unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 2)).unwrap();\n-        // Try realloc with a too small alignment.\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 2)).unwrap();\n-    }\n-}"}, {"sha": "d75c195d521e0f766c5d562198282c9a5af2158d", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,14 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(2, 1), Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1);\n     }\n }"}, {"sha": "d8234e933300b5dba91d91f0795101b5e0e45a43", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,13 +2,14 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _z = *x; //~ ERROR: dangling pointer was dereferenced\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n+        let _z = *(x as *mut u8); //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE dangling pointer was dereferenced\n     }\n }"}, {"sha": "39b60407160e4fa8c61fdf289b499026d47c257d", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,15 +2,15 @@\n \n extern crate alloc;\n \n-use alloc::heap::Heap;\n-use alloc::allocator::*;\n+use alloc::alloc::Global;\n+use std::alloc::*;\n \n // error-pattern: dangling pointer was dereferenced\n \n fn main() {\n     unsafe {\n-        let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        Heap.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Heap.realloc(x, Layout::from_size_align_unchecked(1, 1), Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n     }\n }"}, {"sha": "16b452ca0e3c9c931e13d733d2160e2aeb5f6d08", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -15,5 +15,6 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "abe89e233e7cd824849d93b527c3a176949aa8c4", "filename": "tests/compile-fail/repeat.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frepeat.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let data: [u8; std::usize::MAX] = [42; std::usize::MAX];\n-    //~^ ERROR: rustc layout computation failed: SizeOverflow([u8;\n-    assert_eq!(data.len(), 1024);\n-}"}, {"sha": "61aa855a798f8eca8d0f07efc0a2ef55ae9a3f22", "filename": "tests/compile-fail/repeat2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Frepeat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Frepeat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frepeat2.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let data: [u8; 1024*1024*1024] = [42; 1024*1024*1024];\n-    //~^ ERROR: tried to allocate\n-    assert_eq!(data.len(), 1024*1024*1024);\n-}"}, {"sha": "7182f40d994dd834ebd3f581d2e1fba49c5ec25c", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -3,7 +3,8 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     unsafe {\n-        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR: tried to modify constant memory\n+        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to modify constant memory\n         assert_eq!(X, 6);\n     }\n }"}, {"sha": "6abe6de1fcf41ddc145cf0120b8546a6bad7562b", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -7,6 +7,7 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR: tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to modify constant memory\n     }\n }"}, {"sha": "0891756f0ec6141c99ee28e74fa6360af422ca3e", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -4,6 +4,7 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR: tried to modify constant memory\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR constant evaluation error [E0080]\n+        //~^ NOTE tried to modify constant memory\n     }\n }"}, {"sha": "edd4c31866910642e97e6813084c7c27240367ec", "filename": "tests/compile-fail/timeout.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Ftimeout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba64e290a97328fc3be43563a10b9eab12aad3e/tests%2Fcompile-fail%2Ftimeout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftimeout.rs?ref=9ba64e290a97328fc3be43563a10b9eab12aad3e", "patch": "@@ -1,9 +0,0 @@\n-//error-pattern: reached the configured maximum execution time\n-#![feature(custom_attribute, attr_literals)]\n-#![miri(step_limit=1000)]\n-\n-fn main() {\n-    for i in 0..1000000 {\n-        assert!(i < 1000);\n-    }\n-}"}, {"sha": "6b4fe2273a080fd0aed3e78b6b25646736fa66d8", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -16,5 +16,6 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    if v == 0 {} //~ ERROR attempted to read undefined bytes\n+    if v == 0 {} //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE attempted to read undefined bytes\n }"}, {"sha": "81d783807c586aa74fc3868a180a9ac8990562bf", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,6 +1,5 @@\n // This should fail even without validation\n // compile-flags: -Zmir-emit-validate=0\n-#![feature(i128_type)]\n \n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n@@ -11,5 +10,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], u64>(&[1u8])\n     };\n-    bad + 1; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let _ = bad + 1; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "96a713305e6bd92406b42db993f8d64b49fbb544", "filename": "tests/compile-fail/transmute_fat2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,5 +1,3 @@\n-#![feature(i128_type)]\n-\n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n     let bad = unsafe {\n@@ -9,5 +7,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n-    bad[0]; //~ ERROR index out of bounds: the len is 0 but the index is 0\n+    bad[0]; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE index out of bounds: the len is 0 but the index is 0\n }"}, {"sha": "cb9523395391fcef46a51240ec6cd85f9c44c831", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "dee2bbc9972f7f6b486af5936b7468d304b3376e", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -3,5 +3,6 @@ fn main() {\n     let x = x as *const _ as *const *const u8;\n     // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n     // in miri's memory.\n-    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 2, but alignment\n }"}, {"sha": "eba17ab6c6406b0a4728485492b15b2a95f394bf", "filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated.  Test specifically for loading ZST.\n-    let _x = unsafe { *x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "e812e13e702cadbfc5dd1dece7e0ba011b0720e2", "filename": "tests/compile-fail/validation_aliasing_mut1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut1.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "36ebcc2b4ac6fae57a657af0c9b9c1dfdeda47a3", "filename": "tests/compile-fail/validation_aliasing_mut2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "ad50fbd61b451f0d1a8d1cd05b24afe11a8eff8c", "filename": "tests/compile-fail/validation_aliasing_mut3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut3.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "a0f0a3cf9753a1abbb6fff23ded22eeb41f0e989", "filename": "tests/compile-fail/validation_aliasing_mut4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "282e536ce9b738d7006f2a6f025b2edb1080eb45", "filename": "tests/compile-fail/validation_buggy_as_mut_slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_buggy_as_mut_slice.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n // For some reason, the error location is different when using fullmir"}, {"sha": "a750f1466f51b8cf431e084c191c87288f15a864", "filename": "tests/compile-fail/validation_buggy_split_at_mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "cb3e4b3c1a204249571a6010bf3bfee86b104913", "filename": "tests/compile-fail/validation_illegal_write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "2a0857659622f7ddb7a6736165052f2493d1814f", "filename": "tests/compile-fail/validation_lock_confusion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_lock_confusion.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n // Make sure validation can handle many overlapping shared borrows for different parts of a data structure\n #![allow(unused_variables)]\n use std::cell::RefCell;"}, {"sha": "14d6242860382d5781ada58d749ffe87a1b8a862", "filename": "tests/compile-fail/validation_pointer_smuggling.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n static mut PTR: *mut u8 = 0 as *mut _;"}, {"sha": "9061070ef67ebbed6aeb9dff7bd9b0740794e6ce", "filename": "tests/compile-fail/validation_recover1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover1.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n #[repr(u32)]"}, {"sha": "7a4a417ab1db993b640864d6911a92f9015d94c8", "filename": "tests/compile-fail/validation_recover2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover2.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "5cfc8aaa66b5f2cefa127b5dfe236a00e65b497b", "filename": "tests/compile-fail/validation_recover3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover3.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "939e93a264e8c03214903485b62c38c206353092", "filename": "tests/compile-fail/validation_undef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fvalidation_undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_undef.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test validation_op is disabled\n+\n #![allow(unused_variables)]\n // error-pattern: attempted to read undefined bytes\n "}, {"sha": "035d979c5b07eeef54fcf1e23de336182a7604cd", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR: a memory access tried to interpret some bytes as a pointer\n+    let x = unsafe { *p }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE a memory access tried to interpret some bytes as a pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d6518a48aa828c44612b4a52d5b287dbb5d06ab1", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -1,4 +1,5 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR: tried to access memory with alignment 1, but alignment 4 is required\n+    let _ = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "e62fa4e65e63045de6ce1b91d34a9868a0d13f27", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0755fd64290912f2d77c8e6d210217d407213a8d/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=0755fd64290912f2d77c8e6d210217d407213a8d", "patch": "@@ -203,7 +203,7 @@ fn run_pass_rustc() {\n }\n \n #[test]\n-#[ignore] // TODO: update test errors\n+#[should_panic] // TODO: update test errors\n fn compile_fail_miri() {\n     let sysroot = get_sysroot();\n     let host = get_host();"}]}