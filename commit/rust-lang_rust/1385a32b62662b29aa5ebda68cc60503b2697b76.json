{"sha": "1385a32b62662b29aa5ebda68cc60503b2697b76", "node_id": "C_kwDOAAsO6NoAKDEzODVhMzJiNjI2NjJiMjlhYTVlYmRhNjhjYzYwNTAzYjI2OTdiNzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-16T07:57:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-16T07:57:05Z"}, "message": "Rollup merge of #108971 - Ezrashaw:E0532-better-binding-names, r=WaffleLapkin\n\nerror-msg: impl better suggestion for `E0532`\n\nFixes #106862\n\nNo test as there is already a test which is nearly identical to the example in the linked issue.", "tree": {"sha": "45207c4f9023e468cb374065a569c25a4ed7c128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45207c4f9023e468cb374065a569c25a4ed7c128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1385a32b62662b29aa5ebda68cc60503b2697b76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEsvRCRBK7hj4Ov3rIwAAqekIADDB0akeHfD41y911gOUuEhY\njtaAwAW6xe/DTc2IgJs19TXpg+MhJRXCM3DRYVsCCCVhN9Muciv/sUdt9WXEyv4I\nDOX/hs+MlF8J8jcWWmweZ+0TV0Y/RVZDT3PyNPkXadDDSLsy8C2NvqSvGOvtewKk\nXICpKSWQ+Mvb7sqYxJwTbGkuGGdf+Dbv4605RptAzODgL3tQ0KqHYCrHv+uyPA1C\ni9/W6qsDUxLXwp5GCFFZ0zzH4S7HkhJKtBL+b6JD0MjB7PimQZzruCEPzrHbsa1L\nGv/4Fh/UIVDAWj8ddxJcHB3/J4BgrTOcKyKyISPKv/KTkbeXsT/xqP7iDfKzXsM=\n=z5qF\n-----END PGP SIGNATURE-----\n", "payload": "tree 45207c4f9023e468cb374065a569c25a4ed7c128\nparent aa881f16eccfd3614bc3d40aaf9b1af6d860c16a\nparent bd1732240b586733d8d9fb47cf9ef4cfc299c22e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678953425 +0100\ncommitter GitHub <noreply@github.com> 1678953425 +0100\n\nRollup merge of #108971 - Ezrashaw:E0532-better-binding-names, r=WaffleLapkin\n\nerror-msg: impl better suggestion for `E0532`\n\nFixes #106862\n\nNo test as there is already a test which is nearly identical to the example in the linked issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1385a32b62662b29aa5ebda68cc60503b2697b76", "html_url": "https://github.com/rust-lang/rust/commit/1385a32b62662b29aa5ebda68cc60503b2697b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1385a32b62662b29aa5ebda68cc60503b2697b76/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "html_url": "https://github.com/rust-lang/rust/commit/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a"}, {"sha": "bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1732240b586733d8d9fb47cf9ef4cfc299c22e", "html_url": "https://github.com/rust-lang/rust/commit/bd1732240b586733d8d9fb47cf9ef4cfc299c22e"}], "stats": {"total": 186, "additions": 169, "deletions": 17}, "files": [{"sha": "df7681dc4267b5d1d3ff4976b1f2797cdb078427", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1385a32b62662b29aa5ebda68cc60503b2697b76/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385a32b62662b29aa5ebda68cc60503b2697b76/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1385a32b62662b29aa5ebda68cc60503b2697b76", "patch": "@@ -1289,25 +1289,41 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 PathSource::Expr(_) | PathSource::TupleStruct(..) | PathSource::Pat => {\n                     let span = find_span(&source, err);\n                     err.span_label(self.r.def_span(def_id), &format!(\"`{path_str}` defined here\"));\n-                    let (tail, descr, applicability) = match source {\n-                        PathSource::Pat | PathSource::TupleStruct(..) => {\n-                            (\"\", \"pattern\", Applicability::MachineApplicable)\n-                        }\n-                        _ => (\": val\", \"literal\", Applicability::HasPlaceholders),\n-                    };\n \n+                    let (tail, descr, applicability, old_fields) = match source {\n+                        PathSource::Pat => (\"\", \"pattern\", Applicability::MachineApplicable, None),\n+                        PathSource::TupleStruct(_, args) => (\n+                            \"\",\n+                            \"pattern\",\n+                            Applicability::MachineApplicable,\n+                            Some(\n+                                args.iter()\n+                                    .map(|a| self.r.tcx.sess.source_map().span_to_snippet(*a).ok())\n+                                    .collect::<Vec<Option<String>>>(),\n+                            ),\n+                        ),\n+                        _ => (\": val\", \"literal\", Applicability::HasPlaceholders, None),\n+                    };\n                     let field_ids = self.r.field_def_ids(def_id);\n                     let (fields, applicability) = match field_ids {\n-                        Some(field_ids) => (\n-                            field_ids\n-                                .iter()\n-                                .map(|&field_id| {\n-                                    format!(\"{}{tail}\", self.r.tcx.item_name(field_id))\n-                                })\n-                                .collect::<Vec<String>>()\n-                                .join(\", \"),\n-                            applicability,\n-                        ),\n+                        Some(field_ids) => {\n+                            let fields = field_ids.iter().map(|&id| self.r.tcx.item_name(id));\n+\n+                            let fields = if let Some(old_fields) = old_fields {\n+                                fields\n+                                    .enumerate()\n+                                    .map(|(idx, new)| (new, old_fields.get(idx)))\n+                                    .map(|(new, old)| {\n+                                        let new = new.to_ident_string();\n+                                        if let Some(Some(old)) = old && new != *old { format!(\"{}: {}\", new, old) } else { new }\n+                                    })\n+                                    .collect::<Vec<String>>()\n+                            } else {\n+                                fields.map(|f| format!(\"{f}{tail}\")).collect::<Vec<String>>()\n+                            };\n+\n+                            (fields.join(\", \"), applicability)\n+                        }\n                         None => (\"/* fields */\".to_string(), Applicability::HasPlaceholders),\n                     };\n                     let pad = match field_ids {"}, {"sha": "90d0bb406554350793bc7537752184952bd29eab", "filename": "tests/ui/issues/issue-19086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-19086.stderr?ref=1385a32b62662b29aa5ebda68cc60503b2697b76", "patch": "@@ -5,7 +5,7 @@ LL |     FooB { x: i32, y: i32 }\n    |     ----------------------- `FooB` defined here\n ...\n LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n-   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x: a, y: b }`\n \n error: aborting due to previous error\n "}, {"sha": "9b27a61ffd06905be77f622acce6931455bddfde", "filename": "tests/ui/pattern/issue-106862.fixed", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fpattern%2Fissue-106862.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fpattern%2Fissue-106862.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106862.fixed?ref=1385a32b62662b29aa5ebda68cc60503b2697b76", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use Foo::{FooB, FooA};\n+\n+enum Foo {\n+    FooA { opt_x: Option<i32>, y: i32 },\n+    FooB { x: i32, y: i32 }\n+}\n+\n+fn main() {\n+    let f = FooB { x: 3, y: 4 };\n+\n+    match f {\n+        FooB { x: a, y: b } => println!(\"{} {}\", a, b),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB { x, y } => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooA { opt_x: Some(x), y } => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooA`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB { x: a, y: _ } => println!(\"{}\", a),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB { x, y } => (),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+}"}, {"sha": "590430a784314e1308869b79bb345fc607cba14a", "filename": "tests/ui/pattern/issue-106862.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fpattern%2Fissue-106862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fpattern%2Fissue-106862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106862.rs?ref=1385a32b62662b29aa5ebda68cc60503b2697b76", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use Foo::{FooB, FooA};\n+\n+enum Foo {\n+    FooA { opt_x: Option<i32>, y: i32 },\n+    FooB { x: i32, y: i32 }\n+}\n+\n+fn main() {\n+    let f = FooB { x: 3, y: 4 };\n+\n+    match f {\n+        FooB(a, b) => println!(\"{} {}\", a, b),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB(x, y) => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooA(Some(x), y) => println!(\"{} {}\", x, y),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooA`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB(a, _, _) => println!(\"{}\", a),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+\n+    match f {\n+        FooB() => (),\n+        //~^ ERROR expected tuple struct or tuple variant, found variant `FooB`\n+        _ => (),\n+    }\n+}"}, {"sha": "27f8ac97284ebd7063a15b629f64736e320bf1a2", "filename": "tests/ui/pattern/issue-106862.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fpattern%2Fissue-106862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1385a32b62662b29aa5ebda68cc60503b2697b76/tests%2Fui%2Fpattern%2Fissue-106862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106862.stderr?ref=1385a32b62662b29aa5ebda68cc60503b2697b76", "patch": "@@ -0,0 +1,48 @@\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:16:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x: a, y: b }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:22:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB(x, y) => println!(\"{} {}\", x, y),\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooA`\n+  --> $DIR/issue-106862.rs:28:9\n+   |\n+LL |     FooA { opt_x: Option<i32>, y: i32 },\n+   |     ----------------------------------- `FooA` defined here\n+...\n+LL |         FooA(Some(x), y) => println!(\"{} {}\", x, y),\n+   |         ^^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `FooA { opt_x: Some(x), y }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:34:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB(a, _, _) => println!(\"{}\", a),\n+   |         ^^^^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x: a, y: _ }`\n+\n+error[E0532]: expected tuple struct or tuple variant, found variant `FooB`\n+  --> $DIR/issue-106862.rs:40:9\n+   |\n+LL |     FooB { x: i32, y: i32 }\n+   |     ----------------------- `FooB` defined here\n+...\n+LL |         FooB() => (),\n+   |         ^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}]}