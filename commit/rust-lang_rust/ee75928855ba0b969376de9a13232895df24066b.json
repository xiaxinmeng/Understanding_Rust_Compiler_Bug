{"sha": "ee75928855ba0b969376de9a13232895df24066b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNzU5Mjg4NTViYTBiOTY5Mzc2ZGU5YTEzMjMyODk1ZGYyNDA2NmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-05T10:29:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-05T10:29:59Z"}, "message": "Merge #3471\n\n3471: Remove pwd r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ebf6c4374e224174ad13134809e2d800e13272ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf6c4374e224174ad13134809e2d800e13272ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee75928855ba0b969376de9a13232895df24066b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYNSnCRBK7hj4Ov3rIwAAdHIIAJP71lucTQyhqCiKaBAvUtfZ\nkHEuQHy1lsHeQocCz19QhiipQUYAsHl1U0bsiNNGs1eNuWRjbmg5r6QZIS6PzMqC\nBPzneqctYrIDQHMvw9BOP+i8Mi0bWt/zxYBDVjZURaqAXacbiQRt/FEgEzB+twOV\n1ixdTw+28Fpfc/Oi6oSdVDc1Ks9L8AbwojVvrwR6pZGctm07k2JohEAttwCAl/en\nhbifG3pkkjmPj8MeBYDlW7vYEQBdsegQzYjz0386tFyGkaqmkzEYcpddxLTUW+mu\nRbSuXIqiPoehLXjMyjSgPliSVpYQ5X+HzBzO2avTcGa91Skd9pBsQ+caKnqt5AQ=\n=eyBr\n-----END PGP SIGNATURE-----\n", "payload": "tree ebf6c4374e224174ad13134809e2d800e13272ac\nparent 31fd10b2a5fe11476e7f4a21b0f0955ea934e3a6\nparent ca62f568bec128d2eba2032337354e01ebef6858\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583404199 +0000\ncommitter GitHub <noreply@github.com> 1583404199 +0000\n\nMerge #3471\n\n3471: Remove pwd r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee75928855ba0b969376de9a13232895df24066b", "html_url": "https://github.com/rust-lang/rust/commit/ee75928855ba0b969376de9a13232895df24066b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee75928855ba0b969376de9a13232895df24066b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31fd10b2a5fe11476e7f4a21b0f0955ea934e3a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fd10b2a5fe11476e7f4a21b0f0955ea934e3a6", "html_url": "https://github.com/rust-lang/rust/commit/31fd10b2a5fe11476e7f4a21b0f0955ea934e3a6"}, {"sha": "ca62f568bec128d2eba2032337354e01ebef6858", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca62f568bec128d2eba2032337354e01ebef6858", "html_url": "https://github.com/rust-lang/rust/commit/ca62f568bec128d2eba2032337354e01ebef6858"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "821ba041bb6d4a52522ccd74778c7338c46d4018", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee75928855ba0b969376de9a13232895df24066b/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee75928855ba0b969376de9a13232895df24066b/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=ee75928855ba0b969376de9a13232895df24066b", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n use anyhow::Result;\n \n use crate::{\n-    not_bash::{fs2, pushd, pwd, rm_rf, run},\n+    not_bash::{fs2, pushd, rm_rf, run},\n     project_root,\n };\n \n@@ -22,7 +22,7 @@ pub fn run_dist(nightly: bool) -> Result<()> {\n fn dist_client(nightly: bool) -> Result<()> {\n     let _d = pushd(\"./editors/code\");\n \n-    let package_json_path = pwd().join(\"package.json\");\n+    let package_json_path = PathBuf::from(\"./package.json\");\n     let original_package_json = fs2::read_to_string(&package_json_path)?;\n     let _restore =\n         Restore { path: package_json_path.clone(), contents: original_package_json.clone() };"}, {"sha": "2d45e5dff45e2d6254422162cf5c58e946b825d4", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee75928855ba0b969376de9a13232895df24066b/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee75928855ba0b969376de9a13232895df24066b/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=ee75928855ba0b969376de9a13232895df24066b", "patch": "@@ -71,10 +71,6 @@ pub fn pushd(path: impl Into<PathBuf>) -> Pushd {\n     Pushd { _p: () }\n }\n \n-pub fn pwd() -> PathBuf {\n-    Env::with(|env| env.cwd())\n-}\n-\n impl Drop for Pushd {\n     fn drop(&mut self) {\n         Env::with(|env| env.popd())\n@@ -101,14 +97,15 @@ pub fn run_process(cmd: String, echo: bool) -> Result<String> {\n fn run_process_inner(cmd: &str, echo: bool) -> Result<String> {\n     let mut args = shelx(cmd);\n     let binary = args.remove(0);\n+    let current_dir = Env::with(|it| it.cwd().to_path_buf());\n \n     if echo {\n         println!(\"> {}\", cmd)\n     }\n \n     let output = Command::new(binary)\n         .args(args)\n-        .current_dir(pwd())\n+        .current_dir(current_dir)\n         .stdin(Stdio::null())\n         .stderr(Stdio::inherit())\n         .output()?;\n@@ -130,27 +127,30 @@ fn shelx(cmd: &str) -> Vec<String> {\n     cmd.split_whitespace().map(|it| it.to_string()).collect()\n }\n \n-#[derive(Default)]\n struct Env {\n     pushd_stack: Vec<PathBuf>,\n }\n \n impl Env {\n     fn with<F: FnOnce(&mut Env) -> T, T>(f: F) -> T {\n         thread_local! {\n-            static ENV: RefCell<Env> = Default::default();\n+            static ENV: RefCell<Env> = RefCell::new(Env {\n+                pushd_stack: vec![env::current_dir().unwrap()]\n+            });\n         }\n         ENV.with(|it| f(&mut *it.borrow_mut()))\n     }\n \n     fn pushd(&mut self, dir: PathBuf) {\n         let dir = self.cwd().join(dir);\n-        self.pushd_stack.push(dir)\n+        self.pushd_stack.push(dir);\n+        env::set_current_dir(self.cwd()).unwrap();\n     }\n     fn popd(&mut self) {\n         self.pushd_stack.pop().unwrap();\n+        env::set_current_dir(self.cwd()).unwrap();\n     }\n-    fn cwd(&self) -> PathBuf {\n-        self.pushd_stack.last().cloned().unwrap_or_else(|| env::current_dir().unwrap())\n+    fn cwd(&self) -> &Path {\n+        self.pushd_stack.last().unwrap()\n     }\n }"}]}