{"sha": "fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "node_id": "C_kwDOAAsO6NoAKGZhNGNjNjNhNmJkNmYzMjkwMzI2OWU1MmI4ZjU5YjI4NGQwZTc2YzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T17:28:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T17:28:37Z"}, "message": "Auto merge of #110107 - cjgillot:const-prop-lint-junk, r=oli-obk\n\nEnsure mir_drops_elaborated_and_const_checked when requiring codegen.\n\nmir_drops_elaborated_and_const_checked may emit errors while codegen has started, and the compiler would exit leaving object code files around.\n\nFound by `@cuviper` in https://github.com/rust-lang/rust/issues/109731", "tree": {"sha": "bc92bd2b66d8b30464253995ad5b07aea9d5edc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc92bd2b66d8b30464253995ad5b07aea9d5edc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "html_url": "https://github.com/rust-lang/rust/commit/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a03f14b099bf19f0124872b3f6d99ef00db7902", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a03f14b099bf19f0124872b3f6d99ef00db7902", "html_url": "https://github.com/rust-lang/rust/commit/4a03f14b099bf19f0124872b3f6d99ef00db7902"}, {"sha": "7e214bfc8a550e4dc37c46c236676791ccb1fcc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e214bfc8a550e4dc37c46c236676791ccb1fcc9", "html_url": "https://github.com/rust-lang/rust/commit/7e214bfc8a550e4dc37c46c236676791ccb1fcc9"}], "stats": {"total": 116, "additions": 65, "deletions": 51}, "files": [{"sha": "de78f26eec6c9f8f9958299516afa2db5b56d1a9", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -794,8 +794,14 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n             }\n             tcx.ensure().has_ffi_unwind_calls(def_id);\n \n-            if tcx.hir().body_const_context(def_id).is_some() {\n+            // If we need to codegen, ensure that we emit all errors from\n+            // `mir_drops_elaborated_and_const_checked` now, to avoid discovering\n+            // them later during codegen.\n+            if tcx.sess.opts.output_types.should_codegen()\n+                || tcx.hir().body_const_context(def_id).is_some()\n+            {\n                 tcx.ensure().mir_drops_elaborated_and_const_checked(def_id);\n+                tcx.ensure().unused_generic_params(ty::InstanceDef::Item(def_id.to_def_id()));\n             }\n         }\n     });"}, {"sha": "596a6bb4ca8d50fd7495ad7464eb5ca1761cf2c0", "filename": "src/tools/miri/tests/fail/const-ub-checks.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.stderr?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -4,6 +4,12 @@ error[E0080]: evaluation of constant value failed\n LL |     ptr.read();\n    |     ^^^^^^^^^^ accessing memory with alignment ALIGN, but alignment ALIGN is required\n \n+note: erroneous constant used\n+  --> $DIR/const-ub-checks.rs:LL:CC\n+   |\n+LL |     let _x = UNALIGNED_READ;\n+   |              ^^^^^^^^^^^^^^\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9aad1fc9b023f2d9e38b387be63b19a9c19bb1ed", "filename": "src/tools/miri/tests/fail/erroneous_const2.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -4,6 +4,20 @@ error[E0080]: evaluation of constant value failed\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n \n+note: erroneous constant used\n+  --> $DIR/erroneous_const2.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+\n+note: erroneous constant used\n+  --> $DIR/erroneous_const2.rs:LL:CC\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^\n+   |\n+   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "427c800dc51d2021cf38b26813b6a183d7e20208", "filename": "src/tools/miri/tests/pass/track-alloc-1.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftrack-alloc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftrack-alloc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftrack-alloc-1.rs?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -1,6 +0,0 @@\n-// Ensure that tracking early allocations doesn't ICE Miri.\n-// Early allocations are probably part of the runtime and therefore uninteresting, but they\n-// shouldn't cause a crash.\n-//@compile-flags: -Zmiri-track-alloc-id=1\n-//@normalize-stderr-test: \"[48] bytes\" -> \"SIZE bytes\"\n-fn main() {}"}, {"sha": "7206edbb7010b9cdd66ca197c98faa0ca4d1d4f2", "filename": "src/tools/miri/tests/pass/track-alloc-1.stderr", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftrack-alloc-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftrack-alloc-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftrack-alloc-1.stderr?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -1,5 +0,0 @@\n-note: tracking was triggered\n-   |\n-   = note: created extern static allocation of SIZE bytes (alignment ALIGN bytes) with id 1\n-   = note: (no span available)\n-"}, {"sha": "f29f282f78764e2bed591179d69f5d81263ae52c", "filename": "tests/run-make/const-prop-lint/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Frun-make%2Fconst-prop-lint%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Frun-make%2Fconst-prop-lint%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fconst-prop-lint%2FMakefile?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -0,0 +1,9 @@\n+include ../tools.mk\n+\n+# Test that emitting an error because of arithmetic\n+# overflow lint does not leave .o files around\n+# because of interrupted codegen.\n+\n+all:\n+\t$(RUSTC) input.rs; test $$? -eq 1\n+\tls *.o; test $$? -ne 0"}, {"sha": "ccbdfb8d50b0ea33ef2f657a89b4cc46374ad8e4", "filename": "tests/run-make/const-prop-lint/input.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Frun-make%2Fconst-prop-lint%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Frun-make%2Fconst-prop-lint%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fconst-prop-lint%2Finput.rs?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -0,0 +1,5 @@\n+#![deny(arithmetic_overflow)]\n+\n+fn main() {\n+    let x = 255u8 + 1;\n+}"}, {"sha": "bd56f854c8b17b9eee005612ae3146717d8d880b", "filename": "tests/ui/consts/const-eval/issue-100878.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-100878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-100878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-100878.rs?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -1,6 +1,8 @@\n // This checks that the const-eval ICE in issue #100878 does not recur.\n //\n // build-pass\n+\n+#[allow(arithmetic_overflow)]\n pub fn bitshift_data(data: [u8; 1]) -> u8 {\n     data[0] << 8\n }"}, {"sha": "b3f87305781513b46c6c3a2d3cb2a942e92e03b0", "filename": "tests/ui/issues/issue-33287.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fissues%2Fissue-33287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fissues%2Fissue-33287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-33287.rs?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -1,6 +1,7 @@\n // build-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n+#![allow(unconditional_panic)]\n const A: [u32; 1] = [0];\n \n fn test() {"}, {"sha": "32d49d25f02ac4d1a74cde8fcce68e95ce66c8c1", "filename": "tests/ui/polymorphization/generators.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -15,12 +15,6 @@ LL | pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> +\n LL |     || {\n    |     ^^\n \n-note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:35:5: 35:7], u32, u32>`\n-  --> $DIR/generators.rs:86:5\n-   |\n-LL |     finish(unused_type::<u32>());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: item has unused generic parameters\n   --> $DIR/generators.rs:60:5\n    |\n@@ -29,11 +23,5 @@ LL | pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Retu\n LL |     || {\n    |     ^^\n \n-note: the above error was encountered while instantiating `fn finish::<[generator@$DIR/generators.rs:60:5: 60:7], u32, u32>`\n-  --> $DIR/generators.rs:89:5\n-   |\n-LL |     finish(unused_const::<1u32>());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "a3b2f75b12d4a7d01439793ceab18c7d984363fd", "filename": "tests/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -1,3 +1,9 @@\n+error: item has unused generic parameters\n+  --> $DIR/predicates.rs:10:4\n+   |\n+LL | fn bar<I>() {\n+   |    ^^^ - generic parameter `I` is unused\n+\n error: item has unused generic parameters\n   --> $DIR/predicates.rs:15:4\n    |\n@@ -35,17 +41,5 @@ error: item has unused generic parameters\n LL | fn foobar<F, G>() -> usize\n    |    ^^^^^^ - generic parameter `F` is unused\n \n-error: item has unused generic parameters\n-  --> $DIR/predicates.rs:10:4\n-   |\n-LL | fn bar<I>() {\n-   |    ^^^ - generic parameter `I` is unused\n-\n-note: the above error was encountered while instantiating `fn foo::<std::slice::Iter<'_, u32>, T>`\n-  --> $DIR/predicates.rs:86:5\n-   |\n-LL |     foo(x.iter());\n-   |     ^^^^^^^^^^^^^\n-\n error: aborting due to 6 previous errors\n "}, {"sha": "5c3b46c6041b36823e1ea496c6abf623a446f38e", "filename": "tests/ui/polymorphization/type_parameters/closures.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4/tests%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr?ref=fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "patch": "@@ -43,21 +43,6 @@ LL | impl<F: Default> Foo<F> {\n LL |     pub fn unused_all<G: Default>() -> u32 {\n    |            ^^^^^^^^^^ - generic parameter `G` is unused\n \n-error: item has unused generic parameters\n-  --> $DIR/closures.rs:128:23\n-   |\n-LL |     pub fn used_impl<G: Default>() -> u32 {\n-   |                      - generic parameter `G` is unused\n-LL |\n-LL |         let add_one = |x: u32| {\n-   |                       ^^^^^^^^\n-\n-error: item has unused generic parameters\n-  --> $DIR/closures.rs:126:12\n-   |\n-LL |     pub fn used_impl<G: Default>() -> u32 {\n-   |            ^^^^^^^^^ - generic parameter `G` is unused\n-\n error: item has unused generic parameters\n   --> $DIR/closures.rs:115:23\n    |\n@@ -76,5 +61,20 @@ LL | impl<F: Default> Foo<F> {\n LL |     pub fn used_fn<G: Default>() -> u32 {\n    |            ^^^^^^^\n \n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:128:23\n+   |\n+LL |     pub fn used_impl<G: Default>() -> u32 {\n+   |                      - generic parameter `G` is unused\n+LL |\n+LL |         let add_one = |x: u32| {\n+   |                       ^^^^^^^^\n+\n+error: item has unused generic parameters\n+  --> $DIR/closures.rs:126:12\n+   |\n+LL |     pub fn used_impl<G: Default>() -> u32 {\n+   |            ^^^^^^^^^ - generic parameter `G` is unused\n+\n error: aborting due to 9 previous errors\n "}]}