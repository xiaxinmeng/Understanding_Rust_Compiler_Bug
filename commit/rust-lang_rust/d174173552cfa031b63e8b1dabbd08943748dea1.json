{"sha": "d174173552cfa031b63e8b1dabbd08943748dea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNzQxNzM1NTJjZmEwMzFiNjNlOGIxZGFiYmQwODk0Mzc0OGRlYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T12:01:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T12:01:08Z"}, "message": "Auto merge of #57133 - SimonSapin:zero, r=oli-obk\n\nRemove the private generic NonZero<T> wrapper type\n\nInstead, use `#[rustc_layout_scalar_valid_range_start(1)]` directly on relevant libcore types.", "tree": {"sha": "2353d7d394275a667bf15a64be0adf7f00ca69fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2353d7d394275a667bf15a64be0adf7f00ca69fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d174173552cfa031b63e8b1dabbd08943748dea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d174173552cfa031b63e8b1dabbd08943748dea1", "html_url": "https://github.com/rust-lang/rust/commit/d174173552cfa031b63e8b1dabbd08943748dea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d174173552cfa031b63e8b1dabbd08943748dea1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2986970adae36939d13c79e3af34ff6378fad68", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2986970adae36939d13c79e3af34ff6378fad68", "html_url": "https://github.com/rust-lang/rust/commit/d2986970adae36939d13c79e3af34ff6378fad68"}, {"sha": "7a0911528058e87d22ea305695f4047572c5e067", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0911528058e87d22ea305695f4047572c5e067", "html_url": "https://github.com/rust-lang/rust/commit/7a0911528058e87d22ea305695f4047572c5e067"}], "stats": {"total": 77, "additions": 24, "deletions": 53}, "files": [{"sha": "385ce8efab87bee6cb4447e046e10e8489d07811", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=d174173552cfa031b63e8b1dabbd08943748dea1", "patch": "@@ -342,8 +342,7 @@ def extract_length_ptr_and_cap_from_std_vec(vec_val):\n \n     vec_ptr_val = buf.get_child_at_index(0)\n     capacity = buf.get_child_at_index(1).as_integer()\n-    unique_ptr_val = vec_ptr_val.get_child_at_index(0)\n-    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    data_ptr = vec_ptr_val.get_child_at_index(0)\n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (length, data_ptr, capacity)\n \n@@ -360,8 +359,7 @@ def extract_tail_head_ptr_and_cap_from_std_vecdeque(vec_val):\n \n     vec_ptr_val = buf.get_child_at_index(0)\n     capacity = buf.get_child_at_index(1).as_integer()\n-    unique_ptr_val = vec_ptr_val.get_child_at_index(0)\n-    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    data_ptr = vec_ptr_val.get_child_at_index(0)\n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (tail, head, data_ptr, capacity)\n "}, {"sha": "08ae289d60374a51e42db4a7d42be5ee2fbbd97e", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=d174173552cfa031b63e8b1dabbd08943748dea1", "patch": "@@ -322,9 +322,7 @@ def children(self):\n \n # Yield each key (and optionally value) from a BoxedNode.\n def children_of_node(boxed_node, height, want_values):\n-    ptr = boxed_node['ptr']['pointer']\n-    # This is written oddly because we don't want to rely on the field name being `__0`.\n-    node_ptr = ptr[ptr.type.fields()[0]]\n+    node_ptr = boxed_node['ptr']['pointer']\n     if height > 0:\n         type_name = str(node_ptr.type.target()).replace('LeafNode', 'InternalNode')\n         node_type = gdb.lookup_type(type_name)"}, {"sha": "5ea765d3585a2e554e416705031e274221891342", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d174173552cfa031b63e8b1dabbd08943748dea1", "patch": "@@ -216,7 +216,6 @@ pub mod alloc;\n \n // note: does not need to be public\n mod iter_private;\n-mod nonzero;\n mod tuple;\n mod unit;\n "}, {"sha": "65e1887f05e5dfd3f234129721c38c1ef8f97366", "filename": "src/libcore/nonzero.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2986970adae36939d13c79e3af34ff6378fad68/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2986970adae36939d13c79e3af34ff6378fad68/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=d2986970adae36939d13c79e3af34ff6378fad68", "patch": "@@ -1,23 +0,0 @@\n-//! Exposes the NonZero lang item which provides optimization hints.\n-\n-use ops::{CoerceUnsized, DispatchFromDyn};\n-use marker::Freeze;\n-\n-/// A wrapper type for raw pointers and integers that will never be\n-/// NULL or 0 that might allow certain optimizations.\n-#[rustc_layout_scalar_valid_range_start(1)]\n-#[derive(Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]\n-#[repr(transparent)]\n-pub(crate) struct NonZero<T: Freeze>(pub(crate) T);\n-\n-// Do not call `T::clone` as theoretically it could turn the field into `0`\n-// invalidating `NonZero`'s invariant.\n-impl<T: Copy + Freeze> Clone for NonZero<T> {\n-    fn clone(&self) -> Self {\n-        unsafe { NonZero(self.0) }\n-    }\n-}\n-\n-impl<T: CoerceUnsized<U> + Freeze, U: Freeze> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n-\n-impl<T: DispatchFromDyn<U> + Freeze, U: Freeze> DispatchFromDyn<NonZero<U>> for NonZero<T> {}"}, {"sha": "e776513770ec696ee0ee67b500c2a9918fdcf8a1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d174173552cfa031b63e8b1dabbd08943748dea1", "patch": "@@ -6,7 +6,6 @@ use convert::TryFrom;\n use fmt;\n use intrinsics;\n use mem;\n-use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n@@ -48,7 +47,8 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n-                pub struct $Ty(NonZero<$Int>);\n+                #[rustc_layout_scalar_valid_range_start(1)]\n+                pub struct $Ty($Int);\n             }\n \n             impl $Ty {\n@@ -60,15 +60,15 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n-                    $Ty(NonZero(n))\n+                    $Ty(n)\n                 }\n \n                 /// Create a non-zero if the given value is not zero.\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n-                        Some($Ty(unsafe { NonZero(n) }))\n+                        Some(unsafe { $Ty(n) })\n                     } else {\n                         None\n                     }\n@@ -78,15 +78,15 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn get(self) -> $Int {\n-                    self.0 .0\n+                    self.0\n                 }\n \n             }\n \n             #[stable(feature = \"from_nonzero\", since = \"1.31.0\")]\n             impl From<$Ty> for $Int {\n                 fn from(nonzero: $Ty) -> Self {\n-                    nonzero.0 .0\n+                    nonzero.0\n                 }\n             }\n "}, {"sha": "b9420f32a949270783a3ef028880d22dc2287204", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d174173552cfa031b63e8b1dabbd08943748dea1", "patch": "@@ -70,7 +70,6 @@ use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n use mem::{self, MaybeUninit};\n-use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n@@ -2718,8 +2717,9 @@ impl<T: ?Sized> PartialOrd for *mut T {\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n #[doc(hidden)]\n #[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(1)]\n pub struct Unique<T: ?Sized> {\n-    pointer: NonZero<*const T>,\n+    pointer: *const T,\n     // NOTE: this marker has no consequences for variance, but is necessary\n     // for dropck to understand that we logically own a `T`.\n     //\n@@ -2776,21 +2776,21 @@ impl<T: ?Sized> Unique<T> {\n     ///\n     /// `ptr` must be non-null.\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        Unique { pointer: NonZero(ptr as _), _marker: PhantomData }\n+        Unique { pointer: ptr as _, _marker: PhantomData }\n     }\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n-            Some(Unique { pointer: unsafe { NonZero(ptr as _) }, _marker: PhantomData })\n+            Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n         } else {\n             None\n         }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n     pub fn as_ptr(self) -> *mut T {\n-        self.pointer.0 as *mut T\n+        self.pointer as *mut T\n     }\n \n     /// Dereferences the content.\n@@ -2838,21 +2838,21 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Unique { pointer: unsafe { NonZero(reference as *mut T) }, _marker: PhantomData }\n+        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n-        Unique { pointer: unsafe { NonZero(reference as *const T) }, _marker: PhantomData }\n+        unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n     fn from(p: NonNull<T>) -> Self {\n-        Unique { pointer: p.pointer, _marker: PhantomData }\n+        unsafe { Unique { pointer: p.pointer, _marker: PhantomData } }\n     }\n }\n \n@@ -2875,8 +2875,9 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(1)]\n pub struct NonNull<T: ?Sized> {\n-    pointer: NonZero<*const T>,\n+    pointer: *const T,\n }\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n@@ -2918,7 +2919,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        NonNull { pointer: NonZero(ptr as _) }\n+        NonNull { pointer: ptr as _ }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n@@ -2936,7 +2937,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n-        self.pointer.0 as *mut T\n+        self.pointer as *mut T\n     }\n \n     /// Dereferences the content.\n@@ -3040,22 +3041,22 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n-        NonNull { pointer: unique.pointer }\n+        unsafe { NonNull { pointer: unique.pointer } }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a mut T) -> Self {\n-        NonNull { pointer: unsafe { NonZero(reference as *mut T) } }\n+        unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a T) -> Self {\n-        NonNull { pointer: unsafe { NonZero(reference as *const T) } }\n+        unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}, {"sha": "0789c6d7f3486d4602f262cf17e28960efc576f9", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d174173552cfa031b63e8b1dabbd08943748dea1/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=d174173552cfa031b63e8b1dabbd08943748dea1", "patch": "@@ -36,8 +36,6 @@ print-type-size type: `MyOption<std::num::NonZeroU32>`: 4 bytes, alignment: 4 by\n print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n-print-type-size type: `core::nonzero::NonZero<u32>`: 4 bytes, alignment: 4 bytes\n-print-type-size     field `.0`: 4 bytes\n print-type-size type: `std::num::NonZeroU32`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.0`: 4 bytes\n print-type-size type: `Enum4<(), (), (), MyOption<u8>>`: 2 bytes, alignment: 1 bytes"}]}