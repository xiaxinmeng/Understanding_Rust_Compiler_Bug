{"sha": "fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjUzNGYzMDA4OWRkZDc5NmRiZjUyYzdiYjYzOWVmZTVkMTBhM2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-30T09:54:47Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-30T09:54:47Z"}, "message": "Merge #1459\n\n1459: Include primary span label in VS Code diagnostics r=matklad a=etaoins\n\nIn most cases the primary label span repeats information found elsewhere in the diagnostic. For example, with E0061:\r\n\r\n```json\r\n{\r\n  \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\r\n  \"spans\": [{\"label\": \"expected 2 parameters\"}]\r\n}\r\n```\r\n\r\nHowever, with some mismatched type errors (E0308) the expected type only appears in the primary span's label, e.g.:\r\n\r\n```json\r\n{\r\n  \"message\": \"mismatched types\",\r\n  \"spans\": [{\"label\": \"expected usize, found u32\"}]\r\n}\r\n```\r\n\r\nI initially added the primary span label to the message unconditionally. However, for most error types the child diagnostics repeat the primary span label with more detail. `rustc` also renders the duplicate text but because the span label and child diagnostics appear in visually distinct places it's not as confusing.\r\n\r\nThis takes a heuristic approach where it will only add the primary span label if there are no child message lines. For most error types the child messages repeat the primary span label with more detail.\n\nCo-authored-by: Ryan Cumming <etaoins@gmail.com>", "tree": {"sha": "b08792995d3aafe3f203372984722714c6954d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08792995d3aafe3f203372984722714c6954d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "html_url": "https://github.com/rust-lang/rust/commit/fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "950da94c3aaebb783d20be2552b6c1b77e92c7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/950da94c3aaebb783d20be2552b6c1b77e92c7a0", "html_url": "https://github.com/rust-lang/rust/commit/950da94c3aaebb783d20be2552b6c1b77e92c7a0"}, {"sha": "8f726b7db65d3d9527cdb2fb682c195ad1446dbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f726b7db65d3d9527cdb2fb682c195ad1446dbf", "html_url": "https://github.com/rust-lang/rust/commit/8f726b7db65d3d9527cdb2fb682c195ad1446dbf"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "fb23824a3c7fef3983f81688a7925cb71ac27648", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0308.json", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0308.json", "raw_url": "https://github.com/rust-lang/rust/raw/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0308.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0308.json?ref=fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "patch": "@@ -0,0 +1,33 @@\n+{\n+    \"message\": \"mismatched types\",\n+    \"code\": {\n+        \"code\": \"E0308\",\n+        \"explanation\": \"\\nThis error occurs when the compiler was unable to infer the concrete type of a\\nvariable. It can occur for several cases, the most common of which is a\\nmismatch in the expected type that the compiler inferred for a variable's\\ninitializing expression, and the actual type explicitly assigned to the\\nvariable.\\n\\nFor example:\\n\\n```compile_fail,E0308\\nlet x: i32 = \\\"I am not a number!\\\";\\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\\n//      |             |\\n//      |    initializing expression;\\n//      |    compiler infers type `&str`\\n//      |\\n//    type `i32` assigned to variable `x`\\n```\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"runtime/compiler_support.rs\",\n+            \"byte_start\": 1589,\n+            \"byte_end\": 1594,\n+            \"line_start\": 48,\n+            \"line_end\": 48,\n+            \"column_start\": 65,\n+            \"column_end\": 70,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let layout = alloc::Layout::from_size_align_unchecked(size, align);\",\n+                    \"highlight_start\": 65,\n+                    \"highlight_end\": 70\n+                }\n+            ],\n+            \"label\": \"expected usize, found u32\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [],\n+    \"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n+}"}, {"sha": "7fb003fe2129f03e7a1e7008129a0c9d14391d9b", "filename": "editors/code/src/test/utils/diagnotics/rust.test.ts", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts?ref=fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "patch": "@@ -108,7 +108,10 @@ describe('mapRustDiagnosticToVsCode', () => {\n         );\n         assert.strictEqual(\n             diagnostic.message,\n-            'this function takes 2 parameters but 3 parameters were supplied'\n+            [\n+                'this function takes 2 parameters but 3 parameters were supplied',\n+                'expected 2 parameters'\n+            ].join('\\n')\n         );\n         assert.strictEqual(diagnostic.code, 'E0061');\n         assert.strictEqual(diagnostic.source, 'rustc');\n@@ -170,4 +173,28 @@ describe('mapRustDiagnosticToVsCode', () => {\n             SuggestionApplicability.Unspecified\n         );\n     });\n+\n+    it('should map a mismatched type error', () => {\n+        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n+            'error/E0308'\n+        );\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Error\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            ['mismatched types', 'expected usize, found u32'].join('\\n')\n+        );\n+        assert.strictEqual(diagnostic.code, 'E0308');\n+        assert.strictEqual(diagnostic.source, 'rustc');\n+        assert.strictEqual(diagnostic.tags, undefined);\n+\n+        // No related information\n+        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n+\n+        // There are no suggested fixes\n+        assert.strictEqual(suggestedFixes.length, 0);\n+    });\n });"}, {"sha": "bfb494a3a5783dd25044ca143bece5650c17dd53", "filename": "editors/code/src/utils/diagnostics/rust.ts", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fb2534f30089ddd796dbf52c7bb639efe5d10a3e/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts?ref=fb2534f30089ddd796dbf52c7bb639efe5d10a3e", "patch": "@@ -183,6 +183,7 @@ export function mapRustDiagnosticToVsCode(\n     const secondarySpans = rd.spans.filter(s => !s.is_primary);\n \n     const severity = mapLevelToSeverity(rd.level);\n+    let primarySpanLabel = primarySpan.label;\n \n     const vd = new vscode.Diagnostic(location.range, rd.message, severity);\n \n@@ -221,9 +222,17 @@ export function mapRustDiagnosticToVsCode(\n         }\n         if (messageLine) {\n             vd.message += `\\n${messageLine}`;\n+\n+            // These secondary messages usually duplicate the content of the\n+            // primary span label.\n+            primarySpanLabel = undefined;\n         }\n     }\n \n+    if (primarySpanLabel) {\n+        vd.message += `\\n${primarySpanLabel}`;\n+    }\n+\n     if (isUnusedOrUnnecessary(rd)) {\n         vd.tags = [vscode.DiagnosticTag.Unnecessary];\n     }"}]}