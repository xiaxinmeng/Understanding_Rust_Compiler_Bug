{"sha": "6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODdkMzg4YzBkOWExZDg5ZjMzM2NhZDIzYjhmYmI4NzYwN2QwZjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-24T13:11:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-24T13:11:50Z"}, "message": "Merge #9944\n\n9944: internal: introduce in-place indenting API r=matklad a=iDawer\n\nIntroduce `edit_in_place::Indent` that uses mutable tree API and intended to replace `edit::AstNodeEdit`.\r\n\r\nCloses #9903 \n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "4570bed6c5e351bf9d8105e69dcf9edd8acb3a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4570bed6c5e351bf9d8105e69dcf9edd8acb3a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJPAWCRBK7hj4Ov3rIwAALCIIADxWYMktBe1stE7BwSAhUBu8\nQ0UI6wn7dB0Q0wcpa0YS0xLY4BCZShA8n/LR6p6lhxL+Kbznv7lJr4bMfgZ4Ya1/\nZlj/gd4efC+XMSdzu8AWnGGWhTAXpkz5ZBl/LOh+CP6RlabKkDj5W+dyJfvTOMw3\nv6IGSTkSd4lz71u876q5d+8yDrYdIHMA5+31hCa1K57uZkLfRVp0xP42ASPKbT13\nwx4a351PfmzYqCVOroyxEH2Zz9L5fNqJJEBktnFq1fqn84M8XsgrfFc4uPCMacbb\nUmF05lnaFTuy8eY3j4MCzd43qQDeIKSnmfklWFCGL3W/f4RzLFKsP2nyXtmGwE4=\n=uvmv\n-----END PGP SIGNATURE-----\n", "payload": "tree 4570bed6c5e351bf9d8105e69dcf9edd8acb3a20\nparent 49c02b93b39945bedede363b5f15259570f76304\nparent 08694dc1ef53569f079108e4a5b154916dc53198\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629810710 +0000\ncommitter GitHub <noreply@github.com> 1629810710 +0000\n\nMerge #9944\n\n9944: internal: introduce in-place indenting API r=matklad a=iDawer\n\nIntroduce `edit_in_place::Indent` that uses mutable tree API and intended to replace `edit::AstNodeEdit`.\r\n\r\nCloses #9903 \n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "html_url": "https://github.com/rust-lang/rust/commit/6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c02b93b39945bedede363b5f15259570f76304", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c02b93b39945bedede363b5f15259570f76304", "html_url": "https://github.com/rust-lang/rust/commit/49c02b93b39945bedede363b5f15259570f76304"}, {"sha": "08694dc1ef53569f079108e4a5b154916dc53198", "url": "https://api.github.com/repos/rust-lang/rust/commits/08694dc1ef53569f079108e4a5b154916dc53198", "html_url": "https://github.com/rust-lang/rust/commit/08694dc1ef53569f079108e4a5b154916dc53198"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "f45dc782e392f45655dc04fb2ab3e47a3b2abfe2", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "patch": "@@ -1,6 +1,6 @@\n use ide_db::helpers::FamousDefs;\n use syntax::{\n-    ast::{self, edit::AstNodeEdit, make, ArgListOwner},\n+    ast::{self, edit_in_place::Indent, make, ArgListOwner},\n     AstNode,\n };\n \n@@ -46,24 +46,26 @@ pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContex\n     let body = closure.body()?;\n \n     let stmt = method.syntax().parent().and_then(ast::ExprStmt::cast);\n-    let syntax = stmt.as_ref().map_or(method.syntax(), |stmt| stmt.syntax());\n+    let range = stmt.as_ref().map_or(method.syntax(), AstNode::syntax).text_range();\n \n     acc.add(\n         AssistId(\"convert_iter_for_each_to_for\", AssistKind::RefactorRewrite),\n         \"Replace this `Iterator::for_each` with a for loop\",\n-        syntax.text_range(),\n+        range,\n         |builder| {\n-            let indent = stmt.as_ref().map_or(method.indent_level(), |stmt| stmt.indent_level());\n+            let indent =\n+                stmt.as_ref().map_or_else(|| method.indent_level(), ast::ExprStmt::indent_level);\n \n             let block = match body {\n                 ast::Expr::BlockExpr(block) => block,\n                 _ => make::block_expr(Vec::new(), Some(body)),\n             }\n-            .reset_indent()\n-            .indent(indent);\n+            .clone_for_update();\n+            block.reset_indent();\n+            block.indent(indent);\n \n             let expr_for_loop = make::expr_for_loop(param, receiver, block);\n-            builder.replace(syntax.text_range(), expr_for_loop.syntax().text())\n+            builder.replace(range, expr_for_loop.to_string())\n         },\n     )\n }"}, {"sha": "15e99ff0e911779f9de1358d62e0d7ef23dde818", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "patch": "@@ -117,9 +117,8 @@ impl IndentLevel {\n     /// }\n     /// ```\n     /// if you indent the block, the `{` token would stay put.\n-    fn increase_indent(self, node: SyntaxNode) -> SyntaxNode {\n-        let res = node.clone_subtree().clone_for_update();\n-        let tokens = res.preorder_with_tokens().filter_map(|event| match event {\n+    pub(super) fn increase_indent(self, node: &SyntaxNode) {\n+        let tokens = node.preorder_with_tokens().filter_map(|event| match event {\n             rowan::WalkEvent::Leave(NodeOrToken::Token(it)) => Some(it),\n             _ => None,\n         });\n@@ -131,12 +130,10 @@ impl IndentLevel {\n                 }\n             }\n         }\n-        res.clone_subtree()\n     }\n \n-    fn decrease_indent(self, node: SyntaxNode) -> SyntaxNode {\n-        let res = node.clone_subtree().clone_for_update();\n-        let tokens = res.preorder_with_tokens().filter_map(|event| match event {\n+    pub(super) fn decrease_indent(self, node: &SyntaxNode) {\n+        let tokens = node.preorder_with_tokens().filter_map(|event| match event {\n             rowan::WalkEvent::Leave(NodeOrToken::Token(it)) => Some(it),\n             _ => None,\n         });\n@@ -150,25 +147,37 @@ impl IndentLevel {\n                 }\n             }\n         }\n-        res.clone_subtree()\n     }\n }\n \n fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     iter::successors(Some(token), |token| token.prev_token())\n }\n \n+/// Soft-deprecated in favor of mutable tree editing API `edit_in_place::Ident`.\n pub trait AstNodeEdit: AstNode + Clone + Sized {\n     fn indent_level(&self) -> IndentLevel {\n         IndentLevel::from_node(self.syntax())\n     }\n     #[must_use]\n     fn indent(&self, level: IndentLevel) -> Self {\n-        Self::cast(level.increase_indent(self.syntax().clone())).unwrap()\n+        fn indent_inner(node: &SyntaxNode, level: IndentLevel) -> SyntaxNode {\n+            let res = node.clone_subtree().clone_for_update();\n+            level.increase_indent(&res);\n+            res.clone_subtree()\n+        }\n+\n+        Self::cast(indent_inner(self.syntax(), level)).unwrap()\n     }\n     #[must_use]\n     fn dedent(&self, level: IndentLevel) -> Self {\n-        Self::cast(level.decrease_indent(self.syntax().clone())).unwrap()\n+        fn dedent_inner(node: &SyntaxNode, level: IndentLevel) -> SyntaxNode {\n+            let res = node.clone_subtree().clone_for_update();\n+            level.decrease_indent(&res);\n+            res.clone_subtree()\n+        }\n+\n+        Self::cast(dedent_inner(self.syntax(), level)).unwrap()\n     }\n     #[must_use]\n     fn reset_indent(&self) -> Self {"}, {"sha": "4e0d97c3fdfa4d7cfcbde32c85fa8d853a845751", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6287d388c0d9a1d89f333cad23b8fbb87607d0f6/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=6287d388c0d9a1d89f333cad23b8fbb87607d0f6", "patch": "@@ -7,11 +7,7 @@ use rowan::SyntaxElement;\n \n use crate::{\n     algo::neighbor,\n-    ast::{\n-        self,\n-        edit::{AstNodeEdit, IndentLevel},\n-        make, GenericParamsOwner,\n-    },\n+    ast::{self, edit::IndentLevel, make, GenericParamsOwner},\n     ted::{self, Position},\n     AstNode, AstToken, Direction,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n@@ -20,7 +16,7 @@ use crate::{\n \n use super::NameOwner;\n \n-pub trait GenericParamsOwnerEdit: ast::GenericParamsOwner + AstNodeEdit {\n+pub trait GenericParamsOwnerEdit: ast::GenericParamsOwner {\n     fn get_or_create_generic_param_list(&self) -> ast::GenericParamList;\n     fn get_or_create_where_clause(&self) -> ast::WhereClause;\n }\n@@ -198,7 +194,7 @@ fn create_generic_param_list(position: Position) -> ast::GenericParamList {\n     gpl\n }\n \n-pub trait AttrsOwnerEdit: ast::AttrsOwner + AstNodeEdit {\n+pub trait AttrsOwnerEdit: ast::AttrsOwner {\n     fn remove_attrs_and_docs(&self) {\n         remove_attrs_and_docs(self.syntax());\n \n@@ -222,7 +218,7 @@ pub trait AttrsOwnerEdit: ast::AttrsOwner + AstNodeEdit {\n     }\n }\n \n-impl<T: ast::AttrsOwner + AstNodeEdit> AttrsOwnerEdit for T {}\n+impl<T: ast::AttrsOwner> AttrsOwnerEdit for T {}\n \n impl ast::GenericParamList {\n     pub fn add_generic_param(&self, generic_param: ast::GenericParam) {\n@@ -487,6 +483,24 @@ fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     Some(())\n }\n \n+pub trait Indent: AstNode + Clone + Sized {\n+    fn indent_level(&self) -> IndentLevel {\n+        IndentLevel::from_node(self.syntax())\n+    }\n+    fn indent(&self, level: IndentLevel) {\n+        level.increase_indent(self.syntax());\n+    }\n+    fn dedent(&self, level: IndentLevel) {\n+        level.decrease_indent(self.syntax());\n+    }\n+    fn reset_indent(&self) {\n+        let level = IndentLevel::from_node(self.syntax());\n+        self.dedent(level);\n+    }\n+}\n+\n+impl<N: AstNode + Clone> Indent for N {}\n+\n #[cfg(test)]\n mod tests {\n     use std::fmt;\n@@ -526,4 +540,22 @@ mod tests {\n         check_create_gpl::<ast::Enum>(\"enum E\", \"enum E<>\");\n         check_create_gpl::<ast::Enum>(\"enum E {\", \"enum E<> {\");\n     }\n+\n+    #[test]\n+    fn test_increase_indent() {\n+        let arm_list = ast_mut_from_text::<ast::Fn>(\n+            \"fn foo() {\n+    ;\n+    ;\n+}\",\n+        );\n+        arm_list.indent(IndentLevel(2));\n+        assert_eq!(\n+            arm_list.to_string(),\n+            \"fn foo() {\n+            ;\n+            ;\n+        }\",\n+        );\n+    }\n }"}]}