{"sha": "21fde0903b394ca4765b17321a736983c43886cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZmRlMDkwM2IzOTRjYTQ3NjViMTczMjFhNzM2OTgzYzQzODg2Y2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-01T16:07:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-16T13:57:07Z"}, "message": "Update documentation", "tree": {"sha": "5b58a3f840f4fe06d7e7d3cc1fba5830a69c7464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b58a3f840f4fe06d7e7d3cc1fba5830a69c7464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21fde0903b394ca4765b17321a736983c43886cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21fde0903b394ca4765b17321a736983c43886cb", "html_url": "https://github.com/rust-lang/rust/commit/21fde0903b394ca4765b17321a736983c43886cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21fde0903b394ca4765b17321a736983c43886cb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fbee359d7eb3a621604bc2067a375f6d4b757e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fbee359d7eb3a621604bc2067a375f6d4b757e5", "html_url": "https://github.com/rust-lang/rust/commit/9fbee359d7eb3a621604bc2067a375f6d4b757e5"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "32ade0b017833598bc866cbbc51c3202d76a3e0f", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21fde0903b394ca4765b17321a736983c43886cb/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21fde0903b394ca4765b17321a736983c43886cb/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=21fde0903b394ca4765b17321a736983c43886cb", "patch": "@@ -1314,7 +1314,7 @@ impl<T> [T] {\n     /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n     /// two or more sorted sequences concatenated one after another.\n     ///\n-    /// The algorithm allocates temporary storage the size of `self`.\n+    /// The algorithm allocates temporary storage in a `Vec<(K, usize)` the length of the slice.\n     ///\n     /// # Examples\n     ///\n@@ -1326,8 +1326,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")]\n     #[inline]\n-    pub fn sort_by_key<B, F>(&mut self, f: F)\n-        where F: FnMut(&T) -> B, B: Ord\n+    pub fn sort_by_key<K, F>(&mut self, f: F)\n+        where F: FnMut(&T) -> K, K: Ord\n     {\n         let mut indices: Vec<_> = self.iter().map(f).enumerate().map(|(i, k)| (k, i)).collect();\n         // The elements of `indices` are unique, as they are indexed, so any sort will be stable\n@@ -1418,8 +1418,8 @@ impl<T> [T] {\n     /// Sorts the slice with a key extraction function, but may not preserve the order of equal\n     /// elements.\n     ///\n-    /// Note that, currently, the key function for `sort_unstable_by_key` is called multiple times\n-    /// per element, unlike `sort_stable_by_key`.\n+    /// Note that, currently, the key function for [`sort_unstable_by_key`] is called multiple times\n+    /// per element, unlike [`sort_by_key`].\n     ///\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n     /// and `O(m n log m n)` worst-case, where the key function is `O(m)`.\n@@ -1432,8 +1432,8 @@ impl<T> [T] {\n     /// randomization to avoid degenerate cases, but with a fixed seed to always provide\n     /// deterministic behavior.\n     ///\n-    /// Due to its key calling strategy, `sort_unstable_by_key` is likely to be slower than\n-    /// `sort_by_key` in cases where the key function is expensive.\n+    /// Due to its key calling strategy, [`sort_unstable_by_key`] is likely to be slower than\n+    /// [`sort_by_key`] in cases where the key function is expensive.\n     ///\n     /// # Examples\n     ///\n@@ -1444,12 +1444,13 @@ impl<T> [T] {\n     /// assert!(v == [1, 2, -3, 4, -5]);\n     /// ```\n     ///\n+    /// [`sort_by_key`]: #method.sort_by_key\n+    /// [`sort_unstable_by_key`]: #method.sort_unstable_by_key\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n     #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     #[inline]\n-    pub fn sort_unstable_by_key<B, F>(&mut self, f: F)\n-        where F: FnMut(&T) -> B,\n-              B: Ord\n+    pub fn sort_unstable_by_key<K, F>(&mut self, f: F)\n+        where F: FnMut(&T) -> K, K: Ord\n     {\n         core_slice::SliceExt::sort_unstable_by_key(self, f);\n     }"}]}