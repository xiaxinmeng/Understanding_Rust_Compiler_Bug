{"sha": "6d0695303a97edbf94a7ed605247806af4a9e262", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDY5NTMwM2E5N2VkYmY5NGE3ZWQ2MDUyNDc4MDZhZjRhOWUyNjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T22:41:15Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T22:55:16Z"}, "message": "Make some write modes unstable", "tree": {"sha": "dfb1e1e5ee61bb61ab93469c40dfb08903b5d2fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb1e1e5ee61bb61ab93469c40dfb08903b5d2fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0695303a97edbf94a7ed605247806af4a9e262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0695303a97edbf94a7ed605247806af4a9e262", "html_url": "https://github.com/rust-lang/rust/commit/6d0695303a97edbf94a7ed605247806af4a9e262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0695303a97edbf94a7ed605247806af4a9e262/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b23a98d00e753a11fbfa1a43db4e87aed249ce7", "html_url": "https://github.com/rust-lang/rust/commit/3b23a98d00e753a11fbfa1a43db4e87aed249ce7"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "03105a902208e68a407a8ab0baacd11e83632e35", "filename": "src/bin/main.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=6d0695303a97edbf94a7ed605247806af4a9e262", "patch": "@@ -26,7 +26,7 @@ use getopts::{Matches, Options};\n \n use rustfmt::{\n     emit_post_matter, emit_pre_matter, format_and_emit_report, load_config, CliOptions, Config,\n-    FileName, FmtResult, Input, Summary, Verbosity, WriteMode, WRITE_MODE_LIST,\n+    FileName, FmtResult, Input, Summary, Verbosity, WriteMode,\n };\n \n fn main() {\n@@ -111,7 +111,13 @@ fn make_opts() -> Options {\n          found reverts to the input file path\",\n         \"[Path for the configuration file]\",\n     );\n-    opts.optopt(\"\", \"emit\", \"What data to emit and how\", WRITE_MODE_LIST);\n+    let is_nightly = is_nightly();\n+    let emit_opts = if is_nightly {\n+        \"[files|stdout|coverage|checkstyle]\"\n+    } else {\n+        \"[files|stdout]\"\n+    };\n+    opts.optopt(\"\", \"emit\", \"What data to emit and how\", emit_opts);\n     opts.optflagopt(\n         \"h\",\n         \"help\",\n@@ -129,7 +135,7 @@ fn make_opts() -> Options {\n     opts.optflag(\"q\", \"quiet\", \"Print less output\");\n     opts.optflag(\"V\", \"version\", \"Show version information\");\n \n-    if is_nightly() {\n+    if is_nightly {\n         opts.optflag(\n             \"\",\n             \"unstable-features\","}, {"sha": "65915225860596137ca570057721e7565c148ef0", "filename": "src/config/options.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=6d0695303a97edbf94a7ed605247806af4a9e262", "patch": "@@ -14,7 +14,7 @@ use config::config_type::ConfigType;\n use config::file_lines::FileLines;\n use config::lists::*;\n use config::Config;\n-use {FmtResult, WRITE_MODE_LIST};\n+use FmtResult;\n \n use failure::err_msg;\n \n@@ -174,14 +174,12 @@ configuration_option_enum! { ReportTactic:\n }\n \n configuration_option_enum! { WriteMode:\n-    // Backs the original file up and overwrites the original.\n-    Replace,\n     // Overwrites original file without backup.\n     Overwrite,\n+    // Backs the original file up and overwrites the original.\n+    Replace,\n     // Writes the output to stdout.\n     Display,\n-    // Writes the diff to stdout.\n-    Diff,\n     // Displays how much of the input file was processed\n     Coverage,\n     // Unfancy stdout\n@@ -196,6 +194,13 @@ configuration_option_enum! { WriteMode:\n     None,\n }\n \n+const STABLE_WRITE_MODES: [WriteMode; 4] = [\n+    WriteMode::Replace,\n+    WriteMode::Overwrite,\n+    WriteMode::Display,\n+    WriteMode::Check,\n+];\n+\n configuration_option_enum! { Color:\n     // Always use color, whether it is a piped or terminal output\n     Always,\n@@ -331,7 +336,7 @@ pub struct CliOptions {\n     pub quiet: bool,\n     pub verbose: bool,\n     pub config_path: Option<PathBuf>,\n-    pub write_mode: Option<WriteMode>,\n+    pub write_mode: WriteMode,\n     pub check: bool,\n     pub color: Option<Color>,\n     pub file_lines: FileLines, // Default is all lines in all files.\n@@ -355,7 +360,7 @@ impl CliOptions {\n             options.unstable_features = matches.opt_present(\"unstable-features\");\n         }\n \n-        if options.unstable_features {\n+        if !options.unstable_features {\n             if matches.opt_present(\"skip-children\") {\n                 options.skip_children = Some(true);\n             }\n@@ -375,16 +380,21 @@ impl CliOptions {\n                 return Err(format_err!(\"Invalid to use `--emit` and `--check`\"));\n             }\n             if let Ok(write_mode) = write_mode_from_emit_str(emit_str) {\n-                if write_mode == WriteMode::Overwrite && matches.opt_present(\"backup\") {\n-                    options.write_mode = Some(WriteMode::Replace);\n-                } else {\n-                    options.write_mode = Some(write_mode);\n-                }\n+                options.write_mode = write_mode;\n             } else {\n+                return Err(format_err!(\"Invalid value for `--emit`\"));\n+            }\n+        }\n+\n+        if options.write_mode == WriteMode::Overwrite && matches.opt_present(\"backup\") {\n+            options.write_mode = WriteMode::Replace;\n+        }\n+\n+        if !rust_nightly {\n+            if !STABLE_WRITE_MODES.contains(&options.write_mode) {\n                 return Err(format_err!(\n-                    \"Invalid value for `--emit`: {}, expected one of {}\",\n-                    emit_str,\n-                    WRITE_MODE_LIST\n+                    \"Invalid value for `--emit` - using an unstable \\\n+                     value without `--unstable-features`\",\n                 ));\n             }\n         }\n@@ -417,8 +427,8 @@ impl CliOptions {\n         }\n         if self.check {\n             config.set().write_mode(WriteMode::Check);\n-        } else if let Some(write_mode) = self.write_mode {\n-            config.set().write_mode(write_mode);\n+        } else {\n+            config.set().write_mode(self.write_mode);\n         }\n         if let Some(color) = self.color {\n             config.set().color(color);"}, {"sha": "d61a3aa2a74e772b85f1cc1b24240056107cc2a7", "filename": "src/filemap.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=6d0695303a97edbf94a7ed605247806af4a9e262", "patch": "@@ -156,19 +156,6 @@ where\n             }\n             write_system_newlines(out, text, config)?;\n         }\n-        WriteMode::Diff => {\n-            let filename = filename_to_path();\n-            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n-                let mismatch = make_diff(&ori, &fmt, 3);\n-                let has_diff = !mismatch.is_empty();\n-                print_diff(\n-                    mismatch,\n-                    |line_num| format!(\"Diff in {} at line {}:\", filename.display(), line_num),\n-                    config,\n-                );\n-                return Ok(has_diff);\n-            }\n-        }\n         WriteMode::Modified => {\n             let filename = filename_to_path();\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {"}, {"sha": "c50c45fbd36a939a828b10232c530004cbc342e5", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0695303a97edbf94a7ed605247806af4a9e262/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6d0695303a97edbf94a7ed605247806af4a9e262", "patch": "@@ -68,9 +68,6 @@ pub use config::{file_lines, load_config, Config, Verbosity, WriteMode};\n \n pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n \n-// FIXME: this is badly named since the user-facing name is `emit` not `write-mode`.\n-pub const WRITE_MODE_LIST: &str = \"[files|stdout|coverage|checkstyle]\";\n-\n #[macro_use]\n mod utils;\n "}]}