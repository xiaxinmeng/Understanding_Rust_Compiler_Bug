{"sha": "53a09d48557119d2b2a875d77a284b470a95e1c8", "node_id": "C_kwDOAAsO6NoAKDUzYTA5ZDQ4NTU3MTE5ZDJiMmE4NzVkNzdhMjg0YjQ3MGE5NWUxYzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-29T00:54:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-29T00:54:10Z"}, "message": "Auto merge of #9252 - Metaswitch:use-deprecated-config, r=Jarcho\n\nRead and use deprecated configuration (as well as emitting a warning)\n\nOriginal change written by `@flip1995` I've simply rebased to master and fixed up the formatting/tests.  This change teaches the configuration parser which config key replaced a deprecated key and attempts to populate the latter from the former.  If both keys are provided this fails with a duplicate key error (rather than attempting to guess which the user intended).\n\nCurrently this on affects `cyclomatic-complexity-threshold` -> `cognitive-complexity-threshold` but will also be used in #8974 to handle `blacklisted-names` -> `disallowed-names`.\n\n```\nchangelog: deprecated configuration keys are still applied as if they were provided as their non-deprecated name.\n```\n\n- [x] `cargo test` passes locally\n- [x] Run `cargo dev fmt`", "tree": {"sha": "fd82d31620516b010f550a537ff3084469e48f80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd82d31620516b010f550a537ff3084469e48f80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a09d48557119d2b2a875d77a284b470a95e1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a09d48557119d2b2a875d77a284b470a95e1c8", "html_url": "https://github.com/rust-lang/rust/commit/53a09d48557119d2b2a875d77a284b470a95e1c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a09d48557119d2b2a875d77a284b470a95e1c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d", "html_url": "https://github.com/rust-lang/rust/commit/3c7e7dbc1583a0b06df5bd7623dd354a4debd23d"}, {"sha": "ea25ef10cf942172e09b463c305b934fabccc8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea25ef10cf942172e09b463c305b934fabccc8e2", "html_url": "https://github.com/rust-lang/rust/commit/ea25ef10cf942172e09b463c305b934fabccc8e2"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "54b0346b7673591310f378f4680714aca46274b1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -486,7 +486,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         },\n     };\n \n-    let TryConf { conf, errors } = utils::conf::read(&file_name);\n+    let TryConf { conf, errors, warnings } = utils::conf::read(&file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n         sess.err(&format!(\n@@ -496,6 +496,15 @@ pub fn read_conf(sess: &Session) -> Conf {\n         ));\n     }\n \n+    for warning in warnings {\n+        sess.struct_warn(&format!(\n+            \"error reading Clippy's configuration file `{}`: {}\",\n+            file_name.display(),\n+            format_error(warning)\n+        ))\n+        .emit();\n+    }\n+\n     conf\n }\n "}, {"sha": "1dd22cb3185e51190e9d293710063e1c2f3dce17", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -68,13 +68,15 @@ pub enum DisallowedType {\n pub struct TryConf {\n     pub conf: Conf,\n     pub errors: Vec<Box<dyn Error>>,\n+    pub warnings: Vec<Box<dyn Error>>,\n }\n \n impl TryConf {\n     fn from_error(error: impl Error + 'static) -> Self {\n         Self {\n             conf: Conf::default(),\n             errors: vec![Box::new(error)],\n+            warnings: vec![],\n         }\n     }\n }\n@@ -90,14 +92,14 @@ impl fmt::Display for ConfError {\n \n impl Error for ConfError {}\n \n-fn conf_error(s: String) -> Box<dyn Error> {\n-    Box::new(ConfError(s))\n+fn conf_error(s: impl Into<String>) -> Box<dyn Error> {\n+    Box::new(ConfError(s.into()))\n }\n \n macro_rules! define_Conf {\n     ($(\n         $(#[doc = $doc:literal])+\n-        $(#[conf_deprecated($dep:literal)])?\n+        $(#[conf_deprecated($dep:literal, $new_conf:ident)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n@@ -137,17 +139,29 @@ macro_rules! define_Conf {\n \n             fn visit_map<V>(self, mut map: V) -> Result<Self::Value, V::Error> where V: MapAccess<'de> {\n                 let mut errors = Vec::new();\n+                let mut warnings = Vec::new();\n                 $(let mut $name = None;)*\n                 // could get `Field` here directly, but get `str` first for diagnostics\n                 while let Some(name) = map.next_key::<&str>()? {\n                     match Field::deserialize(name.into_deserializer())? {\n                         $(Field::$name => {\n-                            $(errors.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n+                            $(warnings.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n                             match map.next_value() {\n                                 Err(e) => errors.push(conf_error(e.to_string())),\n                                 Ok(value) => match $name {\n                                     Some(_) => errors.push(conf_error(format!(\"duplicate field `{}`\", name))),\n-                                    None => $name = Some(value),\n+                                    None => {\n+                                        $name = Some(value);\n+                                        // $new_conf is the same as one of the defined `$name`s, so\n+                                        // this variable is defined in line 2 of this function.\n+                                        $(match $new_conf {\n+                                            Some(_) => errors.push(conf_error(concat!(\n+                                                \"duplicate field `\", stringify!($new_conf),\n+                                                \"` (provided as `\", stringify!($name), \"`)\"\n+                                            ))),\n+                                            None => $new_conf = Some(value),\n+                                        })?\n+                                    },\n                                 }\n                             }\n                         })*\n@@ -156,7 +170,7 @@ macro_rules! define_Conf {\n                     }\n                 }\n                 let conf = Conf { $($name: $name.unwrap_or_else(defaults::$name),)* };\n-                Ok(TryConf { conf, errors })\n+                Ok(TryConf { conf, errors, warnings })\n             }\n         }\n \n@@ -216,8 +230,8 @@ define_Conf! {\n     /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY.\n     ///\n     /// Use the Cognitive Complexity lint instead.\n-    #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\")]\n-    (cyclomatic_complexity_threshold: Option<u64> = None),\n+    #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\", cognitive_complexity_threshold)]\n+    (cyclomatic_complexity_threshold: u64 = 25),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value"}, {"sha": "30cd9eecd98d3a5e0a13750e7c831e125a0b577f", "filename": "tests/ui-toml/conf_deprecated_key/clippy.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -1,5 +1,5 @@\n-# that one is an error\n-cyclomatic-complexity-threshold = 42\n+# that one is a warning\n+cyclomatic-complexity-threshold = 2\n \n # that one is white-listed\n [third-party]"}, {"sha": "b4e677ea124b7d673b14c90e1ea08607ae311dbd", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -1 +1,11 @@\n fn main() {}\n+\n+#[warn(clippy::cognitive_complexity)]\n+fn cognitive_complexity() {\n+    let x = vec![1, 2, 3];\n+    for i in x {\n+        if i == 1 {\n+            println!(\"{}\", i);\n+        }\n+    }\n+}"}, {"sha": "3b4c72044da8238ef3a1ff22ceb1707e8e68e82d", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -1,4 +1,13 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n \n-error: aborting due to previous error\n+error: the function has a cognitive complexity of (3/2)\n+  --> $DIR/conf_deprecated_key.rs:4:4\n+   |\n+LL | fn cognitive_complexity() {\n+   |    ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n+   = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "63a893cc6c7957529554a0871fa3537c850244d4", "filename": "tests/ui-toml/duplicated_keys/clippy.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -0,0 +1,5 @@\n+cognitive-complexity-threshold = 2\n+# This is the deprecated name for the same key\n+cyclomatic-complexity-threshold = 3\n+# Check we get duplication warning regardless of order\n+cognitive-complexity-threshold = 4"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/duplicated_keys/duplicated_keys.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.rs?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "d99490a242d4fd3ae0aa0cb461a2b34a68d5e95d", "filename": "tests/ui-toml/duplicated_keys/duplicated_keys.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53a09d48557119d2b2a875d77a284b470a95e1c8/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr?ref=53a09d48557119d2b2a875d77a284b470a95e1c8", "patch": "@@ -0,0 +1,8 @@\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive_complexity_threshold` (provided as `cyclomatic_complexity_threshold`)\n+\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive-complexity-threshold`\n+\n+warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}]}