{"sha": "175631311716d7dfeceec40d2587cde7142ffa8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NTYzMTMxMTcxNmQ3ZGZlY2VlYzQwZDI1ODdjZGU3MTQyZmZhOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-10T20:08:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-10T20:08:58Z"}, "message": "Auto merge of #68101 - JohnTitor:rollup-mvmjukr, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #66045 (Add method Result::into_ok)\n - #67258 (Introduce `X..`, `..X`, and `..=X` range patterns)\n - #68014 (Unify output of \"variant not found\" errors)\n - #68019 (Build compiletest with in-tree libtest)\n - #68039 (remove explicit strip-hidden pass from compiler doc generation)\n - #68050 (Canonicalize rustc_error imports)\n - #68059 (Allow specifying LLVM args in target specifications)\n - #68075 (rustbuild: Cleanup book generation)\n\nFailed merges:\n\n - #68089 (Unstabilize `Vec::remove_item`)\n\nr? @ghost", "tree": {"sha": "c77e6f2bb4e682bb6239b5e6ab31d674057ee31a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77e6f2bb4e682bb6239b5e6ab31d674057ee31a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/175631311716d7dfeceec40d2587cde7142ffa8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/175631311716d7dfeceec40d2587cde7142ffa8c", "html_url": "https://github.com/rust-lang/rust/commit/175631311716d7dfeceec40d2587cde7142ffa8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/175631311716d7dfeceec40d2587cde7142ffa8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6eb0db01a781d4f4940b34bd4c1cbe7e75263a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6eb0db01a781d4f4940b34bd4c1cbe7e75263a", "html_url": "https://github.com/rust-lang/rust/commit/ac6eb0db01a781d4f4940b34bd4c1cbe7e75263a"}, {"sha": "bcfb3806340939127d61f15ce101933bce6805f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb3806340939127d61f15ce101933bce6805f1", "html_url": "https://github.com/rust-lang/rust/commit/bcfb3806340939127d61f15ce101933bce6805f1"}], "stats": {"total": 4259, "additions": 2785, "deletions": 1474}, "files": [{"sha": "339389f8569e0ba4f8cdbe8b1bfea09465a21fad", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3654,6 +3654,7 @@ dependencies = [\n  \"log\",\n  \"rustc\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_index\","}, {"sha": "a87b44c79897f20ce34471b5c38008add08b1c44", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 15, "deletions": 73, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -49,7 +49,7 @@ macro_rules! book {\n                 builder.ensure(RustbookSrc {\n                     target: self.target,\n                     name: INTERNER.intern_str($book_name),\n-                    src: doc_src(builder),\n+                    src: INTERNER.intern_path(builder.src.join($path)),\n                 })\n             }\n         }\n@@ -60,6 +60,7 @@ macro_rules! book {\n // NOTE: When adding a book here, make sure to ALSO build the book by\n // adding a build step in `src/bootstrap/builder.rs`!\n book!(\n+    CargoBook, \"src/tools/cargo/src/doc\", \"cargo\";\n     EditionGuide, \"src/doc/edition-guide\", \"edition-guide\";\n     EmbeddedBook, \"src/doc/embedded-book\", \"embedded-book\";\n     Nomicon, \"src/doc/nomicon\", \"nomicon\";\n@@ -69,10 +70,6 @@ book!(\n     RustdocBook, \"src/doc/rustdoc\", \"rustdoc\";\n );\n \n-fn doc_src(builder: &Builder<'_>) -> Interned<PathBuf> {\n-    INTERNER.intern_path(builder.src.join(\"src/doc\"))\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: Interned<String>,\n@@ -96,48 +93,11 @@ impl Step for UnstableBook {\n         builder.ensure(RustbookSrc {\n             target: self.target,\n             name: INTERNER.intern_str(\"unstable-book\"),\n-            src: builder.md_doc_out(self.target),\n+            src: INTERNER.intern_path(builder.md_doc_out(self.target).join(\"unstable-book\")),\n         })\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct CargoBook {\n-    target: Interned<String>,\n-    name: Interned<String>,\n-}\n-\n-impl Step for CargoBook {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        run.path(\"src/tools/cargo/src/doc/book\").default_condition(builder.config.docs)\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(CargoBook { target: run.target, name: INTERNER.intern_str(\"cargo\") });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let target = self.target;\n-        let name = self.name;\n-        let src = builder.src.join(\"src/tools/cargo/src/doc\");\n-\n-        let out = builder.doc_out(target);\n-        t!(fs::create_dir_all(&out));\n-\n-        let out = out.join(name);\n-\n-        builder.info(&format!(\"Cargo Book ({}) - {}\", target, name));\n-\n-        let _ = fs::remove_dir_all(&out);\n-\n-        builder.run(builder.tool_cmd(Tool::Rustbook).arg(\"build\").arg(&src).arg(\"-d\").arg(out));\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n struct RustbookSrc {\n     target: Interned<String>,\n@@ -164,7 +124,6 @@ impl Step for RustbookSrc {\n         t!(fs::create_dir_all(&out));\n \n         let out = out.join(name);\n-        let src = src.join(name);\n         let index = out.join(\"index.html\");\n         let rustbook = builder.tool_exe(Tool::Rustbook);\n         let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n@@ -182,7 +141,6 @@ impl Step for RustbookSrc {\n pub struct TheBook {\n     compiler: Compiler,\n     target: Interned<String>,\n-    name: &'static str,\n }\n \n impl Step for TheBook {\n@@ -198,53 +156,37 @@ impl Step for TheBook {\n         run.builder.ensure(TheBook {\n             compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n             target: run.target,\n-            name: \"book\",\n         });\n     }\n \n     /// Builds the book and associated stuff.\n     ///\n     /// We need to build:\n     ///\n-    /// * Book (first edition)\n-    /// * Book (second edition)\n+    /// * Book\n+    /// * Older edition redirects\n     /// * Version info and CSS\n     /// * Index page\n     /// * Redirect pages\n     fn run(self, builder: &Builder<'_>) {\n         let compiler = self.compiler;\n         let target = self.target;\n-        let name = self.name;\n \n         // build book\n         builder.ensure(RustbookSrc {\n             target,\n-            name: INTERNER.intern_string(name.to_string()),\n-            src: doc_src(builder),\n+            name: INTERNER.intern_str(\"book\"),\n+            src: INTERNER.intern_path(builder.src.join(\"src/doc/book\")),\n         });\n \n         // building older edition redirects\n-\n-        let source_name = format!(\"{}/first-edition\", name);\n-        builder.ensure(RustbookSrc {\n-            target,\n-            name: INTERNER.intern_string(source_name),\n-            src: doc_src(builder),\n-        });\n-\n-        let source_name = format!(\"{}/second-edition\", name);\n-        builder.ensure(RustbookSrc {\n-            target,\n-            name: INTERNER.intern_string(source_name),\n-            src: doc_src(builder),\n-        });\n-\n-        let source_name = format!(\"{}/2018-edition\", name);\n-        builder.ensure(RustbookSrc {\n-            target,\n-            name: INTERNER.intern_string(source_name),\n-            src: doc_src(builder),\n-        });\n+        for edition in &[\"first-edition\", \"second-edition\", \"2018-edition\"] {\n+            builder.ensure(RustbookSrc {\n+                target,\n+                name: INTERNER.intern_string(format!(\"book/{}\", edition)),\n+                src: INTERNER.intern_path(builder.src.join(\"src/doc/book\").join(edition)),\n+            });\n+        }\n \n         // build the version info page and CSS\n         builder.ensure(Standalone { compiler, target });\n@@ -531,7 +473,7 @@ impl Step for Rustc {\n \n         // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n-        cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items --passes strip-hidden\");\n+        cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`."}, {"sha": "7f24768a4f10e54cce459ab65dc2af4f46134f0f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -289,8 +289,8 @@ fn rustbook_features() -> Vec<String> {\n macro_rules! bootstrap_tool {\n     ($(\n         $name:ident, $path:expr, $tool_name:expr\n-        $(,llvm_tools = $llvm:expr)*\n         $(,is_external_tool = $external:expr)*\n+        $(,is_unstable_tool = $unstable:expr)*\n         $(,features = $features:expr)*\n         ;\n     )+) => {\n@@ -301,15 +301,6 @@ macro_rules! bootstrap_tool {\n             )+\n         }\n \n-        impl Tool {\n-            /// Whether this tool requires LLVM to run\n-            pub fn uses_llvm_tools(&self) -> bool {\n-                match self {\n-                    $(Tool::$name => false $(|| $llvm)*,)+\n-                }\n-            }\n-        }\n-\n         impl<'a> Builder<'a> {\n             pub fn tool_exe(&self, tool: Tool) -> PathBuf {\n                 match tool {\n@@ -350,7 +341,12 @@ macro_rules! bootstrap_tool {\n                     compiler: self.compiler,\n                     target: self.target,\n                     tool: $tool_name,\n-                    mode: Mode::ToolBootstrap,\n+                    mode: if false $(|| $unstable)* {\n+                        // use in-tree libraries for unstable features\n+                        Mode::ToolStd\n+                    } else {\n+                        Mode::ToolBootstrap\n+                    },\n                     path: $path,\n                     is_optional_tool: false,\n                     source_type: if false $(|| $external)* {\n@@ -377,7 +373,7 @@ bootstrap_tool!(\n     Tidy, \"src/tools/tidy\", \"tidy\";\n     Linkchecker, \"src/tools/linkchecker\", \"linkchecker\";\n     CargoTest, \"src/tools/cargotest\", \"cargotest\";\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", llvm_tools = true;\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", is_unstable_tool = true;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\";\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\";\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", is_external_tool = true;"}, {"sha": "aa57c7788c60ca1817a8539f74dc5230f209f755", "filename": "src/libcore/result.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1092,6 +1092,44 @@ impl<T: Default, E> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+impl<T, E: Into<!>> Result<T, E> {\n+    /// Unwraps a result that can never be an [`Err`], yielding the content of the [`Ok`].\n+    ///\n+    /// Unlike [`unwrap`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap` as a maintainability safeguard that will fail\n+    /// to compile if the error type of the `Result` is later changed\n+    /// to an error that can actually occur.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`unwrap`]: enum.Result.html#method.unwrap\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_good_news() -> Result<String, !> {\n+    ///     Ok(\"this is fine\".into())\n+    /// }\n+    ///\n+    /// let s: String = only_good_news().into_ok();\n+    /// println!(\"{}\", s);\n+    /// ```\n+    #[inline]\n+    pub fn into_ok(self) -> T {\n+        match self {\n+            Ok(x) => x,\n+            Err(e) => e.into(),\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n     /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E>`."}, {"sha": "09b54857f7dec711b9e6dbed1d25d71b6f14b85d", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -40,6 +40,8 @@\n #![feature(slice_from_raw_parts)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(never_type)]\n+#![feature(unwrap_infallible)]\n \n extern crate test;\n "}, {"sha": "254d4539eaccf213448ab35a62fdae1f0963e450", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -183,6 +183,28 @@ pub fn test_unwrap_or_default() {\n     assert_eq!(op2().unwrap_or_default(), 0);\n }\n \n+#[test]\n+pub fn test_into_ok() {\n+    fn infallible_op() -> Result<isize, !> {\n+        Ok(666)\n+    }\n+\n+    assert_eq!(infallible_op().into_ok(), 666);\n+\n+    enum MyNeverToken {}\n+    impl From<MyNeverToken> for ! {\n+        fn from(never: MyNeverToken) -> ! {\n+            match never {}\n+        }\n+    }\n+\n+    fn infallible_op2() -> Result<isize, MyNeverToken> {\n+        Ok(667)\n+    }\n+\n+    assert_eq!(infallible_op2().into_ok(), 667);\n+}\n+\n #[test]\n fn test_try() {\n     fn try_result_some() -> Option<u8> {"}, {"sha": "323ce3b6cbb6dc8a82a4f90379c60f02a2c61d79", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -26,8 +26,8 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_index = { path = \"../librustc_index\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "8d1efc7bc048d8510a514b7029945b4f49ec021b", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,11 +1,11 @@\n use crate::ty::{self, TyCtxt};\n-use errors::Diagnostic;\n use parking_lot::{Condvar, Mutex};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::QueryInvocationId;\n use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n+use rustc_errors::Diagnostic;\n use rustc_index::vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;"}, {"sha": "c6a996f84f46161b2d145c427cc8af5848341345", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,8 +9,8 @@ use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n \n-use errors::struct_span_err;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "c52d4335ea184fed6496b5e1d47dfa4be0bbb5c1", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -64,15 +64,13 @@ use crate::ty::{\n     subst::{Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_error_codes::*;\n+use rustc_errors::{pluralize, struct_span_err};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Node;\n-\n-use errors::{\n-    pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticStyledString,\n-};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_error_codes::*;\n use rustc_span::{DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::{cmp, fmt};"}, {"sha": "70f7987faf4ccf83d202b3092143cdec2a1ca443", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,7 +3,7 @@ use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use crate::ty::print::Print;\n use crate::ty::{self, DefIdTree, Infer, Ty, TyVar};\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -151,12 +151,12 @@ pub enum TypeAnnotationNeeded {\n     E0284,\n }\n \n-impl Into<errors::DiagnosticId> for TypeAnnotationNeeded {\n-    fn into(self) -> errors::DiagnosticId {\n+impl Into<rustc_errors::DiagnosticId> for TypeAnnotationNeeded {\n+    fn into(self) -> rustc_errors::DiagnosticId {\n         match self {\n-            Self::E0282 => errors::error_code!(E0282),\n-            Self::E0283 => errors::error_code!(E0283),\n-            Self::E0284 => errors::error_code!(E0284),\n+            Self::E0282 => rustc_errors::error_code!(E0282),\n+            Self::E0283 => rustc_errors::error_code!(E0283),\n+            Self::E0284 => rustc_errors::error_code!(E0284),\n         }\n     }\n }"}, {"sha": "d6e50209f72ddf73471091869bd6d72ea42a31d6", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,8 +5,8 @@ use crate::infer::error_reporting::nice_region_error::util::AnonymousParamInfo;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::util::common::ErrorReported;\n \n-use errors::struct_span_err;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous."}, {"sha": "8749d6cd34bed27cff82613a032fc75c8e18b448", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,7 +3,7 @@ use crate::infer::lexical_region_resolve::RegionResolutionError::*;\n use crate::infer::InferCtxt;\n use crate::ty::{self, TyCtxt};\n use crate::util::common::ErrorReported;\n-use errors::DiagnosticBuilder;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_span::source_map::Span;\n \n mod different_lifetimes;"}, {"sha": "2344d408a43a5d39e752f4a72c09b97aeabf985c", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,7 +2,7 @@\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty;\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::{FunctionRetTy, TyKind};\n \n use rustc_error_codes::*;"}, {"sha": "7b31fe7cd7e4d208af4f8124867c07e4dc1feeae", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,7 +7,7 @@ use crate::ty::error::ExpectedFound;\n use crate::ty::print::{FmtPrinter, Print, RegionHighlightMode};\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, TyCtxt};\n-use errors::DiagnosticBuilder;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n "}, {"sha": "c6fc4cd3c15f7721301e49c892756df0e19f037a", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,7 +5,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::ty::{BoundRegion, FreeRegion, RegionKind};\n use crate::util::common::ErrorReported;\n-use errors::Applicability;\n+use rustc_errors::Applicability;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait."}, {"sha": "6303104e39dd317e5d28aa1acf9aba320346b85d", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,7 +3,7 @@ use crate::infer::{self, InferCtxt, SubregionOrigin};\n use crate::middle::region;\n use crate::ty::error::TypeError;\n use crate::ty::{self, Region};\n-use errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n \n use rustc_error_codes::*;\n "}, {"sha": "f67669e367f00c9eb5f2224dff04c3968f19beb4", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -21,10 +21,10 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use crate::ty::{ConstVid, FloatVid, IntVid, TyVid};\n \n-use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;"}, {"sha": "a1afb1a86be44b563fe1382167d8ca1284267bf4", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,10 +6,10 @@ use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::free_region_map::FreeRegionRelations;\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_hir::Node;"}, {"sha": "f5845dcae1288415b753f5453886bc8e422ec5e6", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{FutureIncompatibleInfo, LateLintPass, LintArray, LintPass};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{pluralize, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_session::declare_lint;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Span;"}, {"sha": "bd561b41c57f54122fe27905b7dfcfca60553dc6", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -25,10 +25,10 @@ use crate::middle::privacy::AccessLevels;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};"}, {"sha": "7b99b4af4f9ab0b10b08bd63cfe00a666b6b9657", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,8 +4,8 @@\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n-use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::declare_tool_lint;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "6ca98b44bf80cb2f477ffdc324a21f5f1c334b30", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,9 +5,9 @@ use crate::lint::builtin;\n use crate::lint::context::{CheckLintNameResult, LintStore};\n use crate::lint::{self, Level, Lint, LintId, LintSource};\n use crate::session::Session;\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir::HirId;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "a8c1f9a664f1838c836d7dceb95dd66dd2333e47", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -23,8 +23,8 @@ pub use self::LintSource::*;\n \n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n-use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_data_structures::sync;\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_session::node_id::NodeMap;\n use rustc_session::{DiagnosticMessageId, Session};"}, {"sha": "42fc3e030e7bb4f88cb071a633745faf1126074b", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -14,8 +14,8 @@ use crate::middle::cstore::ExternCrate;\n use crate::middle::weak_lang_items;\n use crate::ty::{self, TyCtxt};\n \n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "93c23e40d2e2b4efd9bc120cbbb716ccee80a803", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,8 +7,8 @@ use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n-use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -18,7 +18,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n use syntax::attr::{self, ConstStability, Deprecation, RustcDeprecation, Stability};\n-use syntax::errors::Applicability;\n use syntax::feature_gate::feature_err_issue;\n \n use std::num::NonZeroU32;"}, {"sha": "fdffd1251ce8f747f73ed6bc785b187741b29964", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,8 +5,8 @@ use crate::session::config;\n \n use crate::hir::map::Map;\n use crate::ty::TyCtxt;\n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "ed61534d5451999702c6a159a22b4a3b52074c59", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,8 +7,8 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n-use errors::{struct_span_err, DiagnosticBuilder};\n use hir::GeneratorKind;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_span::symbol::Symbol;"}, {"sha": "29ea47809a077a8240a1b9113539f35a8f978881", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -38,7 +38,7 @@ pub struct OverlapResult<'tcx> {\n     pub involves_placeholder: bool,\n }\n \n-pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n+pub fn add_placeholder_note(err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n     err.note(&format!(\n         \"this behavior recently changed as a result of a bug fix; \\\n          see rust-lang/rust#56105 for details\""}, {"sha": "0c9a73d78a5ebe184290243e052fa6acb2f87b95", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -21,8 +21,8 @@ use crate::ty::SubtypePredicate;\n use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;"}, {"sha": "1afe153bb1361937a7f72c4be81b61df8812bee5", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,8 +3,8 @@ use fmt_macros::{Parser, Piece, Position};\n use crate::ty::{self, GenericParamDefKind, TyCtxt};\n use crate::util::common::ErrorReported;\n \n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;"}, {"sha": "34866b684de01a9369ed73182edf3c7093732a3f", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -76,7 +76,7 @@ pub struct DropckOutlivesResult<'tcx> {\n impl<'tcx> DropckOutlivesResult<'tcx> {\n     pub fn report_overflows(&self, tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n         if let Some(overflow_ty) = self.overflows.iter().next() {\n-            errors::struct_span_err!(\n+            rustc_errors::struct_span_err!(\n                 tcx.sess,\n                 span,\n                 E0320,"}, {"sha": "8b66f4926e0c88b107a45345482084b8a2d79cad", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -102,7 +102,7 @@ pub enum IntercrateAmbiguityCause {\n impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint(&self, err: &mut errors::DiagnosticBuilder<'_>) {\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }\n "}, {"sha": "7b66341ef1c9642d8dc32a12b1b0663c09de175d", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -17,8 +17,8 @@ use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, TyCtxt, TypeFoldable};\n-use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n use rustc_span::DUMMY_SP;\n "}, {"sha": "65fd809657bd08fec282c73130cc6d86e9a017b0", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-use errors::DiagnosticBuilder;\n+use rustc_errors::DiagnosticBuilder;\n use rustc_span::Span;\n use smallvec::SmallVec;\n "}, {"sha": "1b0b5fc4d078d1d40eda532262372690d083b40c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -51,14 +51,14 @@ use rustc_hir::{HirId, Node, TraitCandidate};\n use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n \n use arena::SyncDroplessArena;\n-use errors::DiagnosticBuilder;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::ShardedHashMap;\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n use rustc_data_structures::sync::{Lock, Lrc, WorkerLocal};\n+use rustc_errors::DiagnosticBuilder;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_session::node_id::NodeMap;\n@@ -1613,10 +1613,10 @@ pub mod tls {\n \n     use crate::dep_graph::TaskDeps;\n     use crate::ty::query;\n-    use errors::Diagnostic;\n     use rustc_data_structures::sync::{self, Lock, Lrc};\n     use rustc_data_structures::thin_vec::ThinVec;\n     use rustc_data_structures::OnDrop;\n+    use rustc_errors::Diagnostic;\n     use std::mem;\n \n     #[cfg(not(parallel_compiler))]"}, {"sha": "f7612874e05b6b9b9ee5a455707eb27447cbf155", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,12 +1,10 @@\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-\n-use errors::{Applicability, DiagnosticBuilder};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use syntax::errors::pluralize;\n \n use std::borrow::Cow;\n use std::fmt;"}, {"sha": "a81fe33831c96bc6d012c1a3a1105f145cb34f04", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,10 +7,10 @@ use crate::session::{CrateDisambiguator, Session};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n-use errors::Diagnostic;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, Once};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "84efbe21f10aa25bce31a01e0599f574e9e4e92f", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,7 +9,6 @@ use crate::ty::query::Query;\n use crate::ty::tls;\n use crate::ty::{self, TyCtxt};\n \n-use errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::cold_path;\n use rustc_data_structures::fx::{FxHashMap, FxHasher};\n@@ -18,6 +17,7 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, Handler, Level};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;"}, {"sha": "8d22ac9dbbe97b60c704a78ad0cf274574e6789c", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 73, "deletions": 22, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,18 +3,18 @@\n use crate::hir::map::DefPathData;\n use crate::ich::NodeIdHashingMode;\n use crate::mir::interpret::{sign_extend, truncate};\n-use crate::ty::layout::{Integer, IntegerExt};\n+use crate::ty::layout::{Integer, IntegerExt, Size};\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n use crate::ty::{self, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable};\n use crate::util::common::ErrorReported;\n+use rustc_apfloat::Float as _;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n use rustc_span::Span;\n use std::{cmp, fmt};\n@@ -43,41 +43,54 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n     }\n }\n \n+fn signed_min(size: Size) -> i128 {\n+    sign_extend(1_u128 << (size.bits() - 1), size) as i128\n+}\n+\n+fn signed_max(size: Size) -> i128 {\n+    i128::max_value() >> (128 - size.bits())\n+}\n+\n+fn unsigned_max(size: Size) -> u128 {\n+    u128::max_value() >> (128 - size.bits())\n+}\n+\n+fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {\n+    let (int, signed) = match ty.kind {\n+        Int(ity) => (Integer::from_attr(&tcx, SignedInt(ity)), true),\n+        Uint(uty) => (Integer::from_attr(&tcx, UnsignedInt(uty)), false),\n+        _ => bug!(\"non integer discriminant\"),\n+    };\n+    (int.size(), signed)\n+}\n+\n impl<'tcx> Discr<'tcx> {\n     /// Adds `1` to the value and wraps around if the maximum for the type is reached.\n     pub fn wrap_incr(self, tcx: TyCtxt<'tcx>) -> Self {\n         self.checked_add(tcx, 1).0\n     }\n     pub fn checked_add(self, tcx: TyCtxt<'tcx>, n: u128) -> (Self, bool) {\n-        let (int, signed) = match self.ty.kind {\n-            Int(ity) => (Integer::from_attr(&tcx, SignedInt(ity)), true),\n-            Uint(uty) => (Integer::from_attr(&tcx, UnsignedInt(uty)), false),\n-            _ => bug!(\"non integer discriminant\"),\n-        };\n-\n-        let size = int.size();\n-        let bit_size = int.size().bits();\n-        let shift = 128 - bit_size;\n-        if signed {\n-            let sext = |u| sign_extend(u, size) as i128;\n-            let min = sext(1_u128 << (bit_size - 1));\n-            let max = i128::max_value() >> shift;\n-            let val = sext(self.val);\n+        let (size, signed) = int_size_and_signed(tcx, self.ty);\n+        let (val, oflo) = if signed {\n+            let min = signed_min(size);\n+            let max = signed_max(size);\n+            let val = sign_extend(self.val, size) as i128;\n             assert!(n < (i128::max_value() as u128));\n             let n = n as i128;\n             let oflo = val > max - n;\n             let val = if oflo { min + (n - (max - val) - 1) } else { val + n };\n             // zero the upper bits\n             let val = val as u128;\n             let val = truncate(val, size);\n-            (Self { val: val as u128, ty: self.ty }, oflo)\n+            (val, oflo)\n         } else {\n-            let max = u128::max_value() >> shift;\n+            let max = unsigned_max(size);\n             let val = self.val;\n             let oflo = val > max - n;\n             let val = if oflo { n - (max - val) - 1 } else { val + n };\n-            (Self { val: val, ty: self.ty }, oflo)\n-        }\n+            (val, oflo)\n+        };\n+        (Self { val, ty: self.ty }, oflo)\n     }\n }\n \n@@ -621,6 +634,44 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n impl<'tcx> ty::TyS<'tcx> {\n+    /// Returns the maximum value for the given numeric type (including `char`s)\n+    /// or returns `None` if the type is not numeric.\n+    pub fn numeric_max_val(&'tcx self, tcx: TyCtxt<'tcx>) -> Option<&'tcx ty::Const<'tcx>> {\n+        let val = match self.kind {\n+            ty::Int(_) | ty::Uint(_) => {\n+                let (size, signed) = int_size_and_signed(tcx, self);\n+                let val = if signed { signed_max(size) as u128 } else { unsigned_max(size) };\n+                Some(val)\n+            }\n+            ty::Char => Some(std::char::MAX as u128),\n+            ty::Float(fty) => Some(match fty {\n+                ast::FloatTy::F32 => ::rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n+                ast::FloatTy::F64 => ::rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n+            }),\n+            _ => None,\n+        };\n+        val.map(|v| ty::Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n+    }\n+\n+    /// Returns the minimum value for the given numeric type (including `char`s)\n+    /// or returns `None` if the type is not numeric.\n+    pub fn numeric_min_val(&'tcx self, tcx: TyCtxt<'tcx>) -> Option<&'tcx ty::Const<'tcx>> {\n+        let val = match self.kind {\n+            ty::Int(_) | ty::Uint(_) => {\n+                let (size, signed) = int_size_and_signed(tcx, self);\n+                let val = if signed { truncate(signed_min(size) as u128, size) } else { 0 };\n+                Some(val)\n+            }\n+            ty::Char => Some(0),\n+            ty::Float(fty) => Some(match fty {\n+                ast::FloatTy::F32 => (-::rustc_apfloat::ieee::Single::INFINITY).to_bits(),\n+                ast::FloatTy::F64 => (-::rustc_apfloat::ieee::Double::INFINITY).to_bits(),\n+            }),\n+            _ => None,\n+        };\n+        val.map(|v| ty::Const::from_bits(tcx, v, ty::ParamEnv::empty().and(self)))\n+    }\n+\n     /// Checks whether values of this type `T` are *moved* or *copied*\n     /// when referenced -- this amounts to a check for whether `T:\n     /// Copy`, but note that we **don't** consider lifetimes when"}, {"sha": "19b43bfd162415089209b4c3a37f5742d021504c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -8,7 +8,7 @@ use std::time::{Duration, Instant};\n #[cfg(test)]\n mod tests;\n \n-pub use errors::ErrorReported;\n+pub use rustc_errors::ErrorReported;\n \n pub fn to_readable_str(mut val: usize) -> String {\n     let mut groups = vec![];"}, {"sha": "6cf640a0e98a2a78575a9a9c0432179041bf04e5", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -65,9 +65,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             PatKind::Box(ref inner) => hir::PatKind::Box(self.lower_pat(inner)),\n             PatKind::Ref(ref inner, mutbl) => hir::PatKind::Ref(self.lower_pat(inner), mutbl),\n             PatKind::Range(ref e1, ref e2, Spanned { node: ref end, .. }) => hir::PatKind::Range(\n-                self.lower_expr(e1),\n-                self.lower_expr(e2),\n-                self.lower_range_end(end),\n+                e1.as_deref().map(|e| self.lower_expr(e)),\n+                e2.as_deref().map(|e| self.lower_expr(e)),\n+                self.lower_range_end(end, e2.is_some()),\n             ),\n             PatKind::Slice(ref pats) => self.lower_pat_slice(pats),\n             PatKind::Rest => {\n@@ -253,10 +253,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::PatKind::Wild\n     }\n \n-    fn lower_range_end(&mut self, e: &RangeEnd) -> hir::RangeEnd {\n+    fn lower_range_end(&mut self, e: &RangeEnd, has_end: bool) -> hir::RangeEnd {\n         match *e {\n-            RangeEnd::Included(_) => hir::RangeEnd::Included,\n-            RangeEnd::Excluded => hir::RangeEnd::Excluded,\n+            RangeEnd::Excluded if has_end => hir::RangeEnd::Excluded,\n+            // No end; so `X..` behaves like `RangeFrom`.\n+            RangeEnd::Excluded | RangeEnd::Included(_) => hir::RangeEnd::Included,\n         }\n     }\n }"}, {"sha": "ca57068fb9a335bfe6bacea9447a04cb5625e41c", "filename": "src/librustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -10,10 +10,10 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "a6b45e0567c72c23516dd6f0f387318a36b909eb", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,7 +2,7 @@\n //\n use State::*;\n \n-use errors::{struct_span_err, DiagnosticBuilder, PResult};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, PResult};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "c96ba516f0ced83a17ad5f7cf5b8aa3f5453bf2c", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n \n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;"}, {"sha": "cee62a54f0088202704eb9c3ae9b1fbbf55b94e1", "filename": "src/librustc_builtin_macros/cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcfg.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,8 +1,8 @@\n-/// The compiler code necessary to support the cfg! extension, which expands to\n-/// a literal `true` or `false` based on whether the given cfg matches the\n-/// current compilation environment.\n-use errors::DiagnosticBuilder;\n+//! The compiler code necessary to support the cfg! extension, which expands to\n+//! a literal `true` or `false` based on whether the given cfg matches the\n+//! current compilation environment.\n \n+use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "72c41ad9745c1ae505cd78f5cea9155b36135c9f", "filename": "src/librustc_builtin_macros/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fdefault.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,7 +2,7 @@ use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n-use errors::struct_span_err;\n+use rustc_errors::struct_span_err;\n use rustc_expand::base::{Annotatable, DummyResult, ExtCtxt};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "6fca74e22394465646dd5fda813fd02dbdf633e7", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,10 +3,8 @@ use Position::*;\n \n use fmt_macros as parse;\n \n-use errors::pluralize;\n-use errors::Applicability;\n-use errors::DiagnosticBuilder;\n-\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n@@ -15,7 +13,6 @@ use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n "}, {"sha": "052e62ee9ffd3da3008a7edb451fcbfd9b056b43", "filename": "src/librustc_builtin_macros/global_asm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_asm.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,14 +1,14 @@\n-/// Module-level assembly support.\n-///\n-/// The macro defined here allows you to specify \"top-level\",\n-/// \"file-scoped\", or \"module-level\" assembly. These synonyms\n-/// all correspond to LLVM's module-level inline assembly instruction.\n-///\n-/// For example, `global_asm!(\"some assembly here\")` codegens to\n-/// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n-/// therefore apply.\n-use errors::DiagnosticBuilder;\n+//! Module-level assembly support.\n+//!\n+//! The macro defined here allows you to specify \"top-level\",\n+//! \"file-scoped\", or \"module-level\" assembly. These synonyms\n+//! all correspond to LLVM's module-level inline assembly instruction.\n+//!\n+//! For example, `global_asm!(\"some assembly here\")` codegens to\n+//! LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n+//! therefore apply.\n \n+use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n use rustc_span::source_map::respan;\n use rustc_span::Span;"}, {"sha": "ae70608505130ad2420c5ad37c16e03e7ee184ee", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -40,7 +40,7 @@ enum ProcMacro {\n struct CollectProcMacros<'a> {\n     macros: Vec<ProcMacro>,\n     in_root: bool,\n-    handler: &'a errors::Handler,\n+    handler: &'a rustc_errors::Handler,\n     is_proc_macro_crate: bool,\n     is_test_crate: bool,\n }\n@@ -53,7 +53,7 @@ pub fn inject(\n     has_proc_macro_decls: bool,\n     is_test_crate: bool,\n     num_crate_types: usize,\n-    handler: &errors::Handler,\n+    handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver);"}, {"sha": "17d180da6bfda7c1b6587902463412a1326f8b98", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -40,7 +40,7 @@ pub fn inject(\n     resolver: &mut dyn Resolver,\n     should_test: bool,\n     krate: &mut ast::Crate,\n-    span_diagnostic: &errors::Handler,\n+    span_diagnostic: &rustc_errors::Handler,\n     features: &Features,\n     panic_strategy: PanicStrategy,\n     platform_panic_strategy: PanicStrategy,\n@@ -351,7 +351,7 @@ fn is_test_case(i: &ast::Item) -> bool {\n     attr::contains_name(&i.attrs, sym::rustc_test_marker)\n }\n \n-fn get_test_runner(sd: &errors::Handler, krate: &ast::Crate) -> Option<ast::Path> {\n+fn get_test_runner(sd: &rustc_errors::Handler, krate: &ast::Crate) -> Option<ast::Path> {\n     let test_attr = attr::find_by_name(&krate.attrs, sym::test_runner)?;\n     test_attr.meta_item_list().map(|meta_list| {\n         if meta_list.len() != 1 {"}, {"sha": "52613fef7e612b0def79aa7d451130e96adbc9c1", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -46,7 +46,7 @@ fn require_inited() {\n }\n \n unsafe fn configure_llvm(sess: &Session) {\n-    let n_args = sess.opts.cg.llvm_args.len();\n+    let n_args = sess.opts.cg.llvm_args.len() + sess.target.target.options.llvm_args.len();\n     let mut llvm_c_strs = Vec::with_capacity(n_args + 1);\n     let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n@@ -56,14 +56,11 @@ unsafe fn configure_llvm(sess: &Session) {\n         full_arg.trim().split(|c: char| c == '=' || c.is_whitespace()).next().unwrap_or(\"\")\n     }\n \n-    let user_specified_args: FxHashSet<_> = sess\n-        .opts\n-        .cg\n-        .llvm_args\n-        .iter()\n-        .map(|s| llvm_arg_to_arg_name(s))\n-        .filter(|s| s.len() > 0)\n-        .collect();\n+    let cg_opts = sess.opts.cg.llvm_args.iter();\n+    let tg_opts = sess.target.target.options.llvm_args.iter();\n+\n+    let user_specified_args: FxHashSet<_> =\n+        cg_opts.chain(tg_opts).map(|s| llvm_arg_to_arg_name(s)).filter(|s| s.len() > 0).collect();\n \n     {\n         // This adds the given argument to LLVM. Unless `force` is true"}, {"sha": "37449f9402eff6b2d8955f5afa16567248bdef10", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -17,7 +17,7 @@ rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "a1318d3506711a1644c18a5fd569be56146f10cb", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -24,7 +24,6 @@ extern crate lazy_static;\n pub extern crate rustc_plugin_impl as plugin;\n \n //use rustc_resolve as resolve;\n-use errors::{registry::Registry, PResult};\n use rustc::lint;\n use rustc::lint::Lint;\n use rustc::middle::cstore::MetadataLoader;\n@@ -37,6 +36,7 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n+use rustc_errors::{registry::Registry, PResult};\n use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::get_builtin_codegen_backend;\n@@ -1134,7 +1134,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n /// the panic into a `Result` instead.\n pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n-        if value.is::<errors::FatalErrorMarker>() {\n+        if value.is::<rustc_errors::FatalErrorMarker>() {\n             ErrorReported\n         } else {\n             panic::resume_unwind(value);\n@@ -1163,20 +1163,20 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n-        errors::ColorConfig::Auto,\n+    let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n+        rustc_errors::ColorConfig::Auto,\n         None,\n         false,\n         false,\n         None,\n         false,\n     ));\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n \n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n-    if !info.payload().is::<errors::ExplicitBug>() {\n-        let d = errors::Diagnostic::new(errors::Level::Bug, \"unexpected panic\");\n+    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+        let d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&d);\n     }\n "}, {"sha": "c23846063c1dc0620c226bd68b4fbfd8618e31a6", "filename": "src/librustc_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -14,8 +14,8 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n rustc_span = { path = \"../librustc_span\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "52ba14dbc3df06a7294da48e9252bea4b6223b20", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,9 +1,15 @@\n use crate::expand::{self, AstFragment, Invocation};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::{self, Lrc};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_parse::{self, parser, DirectoryOwnership, MACRO_ARGUMENTS};\n use rustc_span::edition::Edition;\n+use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n+use smallvec::{smallvec, SmallVec};\n use syntax::ast::{self, Attribute, Name, NodeId, PatKind};\n use syntax::attr::{self, Deprecation, HasAttrs, Stability};\n use syntax::mut_visit::{self, MutVisitor};\n@@ -13,13 +19,6 @@ use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;\n \n-use errors::{DiagnosticBuilder, DiagnosticId};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::{self, Lrc};\n-use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n-use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n-use smallvec::{smallvec, SmallVec};\n-\n use std::default::Default;\n use std::iter;\n use std::path::PathBuf;"}, {"sha": "8426391a2f389e8d73674762fccad7ee3b3d7b46", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,6 +5,8 @@ use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::proc_macro::collect_derives;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, FatalError, PResult};\n use rustc_feature::Features;\n use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n@@ -26,10 +28,7 @@ use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::util::map_in_place::MapInPlace;\n use syntax::visit::{self, Visitor};\n \n-use errors::{Applicability, FatalError, PResult};\n use smallvec::{smallvec, SmallVec};\n-\n-use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n use std::ops::DerefMut;\n use std::path::PathBuf;"}, {"sha": "4fe7c268c4f0b47e90fe4e8911b9ec89990d734c", "filename": "src/librustc_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -13,7 +13,7 @@ extern crate proc_macro as pm;\n #[macro_export]\n macro_rules! panictry {\n     ($e:expr) => {{\n-        use errors::FatalError;\n+        use rustc_errors::FatalError;\n         use std::result::Result::{Err, Ok};\n         match $e {\n             Ok(e) => e,"}, {"sha": "441c1b75a7c73e094c4999054d2dc352eb6d78ae", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -85,7 +85,7 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::TokenStream;\n \n-use errors::{FatalError, PResult};\n+use rustc_errors::{FatalError, PResult};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n "}, {"sha": "d72317af9eb67a956f89bf31f3e35f1fd7df0636", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -8,6 +8,9 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, DiagnosticBuilder, FatalError};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n@@ -22,17 +25,11 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n \n-use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n-\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::{mem, slice};\n \n-use errors::Applicability;\n-\n const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n                                         `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, \\\n                                         `literal`, `path`, `meta`, `tt`, `item` and `vis`\";"}, {"sha": "104a5233c9d8c193dee36a7be0d802b837b8ddc1", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,19 +2,17 @@ use crate::base::ExtCtxt;\n use crate::mbe;\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::pluralize;\n+use rustc_span::hygiene::{ExpnId, Transparency};\n+use rustc_span::Span;\n use syntax::ast::{Ident, Mac};\n use syntax::mut_visit::{self, MutVisitor};\n use syntax::token::{self, NtTT, Token};\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n-\n-use errors::pluralize;\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n-use rustc_span::hygiene::{ExpnId, Transparency};\n-use rustc_span::Span;\n-\n use std::mem;\n \n // A Marker adds the given mark to the syntax context."}, {"sha": "2ef81d80a1412062b41d95f279327425f571057f", "filename": "src/librustc_expand/parse/lexer/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Flexer%2Ftests.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,5 @@\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{emitter::EmitterWriter, Handler};\n use rustc_parse::lexer::StringReader;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::symbol::Symbol;\n@@ -8,7 +9,6 @@ use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments::is_doc_comment;\n use syntax::with_default_globals;\n \n-use errors::{emitter::EmitterWriter, Handler};\n use std::io;\n use std::path::PathBuf;\n "}, {"sha": "b79e2894126dd8d8954403c7713558f5d36270cb", "filename": "src/librustc_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fparse%2Ftests.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,6 @@\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n-use errors::PResult;\n+use rustc_errors::PResult;\n use rustc_parse::new_parser_from_source_str;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::symbol::{kw, sym, Symbol};"}, {"sha": "cb6249e936976e8ba5399fd256a5ba8c657a22a5", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,15 +1,14 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, FatalError};\n use rustc_span::symbol::sym;\n+use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n-use syntax::errors::{Applicability, FatalError};\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n \n-use rustc_data_structures::sync::Lrc;\n-use rustc_span::{Span, DUMMY_SP};\n-\n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n \n pub struct BangProcMacro {"}, {"sha": "d441613ac58f4f702ab46bd9b8af281fa053de00", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +1,7 @@\n use crate::base::ExtCtxt;\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::Diagnostic;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -11,9 +13,6 @@ use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax::util::comments;\n \n-use errors::Diagnostic;\n-use rustc_data_structures::sync::Lrc;\n-\n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n use std::ops::Bound;\n@@ -265,13 +264,13 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n     }\n }\n \n-impl ToInternal<errors::Level> for Level {\n-    fn to_internal(self) -> errors::Level {\n+impl ToInternal<rustc_errors::Level> for Level {\n+    fn to_internal(self) -> rustc_errors::Level {\n         match self {\n-            Level::Error => errors::Level::Error,\n-            Level::Warning => errors::Level::Warning,\n-            Level::Note => errors::Level::Note,\n-            Level::Help => errors::Level::Help,\n+            Level::Error => rustc_errors::Level::Error,\n+            Level::Warning => rustc_errors::Level::Warning,\n+            Level::Note => rustc_errors::Level::Note,\n+            Level::Help => rustc_errors::Level::Help,\n             _ => unreachable!(\"unknown proc_macro::Level variant: {:?}\", self),\n         }\n     }"}, {"sha": "82ab74ac1500493ee5040cc30d553e08e33e9a3f", "filename": "src/librustc_expand/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Ftests.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,9 +6,9 @@ use syntax::sess::ParseSess;\n use syntax::tokenstream::TokenStream;\n use syntax::with_default_globals;\n \n-use errors::emitter::EmitterWriter;\n-use errors::{Handler, PResult};\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::emitter::EmitterWriter;\n+use rustc_errors::{Handler, PResult};\n \n use std::io;\n use std::io::prelude::*;"}, {"sha": "d3876ecc7c3ada5f15e30e3a20ab04ed3b12e228", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -534,6 +534,9 @@ declare_features! (\n     /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n \n+    /// Allows using `..X`, `..=X`, `...X`, and `X..` as a pattern.\n+    (active, half_open_range_patterns, \"1.41.0\", Some(67264), None),\n+\n     /// Allows using `&mut` in constant functions.\n     (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n "}, {"sha": "550e3654d0800965d890d96ea4850048272c3c9d", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -905,7 +905,7 @@ pub enum PatKind<'hir> {\n     Lit(&'hir Expr<'hir>),\n \n     /// A range pattern (e.g., `1..=2` or `1..2`).\n-    Range(&'hir Expr<'hir>, &'hir Expr<'hir>, RangeEnd),\n+    Range(Option<&'hir Expr<'hir>>, Option<&'hir Expr<'hir>>, RangeEnd),\n \n     /// A slice pattern, `[before_0, ..., before_n, (slice, after_0, ..., after_n)?]`.\n     ///"}, {"sha": "3dbc5253a9abf5ce3fc6b68fb05ce37fce256d50", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -766,8 +766,8 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n         }\n         PatKind::Lit(ref expression) => visitor.visit_expr(expression),\n         PatKind::Range(ref lower_bound, ref upper_bound, _) => {\n-            visitor.visit_expr(lower_bound);\n-            visitor.visit_expr(upper_bound)\n+            walk_list!(visitor, visit_expr, lower_bound);\n+            walk_list!(visitor, visit_expr, upper_bound);\n         }\n         PatKind::Wild => (),\n         PatKind::Slice(prepatterns, ref slice_pattern, postpatterns) => {"}, {"sha": "759f423070aa0b35019e0840b47403f8266f8327", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1767,13 +1767,17 @@ impl<'a> State<'a> {\n             }\n             PatKind::Lit(ref e) => self.print_expr(&e),\n             PatKind::Range(ref begin, ref end, ref end_kind) => {\n-                self.print_expr(&begin);\n-                self.s.space();\n+                if let Some(expr) = begin {\n+                    self.print_expr(expr);\n+                    self.s.space();\n+                }\n                 match *end_kind {\n                     RangeEnd::Included => self.s.word(\"...\"),\n                     RangeEnd::Excluded => self.s.word(\"..\"),\n                 }\n-                self.print_expr(&end);\n+                if let Some(expr) = end {\n+                    self.print_expr(expr);\n+                }\n             }\n             PatKind::Slice(ref before, ref slice, ref after) => {\n                 self.s.word(\"[\");"}, {"sha": "7e23e70577975cdb9e3e90ee0625fad8ac2387ed", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n unicode-security = \"0.0.2\"\n rustc = { path = \"../librustc\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "d8ddf7435b458358e49c55b11d9284b1e364e709", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,9 +2,9 @@ use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_span::symbol::sym;\n-use syntax::errors::Applicability;\n \n declare_lint! {\n     pub ARRAY_INTO_ITER,"}, {"sha": "25f6361e0507d995ee26edfbd60fab582a95f271", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -31,6 +31,7 @@ use rustc::lint::FutureIncompatibleInfo;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Stability;\n use rustc_feature::{deprecated_attributes, AttributeGate, AttributeTemplate, AttributeType};\n use rustc_hir as hir;\n@@ -44,9 +45,7 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, Span};\n use syntax::ast::{self, Expr};\n use syntax::attr::{self, HasAttrs};\n-use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::{self, expr_to_string};\n-use syntax::ptr::P;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::FnKind;\n \n@@ -1309,11 +1308,13 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n \n         /// If `pat` is a `...` pattern, return the start and end of the range, as well as the span\n         /// corresponding to the ellipsis.\n-        fn matches_ellipsis_pat(pat: &ast::Pat) -> Option<(&P<Expr>, &P<Expr>, Span)> {\n+        fn matches_ellipsis_pat(pat: &ast::Pat) -> Option<(Option<&Expr>, &Expr, Span)> {\n             match &pat.kind {\n-                PatKind::Range(a, b, Spanned { span, node: RangeEnd::Included(DotDotDot), .. }) => {\n-                    Some((a, b, *span))\n-                }\n+                PatKind::Range(\n+                    a,\n+                    Some(b),\n+                    Spanned { span, node: RangeEnd::Included(DotDotDot) },\n+                ) => Some((a.as_deref(), b, *span)),\n                 _ => None,\n             }\n         }\n@@ -1328,11 +1329,16 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             let suggestion = \"use `..=` for an inclusive range\";\n             if parenthesise {\n                 self.node_id = Some(pat.id);\n+                let end = expr_to_string(&end);\n+                let replace = match start {\n+                    Some(start) => format!(\"&({}..={})\", expr_to_string(&start), end),\n+                    None => format!(\"&(..={})\", end),\n+                };\n                 let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, msg);\n                 err.span_suggestion(\n                     pat.span,\n                     suggestion,\n-                    format!(\"&({}..={})\", expr_to_string(&start), expr_to_string(&end)),\n+                    replace,\n                     Applicability::MachineApplicable,\n                 );\n                 err.emit();"}, {"sha": "7e5ad0976989ecd765f3138205586e71867449c1", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,6 +2,7 @@ use lint::{EarlyContext, LateContext, LintArray, LintContext};\n use lint::{EarlyLintPass, LateLintPass, LintPass};\n use rustc::lint;\n use rustc::ty;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::FnKind;\n@@ -11,7 +12,6 @@ use rustc_span::{symbol::Ident, BytePos, Span};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::Applicability;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "9fc147f2a0c5afeebd7343f4d223ad5582bd8c49", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,6 @@\n use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc_errors::Applicability;\n use syntax::ast::{ExprKind, Stmt, StmtKind};\n-use syntax::errors::Applicability;\n \n declare_lint! {\n     pub REDUNDANT_SEMICOLON,"}, {"sha": "f128e25f35bf25adc23d645d944c723e04decd92", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,14 +9,14 @@ use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n-use syntax::errors::Applicability;\n use syntax::{ast, attr};\n \n use log::debug;"}, {"sha": "d57f565d919be9341053e476160a9914359edb04", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,17 +5,16 @@ use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{pluralize, Applicability};\n use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::{pluralize, Applicability};\n use syntax::print::pprust;\n use syntax::util::parser;\n "}, {"sha": "48767c377a94c7d40df21dad8e792bd31385504d", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -16,8 +16,8 @@ memmap = \"0.7\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }"}, {"sha": "17c2e3303cb56986bfb5befc70ad9a0785953f43", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -12,25 +12,23 @@ use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n+use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n-use rustc_target::spec::{PanicStrategy, TargetTriple};\n-\n-use std::path::Path;\n-use std::{cmp, fs};\n-\n-use errors::struct_span_err;\n-use log::{debug, info, log_enabled};\n-use proc_macro::bridge::client::ProcMacro;\n-use rustc_expand::base::SyntaxExtension;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::spec::{PanicStrategy, TargetTriple};\n use syntax::ast;\n use syntax::attr;\n use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n \n-use rustc_error_codes::*;\n+use log::{debug, info, log_enabled};\n+use proc_macro::bridge::client::ProcMacro;\n+use std::path::Path;\n+use std::{cmp, fs};\n \n #[derive(Clone)]\n pub struct CStore {"}, {"sha": "4745ad02a3aa4adcb10b0db6f3a8d7362e815a93", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -215,14 +215,14 @@\n use crate::creader::Library;\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::middle::cstore::{CrateSource, MetadataLoader};\n use rustc::session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n use rustc::session::search_paths::PathKind;\n use rustc::session::{config, CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};"}, {"sha": "ae67efb966c960b36250550c9c2a5929646ca361", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,9 +1,9 @@\n-use errors::struct_span_err;\n use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::source_map::Span;"}, {"sha": "dc63fa80275e1994d242d35b121bc562092f9074", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,13 +6,12 @@ use rustc::infer::{\n };\n use rustc::mir::{Body, ConstraintCategory, Location};\n use rustc::ty::{self, RegionVid, Ty};\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n use std::collections::VecDeque;\n-use syntax::errors::Applicability;\n \n use crate::util::borrowck_errors;\n "}, {"sha": "2598ce2391fb326bc97c0de25759025b5d9abf1b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 94, "deletions": 68, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -429,14 +429,87 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> (PatKind<'tcx>, Option<Ascription<'tcx>>) {\n         match self.lower_lit(expr) {\n-            PatKind::AscribeUserType {\n-                ascription: lo_ascription,\n-                subpattern: Pat { kind: box kind, .. },\n-            } => (kind, Some(lo_ascription)),\n+            PatKind::AscribeUserType { ascription, subpattern: Pat { kind: box kind, .. } } => {\n+                (kind, Some(ascription))\n+            }\n             kind => (kind, None),\n         }\n     }\n \n+    fn lower_pattern_range(\n+        &mut self,\n+        ty: Ty<'tcx>,\n+        lo: &'tcx ty::Const<'tcx>,\n+        hi: &'tcx ty::Const<'tcx>,\n+        end: RangeEnd,\n+        span: Span,\n+    ) -> PatKind<'tcx> {\n+        assert_eq!(lo.ty, ty);\n+        assert_eq!(hi.ty, ty);\n+        let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env, ty);\n+        match (end, cmp) {\n+            // `x..y` where `x < y`.\n+            // Non-empty because the range includes at least `x`.\n+            (RangeEnd::Excluded, Some(Ordering::Less)) => PatKind::Range(PatRange { lo, hi, end }),\n+            // `x..y` where `x >= y`. The range is empty => error.\n+            (RangeEnd::Excluded, _) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0579,\n+                    \"lower range bound must be less than upper\"\n+                )\n+                .emit();\n+                PatKind::Wild\n+            }\n+            // `x..=y` where `x == y`.\n+            (RangeEnd::Included, Some(Ordering::Equal)) => PatKind::Constant { value: lo },\n+            // `x..=y` where `x < y`.\n+            (RangeEnd::Included, Some(Ordering::Less)) => PatKind::Range(PatRange { lo, hi, end }),\n+            // `x..=y` where `x > y` hence the range is empty => error.\n+            (RangeEnd::Included, _) => {\n+                let mut err = struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0030,\n+                    \"lower range bound must be less than or equal to upper\"\n+                );\n+                err.span_label(span, \"lower bound larger than upper bound\");\n+                if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                    err.note(\n+                        \"When matching against a range, the compiler \\\n+                              verifies that the range is non-empty. Range \\\n+                              patterns include both end-points, so this is \\\n+                              equivalent to requiring the start of the range \\\n+                              to be less than or equal to the end of the range.\",\n+                    );\n+                }\n+                err.emit();\n+                PatKind::Wild\n+            }\n+        }\n+    }\n+\n+    fn normalize_range_pattern_ends(\n+        &self,\n+        ty: Ty<'tcx>,\n+        lo: Option<&PatKind<'tcx>>,\n+        hi: Option<&PatKind<'tcx>>,\n+    ) -> Option<(&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>)> {\n+        match (lo, hi) {\n+            (Some(PatKind::Constant { value: lo }), Some(PatKind::Constant { value: hi })) => {\n+                Some((lo, hi))\n+            }\n+            (Some(PatKind::Constant { value: lo }), None) => {\n+                Some((lo, ty.numeric_max_val(self.tcx)?))\n+            }\n+            (None, Some(PatKind::Constant { value: hi })) => {\n+                Some((ty.numeric_min_val(self.tcx)?, hi))\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Pat<'tcx> {\n         let mut ty = self.tables.node_type(pat.hir_id);\n \n@@ -451,78 +524,31 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             hir::PatKind::Lit(ref value) => self.lower_lit(value),\n \n             hir::PatKind::Range(ref lo_expr, ref hi_expr, end) => {\n-                let (lo, lo_ascription) = self.lower_range_expr(lo_expr);\n-                let (hi, hi_ascription) = self.lower_range_expr(hi_expr);\n-\n-                let mut kind = match (lo, hi) {\n-                    (PatKind::Constant { value: lo }, PatKind::Constant { value: hi }) => {\n-                        assert_eq!(lo.ty, ty);\n-                        assert_eq!(hi.ty, ty);\n-                        let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env, ty);\n-                        match (end, cmp) {\n-                            (RangeEnd::Excluded, Some(Ordering::Less)) => {\n-                                PatKind::Range(PatRange { lo, hi, end })\n-                            }\n-                            (RangeEnd::Excluded, _) => {\n-                                struct_span_err!(\n-                                    self.tcx.sess,\n-                                    lo_expr.span,\n-                                    E0579,\n-                                    \"lower range bound must be less than upper\",\n-                                )\n-                                .emit();\n-                                PatKind::Wild\n-                            }\n-                            (RangeEnd::Included, Some(Ordering::Equal)) => {\n-                                PatKind::Constant { value: lo }\n-                            }\n-                            (RangeEnd::Included, Some(Ordering::Less)) => {\n-                                PatKind::Range(PatRange { lo, hi, end })\n-                            }\n-                            (RangeEnd::Included, _) => {\n-                                let mut err = struct_span_err!(\n-                                    self.tcx.sess,\n-                                    lo_expr.span,\n-                                    E0030,\n-                                    \"lower range bound must be less than or equal to upper\"\n-                                );\n-                                err.span_label(lo_expr.span, \"lower bound larger than upper bound\");\n-                                if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                                    err.note(\n-                                        \"When matching against a range, the compiler \\\n-                                              verifies that the range is non-empty. Range \\\n-                                              patterns include both end-points, so this is \\\n-                                              equivalent to requiring the start of the range \\\n-                                              to be less than or equal to the end of the range.\",\n-                                    );\n-                                }\n-                                err.emit();\n-                                PatKind::Wild\n-                            }\n-                        }\n-                    }\n-                    ref pats => {\n-                        self.tcx.sess.delay_span_bug(\n-                            pat.span,\n-                            &format!(\n-                                \"found bad range pattern `{:?}` outside of error recovery\",\n-                                pats,\n-                            ),\n+                let (lo_expr, hi_expr) = (lo_expr.as_deref(), hi_expr.as_deref());\n+                let lo_span = lo_expr.map_or(pat.span, |e| e.span);\n+                let lo = lo_expr.map(|e| self.lower_range_expr(e));\n+                let hi = hi_expr.map(|e| self.lower_range_expr(e));\n+\n+                let (lp, hp) = (lo.as_ref().map(|x| &x.0), hi.as_ref().map(|x| &x.0));\n+                let mut kind = match self.normalize_range_pattern_ends(ty, lp, hp) {\n+                    Some((lc, hc)) => self.lower_pattern_range(ty, lc, hc, end, lo_span),\n+                    None => {\n+                        let msg = &format!(\n+                            \"found bad range pattern `{:?}` outside of error recovery\",\n+                            (&lo, &hi),\n                         );\n-\n+                        self.tcx.sess.delay_span_bug(pat.span, msg);\n                         PatKind::Wild\n                     }\n                 };\n \n                 // If we are handling a range with associated constants (e.g.\n                 // `Foo::<'a>::A..=Foo::B`), we need to put the ascriptions for the associated\n                 // constants somewhere. Have them on the range pattern.\n-                for ascription in &[lo_ascription, hi_ascription] {\n-                    if let Some(ascription) = ascription {\n-                        kind = PatKind::AscribeUserType {\n-                            ascription: *ascription,\n-                            subpattern: Pat { span: pat.span, ty, kind: Box::new(kind) },\n-                        };\n+                for end in &[lo, hi] {\n+                    if let Some((_, Some(ascription))) = end {\n+                        let subpattern = Pat { span: pat.span, ty, kind: Box::new(kind) };\n+                        kind = PatKind::AscribeUserType { ascription: *ascription, subpattern };\n                     }\n                 }\n "}, {"sha": "88762dabd8a290610742fa8f3b0341e4a512f406", "filename": "src/librustc_parse/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funescape_error_reporting.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,11 +3,10 @@\n use std::iter::once;\n use std::ops::Range;\n \n+use rustc_errors::{Applicability, Handler};\n use rustc_lexer::unescape::{EscapeError, Mode};\n use rustc_span::{BytePos, Span};\n \n-use syntax::errors::{Applicability, Handler};\n-\n pub(crate) fn emit_unescape_error(\n     handler: &Handler,\n     // interior part of the literal, without quotes"}, {"sha": "d321383424cabc85a87b6dd10c28deeaa842860c", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -51,7 +51,6 @@ pub enum Error {\n         secondary_path: String,\n     },\n     UselessDocComment,\n-    InclusiveRangeWithNoEnd,\n }\n \n impl Error {\n@@ -102,11 +101,6 @@ impl Error {\n                 );\n                 err\n             }\n-            Error::InclusiveRangeWithNoEnd => {\n-                let mut err = struct_span_err!(handler, sp, E0586, \"inclusive range with no end\",);\n-                err.help(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\");\n-                err\n-            }\n         }\n     }\n }"}, {"sha": "2d6a94ce620cfd9fb51e0b26677af7c451925f12", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,3 @@\n-use super::diagnostics::Error;\n use super::pat::{GateOr, PARAM_EXPECTED};\n use super::{BlockMode, Parser, PathStyle, PrevTokenKind, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n@@ -1967,7 +1966,8 @@ impl<'a> Parser<'a> {\n         limits: RangeLimits,\n     ) -> PResult<'a, ExprKind> {\n         if end.is_none() && limits == RangeLimits::Closed {\n-            Err(self.span_fatal_err(self.token.span, Error::InclusiveRangeWithNoEnd))\n+            self.error_inclusive_range_with_no_end(self.token.span);\n+            Ok(ExprKind::Err)\n         } else {\n             Ok(ExprKind::Range(start, end, limits))\n         }"}, {"sha": "50756ddec9f2d950db9369839b01d58add296295", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 132, "deletions": 187, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,6 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n-use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym};\n use syntax::ast::{self, AttrVec, Attribute, FieldPat, Mac, Pat, PatKind, RangeEnd, RangeSyntax};\n@@ -281,91 +281,73 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtPat, |x| x);\n \n         let lo = self.token.span;\n-        let pat = match self.token.kind {\n-            token::BinOp(token::And) | token::AndAnd => self.parse_pat_deref(expected)?,\n-            token::OpenDelim(token::Paren) => self.parse_pat_tuple_or_parens()?,\n-            token::OpenDelim(token::Bracket) => {\n-                // Parse `[pat, pat,...]` as a slice pattern.\n-                let (pats, _) =\n-                    self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat_with_or_inner())?;\n-                PatKind::Slice(pats)\n-            }\n-            token::DotDot => {\n-                self.bump();\n-                if self.is_pat_range_end_start() {\n-                    // Parse `..42` for recovery.\n-                    self.parse_pat_range_to(RangeEnd::Excluded, \"..\")?\n-                } else {\n-                    // A rest pattern `..`.\n-                    PatKind::Rest\n-                }\n-            }\n-            token::DotDotEq => {\n-                // Parse `..=42` for recovery.\n-                self.bump();\n-                self.parse_pat_range_to(RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\")?\n-            }\n-            token::DotDotDot => {\n-                // Parse `...42` for recovery.\n-                self.bump();\n-                self.parse_pat_range_to(RangeEnd::Included(RangeSyntax::DotDotDot), \"...\")?\n+\n+        let pat = if self.check(&token::BinOp(token::And)) || self.token.kind == token::AndAnd {\n+            self.parse_pat_deref(expected)?\n+        } else if self.check(&token::OpenDelim(token::Paren)) {\n+            self.parse_pat_tuple_or_parens()?\n+        } else if self.check(&token::OpenDelim(token::Bracket)) {\n+            // Parse `[pat, pat,...]` as a slice pattern.\n+            let (pats, _) =\n+                self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat_with_or_inner())?;\n+            PatKind::Slice(pats)\n+        } else if self.check(&token::DotDot) && !self.is_pat_range_end_start(1) {\n+            // A rest pattern `..`.\n+            self.bump(); // `..`\n+            PatKind::Rest\n+        } else if let Some(form) = self.parse_range_end() {\n+            self.parse_pat_range_to(form)? // `..=X`, `...X`, or `..X`.\n+        } else if self.eat_keyword(kw::Underscore) {\n+            // Parse _\n+            PatKind::Wild\n+        } else if self.eat_keyword(kw::Mut) {\n+            self.parse_pat_ident_mut()?\n+        } else if self.eat_keyword(kw::Ref) {\n+            // Parse ref ident @ pat / ref mut ident @ pat\n+            let mutbl = self.parse_mutability();\n+            self.parse_pat_ident(BindingMode::ByRef(mutbl))?\n+        } else if self.eat_keyword(kw::Box) {\n+            // Parse `box pat`\n+            let pat = self.parse_pat_with_range_pat(false, None)?;\n+            self.sess.gated_spans.gate(sym::box_patterns, lo.to(self.prev_span));\n+            PatKind::Box(pat)\n+        } else if self.can_be_ident_pat() {\n+            // Parse `ident @ pat`\n+            // This can give false positives and parse nullary enums,\n+            // they are dealt with later in resolve.\n+            self.parse_pat_ident(BindingMode::ByValue(Mutability::Not))?\n+        } else if self.is_start_of_pat_with_path() {\n+            // Parse pattern starting with a path\n+            let (qself, path) = if self.eat_lt() {\n+                // Parse a qualified path\n+                let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n+                (Some(qself), path)\n+            } else {\n+                // Parse an unqualified path\n+                (None, self.parse_path(PathStyle::Expr)?)\n+            };\n+            let span = lo.to(self.prev_span);\n+\n+            if qself.is_none() && self.check(&token::Not) {\n+                self.parse_pat_mac_invoc(path)?\n+            } else if let Some(form) = self.parse_range_end() {\n+                let begin = self.mk_expr(span, ExprKind::Path(qself, path), AttrVec::new());\n+                self.parse_pat_range_begin_with(begin, form)?\n+            } else if self.check(&token::OpenDelim(token::Brace)) {\n+                self.parse_pat_struct(qself, path)?\n+            } else if self.check(&token::OpenDelim(token::Paren)) {\n+                self.parse_pat_tuple_struct(qself, path)?\n+            } else {\n+                PatKind::Path(qself, path)\n             }\n-            // At this point, token != `&`, `&&`, `(`, `[`, `..`, `..=`, or `...`.\n-            _ => {\n-                if self.eat_keyword(kw::Underscore) {\n-                    // Parse _\n-                    PatKind::Wild\n-                } else if self.eat_keyword(kw::Mut) {\n-                    self.parse_pat_ident_mut()?\n-                } else if self.eat_keyword(kw::Ref) {\n-                    // Parse ref ident @ pat / ref mut ident @ pat\n-                    let mutbl = self.parse_mutability();\n-                    self.parse_pat_ident(BindingMode::ByRef(mutbl))?\n-                } else if self.eat_keyword(kw::Box) {\n-                    // Parse `box pat`\n-                    let pat = self.parse_pat_with_range_pat(false, None)?;\n-                    self.sess.gated_spans.gate(sym::box_patterns, lo.to(self.prev_span));\n-                    PatKind::Box(pat)\n-                } else if self.can_be_ident_pat() {\n-                    // Parse `ident @ pat`\n-                    // This can give false positives and parse nullary enums,\n-                    // they are dealt with later in resolve.\n-                    self.parse_pat_ident(BindingMode::ByValue(Mutability::Not))?\n-                } else if self.is_start_of_pat_with_path() {\n-                    // Parse pattern starting with a path\n-                    let (qself, path) = if self.eat_lt() {\n-                        // Parse a qualified path\n-                        let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n-                        (Some(qself), path)\n-                    } else {\n-                        // Parse an unqualified path\n-                        (None, self.parse_path(PathStyle::Expr)?)\n-                    };\n-                    match self.token.kind {\n-                        token::Not if qself.is_none() => self.parse_pat_mac_invoc(path)?,\n-                        token::DotDotDot | token::DotDotEq | token::DotDot => {\n-                            self.parse_pat_range_starting_with_path(lo, qself, path)?\n-                        }\n-                        token::OpenDelim(token::Brace) => self.parse_pat_struct(qself, path)?,\n-                        token::OpenDelim(token::Paren) => {\n-                            self.parse_pat_tuple_struct(qself, path)?\n-                        }\n-                        _ => PatKind::Path(qself, path),\n-                    }\n-                } else {\n-                    // Try to parse everything else as literal with optional minus\n-                    match self.parse_literal_maybe_minus() {\n-                        Ok(begin)\n-                            if self.check(&token::DotDot)\n-                                || self.check(&token::DotDotEq)\n-                                || self.check(&token::DotDotDot) =>\n-                        {\n-                            self.parse_pat_range_starting_with_lit(begin)?\n-                        }\n-                        Ok(begin) => PatKind::Lit(begin),\n-                        Err(err) => return self.fatal_unexpected_non_pat(err, expected),\n-                    }\n-                }\n+        } else {\n+            // Try to parse everything else as literal with optional minus\n+            match self.parse_literal_maybe_minus() {\n+                Ok(begin) => match self.parse_range_end() {\n+                    Some(form) => self.parse_pat_range_begin_with(begin, form)?,\n+                    None => PatKind::Lit(begin),\n+                },\n+                Err(err) => return self.fatal_unexpected_non_pat(err, expected),\n             }\n         };\n \n@@ -374,7 +356,7 @@ impl<'a> Parser<'a> {\n         let pat = self.recover_intersection_pat(pat)?;\n \n         if !allow_range_pat {\n-            self.ban_pat_range_if_ambiguous(&pat)?\n+            self.ban_pat_range_if_ambiguous(&pat)\n         }\n \n         Ok(pat)\n@@ -441,26 +423,25 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Ban a range pattern if it has an ambiguous interpretation.\n-    fn ban_pat_range_if_ambiguous(&self, pat: &Pat) -> PResult<'a, ()> {\n+    fn ban_pat_range_if_ambiguous(&self, pat: &Pat) {\n         match pat.kind {\n             PatKind::Range(\n                 ..,\n                 Spanned { node: RangeEnd::Included(RangeSyntax::DotDotDot), .. },\n-            ) => return Ok(()),\n+            ) => return,\n             PatKind::Range(..) => {}\n-            _ => return Ok(()),\n+            _ => return,\n         }\n \n-        let mut err =\n-            self.struct_span_err(pat.span, \"the range pattern here has ambiguous interpretation\");\n-        err.span_suggestion(\n-            pat.span,\n-            \"add parentheses to clarify the precedence\",\n-            format!(\"({})\", pprust::pat_to_string(&pat)),\n-            // \"ambiguous interpretation\" implies that we have to be guessing\n-            Applicability::MaybeIncorrect,\n-        );\n-        Err(err)\n+        self.struct_span_err(pat.span, \"the range pattern here has ambiguous interpretation\")\n+            .span_suggestion(\n+                pat.span,\n+                \"add parentheses to clarify the precedence\",\n+                format!(\"({})\", pprust::pat_to_string(&pat)),\n+                // \"ambiguous interpretation\" implies that we have to be guessing\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n     }\n \n     /// Parse `&pat` / `&mut pat`.\n@@ -618,51 +599,6 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Mac(mac))\n     }\n \n-    fn excluded_range_end(&self, span: Span) -> RangeEnd {\n-        self.sess.gated_spans.gate(sym::exclusive_range_pattern, span);\n-        RangeEnd::Excluded\n-    }\n-\n-    /// Parse a range pattern `$path $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n-    /// The `$path` has already been parsed and the next token is the `$form`.\n-    fn parse_pat_range_starting_with_path(\n-        &mut self,\n-        lo: Span,\n-        qself: Option<QSelf>,\n-        path: Path,\n-    ) -> PResult<'a, PatKind> {\n-        let (end_kind, form) = match self.token.kind {\n-            token::DotDot => (self.excluded_range_end(self.token.span), \"..\"),\n-            token::DotDotDot => (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\"),\n-            token::DotDotEq => (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\"),\n-            _ => panic!(\"can only parse `..`/`...`/`..=` for ranges (checked above)\"),\n-        };\n-        let op_span = self.token.span;\n-        // Parse range\n-        let span = lo.to(self.prev_span);\n-        let begin = self.mk_expr(span, ExprKind::Path(qself, path), AttrVec::new());\n-        self.bump();\n-        let end = self.parse_pat_range_end_opt(&begin, form)?;\n-        Ok(PatKind::Range(begin, end, respan(op_span, end_kind)))\n-    }\n-\n-    /// Parse a range pattern `$literal $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n-    /// The `$path` has already been parsed and the next token is the `$form`.\n-    fn parse_pat_range_starting_with_lit(&mut self, begin: P<Expr>) -> PResult<'a, PatKind> {\n-        let op_span = self.token.span;\n-        let (end_kind, form) = if self.eat(&token::DotDotDot) {\n-            (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\")\n-        } else if self.eat(&token::DotDotEq) {\n-            (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\")\n-        } else if self.eat(&token::DotDot) {\n-            (self.excluded_range_end(op_span), \"..\")\n-        } else {\n-            panic!(\"impossible case: we already matched on a range-operator token\")\n-        };\n-        let end = self.parse_pat_range_end_opt(&begin, form)?;\n-        Ok(PatKind::Range(begin, end, respan(op_span, end_kind)))\n-    }\n-\n     fn fatal_unexpected_non_pat(\n         &mut self,\n         mut err: DiagnosticBuilder<'a>,\n@@ -684,57 +620,66 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n-    /// Is the current token suitable as the start of a range patterns end?\n-    fn is_pat_range_end_start(&self) -> bool {\n-        self.token.is_path_start() // e.g. `MY_CONST`;\n-            || self.token == token::Dot // e.g. `.5` for recovery;\n-            || self.token.can_begin_literal_or_bool() // e.g. `42`.\n-            || self.token.is_whole_expr()\n-    }\n-\n-    /// Parse a range-to pattern, e.g. `..X` and `..=X` for recovery.\n-    fn parse_pat_range_to(&mut self, re: RangeEnd, form: &str) -> PResult<'a, PatKind> {\n-        let lo = self.prev_span;\n-        let end = self.parse_pat_range_end()?;\n-        let range_span = lo.to(end.span);\n-        let begin = self.mk_expr(range_span, ExprKind::Err, AttrVec::new());\n-\n-        self.struct_span_err(range_span, &format!(\"`{}X` range patterns are not supported\", form))\n-            .span_suggestion(\n-                range_span,\n-                \"try using the minimum value for the type\",\n-                format!(\"MIN{}{}\", form, pprust::expr_to_string(&end)),\n-                Applicability::HasPlaceholders,\n-            )\n-            .emit();\n-\n-        Ok(PatKind::Range(begin, end, respan(lo, re)))\n+    /// Parses the range pattern end form `\"..\" | \"...\" | \"..=\" ;`.\n+    fn parse_range_end(&mut self) -> Option<Spanned<RangeEnd>> {\n+        let re = if self.eat(&token::DotDotDot) {\n+            RangeEnd::Included(RangeSyntax::DotDotDot)\n+        } else if self.eat(&token::DotDotEq) {\n+            RangeEnd::Included(RangeSyntax::DotDotEq)\n+        } else if self.eat(&token::DotDot) {\n+            self.sess.gated_spans.gate(sym::exclusive_range_pattern, self.prev_span);\n+            RangeEnd::Excluded\n+        } else {\n+            return None;\n+        };\n+        Some(respan(self.prev_span, re))\n     }\n \n-    /// Parse the end of a `X..Y`, `X..=Y`, or `X...Y` range pattern  or recover\n-    /// if that end is missing treating it as `X..`, `X..=`, or `X...` respectively.\n-    fn parse_pat_range_end_opt(&mut self, begin: &Expr, form: &str) -> PResult<'a, P<Expr>> {\n-        if self.is_pat_range_end_start() {\n+    /// Parse a range pattern `$begin $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n+    /// `$begin $form` has already been parsed.\n+    fn parse_pat_range_begin_with(\n+        &mut self,\n+        begin: P<Expr>,\n+        re: Spanned<RangeEnd>,\n+    ) -> PResult<'a, PatKind> {\n+        let end = if self.is_pat_range_end_start(0) {\n             // Parsing e.g. `X..=Y`.\n-            self.parse_pat_range_end()\n+            Some(self.parse_pat_range_end()?)\n         } else {\n             // Parsing e.g. `X..`.\n-            let range_span = begin.span.to(self.prev_span);\n+            self.sess.gated_spans.gate(sym::half_open_range_patterns, begin.span.to(re.span));\n+            if let RangeEnd::Included(_) = re.node {\n+                // FIXME(Centril): Consider semantic errors instead in `ast_validation`.\n+                // Possibly also do this for `X..=` in *expression* contexts.\n+                self.error_inclusive_range_with_no_end(re.span);\n+            }\n+            None\n+        };\n+        Ok(PatKind::Range(Some(begin), end, re))\n+    }\n \n-            self.struct_span_err(\n-                range_span,\n-                &format!(\"`X{}` range patterns are not supported\", form),\n-            )\n-            .span_suggestion(\n-                range_span,\n-                \"try using the maximum value for the type\",\n-                format!(\"{}{}MAX\", pprust::expr_to_string(&begin), form),\n-                Applicability::HasPlaceholders,\n-            )\n+    pub(super) fn error_inclusive_range_with_no_end(&self, span: Span) {\n+        use rustc_error_codes::E0586;\n+        struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n+            .help(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\")\n             .emit();\n+    }\n \n-            Ok(self.mk_expr(range_span, ExprKind::Err, AttrVec::new()))\n-        }\n+    /// Parse a range-to pattern, e.g. `..X` and `..=X` where `X` remains to be parsed.\n+    fn parse_pat_range_to(&mut self, re: Spanned<RangeEnd>) -> PResult<'a, PatKind> {\n+        let end = self.parse_pat_range_end()?;\n+        self.sess.gated_spans.gate(sym::half_open_range_patterns, re.span.to(self.prev_span));\n+        Ok(PatKind::Range(None, Some(end), re))\n+    }\n+\n+    /// Is the token `dist` away from the current suitable as the start of a range patterns end?\n+    fn is_pat_range_end_start(&self, dist: usize) -> bool {\n+        self.look_ahead(dist, |t| {\n+            t.is_path_start() // e.g. `MY_CONST`;\n+                || t.kind == token::Dot // e.g. `.5` for recovery;\n+                || t.can_begin_literal_or_bool() // e.g. `42`.\n+                || t.is_whole_expr()\n+        })\n     }\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {"}, {"sha": "4adc6dabb9fdbaf7a403452ce0caff637b2ff129", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -12,12 +12,12 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n rustc_span = { path = \"../librustc_span\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "be58a790fa8786c5084ce2029b9b0c1d7f3785fa", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,10 +6,10 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n-use errors::{struct_span_err, Applicability, FatalError};\n use rustc::lint;\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{struct_span_err, Applicability, FatalError};\n use rustc_parse::validate_attr;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -158,7 +158,7 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn err_handler(&self) -> &errors::Handler {\n+    fn err_handler(&self) -> &rustc_errors::Handler {\n         &self.session.diagnostic()\n     }\n \n@@ -409,7 +409,7 @@ enum GenericPosition {\n \n fn validate_generics_order<'a>(\n     sess: &Session,\n-    handler: &errors::Handler,\n+    handler: &rustc_errors::Handler,\n     generics: impl Iterator<Item = (ParamKindOrd, Option<&'a [GenericBound]>, Span, Option<String>)>,\n     pos: GenericPosition,\n     span: Span,\n@@ -920,8 +920,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_expr_within_pat(expr, false);\n             }\n             PatKind::Range(ref start, ref end, _) => {\n-                self.check_expr_within_pat(start, true);\n-                self.check_expr_within_pat(end, true);\n+                if let Some(expr) = start {\n+                    self.check_expr_within_pat(expr, true);\n+                }\n+                if let Some(expr) = end {\n+                    self.check_expr_within_pat(expr, true);\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "a2944918a4748fca3e4a696d34b6cd6e672d48f0", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,12 +7,12 @@\n //! errors. We still look for those primitives in the MIR const-checker to ensure nothing slips\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::session::config::nightly_options;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "028d7c662758a4adf87b3dd69c2e94d8851e7fd4", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,9 +1,9 @@\n-use errors::struct_span_err;\n use rustc::hir::map as hir_map;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};"}, {"sha": "2c26707a518508da0e5bee0e374855f9f302f8e8", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,8 +1,8 @@\n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;"}, {"sha": "8ae729128978655b9268599607bc97a8960b800d", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,11 +4,11 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::Symbol;"}, {"sha": "0426f3fbea23600133eac6fa68623a9a4f4cf1b9", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -96,12 +96,12 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use errors::Applicability;\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n@@ -1064,7 +1064,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             .sess\n                             .struct_span_err(expr.span, \"`break` to unknown label\")\n                             .emit();\n-                        errors::FatalError.raise()\n+                        rustc_errors::FatalError.raise()\n                     }\n                 }\n             }"}, {"sha": "5ad5795c777d48bee1c011cc0abacfd4d7b9a369", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,10 +2,10 @@ use Context::*;\n \n use rustc::session::Session;\n \n-use errors::{struct_span_err, Applicability};\n use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};"}, {"sha": "588386e6f8d6912e4d10e8794c4b08778e42ca04", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,7 +1,6 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use errors::struct_span_err;\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n@@ -11,6 +10,7 @@ use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};"}, {"sha": "af37e7b5b76ac5132918f256ba415cc0d2197a42", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -14,16 +14,16 @@ doctest = false\n bitflags = \"1.2.1\"\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n-rustc_expand = { path = \"../librustc_expand\" }\n arena = { path = \"../libarena\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_ast_lowering = { path = \"../librustc_ast_lowering\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_expand = { path = \"../librustc_expand\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_span = { path = \"../librustc_span\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "291386413d647e898ac38a7210c63ed67d5486c0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -20,18 +20,14 @@ use rustc::bug;\n use rustc::hir::exports::Export;\n use rustc::middle::cstore::CrateStore;\n use rustc::ty;\n-use rustc_hir::def::{self, *};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_metadata::creader::LoadedMacro;\n-\n use rustc_data_structures::sync::Lrc;\n-use std::cell::Cell;\n-use std::ptr;\n-\n-use errors::{struct_span_err, Applicability};\n-\n+use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n+use rustc_hir::def::{self, *};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_metadata::creader::LoadedMacro;\n use rustc_span::hygiene::{ExpnId, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym};\n@@ -44,8 +40,8 @@ use syntax::token::{self, Token};\n use syntax::visit::{self, Visitor};\n \n use log::debug;\n-\n-use rustc_error_codes::*;\n+use std::cell::Cell;\n+use std::ptr;\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "d6f365fce7929339c20715a12ffdd514d973acb4", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -26,9 +26,9 @@\n use crate::imports::ImportDirectiveSubclass;\n use crate::Resolver;\n \n-use errors::pluralize;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::pluralize;\n use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;"}, {"sha": "994280490938009c65a7ef6799809e2d8a7a903c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,11 +1,11 @@\n use std::cmp::Reverse;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use log::debug;\n use rustc::bug;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};"}, {"sha": "813e6ac96911e9c6270017ba2b4016dd0f2dba6c", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -11,7 +11,6 @@ use crate::{BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet, Weak};\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n-use errors::{pluralize, struct_span_err, Applicability};\n use rustc::hir::exports::Export;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n@@ -20,6 +19,7 @@ use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n+use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n use rustc_span::hygiene::ExpnId;"}, {"sha": "defca4944bcd819fac9dbadbf9120b8fbeb36ba9", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -11,10 +11,9 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n-use errors::DiagnosticId;\n-use log::debug;\n use rustc::{bug, lint, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -28,6 +27,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::{self, FnKind, Visitor};\n use syntax::{unwrap_or, walk_list};\n \n+use log::debug;\n use std::collections::BTreeSet;\n use std::mem::replace;\n \n@@ -306,7 +306,7 @@ impl<'a> PathSource<'a> {\n     }\n \n     fn error_code(self, has_unexpected_resolution: bool) -> DiagnosticId {\n-        use errors::error_code;\n+        use rustc_errors::error_code;\n         match (self, has_unexpected_resolution) {\n             (PathSource::Trait(_), true) => error_code!(E0404),\n             (PathSource::Trait(_), false) => error_code!(E0405),"}, {"sha": "151f3e834e5de83c59307d6630a0722b9a3db2e8", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,10 +4,10 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use log::debug;\n use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_error_codes::*;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n@@ -18,7 +18,7 @@ use rustc_span::Span;\n use syntax::ast::{self, Expr, ExprKind, Ident, NodeId, Path, Ty, TyKind};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n-use rustc_error_codes::*;\n+use log::debug;\n \n type Res = def::Res<ast::NodeId>;\n \n@@ -139,7 +139,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n \n         // Emit special messages for unresolved `Self` and `self`.\n         if is_self_type(path, ns) {\n-            err.code(errors::error_code!(E0411));\n+            err.code(rustc_errors::error_code!(E0411));\n             err.span_label(\n                 span,\n                 format!(\"`Self` is only available in impls, traits, and type definitions\"),\n@@ -149,7 +149,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_value(path, ns) {\n             debug!(\"smart_resolve_path_fragment: E0424, source={:?}\", source);\n \n-            err.code(errors::error_code!(E0424));\n+            err.code(rustc_errors::error_code!(E0424));\n             err.span_label(span, match source {\n                 PathSource::Pat => format!(\n                     \"`self` value is a keyword and may not be bound to variables or shadowed\","}, {"sha": "e6be9f6d328c09f93d9a88033d477493b8b80613", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -20,7 +20,6 @@ pub use rustc_hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n use rustc::lint;\n@@ -32,6 +31,7 @@ use rustc::ty::{self, DefIdTree, ResolverOutputs};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PartialRes};"}, {"sha": "d6143eec73c00f3e7d22d16c4443fd4754b1a37d", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,14 +5,14 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};"}, {"sha": "a8b2db300a478c51b2db47ee8fc3e6d13d9c1c5b", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -343,6 +343,7 @@ symbols! {\n         global_allocator,\n         global_asm,\n         globs,\n+        half_open_range_patterns,\n         hash,\n         Hash,\n         HashSet,"}, {"sha": "528ffdf93a01a43ad82822bfa1244a7b61d4eb83", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -805,6 +805,9 @@ pub struct TargetOptions {\n \n     /// Whether or not RelaxElfRelocation flag will be passed to the linker\n     pub relax_elf_relocations: bool,\n+\n+    /// Additional arguments to pass to LLVM, similar to the `-C llvm-args` codegen option.\n+    pub llvm_args: Vec<String>,\n }\n \n impl Default for TargetOptions {\n@@ -893,6 +896,7 @@ impl Default for TargetOptions {\n             target_mcount: \"mcount\".to_string(),\n             llvm_abiname: \"\".to_string(),\n             relax_elf_relocations: false,\n+            llvm_args: vec![],\n         }\n     }\n }\n@@ -1206,6 +1210,7 @@ impl Target {\n         key!(target_mcount);\n         key!(llvm_abiname);\n         key!(relax_elf_relocations, bool);\n+        key!(llvm_args, list);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1433,6 +1438,7 @@ impl ToJson for Target {\n         target_option_val!(target_mcount);\n         target_option_val!(llvm_abiname);\n         target_option_val!(relax_elf_relocations);\n+        target_option_val!(llvm_args);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert("}, {"sha": "84e5f56d9c208456ee22139fc78073a91a8fa71a", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -15,8 +15,8 @@ arena = { path = \"../libarena\" }\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "851c2f76adab7f310d126ac62a7e32cd2925dd55", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,7 +9,6 @@ use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n-use errors::{struct_span_err, Applicability, DiagnosticId};\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n@@ -19,6 +18,7 @@ use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -30,7 +30,6 @@ use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n use syntax::ast;\n-use syntax::errors::pluralize;\n use syntax::feature_gate::feature_err;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -2125,9 +2124,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let msg = format!(\"expected type, found variant `{}`\", assoc_ident);\n                     tcx.sess.span_err(span, &msg);\n                 } else if qself_ty.is_enum() {\n-                    let mut err = tcx.sess.struct_span_err(\n+                    let mut err = struct_span_err!(\n+                        tcx.sess,\n                         assoc_ident.span,\n-                        &format!(\"no variant `{}` in enum `{}`\", assoc_ident, qself_ty),\n+                        E0599,\n+                        \"no variant named `{}` found for enum `{}`\",\n+                        assoc_ident,\n+                        qself_ty,\n                     );\n \n                     let adt_def = qself_ty.ty_adt_def().expect(\"enum is not an ADT\");"}, {"sha": "8d6b74c3015c93772984a84e1e7e0b79d73489db", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,13 +1,13 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n-use errors::struct_span_err;\n use rustc::infer::{InferCtxt, InferOk};\n use rustc::session::DiagnosticMessageId;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc::ty::{self, TraitRef, Ty, TyCtxt};\n use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n \n use rustc_span::Span;"}, {"sha": "bff6765314ab83ea4254d6ab0aadeb93a52391be", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,22 +3,20 @@ use super::method::MethodCallee;\n use super::{Expectation, FnCtxt, Needs, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use hir::def::Res;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::{infer, traits};\n+use rustc_error_codes::*;\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast::Ident;\n \n-use rustc_hir as hir;\n-\n-use rustc_error_codes::*;\n-\n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called)."}, {"sha": "ba5e5fd8ac188dddf73300adb42993d9f649b6d0", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -34,7 +34,6 @@ use crate::hir::def_id::DefId;\n use crate::lint;\n use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n-use errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::traits;\n@@ -45,6 +44,7 @@ use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "feab31523f2659f0128357a3df9b890dbd9d69c4", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -51,7 +51,6 @@\n //! we may want to adjust precisely when coercions occur.\n \n use crate::check::{FnCtxt, Needs};\n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::infer::{Coercion, InferOk, InferResult};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -63,6 +62,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span;"}, {"sha": "c35661ac649fc8e70e2d017c2929fcdf8bb7ac6f", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,3 @@\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc::hir::map::Map;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n@@ -7,6 +6,7 @@ use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::ExplicitSelf;\n use rustc::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc::util::common::ErrorReported;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;"}, {"sha": "e0f9fcc69325c1a91921f69ae40612472ae96e97", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,9 +2,9 @@ use crate::check::FnCtxt;\n use rustc::infer::InferOk;\n use rustc::traits::{self, ObligationCause};\n \n-use errors::{Applicability, DiagnosticBuilder};\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::{self, AssocItem, Ty};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, print, Node};\n use rustc_span::symbol::sym;"}, {"sha": "88e7a265ebbcf52ce1d8f3db502ed6b1a0ced97a", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,7 +2,6 @@ use crate::check::regionck::RegionCtxt;\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::util::common::ErrorReported;\n-use errors::struct_span_err;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{InferOk, SuppressRegionErrors};\n use rustc::middle::region;\n@@ -11,6 +10,7 @@ use rustc::ty::error::TypeError;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::ty::{self, Predicate, Ty, TyCtxt};\n+use rustc_errors::struct_span_err;\n \n use rustc_span::Span;\n "}, {"sha": "35342de59a08254effd5be747367d83b03c02139", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -17,7 +17,6 @@ use crate::check::TupleArgumentsFlag::DontTupleArguments;\n use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n \n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::middle::lang_items;\n@@ -28,6 +27,7 @@ use rustc::ty::Ty;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{AdtKind, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;"}, {"sha": "0441514c83c9d05e28fad6112ec13a7040e1fc99", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,11 +3,11 @@\n \n use crate::require_same_types;\n \n-use errors::struct_span_err;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;"}, {"sha": "711c285d17e88b1f2c6e38f0813bc807169a620d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -12,14 +12,14 @@ pub use self::MethodError::*;\n \n use crate::check::FnCtxt;\n use crate::namespace::Namespace;\n-use errors::{Applicability, DiagnosticBuilder};\n use rustc::infer::{self, InferOk};\n use rustc::traits;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::def_id::DefId;"}, {"sha": "b2542cc27a55119831ad054554313e39a0027f3f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,7 +9,6 @@ use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n use crate::namespace::Namespace;\n \n-use errors::struct_span_err;\n use rustc::infer::canonical::OriginalQueryValues;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -29,6 +28,7 @@ use rustc::ty::{\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use std::cmp::max;"}, {"sha": "b84e1d37b06ff489a674693bc970dcfc4755fa66", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,14 +4,14 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::map as hir_map;\n use rustc::hir::map::Map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -360,10 +360,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             tcx.sess,\n                             span,\n                             E0599,\n-                            \"no {} named `{}` found for type `{}` in the current scope\",\n+                            \"no {} named `{}` found for {} `{}` in the current scope\",\n                             item_kind,\n                             item_name,\n-                            ty_str\n+                            actual.prefix_string(),\n+                            ty_str,\n                         );\n                         if let Some(span) =\n                             tcx.sess.confused_type_with_std_module.borrow().get(&span)"}, {"sha": "32225cd417f2d2494a2427f84319033b2eaa3fca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -90,7 +90,6 @@ pub mod writeback;\n use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n use crate::namespace::Namespace;\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::map::Map;\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n@@ -116,6 +115,7 @@ use rustc::ty::{\n };\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n@@ -164,7 +164,7 @@ macro_rules! type_error_struct {\n         if $typ.references_error() {\n             $session.diagnostic().struct_dummy()\n         } else {\n-            errors::struct_span_err!($session, $span, $code, $($message)*)\n+            rustc_errors::struct_span_err!($session, $span, $code, $($message)*)\n         }\n     })\n }"}, {"sha": "edf9d19dea37785ad58b35e6966d3878d4739dbc", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,11 +2,11 @@\n \n use super::method::MethodCallee;\n use super::{FnCtxt, Needs};\n-use errors::{self, struct_span_err, Applicability};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc_errors::{self, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_span::Span;\n use syntax::ast::Ident;\n@@ -279,7 +279,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             lhs_expr.span,\n                                             msg,\n                                             format!(\"*{}\", lstring),\n-                                            errors::Applicability::MachineApplicable,\n+                                            rustc_errors::Applicability::MachineApplicable,\n                                         );\n                                         suggested_deref = true;\n                                     }\n@@ -482,7 +482,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// suggest calling the function. Returns wether a suggestion was given.\n     fn add_type_neq_err_label(\n         &self,\n-        err: &mut errors::DiagnosticBuilder<'_>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n         span: Span,\n         ty: Ty<'tcx>,\n         other_ty: Ty<'tcx>,\n@@ -565,7 +565,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rhs_expr: &'tcx hir::Expr<'tcx>,\n         lhs_ty: Ty<'tcx>,\n         rhs_ty: Ty<'tcx>,\n-        err: &mut errors::DiagnosticBuilder<'_>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n         is_assign: bool,\n         op: hir::BinOp,\n     ) -> bool {"}, {"sha": "1478b35a25ddc8785ff54d8f1b576ee4a5772e75", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 56, "deletions": 54, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,11 +1,11 @@\n use crate::check::FnCtxt;\n-use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::infer;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Pattern;\n use rustc::ty::subst::GenericArg;\n use rustc::ty::{self, BindingMode, Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n@@ -135,12 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = match pat.kind {\n             PatKind::Wild => expected,\n             PatKind::Lit(lt) => self.check_pat_lit(pat.span, lt, expected, ti),\n-            PatKind::Range(begin, end, _) => {\n-                match self.check_pat_range(pat.span, begin, end, expected, ti) {\n-                    None => return,\n-                    Some(ty) => ty,\n-                }\n-            }\n+            PatKind::Range(lhs, rhs, _) => self.check_pat_range(pat.span, lhs, rhs, expected, ti),\n             PatKind::Binding(ba, var_id, _, sub) => {\n                 self.check_pat_ident(pat, ba, var_id, sub, expected, def_bm, ti)\n             }\n@@ -395,39 +390,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_range(\n         &self,\n         span: Span,\n-        lhs: &'tcx hir::Expr<'tcx>,\n-        rhs: &'tcx hir::Expr<'tcx>,\n+        lhs: Option<&'tcx hir::Expr<'tcx>>,\n+        rhs: Option<&'tcx hir::Expr<'tcx>>,\n         expected: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n-    ) -> Option<Ty<'tcx>> {\n-        let lhs_ty = self.check_expr(lhs);\n-        let rhs_ty = self.check_expr(rhs);\n-\n-        // Check that both end-points are of numeric or char type.\n-        let numeric_or_char = |ty: Ty<'_>| ty.is_numeric() || ty.is_char() || ty.references_error();\n-        let lhs_fail = !numeric_or_char(lhs_ty);\n-        let rhs_fail = !numeric_or_char(rhs_ty);\n-\n-        if lhs_fail || rhs_fail {\n-            self.emit_err_pat_range(span, lhs.span, rhs.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty);\n-            return None;\n+    ) -> Ty<'tcx> {\n+        let calc_side = |opt_expr: Option<&'tcx hir::Expr<'tcx>>| match opt_expr {\n+            None => (None, None),\n+            Some(expr) => {\n+                let ty = self.check_expr(expr);\n+                // Check that the end-point is of numeric or char type.\n+                let fail = !(ty.is_numeric() || ty.is_char() || ty.references_error());\n+                (Some(ty), Some((fail, ty, expr.span)))\n+            }\n+        };\n+        let (lhs_ty, lhs) = calc_side(lhs);\n+        let (rhs_ty, rhs) = calc_side(rhs);\n+\n+        if let (Some((true, ..)), _) | (_, Some((true, ..))) = (lhs, rhs) {\n+            // There exists a side that didn't meet our criteria that the end-point\n+            // be of a numeric or char type, as checked in `calc_side` above.\n+            self.emit_err_pat_range(span, lhs, rhs);\n+            return self.tcx.types.err;\n         }\n \n-        // Now that we know the types can be unified we find the unified type and use\n-        // it to type the entire expression.\n-        let common_type = self.resolve_vars_if_possible(&lhs_ty);\n+        // Now that we know the types can be unified we find the unified type\n+        // and use it to type the entire expression.\n+        let common_type = self.resolve_vars_if_possible(&lhs_ty.or(rhs_ty).unwrap_or(expected));\n \n         // Subtyping doesn't matter here, as the value is some kind of scalar.\n-        let demand_eqtype = |x_span, y_span, x_ty, y_ty| {\n-            self.demand_eqtype_pat_diag(x_span, expected, x_ty, ti).map(|mut err| {\n-                self.endpoint_has_type(&mut err, y_span, y_ty);\n-                err.emit();\n-            });\n+        let demand_eqtype = |x, y| {\n+            if let Some((_, x_ty, x_span)) = x {\n+                self.demand_eqtype_pat_diag(x_span, expected, x_ty, ti).map(|mut err| {\n+                    if let Some((_, y_ty, y_span)) = y {\n+                        self.endpoint_has_type(&mut err, y_span, y_ty);\n+                    }\n+                    err.emit();\n+                });\n+            }\n         };\n-        demand_eqtype(lhs.span, rhs.span, lhs_ty, rhs_ty);\n-        demand_eqtype(rhs.span, lhs.span, rhs_ty, lhs_ty);\n+        demand_eqtype(lhs, rhs);\n+        demand_eqtype(rhs, lhs);\n \n-        Some(common_type)\n+        common_type\n     }\n \n     fn endpoint_has_type(&self, err: &mut DiagnosticBuilder<'_>, span: Span, ty: Ty<'_>) {\n@@ -439,39 +444,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn emit_err_pat_range(\n         &self,\n         span: Span,\n-        begin_span: Span,\n-        end_span: Span,\n-        lhs_fail: bool,\n-        rhs_fail: bool,\n-        lhs_ty: Ty<'tcx>,\n-        rhs_ty: Ty<'tcx>,\n+        lhs: Option<(bool, Ty<'tcx>, Span)>,\n+        rhs: Option<(bool, Ty<'tcx>, Span)>,\n     ) {\n-        let span = if lhs_fail && rhs_fail {\n-            span\n-        } else if lhs_fail {\n-            begin_span\n-        } else {\n-            end_span\n+        let span = match (lhs, rhs) {\n+            (Some((true, ..)), Some((true, ..))) => span,\n+            (Some((true, _, sp)), _) => sp,\n+            (_, Some((true, _, sp))) => sp,\n+            _ => span_bug!(span, \"emit_err_pat_range: no side failed or exists but still error?\"),\n         };\n-\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n             E0029,\n             \"only char and numeric types are allowed in range patterns\"\n         );\n         let msg = |ty| format!(\"this is of type `{}` but it should be `char` or numeric\", ty);\n-        let mut one_side_err = |first_span, first_ty, second_span, second_ty: Ty<'_>| {\n+        let mut one_side_err = |first_span, first_ty, second: Option<(bool, Ty<'tcx>, Span)>| {\n             err.span_label(first_span, &msg(first_ty));\n-            self.endpoint_has_type(&mut err, second_span, second_ty);\n+            if let Some((_, ty, sp)) = second {\n+                self.endpoint_has_type(&mut err, sp, ty);\n+            }\n         };\n-        if lhs_fail && rhs_fail {\n-            err.span_label(begin_span, &msg(lhs_ty));\n-            err.span_label(end_span, &msg(rhs_ty));\n-        } else if lhs_fail {\n-            one_side_err(begin_span, lhs_ty, end_span, rhs_ty);\n-        } else {\n-            one_side_err(end_span, rhs_ty, begin_span, lhs_ty);\n+        match (lhs, rhs) {\n+            (Some((true, lhs_ty, lhs_sp)), Some((true, rhs_ty, rhs_sp))) => {\n+                err.span_label(lhs_sp, &msg(lhs_ty));\n+                err.span_label(rhs_sp, &msg(rhs_ty));\n+            }\n+            (Some((true, lhs_ty, lhs_sp)), rhs) => one_side_err(lhs_sp, lhs_ty, rhs),\n+            (lhs, Some((true, rhs_ty, rhs_sp))) => one_side_err(rhs_sp, rhs_ty, lhs),\n+            _ => span_bug!(span, \"Impossible, verified above.\"),\n         }\n         if self.tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note("}, {"sha": "df1eecdcfa8c5df8bb47ff025fa082ab16ac11a6", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,13 +1,13 @@\n use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use errors::{struct_span_err, DiagnosticBuilder};\n use rustc::infer::opaque_types::may_define_opaque_type;\n use rustc::middle::lang_items;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;\n use rustc_span::symbol::sym;"}, {"sha": "ec098c1d89679c9ec1456c359fd6c45f60e140cf", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,15 +1,13 @@\n use crate::lint;\n use rustc::ty::TyCtxt;\n-\n-use errors::Applicability;\n-use rustc_span::Span;\n-use syntax::ast;\n-\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::visibility_qualified;\n+use rustc_span::Span;\n+use syntax::ast;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();"}, {"sha": "8b3db15c02b4ecd18337b651dacb9bacb4ae26b9", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,7 +1,6 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n-use errors::struct_span_err;\n use rustc::infer;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::SuppressRegionErrors;\n@@ -14,6 +13,7 @@ use rustc::ty::adjustment::CoerceUnsizedInfo;\n use rustc::ty::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::ItemKind;"}, {"sha": "673c1bd9fd83103ec99bfa9d65adc420b2eb29ee", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,8 +7,8 @@\n //! `tcx.inherent_impls(def_id)`). That value, however,\n //! is computed by selecting an idea from this table.\n \n-use errors::struct_span_err;\n use rustc::ty::{self, CrateInherentImpls, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "a9228c7f6bb4c86dc655dbbce9e8c2020f44de3e", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,7 +1,7 @@\n use crate::namespace::Namespace;\n-use errors::struct_span_err;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "fd685e77b418ccc09543a761f73638c3f7f48b1a", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,14 +5,13 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n-use crate::hir::HirId;\n-use errors::struct_span_err;\n use rustc::traits;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n-\n use rustc_error_codes::*;\n+use rustc_errors::struct_span_err;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::HirId;\n \n mod builtin;\n mod inherent_impls;"}, {"sha": "1878f9385a891696e2a63d66075f4162585a6b9a", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,9 +1,9 @@\n //! Orphan checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n-use errors::struct_span_err;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n "}, {"sha": "3f4035b0998d64c4d756cb0b485db4c674859202", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,8 +1,8 @@\n //! Unsafety checker: every impl either implements a trait defined in this\n //! crate or pertains to a type defined in this crate.\n \n-use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Unsafety;"}, {"sha": "64e71cc42e0ca05bbe360e9c88ffdeca08bdddd4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -20,7 +20,6 @@ use crate::constrained_generic_params as cgp;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n-use errors::{struct_span_err, Applicability, StashKey};\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n@@ -34,6 +33,7 @@ use rustc::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::{struct_span_err, Applicability, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -255,7 +255,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n fn bad_placeholder_type(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n-) -> errors::DiagnosticBuilder<'tcx> {\n+) -> rustc_errors::DiagnosticBuilder<'tcx> {\n     spans.sort();\n     let mut err = struct_span_err!(\n         tcx.sess,"}, {"sha": "fb87b285fa29f56e139ea257cfdcb815ed643c0a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,10 +9,10 @@\n //! fixed, but for the moment it's easier to do these checks early.\n \n use crate::constrained_generic_params as cgp;\n-use errors::struct_span_err;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;"}, {"sha": "b951883ac195a2888c8b9803765d3e823e61e264", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -91,7 +91,6 @@ mod outlives;\n mod structured_errors;\n mod variance;\n \n-use errors::struct_span_err;\n use rustc::infer::InferOk;\n use rustc::lint;\n use rustc::middle;\n@@ -103,6 +102,7 @@ use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util;\n use rustc::util::common::ErrorReported;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;"}, {"sha": "908429c8dc48a8b215cde8db0ffd4635c412bac7", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +1,5 @@\n-use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;"}, {"sha": "068814723f52d758e6a578062a5e6887f90c5db1", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,6 @@\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::session::Session;\n use rustc::ty::{Ty, TypeFoldable};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_span::Span;\n \n use rustc_error_codes::*;\n@@ -50,7 +50,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n     }\n \n     fn code(&self) -> DiagnosticId {\n-        errors::error_code!(E0617)\n+        rustc_errors::error_code!(E0617)\n     }\n \n     fn common(&self) -> DiagnosticBuilder<'tcx> {\n@@ -111,7 +111,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n     }\n \n     fn code(&self) -> DiagnosticId {\n-        errors::error_code!(E0607)\n+        rustc_errors::error_code!(E0607)\n     }\n \n     fn common(&self) -> DiagnosticBuilder<'tcx> {"}, {"sha": "2f41bee1819cd32dce67b698112d11c556e76aa8", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +1,5 @@\n-use errors::struct_span_err;\n use rustc::ty::TyCtxt;\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_span::symbol::sym;"}, {"sha": "5d8e27ecadb828dbe8edbd7db05671ddf777c39c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -497,7 +497,7 @@ impl Attributes {\n         false\n     }\n \n-    pub fn from_ast(diagnostic: &::errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n+    pub fn from_ast(diagnostic: &::rustc_errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n         let mut doc_strings = vec![];\n         let mut sp = None;\n         let mut cfg = Cfg::True;"}, {"sha": "22f5d0dc2c07869c594a1e168abf46594c6dc169", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,7 +3,6 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use errors;\n use getopts;\n use rustc::lint::Level;\n use rustc::session;\n@@ -566,7 +565,7 @@ impl Options {\n }\n \n /// Prints deprecation warnings for deprecated options\n-fn check_deprecated_options(matches: &getopts::Matches, diag: &errors::Handler) {\n+fn check_deprecated_options(matches: &getopts::Matches, diag: &rustc_errors::Handler) {\n     let deprecated_flags = [\"input-format\", \"output-format\", \"no-defaults\", \"passes\"];\n \n     for flag in deprecated_flags.iter() {"}, {"sha": "3cda1b3be75f1a3f6fffabf69f3c533cfd0c16b2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -15,8 +15,8 @@ use rustc_interface::interface;\n use rustc_lint;\n use rustc_resolve as resolve;\n \n-use errors::emitter::{Emitter, EmitterWriter};\n-use errors::json::JsonEmitter;\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::json::JsonEmitter;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n@@ -171,7 +171,7 @@ pub fn new_handler(\n     error_format: ErrorOutputType,\n     source_map: Option<Lrc<source_map::SourceMap>>,\n     debugging_opts: &DebuggingOptions,\n-) -> errors::Handler {\n+) -> rustc_errors::Handler {\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -198,7 +198,10 @@ pub fn new_handler(\n         }\n     };\n \n-    errors::Handler::with_emitter_and_flags(emitter, debugging_opts.diagnostic_handler_flags(true))\n+    rustc_errors::Handler::with_emitter_and_flags(\n+        emitter,\n+        debugging_opts.diagnostic_handler_flags(true),\n+    )\n }\n \n pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions) {\n@@ -409,7 +412,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 let mut krate = clean::krate(&mut ctxt);\n \n-                fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n+                fn report_deprecated_attr(name: &str, diag: &rustc_errors::Handler) {\n                     let mut msg = diag.struct_warn(&format!(\n                         \"the `#![doc({})]` attribute is \\\n                                                          considered deprecated\","}, {"sha": "ecc394a2bc992082dc558992658a7fa080023bf1", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,8 +9,6 @@\n //! needs to read-after-write from a file, then it would be added to this\n //! abstraction.\n \n-use errors;\n-\n use std::fs;\n use std::io;\n use std::path::Path;\n@@ -42,7 +40,7 @@ impl ErrorStorage {\n     }\n \n     /// Prints all stored errors. Returns the number of printed errors.\n-    pub fn write_errors(&mut self, diag: &errors::Handler) -> usize {\n+    pub fn write_errors(&mut self, diag: &rustc_errors::Handler) -> usize {\n         let mut printed = 0;\n         // In order to drop the sender part of the channel.\n         self.sender = None;"}, {"sha": "8b5a3a2ba61313cd209faf6862537882358d1bc2", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,5 @@\n use crate::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n use crate::rustc_span::edition::Edition;\n-use errors;\n use rustc_feature::UnstableFeatures;\n use std::fs;\n use std::path::Path;\n@@ -26,7 +25,7 @@ impl ExternalHtml {\n         after_content: &[String],\n         md_before_content: &[String],\n         md_after_content: &[String],\n-        diag: &errors::Handler,\n+        diag: &rustc_errors::Handler,\n         id_map: &mut IdMap,\n         edition: Edition,\n         playground: &Option<Playground>,\n@@ -58,7 +57,7 @@ pub enum LoadStringError {\n \n pub fn load_string<P: AsRef<Path>>(\n     file_path: P,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n ) -> Result<String, LoadStringError> {\n     let file_path = file_path.as_ref();\n     let contents = match fs::read(file_path) {\n@@ -77,7 +76,7 @@ pub fn load_string<P: AsRef<Path>>(\n     }\n }\n \n-fn load_external_files(names: &[String], diag: &errors::Handler) -> Option<String> {\n+fn load_external_files(names: &[String], diag: &rustc_errors::Handler) -> Option<String> {\n     let mut out = String::new();\n     for name in names {\n         let s = match load_string(name, diag) {"}, {"sha": "2d932eb7668c41041ee767be827f74d3c91834a0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -42,7 +42,6 @@ use std::rc::Rc;\n use std::str;\n use std::sync::Arc;\n \n-use errors;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc_data_structures::flock;\n@@ -394,7 +393,7 @@ pub fn run(\n     mut krate: clean::Crate,\n     options: RenderOptions,\n     renderinfo: RenderInfo,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n     edition: Edition,\n ) -> Result<(), Error> {\n     // need to save a copy of the options for rendering the index page\n@@ -528,7 +527,7 @@ fn write_shared(\n     krate: &clean::Crate,\n     search_index: String,\n     options: &RenderOptions,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n ) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized"}, {"sha": "b15dae452ff051da09fc75608502aed03c6285aa", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -24,6 +24,7 @@ extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_error_codes;\n+extern crate rustc_errors;\n extern crate rustc_expand;\n extern crate rustc_feature;\n extern crate rustc_hir;\n@@ -42,7 +43,6 @@ extern crate syntax;\n extern crate test as testing;\n #[macro_use]\n extern crate log;\n-extern crate rustc_errors as errors;\n \n use std::default::Default;\n use std::env;\n@@ -518,6 +518,6 @@ where\n \n     match result {\n         Ok(output) => output,\n-        Err(_) => panic::resume_unwind(Box::new(errors::FatalErrorMarker)),\n+        Err(_) => panic::resume_unwind(Box::new(rustc_errors::FatalErrorMarker)),\n     }\n }"}, {"sha": "912a40722b8aff133c752ae4737a9a40b516c618", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,7 +2,6 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::PathBuf;\n \n-use errors;\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n@@ -39,7 +38,7 @@ fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n pub fn render(\n     input: PathBuf,\n     options: RenderOptions,\n-    diag: &errors::Handler,\n+    diag: &rustc_errors::Handler,\n     edition: Edition,\n ) -> i32 {\n     let mut output = options.output;\n@@ -128,7 +127,7 @@ pub fn render(\n }\n \n /// Runs any tests/code examples in the markdown file `input`.\n-pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n+pub fn test(mut options: Options, diag: &rustc_errors::Handler) -> i32 {\n     let input_str = match load_string(&options.input, diag) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,"}, {"sha": "0bab4423b3dfdb38449d97465df38b52620a4b07", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +1,5 @@\n-use errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_data_structures::sync::{Lock, Lrc};\n+use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_parse::lexer::StringReader as Lexer;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{FileName, InnerSpan};"}, {"sha": "50d5f70f4889a37eb45960d977d1d543ee924787", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,6 @@\n-use errors::Applicability;\n use rustc::lint;\n use rustc::ty;\n+use rustc_errors::Applicability;\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;"}, {"sha": "cc5359b53d17c9eca0f785b32f5d7f00ec71797f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -389,8 +389,8 @@ pub fn make_test(\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n         with_globals(edition, || {\n-            use errors::emitter::EmitterWriter;\n-            use errors::Handler;\n+            use rustc_errors::emitter::EmitterWriter;\n+            use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n             use rustc_span::source_map::FilePathMapping;\n             use syntax::sess::ParseSess;"}, {"sha": "af1c50acb0a357bc7939761626ecf057f7bb8643", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,7 +3,7 @@ use std::fs;\n use std::hash::{Hash, Hasher};\n use std::path::Path;\n \n-use errors::Handler;\n+use rustc_errors::Handler;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "7d9f715e9feb8c809ead5da130cfa946e95081b4", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -13,8 +13,8 @@ doctest = false\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\"\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }"}, {"sha": "33acba8eba0109fe09f89f1e64639bd33b4de103", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -649,7 +649,7 @@ pub enum PatKind {\n     Lit(P<Expr>),\n \n     /// A range pattern (e.g., `1...2`, `1..=2` or `1..2`).\n-    Range(P<Expr>, P<Expr>, Spanned<RangeEnd>),\n+    Range(Option<P<Expr>>, Option<P<Expr>>, Spanned<RangeEnd>),\n \n     /// A slice pattern `[a, b, c]`.\n     Slice(Vec<P<Pat>>),"}, {"sha": "958e4373cc0ed999dc9ab3a66a68dfa5667d7c4a", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,7 +6,7 @@ use crate::feature_gate::feature_err;\n use crate::print::pprust;\n use crate::sess::ParseSess;\n \n-use errors::{struct_span_err, Applicability, Handler};\n+use rustc_errors::{struct_span_err, Applicability, Handler};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::Transparency;"}, {"sha": "ec05dab451af85c9da71f64c2ee87e1721fe9c71", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -384,7 +384,7 @@ pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n \n pub fn allow_internal_unstable<'a>(\n     attrs: &[Attribute],\n-    span_diagnostic: &'a errors::Handler,\n+    span_diagnostic: &'a rustc_errors::Handler,\n ) -> Option<impl Iterator<Item = Symbol> + 'a> {\n     find_by_name(attrs, sym::allow_internal_unstable).and_then(|attr| {\n         attr.meta_item_list()"}, {"sha": "4eee4e943c2cd1a627012ec689ed7e276d14cf94", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,9 +4,9 @@ use crate::attr;\n use crate::sess::ParseSess;\n use crate::visit::{self, FnKind, Visitor};\n \n-use errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_error_codes::*;\n+use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Handler};\n use rustc_feature::{find_feature_issue, GateIssue};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Feature, Features, State as FeatureState, UnstableFeatures};\n@@ -911,6 +911,7 @@ pub fn check_crate(\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n     gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n+    gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "7ee4ca4603c9c1aba29e036c5c6a5518a85e54b6", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -18,7 +18,6 @@\n #![recursion_limit = \"256\"]\n \n use ast::AttrId;\n-pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::edition::{Edition, DEFAULT_EDITION};"}, {"sha": "58d4e46111b83adb5dc7344c014724dd4b793d0a", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1075,8 +1075,8 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n         PatKind::Box(inner) => vis.visit_pat(inner),\n         PatKind::Ref(inner, _mutbl) => vis.visit_pat(inner),\n         PatKind::Range(e1, e2, Spanned { span: _, node: _ }) => {\n-            vis.visit_expr(e1);\n-            vis.visit_expr(e2);\n+            visit_opt(e1, |e| vis.visit_expr(e));\n+            visit_opt(e2, |e| vis.visit_expr(e));\n             vis.visit_span(span);\n         }\n         PatKind::Tuple(elems) | PatKind::Slice(elems) | PatKind::Or(elems) => {"}, {"sha": "11c8cb8ef750017b1137cbb7266f1871799c3ea1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2329,14 +2329,18 @@ impl<'a> State<'a> {\n             }\n             PatKind::Lit(ref e) => self.print_expr(&**e),\n             PatKind::Range(ref begin, ref end, Spanned { node: ref end_kind, .. }) => {\n-                self.print_expr(begin);\n-                self.s.space();\n+                if let Some(e) = begin {\n+                    self.print_expr(e);\n+                    self.s.space();\n+                }\n                 match *end_kind {\n                     RangeEnd::Included(RangeSyntax::DotDotDot) => self.s.word(\"...\"),\n                     RangeEnd::Included(RangeSyntax::DotDotEq) => self.s.word(\"..=\"),\n                     RangeEnd::Excluded => self.s.word(\"..\"),\n                 }\n-                self.print_expr(end);\n+                if let Some(e) = end {\n+                    self.print_expr(e);\n+                }\n             }\n             PatKind::Slice(ref elts) => {\n                 self.s.word(\"[\");"}, {"sha": "b70e2ce0d3eb7de4aef9c090e763eea3f85830d3", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -29,7 +29,7 @@ impl FromStr for Mode {\n }\n \n struct ShowSpanVisitor<'a> {\n-    span_diagnostic: &'a errors::Handler,\n+    span_diagnostic: &'a rustc_errors::Handler,\n     mode: Mode,\n }\n \n@@ -60,7 +60,7 @@ impl<'a> Visitor<'a> for ShowSpanVisitor<'a> {\n     }\n }\n \n-pub fn run(span_diagnostic: &errors::Handler, mode: &str, krate: &ast::Crate) {\n+pub fn run(span_diagnostic: &rustc_errors::Handler, mode: &str, krate: &ast::Crate) {\n     let mode = match mode.parse().ok() {\n         Some(mode) => mode,\n         None => return,"}, {"sha": "3c2ebacbc4e346a7c2d403cb5035f9b933dafced", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -492,8 +492,8 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         }\n         PatKind::Lit(ref expression) => visitor.visit_expr(expression),\n         PatKind::Range(ref lower_bound, ref upper_bound, _) => {\n-            visitor.visit_expr(lower_bound);\n-            visitor.visit_expr(upper_bound);\n+            walk_list!(visitor, visit_expr, lower_bound);\n+            walk_list!(visitor, visit_expr, upper_bound);\n         }\n         PatKind::Wild | PatKind::Rest => {}\n         PatKind::Tuple(ref elems) | PatKind::Slice(ref elems) | PatKind::Or(ref elems) => {"}, {"sha": "024d14e21b5fd2efe9185d3b67b162e76d720dce", "filename": "src/test/ui/associated-const/associated-const-no-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-no-item.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,7 +3,7 @@ trait Foo {\n }\n \n const X: i32 = <i32>::ID;\n-//~^ ERROR no associated item named `ID` found for type `i32`\n+//~^ ERROR no associated item named `ID` found\n \n fn main() {\n     assert_eq!(1, X);"}, {"sha": "6f89530eac93306b3fe065ffc49999b061c296ba", "filename": "src/test/ui/associated-item/associated-item-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-enum.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no variant or associated item named `mispellable` found for type `Enum` in the current scope\n+error[E0599]: no variant or associated item named `mispellable` found for enum `Enum` in the current scope\n   --> $DIR/associated-item-enum.rs:17:11\n    |\n LL | enum Enum { Variant }\n@@ -10,7 +10,7 @@ LL |     Enum::mispellable();\n    |           variant or associated item not found in `Enum`\n    |           help: there is a method with a similar name: `misspellable`\n \n-error[E0599]: no variant or associated item named `mispellable_trait` found for type `Enum` in the current scope\n+error[E0599]: no variant or associated item named `mispellable_trait` found for enum `Enum` in the current scope\n   --> $DIR/associated-item-enum.rs:18:11\n    |\n LL | enum Enum { Variant }\n@@ -19,7 +19,7 @@ LL | enum Enum { Variant }\n LL |     Enum::mispellable_trait();\n    |           ^^^^^^^^^^^^^^^^^ variant or associated item not found in `Enum`\n \n-error[E0599]: no variant or associated item named `MISPELLABLE` found for type `Enum` in the current scope\n+error[E0599]: no variant or associated item named `MISPELLABLE` found for enum `Enum` in the current scope\n   --> $DIR/associated-item-enum.rs:19:11\n    |\n LL | enum Enum { Variant }"}, {"sha": "a0739a7a90b0a2f6b13b1f9574f7f94ad71fe4d5", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `test_mut` found for type `std::vec::Vec<{integer}>` in the current scope\n+error[E0599]: no method named `test_mut` found for struct `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n LL |     a.test_mut();\n@@ -8,7 +8,7 @@ LL |     a.test_mut();\n    = note: the following trait defines an item `test_mut`, perhaps you need to implement it:\n            candidate #1: `MyIter`\n \n-error[E0599]: no method named `test` found for type `std::vec::Vec<{integer}>` in the current scope\n+error[E0599]: no method named `test` found for struct `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n    |\n LL |     a.test();\n@@ -18,7 +18,7 @@ LL |     a.test();\n    = note: the following trait defines an item `test`, perhaps you need to implement it:\n            candidate #1: `MyIter`\n \n-error[E0599]: no method named `test` found for type `[{integer}; 1]` in the current scope\n+error[E0599]: no method named `test` found for array `[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:10:11\n    |\n LL |     ([1]).test();\n@@ -28,7 +28,7 @@ LL |     ([1]).test();\n    = note: the following trait defines an item `test`, perhaps you need to implement it:\n            candidate #1: `MyIter`\n \n-error[E0599]: no method named `test` found for type `&[{integer}; 1]` in the current scope\n+error[E0599]: no method named `test` found for reference `&[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:11:12\n    |\n LL |     (&[1]).test();"}, {"sha": "0b652a1f54bf2635d87e0f4278fe1d14b19d2842", "filename": "src/test/ui/block-result/issue-3563.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,7 +1,7 @@\n trait A {\n     fn a(&self) {\n         || self.b()\n-        //~^ ERROR no method named `b` found for type `&Self` in the current scope\n+        //~^ ERROR no method named `b` found\n     }\n }\n fn main() {}"}, {"sha": "be551f6e889fc63964d44af2f699d84027a373ab", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `b` found for type `&Self` in the current scope\n+error[E0599]: no method named `b` found for reference `&Self` in the current scope\n   --> $DIR/issue-3563.rs:3:17\n    |\n LL |         || self.b()"}, {"sha": "cb3199e7c886ecb1ce15fb963a7274894975c0fa", "filename": "src/test/ui/bogus-tag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fbogus-tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fbogus-tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbogus-tag.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no variant or associated item named `Hsl` found for type `Color` in the current scope\n+error[E0599]: no variant or associated item named `Hsl` found for enum `Color` in the current scope\n   --> $DIR/bogus-tag.rs:7:16\n    |\n LL | enum Color { Rgb(isize, isize, isize), Rgba(isize, isize, isize, isize), }"}, {"sha": "0f932cda07fc36bdf732077c813f45e19385fb9f", "filename": "src/test/ui/class-cast-to-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `eat` found for type `std::boxed::Box<dyn Noisy>` in the current scope\n+error[E0599]: no method named `eat` found for struct `std::boxed::Box<dyn Noisy>` in the current scope\n   --> $DIR/class-cast-to-trait.rs:53:8\n    |\n LL |   nyan.eat();"}, {"sha": "3d37d8af31df3485b661525f8ec9451ac079e897", "filename": "src/test/ui/coherence/coherence_inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n+error[E0599]: no method named `the_fn` found for reference `&Lib::TheStruct` in the current scope\n   --> $DIR/coherence_inherent.rs:31:11\n    |\n LL |         s.the_fn();"}, {"sha": "d968c8b4680dff77343162df2d910c3d152c6541", "filename": "src/test/ui/coherence/coherence_inherent_cc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n+error[E0599]: no method named `the_fn` found for reference `&coherence_inherent_cc_lib::TheStruct` in the current scope\n   --> $DIR/coherence_inherent_cc.rs:23:11\n    |\n LL |         s.the_fn();"}, {"sha": "d6b399acb733097ecfdf9658622d638c857ec697", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-18343.rs:6:28: 6:33]>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<[closure@$DIR/issue-18343.rs:6:28: 6:33]>` in the current scope\n   --> $DIR/issue-18343.rs:7:7\n    |\n LL | struct Obj<F> where F: FnMut() -> u32 {"}, {"sha": "f9dfdddad9d469060b340ee17fb85481a2619dde", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n   --> $DIR/issue-2392.rs:36:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -12,7 +12,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (o_closure.closure)();\n    |     ^                 ^\n \n-error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+error[E0599]: no method named `not_closure` found for struct `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n   --> $DIR/issue-2392.rs:38:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -23,7 +23,7 @@ LL |     o_closure.not_closure();\n    |               |\n    |               field, not a method\n \n-error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:42:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -37,7 +37,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (o_func.closure)();\n    |     ^              ^\n \n-error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n+error[E0599]: no method named `boxed_closure` found for struct `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:45:14\n    |\n LL | struct BoxedObj {\n@@ -51,7 +51,7 @@ help: to call the function stored in `boxed_closure`, surround the field access\n LL |     (boxed_fn.boxed_closure)();\n    |     ^                      ^\n \n-error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n+error[E0599]: no method named `boxed_closure` found for struct `BoxedObj` in the current scope\n   --> $DIR/issue-2392.rs:48:19\n    |\n LL | struct BoxedObj {\n@@ -65,7 +65,7 @@ help: to call the function stored in `boxed_closure`, surround the field access\n LL |     (boxed_closure.boxed_closure)();\n    |     ^                           ^\n \n-error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:53:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -79,7 +79,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (w.wrap.closure)();\n    |     ^              ^\n \n-error[E0599]: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `not_closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n   --> $DIR/issue-2392.rs:55:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -90,7 +90,7 @@ LL |     w.wrap.not_closure();\n    |            |\n    |            field, not a method\n \n-error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::ops::FnOnce() -> u32 + 'static)>>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<std::boxed::Box<(dyn std::ops::FnOnce() -> u32 + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -104,7 +104,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (check_expression().closure)();\n    |     ^                          ^\n \n-error[E0599]: no method named `f1` found for type `FuncContainer` in the current scope\n+error[E0599]: no method named `f1` found for struct `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:64:31\n    |\n LL | struct FuncContainer {\n@@ -118,7 +118,7 @@ help: to call the function stored in `f1`, surround the field access with parent\n LL |             ((*self.container).f1)(1);\n    |             ^                    ^\n \n-error[E0599]: no method named `f2` found for type `FuncContainer` in the current scope\n+error[E0599]: no method named `f2` found for struct `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:65:31\n    |\n LL | struct FuncContainer {\n@@ -132,7 +132,7 @@ help: to call the function stored in `f2`, surround the field access with parent\n LL |             ((*self.container).f2)(1);\n    |             ^                    ^\n \n-error[E0599]: no method named `f3` found for type `FuncContainer` in the current scope\n+error[E0599]: no method named `f3` found for struct `FuncContainer` in the current scope\n   --> $DIR/issue-2392.rs:66:31\n    |\n LL | struct FuncContainer {"}, {"sha": "a8d97bdfe2fb564ee95296e3f9aa9e2336f694ef", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `example` found for type `Example` in the current scope\n+error[E0599]: no method named `example` found for struct `Example` in the current scope\n   --> $DIR/issue-32128.rs:12:10\n    |\n LL | struct Example {"}, {"sha": "c109896e825be2ff9eb78806f0382676dc8c40fa", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for type `&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n+error[E0599]: no method named `closure` found for reference `&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:27:7\n    |\n LL |     p.closure();\n@@ -9,7 +9,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (p.closure)();\n    |     ^         ^\n \n-error[E0599]: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n+error[E0599]: no method named `fn_ptr` found for reference `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n    |\n LL |     q.fn_ptr();\n@@ -20,7 +20,7 @@ help: to call the function stored in `fn_ptr`, surround the field access with pa\n LL |     (q.fn_ptr)();\n    |     ^        ^\n \n-error[E0599]: no method named `c_fn_ptr` found for type `&D` in the current scope\n+error[E0599]: no method named `c_fn_ptr` found for reference `&D` in the current scope\n   --> $DIR/issue-33784.rs:32:7\n    |\n LL |     s.c_fn_ptr();"}, {"sha": "82cb235d47a7d8c06e34f416e19191ea9b3866ac", "filename": "src/test/ui/confuse-field-and-method/private-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `dog_age` found for type `animal::Dog` in the current scope\n+error[E0599]: no method named `dog_age` found for struct `animal::Dog` in the current scope\n   --> $DIR/private-field.rs:16:23\n    |\n LL |     pub struct Dog {"}, {"sha": "19e7d2036bfc88ece09d605e7e1063452ca33dd3", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,7 +4,7 @@ error[E0107]: wrong number of const arguments: expected 0, found 1\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n    |                                  ^^ unexpected const argument\n \n-error[E0599]: no method named `f` found for type `S` in the current scope\n+error[E0599]: no method named `f` found for struct `S` in the current scope\n   --> $DIR/invalid-const-arg-for-type-param.rs:7:7\n    |\n LL | struct S;"}, {"sha": "599d1d79e7555fcd9ac6958b364c8ff296ccf8d5", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no associated item named `HOST_SIZE` found for type `Foo<A, B>` in the current scope\n+error[E0599]: no associated item named `HOST_SIZE` found for struct `Foo<A, B>` in the current scope\n   --> $DIR/too_generic_eval_ice.rs:7:19\n    |\n LL | pub struct Foo<A, B>(A, B);"}, {"sha": "c95e8d239d2b9d211e97105ad4501099ef816808", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for type `Foo` in the current scope\n+error[E0599]: no method named `clone` found for struct `Foo` in the current scope\n   --> $DIR/copy-a-resource.rs:18:16\n    |\n LL | struct Foo {"}, {"sha": "2083a1d65220f75d47aea86cff24fcbae9368106", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for type `Bar<NotClone>` in the current scope\n+error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the current scope\n   --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {"}, {"sha": "3f912f7ffc63e5630e6e0ffb214a692006f47dde", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,25 +2,25 @@ fn main() {\n     match 0u8 {\n         [u8]::AssocItem => {}\n         //~^ ERROR missing angle brackets in associated item path\n-        //~| ERROR no associated item named `AssocItem` found for type `[u8]` in the current scope\n+        //~| ERROR no associated item named `AssocItem` found\n         (u8, u8)::AssocItem => {}\n         //~^ ERROR missing angle brackets in associated item path\n-        //~| ERROR no associated item named `AssocItem` found for type `(u8, u8)` in the current sco\n+        //~| ERROR no associated item named `AssocItem` found\n         _::AssocItem => {}\n         //~^ ERROR missing angle brackets in associated item path\n-        //~| ERROR no associated item named `AssocItem` found for type `_` in the current scope\n+        //~| ERROR no associated item named `AssocItem` found\n     }\n     match &0u8 {\n         &(u8,)::AssocItem => {}\n         //~^ ERROR missing angle brackets in associated item path\n-        //~| ERROR no associated item named `AssocItem` found for type `(u8,)` in the current scope\n+        //~| ERROR no associated item named `AssocItem` found\n     }\n }\n \n macro_rules! pat {\n     ($ty: ty) => ($ty::AssocItem)\n     //~^ ERROR missing angle brackets in associated item path\n-    //~| ERROR no associated item named `AssocItem` found for type `u8` in the current scope\n+    //~| ERROR no associated item named `AssocItem` found\n }\n macro_rules! ty {\n     () => (u8)\n@@ -31,6 +31,6 @@ fn check_macros() {\n         pat!(u8) => {}\n         ty!()::AssocItem => {}\n         //~^ ERROR missing angle brackets in associated item path\n-        //~| ERROR no associated item named `AssocItem` found for type `u8` in the current scope\n+        //~| ERROR no associated item named `AssocItem` found\n     }\n }"}, {"sha": "3f1946b94f64b5c6f7b33ae789fd06c2fefbf226", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -37,13 +37,13 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n \n-error[E0599]: no associated item named `AssocItem` found for type `[u8]` in the current scope\n+error[E0599]: no associated item named `AssocItem` found for slice `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:3:15\n    |\n LL |         [u8]::AssocItem => {}\n    |               ^^^^^^^^^ associated item not found in `[u8]`\n \n-error[E0599]: no associated item named `AssocItem` found for type `(u8, u8)` in the current scope\n+error[E0599]: no associated item named `AssocItem` found for tuple `(u8, u8)` in the current scope\n   --> $DIR/bad-assoc-pat.rs:6:19\n    |\n LL |         (u8, u8)::AssocItem => {}\n@@ -55,7 +55,7 @@ error[E0599]: no associated item named `AssocItem` found for type `_` in the cur\n LL |         _::AssocItem => {}\n    |            ^^^^^^^^^ associated item not found in `_`\n \n-error[E0599]: no associated item named `AssocItem` found for type `(u8,)` in the current scope\n+error[E0599]: no associated item named `AssocItem` found for tuple `(u8,)` in the current scope\n   --> $DIR/bad-assoc-pat.rs:14:17\n    |\n LL |         &(u8,)::AssocItem => {}"}, {"sha": "60633c6930cdfb8dd7a615a21bc3944f809c4560", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -35,5 +35,5 @@ impl S {\n }\n \n fn main() {\n-    S.hello_method(); //~ no method named `hello_method` found for type `S` in the current scope\n+    S.hello_method(); //~ no method named `hello_method` found\n }"}, {"sha": "072e61f6a3cd179e85979f045ccbfeb2dca5ff23", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -56,7 +56,7 @@ error: missing `fn`, `type`, or `const` for associated-item declaration\n LL |     pub hello_method(&self) {\n    |        ^ missing `fn`, `type`, or `const`\n \n-error[E0599]: no method named `hello_method` found for type `S` in the current scope\n+error[E0599]: no method named `hello_method` found for struct `S` in the current scope\n   --> $DIR/issue-40006.rs:38:7\n    |\n LL | struct S;"}, {"sha": "6e2b1abd1370f462735dc29e3250614323874323", "filename": "src/test/ui/dont-suggest-private-trait-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,5 +2,5 @@ struct T;\n \n fn main() {\n     T::new();\n-    //~^ ERROR no function or associated item named `new` found for type `T` in the current scope\n+    //~^ ERROR no function or associated item named `new` found\n }"}, {"sha": "fd7fdb4f7226c6eb0c4afbc42d29d17f7d443e65", "filename": "src/test/ui/dont-suggest-private-trait-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `new` found for type `T` in the current scope\n+error[E0599]: no function or associated item named `new` found for struct `T` in the current scope\n   --> $DIR/dont-suggest-private-trait-method.rs:4:8\n    |\n LL | struct T;"}, {"sha": "f4144277f16bee48d3b60925152847308c0ccf11", "filename": "src/test/ui/empty/empty-struct-braces-expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -22,8 +22,8 @@ fn main() {\n     let xe1 = XEmpty1; //~ ERROR expected value, found struct `XEmpty1`\n     let xe1 = XEmpty1();\n     //~^ ERROR expected function, tuple struct or tuple variant, found struct `XEmpty1`\n-    let xe3 = XE::Empty3; //~ ERROR no variant or associated item named `Empty3` found for type\n-    let xe3 = XE::Empty3(); //~ ERROR no variant or associated item named `Empty3` found for type\n+    let xe3 = XE::Empty3; //~ ERROR no variant or associated item named `Empty3` found for enum\n+    let xe3 = XE::Empty3(); //~ ERROR no variant or associated item named `Empty3` found for enum\n \n-    XE::Empty1 {}; //~ ERROR no variant `Empty1` in enum `empty_struct::XE`\n+    XE::Empty1 {}; //~ ERROR no variant named `Empty1` found for enum `empty_struct::XE`\n }"}, {"sha": "20f4c320e669aaf531b1d67b7cd9095727bb095e", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -58,7 +58,7 @@ LL |     let xe1 = XEmpty1();\n    |               did you mean `XEmpty1 { /* fields */ }`?\n    |               help: a unit struct with a similar name exists: `XEmpty2`\n \n-error[E0599]: no variant or associated item named `Empty3` found for type `empty_struct::XE` in the current scope\n+error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:25:19\n    |\n LL |     let xe3 = XE::Empty3;\n@@ -67,7 +67,7 @@ LL |     let xe3 = XE::Empty3;\n    |                   variant or associated item not found in `empty_struct::XE`\n    |                   help: there is a variant with a similar name: `XEmpty3`\n \n-error[E0599]: no variant or associated item named `Empty3` found for type `empty_struct::XE` in the current scope\n+error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:26:19\n    |\n LL |     let xe3 = XE::Empty3();\n@@ -76,7 +76,7 @@ LL |     let xe3 = XE::Empty3();\n    |                   variant or associated item not found in `empty_struct::XE`\n    |                   help: there is a variant with a similar name: `XEmpty3`\n \n-error: no variant `Empty1` in enum `empty_struct::XE`\n+error[E0599]: no variant named `Empty1` found for enum `empty_struct::XE`\n   --> $DIR/empty-struct-braces-expr.rs:28:9\n    |\n LL |     XE::Empty1 {};"}, {"sha": "a78a003661d6f96e507aa640793eb264f6c3862a", "filename": "src/test/ui/error-codes/E0599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0599.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no associated item named `NotEvenReal` found for type `Foo` in the current scope\n+error[E0599]: no associated item named `NotEvenReal` found for struct `Foo` in the current scope\n   --> $DIR/E0599.rs:4:20\n    |\n LL | struct Foo;"}, {"sha": "6b80d99b3afe9a534c7f133dd20dfaed5fbe645c", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -20,7 +20,7 @@ LL |     x += 2;\n    |\n    = note: an implementation of `std::ops::AddAssign` might be missing for `&str`\n \n-error[E0599]: no method named `z` found for type `&str` in the current scope\n+error[E0599]: no method named `z` found for reference `&str` in the current scope\n   --> $DIR/error-festival.rs:16:7\n    |\n LL |     x.z();"}, {"sha": "3f4c17836c4fc623c92f6e53de2f122d2843ab43", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +1,10 @@\n+#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {\n     match [5..4, 99..105, 43..44] {\n         [_, 99.., _] => {},\n-        //~^ ERROR `X..` range patterns are not supported\n-        //~| ERROR mismatched types\n+        //~^ ERROR mismatched types\n         _ => {},\n     }\n }", "previous_filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.rs"}, {"sha": "a6f8563a047851e8a0ea337d02ca329895a881d5", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "renamed", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,11 +1,5 @@\n-error: `X..` range patterns are not supported\n-  --> $DIR/exclusive_range_pattern_syntax_collision.rs:5:13\n-   |\n-LL |         [_, 99.., _] => {},\n-   |             ^^^^ help: try using the maximum value for the type: `99..MAX`\n-\n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision.rs:5:13\n+  --> $DIR/exclusive_range_pattern_syntax_collision.rs:6:13\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -15,6 +9,6 @@ LL |         [_, 99.., _] => {},\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr"}, {"sha": "dedc85491b4a98735df3200b34bc8441f035f931", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +1,10 @@\n+#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {\n     match [5..4, 99..105, 43..44] {\n         [_, 99..] => {},\n-        //~^ ERROR `X..` range patterns are not supported\n-        //~| ERROR pattern requires 2 elements but array has 3\n+        //~^ ERROR pattern requires 2 elements but array has 3\n         //~| ERROR mismatched types\n         _ => {},\n     }", "previous_filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.rs"}, {"sha": "4e0102c930da82b7ab86b7bac25a73033f2fe8f6", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "renamed", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,17 +1,11 @@\n-error: `X..` range patterns are not supported\n-  --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:13\n-   |\n-LL |         [_, 99..] => {},\n-   |             ^^^^ help: try using the maximum value for the type: `99..MAX`\n-\n error[E0527]: pattern requires 2 elements but array has 3\n-  --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:9\n+  --> $DIR/exclusive_range_pattern_syntax_collision2.rs:6:9\n    |\n LL |         [_, 99..] => {},\n    |         ^^^^^^^^^ expected 3 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:13\n+  --> $DIR/exclusive_range_pattern_syntax_collision2.rs:6:13\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -21,7 +15,7 @@ LL |         [_, 99..] => {},\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0308, E0527.\n For more information about an error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr"}, {"sha": "6a9b562cc3a3b73634bfbc57422d98000791c146", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +1,10 @@\n+#![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n \n fn main() {\n     match [5..4, 99..105, 43..44] {\n         [..9, 99..100, _] => {},\n-        //~^ ERROR `..X` range patterns are not supported\n-        //~| ERROR mismatched types\n+        //~^ ERROR mismatched types\n         //~| ERROR mismatched types\n         //~| ERROR mismatched types\n         _ => {},", "previous_filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.rs"}, {"sha": "665eef2fcb96c80ea7aff1c1f8ae0dbb3e0b5eb6", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "renamed", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,11 +1,5 @@\n-error: `..X` range patterns are not supported\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:10\n-   |\n-LL |         [..9, 99..100, _] => {},\n-   |          ^^^ help: try using the minimum value for the type: `MIN..9`\n-\n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:12\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:12\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -16,7 +10,7 @@ LL |         [..9, 99..100, _] => {},\n                 found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:15\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:15\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -29,7 +23,7 @@ LL |         [..9, 99..100, _] => {},\n                 found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:19\n+  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:19\n    |\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n@@ -41,6 +35,6 @@ LL |         [..9, 99..100, _] => {},\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr"}, {"sha": "4cb8230a7b6204e9d7b304ce17411b3e303cb946", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,21 @@\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn foo() {\n+    if let ..=5 = 0 {}\n+    //~^ ERROR half-open range patterns are unstable\n+    if let ...5 = 0 {}\n+    //~^ ERROR half-open range patterns are unstable\n+    if let ..5 = 0 {}\n+    //~^ ERROR half-open range patterns are unstable\n+    if let 5.. = 0 {}\n+    //~^ ERROR half-open range patterns are unstable\n+    if let 5..= = 0 {}\n+    //~^ ERROR half-open range patterns are unstable\n+    //~| ERROR inclusive range with no end\n+    if let 5... = 0 {}\n+    //~^ ERROR half-open range patterns are unstable\n+    //~| ERROR inclusive range with no end\n+}"}, {"sha": "68ba654de76daa7b305627d6e0ca951dedf9af49", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,74 @@\n+error[E0586]: inclusive range with no end\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:15:13\n+   |\n+LL |     if let 5..= = 0 {}\n+   |             ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:18:13\n+   |\n+LL |     if let 5... = 0 {}\n+   |             ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:7:12\n+   |\n+LL |     if let ..=5 = 0 {}\n+   |            ^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:9:12\n+   |\n+LL |     if let ...5 = 0 {}\n+   |            ^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:11:12\n+   |\n+LL |     if let ..5 = 0 {}\n+   |            ^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:13:12\n+   |\n+LL |     if let 5.. = 0 {}\n+   |            ^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:15:12\n+   |\n+LL |     if let 5..= = 0 {}\n+   |            ^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:18:12\n+   |\n+LL |     if let 5... = 0 {}\n+   |            ^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/67264\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0586, E0658.\n+For more information about an error, try `rustc --explain E0586`."}, {"sha": "7cddf5f652a319cb06324ea5b398d0b31be23373", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,8 @@\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {\n+    let \"a\".. = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n+    let ..\"a\" = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n+    let ..=\"a\" = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n+}"}, {"sha": "68ca3637150d3a218ccf057bcf7ddfaa4a2d2f4e", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,21 @@\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/half-open-range-pats-bad-types.rs:5:9\n+   |\n+LL |     let \"a\".. = \"a\";\n+   |         ^^^ this is of type `&'static str` but it should be `char` or numeric\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/half-open-range-pats-bad-types.rs:6:11\n+   |\n+LL |     let ..\"a\" = \"a\";\n+   |           ^^^ this is of type `&'static str` but it should be `char` or numeric\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/half-open-range-pats-bad-types.rs:7:12\n+   |\n+LL |     let ..=\"a\" = \"a\";\n+   |            ^^^ this is of type `&'static str` but it should be `char` or numeric\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0029`."}, {"sha": "b135891d0b82f09f5820bd28c8c3339e68b93673", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.rs", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,168 @@\n+// Test various non-exhaustive matches for `X..`, `..=X` and `..X` ranges.\n+\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+#![allow(illegal_floating_point_literal_pattern)]\n+\n+fn main() {}\n+\n+macro_rules! m {\n+    ($s:expr, $($t:tt)+) => {\n+        match $s { $($t)+ => {} }\n+    }\n+}\n+\n+fn floats() {\n+    m!(0f32, core::f32::NEG_INFINITY..); //~ ERROR non-exhaustive patterns: `_` not covered\n+    m!(0f32, ..core::f32::INFINITY); //~ ERROR non-exhaustive patterns: `_` not covered\n+}\n+\n+fn khar() {\n+    const ALMOST_MAX: char = '\\u{10fffe}';\n+    const ALMOST_MIN: char = '\\u{1}';\n+    const VAL: char = 'a';\n+    const VAL_1: char = 'b';\n+    const VAL_2: char = 'c';\n+    m!('a', ..core::char::MAX); //~ ERROR non-exhaustive patterns\n+    m!('a', ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+    m!('a', ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+    m!('a', ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+    m!('a', ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+    m!('a', ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+}\n+\n+mod unsigned {\n+    fn u8() {\n+        const ALMOST_MAX: u8 = core::u8::MAX - 1;\n+        const ALMOST_MIN: u8 = core::u8::MIN + 1;\n+        const VAL: u8 = 42;\n+        const VAL_1: u8 = VAL + 1;\n+        const VAL_2: u8 = VAL + 2;\n+        m!(0, ..core::u8::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn u16() {\n+        const ALMOST_MAX: u16 = core::u16::MAX - 1;\n+        const ALMOST_MIN: u16 = core::u16::MIN + 1;\n+        const VAL: u16 = 42;\n+        const VAL_1: u16 = VAL + 1;\n+        const VAL_2: u16 = VAL + 2;\n+        m!(0, ..core::u16::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn u32() {\n+        const ALMOST_MAX: u32 = core::u32::MAX - 1;\n+        const ALMOST_MIN: u32 = core::u32::MIN + 1;\n+        const VAL: u32 = 42;\n+        const VAL_1: u32 = VAL + 1;\n+        const VAL_2: u32 = VAL + 2;\n+        m!(0, ..core::u32::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn u64() {\n+        const ALMOST_MAX: u64 = core::u64::MAX - 1;\n+        const ALMOST_MIN: u64 = core::u64::MIN + 1;\n+        const VAL: u64 = 42;\n+        const VAL_1: u64 = VAL + 1;\n+        const VAL_2: u64 = VAL + 2;\n+        m!(0, ..core::u64::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn u128() {\n+        const ALMOST_MAX: u128 = core::u128::MAX - 1;\n+        const ALMOST_MIN: u128 = core::u128::MIN + 1;\n+        const VAL: u128 = 42;\n+        const VAL_1: u128 = VAL + 1;\n+        const VAL_2: u128 = VAL + 2;\n+        m!(0, ..core::u128::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+}\n+\n+mod signed {\n+    fn i8() {\n+        const ALMOST_MAX: i8 = core::i8::MAX - 1;\n+        const ALMOST_MIN: i8 = core::i8::MIN + 1;\n+        const VAL: i8 = 42;\n+        const VAL_1: i8 = VAL + 1;\n+        const VAL_2: i8 = VAL + 2;\n+        m!(0, ..core::i8::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn i16() {\n+        const ALMOST_MAX: i16 = core::i16::MAX - 1;\n+        const ALMOST_MIN: i16 = core::i16::MIN + 1;\n+        const VAL: i16 = 42;\n+        const VAL_1: i16 = VAL + 1;\n+        const VAL_2: i16 = VAL + 2;\n+        m!(0, ..core::i16::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn i32() {\n+        const ALMOST_MAX: i32 = core::i32::MAX - 1;\n+        const ALMOST_MIN: i32 = core::i32::MIN + 1;\n+        const VAL: i32 = 42;\n+        const VAL_1: i32 = VAL + 1;\n+        const VAL_2: i32 = VAL + 2;\n+        m!(0, ..core::i32::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn i64() {\n+        const ALMOST_MAX: i64 = core::i64::MAX - 1;\n+        const ALMOST_MIN: i64 = core::i64::MIN + 1;\n+        const VAL: i64 = 42;\n+        const VAL_1: i64 = VAL + 1;\n+        const VAL_2: i64 = VAL + 2;\n+        m!(0, ..core::i64::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+    fn i128() {\n+        const ALMOST_MAX: i128 = core::i128::MAX - 1;\n+        const ALMOST_MIN: i128 = core::i128::MIN + 1;\n+        const VAL: i128 = 42;\n+        const VAL_1: i128 = VAL + 1;\n+        const VAL_2: i128 = VAL + 2;\n+        m!(0, ..core::i128::MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ALMOST_MIN..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+        m!(0, ..=VAL | VAL_2..); //~ ERROR non-exhaustive patterns\n+        m!(0, ..VAL_1 | VAL_2..); //~ ERROR non-exhaustive patterns\n+    }\n+}"}, {"sha": "26d0cf9e9ecbaa2dd73747eb973355f37618bb0e", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "added", "additions": 547, "deletions": 0, "changes": 547, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,547 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:16:8\n+   |\n+LL |     m!(0f32, core::f32::NEG_INFINITY..);\n+   |        ^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n+   |\n+LL |     m!(0f32, ..core::f32::INFINITY);\n+   |        ^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n+   |\n+LL |     m!('a', ..core::char::MAX);\n+   |        ^^^ pattern `'\\u{10ffff}'` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n+   |\n+LL |     m!('a', ..ALMOST_MAX);\n+   |        ^^^ pattern `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `'\\u{0}'` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n+   |\n+LL |     m!('a', ALMOST_MIN..);\n+   |        ^^^ pattern `'\\u{0}'` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n+   |\n+LL |     m!('a', ..=ALMOST_MAX);\n+   |        ^^^ pattern `'\\u{10ffff}'` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `'b'` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n+   |\n+LL |     m!('a', ..=VAL | VAL_2..);\n+   |        ^^^ pattern `'b'` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `'b'` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8\n+   |\n+LL |     m!('a', ..VAL_1 | VAL_2..);\n+   |        ^^^ pattern `'b'` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u8::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n+   |\n+LL |         m!(0, ..core::u8::MAX);\n+   |            ^ pattern `std::u8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `254u8..=std::u8::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `254u8..=std::u8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `0u8` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `0u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u8::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::u8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u8` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u8` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u16::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n+   |\n+LL |         m!(0, ..core::u16::MAX);\n+   |            ^ pattern `std::u16::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `65534u16..=std::u16::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `65534u16..=std::u16::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `0u16` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `0u16` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u16::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::u16::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u16` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43u16` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u16` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43u16` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u32::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n+   |\n+LL |         m!(0, ..core::u32::MAX);\n+   |            ^ pattern `std::u32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `4294967294u32..=std::u32::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `4294967294u32..=std::u32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `0u32` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `0u32` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u32::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::u32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u32` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43u32` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u32` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43u32` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u64::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n+   |\n+LL |         m!(0, ..core::u64::MAX);\n+   |            ^ pattern `std::u64::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `18446744073709551614u64..=std::u64::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `18446744073709551614u64..=std::u64::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `0u64` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `0u64` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u64::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::u64::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u64` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43u64` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u64` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43u64` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n+   |\n+LL |         m!(0, ..core::u128::MAX);\n+   |            ^ pattern `std::u128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454u128..=std::u128::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `340282366920938463463374607431768211454u128..=std::u128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `0u128` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `0u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::u128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u128` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43u128` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i8::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n+   |\n+LL |         m!(0, ..core::i8::MAX);\n+   |            ^ pattern `std::i8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `126i8..=std::i8::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `126i8..=std::i8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i8::MIN` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `std::i8::MIN` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i8::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::i8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i8` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43i8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i8` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43i8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i16::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n+   |\n+LL |         m!(0, ..core::i16::MAX);\n+   |            ^ pattern `std::i16::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `32766i16..=std::i16::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `32766i16..=std::i16::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i16::MIN` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `std::i16::MIN` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i16::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::i16::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i16` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43i16` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i16` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43i16` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i32::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n+   |\n+LL |         m!(0, ..core::i32::MAX);\n+   |            ^ pattern `std::i32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `2147483646i32..=std::i32::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `2147483646i32..=std::i32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i32::MIN` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `std::i32::MIN` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i32::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::i32::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i32` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43i32` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i32` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43i32` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i64::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n+   |\n+LL |         m!(0, ..core::i64::MAX);\n+   |            ^ pattern `std::i64::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `9223372036854775806i64..=std::i64::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `9223372036854775806i64..=std::i64::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i64::MIN` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `std::i64::MIN` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i64::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::i64::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i64` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43i64` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i64` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43i64` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i128::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n+   |\n+LL |         m!(0, ..core::i128::MAX);\n+   |            ^ pattern `std::i128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726i128..=std::i128::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n+   |\n+LL |         m!(0, ..ALMOST_MAX);\n+   |            ^ pattern `170141183460469231731687303715884105726i128..=std::i128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i128::MIN` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n+   |\n+LL |         m!(0, ALMOST_MIN..);\n+   |            ^ pattern `std::i128::MIN` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `std::i128::MAX` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n+   |\n+LL |         m!(0, ..=ALMOST_MAX);\n+   |            ^ pattern `std::i128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i128` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n+   |\n+LL |         m!(0, ..=VAL | VAL_2..);\n+   |            ^ pattern `43i128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: `43i128` not covered\n+  --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n+   |\n+LL |         m!(0, ..VAL_1 | VAL_2..);\n+   |            ^ pattern `43i128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 68 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "efac0df2a430d7ededa0e37862bdaf9619db0df1", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-pass.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-pass.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+// Test various exhaustive matches for `X..`, `..=X` and `..X` ranges.\n+\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {}\n+\n+macro_rules! m {\n+    ($s:expr, $($t:tt)+) => {\n+        match $s { $($t)+ => {} }\n+    }\n+}\n+\n+macro_rules! test_int {\n+    ($s:expr, $min:path, $max:path) => {\n+        m!($s, $min..);\n+        m!($s, $min..5 | 5..);\n+        m!($s, ..5 | 5..);\n+        m!($s, ..=4 | 5..);\n+        m!($s, ..=$max);\n+        m!($s, ..$max | $max);\n+        m!(($s, true), (..5, true) | (5.., true) | ($min.., false));\n+    }\n+}\n+\n+fn unsigned_int() {\n+    test_int!(0u8, core::u8::MIN, core::u8::MAX);\n+    test_int!(0u16, core::u16::MIN, core::u16::MAX);\n+    test_int!(0u32, core::u32::MIN, core::u32::MAX);\n+    test_int!(0u64, core::u64::MIN, core::u64::MAX);\n+    test_int!(0u128, core::u128::MIN, core::u128::MAX);\n+}\n+\n+fn signed_int() {\n+    test_int!(0i8, core::i8::MIN, core::i8::MAX);\n+    test_int!(0i16, core::i16::MIN, core::i16::MAX);\n+    test_int!(0i32, core::i32::MIN, core::i32::MAX);\n+    test_int!(0i64, core::i64::MIN, core::i64::MAX);\n+    test_int!(0i128, core::i128::MIN, core::i128::MAX);\n+}\n+\n+fn khar() {\n+    m!('a', ..=core::char::MAX);\n+    m!('a', '\\u{0}'..);\n+    m!('a', ..='\\u{D7FF}' | '\\u{E000}'..);\n+    m!('a', ..'\\u{D7FF}' | '\\u{D7FF}' | '\\u{E000}'..);\n+}"}, {"sha": "904efda903c693ce5ab5faba16776798b2379cb0", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-hair-lower-empty.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-hair-lower-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-hair-lower-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-hair-lower-empty.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,54 @@\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+#![allow(illegal_floating_point_literal_pattern)]\n+\n+macro_rules! m {\n+    ($s:expr, $($t:tt)+) => {\n+        match $s { $($t)+ => {} }\n+    }\n+}\n+\n+fn main() {\n+    m!(0, ..core::u8::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::u16::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::u32::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::u64::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::u128::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+\n+    m!(0, ..core::i8::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::i16::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::i32::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::i64::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0, ..core::i128::MIN);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+\n+    m!(0f32, ..core::f32::NEG_INFINITY);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+    m!(0f64, ..core::f64::NEG_INFINITY);\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+\n+    m!('a', ..'\\u{0}');\n+    //~^ ERROR lower range bound must be less than upper\n+    //~| ERROR lower range bound must be less than upper\n+}"}, {"sha": "b536e1b5548d0bd81ee781af5012714eaa5febf5", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-hair-lower-empty.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-hair-lower-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-hair-lower-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-hair-lower-empty.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,159 @@\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:12:11\n+   |\n+LL |     m!(0, ..core::u8::MIN);\n+   |           ^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:15:11\n+   |\n+LL |     m!(0, ..core::u16::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:18:11\n+   |\n+LL |     m!(0, ..core::u32::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:21:11\n+   |\n+LL |     m!(0, ..core::u64::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:24:11\n+   |\n+LL |     m!(0, ..core::u128::MIN);\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:28:11\n+   |\n+LL |     m!(0, ..core::i8::MIN);\n+   |           ^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:31:11\n+   |\n+LL |     m!(0, ..core::i16::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:34:11\n+   |\n+LL |     m!(0, ..core::i32::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:37:11\n+   |\n+LL |     m!(0, ..core::i64::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:40:11\n+   |\n+LL |     m!(0, ..core::i128::MIN);\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:44:14\n+   |\n+LL |     m!(0f32, ..core::f32::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:47:14\n+   |\n+LL |     m!(0f64, ..core::f64::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:51:13\n+   |\n+LL |     m!('a', ..'\\u{0}');\n+   |             ^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:12:11\n+   |\n+LL |     m!(0, ..core::u8::MIN);\n+   |           ^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:15:11\n+   |\n+LL |     m!(0, ..core::u16::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:18:11\n+   |\n+LL |     m!(0, ..core::u32::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:21:11\n+   |\n+LL |     m!(0, ..core::u64::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:24:11\n+   |\n+LL |     m!(0, ..core::u128::MIN);\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:28:11\n+   |\n+LL |     m!(0, ..core::i8::MIN);\n+   |           ^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:31:11\n+   |\n+LL |     m!(0, ..core::i16::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:34:11\n+   |\n+LL |     m!(0, ..core::i32::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:37:11\n+   |\n+LL |     m!(0, ..core::i64::MIN);\n+   |           ^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:40:11\n+   |\n+LL |     m!(0, ..core::i128::MIN);\n+   |           ^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:44:14\n+   |\n+LL |     m!(0f32, ..core::f32::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:47:14\n+   |\n+LL |     m!(0f64, ..core::f64::NEG_INFINITY);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0579]: lower range bound must be less than upper\n+  --> $DIR/half-open-range-pats-hair-lower-empty.rs:51:13\n+   |\n+LL |     m!('a', ..'\\u{0}');\n+   |             ^^^^^^^^^\n+\n+error: aborting due to 26 previous errors\n+\n+For more information about this error, try `rustc --explain E0579`."}, {"sha": "03166e3675571436e47c87ca41d8e0a75fca3526", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,15 @@\n+// Test `X...` and `X..=` range patterns not being allowed syntactically.\n+// FIXME(Centril): perhaps these should be semantic restrictions.\n+\n+#![feature(half_open_range_patterns)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn foo() {\n+    if let 0... = 1 {} //~ ERROR inclusive range with no end\n+    if let 0..= = 1 {} //~ ERROR inclusive range with no end\n+    const X: u8 = 0;\n+    if let X... = 1 {} //~ ERROR inclusive range with no end\n+    if let X..= = 1 {} //~ ERROR inclusive range with no end\n+}"}, {"sha": "2b4d95f6842846fd904f97fcdca0e9b79068e592", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,35 @@\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:10:13\n+   |\n+LL |     if let 0... = 1 {}\n+   |             ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:11:13\n+   |\n+LL |     if let 0..= = 1 {}\n+   |             ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:13:13\n+   |\n+LL |     if let X... = 1 {}\n+   |             ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-inclusive-no-end.rs:14:13\n+   |\n+LL |     if let X..= = 1 {}\n+   |             ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0586`."}, {"sha": "e9a5361e63d271b75b10cd343af25df325de5771", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-ref-ambiguous-interp.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,24 @@\n+#![feature(half_open_range_patterns)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn syntax() {\n+    match &0 {\n+        &0.. | _ => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        &0..= | _ => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~| ERROR inclusive range with no end\n+        &0... | _ => {}\n+        //~^ ERROR inclusive range with no end\n+    }\n+\n+    match &0 {\n+        &..0 | _ => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        &..=0 | _ => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        &...0 | _ => {}\n+    }\n+}"}, {"sha": "5d3aded022224c7a75047e070cd513914f1d3de4", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-ref-ambiguous-interp.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-ref-ambiguous-interp.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,43 @@\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:8:10\n+   |\n+LL |         &0.. | _ => {}\n+   |          ^^^ help: add parentheses to clarify the precedence: `(0 ..)`\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:10:11\n+   |\n+LL |         &0..= | _ => {}\n+   |           ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:10:10\n+   |\n+LL |         &0..= | _ => {}\n+   |          ^^^^ help: add parentheses to clarify the precedence: `(0 ..=)`\n+\n+error[E0586]: inclusive range with no end\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:13:11\n+   |\n+LL |         &0... | _ => {}\n+   |           ^^^\n+   |\n+   = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:18:10\n+   |\n+LL |         &..0 | _ => {}\n+   |          ^^^ help: add parentheses to clarify the precedence: `(..0)`\n+\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/half-open-range-pats-ref-ambiguous-interp.rs:20:10\n+   |\n+LL |         &..=0 | _ => {}\n+   |          ^^^^ help: add parentheses to clarify the precedence: `(..=0)`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0586`."}, {"sha": "416c59af3fd3e58ba13dacc37df80bd88f3e1350", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-semantics.rs", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-semantics.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,160 @@\n+// run-pass\n+\n+// Test half-open range patterns against their expression equivalents\n+// via `.contains(...)` and make sure the dynamic semantics match.\n+\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+#![allow(illegal_floating_point_literal_pattern)]\n+#![allow(unreachable_patterns)]\n+\n+macro_rules! yes {\n+    ($scrutinee:expr, $($t:tt)+) => {\n+        {\n+            let m = match $scrutinee { $($t)+ => true, _ => false, };\n+            let c = ($($t)+).contains(&$scrutinee);\n+            assert_eq!(m, c);\n+            m\n+        }\n+    }\n+}\n+\n+fn range_to_inclusive() {\n+    // `..=X` (`RangeToInclusive`-equivalent):\n+    //---------------------------------------\n+\n+    // u8; `..=X`\n+    assert!(yes!(core::u8::MIN, ..=core::u8::MIN));\n+    assert!(yes!(core::u8::MIN, ..=5));\n+    assert!(yes!(5u8, ..=5));\n+    assert!(!yes!(6u8, ..=5));\n+\n+    // i16; `..=X`\n+    assert!(yes!(core::i16::MIN, ..=core::i16::MIN));\n+    assert!(yes!(core::i16::MIN, ..=0));\n+    assert!(yes!(core::i16::MIN, ..=-5));\n+    assert!(yes!(-5, ..=-5));\n+    assert!(!yes!(-4, ..=-5));\n+\n+    // char; `..=X`\n+    assert!(yes!('\\u{0}', ..='\\u{0}'));\n+    assert!(yes!('\\u{0}', ..='a'));\n+    assert!(yes!('a', ..='a'));\n+    assert!(!yes!('b', ..='a'));\n+\n+    // f32; `..=X`\n+    assert!(yes!(core::f32::NEG_INFINITY, ..=core::f32::NEG_INFINITY));\n+    assert!(yes!(core::f32::NEG_INFINITY, ..=1.0f32));\n+    assert!(yes!(1.5f32, ..=1.5f32));\n+    assert!(!yes!(1.6f32, ..=-1.5f32));\n+\n+    // f64; `..=X`\n+    assert!(yes!(core::f64::NEG_INFINITY, ..=core::f64::NEG_INFINITY));\n+    assert!(yes!(core::f64::NEG_INFINITY, ..=1.0f64));\n+    assert!(yes!(1.5f64, ..=1.5f64));\n+    assert!(!yes!(1.6f64, ..=-1.5f64));\n+}\n+\n+fn range_to() {\n+    // `..X` (`RangeTo`-equivalent):\n+    //-----------------------------\n+\n+    // u8; `..X`\n+    assert!(yes!(0u8, ..1));\n+    assert!(yes!(0u8, ..5));\n+    assert!(!yes!(5u8, ..5));\n+    assert!(!yes!(6u8, ..5));\n+\n+    // u8; `..X`\n+    const NU8: u8 = core::u8::MIN + 1;\n+    assert!(yes!(core::u8::MIN, ..NU8));\n+    assert!(yes!(0u8, ..5));\n+    assert!(!yes!(5u8, ..5));\n+    assert!(!yes!(6u8, ..5));\n+\n+    // i16; `..X`\n+    const NI16: i16 = core::i16::MIN + 1;\n+    assert!(yes!(core::i16::MIN, ..NI16));\n+    assert!(yes!(core::i16::MIN, ..5));\n+    assert!(yes!(-6, ..-5));\n+    assert!(!yes!(-5, ..-5));\n+\n+    // char; `..X`\n+    assert!(yes!('\\u{0}', ..'\\u{1}'));\n+    assert!(yes!('\\u{0}', ..'a'));\n+    assert!(yes!('a', ..'b'));\n+    assert!(!yes!('a', ..'a'));\n+    assert!(!yes!('b', ..'a'));\n+\n+    // f32; `..X`\n+    assert!(yes!(core::f32::NEG_INFINITY, ..1.0f32));\n+    assert!(!yes!(1.5f32, ..1.5f32));\n+    const E32: f32 = 1.5f32 + core::f32::EPSILON;\n+    assert!(yes!(1.5f32, ..E32));\n+    assert!(!yes!(1.6f32, ..1.5f32));\n+\n+    // f64; `..X`\n+    assert!(yes!(core::f64::NEG_INFINITY, ..1.0f64));\n+    assert!(!yes!(1.5f64, ..1.5f64));\n+    const E64: f64 = 1.5f64 + core::f64::EPSILON;\n+    assert!(yes!(1.5f64, ..E64));\n+    assert!(!yes!(1.6f64, ..1.5f64));\n+}\n+\n+fn range_from() {\n+    // `X..` (`RangeFrom`-equivalent):\n+    //--------------------------------\n+\n+    // u8; `X..`\n+    assert!(yes!(core::u8::MIN, core::u8::MIN..));\n+    assert!(yes!(core::u8::MAX, core::u8::MIN..));\n+    assert!(!yes!(core::u8::MIN, 1..));\n+    assert!(!yes!(4, 5..));\n+    assert!(yes!(5, 5..));\n+    assert!(yes!(6, 5..));\n+    assert!(yes!(core::u8::MAX, core::u8::MAX..));\n+\n+    // i16; `X..`\n+    assert!(yes!(core::i16::MIN, core::i16::MIN..));\n+    assert!(yes!(core::i16::MAX, core::i16::MIN..));\n+    const NI16: i16 = core::i16::MIN + 1;\n+    assert!(!yes!(core::i16::MIN, NI16..));\n+    assert!(!yes!(-4, 5..));\n+    assert!(yes!(-4, -4..));\n+    assert!(yes!(-3, -4..));\n+    assert!(yes!(core::i16::MAX, core::i16::MAX..));\n+\n+    // char; `X..`\n+    assert!(yes!('\\u{0}', '\\u{0}'..));\n+    assert!(yes!(core::char::MAX, '\\u{0}'..));\n+    assert!(yes!('a', 'a'..));\n+    assert!(yes!('b', 'a'..));\n+    assert!(!yes!('a', 'b'..));\n+    assert!(yes!(core::char::MAX, core::char::MAX..));\n+\n+    // f32; `X..`\n+    assert!(yes!(core::f32::NEG_INFINITY, core::f32::NEG_INFINITY..));\n+    assert!(yes!(core::f32::INFINITY, core::f32::NEG_INFINITY..));\n+    assert!(!yes!(core::f32::NEG_INFINITY, 1.0f32..));\n+    assert!(yes!(core::f32::INFINITY, 1.0f32..));\n+    assert!(!yes!(1.0f32 - core::f32::EPSILON, 1.0f32..));\n+    assert!(yes!(1.0f32, 1.0f32..));\n+    assert!(yes!(core::f32::INFINITY, 1.0f32..));\n+    assert!(yes!(core::f32::INFINITY, core::f32::INFINITY..));\n+\n+    // f64; `X..`\n+    assert!(yes!(core::f64::NEG_INFINITY, core::f64::NEG_INFINITY..));\n+    assert!(yes!(core::f64::INFINITY, core::f64::NEG_INFINITY..));\n+    assert!(!yes!(core::f64::NEG_INFINITY, 1.0f64..));\n+    assert!(yes!(core::f64::INFINITY, 1.0f64..));\n+    assert!(!yes!(1.0f64 - core::f64::EPSILON, 1.0f64..));\n+    assert!(yes!(1.0f64, 1.0f64..));\n+    assert!(yes!(core::f64::INFINITY, 1.0f64..));\n+    assert!(yes!(core::f64::INFINITY, core::f64::INFINITY..));\n+}\n+\n+fn main() {\n+    range_to_inclusive();\n+    range_to();\n+    range_from();\n+}"}, {"sha": "a663acd2d191c381313bb11c23d1b0a819a4bfc1", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-syntactic-pass.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-syntactic-pass.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+// Test the parsing of half-open ranges.\n+\n+#![feature(exclusive_range_pattern)]\n+#![feature(half_open_range_patterns)]\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+fn syntax() {\n+    match scrutinee {\n+        X.. | 0.. | 'a'.. | 0.0f32.. => {}\n+        ..=X | ...X | ..X => {}\n+        ..=0 | ...0 | ..0 => {}\n+        ..='a' | ...'a' | ..'a' => {}\n+        ..=0.0f32 | ...0.0f32 | ..0.0f32 => {}\n+    }\n+\n+    macro_rules! mac {\n+        ($e:expr) => {\n+            let ..$e;\n+            let ...$e;\n+            let ..=$e;\n+            let $e..;\n+            let $e...;\n+            let $e..=;\n+        }\n+    }\n+\n+    mac!(0);\n+}"}, {"sha": "bd795368205fc93cc2e38fcc2ee21e05ac93d020", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-4.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-4.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {\n+    const PAT: u8 = 1;\n+\n+    match 0 {\n+        (.. PAT) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "613d907cfe329266b2e0f0ee56aa348ea2512dc8", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,10 @@\n+#![feature(half_open_range_patterns)]\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {\n+    const PAT: u8 = 1;\n+\n+    match (0, 1) {\n+        (PAT ..) => {} //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "307ad711b74d9f58c988b557ef799556ed6a1482", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/pat-tuple-5.rs:8:10\n+   |\n+LL |     match (0, 1) {\n+   |           ------ this expression has type `({integer}, {integer})`\n+LL |         (PAT ..) => {}\n+   |          ^^^ expected tuple, found `u8`\n+   |\n+   = note: expected tuple `({integer}, {integer})`\n+               found type `u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5d75f5034bc65d078f9956fb9107d61f8927ae2c", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -15,7 +15,7 @@ LL |     fn f() { ::bar::m!(); }\n LL |         Vec::new();\n    |         ^^^ use of undeclared type or module `Vec`\n \n-error[E0599]: no method named `clone` found for type `()` in the current scope\n+error[E0599]: no method named `clone` found for unit type `()` in the current scope\n   --> $DIR/no_implicit_prelude.rs:12:12\n    |\n LL |     fn f() { ::bar::m!(); }"}, {"sha": "15c4acbc939bc8f2527c61837df55c1cc6efd6bc", "filename": "src/test/ui/hygiene/trait_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -14,7 +14,7 @@ mod bar {\n }\n \n mod baz {\n-    pub macro m() { ().f() } //~ ERROR no method named `f` found for type `()` in the current scope\n+    pub macro m() { ().f() } //~ ERROR no method named `f` found\n     fn f() { ::bar::m!(); }\n }\n "}, {"sha": "8e3609292a7f9c2a1230992581aec8b54d1cdb87", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `f` found for type `()` in the current scope\n+error[E0599]: no method named `f` found for unit type `()` in the current scope\n   --> $DIR/trait_items.rs:17:24\n    |\n LL |     fn f() { ::baz::m!(); }"}, {"sha": "1605f3434cf5ade5269a9a656a17971492c0cb48", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,19 +6,19 @@ LL | #![feature(impl_trait_in_bindings)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n+error[E0599]: no method named `count_ones` found for opaque type `impl std::marker::Copy` in the current scope\n   --> $DIR/bindings-opaque.rs:11:17\n    |\n LL |     let _ = FOO.count_ones();\n    |                 ^^^^^^^^^^ method not found in `impl std::marker::Copy`\n \n-error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n+error[E0599]: no method named `count_ones` found for opaque type `impl std::marker::Copy` in the current scope\n   --> $DIR/bindings-opaque.rs:13:17\n    |\n LL |     let _ = BAR.count_ones();\n    |                 ^^^^^^^^^^ method not found in `impl std::marker::Copy`\n \n-error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n+error[E0599]: no method named `count_ones` found for opaque type `impl std::marker::Copy` in the current scope\n   --> $DIR/bindings-opaque.rs:15:17\n    |\n LL |     let _ = foo.count_ones();"}, {"sha": "41f48cb56933e3f7434b03741061859d09ad29ec", "filename": "src/test/ui/impl-trait/issues/issue-21659-show-relevant-trait-impls-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: method named `foo` found for type `Bar` in the current scope\n+    //~^ error: method named `foo` found for struct `Bar` in the current scope\n }"}, {"sha": "57417975474f7fe718b76bc15f7f081ccbcb48e1", "filename": "src/test/ui/impl-trait/issues/issue-21659-show-relevant-trait-impls-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-21659-show-relevant-trait-impls-3.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for type `Bar` in the current scope\n+error[E0599]: no method named `foo` found for struct `Bar` in the current scope\n   --> $DIR/issue-21659-show-relevant-trait-impls-3.rs:20:8\n    |\n LL | struct Bar;"}, {"sha": "7f2eb0c21e61df5f5961d2989a1616c65ed200e5", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `is_empty` found for type `Foo` in the current scope\n+error[E0599]: no method named `is_empty` found for struct `Foo` in the current scope\n   --> $DIR/method-suggestion-no-duplication.rs:7:15\n    |\n LL | struct Foo;"}, {"sha": "c8abc2d8f8ee05d359b9f7a09fdc2e1f78fd6a1d", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -25,7 +25,7 @@ fn main() {\n     //~|items from traits can only be used if the trait is in scope\n     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n     //~^items from traits can only be used if the trait is in scope\n-    //~| ERROR no method named `method` found for type\n+    //~| ERROR no method named `method` found for struct\n \n     'a'.method();\n     //~^ ERROR no method named"}, {"sha": "da25617e18759c08da121adaa650cc6b6ca3b605", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -16,7 +16,7 @@ LL | use no_method_suggested_traits::qux::PrivPub;\n LL | use no_method_suggested_traits::Reexported;\n    |\n \n-error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n+error[E0599]: no method named `method` found for struct `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:26:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n@@ -46,7 +46,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use foo::Bar;\n    |\n \n-error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n+error[E0599]: no method named `method` found for struct `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:32:43\n    |\n LL |         fn method(&self) {}\n@@ -78,7 +78,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use no_method_suggested_traits::foo::PubPub;\n    |\n \n-error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n+error[E0599]: no method named `method` found for struct `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:37:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n@@ -90,7 +90,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use no_method_suggested_traits::foo::PubPub;\n    |\n \n-error[E0599]: no method named `method` found for type `Foo` in the current scope\n+error[E0599]: no method named `method` found for struct `Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:40:9\n    |\n LL | struct Foo;\n@@ -106,7 +106,7 @@ LL |     Foo.method();\n            candidate #3: `no_method_suggested_traits::qux::PrivPub`\n            candidate #4: `no_method_suggested_traits::Reexported`\n \n-error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n+error[E0599]: no method named `method` found for struct `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:42:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n@@ -129,7 +129,7 @@ LL |     1u64.method2();\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n-error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&u64>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `std::rc::Rc<&mut std::boxed::Box<&u64>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:47:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n@@ -139,7 +139,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n-error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Foo` in the current scope\n+error[E0599]: no method named `method2` found for struct `no_method_suggested_traits::Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:50:37\n    |\n LL |     no_method_suggested_traits::Foo.method2();\n@@ -149,7 +149,7 @@ LL |     no_method_suggested_traits::Foo.method2();\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n-error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:52:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n@@ -159,7 +159,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).metho\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n-error[E0599]: no method named `method2` found for type `no_method_suggested_traits::Bar` in the current scope\n+error[E0599]: no method named `method2` found for enum `no_method_suggested_traits::Bar` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:54:40\n    |\n LL |     no_method_suggested_traits::Bar::X.method2();\n@@ -169,7 +169,7 @@ LL |     no_method_suggested_traits::Bar::X.method2();\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n-error[E0599]: no method named `method2` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:56:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n@@ -179,7 +179,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).me\n    = note: the following trait defines an item `method2`, perhaps you need to implement it:\n            candidate #1: `foo::Bar`\n \n-error[E0599]: no method named `method3` found for type `Foo` in the current scope\n+error[E0599]: no method named `method3` found for struct `Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:59:9\n    |\n LL | struct Foo;\n@@ -192,7 +192,7 @@ LL |     Foo.method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n-error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `std::rc::Rc<&mut std::boxed::Box<&Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:61:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n@@ -202,7 +202,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n-error[E0599]: no method named `method3` found for type `Bar` in the current scope\n+error[E0599]: no method named `method3` found for enum `Bar` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:63:12\n    |\n LL | enum Bar { X }\n@@ -215,7 +215,7 @@ LL |     Bar::X.method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `no_method_suggested_traits::foo::PubPub`\n \n-error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&Bar>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `std::rc::Rc<&mut std::boxed::Box<&Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:65:46\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n@@ -231,31 +231,31 @@ error[E0599]: no method named `method3` found for type `usize` in the current sc\n LL |     1_usize.method3();\n    |             ^^^^^^^ method not found in `usize`\n \n-error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&usize>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `std::rc::Rc<&mut std::boxed::Box<&usize>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:70:47\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3();\n    |                                               ^^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&usize>>`\n \n-error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Foo` in the current scope\n+error[E0599]: no method named `method3` found for struct `no_method_suggested_traits::Foo` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:71:37\n    |\n LL |     no_method_suggested_traits::Foo.method3();\n    |                                     ^^^^^^^ method not found in `no_method_suggested_traits::Foo`\n \n-error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:72:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n    |                                                                       ^^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Foo>>`\n \n-error[E0599]: no method named `method3` found for type `no_method_suggested_traits::Bar` in the current scope\n+error[E0599]: no method named `method3` found for enum `no_method_suggested_traits::Bar` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:74:40\n    |\n LL |     no_method_suggested_traits::Bar::X.method3();\n    |                                        ^^^^^^^ method not found in `no_method_suggested_traits::Bar`\n \n-error[E0599]: no method named `method3` found for type `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `std::rc::Rc<&mut std::boxed::Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:75:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();"}, {"sha": "8c59fbd530129d5e4bbd04927a6f8b09b03963d5", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -37,7 +37,7 @@ LL |     Foo.bar();\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\n \n-error[E0599]: no method named `bar` found for type `Foo` in the current scope\n+error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/infinite-autoderef.rs:26:9\n    |\n LL | struct Foo;"}, {"sha": "666fb6ab2bbb1580cd06ad2cde864711531a5e65", "filename": "src/test/ui/issues/issue-10465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for type `&b::B` in the current scope\n+error[E0599]: no method named `foo` found for reference `&b::B` in the current scope\n   --> $DIR/issue-10465.rs:17:15\n    |\n LL |             b.foo();"}, {"sha": "2f31636f8adf9ba3404a678d240c3e7fafa59ef0", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -12,7 +12,7 @@ LL |         self.iter()\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error[E0599]: no method named `iter` found for type `&G` in the current scope\n+error[E0599]: no method named `iter` found for reference `&G` in the current scope\n   --> $DIR/issue-13853.rs:27:23\n    |\n LL |     for node in graph.iter() {"}, {"sha": "b6847cd755c3fb7de03da89b275a43193598383d", "filename": "src/test/ui/issues/issue-19521.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-19521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-19521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19521.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `homura` found for type `&'static str` in the current scope\n+error[E0599]: no method named `homura` found for reference `&'static str` in the current scope\n   --> $DIR/issue-19521.rs:2:8\n    |\n LL |     \"\".homura()();"}, {"sha": "b412d7bc70436ea150aaf295aac3e70e2216ee72", "filename": "src/test/ui/issues/issue-19692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-19692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-19692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19692.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `kaname` found for type `Homura` in the current scope\n+error[E0599]: no method named `kaname` found for struct `Homura` in the current scope\n   --> $DIR/issue-19692.rs:4:40\n    |\n LL | struct Homura;"}, {"sha": "efde16167b71b9f85e3f8ed1a8240fb81e296441", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `to_string` found for type `*const u8` in the current scope\n+error[E0599]: no method named `to_string` found for raw pointer `*const u8` in the current scope\n   --> $DIR/issue-21596.rs:4:22\n    |\n LL |     println!(\"{}\", z.to_string());"}, {"sha": "dfd84b9a79d404e701c79d068ddfb13c8efbbf9b", "filename": "src/test/ui/issues/issue-22933-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,7 +2,7 @@ enum Delicious {\n     Pie      = 0x1,\n     Apple    = 0x2,\n     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-    //~^ ERROR no variant or associated item named `PIE` found for type `Delicious`\n+    //~^ ERROR no variant or associated item named `PIE` found\n }\n \n fn main() {}"}, {"sha": "584b05ec44d3fed5b1ce957a7c45a44b87090245", "filename": "src/test/ui/issues/issue-22933-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-2.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no variant or associated item named `PIE` found for type `Delicious` in the current scope\n+error[E0599]: no variant or associated item named `PIE` found for enum `Delicious` in the current scope\n   --> $DIR/issue-22933-2.rs:4:55\n    |\n LL | enum Delicious {"}, {"sha": "fbcce4b8344670a0039973a2dad54e32d9f710e8", "filename": "src/test/ui/issues/issue-22933-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n const FOO: [u32; u8::MIN as usize] = [];\n-//~^ ERROR no associated item named `MIN` found for type `u8`\n+//~^ ERROR no associated item named `MIN` found\n \n fn main() {}"}, {"sha": "92f4c546440ab7f053ac3e73a19dc2de676ad419", "filename": "src/test/ui/issues/issue-23173.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23173.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,7 +7,7 @@ fn use_token(token: &Token) { unimplemented!() }\n \n fn main() {\n     use_token(&Token::Homura); //~ ERROR no variant or associated item named `Homura`\n-    Struct::method(); //~ ERROR no function or associated item named `method` found for type\n-    Struct::method; //~ ERROR no function or associated item named `method` found for type\n-    Struct::Assoc; //~ ERROR no associated item named `Assoc` found for type `Struct` in\n+    Struct::method(); //~ ERROR no function or associated item named `method` found\n+    Struct::method; //~ ERROR no function or associated item named `method` found\n+    Struct::Assoc; //~ ERROR no associated item named `Assoc` found\n }"}, {"sha": "89f70fda786eabdb80dbc420857c617da0bbabbe", "filename": "src/test/ui/issues/issue-23173.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23173.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no variant or associated item named `Homura` found for type `Token` in the current scope\n+error[E0599]: no variant or associated item named `Homura` found for enum `Token` in the current scope\n   --> $DIR/issue-23173.rs:9:23\n    |\n LL | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n@@ -7,7 +7,7 @@ LL | enum Token { LeftParen, RightParen, Plus, Minus, /* etc */ }\n LL |     use_token(&Token::Homura);\n    |                       ^^^^^^ variant or associated item not found in `Token`\n \n-error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n+error[E0599]: no function or associated item named `method` found for struct `Struct` in the current scope\n   --> $DIR/issue-23173.rs:10:13\n    |\n LL | struct Struct {\n@@ -16,7 +16,7 @@ LL | struct Struct {\n LL |     Struct::method();\n    |             ^^^^^^ function or associated item not found in `Struct`\n \n-error[E0599]: no function or associated item named `method` found for type `Struct` in the current scope\n+error[E0599]: no function or associated item named `method` found for struct `Struct` in the current scope\n   --> $DIR/issue-23173.rs:11:13\n    |\n LL | struct Struct {\n@@ -25,7 +25,7 @@ LL | struct Struct {\n LL |     Struct::method;\n    |             ^^^^^^ function or associated item not found in `Struct`\n \n-error[E0599]: no associated item named `Assoc` found for type `Struct` in the current scope\n+error[E0599]: no associated item named `Assoc` found for struct `Struct` in the current scope\n   --> $DIR/issue-23173.rs:12:13\n    |\n LL | struct Struct {"}, {"sha": "09f9ebccf250547fdff98f8e22ec2e9979bf8408", "filename": "src/test/ui/issues/issue-23217.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23217.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +1,5 @@\n pub enum SomeEnum {\n-    B = SomeEnum::A, //~ ERROR no variant or associated item named `A` found for type `SomeEnum`\n+    B = SomeEnum::A, //~ ERROR no variant or associated item named `A` found\n }\n \n fn main() {}"}, {"sha": "a81b459a34cbeb08ada5c259507044bc96e2a666", "filename": "src/test/ui/issues/issue-23217.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23217.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no variant or associated item named `A` found for type `SomeEnum` in the current scope\n+error[E0599]: no variant or associated item named `A` found for enum `SomeEnum` in the current scope\n   --> $DIR/issue-23217.rs:2:19\n    |\n LL | pub enum SomeEnum {"}, {"sha": "ea042a6c76bb474905870f161133726a778b1475", "filename": "src/test/ui/issues/issue-25385.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-25385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-25385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25385.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,12 +1,12 @@\n macro_rules! foo {\n     ($e:expr) => { $e.foo() }\n-    //~^ ERROR no method named `foo` found for type `i32` in the current scope\n+    //~^ ERROR no method named `foo` found\n }\n \n fn main() {\n     let a = 1i32;\n     foo!(a);\n \n     foo!(1i32.foo());\n-    //~^ ERROR no method named `foo` found for type `i32` in the current scope\n+    //~^ ERROR no method named `foo` found\n }"}, {"sha": "aa720fd45895a88f2096a059ce49dcce141bb64a", "filename": "src/test/ui/issues/issue-2823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for type `C` in the current scope\n+error[E0599]: no method named `clone` found for struct `C` in the current scope\n   --> $DIR/issue-2823.rs:13:16\n    |\n LL | struct C {"}, {"sha": "77bc829209440b40bf68151c9e369fdeef41cc86", "filename": "src/test/ui/issues/issue-28344.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28344.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,7 +4,7 @@ error[E0191]: the value of the associated type `Output` (from trait `std::ops::B\n LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n    |                 ^^^^^^ help: specify the associated type: `BitXor<Output = Type>`\n \n-error[E0599]: no function or associated item named `bitor` found for type `dyn std::ops::BitXor<_>` in the current scope\n+error[E0599]: no function or associated item named `bitor` found for trait object `dyn std::ops::BitXor<_>` in the current scope\n   --> $DIR/issue-28344.rs:4:25\n    |\n LL |     let x: u8 = BitXor::bitor(0 as u8, 0 as u8);\n@@ -19,7 +19,7 @@ error[E0191]: the value of the associated type `Output` (from trait `std::ops::B\n LL |     let g = BitXor::bitor;\n    |             ^^^^^^ help: specify the associated type: `BitXor<Output = Type>`\n \n-error[E0599]: no function or associated item named `bitor` found for type `dyn std::ops::BitXor<_>` in the current scope\n+error[E0599]: no function or associated item named `bitor` found for trait object `dyn std::ops::BitXor<_>` in the current scope\n   --> $DIR/issue-28344.rs:8:21\n    |\n LL |     let g = BitXor::bitor;"}, {"sha": "c543ef9b0e3d8466b024cab48a009f1e62ca1001", "filename": "src/test/ui/issues/issue-28586.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28586.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -2,6 +2,6 @@\n \n pub trait Foo {}\n impl Foo for [u8; usize::BYTES] {}\n-//~^ ERROR no associated item named `BYTES` found for type `usize`\n+//~^ ERROR no associated item named `BYTES` found\n \n fn main() { }"}, {"sha": "f0a1e2d006179e0949b4e5abedc2dc8345b4aa97", "filename": "src/test/ui/issues/issue-28971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28971.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,7 +5,7 @@ fn main(){\n     foo(|| {\n         match Foo::Bar(1) {\n             Foo::Baz(..) => (),\n-            //~^ ERROR no variant or associated item named `Baz` found for type `Foo`\n+            //~^ ERROR no variant or associated item named `Baz` found\n             _ => (),\n         }\n     });"}, {"sha": "2736ee881d564869dd981245ff54acf5aaf96246", "filename": "src/test/ui/issues/issue-28971.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28971.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no variant or associated item named `Baz` found for type `Foo` in the current scope\n+error[E0599]: no variant or associated item named `Baz` found for enum `Foo` in the current scope\n   --> $DIR/issue-28971.rs:7:18\n    |\n LL | enum Foo {"}, {"sha": "dd2784841758cfcbec14d49636bdcd8f723b10ac", "filename": "src/test/ui/issues/issue-29124.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -13,7 +13,7 @@ fn func() -> Ret {\n \n fn main() {\n     Obj::func.x();\n-    //~^ ERROR no method named `x` found for type `fn() -> Ret {Obj::func}` in the current scope\n+    //~^ ERROR no method named `x` found\n     func.x();\n-    //~^ ERROR no method named `x` found for type `fn() -> Ret {func}` in the current scope\n+    //~^ ERROR no method named `x` found\n }"}, {"sha": "fff20248b70d5638dbcf1d2298149adfcd9ffe30", "filename": "src/test/ui/issues/issue-29124.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,12 +1,12 @@\n-error[E0599]: no method named `x` found for type `fn() -> Ret {Obj::func}` in the current scope\n+error[E0599]: no method named `x` found for fn item `fn() -> Ret {Obj::func}` in the current scope\n   --> $DIR/issue-29124.rs:15:15\n    |\n LL |     Obj::func.x();\n    |               ^ method not found in `fn() -> Ret {Obj::func}`\n    |\n    = note: Obj::func is a function, perhaps you wish to call it\n \n-error[E0599]: no method named `x` found for type `fn() -> Ret {func}` in the current scope\n+error[E0599]: no method named `x` found for fn item `fn() -> Ret {func}` in the current scope\n   --> $DIR/issue-29124.rs:17:10\n    |\n LL |     func.x();"}, {"sha": "705355d91bf3cfb68d63922c63493c862406acb3", "filename": "src/test/ui/issues/issue-30123.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-30123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-30123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,5 +5,5 @@ use issue_30123_aux::*;\n \n fn main() {\n     let ug = Graph::<i32, i32>::new_undirected();\n-    //~^ ERROR no function or associated item named `new_undirected` found for type\n+    //~^ ERROR no function or associated item named `new_undirected` found\n }"}, {"sha": "bc6731601f095644e8ee8088d939dd641efd58ae", "filename": "src/test/ui/issues/issue-30123.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `new_undirected` found for type `issue_30123_aux::Graph<i32, i32>` in the current scope\n+error[E0599]: no function or associated item named `new_undirected` found for struct `issue_30123_aux::Graph<i32, i32>` in the current scope\n   --> $DIR/issue-30123.rs:7:33\n    |\n LL |     let ug = Graph::<i32, i32>::new_undirected();"}, {"sha": "a614b96ac1439cc853144cff4bffaeab4f905364", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,7 +7,7 @@ LL |         .cloned()\n    = note:   expected type `u8`\n            found reference `&_`\n \n-error[E0599]: no method named `collect` found for type `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n+error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n   --> $DIR/issue-31173.rs:14:10\n    |\n LL |         .collect();"}, {"sha": "de544afae73b2bc3fc6a188e9da2068b04b8e57d", "filename": "src/test/ui/issues/issue-33575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let baz = ().foo(); //~ ERROR no method named `foo` found for type `()` in the current scope\n+    let baz = ().foo(); //~ ERROR no method named `foo` found\n     <i32 as std::str::FromStr>::from_str(&baz); // No complaints about `str` being unsized\n }"}, {"sha": "bbd8042d1cd6b4eb7f23b8e4e130d76b74cae43f", "filename": "src/test/ui/issues/issue-33575.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for type `()` in the current scope\n+error[E0599]: no method named `foo` found for unit type `()` in the current scope\n   --> $DIR/issue-33575.rs:2:18\n    |\n LL |     let baz = ().foo();"}, {"sha": "632ddb91b36fda42dfb848f21a4daf6b3d97efa5", "filename": "src/test/ui/issues/issue-34209.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,7 +4,7 @@ enum S {\n \n fn bug(l: S) {\n     match l {\n-        S::B {} => {}, //~ ERROR no variant `B` in enum `S`\n+        S::B {} => {}, //~ ERROR no variant named `B` found for enum `S`\n     }\n }\n "}, {"sha": "f9a25b69ff6210120212f96d52df10a2982e6ef5", "filename": "src/test/ui/issues/issue-34209.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34209.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error: no variant `B` in enum `S`\n+error[E0599]: no variant named `B` found for enum `S`\n   --> $DIR/issue-34209.rs:7:12\n    |\n LL | enum S {\n@@ -9,3 +9,4 @@ LL |         S::B {} => {},\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "afe4d42edd8c8da6ec5b6931f4eb6aee65417c48", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,5 +7,5 @@ fn main () {\n     //~| ERROR expected expression, found reserved identifier `_`\n     //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-    //~^ ERROR no method named `iter` found for type `()` in the current scope\n+    //~^ ERROR no method named `iter` found\n }"}, {"sha": "c52ea4ef9daa9c744782e74094b946aaa68438fb", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -43,7 +43,7 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |             |\n    |             cannot assign to this expression\n \n-error[E0599]: no method named `iter` found for type `()` in the current scope\n+error[E0599]: no method named `iter` found for unit type `()` in the current scope\n   --> $DIR/issue-34334.rs:9:36\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();"}, {"sha": "a998f95d306cb05d8fbd946b55072704fcde30c1", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `is_subset` found for type `&std::collections::HashSet<T>` in the current scope\n+error[E0599]: no method named `is_subset` found for reference `&std::collections::HashSet<T>` in the current scope\n   --> $DIR/issue-35677.rs:4:10\n    |\n LL |     this.is_subset(other)"}, {"sha": "0817c51ee4eabccd1fd7666e077590c66654c67f", "filename": "src/test/ui/issues/issue-3707.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3707.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,7 +7,7 @@ impl Obj {\n         return 1+1 == 2\n     }\n     pub fn chirp(&self) {\n-        self.boom(); //~ ERROR no method named `boom` found for type `&Obj` in the current scope\n+        self.boom(); //~ ERROR no method named `boom` found\n     }\n }\n "}, {"sha": "6ca2deee377a3690e52c01f34cd0006172143543", "filename": "src/test/ui/issues/issue-3707.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3707.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `boom` found for type `&Obj` in the current scope\n+error[E0599]: no method named `boom` found for reference `&Obj` in the current scope\n   --> $DIR/issue-3707.rs:10:14\n    |\n LL |         self.boom();"}, {"sha": "3d28f1936b47fd4d1de50df3d256b7cfab873641", "filename": "src/test/ui/issues/issue-38919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-38919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-38919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38919.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +1,5 @@\n fn foo<T: Iterator>() {\n-    T::Item; //~ ERROR no associated item named `Item` found for type `T` in the current scope\n+    T::Item; //~ ERROR no associated item named `Item` found\n }\n \n fn main() { }"}, {"sha": "0022065a32c3d98a762f227926e139b62158b73e", "filename": "src/test/ui/issues/issue-38919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38919.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no associated item named `Item` found for type `T` in the current scope\n+error[E0599]: no associated item named `Item` found for type parameter `T` in the current scope\n   --> $DIR/issue-38919.rs:2:8\n    |\n LL |     T::Item;"}, {"sha": "2f6e676538e963a8e24af9c793a3ceb341976322", "filename": "src/test/ui/issues/issue-39175.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `exec` found for type `&mut std::process::Command` in the current scope\n+error[E0599]: no method named `exec` found for mutable reference `&mut std::process::Command` in the current scope\n   --> $DIR/issue-39175.rs:15:39\n    |\n LL |     Command::new(\"echo\").arg(\"hello\").exec();"}, {"sha": "3a75956af528012fdc8a16fb3db0b5d5925f6dd1", "filename": "src/test/ui/issues/issue-39559.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-39559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-39559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -12,7 +12,7 @@ impl Dim for Dim3 {\n \n pub struct Vector<T, D: Dim> {\n     entries: [T; D::dim()],\n-    //~^ ERROR no function or associated item named `dim` found for type `D` in the current scope\n+    //~^ ERROR no function or associated item named `dim` found\n     _dummy: D,\n }\n "}, {"sha": "0554b232c248b7f1189d4584c77cd0bc72db0c61", "filename": "src/test/ui/issues/issue-39559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `dim` found for type `D` in the current scope\n+error[E0599]: no function or associated item named `dim` found for type parameter `D` in the current scope\n   --> $DIR/issue-39559.rs:14:21\n    |\n LL |     entries: [T; D::dim()],"}, {"sha": "a5ed5b87051e798ad5d8185d3a2efc4ab7524eee", "filename": "src/test/ui/issues/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3973.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -20,6 +20,6 @@ impl ToString_ for Point {\n \n fn main() {\n     let p = Point::new(0.0, 0.0);\n-    //~^ ERROR no function or associated item named `new` found for type `Point`\n+    //~^ ERROR no function or associated item named `new` found for struct `Point`\n     println!(\"{}\", p.to_string());\n }"}, {"sha": "63282e8d86d7b32ebf60ca25bec48bcca8ffacca", "filename": "src/test/ui/issues/issue-3973.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-3973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3973.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -7,7 +7,7 @@ LL | |         Point { x: x, y: y }\n LL | |     }\n    | |_____^ not a member of trait `ToString_`\n \n-error[E0599]: no function or associated item named `new` found for type `Point` in the current scope\n+error[E0599]: no function or associated item named `new` found for struct `Point` in the current scope\n   --> $DIR/issue-3973.rs:22:20\n    |\n LL | struct Point {"}, {"sha": "5b95a7379135556a855c37a4d8033f45abc17b96", "filename": "src/test/ui/issues/issue-41255.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41255.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,6 +1,7 @@\n // Matching against float literals should result in a linter error\n \n #![feature(exclusive_range_pattern)]\n+#![feature(half_open_range_patterns)]\n #![allow(unused)]\n #![forbid(illegal_floating_point_literal_pattern)]\n \n@@ -35,6 +36,22 @@ fn main() {\n                              //~| WARNING hard error\n                              //~| WARNING hard error\n                              //~| WARNING hard error\n+\n+        ..71.0 => {}\n+        //~^ ERROR floating-point types cannot be used in patterns\n+        //~| ERROR floating-point types cannot be used in patterns\n+        //~| WARNING hard error\n+        //~| WARNING this was previously accepted by the compiler\n+        ..=72.0 => {}\n+        //~^ ERROR floating-point types cannot be used in patterns\n+        //~| ERROR floating-point types cannot be used in patterns\n+        //~| WARNING hard error\n+        //~| WARNING this was previously accepted by the compiler\n+        71.0.. => {}\n+        //~^ ERROR floating-point types cannot be used in patterns\n+        //~| ERROR floating-point types cannot be used in patterns\n+        //~| WARNING hard error\n+        //~| WARNING this was previously accepted by the compiler\n         _ => {},\n     };\n     let y = 5.0;"}, {"sha": "1ff58153c88649fc4fc3a0d257b4208bc5d37332", "filename": "src/test/ui/issues/issue-41255.stderr", "status": "modified", "additions": 74, "deletions": 20, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41255.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,19 +1,19 @@\n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:10:9\n+  --> $DIR/issue-41255.rs:11:9\n    |\n LL |         5.0 => {},\n    |         ^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-41255.rs:5:11\n+  --> $DIR/issue-41255.rs:6:11\n    |\n LL | #![forbid(illegal_floating_point_literal_pattern)]\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:14:9\n+  --> $DIR/issue-41255.rs:15:9\n    |\n LL |         5.0f32 => {},\n    |         ^^^^^^\n@@ -22,7 +22,7 @@ LL |         5.0f32 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:18:10\n+  --> $DIR/issue-41255.rs:19:10\n    |\n LL |         -5.0 => {},\n    |          ^^^\n@@ -31,7 +31,7 @@ LL |         -5.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:22:9\n+  --> $DIR/issue-41255.rs:23:9\n    |\n LL |         1.0 .. 33.0 => {},\n    |         ^^^\n@@ -40,7 +40,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:22:16\n+  --> $DIR/issue-41255.rs:23:16\n    |\n LL |         1.0 .. 33.0 => {},\n    |                ^^^^\n@@ -49,7 +49,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:30:9\n+  --> $DIR/issue-41255.rs:31:9\n    |\n LL |         39.0 ..= 70.0 => {},\n    |         ^^^^\n@@ -58,7 +58,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:30:18\n+  --> $DIR/issue-41255.rs:31:18\n    |\n LL |         39.0 ..= 70.0 => {},\n    |                  ^^^^\n@@ -67,7 +67,34 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:43:10\n+  --> $DIR/issue-41255.rs:40:11\n+   |\n+LL |         ..71.0 => {}\n+   |           ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:45:12\n+   |\n+LL |         ..=72.0 => {}\n+   |            ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:50:9\n+   |\n+LL |         71.0.. => {}\n+   |         ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:60:10\n    |\n LL |         (3.14, 1) => {},\n    |          ^^^^\n@@ -76,7 +103,7 @@ LL |         (3.14, 1) => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:52:18\n+  --> $DIR/issue-41255.rs:69:18\n    |\n LL |         Foo { x: 2.0 } => {},\n    |                  ^^^\n@@ -85,7 +112,7 @@ LL |         Foo { x: 2.0 } => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:10:9\n+  --> $DIR/issue-41255.rs:11:9\n    |\n LL |         5.0 => {},\n    |         ^^^\n@@ -94,7 +121,7 @@ LL |         5.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:14:9\n+  --> $DIR/issue-41255.rs:15:9\n    |\n LL |         5.0f32 => {},\n    |         ^^^^^^\n@@ -103,7 +130,7 @@ LL |         5.0f32 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:18:10\n+  --> $DIR/issue-41255.rs:19:10\n    |\n LL |         -5.0 => {},\n    |          ^^^\n@@ -112,7 +139,7 @@ LL |         -5.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:22:9\n+  --> $DIR/issue-41255.rs:23:9\n    |\n LL |         1.0 .. 33.0 => {},\n    |         ^^^\n@@ -121,7 +148,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:22:16\n+  --> $DIR/issue-41255.rs:23:16\n    |\n LL |         1.0 .. 33.0 => {},\n    |                ^^^^\n@@ -130,7 +157,7 @@ LL |         1.0 .. 33.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:30:9\n+  --> $DIR/issue-41255.rs:31:9\n    |\n LL |         39.0 ..= 70.0 => {},\n    |         ^^^^\n@@ -139,7 +166,7 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:30:18\n+  --> $DIR/issue-41255.rs:31:18\n    |\n LL |         39.0 ..= 70.0 => {},\n    |                  ^^^^\n@@ -148,7 +175,34 @@ LL |         39.0 ..= 70.0 => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:43:10\n+  --> $DIR/issue-41255.rs:40:11\n+   |\n+LL |         ..71.0 => {}\n+   |           ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:45:12\n+   |\n+LL |         ..=72.0 => {}\n+   |            ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:50:9\n+   |\n+LL |         71.0.. => {}\n+   |         ^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n+\n+error: floating-point types cannot be used in patterns\n+  --> $DIR/issue-41255.rs:60:10\n    |\n LL |         (3.14, 1) => {},\n    |          ^^^^\n@@ -157,13 +211,13 @@ LL |         (3.14, 1) => {},\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: floating-point types cannot be used in patterns\n-  --> $DIR/issue-41255.rs:52:18\n+  --> $DIR/issue-41255.rs:69:18\n    |\n LL |         Foo { x: 2.0 } => {},\n    |                  ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "10cde21abd7660db8e95f0b8de36815084ab6aaf", "filename": "src/test/ui/issues/issue-41880.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41880.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41880.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -25,5 +25,5 @@ impl<T: Clone, F> Iterator for Iterate<T, F> where F: Fn(&T) -> T {\n fn main() {\n     let a = iterate(0, |x| x+1);\n     println!(\"{:?}\", a.iter().take(10).collect::<Vec<usize>>());\n-    //~^ ERROR no method named `iter` found for type `Iterate<{integer}\n+    //~^ ERROR no method named `iter` found\n }"}, {"sha": "09d5594f73f06bd360f1eea195d23d3317cc1794", "filename": "src/test/ui/issues/issue-41880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `iter` found for type `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:31]>` in the current scope\n+error[E0599]: no method named `iter` found for struct `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:31]>` in the current scope\n   --> $DIR/issue-41880.rs:27:24\n    |\n LL | pub struct Iterate<T, F> {"}, {"sha": "82cdc20df2fbdd08ec6fff8bffb95998f98fa9fc", "filename": "src/test/ui/issues/issue-42880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-42880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-42880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42880.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no associated item named `String` found for type `std::string::String` in the current scope\n+error[E0599]: no associated item named `String` found for struct `std::string::String` in the current scope\n   --> $DIR/issue-42880.rs:4:22\n    |\n LL |     let f = |&Value::String(_)| ();"}, {"sha": "ce667a5006e6f31aebdf9bdc0e50b6132c29871f", "filename": "src/test/ui/issues/issue-43189.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-43189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-43189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -8,5 +8,5 @@\n extern crate xcrate_issue_43189_b;\n fn main() {\n     ().a();\n-    //~^ ERROR no method named `a` found for type `()` in the current scope [E0599]\n+    //~^ ERROR no method named `a` found\n }"}, {"sha": "3f63cb8e78fbaf5cc8935c6be1a96411260f5604", "filename": "src/test/ui/issues/issue-43189.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `a` found for type `()` in the current scope\n+error[E0599]: no method named `a` found for unit type `()` in the current scope\n   --> $DIR/issue-43189.rs:10:8\n    |\n LL |     ().a();"}, {"sha": "5b6b8f8de18e23a057605d4229bd27291ba956cf", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _result = &Some(42).as_deref();\n-//~^ ERROR no method named `as_deref` found for type `std::option::Option<{integer}>`\n+//~^ ERROR no method named `as_deref` found for enum `std::option::Option<{integer}>`\n }"}, {"sha": "f91f6e891ed90ceb5cd5f1b835aaef4b210dbe59", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref` found for type `std::option::Option<{integer}>` in the current scope\n+error[E0599]: no method named `as_deref` found for enum `std::option::Option<{integer}>` in the current scope\n   --> $DIR/option-as_deref.rs:2:29\n    |\n LL |     let _result = &Some(42).as_deref();"}, {"sha": "c5fe6ea82cb0e6e8a423f16db13ac9eb417602af", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _result = &mut Some(42).as_deref_mut();\n-//~^ ERROR no method named `as_deref_mut` found for type `std::option::Option<{integer}>`\n+//~^ ERROR no method named `as_deref_mut` found for enum `std::option::Option<{integer}>`\n }"}, {"sha": "583236345cac17f5cdefa2be8bd90bbfe7d5c7c2", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref_mut` found for type `std::option::Option<{integer}>` in the current scope\n+error[E0599]: no method named `as_deref_mut` found for enum `std::option::Option<{integer}>` in the current scope\n   --> $DIR/option-as_deref_mut.rs:2:33\n    |\n LL |     let _result = &mut Some(42).as_deref_mut();"}, {"sha": "fae11fe62b16c35c782a502f5f596f7eb73f79d4", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref` found for type `std::result::Result<{integer}, _>` in the current scope\n+error[E0599]: no method named `as_deref` found for enum `std::result::Result<{integer}, _>` in the current scope\n   --> $DIR/result-as_deref.rs:4:27\n    |\n LL |     let _result = &Ok(42).as_deref();"}, {"sha": "48a662e98b54744949b11572627c390a6e5625f8", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref_err` found for type `std::result::Result<_, {integer}>` in the current scope\n+error[E0599]: no method named `as_deref_err` found for enum `std::result::Result<_, {integer}>` in the current scope\n   --> $DIR/result-as_deref_err.rs:4:28\n    |\n LL |     let _result = &Err(41).as_deref_err();"}, {"sha": "2c6231fb3b5890c98afca37f57edd41c9f55e05a", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref_mut` found for type `std::result::Result<{integer}, _>` in the current scope\n+error[E0599]: no method named `as_deref_mut` found for enum `std::result::Result<{integer}, _>` in the current scope\n   --> $DIR/result-as_deref_mut.rs:4:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut();"}, {"sha": "8a5c2f4006051378e5f32bb4de0d4d5864b7eaf2", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref_mut_err` found for type `std::result::Result<_, {integer}>` in the current scope\n+error[E0599]: no method named `as_deref_mut_err` found for enum `std::result::Result<_, {integer}>` in the current scope\n   --> $DIR/result-as_deref_mut_err.rs:4:32\n    |\n LL |     let _result = &mut Err(41).as_deref_mut_err();"}, {"sha": "af8d657999cb0d8c0c97ae2751657733e1a1f828", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_ok.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref_mut_ok` found for type `std::result::Result<{integer}, _>` in the current scope\n+error[E0599]: no method named `as_deref_mut_ok` found for enum `std::result::Result<{integer}, _>` in the current scope\n   --> $DIR/result-as_deref_mut_ok.rs:4:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut_ok();"}, {"sha": "145e610d52c7c527a03f2f73ad1430563426abaa", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_ok.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `as_deref_ok` found for type `std::result::Result<{integer}, _>` in the current scope\n+error[E0599]: no method named `as_deref_ok` found for enum `std::result::Result<{integer}, _>` in the current scope\n   --> $DIR/result-as_deref_ok.rs:4:27\n    |\n LL |     let _result = &Ok(42).as_deref_ok();"}, {"sha": "5bf0579030ad01a341ba7e1596741e2600ec2679", "filename": "src/test/ui/issues/issue-5153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-5153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-5153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5153.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -8,5 +8,5 @@ impl Foo for isize {\n \n fn main() {\n     (&5isize as &dyn Foo).foo();\n-    //~^ ERROR: no method named `foo` found for type `&dyn Foo` in the current scope\n+    //~^ ERROR: no method named `foo` found for reference `&dyn Foo` in the current scope\n }"}, {"sha": "4680c8b131c50a77e4e46b373b2f6835e60de580", "filename": "src/test/ui/issues/issue-5153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5153.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for type `&dyn Foo` in the current scope\n+error[E0599]: no method named `foo` found for reference `&dyn Foo` in the current scope\n   --> $DIR/issue-5153.rs:10:27\n    |\n LL |     (&5isize as &dyn Foo).foo();"}, {"sha": "5222e3ee95d5945bd52330be98219e17896356ec", "filename": "src/test/ui/issues/issue-54062.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,7 +4,7 @@ error[E0616]: field `inner` of struct `std::sync::Mutex` is private\n LL |     let _ = test.comps.inner.lock().unwrap();\n    |             ^^^^^^^^^^^^^^^^\n \n-error[E0599]: no method named `unwrap` found for type `std::sys_common::mutex::MutexGuard<'_>` in the current scope\n+error[E0599]: no method named `unwrap` found for struct `std::sys_common::mutex::MutexGuard<'_>` in the current scope\n   --> $DIR/issue-54062.rs:10:37\n    |\n LL |     let _ = test.comps.inner.lock().unwrap();"}, {"sha": "e762b7bc0c89953489b640cdd48a06facc32562b", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `f` found for type `fn(&u8)` in the current scope\n+error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current scope\n   --> $DIR/issue-57362-1.rs:20:7\n    |\n LL |     a.f();"}, {"sha": "3528084f6ceb4fc02d88faa5914c0bd1e046ef55", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `make_g` found for type `for<'r> fn(&'r ())` in the current scope\n+error[E0599]: no function or associated item named `make_g` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n   --> $DIR/issue-57362-2.rs:22:25\n    |\n LL |     let x = <fn (&())>::make_g();"}, {"sha": "b253c135b8c529fa4c883b8956c142d81af5c464", "filename": "src/test/ui/issues/issue-58734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     Trait::exists(());\n     // no object safety error\n     Trait::nonexistent(());\n-    //~^ ERROR no function or associated item named `nonexistent` found for type `dyn Trait`\n+    //~^ ERROR no function or associated item named `nonexistent` found\n }"}, {"sha": "5e98cfadf8ae7500b8730fa6f8a95c3250eca9ae", "filename": "src/test/ui/issues/issue-58734.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `nonexistent` found for type `dyn Trait` in the current scope\n+error[E0599]: no function or associated item named `nonexistent` found for trait object `dyn Trait` in the current scope\n   --> $DIR/issue-58734.rs:20:12\n    |\n LL |     Trait::nonexistent(());"}, {"sha": "e7a244e9df576619b61c7f964ce2cedad4d07931", "filename": "src/test/ui/issues/issue-64430.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `bar` found for type `Foo` in the current scope\n+error[E0599]: no method named `bar` found for struct `Foo` in the current scope\n   --> $DIR/issue-64430.rs:7:9\n    |\n LL | pub struct Foo;"}, {"sha": "018ce0459fd6f21794251af2a8bf3aab56bf31f4", "filename": "src/test/ui/issues/issue-65284-suggest-generic-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -5,7 +5,7 @@ trait Foo {\n trait Bar {}\n \n fn do_stuff<T : Bar>(t : T) {\n-    t.foo() //~ ERROR no method named `foo` found for type `T` in the current scope\n+    t.foo() //~ ERROR no method named `foo` found\n }\n \n fn main() {}"}, {"sha": "4807a0930e7d02e733b79d148bdbedde68410939", "filename": "src/test/ui/issues/issue-65284-suggest-generic-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65284-suggest-generic-trait-bound.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for type `T` in the current scope\n+error[E0599]: no method named `foo` found for type parameter `T` in the current scope\n   --> $DIR/issue-65284-suggest-generic-trait-bound.rs:8:7\n    |\n LL |     t.foo()"}, {"sha": "d3dcb3380bbccbf89baa5f640e1cf2a75ee572c7", "filename": "src/test/ui/issues/issue-7950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-7950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-7950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7950.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -4,5 +4,5 @@ struct Foo;\n \n fn main() {\n     Foo::bar();\n-    //~^ ERROR no function or associated item named `bar` found for type `Foo`\n+    //~^ ERROR no function or associated item named `bar` found for struct `Foo`\n }"}, {"sha": "73e13c65cf37f23e51b388d8d87eb752fcce38cb", "filename": "src/test/ui/issues/issue-7950.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7950.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no function or associated item named `bar` found for type `Foo` in the current scope\n+error[E0599]: no function or associated item named `bar` found for struct `Foo` in the current scope\n   --> $DIR/issue-7950.rs:6:10\n    |\n LL | struct Foo;"}, {"sha": "6bb0877e9b9bafe463240d81eebbe565591808bb", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -9,7 +9,7 @@ help: possible better candidate is found in another module, you can import it in\n LL | use T;\n    |\n \n-error[E0599]: no function or associated item named `f` found for type `Foo` in the current scope\n+error[E0599]: no function or associated item named `f` found for type parameter `Foo` in the current scope\n   --> $DIR/lexical-scopes.rs:10:10\n    |\n LL |     Foo::f();"}, {"sha": "5ff4b412667c23ad249784d6d757cc6e7907d0b7", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -15,6 +15,6 @@ fn main() {\n \n     let y = Foo;\n     y.zero()\n-     .take()    //~ ERROR no method named `take` found for type `Foo` in the current scope\n+     .take()    //~ ERROR no method named `take` found\n      .one(0);\n }"}, {"sha": "7efdd91708a80618bd0b206e233b4a613db76f7c", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -25,7 +25,7 @@ LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n LL |      .two(0);\n    |       ^^^ expected 2 parameters\n \n-error[E0599]: no method named `take` found for type `Foo` in the current scope\n+error[E0599]: no method named `take` found for struct `Foo` in the current scope\n   --> $DIR/method-call-err-msg.rs:18:7\n    |\n LL | pub struct Foo;"}, {"sha": "f8d677b99d6934a2462c8380e5b5048bf6d6534c", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `count` found for type `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` in the current scope\n+error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` in the current scope\n   --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();"}, {"sha": "58ceaffc96400f2dcce4292a9100f626fdbb1214", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -3,5 +3,5 @@ struct Foo;\n fn main() {\n     let a: Result<(), Foo> = Ok(());\n     a.unwrap();\n-    //~^ ERROR no method named `unwrap` found for type `std::result::Result<(), Foo>`\n+    //~^ ERROR no method named `unwrap` found\n }"}, {"sha": "bbfb00050566a4d289f27743ea1837c591eaa954", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `unwrap` found for type `std::result::Result<(), Foo>` in the current scope\n+error[E0599]: no method named `unwrap` found for enum `std::result::Result<(), Foo>` in the current scope\n   --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n LL |     a.unwrap();"}, {"sha": "d6426d2cfabfda31785f8dbccf1f5f8696b3daba", "filename": "src/test/ui/never_type/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -11,5 +11,5 @@ impl<A> VecMonad<A> for Vec<A> {\n }\n fn main() {\n     [\"hi\"].bind(|x| [x] );\n-    //~^ ERROR no method named `bind` found for type `[&str; 1]` in the current scope\n+    //~^ ERROR no method named `bind` found\n }"}, {"sha": "9645244751dabe6e8c23c2800517ae74a7c33e6f", "filename": "src/test/ui/never_type/issue-2149.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-2149.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -6,7 +6,7 @@ LL |         for elt in self { r = r + f(*elt); }\n    |\n    = help: the trait `std::ops::Add<std::vec::Vec<B>>` is not implemented for `()`\n \n-error[E0599]: no method named `bind` found for type `[&str; 1]` in the current scope\n+error[E0599]: no method named `bind` found for array `[&str; 1]` in the current scope\n   --> $DIR/issue-2149.rs:13:12\n    |\n LL |     [\"hi\"].bind(|x| [x] );"}, {"sha": "074ed66a261836c4e986e348dbdee4356849dd62", "filename": "src/test/ui/non-copyable-void.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for type `libc::c_void` in the current scope\n+error[E0599]: no method named `clone` found for enum `libc::c_void` in the current scope\n   --> $DIR/non-copyable-void.rs:11:23\n    |\n LL |         let _z = (*y).clone();"}, {"sha": "6c3c4a6ac98884b7552ba53d1b08e51a3a765669", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for type `Foo` in the current scope\n+error[E0599]: no method named `clone` found for struct `Foo` in the current scope\n   --> $DIR/noncopyable-class.rs:34:16\n    |\n LL | struct Foo {"}]}