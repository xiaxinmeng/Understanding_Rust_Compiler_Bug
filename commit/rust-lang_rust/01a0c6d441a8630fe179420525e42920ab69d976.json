{"sha": "01a0c6d441a8630fe179420525e42920ab69d976", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTBjNmQ0NDFhODYzMGZlMTc5NDIwNTI1ZTQyOTIwYWI2OWQ5NzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-13T21:00:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-13T21:27:13Z"}, "message": "rustc_metadata: Remove `rmeta::MacroDef`\n\nUse `ast::MacroDef` instead.\n\nAlso remove `Session::imported_macro_spans`, external macros have spans now.", "tree": {"sha": "494b803bff0e23c103c4466e83bbdeaf28a2a2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/494b803bff0e23c103c4466e83bbdeaf28a2a2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a0c6d441a8630fe179420525e42920ab69d976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a0c6d441a8630fe179420525e42920ab69d976", "html_url": "https://github.com/rust-lang/rust/commit/01a0c6d441a8630fe179420525e42920ab69d976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a0c6d441a8630fe179420525e42920ab69d976/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "html_url": "https://github.com/rust-lang/rust/commit/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd"}], "stats": {"total": 81, "additions": 21, "deletions": 60}, "files": [{"sha": "e5c30ca0d57d0fb1b7486764edbf7e3c97fe8598", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -1446,7 +1446,7 @@ impl MacDelimiter {\n }\n \n /// Represents a macro definition.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct MacroDef {\n     pub body: P<MacArgs>,\n     /// `true` if macro was defined with `macro_rules`."}, {"sha": "b2e0a28e42e48c45ea0243be1af23fe3a1dc8261", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -6,6 +6,7 @@ use rustc::bug;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n+use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -219,18 +220,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n \n-        if let ItemKind::MacroDef(ref def) = i.kind {\n-            if !def.legacy || attr::contains_name(&i.attrs, sym::macro_export) {\n-                let body = self.lower_token_stream(def.body.inner_tokens());\n+        if let ItemKind::MacroDef(MacroDef { ref body, legacy }) = i.kind {\n+            if !legacy || attr::contains_name(&i.attrs, sym::macro_export) {\n                 let hir_id = self.lower_node_id(i.id);\n+                let body = P(self.lower_mac_args(body));\n                 self.exported_macros.push(hir::MacroDef {\n-                    name: ident.name,\n+                    ident,\n                     vis,\n                     attrs,\n                     hir_id,\n                     span: i.span,\n-                    body,\n-                    legacy: def.legacy,\n+                    ast: MacroDef { body, legacy },\n                 });\n             } else {\n                 self.non_exported_macro_attrs.extend(attrs.iter().cloned());"}, {"sha": "fc6a9e39645cc17a2e1f458b3a857ca88079d1ef", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -13,7 +13,6 @@ use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyl\n pub use rustc_ast::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::node_id::NodeMap;\n-use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n@@ -722,13 +721,12 @@ impl Crate<'_> {\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct MacroDef<'hir> {\n-    pub name: Name,\n+    pub ident: Ident,\n     pub vis: Visibility<'hir>,\n     pub attrs: &'hir [Attribute],\n     pub hir_id: HirId,\n     pub span: Span,\n-    pub body: TokenStream,\n-    pub legacy: bool,\n+    pub ast: ast::MacroDef,\n }\n \n /// A block of statements `{ .. }`, which may have a label (in this case the"}, {"sha": "05bcfa344a19e94512ed4bbab17e12f6d38a0940", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -445,7 +445,7 @@ pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n \n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef<'v>) {\n     visitor.visit_id(macro_def.hir_id);\n-    visitor.visit_name(macro_def.span, macro_def.name);\n+    visitor.visit_ident(macro_def.ident);\n     walk_list!(visitor, visit_attribute, macro_def.attrs);\n }\n "}, {"sha": "1c6cc9a8b74bb23b38b9fde5b22fc7ee8fa47c24", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -17,8 +17,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_ast::ptr::P;\n-use rustc_ast::tokenstream::DelimSpan;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -415,34 +413,28 @@ impl CStore {\n         }\n \n         let span = data.get_span(id.index, sess);\n-        let dspan = DelimSpan::from_single(span);\n-        let rmeta::MacroDef { body, legacy } = data.get_macro(id.index, sess);\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);\n         for attr in attrs.iter() {\n             attr::mark_used(attr);\n         }\n \n-        let name = data\n+        let ident = data\n             .def_key(id.index)\n             .disambiguated_data\n             .data\n             .get_opt_name()\n+            .map(ast::Ident::with_dummy_span) // FIXME: cross-crate hygiene\n             .expect(\"no name in load_macro\");\n-        sess.imported_macro_spans.borrow_mut().insert(span, (name.to_string(), span));\n \n         LoadedMacro::MacroDef(\n             ast::Item {\n-                // FIXME: cross-crate hygiene\n-                ident: ast::Ident::with_dummy_span(name),\n+                ident,\n                 id: ast::DUMMY_NODE_ID,\n                 span,\n                 attrs: attrs.iter().cloned().collect(),\n-                kind: ast::ItemKind::MacroDef(ast::MacroDef {\n-                    body: P(ast::MacArgs::Delimited(dspan, ast::MacDelimiter::Brace, body)),\n-                    legacy,\n-                }),\n+                kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n                 vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 tokens: None,\n             },"}, {"sha": "c196bafc30b9545ece7bbeb81b7058871a7e6879", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -1236,10 +1236,7 @@ impl EncodeContext<'tcx> {\n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n-        record!(self.per_def.kind[def_id] <- EntryKind::MacroDef(self.lazy(MacroDef {\n-            body: macro_def.body.clone(),\n-            legacy: macro_def.legacy,\n-        })));\n+        record!(self.per_def.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);\n         record!(self.per_def.span[def_id] <- macro_def.span);\n         record!(self.per_def.attributes[def_id] <- macro_def.attrs);"}, {"sha": "152bb257fa22c592f085c534a11e775cb6cee807", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -10,8 +10,7 @@ use rustc::mir;\n use rustc::session::config::SymbolManglingVersion;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n-use rustc_ast::ast;\n-use rustc_ast::tokenstream::TokenStream;\n+use rustc_ast::ast::{self, MacroDef};\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -323,12 +322,6 @@ struct ModData {\n     reexports: Lazy<[Export<hir::HirId>]>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n-struct MacroDef {\n-    body: TokenStream,\n-    legacy: bool,\n-}\n-\n #[derive(RustcEncodable, RustcDecodable)]\n struct FnData {\n     asyncness: hir::IsAsync,"}, {"sha": "d61ba60da31542d73ad85a1ec68e4f70cbd19501", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -920,7 +920,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        if attr::find_transparency(&md.attrs, md.legacy).0 != Transparency::Opaque {\n+        if attr::find_transparency(&md.attrs, md.ast.legacy).0 != Transparency::Opaque {\n             self.update(md.hir_id, Some(AccessLevel::Public));\n             return;\n         }"}, {"sha": "a2b757ca1b38d19b1f69ba6efe40b400257989e1", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -794,19 +794,6 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ExpnKind::Root | ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => return None,\n         };\n \n-        // If the callee is an imported macro from an external crate, need to get\n-        // the source span and name from the session, as their spans are localized\n-        // when read in, and no longer correspond to the source.\n-        if let Some(mac) = self.tcx.sess.imported_macro_spans.borrow().get(&callee.def_site) {\n-            let &(ref mac_name, mac_span) = mac;\n-            let mac_span = self.span_from_span(mac_span);\n-            return Some(MacroRef {\n-                span: callsite_span,\n-                qualname: mac_name.clone(), // FIXME: generate the real qualname\n-                callee_span: mac_span,\n-            });\n-        }\n-\n         let callee_span = self.span_from_span(callee.def_site);\n         Some(MacroRef {\n             span: callsite_span,"}, {"sha": "d5046bdbe29e4fe7e21b6b5dca0a9fde18ddf2dc", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -103,11 +103,6 @@ pub struct Session {\n     /// The maximum blocks a const expression can evaluate.\n     pub const_eval_limit: Once<usize>,\n \n-    /// Map from imported macro spans (which consist of\n-    /// the localized span for the macro body) to the\n-    /// macro name and definition span in the source crate.\n-    pub imported_macro_spans: OneThread<RefCell<FxHashMap<Span, (String, Span)>>>,\n-\n     incr_comp_session: OneThread<RefCell<IncrCompSession>>,\n     /// Used for incremental compilation tests. Will only be populated if\n     /// `-Zquery-dep-graph` is specified.\n@@ -1080,7 +1075,6 @@ fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_limit: Once::new(),\n-        imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,\n         prof,"}, {"sha": "1d54fe5e4fb5719502e7a663b575f90fdec81520", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -955,7 +955,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'hir hir::MacroDef) {\n-        self.visit_testable(macro_def.name.to_string(), &macro_def.attrs, |_| ());\n+        self.visit_testable(macro_def.ident.to_string(), &macro_def.attrs, |_| ());\n     }\n }\n "}, {"sha": "a15b5fa38ccbe50ab5b7a6fbadd11d7ec18b90c2", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a0c6d441a8630fe179420525e42920ab69d976/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=01a0c6d441a8630fe179420525e42920ab69d976", "patch": "@@ -620,16 +620,16 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         def: &'tcx hir::MacroDef,\n         renamed: Option<ast::Name>,\n     ) -> Macro<'tcx> {\n-        debug!(\"visit_local_macro: {}\", def.name);\n-        let tts = def.body.trees().collect::<Vec<_>>();\n+        debug!(\"visit_local_macro: {}\", def.ident);\n+        let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n \n         Macro {\n             hid: def.hir_id,\n             def_id: self.cx.tcx.hir().local_def_id(def.hir_id),\n             attrs: &def.attrs,\n-            name: renamed.unwrap_or(def.name),\n+            name: renamed.unwrap_or(def.ident.name),\n             whence: def.span,\n             matchers,\n             imported_from: None,"}]}