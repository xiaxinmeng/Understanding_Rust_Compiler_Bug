{"sha": "4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZWRmNWVkZDUxZDBlMGIxYjQ1YTYxNDAzODQyZjg0MDZlMTNiMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-02T10:04:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-02T10:04:46Z"}, "message": "Auto merge of #77396 - wesleywiser:disable-simplifyarmidentity, r=oli-obk\n\nDisable the SimplifyArmIdentity mir-opt\n\nThe optimization still has some bugs that need to be worked out\nsuch as #77359.\n\nWe can try re-enabling this again after the known issues are resolved.\n\nr? `@oli-obk`", "tree": {"sha": "84ed50b430dbc1ee7343edd88106b796a8c379af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84ed50b430dbc1ee7343edd88106b796a8c379af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "html_url": "https://github.com/rust-lang/rust/commit/4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154f1f544dd68f7b53ff8d9952811e855f4c2d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/154f1f544dd68f7b53ff8d9952811e855f4c2d7c", "html_url": "https://github.com/rust-lang/rust/commit/154f1f544dd68f7b53ff8d9952811e855f4c2d7c"}, {"sha": "f9d7720be7805d24f5f9c14e33b22f7ca3c7b964", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d7720be7805d24f5f9c14e33b22f7ca3c7b964", "html_url": "https://github.com/rust-lang/rust/commit/f9d7720be7805d24f5f9c14e33b22f7ca3c7b964"}], "stats": {"total": 347, "additions": 195, "deletions": 152}, "files": [{"sha": "b2c889bfd05e8af1883c0c010005b3dedec27f5f", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -367,7 +367,12 @@ fn optimization_applies<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        // FIXME(77359): This optimization can result in unsoundness.\n+        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+            return;\n+        }\n+\n         trace!(\"running SimplifyArmIdentity on {:?}\", source);\n         let local_uses = LocalUseCounter::get_local_uses(body);\n         let (basic_blocks, local_decls, debug_info) ="}, {"sha": "d30b706eafcfaf5fbe71c2a734600427b87b7e93", "filename": "src/test/codegen/try_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fcodegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_identity.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes -Z mir-opt-level=2\n+// compile-flags: -C no-prepopulate-passes -Z mir-opt-level=2 -Zunsound-mir-opts\n \n // Ensure that `x?` has no overhead on `Result<T, E>` due to identity `match`es in lowering.\n // This requires inlining to trigger the MIR optimizations in `SimplifyArmIdentity`."}, {"sha": "a7df786357b357caa69f010ae7f2223d26ddaa30", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=2\n+// compile-flags: -Z mir-opt-level=2 -Zunsound-mir-opts\n // EMIT_MIR simplify_arm.id.SimplifyArmIdentity.diff\n // EMIT_MIR simplify_arm.id.SimplifyBranchSame.diff\n // EMIT_MIR simplify_arm.id_result.SimplifyArmIdentity.diff"}, {"sha": "84f57deccf7e0fa810dbe1039d5e2da91b1b9cc7", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zunsound-mir-opts\n+\n fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n     match x {\n         None => None,"}, {"sha": "760fb747f7229aac41b6abb9cb2db08c3720c3fe", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "760fb747f7229aac41b6abb9cb2db08c3720c3fe", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `map` after SimplifyLocals\n   \n   fn map(_1: Option<Box<()>>) -> Option<Box<()>> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n-      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n--     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n--     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n--     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:8: 3:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:31: 3:46\n+-     let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:25: 6:26\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:14: 6:15\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n--         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n-          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2\n       }\n   }\n   "}, {"sha": "eb307de20744a7c63dffc368842c01c9940e61b9", "filename": "src/test/mir-opt/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zunsound-mir-opts\n // EMIT_MIR simplify_try.try_identity.SimplifyArmIdentity.diff\n // EMIT_MIR simplify_try.try_identity.SimplifyBranchSame.after.mir\n // EMIT_MIR simplify_try.try_identity.SimplifyLocals.after.mir"}, {"sha": "2af387a73b762e14c1dd8fbca7128e4773900803", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -2,35 +2,35 @@\n + // MIR for `try_identity` after DestinationPropagation\n   \n   fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n       scope 1 {\n-          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+          debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n       }\n       scope 2 {\n-          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+          debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n               scope 7 {\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n           }\n       }\n       scope 4 {\n-          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+          debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n           scope 5 {\n           }\n       }\n@@ -40,29 +40,29 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+-         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+-         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n -         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+-         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n++         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n +         nop;                             // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n       }\n   \n       bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+-         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n++         nop;                             // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n++         nop;                             // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   }\n   "}, {"sha": "284ebfab9acf5ed046593dd10d14f51a3fc0dadc", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `try_identity` after SimplifyArmIdentity\n   \n   fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n+      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n       }\n       scope 2 {\n--         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n-+         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n               scope 7 {\n -                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n@@ -29,13 +29,13 @@\n               scope 8 {\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n+                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n               }\n           }\n       }\n       scope 4 {\n--         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n-+         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n++         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n           scope 5 {\n           }\n       }\n@@ -44,51 +44,51 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n           _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n       }\n   \n       bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:7:13: 7:15\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:8:8: 8:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:8:8: 8:9\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+-         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+-         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+-         _2 = _10;                        // scope 5 at $DIR/simplify_try.rs:8:13: 8:15\n+-         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n++         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+-         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n+-         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:9:8: 9:9\n+-         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+-         discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+-         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:9:9: 9:10\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n       }\n   \n       bb2: {\n--         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n--         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n--         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageLive(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageLive(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         _9 = _6;                         // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         _8 = move _9;                    // scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n--         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageDead(_9);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n -         StorageLive(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         _12 = move _8;                   // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         ((_0 as Err).0: i32) = move _12; // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         discriminant(_0) = 1;            // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n -         StorageDead(_12);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n--         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:7:14: 7:15\n--         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+-         StorageDead(_8);                 // scope 3 at $DIR/simplify_try.rs:8:14: 8:15\n+-         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n +         _0 = move _3;                    // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+          return;                          // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n       }\n   }\n   "}, {"sha": "ceb5bfb19a133d41cd336fae934515f8bcfec51f", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,35 +1,35 @@\n // MIR for `try_identity` after SimplifyBranchSame\n \n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n+    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:9:8: 9:9\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n             scope 7 {\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n+                let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:14: 8:15\n             }\n         }\n     }\n     scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n         scope 5 {\n         }\n     }\n@@ -38,20 +38,20 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n+        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:8:9: 8:10\n+        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:15\n+        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n         _3 = move _4;                    // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n+        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:8:14: 8:15\n     }\n \n     bb1: {\n-        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+        _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:9:5: 9:10\n+        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:8:15: 8:16\n+        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:10:1: 10:2\n+        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n     }\n }"}, {"sha": "508f2705d07016b85a11526fd199fa7cbc61fcff", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,13 +1,13 @@\n // MIR for `try_identity` after SimplifyLocals\n \n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n+    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:7:17: 7:18\n+    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:7:41: 7:57\n     scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:8:9: 8:10\n     }\n     scope 2 {\n-        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n             scope 7 {\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n@@ -18,7 +18,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         }\n     }\n     scope 4 {\n-        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:8:13: 8:15\n         scope 5 {\n         }\n     }\n@@ -27,7 +27,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-        return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n+        _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:8:13: 8:14\n+        return;                          // scope 0 at $DIR/simplify_try.rs:10:2: 10:2\n     }\n }"}, {"sha": "d102f8415be2674cbc8b801e7e7d64bfb2dae8d9", "filename": "src/test/mir-opt/simplify_try_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmir-opt-level=1\n+// compile-flags: -Zmir-opt-level=1 -Zunsound-mir-opts\n // EMIT_MIR simplify_try_if_let.{impl#0}-append.SimplifyArmIdentity.diff\n \n use std::ptr::NonNull;"}, {"sha": "e58ba50a9e585c54b91c5cc47173aafee66b12e4", "filename": "src/test/ui/mir/issue-77359-simplify-arm-identity-.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fui%2Fmir%2Fissue-77359-simplify-arm-identity-.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dedf5edd51d0e0b1b45a61403842f8406e13b2c/src%2Ftest%2Fui%2Fmir%2Fissue-77359-simplify-arm-identity-.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-77359-simplify-arm-identity-.rs?ref=4dedf5edd51d0e0b1b45a61403842f8406e13b2c", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+#[derive(Debug)]\n+enum MyEnum {\n+    Variant1(Vec<u8>),\n+    Variant2,\n+    Variant3,\n+    Variant4,\n+}\n+\n+fn f(arg1: &bool, arg2: &bool, arg3: bool) -> MyStruct {\n+    if *arg1 {\n+        println!(\"{:?}\", f(&arg2, arg2, arg3));\n+        MyStruct(None)\n+    } else {\n+        match if arg3 { Some(MyEnum::Variant3) } else { None } {\n+            Some(t) => {\n+                let ah = t;\n+                return MyStruct(Some(ah));\n+            }\n+            _ => MyStruct(None)\n+        }\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct MyStruct(Option<MyEnum>);\n+\n+fn main() {\n+    let arg1 = true;\n+    let arg2 = false;\n+    f(&arg1, &arg2, true);\n+}"}]}