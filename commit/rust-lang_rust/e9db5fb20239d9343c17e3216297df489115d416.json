{"sha": "e9db5fb20239d9343c17e3216297df489115d416", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZGI1ZmIyMDIzOWQ5MzQzYzE3ZTMyMTYyOTdkZjQ4OTExNWQ0MTY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-02T23:31:23Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-07T23:41:48Z"}, "message": "Tidying up, fix some minor linkage bugs, use ty flags to avoid caching closure types.", "tree": {"sha": "6270d0eec7c07bcd60e61282d9d94700d479c253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6270d0eec7c07bcd60e61282d9d94700d479c253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9db5fb20239d9343c17e3216297df489115d416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9db5fb20239d9343c17e3216297df489115d416", "html_url": "https://github.com/rust-lang/rust/commit/e9db5fb20239d9343c17e3216297df489115d416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9db5fb20239d9343c17e3216297df489115d416/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f9f2fe97e78bd7dbdfc477b765d5e6dc930b9eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9f2fe97e78bd7dbdfc477b765d5e6dc930b9eb", "html_url": "https://github.com/rust-lang/rust/commit/8f9f2fe97e78bd7dbdfc477b765d5e6dc930b9eb"}], "stats": {"total": 154, "additions": 75, "deletions": 79}, "files": [{"sha": "6d83ab152d5bcb576146e647cb1bf5442b0dbe8c", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -50,9 +50,6 @@ pub enum DefIdSource {\n     // Identifies a type alias (`type X = ...`).\n     TypeWithId,\n \n-    // Identifies a type parameter (`fn foo<X>() { ... }`).\n-    TypeParameter,\n-\n     // Identifies a region parameter (`fn foo<'X>() { ... }`).\n     RegionParameter,\n \n@@ -193,7 +190,7 @@ pub fn parse_substs_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: us\n                                   tcx: &ty::ctxt<'tcx>, conv: F) -> subst::Substs<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    debug!(\"parse_substs_data {}\", data_log_string(data, pos));\n+    debug!(\"parse_substs_data{}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_substs(&mut st, conv)\n }\n@@ -542,7 +539,14 @@ fn parse_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> Ty<'tcx> w\n                                          len: len };\n \n         match tcx.rcache.borrow().get(&key).cloned() {\n-          Some(tt) => return tt,\n+          Some(tt) => {\n+            // If there is a closure buried in the type some where, then we\n+            // need to re-convert any def ids (see case 'k', below). That means\n+            // we can't reuse the cached version.\n+            if !ty::type_has_ty_closure(tt) {\n+                return tt;\n+            }\n+          }\n           None => {}\n         }\n         let mut ps = PState {"}, {"sha": "3242dafbd1cc14975b3c44afafa7c3cbb7c8f2d9", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -20,7 +20,7 @@ use middle::def;\n use metadata::encoder as e;\n use middle::region;\n use metadata::tydecode;\n-use metadata::tydecode::{DefIdSource, NominalType, TypeWithId, TypeParameter};\n+use metadata::tydecode::{DefIdSource, NominalType, TypeWithId};\n use metadata::tydecode::{RegionParameter, ClosureSource};\n use metadata::tyencode;\n use middle::cast;\n@@ -346,13 +346,6 @@ impl<D:serialize::Decoder> def_id_decoder_helpers for D\n // ______________________________________________________________________\n // Encoding and decoding the AST itself\n //\n-// The hard work is done by an autogenerated module astencode_gen.  To\n-// regenerate astencode_gen, run src/etc/gen-astencode.  It will\n-// replace astencode_gen with a dummy file and regenerate its\n-// contents.  If you get compile errors, the dummy file\n-// remains---resolve the errors and then rerun astencode_gen.\n-// Annoying, I know, but hopefully only temporary.\n-//\n // When decoding, we have to renumber the AST so that the node ids that\n // appear within are disjoint from the node ids in our existing ASTs.\n // We also have to adjust the spans: for now we just insert a dummy span,\n@@ -656,35 +649,6 @@ impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n     }\n }\n \n-impl<'tcx> tr for MethodOrigin<'tcx> {\n-    fn tr(&self, dcx: &DecodeContext) -> MethodOrigin<'tcx> {\n-        match *self {\n-            ty::MethodStatic(did) => ty::MethodStatic(did.tr(dcx)),\n-            ty::MethodStaticClosure(did) => {\n-                ty::MethodStaticClosure(did.tr(dcx))\n-            }\n-            ty::MethodTypeParam(ref mp) => {\n-                ty::MethodTypeParam(\n-                    ty::MethodParam {\n-                        // def-id is already translated when we read it out\n-                        trait_ref: mp.trait_ref.clone(),\n-                        method_num: mp.method_num,\n-                        impl_def_id: mp.impl_def_id.tr(dcx),\n-                    }\n-                )\n-            }\n-            ty::MethodTraitObject(ref mo) => {\n-                ty::MethodTraitObject(\n-                    ty::MethodObject {\n-                        trait_ref: mo.trait_ref.clone(),\n-                        .. *mo\n-                    }\n-                )\n-            }\n-        }\n-    }\n-}\n-\n pub fn encode_closure_kind(ebml_w: &mut Encoder, kind: ty::ClosureKind) {\n     kind.encode(ebml_w).unwrap();\n }\n@@ -1473,10 +1437,10 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                            -> subst::Substs<'tcx> {\n         self.read_opaque(|this, doc| {\n             Ok(tydecode::parse_substs_data(doc.data,\n-                                        dcx.cdata.cnum,\n-                                        doc.start,\n-                                        dcx.tcx,\n-                                        |s, a| this.convert_def_id(dcx, s, a)))\n+                                           dcx.cdata.cnum,\n+                                           doc.start,\n+                                           dcx.tcx,\n+                                           |s, a| this.convert_def_id(dcx, s, a)))\n         }).unwrap()\n     }\n \n@@ -1617,7 +1581,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                       -> ast::DefId {\n         let r = match source {\n             NominalType | TypeWithId | RegionParameter => dcx.tr_def_id(did),\n-            TypeParameter | ClosureSource => dcx.tr_intern_def_id(did)\n+            ClosureSource => dcx.tr_intern_def_id(did)\n         };\n         debug!(\"convert_def_id(source={:?}, did={:?})={:?}\", source, did, r);\n         return r;"}, {"sha": "f4a9fb128a10ebb92f076b372213fe2cc5791d20", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -814,6 +814,7 @@ bitflags! {\n         const HAS_REGIONS       = 1 << 5,\n         const HAS_TY_ERR        = 1 << 6,\n         const HAS_PROJECTION    = 1 << 7,\n+        const HAS_TY_CLOSURE    = 1 << 8,\n         const NEEDS_SUBST       = TypeFlags::HAS_PARAMS.bits |\n                                   TypeFlags::HAS_SELF.bits |\n                                   TypeFlags::HAS_REGIONS.bits,\n@@ -985,6 +986,9 @@ pub fn type_needs_infer(ty: Ty) -> bool {\n pub fn type_has_projection(ty: Ty) -> bool {\n     ty.flags.get().intersects(TypeFlags::HAS_PROJECTION)\n }\n+pub fn type_has_ty_closure(ty: Ty) -> bool {\n+    ty.flags.intersects(TypeFlags::HAS_TY_CLOSURE)\n+}\n \n pub fn type_has_late_bound_regions(ty: Ty) -> bool {\n     ty.flags.get().intersects(TypeFlags::HAS_RE_LATE_BOUND)\n@@ -2960,6 +2964,7 @@ impl FlagComputation {\n             }\n \n             &ty_closure(_, substs) => {\n+                self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_substs(substs);\n             }\n "}, {"sha": "3eb2e9470d613a847cf2b610d5162dcd1188897b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -304,11 +304,14 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         s\n     }\n \n-    fn closure_to_string<'tcx>(cx: &ctxt<'tcx>, cty: &ty::ClosureTy<'tcx>) -> String {\n+    fn closure_to_string<'tcx>(cx: &ctxt<'tcx>,\n+                               cty: &ty::ClosureTy<'tcx>,\n+                               did: &ast::DefId)\n+                               -> String {\n         let mut s = String::new();\n         s.push_str(\"[closure\");\n         push_sig_to_string(cx, &mut s, '(', ')', &cty.sig);\n-        s.push(']');\n+        s.push_str(&format!(\" id={:?}]\", did));\n         s\n     }\n \n@@ -407,13 +410,13 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         ty_closure(ref did, substs) => {\n             let closure_tys = cx.closure_tys.borrow();\n             closure_tys.get(did).map(|closure_type| {\n-                closure_to_string(cx, &closure_type.subst(cx, substs))\n+                closure_to_string(cx, &closure_type.subst(cx, substs), did)\n             }).unwrap_or_else(|| {\n                 if did.krate == ast::LOCAL_CRATE {\n                     let span = cx.map.span(did.node);\n-                    format!(\"[closure {}]\", span.repr(cx))\n+                    format!(\"[closure {} id={:?}]\", span.repr(cx), did)\n                 } else {\n-                    format!(\"[closure]\")\n+                    format!(\"[closure id={:?}]\", did)\n                 }\n             })\n         }"}, {"sha": "31c9b60f478a28150268e7414a05c88df2286283", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -117,9 +117,8 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n             _ => {\n                 bcx.tcx().sess.span_bug(\n                     expr.span,\n-                    &format!(\"type of callee is neither bare-fn nor closure: \\\n-                             {}\",\n-                            bcx.ty_to_string(datum.ty)));\n+                    &format!(\"type of callee is neither bare-fn nor closure: {}\",\n+                             bcx.ty_to_string(datum.ty)));\n             }\n         }\n     }\n@@ -506,6 +505,9 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n         false\n     };\n \n+    debug!(\"trans_fn_ref_with_substs({}) must_monomorphise: {}\",\n+           def_id.repr(tcx), must_monomorphise);\n+\n     // Create a monomorphic version of generic functions\n     if must_monomorphise {\n         // Should be either intra-crate or inlined."}, {"sha": "e046b5cb111935535f6d29c29d20009c066668da", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -153,7 +153,8 @@ pub fn get_or_create_declaration_if_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n \n     match ccx.closure_vals().borrow().get(&mono_id) {\n         Some(&llfn) => {\n-            debug!(\"get_or_create_declaration_if_closure(): found closure\");\n+            debug!(\"get_or_create_declaration_if_closure(): found closure {:?}: {:?}\",\n+                   mono_id, ccx.tn().val_to_string(llfn));\n             return Some(Datum::new(llfn, function_type, Rvalue::new(ByValue)))\n         }\n         None => {}\n@@ -173,9 +174,10 @@ pub fn get_or_create_declaration_if_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n     attributes::inline(llfn, attributes::InlineAttr::Hint);\n \n     debug!(\"get_or_create_declaration_if_closure(): inserting new \\\n-            closure {:?} (type {})\",\n+            closure {:?} (type {}): {:?}\",\n            mono_id,\n-           ccx.tn().type_to_string(val_ty(llfn)));\n+           ccx.tn().type_to_string(val_ty(llfn)),\n+           ccx.tn().val_to_string(llfn));\n     ccx.closure_vals().borrow_mut().insert(mono_id, llfn);\n \n     Some(Datum::new(llfn, function_type, Rvalue::new(ByValue)))\n@@ -198,9 +200,9 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n         Dest::Ignore(ccx) => ccx\n     };\n     let tcx = ccx.tcx();\n-    let _icx = push_ctxt(\"closure::trans_closure\");\n+    let _icx = push_ctxt(\"closure::trans_closure_expr\");\n \n-    debug!(\"trans_closure()\");\n+    debug!(\"trans_closure_expr()\");\n \n     let closure_id = ast_util::local_def(id);\n     let llfn = get_or_create_declaration_if_closure(\n@@ -230,15 +232,15 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n                   &[],\n                   sig.output,\n                   function_type.abi,\n-                  ClosureEnv::Closure(&freevars[..]));\n+                  ClosureEnv::Closure(&freevars));\n \n     // Don't hoist this to the top of the function. It's perfectly legitimate\n     // to have a zero-size closure (in which case dest will be `Ignore`) and\n     // we must still generate the closure body.\n     let (mut bcx, dest_addr) = match dest {\n         Dest::SaveIn(bcx, p) => (bcx, p),\n         Dest::Ignore(_) => {\n-            debug!(\"trans_closure() ignoring result\");\n+            debug!(\"trans_closure_expr() ignoring result\");\n             return None;\n         }\n     };"}, {"sha": "6259f8fe1cc2e4591f2d377d51c605cd8dcabaeb", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -1000,7 +1000,8 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         None => { }\n     }\n \n-    debug!(\"trans fulfill_obligation: trait_ref={}\", trait_ref.repr(ccx.tcx()));\n+    debug!(\"trans fulfill_obligation: trait_ref={} def_id={:?}\",\n+           trait_ref.repr(ccx.tcx()), trait_ref.def_id());\n \n     ty::populate_implementations_for_trait_if_necessary(tcx, trait_ref.def_id());\n     let infcx = infer::new_infer_ctxt(tcx);"}, {"sha": "0afaf88aaad911c918d707cdf494579010020ba8", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -221,13 +221,16 @@ pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                           qualif: check_const::ConstQualif,\n                                           param_substs: &'tcx Substs<'tcx>)\n                                           -> ValueRef {\n+    debug!(\"get_const_expr_as_global: {:?}\", expr.id);\n     // Special-case constants to cache a common global for all uses.\n     match expr.node {\n         ast::ExprPath(..) => {\n             let def = ccx.tcx().def_map.borrow().get(&expr.id).unwrap().full_def();\n             match def {\n                 def::DefConst(def_id) | def::DefAssociatedConst(def_id, _) => {\n                     if !ccx.tcx().adjustments.borrow().contains_key(&expr.id) {\n+                        debug!(\"get_const_expr_as_global ({:?}): found const {:?}\",\n+                               expr.id, def_id);\n                         return get_const_val(ccx, def_id, expr);\n                     }\n                 }\n@@ -911,7 +914,9 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n           }\n           ast::ExprClosure(_, ref decl, ref body) => {\n             closure::trans_closure_expr(closure::Dest::Ignore(cx),\n-                                        &**decl, &**body, e.id,\n+                                        decl,\n+                                        body,\n+                                        e.id,\n                                         param_substs);\n             C_null(type_of::type_of(cx, ety))\n           }"}, {"sha": "3818739c6cce8427858165b0b7af99064eb28407", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -73,7 +73,6 @@ pub struct SharedCrateContext<'tcx> {\n     check_overflow: bool,\n     check_drop_flag_for_sanity: bool,\n \n-    available_monomorphizations: RefCell<FnvHashSet<String>>,\n     available_drop_glues: RefCell<FnvHashMap<DropGlueKind<'tcx>, String>>,\n     use_dll_storage_attrs: bool,\n }\n@@ -100,6 +99,7 @@ pub struct LocalCrateContext<'tcx> {\n     /// Cache instances of monomorphized functions\n     monomorphized: RefCell<FnvHashMap<MonoId<'tcx>, ValueRef>>,\n     monomorphizing: RefCell<DefIdMap<usize>>,\n+    available_monomorphizations: RefCell<FnvHashSet<String>>,\n     /// Cache generated vtables\n     vtables: RefCell<FnvHashMap<ty::PolyTraitRef<'tcx>, ValueRef>>,\n     /// Cache of constant strings,\n@@ -321,7 +321,6 @@ impl<'tcx> SharedCrateContext<'tcx> {\n             },\n             check_overflow: check_overflow,\n             check_drop_flag_for_sanity: check_drop_flag_for_sanity,\n-            available_monomorphizations: RefCell::new(FnvHashSet()),\n             available_drop_glues: RefCell::new(FnvHashMap()),\n             use_dll_storage_attrs: use_dll_storage_attrs,\n         };\n@@ -452,6 +451,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 external_srcs: RefCell::new(NodeMap()),\n                 monomorphized: RefCell::new(FnvHashMap()),\n                 monomorphizing: RefCell::new(DefIdMap()),\n+                available_monomorphizations: RefCell::new(FnvHashSet()),\n                 vtables: RefCell::new(FnvHashMap()),\n                 const_cstr_cache: RefCell::new(FnvHashMap()),\n                 const_unsized: RefCell::new(FnvHashMap()),\n@@ -709,7 +709,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n \n     pub fn available_monomorphizations<'a>(&'a self) -> &'a RefCell<FnvHashSet<String>> {\n-        &self.shared.available_monomorphizations\n+        &self.local.available_monomorphizations\n     }\n \n     pub fn available_drop_glues(&self) -> &RefCell<FnvHashMap<DropGlueKind<'tcx>, String>> {"}, {"sha": "c5524ab8f38f9d54289b6b781b7372c12559a747", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -1145,7 +1145,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 SaveIn(lldest) => closure::Dest::SaveIn(bcx, lldest),\n                 Ignore => closure::Dest::Ignore(bcx.ccx())\n             };\n-            closure::trans_closure_expr(dest, &**decl, &**body, expr.id, bcx.fcx.param_substs)\n+            closure::trans_closure_expr(dest, decl, body, expr.id, bcx.fcx.param_substs)\n                 .unwrap_or(bcx)\n         }\n         ast::ExprCall(ref f, ref args) => {\n@@ -1956,6 +1956,7 @@ fn trans_overloaded_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                          args: &'a [P<ast::Expr>],\n                                          dest: Option<Dest>)\n                                          -> Block<'blk, 'tcx> {\n+    debug!(\"trans_overloaded_call {}\", expr.id);\n     let method_call = MethodCall::expr(expr.id);\n     let method_type = bcx.tcx()\n                          .method_map"}, {"sha": "f860fe44f28e78f073e6170c38731ab1db103801", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -21,11 +21,13 @@ use syntax::ast_util::local_def;\n \n fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     -> Option<ast::DefId> {\n-    let _icx = push_ctxt(\"maybe_instantiate_inline\");\n+    debug!(\"instantiate_inline({:?})\", fn_id);\n+    let _icx = push_ctxt(\"instantiate_inline\");\n+\n     match ccx.external().borrow().get(&fn_id) {\n         Some(&Some(node_id)) => {\n             // Already inline\n-            debug!(\"maybe_instantiate_inline({}): already inline as node id {}\",\n+            debug!(\"instantiate_inline({}): already inline as node id {}\",\n                    ty::item_path_str(ccx.tcx(), fn_id), node_id);\n             return Some(local_def(node_id));\n         }\n@@ -52,7 +54,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n \n             ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n-            trans_item(ccx, &**item);\n+            trans_item(ccx, item);\n \n             let linkage = match item.node {\n                 ast::ItemFn(_, _, _, _, ref generics, _) => {\n@@ -118,15 +120,15 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n                 }\n               }\n             }\n-            _ => ccx.sess().bug(\"maybe_instantiate_inline: item has a \\\n+            _ => ccx.sess().bug(\"instantiate_inline: item has a \\\n                                  non-enum, non-struct parent\")\n           }\n           trans_item(ccx, &**item);\n           my_id\n         }\n         csearch::FoundAst::FoundParent(_, _) => {\n             ccx.sess().bug(\"maybe_get_item_ast returned a FoundParent \\\n-             with a non-item parent\");\n+                            with a non-item parent\");\n         }\n         csearch::FoundAst::Found(&ast::IITraitItem(_, ref trait_item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(trait_item.id));\n@@ -167,8 +169,12 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n                              empty_substs,\n                              impl_item.id,\n                              &[]);\n-                    // Use InternalLinkage so LLVM can optimize more aggressively.\n-                    SetLinkage(llfn, InternalLinkage);\n+                    // See linkage comments on items.\n+                    if ccx.sess().opts.cg.codegen_units == 1 {\n+                        SetLinkage(llfn, InternalLinkage);\n+                    } else {\n+                        SetLinkage(llfn, AvailableExternallyLinkage);\n+                    }\n                 }\n             }\n "}, {"sha": "feb2b879183277ee2872c35cd4a00260468aff34", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -118,6 +118,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     match origin {\n         ty::MethodStatic(did) |\n         ty::MethodStaticClosure(did) => {\n+            debug!(\"trans_method_callee: static, {:?}\", did);\n             Callee {\n                 bcx: bcx,\n                 data: Fn(callee::trans_fn_ref(bcx.ccx(),\n@@ -134,9 +135,11 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }) => {\n             let trait_ref = ty::Binder(bcx.monomorphize(trait_ref));\n             let span = bcx.tcx().map.span(method_call.expr_id);\n-            debug!(\"method_call={:?} trait_ref={}\",\n+            debug!(\"method_call={:?} trait_ref={} trait_ref id={:?} substs={:?}\",\n                    method_call,\n-                   trait_ref.repr(bcx.tcx()));\n+                   trait_ref.repr(bcx.tcx()),\n+                   trait_ref.0.def_id,\n+                   trait_ref.0.substs);\n             let origin = fulfill_obligation(bcx.ccx(),\n                                             span,\n                                             trait_ref.clone());"}, {"sha": "3d74cf46e6ec32b6809aad11fcac221a09095bda", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9db5fb20239d9343c17e3216297df489115d416/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=e9db5fb20239d9343c17e3216297df489115d416", "patch": "@@ -60,6 +60,8 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     };\n \n     let item_ty = ty::lookup_item_type(ccx.tcx(), fn_id).ty;\n+\n+    debug!(\"monomorphic_fn about to subst into {}\", item_ty.repr(ccx.tcx()));\n     let mono_ty = item_ty.subst(ccx.tcx(), psubsts);\n \n     match ccx.monomorphized().borrow().get(&hash_id) {\n@@ -97,8 +99,6 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n     }\n \n-    debug!(\"monomorphic_fn about to subst into {}\", item_ty.repr(ccx.tcx()));\n-\n     debug!(\"mono_ty = {} (post-substitution)\", mono_ty.repr(ccx.tcx()));\n \n     let mono_ty = normalize_associated_type(ccx.tcx(), &mono_ty);"}]}