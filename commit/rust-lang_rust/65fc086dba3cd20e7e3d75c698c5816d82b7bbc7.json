{"sha": "65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZmMwODZkYmEzY2QyMGU3ZTNkNzVjNjk4YzU4MTZkODJiN2JiYzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-08T09:06:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-02-06T20:51:02Z"}, "message": "add a `IsEmpty` for use in verified bounds\n\nWe currently have a kind of arbitrary check for `Verify` conditions\nwhich says that if the \"test region\" is `'empty`, then the check\npasses. This was added to fix #42467 -- it happens to be correct for\nthe purposes that we use verify bounds for, but it doesn't feel\ngenerally correct. Replace with a more principled test.", "tree": {"sha": "5c7a9ed1cc953965c18c90d4498ab581c68d6cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c7a9ed1cc953965c18c90d4498ab581c68d6cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "html_url": "https://github.com/rust-lang/rust/commit/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82c143561f2d9115263e774b0caf75af462f6fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/82c143561f2d9115263e774b0caf75af462f6fcb", "html_url": "https://github.com/rust-lang/rust/commit/82c143561f2d9115263e774b0caf75af462f6fcb"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "b0a9e0afa70aabc865c8f17cca4556fb00386d86", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "patch": "@@ -592,12 +592,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             debug!(\"collect_errors: verify={:?}\", verify);\n             let sub = var_data.normalize(self.tcx(), verify.region);\n \n-            // This was an inference variable which didn't get\n-            // constrained, therefore it can be assume to hold.\n-            if let ty::ReEmpty = *sub {\n-                continue;\n-            }\n-\n             let verify_kind_ty = verify.kind.to_ty(self.tcx());\n             if self.bound_is_met(&verify.bound, var_data, verify_kind_ty, sub) {\n                 continue;\n@@ -893,6 +887,14 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 self.region_rels.is_subregion_of(min, var_values.normalize(self.tcx(), r))\n             }\n \n+            VerifyBound::IsEmpty => {\n+                if let ty::ReEmpty = min {\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+\n             VerifyBound::AnyBound(bs) => {\n                 bs.iter().any(|b| self.bound_is_met(b, var_values, generic_ty, min))\n             }"}, {"sha": "9d6c3f30aa7767d8859eaac5fd4fcb5080ea62a8", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "patch": "@@ -60,7 +60,18 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // scope type parameters:\n         let param_bounds = param_bounds.chain(self.implicit_region_bound);\n \n-        VerifyBound::AnyBound(param_bounds.map(|r| VerifyBound::OutlivedBy(r)).collect())\n+        let any_bounds: Vec<_> = param_bounds.map(|r| VerifyBound::OutlivedBy(r)).collect();\n+\n+        if any_bounds.is_empty() {\n+            // We know that all types `T` outlive `'empty`, so if we\n+            // can find no other bound, then check that the region\n+            // being tested is `'empty`.\n+            VerifyBound::IsEmpty\n+        } else {\n+            // If we can find any other bound R such that `T: R`, then\n+            // we don't need to check for `'empty`, because `R: 'empty`.\n+            VerifyBound::AnyBound(any_bounds)\n+        }\n     }\n \n     /// Given a projection like `T::Item`, searches the environment"}, {"sha": "667a4c3a7e2ab097bae0a5a2fcd38e0502a629c8", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "patch": "@@ -233,6 +233,9 @@ pub enum VerifyBound<'tcx> {\n     /// if `R: min`, then by transitivity `G: min`.\n     OutlivedBy(Region<'tcx>),\n \n+    /// Given a region `R`, true if it is `'empty`.\n+    IsEmpty,\n+\n     /// Given a set of bounds `B`, expands to the function:\n     ///\n     /// ```rust\n@@ -867,6 +870,7 @@ impl<'tcx> VerifyBound<'tcx> {\n             VerifyBound::IfEq(..) => false,\n             VerifyBound::OutlivedBy(ty::ReStatic) => true,\n             VerifyBound::OutlivedBy(_) => false,\n+            VerifyBound::IsEmpty => false,\n             VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),\n             VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),\n         }\n@@ -875,7 +879,7 @@ impl<'tcx> VerifyBound<'tcx> {\n     pub fn cannot_hold(&self) -> bool {\n         match self {\n             VerifyBound::IfEq(_, b) => b.cannot_hold(),\n-            VerifyBound::OutlivedBy(ty::ReEmpty) => true,\n+            VerifyBound::IsEmpty => false,\n             VerifyBound::OutlivedBy(_) => false,\n             VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),\n             VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),"}, {"sha": "6abca481eac9c12302c09bb9b381a175079ccdd8", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc086dba3cd20e7e3d75c698c5816d82b7bbc7/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=65fc086dba3cd20e7e3d75c698c5816d82b7bbc7", "patch": "@@ -1108,6 +1108,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.eval_if_eq(tcx, body, generic_ty, lower_bound, test_ty, verify_bound1)\n             }\n \n+            VerifyBound::IsEmpty => {\n+                let lower_bound_scc = self.constraint_sccs.scc(lower_bound);\n+                self.scc_values.elements_contained_in(lower_bound_scc).next().is_none()\n+            }\n+\n             VerifyBound::OutlivedBy(r) => {\n                 let r_vid = self.to_region_vid(r);\n                 self.eval_outlives(r_vid, lower_bound)"}]}