{"sha": "59a91280084347ced9a27c8d05a211f50fe90737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YTkxMjgwMDg0MzQ3Y2VkOWEyN2M4ZDA1YTIxMWY1MGZlOTA3Mzc=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-28T14:03:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-29T22:43:52Z"}, "message": "Rename Integer trait `divides` to `is_multiple_of`.\n\nIt is being changed because the previous wording was ambiguous.\n`a.divides(b)` implied `a % b == 0` but it sounds like the other way\naround. `9.divides(&3) == true` but we might read that as\n\"does 9 divide 3?\".  It has been renamed to sidestep the ambiguity.\n\nWork around the change by using `is_multiple_of` instead.\n\n[breaking-change]", "tree": {"sha": "290d834d666b781d6c5411442915af6f132da9a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290d834d666b781d6c5411442915af6f132da9a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59a91280084347ced9a27c8d05a211f50fe90737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59a91280084347ced9a27c8d05a211f50fe90737", "html_url": "https://github.com/rust-lang/rust/commit/59a91280084347ced9a27c8d05a211f50fe90737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59a91280084347ced9a27c8d05a211f50fe90737/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef7d3e13e258258ec427889d3b047f0b7fda33c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7d3e13e258258ec427889d3b047f0b7fda33c7", "html_url": "https://github.com/rust-lang/rust/commit/ef7d3e13e258258ec427889d3b047f0b7fda33c7"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "4dd3817e475ed7ade94875bfb85b1773bc1736f5", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59a91280084347ced9a27c8d05a211f50fe90737/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a91280084347ced9a27c8d05a211f50fe90737/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=59a91280084347ced9a27c8d05a211f50fe90737", "patch": "@@ -514,9 +514,14 @@ impl Integer for BigUint {\n     #[inline]\n     fn lcm(&self, other: &BigUint) -> BigUint { ((*self * *other) / self.gcd(other)) }\n \n-    /// Returns `true` if the number can be divided by `other` without leaving a remainder.\n+    /// Deprecated, use `is_multiple_of` instead.\n+    #[deprecated = \"function renamed to `is_multiple_of`\"]\n     #[inline]\n-    fn divides(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n+    fn divides(&self, other: &BigUint) -> bool { return self.is_multiple_of(other); }\n+\n+    /// Returns `true` if the number is a multiple of `other`.\n+    #[inline]\n+    fn is_multiple_of(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n \n     /// Returns `true` if the number is divisible by `2`.\n     #[inline]\n@@ -1112,9 +1117,14 @@ impl Integer for BigInt {\n         BigInt::from_biguint(Plus, self.data.lcm(&other.data))\n     }\n \n-    /// Returns `true` if the number can be divided by `other` without leaving a remainder.\n+    /// Deprecated, use `is_multiple_of` instead.\n+    #[deprecated = \"function renamed to `is_multiple_of`\"]\n+    #[inline]\n+    fn divides(&self, other: &BigInt) -> bool { return self.is_multiple_of(other); }\n+\n+    /// Returns `true` if the number is a multiple of `other`.\n     #[inline]\n-    fn divides(&self, other: &BigInt) -> bool { self.data.divides(&other.data) }\n+    fn is_multiple_of(&self, other: &BigInt) -> bool { self.data.is_multiple_of(&other.data) }\n \n     /// Returns `true` if the number is divisible by `2`.\n     #[inline]"}, {"sha": "b06e2b448d46387ca39ba467d0d32d9f19552837", "filename": "src/libnum/integer.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/59a91280084347ced9a27c8d05a211f50fe90737/src%2Flibnum%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a91280084347ced9a27c8d05a211f50fe90737/src%2Flibnum%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Finteger.rs?ref=59a91280084347ced9a27c8d05a211f50fe90737", "patch": "@@ -77,16 +77,20 @@ pub trait Integer: Num + PartialOrd\n     /// ~~~\n     fn lcm(&self, other: &Self) -> Self;\n \n-    /// Returns `true` if `other` divides evenly into `self`.\n+    /// Deprecated, use `is_multiple_of` instead.\n+    #[deprecated = \"function renamed to `is_multiple_of`\"]\n+    fn divides(&self, other: &Self) -> bool;\n+\n+    /// Returns `true` if `other` is a multiple of `self`.\n     ///\n     /// # Examples\n     ///\n     /// ~~~\n     /// # use num::Integer;\n-    /// assert_eq!(9i.divides(&3), true);\n-    /// assert_eq!(3i.divides(&9), false);\n+    /// assert_eq!(9i.is_multiple_of(&3), true);\n+    /// assert_eq!(3i.is_multiple_of(&9), false);\n     /// ~~~\n-    fn divides(&self, other: &Self) -> bool;\n+    fn is_multiple_of(&self, other: &Self) -> bool;\n \n     /// Returns `true` if the number is even.\n     ///\n@@ -231,10 +235,14 @@ macro_rules! impl_integer_for_int {\n                 ((*self * *other) / self.gcd(other)).abs()\n             }\n \n-            /// Returns `true` if the number can be divided by `other` without\n-            /// leaving a remainder\n+            /// Deprecated, use `is_multiple_of` instead.\n+            #[deprecated = \"function renamed to `is_multiple_of`\"]\n+            #[inline]\n+            fn divides(&self, other: &$T) -> bool { return self.is_multiple_of(other); }\n+\n+            /// Returns `true` if the number is a multiple of `other`.\n             #[inline]\n-            fn divides(&self, other: &$T) -> bool { *self % *other == 0 }\n+            fn is_multiple_of(&self, other: &$T) -> bool { *self % *other == 0 }\n \n             /// Returns `true` if the number is divisible by `2`\n             #[inline]\n@@ -393,21 +401,26 @@ macro_rules! impl_integer_for_uint {\n                 n\n             }\n \n-            /// Calculates the Lowest Common Multiple (LCM) of the number and `other`\n+            /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n             #[inline]\n             fn lcm(&self, other: &$T) -> $T {\n                 (*self * *other) / self.gcd(other)\n             }\n \n-            /// Returns `true` if the number can be divided by `other` without leaving a remainder\n+            /// Deprecated, use `is_multiple_of` instead.\n+            #[deprecated = \"function renamed to `is_multiple_of`\"]\n             #[inline]\n-            fn divides(&self, other: &$T) -> bool { *self % *other == 0 }\n+            fn divides(&self, other: &$T) -> bool { return self.is_multiple_of(other); }\n \n-            /// Returns `true` if the number is divisible by `2`\n+            /// Returns `true` if the number is a multiple of `other`.\n+            #[inline]\n+            fn is_multiple_of(&self, other: &$T) -> bool { *self % *other == 0 }\n+\n+            /// Returns `true` if the number is divisible by `2`.\n             #[inline]\n             fn is_even(&self) -> bool { self & 1 == 0 }\n \n-            /// Returns `true` if the number is not divisible by `2`\n+            /// Returns `true` if the number is not divisible by `2`.\n             #[inline]\n             fn is_odd(&self) -> bool { !self.is_even() }\n         }\n@@ -449,10 +462,10 @@ macro_rules! impl_integer_for_uint {\n             }\n \n             #[test]\n-            fn test_divides() {\n-                assert!((6 as $T).divides(&(6 as $T)));\n-                assert!((6 as $T).divides(&(3 as $T)));\n-                assert!((6 as $T).divides(&(1 as $T)));\n+            fn test_is_multiple_of() {\n+                assert!((6 as $T).is_multiple_of(&(6 as $T)));\n+                assert!((6 as $T).is_multiple_of(&(3 as $T)));\n+                assert!((6 as $T).is_multiple_of(&(1 as $T)));\n             }\n \n             #[test]"}]}