{"sha": "697464a487f8ca8bc0bfadaf4108bb356eb157e0", "node_id": "C_kwDOAAsO6NoAKDY5NzQ2NGE0ODdmOGNhOGJjMGJmYWRhZjQxMDhiYjM1NmViMTU3ZTA", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-09T23:50:14Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-10T09:19:02Z"}, "message": "Disable the test on wasm32\n\nSince the expected output has unwind targets", "tree": {"sha": "8f6ca463d677250877fbf5fe02b58335ee270bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f6ca463d677250877fbf5fe02b58335ee270bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/697464a487f8ca8bc0bfadaf4108bb356eb157e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/697464a487f8ca8bc0bfadaf4108bb356eb157e0", "html_url": "https://github.com/rust-lang/rust/commit/697464a487f8ca8bc0bfadaf4108bb356eb157e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/697464a487f8ca8bc0bfadaf4108bb356eb157e0/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54408f096377190a7faf67cb7ef4eda6e1ed4700", "url": "https://api.github.com/repos/rust-lang/rust/commits/54408f096377190a7faf67cb7ef4eda6e1ed4700", "html_url": "https://github.com/rust-lang/rust/commit/54408f096377190a7faf67cb7ef4eda6e1ed4700"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "0972d2d68a115f143b3d4660ebca56941e325c2d", "filename": "src/test/mir-opt/combine_clone_of_primitives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/697464a487f8ca8bc0bfadaf4108bb356eb157e0/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697464a487f8ca8bc0bfadaf4108bb356eb157e0/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=697464a487f8ca8bc0bfadaf4108bb356eb157e0", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C opt-level=0 -Z inline_mir=no\n+// ignore-wasm32 compiled with panic=abort by default\n \n // EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff\n "}, {"sha": "62e5da4902cb40dae936669d4165f07a324972f1", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/697464a487f8ca8bc0bfadaf4108bb356eb157e0/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/697464a487f8ca8bc0bfadaf4108bb356eb157e0/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=697464a487f8ca8bc0bfadaf4108bb356eb157e0", "patch": "@@ -1,80 +1,80 @@\n-- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:5:10: 5:15>::clone` before InstCombine\n-+ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:5:10: 5:15>::clone` after InstCombine\n+- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` before InstCombine\n++ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstCombine\n   \n-  fn <impl at $DIR/combine_clone_of_primitives.rs:5:10: 5:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n-      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n-      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n-      let _2: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-      let _3: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-      let _4: &[f32; 3];                   // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n-      let mut _5: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-      let mut _6: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-      let _7: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-      let mut _8: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-      let mut _9: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-      let _10: &u64;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-      let mut _11: [f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n-      let mut _12: &[f32; 3];              // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n-      let _13: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+  fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n+      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+      let _2: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let _3: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let _4: &[f32; 3];                   // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let mut _5: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _6: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let _7: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _8: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _9: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let _10: &u64;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _11: [f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let mut _12: &[f32; 3];              // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let _13: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n       scope 1 {\n-          debug __self_0_0 => _2;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-          debug __self_0_1 => _3;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-          debug __self_0_2 => _4;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+          debug __self_0_0 => _2;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          debug __self_0_1 => _3;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          debug __self_0_2 => _4;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n       }\n   \n       bb0: {\n-          _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-          _3 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-          _4 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n--         _7 = &(*_2);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n--         _6 = &(*_7);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-+         _7 = _2;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-+         _6 = _7;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n-          _5 = <T as Clone>::clone(move _6) -> bb1; // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+          _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _3 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          _4 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _7 = &(*_2);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+-         _6 = &(*_7);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n++         _7 = _2;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n++         _6 = _7;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _5 = <T as Clone>::clone(move _6) -> bb1; // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // mir::Constant\n-                                           // + span: $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+                                           // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n                                            // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n--         _10 = &(*_3);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n--         _9 = &(*_10);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n--         _8 = <u64 as Clone>::clone(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+-         _10 = &(*_3);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _9 = &(*_10);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _8 = <u64 as Clone>::clone(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // mir::Constant\n--                                          // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n -                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n-+         _10 = _3;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-+         _9 = _10;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-+         _8 = (*_9);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n-+         goto -> bb2;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n++         _10 = _3;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _9 = _10;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _8 = (*_9);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         goto -> bb2;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n       }\n   \n       bb2: {\n--         _13 = &(*_4);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n--         _12 = &(*_13);                   // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n--         _11 = <[f32; 3] as Clone>::clone(move _12) -> [return: bb3, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-         _13 = &(*_4);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _12 = &(*_13);                   // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _11 = <[f32; 3] as Clone>::clone(move _12) -> [return: bb3, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // mir::Constant\n--                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n -                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n-+         _13 = _4;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n-+         _12 = _13;                       // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n-+         _11 = (*_12);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n-+         goto -> bb3;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n++         _13 = _4;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _12 = _13;                       // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _11 = (*_12);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         goto -> bb3;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n       }\n   \n       bb3: {\n-          (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n-          (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n-          (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n-          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:5:15: 5:15\n+          (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:15: 6:15\n       }\n   \n       bb4 (cleanup): {\n-          drop(_5) -> bb5;                 // scope 1 at $DIR/combine_clone_of_primitives.rs:5:14: 5:15\n+          drop(_5) -> bb5;                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n       }\n   \n       bb5 (cleanup): {\n-          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n       }\n   }\n   "}]}