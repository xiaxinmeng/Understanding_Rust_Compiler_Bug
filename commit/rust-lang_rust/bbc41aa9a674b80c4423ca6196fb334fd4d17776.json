{"sha": "bbc41aa9a674b80c4423ca6196fb334fd4d17776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYzQxYWE5YTY3NGI4MGM0NDIzY2E2MTk2ZmIzMzRmZDRkMTc3NzY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-15T07:12:38Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-07T03:43:57Z"}, "message": "mir: remove the unused attribute logic in the MIR map construction.", "tree": {"sha": "e578c3f8aa962157c8ba1831240bfed58f0d9ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e578c3f8aa962157c8ba1831240bfed58f0d9ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc41aa9a674b80c4423ca6196fb334fd4d17776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc41aa9a674b80c4423ca6196fb334fd4d17776", "html_url": "https://github.com/rust-lang/rust/commit/bbc41aa9a674b80c4423ca6196fb334fd4d17776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc41aa9a674b80c4423ca6196fb334fd4d17776/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c95cda56a6b515e8a1117db0648058f892339821", "url": "https://api.github.com/repos/rust-lang/rust/commits/c95cda56a6b515e8a1117db0648058f892339821", "html_url": "https://github.com/rust-lang/rust/commit/c95cda56a6b515e8a1117db0648058f892339821"}], "stats": {"total": 74, "additions": 4, "deletions": 70}, "files": [{"sha": "97daa64994d4f85de78bc307bc358927e23109ec", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 4, "deletions": 70, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bbc41aa9a674b80c4423ca6196fb334fd4d17776/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc41aa9a674b80c4423ca6196fb334fd4d17776/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=bbc41aa9a674b80c4423ca6196fb334fd4d17776", "patch": "@@ -34,15 +34,14 @@ use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n use syntax::abi::Abi;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n pub fn build_mir_for_crate<'tcx>(tcx: &TyCtxt<'tcx>) -> MirMap<'tcx> {\n     let mut map = MirMap {\n         map: NodeMap(),\n     };\n     {\n-        let mut dump = OuterDump {\n+        let mut dump = BuildMir {\n             tcx: tcx,\n             map: &mut map,\n         };\n@@ -52,79 +51,14 @@ pub fn build_mir_for_crate<'tcx>(tcx: &TyCtxt<'tcx>) -> MirMap<'tcx> {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// OuterDump -- walks a crate, looking for fn items and methods to build MIR from\n+// BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-struct OuterDump<'a, 'tcx: 'a> {\n+struct BuildMir<'a, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n     map: &'a mut MirMap<'tcx>,\n }\n \n-impl<'a, 'tcx> OuterDump<'a, 'tcx> {\n-    fn visit_mir<OP>(&mut self, attributes: &'a [ast::Attribute], mut walk_op: OP)\n-        where OP: for<'m> FnMut(&mut InnerDump<'a, 'm, 'tcx>)\n-    {\n-        let mut closure_dump = InnerDump {\n-            tcx: self.tcx,\n-            attr: None,\n-            map: &mut *self.map,\n-        };\n-        for attr in attributes {\n-            if attr.check_name(\"rustc_mir\") {\n-                closure_dump.attr = Some(attr);\n-            }\n-        }\n-        walk_op(&mut closure_dump);\n-    }\n-}\n-\n-\n-impl<'a, 'tcx> Visitor<'tcx> for OuterDump<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        self.visit_mir(&item.attrs, |c| intravisit::walk_item(c, item));\n-        intravisit::walk_item(self, item);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        match trait_item.node {\n-            hir::MethodTraitItem(_, Some(_)) => {\n-                self.visit_mir(&trait_item.attrs, |c| intravisit::walk_trait_item(c, trait_item));\n-            }\n-            hir::MethodTraitItem(_, None) |\n-            hir::ConstTraitItem(..) |\n-            hir::TypeTraitItem(..) => {}\n-        }\n-        intravisit::walk_trait_item(self, trait_item);\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        match impl_item.node {\n-            hir::ImplItemKind::Method(..) => {\n-                self.visit_mir(&impl_item.attrs, |c| intravisit::walk_impl_item(c, impl_item));\n-            }\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(..) => {}\n-        }\n-        intravisit::walk_impl_item(self, impl_item);\n-    }\n-}\n-\n-///////////////////////////////////////////////////////////////////////////\n-// InnerDump -- dumps MIR for a single fn and its contained closures\n-\n-struct InnerDump<'a, 'm, 'tcx: 'a + 'm> {\n-    tcx: &'a TyCtxt<'tcx>,\n-    map: &'m mut MirMap<'tcx>,\n-    attr: Option<&'a ast::Attribute>,\n-}\n-\n-impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {\n-        // ignore methods; the outer dump will call us for them independently\n-    }\n-\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {\n-        // ignore methods; the outer dump will call us for them independently\n-    }\n-\n+impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n     fn visit_fn(&mut self,\n                 fk: intravisit::FnKind<'tcx>,\n                 decl: &'tcx hir::FnDecl,"}]}