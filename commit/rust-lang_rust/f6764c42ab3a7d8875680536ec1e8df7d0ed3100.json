{"sha": "f6764c42ab3a7d8875680536ec1e8df7d0ed3100", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NzY0YzQyYWIzYTdkODg3NTY4MDUzNmVjMWU4ZGY3ZDBlZDMxMDA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T00:23:35Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:53:36Z"}, "message": "Initialize default providers only once\n\nThis avoids copying a new `Providers` struct for each downstream crate\nthat wants to use it.", "tree": {"sha": "815a444f7f28bbbbc8cc390e0ee1452ca0fec8fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815a444f7f28bbbbc8cc390e0ee1452ca0fec8fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6764c42ab3a7d8875680536ec1e8df7d0ed3100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6764c42ab3a7d8875680536ec1e8df7d0ed3100", "html_url": "https://github.com/rust-lang/rust/commit/f6764c42ab3a7d8875680536ec1e8df7d0ed3100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6764c42ab3a7d8875680536ec1e8df7d0ed3100/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e8d6290745a65025a3e082aea72fbe372292c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e8d6290745a65025a3e082aea72fbe372292c6", "html_url": "https://github.com/rust-lang/rust/commit/d9e8d6290745a65025a3e082aea72fbe372292c6"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "fe40c615f79c96f4aec3fd521be3f5d6c657f358", "filename": "src/librustc_interface/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6764c42ab3a7d8875680536ec1e8df7d0ed3100/src%2Flibrustc_interface%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6764c42ab3a7d8875680536ec1e8df7d0ed3100/src%2Flibrustc_interface%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Flib.rs?ref=f6764c42ab3a7d8875680536ec1e8df7d0ed3100", "patch": "@@ -14,6 +14,7 @@ mod queries;\n pub mod util;\n \n pub use interface::{run_compiler, Config};\n+pub use passes::{DEFAULT_EXTERN_QUERY_PROVIDERS, DEFAULT_QUERY_PROVIDERS};\n pub use queries::Queries;\n \n #[cfg(test)]"}, {"sha": "241ba869d3eb160548816cacd8f8775c165caae2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f6764c42ab3a7d8875680536ec1e8df7d0ed3100/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6764c42ab3a7d8875680536ec1e8df7d0ed3100/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f6764c42ab3a7d8875680536ec1e8df7d0ed3100", "patch": "@@ -3,6 +3,7 @@ use crate::proc_macro_decls;\n use crate::util;\n \n use log::{info, log_enabled, warn};\n+use once_cell::sync::Lazy;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self, ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -19,6 +20,7 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir as mir;\n@@ -719,7 +721,8 @@ pub fn prepare_outputs(\n     Ok(outputs)\n }\n \n-pub fn default_provide(providers: &mut ty::query::Providers) {\n+pub static DEFAULT_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+    let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n     plugin::build::provide(providers);\n@@ -738,12 +741,15 @@ pub fn default_provide(providers: &mut ty::query::Providers) {\n     rustc_lint::provide(providers);\n     rustc_symbol_mangling::provide(providers);\n     rustc_codegen_ssa::provide(providers);\n-}\n+    *providers\n+});\n \n-pub fn default_provide_extern(providers: &mut ty::query::Providers) {\n-    rustc_metadata::provide_extern(providers);\n-    rustc_codegen_ssa::provide_extern(providers);\n-}\n+pub static DEFAULT_EXTERN_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+    let mut extern_providers = *DEFAULT_QUERY_PROVIDERS;\n+    rustc_metadata::provide_extern(&mut extern_providers);\n+    rustc_codegen_ssa::provide_extern(&mut extern_providers);\n+    extern_providers\n+});\n \n pub struct QueryContext<'tcx>(&'tcx GlobalCtxt<'tcx>);\n \n@@ -780,12 +786,11 @@ pub fn create_global_ctxt<'tcx>(\n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n     let codegen_backend = compiler.codegen_backend();\n-    let mut local_providers = ty::query::Providers::default();\n-    default_provide(&mut local_providers);\n+    let mut local_providers = *DEFAULT_QUERY_PROVIDERS;\n     codegen_backend.provide(&mut local_providers);\n \n-    let mut extern_providers = local_providers;\n-    default_provide_extern(&mut extern_providers);\n+    let mut extern_providers = *DEFAULT_EXTERN_QUERY_PROVIDERS;\n+    codegen_backend.provide(&mut extern_providers);\n     codegen_backend.provide_extern(&mut extern_providers);\n \n     if let Some(callback) = compiler.override_queries {"}]}