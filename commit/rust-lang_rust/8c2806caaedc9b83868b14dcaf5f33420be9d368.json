{"sha": "8c2806caaedc9b83868b14dcaf5f33420be9d368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMjgwNmNhYWVkYzliODM4NjhiMTRkY2FmNWYzMzQyMGJlOWQzNjg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-04T04:37:02Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-04T04:37:02Z"}, "message": "Rollup merge of #25900 - lorenzb:more_about_types, r=nikomatsakis\n\nMy main sources of information are [RFC401](https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md), the rust IRC channel, and a bunch of experiments to figure out what `rustc` currently supports.\r\nNote that the RFC calls for some coercion behaviour that is not implemented yet (see #18469).\r\nThe documentation in this PR mostly covers current behaviour of rust and doesn't document the future behaviour. I haven't written about receiver expression coercion.\r\n\r\nI would be happy to rewrite/adapt the PR according to feedback.\r\n\r\nr? @steveklabnik", "tree": {"sha": "86886e31280f1458fb2d1466aef3e09865dfb51b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86886e31280f1458fb2d1466aef3e09865dfb51b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c2806caaedc9b83868b14dcaf5f33420be9d368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2806caaedc9b83868b14dcaf5f33420be9d368", "html_url": "https://github.com/rust-lang/rust/commit/8c2806caaedc9b83868b14dcaf5f33420be9d368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c2806caaedc9b83868b14dcaf5f33420be9d368/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c6b3caaf5fdd79be11377492547639dc975652", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c6b3caaf5fdd79be11377492547639dc975652", "html_url": "https://github.com/rust-lang/rust/commit/06c6b3caaf5fdd79be11377492547639dc975652"}, {"sha": "babb2684d80aee86ba73ffb1af04617fb2943a06", "url": "https://api.github.com/repos/rust-lang/rust/commits/babb2684d80aee86ba73ffb1af04617fb2943a06", "html_url": "https://github.com/rust-lang/rust/commit/babb2684d80aee86ba73ffb1af04617fb2943a06"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "045481d7bbd6f3f7ff381a59bb3312d1ac2d4463", "filename": "src/doc/reference.md", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/8c2806caaedc9b83868b14dcaf5f33420be9d368/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c2806caaedc9b83868b14dcaf5f33420be9d368/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8c2806caaedc9b83868b14dcaf5f33420be9d368", "patch": "@@ -3599,6 +3599,146 @@ The notation `&self` is a shorthand for `self: &Self`. In this case,\n in the impl, `Self` refers to the value of type `String` that is the\n receiver for a call to the method `make_string`.\n \n+## Subtyping\n+\n+Subtyping is implicit and can occur at any stage in type checking or\n+inference. Subtyping in Rust is very restricted and occurs only due to\n+variance with respect to lifetimes and between types with higher ranked\n+lifetimes. If we were to erase lifetimes from types, then the only subtyping\n+would be due to type equality.\n+\n+Consider the following example: string literals always have `'static`\n+lifetime. Nevertheless, we can assign `s` to `t`:\n+\n+```\n+fn bar<'a>() {\n+    let s: &'static str = \"hi\";\n+    let t: &'a str = s;\n+}\n+```\n+Since `'static` \"lives longer\" than `'a`, `&'static str` is a subtype of\n+`&'a str`.\n+\n+## Type coercions\n+\n+Coercions are defined in [RFC401]. A coercion is implicit and has no syntax.\n+\n+[RFC401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+\n+### Coercion sites\n+\n+A coercion can only occur at certain coercion sites in a program; these are\n+typically places where the desired type is explicit or can be dervied by\n+propagation from explicit types (without type inference). Possible coercion\n+sites are:\n+\n+* `let` statements where an explicit type is given.\n+\n+    In `let _: U = e;`, `e` is coerced to have type `U`.\n+\n+* `static` and `const` statements (similar to `let` statements).\n+\n+* arguments for function calls.\n+\n+    The value being coerced is the\n+    actual parameter and it is coerced to the type of the formal parameter. For\n+    example, let `foo` be defined as `fn foo(x: U) { ... }` and call it as\n+    `foo(e);`. Then `e` is coerced to have type `U`;\n+\n+* instantiations of struct or variant fields.\n+\n+    Assume we have a `struct\n+    Foo { x: U }` and instantiate it as `Foo { x: e }`. Then `e` is coerced to\n+    have type `U`.\n+\n+* function results (either the final line of a block if it is not semicolon\n+terminated or any expression in a `return` statement).\n+\n+    In `fn foo() -> U { e }`, `e` is coerced to to have type `U`.\n+\n+If the expression in one of these coercion sites is a coercion-propagating\n+expression, then the relevant sub-expressions in that expression are also\n+coercion sites. Propagation recurses from these new coercion sites.\n+Propagating expressions and their relevant sub-expressions are:\n+\n+* array literals, where the array has type `[U; n]`. Each sub-expression in\n+the array literal is a coercion site for coercion to type `U`.\n+\n+* array literals with repeating syntax, where the array has type `[U; n]`. The\n+repeated sub-expression is a coercion site for coercion to type `U`.\n+\n+* tuples, where a tuple is a coercion site to type `(U_0, U_1, ..., U_n)`.\n+Each sub-expression is a coercion site to the respective type, e.g. the\n+zeroth sub-expression is a coercion site to type `U_0`.\n+\n+* parenthesised sub-expressions (`(e)`). If the expression has type `U`, then\n+the sub-expression is a coercion site to `U`.\n+\n+* blocks. If a block has type `U`, then the last expression in the block (if\n+it is not semicolon-terminated) is a coercion site to `U`. This includes\n+blocks which are part of control flow statements, such as `if`/`else`, if\n+the block has a known type.\n+\n+### Coercion types\n+\n+Coercion is allowed between the following types:\n+\n+* `T` to `U` if `T` is a subtype of `U` (*reflexive case*).\n+\n+* `T_1` to `T_3` where `T_1` coerces to `T_2` and `T_2` coerces to `T_3`\n+(*transitive case*).\n+\n+    Note that this is not fully supported yet\n+\n+* `&mut T` to `&T`.\n+\n+* `*mut T` to `*const T`.\n+\n+* `&T` to `*const T`.\n+\n+* `&mut T` to `*mut T`.\n+\n+* `&T` to `&U` if `T` implements `Deref<Target = U>`. For example:\n+    ```\n+    use std::ops::Deref;\n+\n+    struct CharContainer {\n+        value: char\n+    }\n+\n+    impl Deref for CharContainer {\n+        type Target = char;\n+\n+        fn deref<'a>(&'a self) -> &'a char {\n+            &self.value\n+        }\n+    }\n+\n+    fn foo(arg: &char) {}\n+\n+    fn main() {\n+        let x = &mut CharContainer { value: 'y' };\n+        foo(x); //&mut CharContainer is coerced to &char.\n+    }\n+    ```\n+* `&mut T` to `&mut U` if `T` implements `DerefMut<Target = U>`.\n+\n+* TyCtor(`T`) to TyCtor(coerce_inner(`T`)), where TyCtor(`T`) is one of\n+    - `&T`\n+    - `&mut T`\n+    - `*const T`\n+    - `*mut T`\n+    - `Box<T>`\n+\n+    and where\n+    - coerce_inner(`[T, ..n]`) = `[T]`\n+    - coerce_inner(`T`) = `U` where `T` is a concrete type which implements the\n+    trait `U`.\n+\n+    In the future, coerce_inner will be recursively extended to tuples and\n+    structs. In addition, coercions from sub-traits to super-traits will be\n+    added. See [RFC401] for more details.\n+\n # Special traits\n \n Several traits define special evaluation behavior."}]}