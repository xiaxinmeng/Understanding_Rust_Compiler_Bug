{"sha": "e2859437f930ed947386aa8d225cf078a9f53839", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODU5NDM3ZjkzMGVkOTQ3Mzg2YWE4ZDIyNWNmMDc4YTlmNTM4Mzk=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2021-01-30T14:51:16Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2021-01-30T14:51:16Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "c777ebadf70d60d43ff0d391e738d00281719ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c777ebadf70d60d43ff0d391e738d00281719ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2859437f930ed947386aa8d225cf078a9f53839", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAmAVcmgACgkQLO/Nsn7Q\nvnkmTg//TgwSCQhJy052CwYjNzLg9veFCwmjAP8EAaQc4JvexfErHy/L+JWJujjN\n+PEmW7Fj4+HIriodOJlJRPjJMf8M4aeGNKlPWoguOopPW1p7pqL2YK9S5cLcULJA\nnbFOZQV44gmr4ltbbJ9w3PjwJAKRbaQ/P6lcSpErA/WemT6iWYTRLTpXK0/I0wZf\nn6tZk1UxLDwNAvO4bu9MSQSm317/AB4at8pJWYWXMqZH3askUqEV6kVGrCkxMhDd\nkIxtnIfBctOZ47AYNNcJ4R1M8wV9KHyGtr5l5qdT8/jr5HLb0L6hYM7QlJMxZeQd\nBkOC5tL/giE9f9hfjkn3scFp3xnC+PBGcgheDPJzZgS6BN5zCp09gK+bQa5ewMuX\nR7zkYwJJQ/ElPNWPIwZbbm5RFqDyyTAERFl8o9iQyL4frxjTQzmG3aFZsdH5letO\nTcfqi4wVY2CULiU/he6JSRY4n3WTNWy3TbMSPXMDpYDBkpZEcvwAODIFuK2xgZVD\nVKAsllHiZbqkwrFss/3SyGo9pU7qFVfYlYvAfgCa9b1MCe1GVVZtrUlXcN+SV4qk\nOcFmEEPTfTJfwAQdE1duhGXmENYHA4ZTaog9mLyBmhyR4yD7hLDS2UUPwKYP0I+v\nw28vqBOWVLvhE2a3JG2R09kROftiWcuC9FczIct+ETT4b0I8a2M=\n=IIKM\n-----END PGP SIGNATURE-----", "payload": "tree c777ebadf70d60d43ff0d391e738d00281719ec3\nparent c18d6f1ffa683a998e9c8a3ff93f6560b2103008\nparent 5db215bca8baa05520002e553e2a7b2d9659b6ba\nauthor flip1995 <hello@philkrones.com> 1612018276 +0100\ncommitter flip1995 <hello@philkrones.com> 1612018276 +0100\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2859437f930ed947386aa8d225cf078a9f53839", "html_url": "https://github.com/rust-lang/rust/commit/e2859437f930ed947386aa8d225cf078a9f53839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2859437f930ed947386aa8d225cf078a9f53839/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "url": "https://api.github.com/repos/rust-lang/rust/commits/c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "html_url": "https://github.com/rust-lang/rust/commit/c18d6f1ffa683a998e9c8a3ff93f6560b2103008"}, {"sha": "5db215bca8baa05520002e553e2a7b2d9659b6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db215bca8baa05520002e553e2a7b2d9659b6ba", "html_url": "https://github.com/rust-lang/rust/commit/5db215bca8baa05520002e553e2a7b2d9659b6ba"}], "stats": {"total": 6530, "additions": 6070, "deletions": 460}, "files": [{"sha": "1142cc470fe82510b652d3767027e5cc322c70d6", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,6 +1,7 @@\n [alias]\n uitest = \"test --test compile-test\"\n dev = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n+dev-lintcheck = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\"\n \n [build]\n rustflags = [\"-Zunstable-options\"]"}, {"sha": "dadb6832d1fd7c2587a898e9bb6483d5909e77b3", "filename": "CHANGELOG.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1878,6 +1878,7 @@ Released 2018-09-13\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n+[`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n [`cast_possible_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\n [`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\n@@ -1937,6 +1938,8 @@ Released 2018-09-13\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n+[`exhaustive_enums`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums\n+[`exhaustive_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs\n [`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\n@@ -1996,6 +1999,7 @@ Released 2018-09-13\n [`inline_asm_x86_att_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax\n [`inline_asm_x86_intel_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax\n [`inline_fn_without_body`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body\n+[`inspect_for_each`]: https://rust-lang.github.io/rust-clippy/master/index.html#inspect_for_each\n [`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`integer_division`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_division\n@@ -2033,6 +2037,8 @@ Released 2018-09-13\n [`macro_use_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n+[`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n+[`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n@@ -2161,6 +2167,7 @@ Released 2018-09-13\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n [`redundant_pub_crate`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\n+[`redundant_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_slicing\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`ref_option_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref\n@@ -2271,6 +2278,7 @@ Released 2018-09-13\n [`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings\n [`unwrap_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result\n [`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n+[`upper_case_acronyms`]: https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n [`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self\n [`used_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding"}, {"sha": "f2641a23f563b0528be459163f3568057ff93aed", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -310,10 +310,19 @@ currently. Between writing new lints, fixing issues, reviewing pull requests and\n responding to issues there may not always be enough time to stay on top of it\n all.\n \n-Our highest priority is fixing [crashes][l-crash] and [bugs][l-bug]. We don't\n+Our highest priority is fixing [crashes][l-crash] and [bugs][l-bug], for example\n+an ICE in a popular crate that many other crates depend on. We don't\n want Clippy to crash on your code and we want it to be as reliable as the\n suggestions from Rust compiler errors.\n \n+We have prioritization labels and a sync-blocker label, which are described below.\n+- [P-low][p-low]: Requires attention (fix/response/evaluation) by a team member but isn't urgent.\n+- [P-medium][p-medium]: Should be addressed by a team member until the next sync.\n+- [P-high][p-high]: Should be immediately addressed and will require an out-of-cycle sync or a backport.\n+- [L-sync-blocker][l-sync-blocker]: An issue that \"blocks\" a sync. \n+Or rather: before the sync this should be addressed,\n+e.g. by removing a lint again, so it doesn't hit beta/stable.\n+\n ## Bors and Homu\n \n We use a bot powered by [Homu][homu] to help automate testing and landing of pull\n@@ -327,6 +336,10 @@ commands [here][homu_instructions].\n [triage]: https://forge.rust-lang.org/release/triage-procedure.html\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug\n+[p-low]: https://github.com/rust-lang/rust-clippy/labels/P-low\n+[p-medium]: https://github.com/rust-lang/rust-clippy/labels/P-medium\n+[p-high]: https://github.com/rust-lang/rust-clippy/labels/P-high\n+[l-sync-blocker]: https://github.com/rust-lang/rust-clippy/labels/L-sync-blocker\n [homu]: https://github.com/rust-lang/homu\n [homu_instructions]: https://bors.rust-lang.org/\n [homu_queue]: https://bors.rust-lang.org/queue/clippy"}, {"sha": "f48c1ee5ea26567cec7c165ff15beaf6eda26f45", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -4,14 +4,22 @@ version = \"0.0.1\"\n authors = [\"Philipp Hansch <dev@phansch.net>\"]\n edition = \"2018\"\n \n+\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n+flate2 = { version = \"1.0.19\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n+serde = { version = \"1.0\", features = [\"derive\"], optional = true }\n+serde_json = { version = \"1.0\", optional = true }\n shell-escape = \"0.1\"\n+tar = { version = \"0.4.30\", optional = true }\n+toml = { version = \"0.5\", optional = true }\n+ureq = { version = \"2.0.0-rc3\", optional = true }\n walkdir = \"2\"\n \n [features]\n+lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\"]\n deny-warnings = []"}, {"sha": "1fbf7930d3ecf4a9da72573335cdace66a1bf697", "filename": "clippy_dev/lintcheck_crates.toml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Flintcheck_crates.toml?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,20 @@\n+[crates]\n+# some of these are from cargotest\n+cargo = ['0.49.0']\n+iron = ['0.6.1']\n+ripgrep = ['12.1.1']\n+xsv = ['0.13.0']\n+#tokei = ['12.0.4']\n+rayon = ['1.5.0']\n+serde = ['1.0.118']\n+# top 10 crates.io dls\n+bitflags = ['1.2.1']\n+libc = ['0.2.81']\n+log = ['0.4.11']\n+proc-macro2 = ['1.0.24']\n+quote = ['1.0.7']\n+rand = ['0.7.3']\n+rand_core = ['0.6.0']\n+regex = ['1.3.2']\n+syn = ['1.0.54']\n+unicode-xid = ['0.2.1']"}, {"sha": "24d70d433f367e0072def9923508bb5a2b125c60", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -12,6 +12,7 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n+pub mod lintcheck;\n pub mod new_lint;\n pub mod ra_setup;\n pub mod serve;"}, {"sha": "785c692d3cb9818f0407541ea12731dfed7ab73b", "filename": "clippy_dev/src/lintcheck.rs", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,286 @@\n+// Run clippy on a fixed set of crates and collect the warnings.\n+// This helps observing the impact clippy changs have on a set of real-world code.\n+//\n+// When a new lint is introduced, we can search the results for new warnings and check for false\n+// positives.\n+\n+#![cfg(feature = \"lintcheck\")]\n+#![allow(clippy::filter_map)]\n+\n+use crate::clippy_project_root;\n+\n+use std::collections::HashMap;\n+use std::process::Command;\n+use std::{fmt, fs::write, path::PathBuf};\n+\n+use clap::ArgMatches;\n+use serde::{Deserialize, Serialize};\n+use serde_json::Value;\n+\n+// use this to store the crates when interacting with the crates.toml file\n+#[derive(Debug, Serialize, Deserialize)]\n+struct CrateList {\n+    crates: HashMap<String, Vec<String>>,\n+}\n+\n+// crate data we stored in the toml, can have multiple versions per crate\n+// A single TomlCrate is laster mapped to several CrateSources in that case\n+struct TomlCrate {\n+    name: String,\n+    versions: Vec<String>,\n+}\n+\n+// represents an archive we download from crates.io\n+#[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n+struct CrateSource {\n+    name: String,\n+    version: String,\n+}\n+\n+// represents the extracted sourcecode of a crate\n+#[derive(Debug)]\n+struct Crate {\n+    version: String,\n+    name: String,\n+    // path to the extracted sources that clippy can check\n+    path: PathBuf,\n+}\n+\n+#[derive(Debug)]\n+struct ClippyWarning {\n+    crate_name: String,\n+    crate_version: String,\n+    file: String,\n+    line: String,\n+    column: String,\n+    linttype: String,\n+    message: String,\n+}\n+\n+impl std::fmt::Display for ClippyWarning {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        writeln!(\n+            f,\n+            r#\"{}-{}/{}:{}:{} {} \"{}\"\"#,\n+            &self.crate_name, &self.crate_version, &self.file, &self.line, &self.column, &self.linttype, &self.message\n+        )\n+    }\n+}\n+\n+impl CrateSource {\n+    fn download_and_extract(&self) -> Crate {\n+        let extract_dir = PathBuf::from(\"target/lintcheck/crates\");\n+        let krate_download_dir = PathBuf::from(\"target/lintcheck/downloads\");\n+\n+        // url to download the crate from crates.io\n+        let url = format!(\n+            \"https://crates.io/api/v1/crates/{}/{}/download\",\n+            self.name, self.version\n+        );\n+        println!(\"Downloading and extracting {} {} from {}\", self.name, self.version, url);\n+        let _ = std::fs::create_dir(\"target/lintcheck/\");\n+        let _ = std::fs::create_dir(&krate_download_dir);\n+        let _ = std::fs::create_dir(&extract_dir);\n+\n+        let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", &self.name, &self.version));\n+        // don't download/extract if we already have done so\n+        if !krate_file_path.is_file() {\n+            // create a file path to download and write the crate data into\n+            let mut krate_dest = std::fs::File::create(&krate_file_path).unwrap();\n+            let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n+            // copy the crate into the file\n+            std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n+\n+            // unzip the tarball\n+            let ungz_tar = flate2::read::GzDecoder::new(std::fs::File::open(&krate_file_path).unwrap());\n+            // extract the tar archive\n+            let mut archive = tar::Archive::new(ungz_tar);\n+            archive.unpack(&extract_dir).expect(\"Failed to extract!\");\n+        }\n+        // crate is extracted, return a new Krate object which contains the path to the extracted\n+        // sources that clippy can check\n+        Crate {\n+            version: self.version.clone(),\n+            name: self.name.clone(),\n+            path: extract_dir.join(format!(\"{}-{}/\", self.name, self.version)),\n+        }\n+    }\n+}\n+\n+impl Crate {\n+    fn run_clippy_lints(&self, cargo_clippy_path: &PathBuf) -> Vec<ClippyWarning> {\n+        println!(\"Linting {} {}...\", &self.name, &self.version);\n+        let cargo_clippy_path = std::fs::canonicalize(cargo_clippy_path).unwrap();\n+\n+        let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir/\");\n+\n+        let all_output = std::process::Command::new(cargo_clippy_path)\n+            .env(\"CARGO_TARGET_DIR\", shared_target_dir)\n+            // lint warnings will look like this:\n+            // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n+            .args(&[\n+                \"--\",\n+                \"--message-format=json\",\n+                \"--\",\n+                \"--cap-lints=warn\",\n+                \"-Wclippy::pedantic\",\n+                \"-Wclippy::cargo\",\n+            ])\n+            .current_dir(&self.path)\n+            .output()\n+            .unwrap();\n+        let stdout = String::from_utf8_lossy(&all_output.stdout);\n+        let output_lines = stdout.lines();\n+        //dbg!(&output_lines);\n+        let warnings: Vec<ClippyWarning> = output_lines\n+            .into_iter()\n+            // get all clippy warnings\n+            .filter(|line| line.contains(\"clippy::\"))\n+            .map(|json_msg| parse_json_message(json_msg, &self))\n+            .collect();\n+        warnings\n+    }\n+}\n+\n+fn build_clippy() {\n+    Command::new(\"cargo\")\n+        .arg(\"build\")\n+        .output()\n+        .expect(\"Failed to build clippy!\");\n+}\n+\n+// get a list of CrateSources we want to check from a \"lintcheck_crates.toml\" file.\n+fn read_crates() -> Vec<CrateSource> {\n+    let toml_path = PathBuf::from(\"clippy_dev/lintcheck_crates.toml\");\n+    let toml_content: String =\n+        std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n+    let crate_list: CrateList =\n+        toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{}\", toml_path.display(), e));\n+    // parse the hashmap of the toml file into a list of crates\n+    let tomlcrates: Vec<TomlCrate> = crate_list\n+        .crates\n+        .into_iter()\n+        .map(|(name, versions)| TomlCrate { name, versions })\n+        .collect();\n+\n+    // flatten TomlCrates into CrateSources (one TomlCrates may represent several versions of a crate =>\n+    // multiple Cratesources)\n+    let mut crate_sources = Vec::new();\n+    tomlcrates.into_iter().for_each(|tk| {\n+        tk.versions.iter().for_each(|ver| {\n+            crate_sources.push(CrateSource {\n+                name: tk.name.clone(),\n+                version: ver.to_string(),\n+            });\n+        })\n+    });\n+    crate_sources\n+}\n+\n+// extract interesting data from a json lint message\n+fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n+    let jmsg: Value = serde_json::from_str(&json_message).unwrap_or_else(|e| panic!(\"Failed to parse json:\\n{:?}\", e));\n+\n+    ClippyWarning {\n+        crate_name: krate.name.to_string(),\n+        crate_version: krate.version.to_string(),\n+        file: jmsg[\"message\"][\"spans\"][0][\"file_name\"]\n+            .to_string()\n+            .trim_matches('\"')\n+            .into(),\n+        line: jmsg[\"message\"][\"spans\"][0][\"line_start\"]\n+            .to_string()\n+            .trim_matches('\"')\n+            .into(),\n+        column: jmsg[\"message\"][\"spans\"][0][\"text\"][0][\"highlight_start\"]\n+            .to_string()\n+            .trim_matches('\"')\n+            .into(),\n+        linttype: jmsg[\"message\"][\"code\"][\"code\"].to_string().trim_matches('\"').into(),\n+        message: jmsg[\"message\"][\"message\"].to_string().trim_matches('\"').into(),\n+    }\n+}\n+\n+// the main fn\n+pub fn run(clap_config: &ArgMatches) {\n+    let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\");\n+\n+    println!(\"Compiling clippy...\");\n+    build_clippy();\n+    println!(\"Done compiling\");\n+\n+    // assert that clippy is found\n+    assert!(\n+        cargo_clippy_path.is_file(),\n+        \"target/debug/cargo-clippy binary not found! {}\",\n+        cargo_clippy_path.display()\n+    );\n+\n+    let clippy_ver = std::process::Command::new(\"target/debug/cargo-clippy\")\n+        .arg(\"--version\")\n+        .output()\n+        .map(|o| String::from_utf8_lossy(&o.stdout).into_owned())\n+        .expect(\"could not get clippy version!\");\n+\n+    // download and extract the crates, then run clippy on them and collect clippys warnings\n+    // flatten into one big list of warnings\n+\n+    let crates = read_crates();\n+\n+    let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n+        // if we don't have the specified crated in the .toml, throw an error\n+        if !crates.iter().any(|krate| krate.name == only_one_crate) {\n+            eprintln!(\n+                \"ERROR: could not find crate '{}' in clippy_dev/lintcheck_crates.toml\",\n+                only_one_crate\n+            );\n+            std::process::exit(1);\n+        }\n+\n+        // only check a single crate that was passed via cmdline\n+        crates\n+            .into_iter()\n+            .map(|krate| krate.download_and_extract())\n+            .filter(|krate| krate.name == only_one_crate)\n+            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n+            .flatten()\n+            .collect()\n+    } else {\n+        // check all crates (default)\n+        crates\n+            .into_iter()\n+            .map(|krate| krate.download_and_extract())\n+            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n+            .flatten()\n+            .collect()\n+    };\n+\n+    // generate some stats:\n+\n+    // count lint type occurrences\n+    let mut counter: HashMap<&String, usize> = HashMap::new();\n+    clippy_warnings\n+        .iter()\n+        .for_each(|wrn| *counter.entry(&wrn.linttype).or_insert(0) += 1);\n+\n+    // collect into a tupled list for sorting\n+    let mut stats: Vec<(&&String, &usize)> = counter.iter().map(|(lint, count)| (lint, count)).collect();\n+    // sort by \"000{count} {clippy::lintname}\"\n+    // to not have a lint with 200 and 2 warnings take the same spot\n+    stats.sort_by_key(|(lint, count)| format!(\"{:0>4}, {}\", count, lint));\n+\n+    let stats_formatted: String = stats\n+        .iter()\n+        .map(|(lint, count)| format!(\"{} {}\\n\", lint, count))\n+        .collect::<String>();\n+\n+    let mut all_msgs: Vec<String> = clippy_warnings.iter().map(|warning| warning.to_string()).collect();\n+    all_msgs.sort();\n+    all_msgs.push(\"\\n\\n\\n\\nStats\\n\\n\".into());\n+    all_msgs.push(stats_formatted);\n+\n+    // save the text into lintcheck-logs/logs.txt\n+    let mut text = clippy_ver; // clippy version number on top\n+    text.push_str(&format!(\"\\n{}\", all_msgs.join(\"\")));\n+    write(\"lintcheck-logs/logs.txt\", text).unwrap();\n+}"}, {"sha": "e7a298a37e17a37f226c2b27fe84911bf3e92af7", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -3,13 +3,20 @@\n use clap::{App, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n \n+#[cfg(feature = \"lintcheck\")]\n+use clippy_dev::lintcheck;\n+\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n         (\"bless\", Some(matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n+        #[cfg(feature = \"lintcheck\")]\n+        (\"lintcheck\", Some(matches)) => {\n+            lintcheck::run(&matches);\n+        },\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n@@ -46,7 +53,18 @@ fn main() {\n }\n \n fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"Clippy developer tooling\")\n+    #[cfg(feature = \"lintcheck\")]\n+    let lintcheck_sbcmd = SubCommand::with_name(\"lintcheck\")\n+        .about(\"run clippy on a set of crates and check output\")\n+        .arg(\n+            Arg::with_name(\"only\")\n+                .takes_value(true)\n+                .value_name(\"CRATE\")\n+                .long(\"only\")\n+                .help(\"only process a single crate of the list\"),\n+        );\n+\n+    let app = App::new(\"Clippy developer tooling\")\n         .subcommand(\n             SubCommand::with_name(\"bless\")\n                 .about(\"bless the test output changes\")\n@@ -163,6 +181,10 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .validator_os(serve::validate_port),\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        )\n-        .get_matches()\n+        );\n+\n+    #[cfg(feature = \"lintcheck\")]\n+    let app = app.subcommand(lintcheck_sbcmd);\n+\n+    app.get_matches()\n }"}, {"sha": "a8a6a2cb1bd6fbd4fdfa27a707679450d7838bc5", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::filter_map)]\n-\n use std::fs;\n use std::fs::File;\n use std::io::prelude::*;"}, {"sha": "38098f8a14c783a0ae8a6b7c7b025554c518cfb6", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -34,6 +34,8 @@ rustc-semver=\"1.1.0\"\n url = { version =  \"2.1.0\", features = [\"serde\"] }\n quote = \"1\"\n syn = { version = \"1\", features = [\"full\"] }\n+regex = \"1.4\"\n+lazy_static = \"1.4\"\n \n [features]\n deny-warnings = []"}, {"sha": "c30d65bbc57043a34881b284cb92631316b28a85", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -8,6 +8,14 @@ use crate::utils::span_lint_and_help;\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `as` conversions.\n     ///\n+    /// Note that this lint is specialized in linting *every single* use of `as`\n+    /// regardless of whether good alternatives exist or not.\n+    /// If you want more precise lints for `as`, please consider using these separate lints:\n+    /// `unnecessary_cast`, `cast_lossless/possible_truncation/possible_wrap/precision_loss/sign_loss`,\n+    /// `fn_to_numeric_cast(_with_truncation)`, `char_lit_as_u8`, `ref_to_mut` and `ptr_as_ptr`.\n+    /// There is a good explanation the reason why this lint should work in this way and how it is useful\n+    /// [in this issue](https://github.com/rust-lang/rust-clippy/issues/5122).\n+    ///\n     /// **Why is this bad?** `as` conversions will perform many kinds of\n     /// conversions, including silently lossy conversions and dangerous coercions.\n     /// There are cases when it makes sense to use `as`, so the lint is"}, {"sha": "ae64c688744542512bb804858aa55c873a805066", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -18,7 +18,7 @@ declare_clippy_lint! {\n     /// other solution is to ensure the mutex is unlocked before calling await,\n     /// either by introducing a scope or an explicit call to Drop::drop.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Will report false positive for explicitly dropped guards ([#6446](https://github.com/rust-lang/rust-clippy/issues/6446)).\n     ///\n     /// **Example:**\n     ///\n@@ -57,7 +57,7 @@ declare_clippy_lint! {\n     /// at runtime. Holding onto a `RefCell` ref across an `await` suspension point\n     /// risks panics from a mutable ref shared while other refs are outstanding.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Will report false positive for explicitly dropped refs ([#6353](https://github.com/rust-lang/rust-clippy/issues/6353)).\n     ///\n     /// **Example:**\n     ///"}, {"sha": "d5347ce6ed756d6faf97a9e8cb77fce1947fe58f", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,88 @@\n+use crate::utils::paths::STRING;\n+use crate::utils::{match_def_path, span_lint_and_help};\n+use if_chain::if_chain;\n+use lazy_static::lazy_static;\n+use regex::Regex;\n+use rustc_ast::ast::LitKind;\n+use rustc_hir::{Expr, ExprKind, PathSegment};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{source_map::Spanned, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for calls to `ends_with` with possible file extensions\n+    /// and suggests to use a case-insensitive approach instead.\n+    ///\n+    /// **Why is this bad?**\n+    /// `ends_with` is case-sensitive and may not detect files with a valid extension.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn is_rust_file(filename: &str) -> bool {\n+    ///     filename.ends_with(\".rs\")\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn is_rust_file(filename: &str) -> bool {\n+    ///     filename.rsplit('.').next().map(|ext| ext.eq_ignore_ascii_case(\"rs\")) == Some(true)\n+    /// }\n+    /// ```\n+    pub CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    pedantic,\n+    \"Checks for calls to ends_with with case-sensitive file extensions\"\n+}\n+\n+declare_lint_pass!(CaseSensitiveFileExtensionComparisons => [CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS]);\n+\n+fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Span> {\n+    lazy_static! {\n+        static ref RE: Regex = Regex::new(r\"^\\.([a-z0-9]{1,5}|[A-Z0-9]{1,5})$\").unwrap();\n+    }\n+    if_chain! {\n+        if let ExprKind::MethodCall(PathSegment { ident, .. }, _, [obj, extension, ..], span) = expr.kind;\n+        if ident.as_str() == \"ends_with\";\n+        if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = extension.kind;\n+        if RE.is_match(&ext_literal.as_str());\n+        then {\n+            let mut ty = ctx.typeck_results().expr_ty(obj);\n+            ty = match ty.kind() {\n+                ty::Ref(_, ty, ..) => ty,\n+                _ => ty\n+            };\n+\n+            match ty.kind() {\n+                ty::Str => {\n+                    return Some(span);\n+                },\n+                ty::Adt(&ty::AdtDef { did, .. }, _) => {\n+                    if match_def_path(ctx, did, &STRING) {\n+                        return Some(span);\n+                    }\n+                },\n+                _ => { return None; }\n+            }\n+        }\n+    }\n+    None\n+}\n+\n+impl LateLintPass<'tcx> for CaseSensitiveFileExtensionComparisons {\n+    fn check_expr(&mut self, ctx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let Some(span) = check_case_sensitive_file_extension_comparison(ctx, expr) {\n+            span_lint_and_help(\n+                ctx,\n+                CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+                span,\n+                \"case-sensitive file extension comparison\",\n+                None,\n+                \"consider using a case-insensitive comparison instead\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "f21a734bb439fb4cbc273207d6638aacccbfc8de", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -57,9 +57,9 @@ impl CognitiveComplexity {\n \n         let expr = &body.value;\n \n-        let mut helper = CCHelper { cc: 1, returns: 0 };\n+        let mut helper = CcHelper { cc: 1, returns: 0 };\n         helper.visit_expr(expr);\n-        let CCHelper { cc, returns } = helper;\n+        let CcHelper { cc, returns } = helper;\n         let ret_ty = cx.typeck_results().node_type(expr.hir_id);\n         let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym::result_type) {\n             returns\n@@ -136,12 +136,12 @@ impl<'tcx> LateLintPass<'tcx> for CognitiveComplexity {\n     }\n }\n \n-struct CCHelper {\n+struct CcHelper {\n     cc: u64,\n     returns: u64,\n }\n \n-impl<'tcx> Visitor<'tcx> for CCHelper {\n+impl<'tcx> Visitor<'tcx> for CcHelper {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {"}, {"sha": "604ba1020469714be54f7911ccbb082e5a271a55", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -2,7 +2,7 @@ use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -72,8 +72,7 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         if arms_inner.iter().all(|arm| arm.guard.is_none());\n         // match expression must be a local binding\n         // match <local> { .. }\n-        if let ExprKind::Path(QPath::Resolved(None, path)) = expr_in.kind;\n-        if let Res::Local(binding_id) = path.res;\n+        if let Some(binding_id) = addr_adjusted_binding(expr_in, cx);\n         // one of the branches must be \"wild-like\"\n         if let Some(wild_inner_arm_idx) = arms_inner.iter().rposition(|arm_inner| arm_is_wild_like(arm_inner, cx.tcx));\n         let (wild_inner_arm, non_wild_inner_arm) =\n@@ -85,7 +84,12 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         // the \"wild-like\" branches must be equal\n         if SpanlessEq::new(cx).eq_expr(wild_inner_arm.body, wild_outer_arm.body);\n         // the binding must not be used in the if guard\n-        if !matches!(arm.guard, Some(Guard::If(guard)) if LocalUsedVisitor::new(binding_id).check_expr(guard));\n+        if match arm.guard {\n+            None => true,\n+            Some(Guard::If(expr) | Guard::IfLet(_, expr)) => {\n+                !LocalUsedVisitor::new(binding_id).check_expr(expr)\n+            }\n+        };\n         // ...or anywhere in the inner match\n         if !arms_inner.iter().any(|arm| LocalUsedVisitor::new(binding_id).check_arm(arm));\n         then {\n@@ -170,3 +174,20 @@ fn is_none_ctor(res: Res, tcx: TyCtxt<'_>) -> bool {\n     }\n     false\n }\n+\n+/// Retrieves a binding ID with optional `&` and/or `*` operators removed. (e.g. `&**foo`)\n+/// Returns `None` if a non-reference type is de-referenced.\n+/// For example, if `Vec` is de-referenced to a slice, `None` is returned.\n+fn addr_adjusted_binding(mut expr: &Expr<'_>, cx: &LateContext<'_>) -> Option<HirId> {\n+    loop {\n+        match expr.kind {\n+            ExprKind::AddrOf(_, _, e) => expr = e,\n+            ExprKind::Path(QPath::Resolved(None, path)) => match path.res {\n+                Res::Local(binding_id) => break Some(binding_id),\n+                _ => break None,\n+            },\n+            ExprKind::Unary(UnOp::UnDeref, e) if cx.typeck_results().expr_ty(e).is_ref() => expr = e,\n+            _ => break None,\n+        }\n+    }\n+}"}, {"sha": "89088c533ed50b305a6f4e0b0cbe4114921fe81d", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -179,3 +179,12 @@ declare_deprecated_lint! {\n     pub UNKNOWN_CLIPPY_LINTS,\n     \"this lint has been integrated into the `unknown_lints` rustc lint\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been replaced by `manual_find_map`, a\n+    /// more specific lint.\n+    pub FIND_MAP,\n+    \"this lint has been replaced by `manual_find_map`, a more specific lint\"\n+}"}, {"sha": "aa235642ac31094e96e9f911d8fa519642b4eb45", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -5,8 +5,8 @@ use crate::consts::{miri_to_const, Constant};\n use crate::utils::span_lint;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_middle::ty::util::IntTypeExt;\n+use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::convert::TryFrom;\n "}, {"sha": "32b1299efce91d1fe44fdbac532f1ecf52dbd3c0", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,102 @@\n+use crate::utils::{indent_of, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n+    ///\n+    /// **Why is this bad?** Exhaustive enums are typically fine, but a project which does\n+    /// not wish to make a stability commitment around exported enums may wish to\n+    /// disable them by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// enum Foo {\n+    ///     Bar,\n+    ///     Baz\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[non_exhaustive]\n+    /// enum Foo {\n+    ///     Bar,\n+    ///     Baz\n+    /// }\n+    /// ```\n+    pub EXHAUSTIVE_ENUMS,\n+    restriction,\n+    \"detects exported enums that have not been marked #[non_exhaustive]\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns on any exported `structs`s that are not tagged `#[non_exhaustive]`\n+    ///\n+    /// **Why is this bad?** Exhaustive structs are typically fine, but a project which does\n+    /// not wish to make a stability commitment around exported structs may wish to\n+    /// disable them by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct Foo {\n+    ///     bar: u8,\n+    ///     baz: String,\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[non_exhaustive]\n+    /// struct Foo {\n+    ///     bar: u8,\n+    ///     baz: String,\n+    /// }\n+    /// ```\n+    pub EXHAUSTIVE_STRUCTS,\n+    restriction,\n+    \"detects exported structs that have not been marked #[non_exhaustive]\"\n+}\n+\n+declare_lint_pass!(ExhaustiveItems => [EXHAUSTIVE_ENUMS, EXHAUSTIVE_STRUCTS]);\n+\n+impl LateLintPass<'_> for ExhaustiveItems {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if_chain! {\n+            if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n+            if cx.access_levels.is_exported(item.hir_id);\n+            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            then {\n+                let (lint, msg) = if let ItemKind::Enum(..) = item.kind {\n+                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n+                } else {\n+                    (EXHAUSTIVE_STRUCTS, \"exported structs should not be exhaustive\")\n+                };\n+                let suggestion_span = item.span.shrink_to_lo();\n+                let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n+                span_lint_and_then(\n+                    cx,\n+                    lint,\n+                    item.span,\n+                    msg,\n+                    |diag| {\n+                        let sugg = format!(\"#[non_exhaustive]\\n{}\", indent);\n+                        diag.span_suggestion(suggestion_span,\n+                                             \"try adding #[non_exhaustive]\",\n+                                             sugg,\n+                                             Applicability::MaybeIncorrect);\n+                    }\n+                );\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "7208e66ff7be15193646225bdd719176dd483ed4", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.kind().skip_binder()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.kind().skip_binder() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "260b8988d371113adf83b4801033215edc05e5c3", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -46,8 +46,8 @@ declare_lint_pass!(IntPlusOne => [INT_PLUS_ONE]);\n \n #[derive(Copy, Clone)]\n enum Side {\n-    LHS,\n-    RHS,\n+    Lhs,\n+    Rhs,\n }\n \n impl IntPlusOne {\n@@ -66,11 +66,11 @@ impl IntPlusOne {\n                 match (lhskind.node, &lhslhs.kind, &lhsrhs.kind) {\n                     // `-1 + x`\n                     (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n-                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::Lhs)\n                     },\n                     // `x - 1`\n                     (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::Lhs)\n                     },\n                     _ => None,\n                 }\n@@ -82,10 +82,10 @@ impl IntPlusOne {\n                 match (&rhslhs.kind, &rhsrhs.kind) {\n                     // `y + 1` and `1 + y`\n                     (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::Rhs)\n                     },\n                     (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::Rhs)\n                     },\n                     _ => None,\n                 }\n@@ -97,10 +97,10 @@ impl IntPlusOne {\n                 match (&lhslhs.kind, &lhsrhs.kind) {\n                     // `1 + x` and `x + 1`\n                     (&ExprKind::Lit(ref lit), _) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhsrhs, rhs, Side::Lhs)\n                     },\n                     (_, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS)\n+                        Self::generate_recommendation(cx, binop, lhslhs, rhs, Side::Lhs)\n                     },\n                     _ => None,\n                 }\n@@ -110,11 +110,11 @@ impl IntPlusOne {\n                 match (rhskind.node, &rhslhs.kind, &rhsrhs.kind) {\n                     // `-1 + y`\n                     (BinOpKind::Add, &ExprKind::Lit(ref lit), _) if Self::check_lit(lit, -1) => {\n-                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhsrhs, lhs, Side::Rhs)\n                     },\n                     // `y - 1`\n                     (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) if Self::check_lit(lit, 1) => {\n-                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS)\n+                        Self::generate_recommendation(cx, binop, rhslhs, lhs, Side::Rhs)\n                     },\n                     _ => None,\n                 }\n@@ -138,8 +138,8 @@ impl IntPlusOne {\n         if let Some(snippet) = snippet_opt(cx, node.span) {\n             if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n                 let rec = match side {\n-                    Side::LHS => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n-                    Side::RHS => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                    Side::Lhs => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n+                    Side::Rhs => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n                 };\n                 return rec;\n             }"}, {"sha": "54007c29c6c5efbb8af522a3d18932503b372496", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -170,6 +170,7 @@ mod blocks_in_if_conditions;\n mod booleans;\n mod bytecount;\n mod cargo_common_metadata;\n+mod case_sensitive_file_extension_comparisons;\n mod checked_conversions;\n mod cognitive_complexity;\n mod collapsible_if;\n@@ -199,6 +200,7 @@ mod escape;\n mod eta_reduction;\n mod eval_order_dependence;\n mod excessive_bools;\n+mod exhaustive_items;\n mod exit;\n mod explicit_write;\n mod fallible_impl_from;\n@@ -300,6 +302,7 @@ mod redundant_closure_call;\n mod redundant_else;\n mod redundant_field_names;\n mod redundant_pub_crate;\n+mod redundant_slicing;\n mod redundant_static_lifetimes;\n mod ref_option_ref;\n mod reference;\n@@ -339,6 +342,7 @@ mod unused_self;\n mod unused_unit;\n mod unwrap;\n mod unwrap_in_result;\n+mod upper_case_acronyms;\n mod use_self;\n mod useless_conversion;\n mod vec;\n@@ -506,6 +510,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::unknown_clippy_lints\",\n         \"this lint has been integrated into the `unknown_lints` rustc lint\",\n     );\n+    store.register_removed(\n+        \"clippy::find_map\",\n+        \"this lint has been replaced by `manual_find_map`, a more specific lint\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -561,6 +569,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &booleans::NONMINIMAL_BOOL,\n         &bytecount::NAIVE_BYTECOUNT,\n         &cargo_common_metadata::CARGO_COMMON_METADATA,\n+        &case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n         &checked_conversions::CHECKED_CONVERSIONS,\n         &cognitive_complexity::COGNITIVE_COMPLEXITY,\n         &collapsible_if::COLLAPSIBLE_ELSE_IF,\n@@ -610,6 +619,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         &excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n         &excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n+        &exhaustive_items::EXHAUSTIVE_ENUMS,\n+        &exhaustive_items::EXHAUSTIVE_STRUCTS,\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n@@ -731,18 +742,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::FILTER_MAP,\n         &methods::FILTER_MAP_NEXT,\n         &methods::FILTER_NEXT,\n-        &methods::FIND_MAP,\n         &methods::FLAT_MAP_IDENTITY,\n         &methods::FROM_ITER_INSTEAD_OF_COLLECT,\n         &methods::GET_UNWRAP,\n         &methods::INEFFICIENT_TO_STRING,\n+        &methods::INSPECT_FOR_EACH,\n         &methods::INTO_ITER_ON_REF,\n         &methods::ITERATOR_STEP_BY_ZERO,\n         &methods::ITER_CLONED_COLLECT,\n         &methods::ITER_NEXT_SLICE,\n         &methods::ITER_NTH,\n         &methods::ITER_NTH_ZERO,\n         &methods::ITER_SKIP_NEXT,\n+        &methods::MANUAL_FILTER_MAP,\n+        &methods::MANUAL_FIND_MAP,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_COLLECT_RESULT_UNIT,\n         &methods::MAP_FLATTEN,\n@@ -850,6 +863,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &redundant_else::REDUNDANT_ELSE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n+        &redundant_slicing::REDUNDANT_SLICING,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n         &ref_option_ref::REF_OPTION_REF,\n         &reference::DEREF_ADDROF,\n@@ -942,6 +956,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap::PANICKING_UNWRAP,\n         &unwrap::UNNECESSARY_UNWRAP,\n         &unwrap_in_result::UNWRAP_IN_RESULT,\n+        &upper_case_acronyms::UPPER_CASE_ACRONYMS,\n         &use_self::USE_SELF,\n         &useless_conversion::USELESS_CONVERSION,\n         &vec::USELESS_VEC,\n@@ -981,7 +996,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     }\n     store.register_late_pass(|| box utils::author::Author);\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n-    store.register_late_pass(|| box serde_api::SerdeAPI);\n+    store.register_late_pass(|| box serde_api::SerdeApi);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     store.register_late_pass(move || box types::Types::new(vec_box_size_threshold));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n@@ -1092,6 +1107,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n     store.register_late_pass(|| box missing_doc::MissingDoc::new());\n     store.register_late_pass(|| box missing_inline::MissingInline);\n+    store.register_late_pass(move || box exhaustive_items::ExhaustiveItems);\n     store.register_late_pass(|| box if_let_some_result::OkIfLet);\n     store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n     store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n@@ -1172,6 +1188,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n+    store.register_early_pass(|| box upper_case_acronyms::UpperCaseAcronyms);\n     store.register_late_pass(|| box default::Default::default());\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n@@ -1229,6 +1246,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n     store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n     store.register_late_pass(move || box types::PtrAsPtr::new(msrv));\n+    store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n+    store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1239,6 +1258,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&create_dir::CREATE_DIR),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+        LintId::of(&exhaustive_items::EXHAUSTIVE_ENUMS),\n+        LintId::of(&exhaustive_items::EXHAUSTIVE_STRUCTS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),\n@@ -1286,6 +1307,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&await_holding_invalid::AWAIT_HOLDING_LOCK),\n         LintId::of(&await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n+        LintId::of(&case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n@@ -1323,7 +1345,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n-        LintId::of(&methods::FIND_MAP),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n         LintId::of(&methods::MAP_UNWRAP_OR),\n@@ -1509,13 +1530,16 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::FROM_ITER_INSTEAD_OF_COLLECT),\n+        LintId::of(&methods::INSPECT_FOR_EACH),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NEXT_SLICE),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n+        LintId::of(&methods::MANUAL_FILTER_MAP),\n+        LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(&methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(&methods::NEW_RET_NO_SELF),\n@@ -1589,6 +1613,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n+        LintId::of(&redundant_slicing::REDUNDANT_SLICING),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n@@ -1651,6 +1676,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unused_unit::UNUSED_UNIT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&vec::USELESS_VEC),\n         LintId::of(&vec_init_then_push::VEC_INIT_THEN_PUSH),\n@@ -1767,6 +1793,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n         LintId::of(&write::PRINT_WITH_NEWLINE),\n@@ -1808,6 +1835,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::CLONE_ON_COPY),\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n+        LintId::of(&methods::INSPECT_FOR_EACH),\n+        LintId::of(&methods::MANUAL_FILTER_MAP),\n+        LintId::of(&methods::MANUAL_FIND_MAP),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n@@ -1832,6 +1862,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n+        LintId::of(&redundant_slicing::REDUNDANT_SLICING),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&repeat_once::REPEAT_ONCE),"}, {"sha": "5211ca7da323a012f41fe41d9e0109064ab1da40", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1069,7 +1069,6 @@ fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n ) -> impl Iterator<Item = Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>> + 'c {\n     // As the `filter` and `map` below do different things, I think putting together\n     // just increases complexity. (cc #3188 and #4193)\n-    #[allow(clippy::filter_map)]\n     stmts\n         .iter()\n         .filter_map(move |stmt| match stmt.kind {"}, {"sha": "1ed3f3de839085d3e73510edc49921738d6ec003", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -43,8 +43,7 @@ impl LateLintPass<'_> for MainRecursion {\n \n         if_chain! {\n             if let ExprKind::Call(func, _) = &expr.kind;\n-            if let ExprKind::Path(path) = &func.kind;\n-            if let QPath::Resolved(_, path) = &path;\n+            if let ExprKind::Path(QPath::Resolved(_, path)) = &func.kind;\n             if let Some(def_id) = path.res.opt_def_id();\n             if is_entrypoint_fn(cx, def_id);\n             then {"}, {"sha": "8c77e155b70ce4297ab971174ea0225afa61b236", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -23,9 +23,6 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let foo: Option<i32> = None;\n     /// foo.map_or(Err(\"error\"), |v| Ok(v));\n-    ///\n-    /// let foo: Option<i32> = None;\n-    /// foo.map_or(Err(\"error\"), |v| Ok(v));\n     /// ```\n     ///\n     /// Use instead:"}, {"sha": "01126e86199b41172d5087cba7fc7192cf4cf5c3", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -131,7 +131,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) ->\n             Some(expr.span)\n         },\n         hir::ExprKind::Block(ref block, _) => {\n-            match (&block.stmts[..], block.expr.as_ref()) {\n+            match (block.stmts, block.expr.as_ref()) {\n                 (&[], Some(inner_expr)) => {\n                     // If block only contains an expression,\n                     // reduce `{ X }` to `X`"}, {"sha": "5f62d2d13165c181fbe4d6245a74df482c7f6ead", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 62, "deletions": 14, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -2,10 +2,10 @@ use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n-    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg, remove_blocks,\n-    snippet, snippet_block, snippet_opt, snippet_with_applicability, span_lint_and_help, span_lint_and_note,\n-    span_lint_and_sugg, span_lint_and_then,\n+    expr_block, get_arg_name, get_parent_expr, implements_trait, in_macro, indent_of, is_allowed, is_expn_of,\n+    is_refutable, is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg,\n+    peel_hir_pat_refs, peel_mid_ty_refs, peel_n_hir_expr_refs, remove_blocks, snippet, snippet_block, snippet_opt,\n+    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n@@ -728,20 +728,60 @@ fn report_single_match_single_pattern(\n     let els_str = els.map_or(String::new(), |els| {\n         format!(\" else {}\", expr_block(cx, els, None, \"..\", Some(expr.span)))\n     });\n+\n+    let (msg, sugg) = if_chain! {\n+        let (pat, pat_ref_count) = peel_hir_pat_refs(arms[0].pat);\n+        if let PatKind::Path(_) | PatKind::Lit(_) = pat.kind;\n+        let (ty, ty_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(ex));\n+        if let Some(trait_id) = cx.tcx.lang_items().structural_peq_trait();\n+        if ty.is_integral() || ty.is_char() || ty.is_str() || implements_trait(cx, ty, trait_id, &[]);\n+        then {\n+            // scrutinee derives PartialEq and the pattern is a constant.\n+            let pat_ref_count = match pat.kind {\n+                // string literals are already a reference.\n+                PatKind::Lit(Expr { kind: ExprKind::Lit(lit), .. }) if lit.node.is_str() => pat_ref_count + 1,\n+                _ => pat_ref_count,\n+            };\n+            // References are only implicitly added to the pattern, so no overflow here.\n+            // e.g. will work: match &Some(_) { Some(_) => () }\n+            // will not: match Some(_) { &Some(_) => () }\n+            let ref_count_diff = ty_ref_count - pat_ref_count;\n+\n+            // Try to remove address of expressions first.\n+            let (ex, removed) = peel_n_hir_expr_refs(ex, ref_count_diff);\n+            let ref_count_diff = ref_count_diff - removed;\n+\n+            let msg = \"you seem to be trying to use `match` for an equality check. Consider using `if`\";\n+            let sugg = format!(\n+                \"if {} == {}{} {}{}\",\n+                snippet(cx, ex.span, \"..\"),\n+                // PartialEq for different reference counts may not exist.\n+                \"&\".repeat(ref_count_diff),\n+                snippet(cx, arms[0].pat.span, \"..\"),\n+                expr_block(cx, &arms[0].body, None, \"..\", Some(expr.span)),\n+                els_str,\n+            );\n+            (msg, sugg)\n+        } else {\n+            let msg = \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\";\n+            let sugg = format!(\n+                \"if let {} = {} {}{}\",\n+                snippet(cx, arms[0].pat.span, \"..\"),\n+                snippet(cx, ex.span, \"..\"),\n+                expr_block(cx, &arms[0].body, None, \"..\", Some(expr.span)),\n+                els_str,\n+            );\n+            (msg, sugg)\n+        }\n+    };\n+\n     span_lint_and_sugg(\n         cx,\n         lint,\n         expr.span,\n-        \"you seem to be trying to use match for destructuring a single pattern. Consider using `if \\\n-         let`\",\n+        msg,\n         \"try this\",\n-        format!(\n-            \"if let {} = {} {}{}\",\n-            snippet(cx, arms[0].pat.span, \"..\"),\n-            snippet(cx, ex.span, \"..\"),\n-            expr_block(cx, &arms[0].body, None, \"..\", Some(expr.span)),\n-            els_str,\n-        ),\n+        sugg,\n         Applicability::HasPlaceholders,\n     );\n }\n@@ -1185,6 +1225,14 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n             } else {\n                 pat\n             };\n+\n+            // strip potential borrows (#6503), but only if the type is a reference\n+            let mut ex_new = ex;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, .., ex_inner) = ex.kind {\n+                if let ty::Ref(..) = cx.typeck_results().expr_ty(&ex_inner).kind() {\n+                    ex_new = ex_inner;\n+                }\n+            };\n             span_lint_and_sugg(\n                 cx,\n                 MATCH_LIKE_MATCHES_MACRO,\n@@ -1194,7 +1242,7 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n                 format!(\n                     \"{}matches!({}, {})\",\n                     if b0 { \"\" } else { \"!\" },\n-                    snippet_with_applicability(cx, ex.span, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, ex_new.span, \"..\", &mut applicability),\n                     pat_and_guard,\n                 ),\n                 applicability,"}, {"sha": "6d41ee38a2767b05a0f6b0adc1cfebbc3f2e3a42", "filename": "clippy_lints/src/methods/inspect_for_each.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,23 @@\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Span;\n+\n+use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+\n+use super::INSPECT_FOR_EACH;\n+\n+/// lint use of `inspect().for_each()` for `Iterators`\n+pub(super) fn lint<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, inspect_span: Span) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `inspect(..).for_each(..)` on an `Iterator`\";\n+        let hint = \"move the code from `inspect(..)` to `for_each(..)` and remove the `inspect(..)`\";\n+        span_lint_and_help(\n+            cx,\n+            INSPECT_FOR_EACH,\n+            inspect_span.with_hi(expr.span.hi()),\n+            msg,\n+            None,\n+            hint,\n+        );\n+    }\n+}"}, {"sha": "a17c5996293e93370c0ad6c2e0f4dd79f609ce28", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 165, "deletions": 54, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,5 +1,6 @@\n mod bind_instead_of_map;\n mod inefficient_to_string;\n+mod inspect_for_each;\n mod manual_saturating_arithmetic;\n mod option_map_unwrap_or;\n mod unnecessary_filter_map;\n@@ -14,7 +15,8 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{TraitItem, TraitItemKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind, PatKind, QPath, TraitItem, TraitItemKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n@@ -449,6 +451,58 @@ declare_clippy_lint! {\n     \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.filter(_).map(_)` that can be written more simply\n+    /// as `filter_map(_)`.\n+    ///\n+    /// **Why is this bad?** Redundant code in the `filter` and `map` operations is poor style and\n+    /// less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+     /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// (0_i32..10)\n+    ///     .filter(|n| n.checked_add(1).is_some())\n+    ///     .map(|n| n.checked_add(1).unwrap());\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// (0_i32..10).filter_map(|n| n.checked_add(1));\n+    /// ```\n+    pub MANUAL_FILTER_MAP,\n+    complexity,\n+    \"using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.find(_).map(_)` that can be written more simply\n+    /// as `find_map(_)`.\n+    ///\n+    /// **Why is this bad?** Redundant code in the `find` and `map` operations is poor style and\n+    /// less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+     /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// (0_i32..10)\n+    ///     .find(|n| n.checked_add(1).is_some())\n+    ///     .map(|n| n.checked_add(1).unwrap());\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// (0_i32..10).find_map(|n| n.checked_add(1));\n+    /// ```\n+    pub MANUAL_FIND_MAP,\n+    complexity,\n+    \"using `_.find(_).map(_)` in a way that can be written more simply as `find_map(_)`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.filter_map(_).next()`.\n     ///\n@@ -493,28 +547,6 @@ declare_clippy_lint! {\n     \"call to `flat_map` where `flatten` is sufficient\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.find(_).map(_)`.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.find_map(_)`.\n-    ///\n-    /// **Known problems:** Often requires a condition + Option/Iterator creation\n-    /// inside the closure.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    ///  (0..3).find(|x| *x == 2).map(|x| x * 2);\n-    /// ```\n-    /// Can be written as\n-    /// ```rust\n-    ///  (0..3).find_map(|x| if x == 2 { Some(x * 2) } else { None });\n-    /// ```\n-    pub FIND_MAP,\n-    pedantic,\n-    \"using a combination of `find` and `map` can usually be written as a single method call\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for an iterator or string search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n@@ -1405,6 +1437,36 @@ declare_clippy_lint! {\n     \"use `.collect()` instead of `::from_iter()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `inspect().for_each()`.\n+    ///\n+    /// **Why is this bad?** It is the same as performing the computation\n+    /// inside `inspect` at the beginning of the closure in `for_each`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// [1,2,3,4,5].iter()\n+    /// .inspect(|&x| println!(\"inspect the number: {}\", x))\n+    /// .for_each(|&x| {\n+    ///     assert!(x >= 0);\n+    /// });\n+    /// ```\n+    /// Can be written as\n+    /// ```rust\n+    /// [1,2,3,4,5].iter()\n+    /// .for_each(|&x| {\n+    ///     println!(\"inspect the number: {}\", x);\n+    ///     assert!(x >= 0);\n+    /// });\n+    /// ```\n+    pub INSPECT_FOR_EACH,\n+    complexity,\n+    \"using `.inspect().for_each()`, which can be replaced with `.for_each()`\"\n+}\n+\n pub struct Methods {\n     msrv: Option<RustcVersion>,\n }\n@@ -1442,9 +1504,10 @@ impl_lint_pass!(Methods => [\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n+    MANUAL_FILTER_MAP,\n+    MANUAL_FIND_MAP,\n     FILTER_MAP_NEXT,\n     FLAT_MAP_IDENTITY,\n-    FIND_MAP,\n     MAP_FLATTEN,\n     ITERATOR_STEP_BY_ZERO,\n     ITER_NEXT_SLICE,\n@@ -1467,6 +1530,7 @@ impl_lint_pass!(Methods => [\n     UNNECESSARY_LAZY_EVALUATIONS,\n     MAP_COLLECT_RESULT_UNIT,\n     FROM_ITER_INSTEAD_OF_COLLECT,\n+    INSPECT_FOR_EACH,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n@@ -1508,10 +1572,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"filter\"] => lint_filter_next(cx, expr, arg_lists[1]),\n             [\"next\", \"skip_while\"] => lint_skip_while_next(cx, expr, arg_lists[1]),\n             [\"next\", \"iter\"] => lint_iter_next(cx, expr, arg_lists[1]),\n-            [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"filter\"] => lint_filter_map(cx, expr, false),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1], self.msrv.as_ref()),\n-            [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"find\"] => lint_filter_map(cx, expr, true),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n@@ -1553,6 +1617,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n             [\"collect\", \"map\"] => lint_map_collect(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"for_each\", \"inspect\"] => inspect_for_each::lint(cx, expr, method_spans[1]),\n             _ => {},\n         }\n \n@@ -2955,18 +3020,79 @@ fn lint_skip_while_next<'tcx>(\n     }\n }\n \n-/// lint use of `filter().map()` for `Iterators`\n-fn lint_filter_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n+/// lint use of `filter().map()` or `find().map()` for `Iterators`\n+fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_find: bool) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(_, _, [map_recv, map_arg], map_span) = expr.kind;\n+        if let ExprKind::MethodCall(_, _, [_, filter_arg], filter_span) = map_recv.kind;\n+        if match_trait_method(cx, map_recv, &paths::ITERATOR);\n+\n+        // filter(|x| ...is_some())...\n+        if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n+        let filter_body = cx.tcx.hir().body(filter_body_id);\n+        if let [filter_param] = filter_body.params;\n+        // optional ref pattern: `filter(|&x| ..)`\n+        let (filter_pat, is_filter_param_ref) = if let PatKind::Ref(ref_pat, _) = filter_param.pat.kind {\n+            (ref_pat, true)\n+        } else {\n+            (filter_param.pat, false)\n+        };\n+        // closure ends with is_some() or is_ok()\n+        if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n+        if let ExprKind::MethodCall(path, _, [filter_arg], _) = filter_body.value.kind;\n+        if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n+        if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::option_type, opt_ty.did) {\n+            Some(false)\n+        } else if cx.tcx.is_diagnostic_item(sym::result_type, opt_ty.did) {\n+            Some(true)\n+        } else {\n+            None\n+        };\n+        if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n+\n+        // ...map(|x| ...unwrap())\n+        if let ExprKind::Closure(_, _, map_body_id, ..) = map_arg.kind;\n+        let map_body = cx.tcx.hir().body(map_body_id);\n+        if let [map_param] = map_body.params;\n+        if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;\n+        // closure ends with expect() or unwrap()\n+        if let ExprKind::MethodCall(seg, _, [map_arg, ..], _) = map_body.value.kind;\n+        if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n+\n+        let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n+            // in `filter(|x| ..)`, replace `*x` with `x`\n+            let a_path = if_chain! {\n+                if !is_filter_param_ref;\n+                if let ExprKind::Unary(UnOp::UnDeref, expr_path) = a.kind;\n+                then { expr_path } else { a }\n+            };\n+            // let the filter closure arg and the map closure arg be equal\n+            if_chain! {\n+                if let ExprKind::Path(QPath::Resolved(None, a_path)) = a_path.kind;\n+                if let ExprKind::Path(QPath::Resolved(None, b_path)) = b.kind;\n+                if a_path.res == Res::Local(filter_param_id);\n+                if b_path.res == Res::Local(map_param_id);\n+                if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n+                then {\n+                    return true;\n+                }\n+            }\n+            false\n+        };\n+        if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n+        then {\n+            let span = filter_span.to(map_span);\n+            let (filter_name, lint) = if is_find {\n+                (\"find\", MANUAL_FIND_MAP)\n+            } else {\n+                (\"filter\", MANUAL_FILTER_MAP)\n+            };\n+            let msg = format!(\"`{}(..).map(..)` can be simplified as `{0}_map(..)`\", filter_name);\n+            let to_opt = if is_result { \".ok()\" } else { \"\" };\n+            let sugg = format!(\"{}_map(|{}| {}{})\", filter_name, map_param_ident,\n+                snippet(cx, map_arg.span, \"..\"), to_opt);\n+            span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n+        }\n     }\n }\n \n@@ -3004,29 +3130,14 @@ fn lint_filter_map_next<'tcx>(\n     }\n }\n \n-/// lint use of `find().map()` for `Iterators`\n-fn lint_find_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _find_args: &'tcx [hir::Expr<'_>],\n-    map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().map()` is an Iterator\n-    if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n-        let msg = \"called `find(..).map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n-        span_lint_and_help(cx, FIND_MAP, expr.span, msg, None, hint);\n-    }\n-}\n-\n /// lint use of `filter_map().map()` for `Iterators`\n fn lint_filter_map_map<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     _filter_args: &'tcx [hir::Expr<'_>],\n     _map_args: &'tcx [hir::Expr<'_>],\n ) {\n-    // lint if caller of `.filter().map()` is an Iterator\n+    // lint if caller of `.filter_map().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";"}, {"sha": "76417aa7ed09d39682788314a61b2213c05ec0b9", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -90,10 +90,6 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                 self.found = true;\n                 return;\n             },\n-            ExprKind::If(..) => {\n-                self.found = true;\n-                return;\n-            },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.typeck_results().adjustments().get(expr.hir_id) {\n                     if adj"}, {"sha": "54033f408714086a8c06d9f8315607a86ed16f70", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -117,9 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {\n-                    Some(ty::PredicateKind::Trait(pred, _)) if pred.def_id() != sized_trait => {\n-                        Some(pred)\n-                    },\n+                    Some(ty::PredicateKind::Trait(pred, _)) if pred.def_id() != sized_trait => Some(pred),\n                     _ => None,\n                 }\n             })"}, {"sha": "855529378e650a3bddbf882dc6dbd0491e5423fd", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -199,6 +199,10 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             );\n             return;\n         }\n+        if interned_name.starts_with('_') {\n+            // these bindings are typically unused or represent an ignored portion of a destructuring pattern\n+            return;\n+        }\n         let count = interned_name.chars().count();\n         if count < 3 {\n             if count == 1 {"}, {"sha": "b5aa34111402c9e1c408b136e15748fa923665db", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -263,8 +263,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n             } else if match_type(cx, ty, &paths::COW) {\n                 if_chain! {\n                     if let TyKind::Rptr(_, MutTy { ref ty, ..} ) = arg.kind;\n-                    if let TyKind::Path(ref path) = ty.kind;\n-                    if let QPath::Resolved(None, ref pp) = *path;\n+                    if let TyKind::Path(QPath::Resolved(None, ref pp)) = ty.kind;\n                     if let [ref bx] = *pp.segments;\n                     if let Some(ref params) = bx.args;\n                     if !params.parenthesized;"}, {"sha": "e5ced13514f793088205d3a3b0284355f3cc6852", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,67 @@\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::{lint::in_external_macro, ty::TyS};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::{is_type_lang_item, snippet_with_applicability, span_lint_and_sugg};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for redundant slicing expressions which use the full range, and\n+    /// do not change the type.\n+    ///\n+    /// **Why is this bad?** It unnecessarily adds complexity to the expression.\n+    ///\n+    /// **Known problems:** If the type being sliced has an implementation of `Index<RangeFull>`\n+    /// that actually changes anything then it can't be removed. However, this would be surprising\n+    /// to people reading the code and should have a note with it.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```ignore\n+    /// fn get_slice(x: &[u32]) -> &[u32] {\n+    ///     &x[..]\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```ignore\n+    /// fn get_slice(x: &[u32]) -> &[u32] {\n+    ///     x\n+    /// }\n+    /// ```\n+    pub REDUNDANT_SLICING,\n+    complexity,\n+    \"redundant slicing of the whole range of a type\"\n+}\n+\n+declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n+\n+impl LateLintPass<'_> for RedundantSlicing {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::AddrOf(_, _, addressee) = expr.kind;\n+            if let ExprKind::Index(indexed, range) = addressee.kind;\n+            if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n+            if TyS::same_type(cx.typeck_results().expr_ty(expr), cx.typeck_results().expr_ty(indexed));\n+            then {\n+                let mut app = Applicability::MachineApplicable;\n+                let hint = snippet_with_applicability(cx, indexed.span, \"..\", &mut app).into_owned();\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    REDUNDANT_SLICING,\n+                    expr.span,\n+                    \"redundant slicing of the whole range\",\n+                    \"use the original slice instead\",\n+                    hint,\n+                    app,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "e1450466a7c22454374a4dabce94853ecbeed154", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,3 +1,4 @@\n+use crate::utils::sugg::Sugg;\n use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Mutability, UnOp};\n@@ -110,6 +111,12 @@ declare_clippy_lint! {\n     /// let point = Point(30, 20);\n     /// let x = (&point).0;\n     /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Point(u32, u32);\n+    /// # let point = Point(30, 20);\n+    /// let x = point.0;\n+    /// ```\n     pub REF_IN_DEREF,\n     complexity,\n     \"Use of reference in auto dereference expression.\"\n@@ -124,14 +131,19 @@ impl EarlyLintPass for RefInDeref {\n             if let ExprKind::Paren(ref parened) = object.kind;\n             if let ExprKind::AddrOf(_, _, ref inner) = parened.kind;\n             then {\n-                let mut applicability = Applicability::MachineApplicable;\n+                let applicability = if inner.span.from_expansion() {\n+                    Applicability::MaybeIncorrect\n+                } else {\n+                    Applicability::MachineApplicable\n+                };\n+                let sugg = Sugg::ast(cx, inner, \"_\").maybe_par();\n                 span_lint_and_sugg(\n                     cx,\n                     REF_IN_DEREF,\n                     object.span,\n                     \"creating a reference that is immediately dereferenced\",\n                     \"try this\",\n-                    snippet_with_applicability(cx, inner.span, \"_\", &mut applicability).to_string(),\n+                    sugg.to_string(),\n                     applicability,\n                 );\n             }"}, {"sha": "e438f92b136ac453745d0f35cbfb85f52cf024da", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -131,7 +131,16 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: HirId,\n     ) {\n         match kind {\n-            FnKind::Closure(_) => check_final_expr(cx, &body.value, Some(body.value.span), RetReplacement::Empty),\n+            FnKind::Closure(_) => {\n+                // when returning without value in closure, replace this `return`\n+                // with an empty block to prevent invalid suggestion (see #6501)\n+                let replacement = if let ExprKind::Ret(None) = &body.value.kind {\n+                    RetReplacement::Block\n+                } else {\n+                    RetReplacement::Empty\n+                };\n+                check_final_expr(cx, &body.value, Some(body.value.span), replacement)\n+            },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 if let ExprKind::Block(ref block, _) = body.value.kind {\n                     check_block_return(cx, block);"}, {"sha": "90cf1b6c8613577bbf31d523844a05494dbd5169", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -18,9 +18,9 @@ declare_clippy_lint! {\n     \"various things that will negatively affect your serde experience\"\n }\n \n-declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n+declare_lint_pass!(SerdeApi => [SERDE_API_MISUSE]);\n \n-impl<'tcx> LateLintPass<'tcx> for SerdeAPI {\n+impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),"}, {"sha": "87e386baadc54ec34190b868d9e2ec0a921d444b", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -35,10 +35,11 @@ declare_clippy_lint! {\n \n declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n \n-fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tcx>> {\n+fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool) -> Option<Ty<'tcx>> {\n     match expr.kind {\n         ExprKind::Call(count_func, _func_args) => {\n             if_chain! {\n+                if !inverted;\n                 if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n                 if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n                 if match_def_path(cx, def_id, &paths::MEM_SIZE_OF)\n@@ -50,10 +51,13 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<Ty<'tc\n                 }\n             }\n         },\n-        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node || BinOpKind::Div == op.node => {\n-            get_size_of_ty(cx, left).or_else(|| get_size_of_ty(cx, right))\n+        ExprKind::Binary(op, left, right) if BinOpKind::Mul == op.node => {\n+            get_size_of_ty(cx, left, inverted).or_else(|| get_size_of_ty(cx, right, inverted))\n         },\n-        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr),\n+        ExprKind::Binary(op, left, right) if BinOpKind::Div == op.node => {\n+            get_size_of_ty(cx, left, inverted).or_else(|| get_size_of_ty(cx, right, !inverted))\n+        },\n+        ExprKind::Cast(expr, _) => get_size_of_ty(cx, expr, inverted),\n         _ => None,\n     }\n }\n@@ -128,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for SizeOfInElementCount {\n \n             // Find a size_of call in the count parameter expression and\n             // check that it's the same type\n-            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr);\n+            if let Some(ty_used_for_size_of) = get_size_of_ty(cx, count_expr, false);\n             if TyS::same_type(pointee_ty, ty_used_for_size_of);\n             then {\n                 span_lint_and_help("}, {"sha": "276a9338819d9303c544411021dd419f2d4daa19", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_slice_of_primitives, span_lint_and_sugg, sugg::Sugg};\n+use crate::utils::{is_slice_of_primitives, span_lint_and_then, sugg::Sugg};\n \n use if_chain::if_chain;\n \n@@ -107,25 +107,32 @@ fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option\n impl LateLintPass<'_> for StableSortPrimitive {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if let Some(detection) = detect_stable_sort_primitive(cx, expr) {\n-            span_lint_and_sugg(\n+            span_lint_and_then(\n                 cx,\n                 STABLE_SORT_PRIMITIVE,\n                 expr.span,\n                 format!(\n-                    \"used {} instead of {} to sort primitive type `{}`\",\n+                    \"used `{}` on primitive type `{}`\",\n                     detection.method.stable_name(),\n-                    detection.method.unstable_name(),\n                     detection.slice_type,\n                 )\n                 .as_str(),\n-                \"try\",\n-                format!(\n-                    \"{}.{}({})\",\n-                    detection.slice_name,\n-                    detection.method.unstable_name(),\n-                    detection.method_args\n-                ),\n-                Applicability::MachineApplicable,\n+                |diag| {\n+                    diag.span_suggestion(\n+                        expr.span,\n+                        \"try\",\n+                        format!(\n+                            \"{}.{}({})\",\n+                            detection.slice_name,\n+                            detection.method.unstable_name(),\n+                            detection.method_args,\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    diag.note(\n+                        \"an unstable sort would perform faster without any observable difference for this data type\",\n+                    );\n+                },\n             );\n         }\n     }"}, {"sha": "1b0f1e309aa2c304a680c18cb43bc5f8ae9c7f7a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1106,7 +1106,9 @@ fn is_empty_block(expr: &Expr<'_>) -> bool {\n         expr.kind,\n         ExprKind::Block(\n             Block {\n-                stmts: &[], expr: None, ..\n+                stmts: &[],\n+                expr: None,\n+                ..\n             },\n             _,\n         )"}, {"sha": "61e7031716a9d8098f1fd9288700c699b75d3309", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,93 @@\n+use crate::utils::span_lint_and_sugg;\n+use if_chain::if_chain;\n+use itertools::Itertools;\n+use rustc_ast::ast::{Item, ItemKind, Variant};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::Ident;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for camel case name containing a capitalized acronym.\n+    ///\n+    /// **Why is this bad?** In CamelCase, acronyms count as one word.\n+    /// See [naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case)\n+    /// for more.\n+    ///\n+    /// **Known problems:** When two acronyms are contiguous, the lint can't tell where\n+    /// the first acronym ends and the second starts, so it suggests to lowercase all of\n+    /// the letters in the second acronym.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct HTTPResponse;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct HttpResponse;\n+    /// ```\n+    pub UPPER_CASE_ACRONYMS,\n+    style,\n+    \"capitalized acronyms are against the naming convention\"\n+}\n+\n+declare_lint_pass!(UpperCaseAcronyms => [UPPER_CASE_ACRONYMS]);\n+\n+fn correct_ident(ident: &str) -> String {\n+    let ident = ident.chars().rev().collect::<String>();\n+    let fragments = ident\n+        .split_inclusive(|x: char| !x.is_ascii_lowercase())\n+        .rev()\n+        .map(|x| x.chars().rev().collect::<String>());\n+\n+    let mut ident = fragments.clone().next().unwrap();\n+    for (ref prev, ref curr) in fragments.tuple_windows() {\n+        if [prev, curr]\n+            .iter()\n+            .all(|s| s.len() == 1 && s.chars().next().unwrap().is_ascii_uppercase())\n+        {\n+            ident.push_str(&curr.to_ascii_lowercase());\n+        } else {\n+            ident.push_str(curr);\n+        }\n+    }\n+    ident\n+}\n+\n+fn check_ident(cx: &EarlyContext<'_>, ident: &Ident) {\n+    let span = ident.span;\n+    let ident = &ident.as_str();\n+    let corrected = correct_ident(ident);\n+    if ident != &corrected {\n+        span_lint_and_sugg(\n+            cx,\n+            UPPER_CASE_ACRONYMS,\n+            span,\n+            &format!(\"name `{}` contains a capitalized acronym\", ident),\n+            \"consider making the acronym lowercase, except the initial letter\",\n+            corrected,\n+            Applicability::MaybeIncorrect,\n+        )\n+    }\n+}\n+\n+impl EarlyLintPass for UpperCaseAcronyms {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, it: &Item) {\n+        if_chain! {\n+            if !in_external_macro(cx.sess(), it.span);\n+            if matches!(\n+                it.kind,\n+                ItemKind::TyAlias(..) | ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n+            );\n+            then {\n+                check_ident(cx, &it.ident);\n+            }\n+        }\n+    }\n+\n+    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &Variant) {\n+        check_ident(cx, &v.ident);\n+    }\n+}"}, {"sha": "b5a8300376c1646e2d05311d09959ef2792cb853", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -127,6 +127,7 @@ define_Conf! {\n         \"OAuth\", \"GraphQL\",\n         \"OCaml\",\n         \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\",\n+        \"WebGL\",\n         \"TensorFlow\",\n         \"TrueType\",\n         \"iOS\", \"macOS\","}, {"sha": "340d340d6d340bb39ad4159899b86fff760bc4a3", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -158,8 +158,7 @@ pub fn for_loop<'tcx>(\n /// `while cond { body }` becomes `(cond, body)`.\n pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Loop(block, _, hir::LoopSource::While, _) = &expr.kind;\n-        if let hir::Block { expr: Some(expr), .. } = &**block;\n+        if let hir::ExprKind::Loop(hir::Block { expr: Some(expr), .. }, _, hir::LoopSource::While, _) = &expr.kind;\n         if let hir::ExprKind::Match(cond, arms, hir::MatchSource::WhileDesugar) = &expr.kind;\n         if let hir::ExprKind::DropTemps(cond) = &cond.kind;\n         if let [hir::Arm { body, .. }, ..] = &arms[..];"}, {"sha": "c5870dc51248e09a433d7797d89b7a6f343eb11b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -24,6 +24,7 @@ pub struct SpanlessEq<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     maybe_typeck_results: Option<&'tcx TypeckResults<'tcx>>,\n     allow_side_effects: bool,\n+    expr_fallback: Option<Box<dyn Fn(&Expr<'_>, &Expr<'_>) -> bool + 'a>>,\n }\n \n impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n@@ -32,6 +33,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             cx,\n             maybe_typeck_results: cx.maybe_typeck_results(),\n             allow_side_effects: true,\n+            expr_fallback: None,\n         }\n     }\n \n@@ -43,6 +45,13 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n+    pub fn expr_fallback(self, expr_fallback: impl Fn(&Expr<'_>, &Expr<'_>) -> bool + 'a) -> Self {\n+        Self {\n+            expr_fallback: Some(Box::new(expr_fallback)),\n+            ..self\n+        }\n+    }\n+\n     /// Checks whether two statements are the same.\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n@@ -81,7 +90,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             }\n         }\n \n-        match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n+        let is_eq = match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n             (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n@@ -158,7 +167,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Array(l), &ExprKind::Array(r)) => self.eq_exprs(l, r),\n             (&ExprKind::DropTemps(ref le), &ExprKind::DropTemps(ref re)) => self.eq_expr(le, re),\n             _ => false,\n-        }\n+        };\n+        is_eq || self.expr_fallback.as_ref().map_or(false, |f| f(left, right))\n     }\n \n     fn eq_exprs(&mut self, left: &[Expr<'_>], right: &[Expr<'_>]) -> bool {"}, {"sha": "d0db3a67533bc5ead8907482817ff0b193d95693", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 76, "deletions": 61, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -31,15 +31,14 @@ pub use self::hir_utils::{both, eq_expr_value, over, SpanlessEq, SpanlessHash};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n-use std::mem;\n \n use if_chain::if_chain;\n use rustc_ast::ast::{self, Attribute, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n@@ -48,6 +47,7 @@ use rustc_hir::{\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n+use rustc_middle::hir::exports::Export;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n@@ -308,65 +308,43 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n }\n \n /// Gets the definition associated to a path.\n-pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<def::Res> {\n-    let crates = cx.tcx.crates();\n-    let krate = crates\n-        .iter()\n-        .find(|&&krate| cx.tcx.crate_name(krate).as_str() == path[0]);\n-    if let Some(krate) = krate {\n-        let krate = DefId {\n-            krate: *krate,\n-            index: CRATE_DEF_INDEX,\n-        };\n-        let mut current_item = None;\n-        let mut items = cx.tcx.item_children(krate);\n-        let mut path_it = path.iter().skip(1).peekable();\n-\n-        loop {\n-            let segment = match path_it.next() {\n-                Some(segment) => segment,\n-                None => return None,\n-            };\n-\n-            // `get_def_path` seems to generate these empty segments for extern blocks.\n-            // We can just ignore them.\n-            if segment.is_empty() {\n-                continue;\n-            }\n-\n-            let result = SmallVec::<[_; 8]>::new();\n-            for item in mem::replace(&mut items, cx.tcx.arena.alloc_slice(&result)).iter() {\n-                if item.ident.name.as_str() == *segment {\n-                    if path_it.peek().is_none() {\n-                        return Some(item.res);\n-                    }\n-\n-                    current_item = Some(item);\n-                    items = cx.tcx.item_children(item.res.def_id());\n-                    break;\n-                }\n-            }\n+#[allow(clippy::shadow_unrelated)] // false positive #6563\n+pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<Res> {\n+    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export<HirId>> {\n+        tcx.item_children(def_id)\n+            .iter()\n+            .find(|item| item.ident.name.as_str() == name)\n+    }\n \n-            // The segment isn't a child_item.\n-            // Try to find it under an inherent impl.\n-            if_chain! {\n-                if path_it.peek().is_none();\n-                if let Some(current_item) = current_item;\n-                let item_def_id = current_item.res.def_id();\n-                if cx.tcx.def_kind(item_def_id) == DefKind::Struct;\n-                then {\n-                    // Bad `find_map` suggestion. See #4193.\n-                    #[allow(clippy::find_map)]\n-                    return cx.tcx.inherent_impls(item_def_id).iter()\n-                        .flat_map(|&impl_def_id| cx.tcx.item_children(impl_def_id))\n-                        .find(|item| item.ident.name.as_str() == *segment)\n-                        .map(|item| item.res);\n-                }\n+    let (krate, first, path) = match *path {\n+        [krate, first, ref path @ ..] => (krate, first, path),\n+        _ => return None,\n+    };\n+    let tcx = cx.tcx;\n+    let crates = tcx.crates();\n+    let krate = crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate)?;\n+    let first = item_child_by_name(tcx, krate.as_def_id(), first)?;\n+    let last = path\n+        .iter()\n+        .copied()\n+        // `get_def_path` seems to generate these empty segments for extern blocks.\n+        // We can just ignore them.\n+        .filter(|segment| !segment.is_empty())\n+        // for each segment, find the child item\n+        .try_fold(first, |item, segment| {\n+            let def_id = item.res.def_id();\n+            if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n+                Some(item)\n+            } else if matches!(item.res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n+                // it is not a child item so check inherent impl items\n+                tcx.inherent_impls(def_id)\n+                    .iter()\n+                    .find_map(|&impl_def_id| item_child_by_name(tcx, impl_def_id, segment))\n+            } else {\n+                None\n             }\n-        }\n-    } else {\n-        None\n-    }\n+        })?;\n+    Some(last.res)\n }\n \n /// Convenience function to get the `DefId` of a trait by path.\n@@ -1134,8 +1112,7 @@ pub fn is_self(slf: &Param<'_>) -> bool {\n \n pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n     if_chain! {\n-        if let TyKind::Path(ref qp) = slf.kind;\n-        if let QPath::Resolved(None, ref path) = *qp;\n+        if let TyKind::Path(QPath::Resolved(None, ref path)) = slf.kind;\n         if let Res::SelfTy(..) = path.res;\n         then {\n             return true\n@@ -1655,6 +1632,44 @@ where\n     match_expr_list\n }\n \n+/// Peels off all references on the pattern. Returns the underlying pattern and the number of\n+/// references removed.\n+pub fn peel_hir_pat_refs(pat: &'a Pat<'a>) -> (&'a Pat<'a>, usize) {\n+    fn peel(pat: &'a Pat<'a>, count: usize) -> (&'a Pat<'a>, usize) {\n+        if let PatKind::Ref(pat, _) = pat.kind {\n+            peel(pat, count + 1)\n+        } else {\n+            (pat, count)\n+        }\n+    }\n+    peel(pat, 0)\n+}\n+\n+/// Peels off up to the given number of references on the expression. Returns the underlying\n+/// expression and the number of references removed.\n+pub fn peel_n_hir_expr_refs(expr: &'a Expr<'a>, count: usize) -> (&'a Expr<'a>, usize) {\n+    fn f(expr: &'a Expr<'a>, count: usize, target: usize) -> (&'a Expr<'a>, usize) {\n+        match expr.kind {\n+            ExprKind::AddrOf(_, _, expr) if count != target => f(expr, count + 1, target),\n+            _ => (expr, count),\n+        }\n+    }\n+    f(expr, 0, count)\n+}\n+\n+/// Peels off all references on the type. Returns the underlying type and the number of references\n+/// removed.\n+pub fn peel_mid_ty_refs(ty: Ty<'_>) -> (Ty<'_>, usize) {\n+    fn peel(ty: Ty<'_>, count: usize) -> (Ty<'_>, usize) {\n+        if let ty::Ref(_, ty, _) = ty.kind() {\n+            peel(ty, count + 1)\n+        } else {\n+            (ty, count)\n+        }\n+    }\n+    peel(ty, 0)\n+}\n+\n #[macro_export]\n macro_rules! unwrap_cargo_metadata {\n     ($cx: ident, $lint: ident, $deps: expr) => {{"}, {"sha": "6358104eedad126d94592276ce2b71c596c6f891", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -2,7 +2,8 @@ use std::borrow::Cow;\n use std::ops::Range;\n \n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n-use rustc_ast::ast::{Expr, ExprKind, Item, ItemKind, MacCall, StrLit, StrStyle};\n+use if_chain::if_chain;\n+use rustc_ast::ast::{Expr, ExprKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -437,7 +438,7 @@ impl Write {\n                 return (Some(fmtstr), None);\n             };\n             match &token_expr.kind {\n-                ExprKind::Lit(_) => {\n+                ExprKind::Lit(lit) if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) => {\n                     let mut all_simple = true;\n                     let mut seen = false;\n                     for arg in &args {\n@@ -457,8 +458,11 @@ impl Write {\n                     idx += 1;\n                 },\n                 ExprKind::Assign(lhs, rhs, _) => {\n-                    if let ExprKind::Lit(_) = rhs.kind {\n-                        if let ExprKind::Path(_, p) = &lhs.kind {\n+                    if_chain! {\n+                        if let ExprKind::Lit(ref lit) = rhs.kind;\n+                        if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..));\n+                        if let ExprKind::Path(_, p) = &lhs.kind;\n+                        then {\n                             let mut all_simple = true;\n                             let mut seen = false;\n                             for arg in &args {"}, {"sha": "319b85ac42a805d29336cff18f3196eb3206fa30", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -6,7 +6,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_target::abi::LayoutOf as _;\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{is_type_diagnostic_item, match_type, paths, span_lint_and_help};\n+use crate::utils::{is_normalizable, is_type_diagnostic_item, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for maps with zero-sized value types anywhere in the code.\n@@ -50,6 +50,8 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP);\n             if let Adt(_, ref substs) = ty.kind();\n             let ty = substs.type_at(1);\n+            // Do this to prevent `layout_of` crashing, being unable to fully normalize `ty`.\n+            if is_normalizable(cx, cx.param_env, ty);\n             if let Ok(layout) = cx.layout_of(ty);\n             if layout.is_zst();\n             then {"}, {"sha": "fd2a7d171d020aff7b99eb2826f199a6bd591287", "filename": "doc/adding_lints.md", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -23,6 +23,7 @@ because that's clearly a non-descriptive name.\n   - [Running rustfmt](#running-rustfmt)\n   - [Debugging](#debugging)\n   - [PR Checklist](#pr-checklist)\n+  - [Adding configuration to a lint](#adding-configuration-to-a-lint)\n   - [Cheatsheet](#cheatsheet)\n \n ## Setup\n@@ -526,6 +527,81 @@ Before submitting your PR make sure you followed all of the basic requirements:\n - \\[ ] Added lint documentation\n - \\[ ] Run `cargo dev fmt`\n \n+## Adding configuration to a lint\n+\n+Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace \n+directory. Adding a configuration to a lint can be useful for thresholds or to constrain some\n+behavior that can be seen as a false positive for some users. Adding a configuration is done \n+in the following steps:\n+\n+1. Adding a new configuration entry to [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs)\n+    like this:\n+    ```rust\n+    /// Lint: LINT_NAME. <The configuration field doc comment>\n+    (configuration_ident, \"configuration_value\": Type, DefaultValue),\n+    ```\n+    The configuration value and identifier should usually be the same. The doc comment will be \n+    automatically added to the lint documentation.\n+2. Adding the configuration value to the lint impl struct:\n+    1. This first requires the definition of a lint impl struct. Lint impl structs are usually \n+        generated with the `declare_lint_pass!` macro. This struct needs to be defined manually\n+        to add some kind of metadata to it:\n+        ```rust\n+        // Generated struct definition\n+        declare_lint_pass!(StructName => [\n+            LINT_NAME\n+        ]);\n+\n+        // New manual definition struct\n+        #[derive(Copy, Clone)]\n+        pub struct StructName {}\n+\n+        impl_lint_pass!(StructName => [\n+            LINT_NAME\n+        ]);\n+        ```\n+    \n+    2. Next add the configuration value and a corresponding creation method like this:\n+        ```rust\n+        #[derive(Copy, Clone)]\n+        pub struct StructName {\n+            configuration_ident: Type,\n+        }\n+\n+        // ...\n+\n+        impl StructName {\n+            pub fn new(configuration_ident: Type) -> Self {\n+                Self {\n+                    configuration_ident,\n+                }\n+            }\n+        }\n+        ```\n+3. Passing the configuration value to the lint impl struct:\n+\n+    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs). \n+    Make sure that `clippy dev update_lints` added it beforehand. The configuration value is now \n+    cloned or copied into a local value that is then passed to the impl struct like this:\n+    ```rust\n+    // Default generated registration:\n+    store.register_late_pass(|| box module::StructName);\n+\n+    // New registration with configuration value\n+    let configuration_ident = conf.configuration_ident.clone();\n+    store.register_late_pass(move || box module::StructName::new(configuration_ident));\n+    ```\n+\n+    Congratulations the work is almost done. The configuration value can now be accessed\n+    in the linting code via `self.configuration_ident`.\n+\n+4. Adding tests:\n+    1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n+    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml). \n+        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file \n+        with the configuration value and a rust file that should be linted by clippy. The test can \n+        otherwise be written as usual.\n+\n ## Cheatsheet\n \n Here are some pointers to things you are likely going to need for every lint:"}, {"sha": "57f83bdf32bc2bb748a72f6cacf7d7017d59e09d", "filename": "doc/basics.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -11,6 +11,7 @@ the codebase take a look at [Adding Lints] or [Common Tools].\n   - [Get the Code](#get-the-code)\n   - [Building and Testing](#building-and-testing)\n   - [`cargo dev`](#cargo-dev)\n+  - [Common Abbreviations](#common-abbreviations)\n   - [PR](#pr)\n \n ## Get the Code\n@@ -94,3 +95,22 @@ cargo dev ra_setup\n \n We follow a rustc no merge-commit policy.\n See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n+\n+## Common Abbreviations\n+\n+| Abbreviation | Meaning                                |\n+| ------------ | -------------------------------------- |\n+| UB           | Undefined Behavior                     |\n+| FP           | False Positive                         |\n+| FN           | False Negative                         |\n+| ICE          | Internal Compiler Error                |\n+| AST          | Abstract Syntax Tree                   |\n+| MIR          | Mid-Level Intermediate Representation  |\n+| HIR          | High-Level Intermediate Representation |\n+| TCX          | Type context                           |\n+\n+This is a concise list of abbreviations that can come up during clippy development. An extensive\n+general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n+an abbreviation or meaning is unclear to you.\n+\n+[glossary]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html"}, {"sha": "e565691e0e3960ef70d39d8bafbd66bc10edbdaf", "filename": "lintcheck-logs/logs.txt", "status": "added", "additions": 3372, "deletions": 0, "changes": 3372, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/lintcheck-logs%2Flogs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/lintcheck-logs%2Flogs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flogs.txt?ref=e2859437f930ed947386aa8d225cf078a9f53839"}, {"sha": "94f5e616cace8cb0fbe8ea83e9ef6911809db16b", "filename": "tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -44,7 +44,9 @@ fn third_party_crates() -> String {\n         };\n         if let Some(name) = path.file_name().and_then(OsStr::to_str) {\n             for dep in CRATES {\n-                if name.starts_with(&format!(\"lib{}-\", dep)) && name.ends_with(\".rlib\") {\n+                if name.starts_with(&format!(\"lib{}-\", dep))\n+                    && name.rsplit('.').next().map(|ext| ext.eq_ignore_ascii_case(\"rlib\")) == Some(true)\n+                {\n                     if let Some(old) = crates.insert(dep, path.clone()) {\n                         panic!(\"Found multiple rlibs for crate `{}`: `{:?}` and `{:?}\", dep, old, path);\n                     }"}, {"sha": "a3b19c2e3949f112a9381eac6e71c8bf2c8b594c", "filename": "tests/ui-internal/invalid_paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui-internal%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui-internal%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_paths.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -18,6 +18,9 @@ mod paths {\n \n     // Path with bad module\n     pub const BAD_MOD_PATH: [&str; 2] = [\"std\", \"xxx\"];\n+\n+    // Path to method on an enum inherent impl\n+    pub const OPTION_IS_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"is_some\"];\n }\n \n fn main() {}"}, {"sha": "68719c2bc6d05ea1afa005e00caee7f3c83b2418", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,44 @@\n+#![warn(clippy::case_sensitive_file_extension_comparisons)]\n+\n+use std::string::String;\n+\n+struct TestStruct {}\n+\n+impl TestStruct {\n+    fn ends_with(self, arg: &str) {}\n+}\n+\n+fn is_rust_file(filename: &str) -> bool {\n+    filename.ends_with(\".rs\")\n+}\n+\n+fn main() {\n+    // std::string::String and &str should trigger the lint failure with .ext12\n+    let _ = String::from(\"\").ends_with(\".ext12\");\n+    let _ = \"str\".ends_with(\".ext12\");\n+\n+    // The test struct should not trigger the lint failure with .ext12\n+    TestStruct {}.ends_with(\".ext12\");\n+\n+    // std::string::String and &str should trigger the lint failure with .EXT12\n+    let _ = String::from(\"\").ends_with(\".EXT12\");\n+    let _ = \"str\".ends_with(\".EXT12\");\n+\n+    // The test struct should not trigger the lint failure with .EXT12\n+    TestStruct {}.ends_with(\".EXT12\");\n+\n+    // Should not trigger the lint failure with .eXT12\n+    let _ = String::from(\"\").ends_with(\".eXT12\");\n+    let _ = \"str\".ends_with(\".eXT12\");\n+    TestStruct {}.ends_with(\".eXT12\");\n+\n+    // Should not trigger the lint failure with .EXT123 (too long)\n+    let _ = String::from(\"\").ends_with(\".EXT123\");\n+    let _ = \"str\".ends_with(\".EXT123\");\n+    TestStruct {}.ends_with(\".EXT123\");\n+\n+    // Shouldn't fail if it doesn't start with a dot\n+    let _ = String::from(\"\").ends_with(\"a.ext\");\n+    let _ = \"str\".ends_with(\"a.extA\");\n+    TestStruct {}.ends_with(\"a.ext\");\n+}"}, {"sha": "05b98169f2d17b0dd1be7812b07acd5236fb566b", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,43 @@\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:12:14\n+   |\n+LL |     filename.ends_with(\".rs\")\n+   |              ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::case-sensitive-file-extension-comparisons` implied by `-D warnings`\n+   = help: consider using a case-insensitive comparison instead\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:30\n+   |\n+LL |     let _ = String::from(\"\").ends_with(\".ext12\");\n+   |                              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:18:19\n+   |\n+LL |     let _ = \"str\".ends_with(\".ext12\");\n+   |                   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:30\n+   |\n+LL |     let _ = String::from(\"\").ends_with(\".EXT12\");\n+   |                              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:25:19\n+   |\n+LL |     let _ = \"str\".ends_with(\".EXT12\");\n+   |                   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "8372a21247734626ebae426ea0cdac42b9e79a13", "filename": "tests/ui/collapsible_match2.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -40,6 +40,35 @@ fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>\n         // there is still a better way to write this.\n         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n     }\n+\n+    // deref reference value\n+    match Some(&[1]) {\n+        Some(s) => match *s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n+\n+    // ref pattern and deref\n+    match Some(&[1]) {\n+        Some(ref s) => match &*s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n+}\n+\n+fn no_lint() {\n+    // deref inner value (cannot pattern match with Vec)\n+    match Some(vec![1]) {\n+        Some(s) => match *s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n }\n \n fn make<T>() -> T {"}, {"sha": "b2eb457d1732622898250d32158c696db3e2a3b3", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -57,5 +57,41 @@ LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n    |                            Replace this binding\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:46:20\n+   |\n+LL |           Some(s) => match *s {\n+   |  ____________________^\n+LL | |             [n] => foo(n),\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:46:14\n+   |\n+LL |         Some(s) => match *s {\n+   |              ^ Replace this binding\n+LL |             [n] => foo(n),\n+   |             ^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:55:24\n+   |\n+LL |           Some(ref s) => match &*s {\n+   |  ________________________^\n+LL | |             [n] => foo(n),\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:55:14\n+   |\n+LL |         Some(ref s) => match &*s {\n+   |              ^^^^^ Replace this binding\n+LL |             [n] => foo(n),\n+   |             ^^^ with this pattern\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "383bbb49dbe88567b7b271fe7ce6a749b4a2c937", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -11,7 +11,7 @@ struct S {\n     f: Vec<Vec<Box<(u32, u32, u32, u32)>>>,\n }\n \n-struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+struct Ts(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n \n enum E {\n     Tuple(Vec<Vec<Box<(u32, u32, u32, u32)>>>),"}, {"sha": "7fcbb4bce88365bde1e56cb33b223555adbbf5b8", "filename": "tests/ui/complex_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -21,7 +21,7 @@ LL |     f: Vec<Vec<Box<(u32, u32, u32, u32)>>>,\n error: very complex type used. Consider factoring parts into `type` definitions\n   --> $DIR/complex_types.rs:14:11\n    |\n-LL | struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n+LL | struct Ts(Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: very complex type used. Consider factoring parts into `type` definitions"}, {"sha": "5409f36b3f1ede4e5046f3dd881c3e57ae21928f", "filename": "tests/ui/crashes/ice-6256.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcrashes%2Fice-6256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcrashes%2Fice-6256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,5 +1,6 @@\n // originally from rustc ./src/test/ui/regions/issue-78262.rs\n // ICE: to get the signature of a closure, use substs.as_closure().sig() not fn_sig()\n+#![allow(clippy::upper_case_acronyms)]\n \n trait TT {}\n "}, {"sha": "d1a8bdc3c8d8c867c1700dd4d58dc16ed1f58925", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/ice-6256.rs:11:28\n+  --> $DIR/ice-6256.rs:12:28\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |                            ^^^^ lifetime mismatch\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 11:13...\n-  --> $DIR/ice-6256.rs:11:13\n+note: the anonymous lifetime #1 defined on the body at 12:13...\n+  --> $DIR/ice-6256.rs:12:13\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ac6c3e4aba046bed0696e01f1c43c9b67f661d7d", "filename": "tests/ui/crashes/ice-6539.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcrashes%2Fice-6539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fcrashes%2Fice-6539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6539.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,16 @@\n+// The test for the ICE 6539: https://github.com/rust-lang/rust-clippy/issues/6539.\n+// The cause is that `zero_sized_map_values` used `layout_of` with types from type aliases,\n+// which is essentially the same as the ICE 4968.\n+// Note that only type aliases with associated types caused the crash this time,\n+// not others such as trait impls.\n+\n+use std::collections::{BTreeMap, HashMap};\n+\n+pub trait Trait {\n+    type Assoc;\n+}\n+\n+type TypeAlias<T> = HashMap<(), <T as Trait>::Assoc>;\n+type TypeAlias2<T> = BTreeMap<(), <T as Trait>::Assoc>;\n+\n+fn main() {}"}, {"sha": "fc444c0bea7203a2c90084a68b3025f52ac7f771", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -10,5 +10,6 @@\n #[warn(clippy::temporary_cstring_as_ptr)]\n #[warn(clippy::panic_params)]\n #[warn(clippy::unknown_clippy_lints)]\n+#[warn(clippy::find_map)]\n \n fn main() {}"}, {"sha": "64efcd18f8891a344ada11c0be14d67a00533f81", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -72,11 +72,17 @@ error: lint `clippy::unknown_clippy_lints` has been removed: this lint has been\n LL | #[warn(clippy::unknown_clippy_lints)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::find_map` has been removed: this lint has been replaced by `manual_find_map`, a more specific lint\n+  --> $DIR/deprecated.rs:13:8\n+   |\n+LL | #[warn(clippy::find_map)]\n+   |        ^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::unstable_as_slice)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "e30970ed952732f4d49dea1d7df15df2f0e1bdd8", "filename": "tests/ui/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -53,6 +53,7 @@ fn test_units() {\n /// DirectX\n /// ECMAScript\n /// OAuth GraphQL\n+/// WebGL\n /// TeX LaTeX BibTeX BibLaTeX\n /// CamelCase (see also #2395)\n /// be_sure_we_got_to_the_end_of_it"}, {"sha": "e1c1aa85a60e1d55724e2d0db0cf4abe7dd13a11", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -55,133 +55,133 @@ LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:58:5\n+  --> $DIR/doc.rs:59:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `link_with_underscores` between ticks in the documentation\n-  --> $DIR/doc.rs:62:22\n+  --> $DIR/doc.rs:63:22\n    |\n LL | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `inline_link2` between ticks in the documentation\n-  --> $DIR/doc.rs:65:21\n+  --> $DIR/doc.rs:66:21\n    |\n LL | /// It can also be [inline_link2].\n    |                     ^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:75:5\n+  --> $DIR/doc.rs:76:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:83:8\n+  --> $DIR/doc.rs:84:8\n    |\n LL | /// ## CamelCaseThing\n    |        ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:86:7\n+  --> $DIR/doc.rs:87:7\n    |\n LL | /// # CamelCaseThing\n    |       ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:88:22\n+  --> $DIR/doc.rs:89:22\n    |\n LL | /// Not a title #897 CamelCaseThing\n    |                      ^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:89:5\n+  --> $DIR/doc.rs:90:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:96:5\n+  --> $DIR/doc.rs:97:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:109:5\n+  --> $DIR/doc.rs:110:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:120:43\n+  --> $DIR/doc.rs:121:43\n    |\n LL | /** E.g., serialization of an empty list: FooBar\n    |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:125:5\n+  --> $DIR/doc.rs:126:5\n    |\n LL | And BarQuz too.\n    |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:126:1\n+  --> $DIR/doc.rs:127:1\n    |\n LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-  --> $DIR/doc.rs:131:43\n+  --> $DIR/doc.rs:132:43\n    |\n LL | /** E.g., serialization of an empty list: FooBar\n    |                                           ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-  --> $DIR/doc.rs:136:5\n+  --> $DIR/doc.rs:137:5\n    |\n LL | And BarQuz too.\n    |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:137:1\n+  --> $DIR/doc.rs:138:1\n    |\n LL | be_sure_we_got_to_the_end_of_it\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:148:5\n+  --> $DIR/doc.rs:149:5\n    |\n LL | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:175:13\n+  --> $DIR/doc.rs:176:13\n    |\n LL | /// Not ok: http://www.unicode.org\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:176:13\n+  --> $DIR/doc.rs:177:13\n    |\n LL | /// Not ok: https://www.unicode.org\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:177:13\n+  --> $DIR/doc.rs:178:13\n    |\n LL | /// Not ok: http://www.unicode.org/\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-  --> $DIR/doc.rs:178:13\n+  --> $DIR/doc.rs:179:13\n    |\n LL | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `mycrate::Collection` between ticks in the documentation\n-  --> $DIR/doc.rs:181:22\n+  --> $DIR/doc.rs:182:22\n    |\n LL | /// An iterator over mycrate::Collection's values.\n    |                      ^^^^^^^^^^^^^^^^^^^"}, {"sha": "89d99dcf0c867b7ccaec389dd674c2841ea042df", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,6 +1,6 @@\n #![feature(non_ascii_idents)]\n #![warn(clippy::enum_variant_names, clippy::pub_enum_variant_names)]\n-#![allow(non_camel_case_types)]\n+#![allow(non_camel_case_types, clippy::upper_case_acronyms)]\n \n enum FakeCallType {\n     CALL,"}, {"sha": "8174a0175ab3228f02036746e97306fff403050a", "filename": "tests/ui/exhaustive_items.fixed", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fexhaustive_items.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fexhaustive_items.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,82 @@\n+// run-rustfix\n+\n+#![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    // nop\n+}\n+\n+pub mod enums {\n+    #[non_exhaustive]\n+    pub enum Exhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    /// Some docs\n+    #[repr(C)]\n+    #[non_exhaustive]\n+    pub enum ExhaustiveWithAttrs {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub enum NonExhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    enum ExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    enum NonExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+}\n+\n+pub mod structs {\n+    #[non_exhaustive]\n+    pub struct Exhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub struct NonExhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    struct ExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    struct NonExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+}"}, {"sha": "b476f09f8a0872178c1874b549c8bd3f18bedc20", "filename": "tests/ui/exhaustive_items.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+\n+#![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    // nop\n+}\n+\n+pub mod enums {\n+    pub enum Exhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    /// Some docs\n+    #[repr(C)]\n+    pub enum ExhaustiveWithAttrs {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub enum NonExhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    enum ExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    enum NonExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+}\n+\n+pub mod structs {\n+    pub struct Exhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub struct NonExhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    struct ExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    struct NonExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+}"}, {"sha": "7369fe75a4f7408ade55119d57f141e8ac5b2e3c", "filename": "tests/ui/exhaustive_items.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fexhaustive_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fexhaustive_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,61 @@\n+error: exported enums should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:11:5\n+   |\n+LL | /     pub enum Exhaustive {\n+LL | |         Foo,\n+LL | |         Bar,\n+LL | |         Baz,\n+LL | |         Quux(String),\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/exhaustive_items.rs:3:9\n+   |\n+LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL |     pub enum Exhaustive {\n+   |\n+\n+error: exported enums should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:20:5\n+   |\n+LL | /     pub enum ExhaustiveWithAttrs {\n+LL | |         Foo,\n+LL | |         Bar,\n+LL | |         Baz,\n+LL | |         Quux(String),\n+LL | |     }\n+   | |_____^\n+   |\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL |     pub enum ExhaustiveWithAttrs {\n+   |\n+\n+error: exported structs should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:55:5\n+   |\n+LL | /     pub struct Exhaustive {\n+LL | |         foo: u8,\n+LL | |         bar: String,\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/exhaustive_items.rs:3:35\n+   |\n+LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL |     pub struct Exhaustive {\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c7b4f28be3a4454f5a01293c6bf0ba8d7b5a02ba", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,12 +1,3 @@\n-error: called `filter(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:6:21\n-   |\n-LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::filter-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n-\n error: called `filter(..).flat_map(..)` on an `Iterator`\n   --> $DIR/filter_methods.rs:8:21\n    |\n@@ -17,6 +8,7 @@ LL | |         .filter(|&x| x == 0)\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n    |\n+   = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).flat_map(..)` on an `Iterator`\n@@ -43,5 +35,5 @@ LL | |         .map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by only calling `.filter_map(..)` instead\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "aea3cc62afcc41631213bbafca089acc6f9b72b5", "filename": "tests/ui/find_map.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,26 +0,0 @@\n-error: called `find(..).map(..)` on an `Iterator`\n-  --> $DIR/find_map.rs:20:26\n-   |\n-LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::find-map` implied by `-D warnings`\n-   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n-\n-error: called `find(..).map(..)` on an `Iterator`\n-  --> $DIR/find_map.rs:23:29\n-   |\n-LL |       let _: Option<Flavor> = desserts_of_the_week\n-   |  _____________________________^\n-LL | |         .iter()\n-LL | |         .find(|dessert| match *dessert {\n-LL | |             Dessert::Cake(_) => true,\n-...  |\n-LL | |             _ => unreachable!(),\n-LL | |         });\n-   | |__________^\n-   |\n-   = help: this is more succinctly expressed by calling `.find_map(..)` instead\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "7fe45c83bcacbd971132bca7c979f643d181658a", "filename": "tests/ui/inspect_for_each.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Finspect_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Finspect_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finspect_for_each.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,22 @@\n+#![warn(clippy::inspect_for_each)]\n+\n+fn main() {\n+    let a: Vec<usize> = vec![1, 2, 3, 4, 5];\n+\n+    let mut b: Vec<usize> = Vec::new();\n+    a.into_iter().inspect(|x| assert!(*x > 0)).for_each(|x| {\n+        let y = do_some(x);\n+        let z = do_more(y);\n+        b.push(z);\n+    });\n+\n+    assert_eq!(b, vec![4, 5, 6, 7, 8]);\n+}\n+\n+fn do_some(a: usize) -> usize {\n+    a + 1\n+}\n+\n+fn do_more(a: usize) -> usize {\n+    a + 2\n+}"}, {"sha": "9f976bb74584ea3526e71e35279284316b58edff", "filename": "tests/ui/inspect_for_each.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Finspect_for_each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Finspect_for_each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finspect_for_each.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,16 @@\n+error: called `inspect(..).for_each(..)` on an `Iterator`\n+  --> $DIR/inspect_for_each.rs:7:19\n+   |\n+LL |       a.into_iter().inspect(|x| assert!(*x > 0)).for_each(|x| {\n+   |  ___________________^\n+LL | |         let y = do_some(x);\n+LL | |         let z = do_more(y);\n+LL | |         b.push(z);\n+LL | |     });\n+   | |______^\n+   |\n+   = note: `-D clippy::inspect-for-each` implied by `-D warnings`\n+   = help: move the code from `inspect(..)` to `for_each(..)` and remove the `inspect(..)`\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc8f58f8ea5cdf1192a5a585d1ce4ee97961062b", "filename": "tests/ui/manual_filter_map.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_filter_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).filter_map(|a| to_opt(a));\n+\n+    // ref pattern, expect()\n+    let _ = (0..).filter_map(|a| to_opt(a));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).filter_map(|a| to_res(a).ok());\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .filter(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "3af4bbee3bf82c17355da7f9922d23e16fbeffd9", "filename": "tests/ui/manual_filter_map.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_filter_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).filter(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // ref pattern, expect()\n+    let _ = (0..).filter(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).filter(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .filter(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "4d4e2d5c12fe942127d3e72534bfa50392d6c68d", "filename": "tests/ui/manual_filter_map.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,22 @@\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:8:19\n+   |\n+LL |     let _ = (0..).filter(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_opt(a))`\n+   |\n+   = note: `-D clippy::manual-filter-map` implied by `-D warnings`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:11:19\n+   |\n+LL |     let _ = (0..).filter(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_opt(a))`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:14:19\n+   |\n+LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "95e97c4fd1ff4e64941a6e02d406ee40ff48af16", "filename": "tests/ui/manual_find_map.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_find_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).find_map(|a| to_opt(a));\n+\n+    // ref pattern, expect()\n+    let _ = (0..).find_map(|a| to_opt(a));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).find_map(|a| to_res(a).ok());\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .find(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "cd3c82e3b25abbe7a7b0791bf44f5706d1c77e2c", "filename": "tests/ui/manual_find_map.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::manual_find_map)]\n+#![allow(clippy::redundant_closure)] // FIXME suggestion may have redundant closure\n+\n+fn main() {\n+    // is_some(), unwrap()\n+    let _ = (0..).find(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // ref pattern, expect()\n+    let _ = (0..).find(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+\n+    // is_ok(), unwrap_or()\n+    let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+}\n+\n+fn no_lint() {\n+    // no shared code\n+    let _ = (0..).filter(|n| *n > 1).map(|n| n + 1);\n+\n+    // very close but different since filter() provides a reference\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|a| to_opt(a).unwrap());\n+\n+    // similar but different\n+    let _ = (0..).find(|n| to_opt(n).is_some()).map(|n| to_res(n).unwrap());\n+    let _ = (0..)\n+        .find(|n| to_opt(n).map(|n| n + 1).is_some())\n+        .map(|a| to_opt(a).unwrap());\n+}\n+\n+fn to_opt<T>(_: T) -> Option<T> {\n+    unimplemented!()\n+}\n+\n+fn to_res<T>(_: T) -> Result<T, ()> {\n+    unimplemented!()\n+}"}, {"sha": "9e7f798df4573bcdda46f0b0e0b5dc3d45f4d908", "filename": "tests/ui/manual_find_map.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,22 @@\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:8:19\n+   |\n+LL |     let _ = (0..).find(|n| to_opt(*n).is_some()).map(|a| to_opt(a).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_opt(a))`\n+   |\n+   = note: `-D clippy::manual-find-map` implied by `-D warnings`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:11:19\n+   |\n+LL |     let _ = (0..).find(|&n| to_opt(n).is_some()).map(|a| to_opt(a).expect(\"hi\"));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_opt(a))`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:14:19\n+   |\n+LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "319299862a7003462cbaffe429edb6235c28f482", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -99,4 +99,51 @@ fn main() {\n             _ => false,\n         };\n     }\n+\n+    {\n+        // should print \"z\" in suggestion (#6503)\n+        let z = &Some(3);\n+        let _z = matches!(z, Some(3));\n+    }\n+\n+    {\n+        // this could also print \"z\" in suggestion..?\n+        let z = Some(3);\n+        let _z = matches!(&z, Some(3));\n+    }\n+\n+    {\n+        enum AnEnum {\n+            X,\n+            Y,\n+        }\n+\n+        fn foo(_x: AnEnum) {}\n+\n+        fn main() {\n+            let z = AnEnum::X;\n+            // we can't remove the reference here!\n+            let _ = matches!(&z, AnEnum::X);\n+            foo(z);\n+        }\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        // we need the reference here because later val is consumed by fun()\n+        let _res = matches!(&val, &Some(ref _a));\n+        fun(val);\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        let _res = matches!(&val, &Some(ref _a));\n+        fun(val);\n+    }\n }"}, {"sha": "2ef6cf42387f6e5b5cd71d788fbabe4f8f7ac01d", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -119,4 +119,66 @@ fn main() {\n             _ => false,\n         };\n     }\n+\n+    {\n+        // should print \"z\" in suggestion (#6503)\n+        let z = &Some(3);\n+        let _z = match &z {\n+            Some(3) => true,\n+            _ => false,\n+        };\n+    }\n+\n+    {\n+        // this could also print \"z\" in suggestion..?\n+        let z = Some(3);\n+        let _z = match &z {\n+            Some(3) => true,\n+            _ => false,\n+        };\n+    }\n+\n+    {\n+        enum AnEnum {\n+            X,\n+            Y,\n+        }\n+\n+        fn foo(_x: AnEnum) {}\n+\n+        fn main() {\n+            let z = AnEnum::X;\n+            // we can't remove the reference here!\n+            let _ = match &z {\n+                AnEnum::X => true,\n+                _ => false,\n+            };\n+            foo(z);\n+        }\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        // we need the reference here because later val is consumed by fun()\n+        let _res = match &val {\n+            &Some(ref _a) => true,\n+            _ => false,\n+        };\n+        fun(val);\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        let _res = match &val {\n+            &Some(ref _a) => true,\n+            _ => false,\n+        };\n+        fun(val);\n+    }\n }"}, {"sha": "f27b4e9cb20b11786aec24c4066c147e3a51350c", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -70,5 +70,88 @@ LL | |             _ => true,\n LL | |         };\n    | |_________^ help: try this: `!matches!(x, E::B(_) | E::C)`\n \n-error: aborting due to 7 previous errors\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:126:18\n+   |\n+LL |           let _z = match &z {\n+   |  __________________^\n+LL | |             Some(3) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(z, Some(3))`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:135:18\n+   |\n+LL |           let _z = match &z {\n+   |  __________________^\n+LL | |             Some(3) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(&z, Some(3))`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:152:21\n+   |\n+LL |               let _ = match &z {\n+   |  _____________________^\n+LL | |                 AnEnum::X => true,\n+LL | |                 _ => false,\n+LL | |             };\n+   | |_____________^ help: try this: `matches!(&z, AnEnum::X)`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:166:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_expr_like_matches_macro.rs:166:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n+help: try\n+   |\n+LL |         let _res = match val {\n+LL |             Some(ref _a) => true,\n+   |\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:178:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_expr_like_matches_macro.rs:178:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^\n+   |\n+help: try\n+   |\n+LL |         let _res = match val {\n+LL |             Some(ref _a) => true,\n+   |\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "71fb3565224e44534757a84d4916c6212a73d9b9", "filename": "tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::needless_question_mark)]\n-#![allow(clippy::needless_return, clippy::unnecessary_unwrap, dead_code, unused_must_use)]\n+#![allow(\n+    clippy::needless_return,\n+    clippy::unnecessary_unwrap,\n+    clippy::upper_case_acronyms,\n+    dead_code,\n+    unused_must_use\n+)]\n #![feature(custom_inner_attributes)]\n \n struct TO {"}, {"sha": "e31f6f48fa7c7dc9a474419a3b23a082deea2296", "filename": "tests/ui/needless_question_mark.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::needless_question_mark)]\n-#![allow(clippy::needless_return, clippy::unnecessary_unwrap, dead_code, unused_must_use)]\n+#![allow(\n+    clippy::needless_return,\n+    clippy::unnecessary_unwrap,\n+    clippy::upper_case_acronyms,\n+    dead_code,\n+    unused_must_use\n+)]\n #![feature(custom_inner_attributes)]\n \n struct TO {"}, {"sha": "567bc518a3fda1003c5a6ee35dbf0596e9ffa93a", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,85 +1,85 @@\n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:17:12\n+  --> $DIR/needless_question_mark.rs:23:12\n    |\n LL |     return Some(to.magic?);\n    |            ^^^^^^^^^^^^^^^ help: try: `to.magic`\n    |\n    = note: `-D clippy::needless-question-mark` implied by `-D warnings`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:25:12\n+  --> $DIR/needless_question_mark.rs:31:12\n    |\n LL |     return Some(to.magic?)\n    |            ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:30:5\n+  --> $DIR/needless_question_mark.rs:36:5\n    |\n LL |     Some(to.magic?)\n    |     ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:35:21\n+  --> $DIR/needless_question_mark.rs:41:21\n    |\n LL |     to.and_then(|t| Some(t.magic?))\n    |                     ^^^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:44:9\n+  --> $DIR/needless_question_mark.rs:50:9\n    |\n LL |         Some(t.magic?)\n    |         ^^^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:49:12\n+  --> $DIR/needless_question_mark.rs:55:12\n    |\n LL |     return Ok(tr.magic?);\n    |            ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:56:12\n+  --> $DIR/needless_question_mark.rs:62:12\n    |\n LL |     return Ok(tr.magic?)\n    |            ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:60:5\n+  --> $DIR/needless_question_mark.rs:66:5\n    |\n LL |     Ok(tr.magic?)\n    |     ^^^^^^^^^^^^^ help: try: `tr.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:64:21\n+  --> $DIR/needless_question_mark.rs:70:21\n    |\n LL |     tr.and_then(|t| Ok(t.magic?))\n    |                     ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:72:9\n+  --> $DIR/needless_question_mark.rs:78:9\n    |\n LL |         Ok(t.magic?)\n    |         ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:79:16\n+  --> $DIR/needless_question_mark.rs:85:16\n    |\n LL |         return Ok(t.magic?);\n    |                ^^^^^^^^^^^^ help: try: `t.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:132:9\n+  --> $DIR/needless_question_mark.rs:138:9\n    |\n LL |         Ok(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:148:9\n+  --> $DIR/needless_question_mark.rs:154:9\n    |\n LL |         Some(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^^^ help: try: `to.magic`\n \n error: Question mark operator is useless here\n-  --> $DIR/needless_question_mark.rs:156:9\n+  --> $DIR/needless_question_mark.rs:162:9\n    |\n LL |         Ok(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^ help: try: `to.magic`"}, {"sha": "990475fcb587ece02e56c426c09ab6823a114b81", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -101,6 +101,25 @@ fn test_return_in_macro() {\n     needed_return!(0);\n }\n \n+mod issue6501 {\n+    fn foo(bar: Result<(), ()>) {\n+        bar.unwrap_or_else(|_| {})\n+    }\n+\n+    fn test_closure() {\n+        let _ = || {\n+            \n+        };\n+        let _ = || {};\n+    }\n+\n+    struct Foo;\n+    #[allow(clippy::unnecessary_lazy_evaluations)]\n+    fn bar(res: Result<Foo, u8>) -> Foo {\n+        res.unwrap_or_else(|_| Foo)\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "dec3d84a02046eadedd7d88b99149f948c5a45c2", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -101,6 +101,25 @@ fn test_return_in_macro() {\n     needed_return!(0);\n }\n \n+mod issue6501 {\n+    fn foo(bar: Result<(), ()>) {\n+        bar.unwrap_or_else(|_| return)\n+    }\n+\n+    fn test_closure() {\n+        let _ = || {\n+            return;\n+        };\n+        let _ = || return;\n+    }\n+\n+    struct Foo;\n+    #[allow(clippy::unnecessary_lazy_evaluations)]\n+    fn bar(res: Result<Foo, u8>) -> Foo {\n+        res.unwrap_or_else(|_| return Foo)\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "ae31d6075416eeb4583b7ed1da8e5226fd85e5e7", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -84,5 +84,29 @@ error: unneeded `return` statement\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n-error: aborting due to 14 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:106:32\n+   |\n+LL |         bar.unwrap_or_else(|_| return)\n+   |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:111:13\n+   |\n+LL |             return;\n+   |             ^^^^^^^ help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:113:20\n+   |\n+LL |         let _ = || return;\n+   |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:119:32\n+   |\n+LL |         res.unwrap_or_else(|_| return Foo)\n+   |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "8665a3bb28ae19b9eca30b426e4faf20ff47a6cc", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -17,14 +17,14 @@ fn main() {\n     println!(\"{bar:8} {foo:>8}\", foo = \"hello\", bar = \"world\");\n     println!(\"{number:>width$}\", number = 1, width = 6);\n     println!(\"{number:>0width$}\", number = 1, width = 6);\n+    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+    println!(\"10 / 4 is {}\", 2.5);\n+    println!(\"2 + 1 = {}\", 3);\n \n     // these should throw warnings\n-    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     print!(\"Hello {}\", \"world\");\n     println!(\"Hello {} {}\", world, \"world\");\n     println!(\"Hello {}\", \"world\");\n-    println!(\"10 / 4 is {}\", 2.5);\n-    println!(\"2 + 1 = {}\", 3);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "e284aece236faa4462e4b288ead9799735528d6e", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,41 +1,23 @@\n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:22:71\n-   |\n-LL |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n-   |                                                                       ^\n-   |\n-   = note: `-D clippy::print-literal` implied by `-D warnings`\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:23:24\n+  --> $DIR/print_literal.rs:25:24\n    |\n LL |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n+   |\n+   = note: `-D clippy::print-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:24:36\n+  --> $DIR/print_literal.rs:26:36\n    |\n LL |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:25:26\n+  --> $DIR/print_literal.rs:27:26\n    |\n LL |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n \n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:26:30\n-   |\n-LL |     println!(\"10 / 4 is {}\", 2.5);\n-   |                              ^^^\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:27:28\n-   |\n-LL |     println!(\"2 + 1 = {}\", 3);\n-   |                            ^\n-\n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:25\n    |\n@@ -84,5 +66,5 @@ error: literal with an empty format string\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                                  ^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "922b8b4ce57f613069b5c5a0c9575f0f6f2bf13a", "filename": "tests/ui/redundant_slicing.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,11 @@\n+#![allow(unused)]\n+#![warn(clippy::redundant_slicing)]\n+\n+fn main() {\n+    let x: &[u32] = &[0];\n+    let err = &x[..];\n+\n+    let v = vec![0];\n+    let ok = &v[..];\n+    let err = &(&v[..])[..];\n+}"}, {"sha": "9efd6484ad0c1769f884f59f75b5792aa1ed1b19", "filename": "tests/ui/redundant_slicing.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fredundant_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fredundant_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,16 @@\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:6:15\n+   |\n+LL |     let err = &x[..];\n+   |               ^^^^^^ help: use the original slice instead: `x`\n+   |\n+   = note: `-D clippy::redundant-slicing` implied by `-D warnings`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:10:15\n+   |\n+LL |     let err = &(&v[..])[..];\n+   |               ^^^^^^^^^^^^^ help: use the original slice instead: `(&v[..])`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5981980988b19b3ade1fdd5b56bb94dcc01dbb16", "filename": "tests/ui/similar_names.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsimilar_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsimilar_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimilar_names.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -101,3 +101,8 @@ pub(crate) struct DirSizes {\n     pub(crate) numb_reg_cache_entries: u64,\n     pub(crate) numb_reg_src_checkouts: u64,\n }\n+\n+fn ignore_underscore_prefix() {\n+    let hello: ();\n+    let _hello: ();\n+}"}, {"sha": "ca884b41c45792ae0a6a16d39802b06b3c6fb070", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -81,6 +81,62 @@ fn single_match_know_enum() {\n     }\n }\n \n+// issue #173\n+fn if_suggestion() {\n+    let x = \"test\";\n+    match x {\n+        \"test\" => println!(),\n+        _ => (),\n+    }\n+\n+    #[derive(PartialEq, Eq)]\n+    enum Foo {\n+        A,\n+        B,\n+        C(u32),\n+    }\n+\n+    let x = Foo::A;\n+    match x {\n+        Foo::A => println!(),\n+        _ => (),\n+    }\n+\n+    const FOO_C: Foo = Foo::C(0);\n+    match x {\n+        FOO_C => println!(),\n+        _ => (),\n+    }\n+\n+    match &&x {\n+        Foo::A => println!(),\n+        _ => (),\n+    }\n+\n+    let x = &x;\n+    match &x {\n+        Foo::A => println!(),\n+        _ => (),\n+    }\n+\n+    enum Bar {\n+        A,\n+        B,\n+    }\n+    impl PartialEq for Bar {\n+        fn eq(&self, rhs: &Self) -> bool {\n+            matches!((self, rhs), (Self::A, Self::A) | (Self::B, Self::B))\n+        }\n+    }\n+    impl Eq for Bar {}\n+\n+    let x = Bar::A;\n+    match x {\n+        Bar::A => println!(),\n+        _ => (),\n+    }\n+}\n+\n macro_rules! single_match {\n     ($num:literal) => {\n         match $num {"}, {"sha": "7ea6955b7401e4ecb17ca4995b820a10bf4bb5c3", "filename": "tests/ui/single_match.stderr", "status": "modified", "additions": 61, "deletions": 7, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,4 +1,4 @@\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:8:5\n    |\n LL | /     match x {\n@@ -17,7 +17,7 @@ LL |         println!(\"{:?}\", y);\n LL |     };\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:16:5\n    |\n LL | /     match x {\n@@ -29,7 +29,7 @@ LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if let Some(y) = x { println!(\"{:?}\", y) }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:25:5\n    |\n LL | /     match z {\n@@ -38,7 +38,7 @@ LL | |         _ => {},\n LL | |     };\n    | |_____^ help: try this: `if let (2..=3, 7..=9) = z { dummy() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:54:5\n    |\n LL | /     match x {\n@@ -47,7 +47,7 @@ LL | |         None => (),\n LL | |     };\n    | |_____^ help: try this: `if let Some(y) = x { dummy() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:59:5\n    |\n LL | /     match y {\n@@ -56,7 +56,7 @@ LL | |         Err(..) => (),\n LL | |     };\n    | |_____^ help: try this: `if let Ok(y) = y { dummy() }`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match.rs:66:5\n    |\n LL | /     match c {\n@@ -65,5 +65,59 @@ LL | |         Cow::Owned(..) => (),\n LL | |     };\n    | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n \n-error: aborting due to 6 previous errors\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:87:5\n+   |\n+LL | /     match x {\n+LL | |         \"test\" => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == \"test\" { println!() }`\n+\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:100:5\n+   |\n+LL | /     match x {\n+LL | |         Foo::A => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == Foo::A { println!() }`\n+\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:106:5\n+   |\n+LL | /     match x {\n+LL | |         FOO_C => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == FOO_C { println!() }`\n+\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:111:5\n+   |\n+LL | /     match &&x {\n+LL | |         Foo::A => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == Foo::A { println!() }`\n+\n+error: you seem to be trying to use `match` for an equality check. Consider using `if`\n+  --> $DIR/single_match.rs:117:5\n+   |\n+LL | /     match &x {\n+LL | |         Foo::A => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if x == &Foo::A { println!() }`\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:134:5\n+   |\n+LL | /     match x {\n+LL | |         Bar::A => println!(),\n+LL | |         _ => (),\n+LL | |     }\n+   | |_____^ help: try this: `if let Bar::A = x { println!() }`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "20be4fa226cf154f1de72a8dcb6ab2f71285a79b", "filename": "tests/ui/single_match_else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,4 +1,4 @@\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match_else.rs:14:5\n    |\n LL | /     match ExprNode::Butterflies {\n@@ -19,7 +19,7 @@ LL |         None\n LL |     }\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match_else.rs:70:5\n    |\n LL | /     match Some(1) {\n@@ -39,7 +39,7 @@ LL |         return\n LL |     }\n    |\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n   --> $DIR/single_match_else.rs:79:5\n    |\n LL | /     match Some(1) {"}, {"sha": "2594e8fa6ad3e79da5455c23658eb8b1304f765b", "filename": "tests/ui/size_of_in_element_count/expressions.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,37 @@\n+#![warn(clippy::size_of_in_element_count)]\n+#![allow(clippy::ptr_offset_with_cast)]\n+\n+use std::mem::{size_of, size_of_val};\n+use std::ptr::{copy, copy_nonoverlapping, write_bytes};\n+\n+fn main() {\n+    const SIZE: usize = 128;\n+    const HALF_SIZE: usize = SIZE / 2;\n+    const DOUBLE_SIZE: usize = SIZE * 2;\n+    let mut x = [2u8; SIZE];\n+    let mut y = [2u8; SIZE];\n+\n+    // Count expression involving multiplication of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+\n+    // Count expression involving nested multiplications of size_of (Should trigger the lint)\n+    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+\n+    // Count expression involving divisions of size_of (Should trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+\n+    // Count expression involving divisions by size_of (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / size_of::<u8>()) };\n+\n+    // Count expression involving divisions by multiple size_of (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 * size_of::<u8>())) };\n+\n+    // Count expression involving recursive divisions by size_of (Should trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 / size_of::<u8>())) };\n+\n+    // No size_of calls (Should not trigger the lint)\n+    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n+\n+    // Different types for pointee and size_of (Should not trigger the lint)\n+    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u16>() / 2 * SIZE) };\n+}"}, {"sha": "0f0dff57f51bd4730a7f39e2553635b80418f88c", "filename": "tests/ui/size_of_in_element_count/expressions.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Fexpressions.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,35 @@\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:15:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::size-of-in-element-count` implied by `-D warnings`\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:18:62\n+   |\n+LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:21:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: found a count of bytes instead of a count of elements of `T`\n+  --> $DIR/expressions.rs:30:47\n+   |\n+LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE / (2 / size_of::<u8>())) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "09d08ac37dce548873cdd5d383c75ae686a57ac7", "filename": "tests/ui/size_of_in_element_count/functions.rs", "status": "renamed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -43,19 +43,4 @@ fn main() {\n     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n-\n-    // Count expression involving multiplication of size_of (Should trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-\n-    // Count expression involving nested multiplications of size_of (Should trigger the lint)\n-    unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n-\n-    // Count expression involving divisions of size_of (Should trigger the lint)\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n-\n-    // No size_of calls (Should not trigger the lint)\n-    unsafe { copy(x.as_ptr(), y.as_mut_ptr(), SIZE) };\n-\n-    // Different types for pointee and size_of (Should not trigger the lint)\n-    unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u16>() / 2 * SIZE) };\n }", "previous_filename": "tests/ui/size_of_in_element_count.rs"}, {"sha": "c1e824167b7f35d5156bab036453a413e1bcb242", "filename": "tests/ui/size_of_in_element_count/functions.stderr", "status": "renamed", "additions": 22, "deletions": 46, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsize_of_in_element_count%2Ffunctions.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,5 +1,5 @@\n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:18:68\n+  --> $DIR/functions.rs:18:68\n    |\n LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                    ^^^^^^^^^^^^^^^\n@@ -8,188 +8,164 @@ LL |     unsafe { copy_nonoverlapping::<u8>(x.as_ptr(), y.as_mut_ptr(), size_of:\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:19:62\n+  --> $DIR/functions.rs:19:62\n    |\n LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:21:49\n+  --> $DIR/functions.rs:21:49\n    |\n LL |     unsafe { x.as_ptr().copy_to(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:22:64\n+  --> $DIR/functions.rs:22:64\n    |\n LL |     unsafe { x.as_ptr().copy_to_nonoverlapping(y.as_mut_ptr(), size_of::<u8>()) };\n    |                                                                ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:23:51\n+  --> $DIR/functions.rs:23:51\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from(x.as_ptr(), size_of::<u8>()) };\n    |                                                   ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:24:66\n+  --> $DIR/functions.rs:24:66\n    |\n LL |     unsafe { y.as_mut_ptr().copy_from_nonoverlapping(x.as_ptr(), size_of::<u8>()) };\n    |                                                                  ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:26:47\n+  --> $DIR/functions.rs:26:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>()) };\n    |                                               ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:27:47\n+  --> $DIR/functions.rs:27:47\n    |\n LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), size_of_val(&x[0])) };\n    |                                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:29:46\n+  --> $DIR/functions.rs:29:46\n    |\n LL |     unsafe { y.as_mut_ptr().write_bytes(0u8, size_of::<u8>() * SIZE) };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:30:47\n+  --> $DIR/functions.rs:30:47\n    |\n LL |     unsafe { write_bytes(y.as_mut_ptr(), 0u8, size_of::<u8>() * SIZE) };\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:32:66\n+  --> $DIR/functions.rs:32:66\n    |\n LL |     unsafe { swap_nonoverlapping(y.as_mut_ptr(), x.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:34:46\n+  --> $DIR/functions.rs:34:46\n    |\n LL |     slice_from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:35:38\n+  --> $DIR/functions.rs:35:38\n    |\n LL |     slice_from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE);\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:37:49\n+  --> $DIR/functions.rs:37:49\n    |\n LL |     unsafe { from_raw_parts_mut(y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:38:41\n+  --> $DIR/functions.rs:38:41\n    |\n LL |     unsafe { from_raw_parts(y.as_ptr(), size_of::<u8>() * SIZE) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:40:33\n+  --> $DIR/functions.rs:40:33\n    |\n LL |     unsafe { y.as_mut_ptr().sub(size_of::<u8>()) };\n    |                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:41:29\n+  --> $DIR/functions.rs:41:29\n    |\n LL |     y.as_ptr().wrapping_sub(size_of::<u8>());\n    |                             ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:42:29\n+  --> $DIR/functions.rs:42:29\n    |\n LL |     unsafe { y.as_ptr().add(size_of::<u8>()) };\n    |                             ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:43:33\n+  --> $DIR/functions.rs:43:33\n    |\n LL |     y.as_mut_ptr().wrapping_add(size_of::<u8>());\n    |                                 ^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:44:32\n+  --> $DIR/functions.rs:44:32\n    |\n LL |     unsafe { y.as_ptr().offset(size_of::<u8>() as isize) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:45:36\n+  --> $DIR/functions.rs:45:36\n    |\n LL |     y.as_mut_ptr().wrapping_offset(size_of::<u8>() as isize);\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n \n-error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:48:62\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), size_of::<u8>() * SIZE) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n-\n-error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:51:62\n-   |\n-LL |     unsafe { copy_nonoverlapping(x.as_ptr(), y.as_mut_ptr(), HALF_SIZE * size_of_val(&x[0]) * 2) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n-\n-error: found a count of bytes instead of a count of elements of `T`\n-  --> $DIR/size_of_in_element_count.rs:54:47\n-   |\n-LL |     unsafe { copy(x.as_ptr(), y.as_mut_ptr(), DOUBLE_SIZE * size_of::<u8>() / 2) };\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use a count of elements instead of a count of bytes, it already gets multiplied by the size of the type\n-\n-error: aborting due to 24 previous errors\n+error: aborting due to 21 previous errors\n ", "previous_filename": "tests/ui/size_of_in_element_count.stderr"}, {"sha": "b8d22ed250467b533789ed47155142fcc5ec2d00", "filename": "tests/ui/stable_sort_primitive.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fstable_sort_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fstable_sort_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,46 +1,59 @@\n-error: used sort instead of sort_unstable to sort primitive type `i32`\n+error: used `sort` on primitive type `i32`\n   --> $DIR/stable_sort_primitive.rs:7:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n    = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n-error: used sort instead of sort_unstable to sort primitive type `bool`\n+error: used `sort` on primitive type `bool`\n   --> $DIR/stable_sort_primitive.rs:9:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+   |\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n-error: used sort instead of sort_unstable to sort primitive type `char`\n+error: used `sort` on primitive type `char`\n   --> $DIR/stable_sort_primitive.rs:11:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+   |\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n-error: used sort instead of sort_unstable to sort primitive type `str`\n+error: used `sort` on primitive type `str`\n   --> $DIR/stable_sort_primitive.rs:13:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+   |\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n-error: used sort instead of sort_unstable to sort primitive type `tuple`\n+error: used `sort` on primitive type `tuple`\n   --> $DIR/stable_sort_primitive.rs:15:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+   |\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n-error: used sort instead of sort_unstable to sort primitive type `array`\n+error: used `sort` on primitive type `array`\n   --> $DIR/stable_sort_primitive.rs:17:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+   |\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n-error: used sort instead of sort_unstable to sort primitive type `i32`\n+error: used `sort` on primitive type `i32`\n   --> $DIR/stable_sort_primitive.rs:19:5\n    |\n LL |     arr.sort();\n    |     ^^^^^^^^^^ help: try: `arr.sort_unstable()`\n+   |\n+   = note: an unstable sort would perform faster without any observable difference for this data type\n \n error: aborting due to 7 previous errors\n "}, {"sha": "2f8c7cec50f8ec47f1802a554e3d381a859ba3a3", "filename": "tests/ui/suspicious_operation_groupings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_operation_groupings.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -27,7 +27,7 @@ fn buggy_ab_cmp(s1: &S, s2: &S) -> bool {\n     s1.a < s2.a && s1.a < s2.b\n }\n \n-struct SAOnly {\n+struct SaOnly {\n     a: i32,\n }\n \n@@ -37,13 +37,13 @@ impl S {\n     }\n }\n \n-fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SAOnly) -> bool {\n+fn do_not_give_bad_suggestions_for_this_unusual_expr(s1: &S, s2: &SaOnly) -> bool {\n     // This is superficially similar to `buggy_ab_cmp`, but we should not suggest\n     // `s2.b` since that is invalid.\n     s1.a < s2.a && s1.a() < s1.b\n }\n \n-fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SAOnly) -> bool {\n+fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SaOnly) -> bool {\n     macro_rules! s1 {\n         () => {\n             S {\n@@ -60,7 +60,7 @@ fn do_not_give_bad_suggestions_for_this_macro_expr(s1: &S, s2: &SAOnly) -> bool\n     s1.a < s2.a && s1!().a < s1.b\n }\n \n-fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SAOnly) -> bool {\n+fn do_not_give_bad_suggestions_for_this_incorrect_expr(s1: &S, s2: &SaOnly) -> bool {\n     // There's two `s1.b`, but we should not suggest `s2.b` since that is invalid\n     s1.a < s2.a && s1.b < s1.b\n }"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "9e213aab68c5704a2d2079391a6e0a56a7e2bc6f", "filename": "tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -53,10 +53,10 @@ fn transmute_ptr_to_ptr() {\n \n // dereferencing raw pointers in const contexts, should not lint as it's unstable (issue 5959)\n const _: &() = {\n-    struct ZST;\n-    let zst = &ZST;\n+    struct Zst;\n+    let zst = &Zst;\n \n-    unsafe { std::mem::transmute::<&'static ZST, &'static ()>(zst) }\n+    unsafe { std::mem::transmute::<&'static Zst, &'static ()>(zst) }\n };\n \n fn main() {}"}, {"sha": "d927bae976f799e05c567c1e02467e813a563a1e", "filename": "tests/ui/unnecessary_ref.fixed", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnecessary_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnecessary_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_ref.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![feature(stmt_expr_attributes)]\n-#![allow(unused_variables)]\n+#![allow(unused_variables, dead_code)]\n \n struct Outer {\n     inner: u32,\n@@ -12,3 +12,12 @@ fn main() {\n     let outer = Outer { inner: 0 };\n     let inner = outer.inner;\n }\n+\n+struct Apple;\n+impl Apple {\n+    fn hello(&self) {}\n+}\n+struct Package(pub *const Apple);\n+fn foobar(package: *const Package) {\n+    unsafe { &*(*package).0 }.hello();\n+}"}, {"sha": "86bfb76ec26192a905dd9babc6349dcd2febca60", "filename": "tests/ui/unnecessary_ref.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnecessary_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnecessary_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_ref.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![feature(stmt_expr_attributes)]\n-#![allow(unused_variables)]\n+#![allow(unused_variables, dead_code)]\n \n struct Outer {\n     inner: u32,\n@@ -12,3 +12,12 @@ fn main() {\n     let outer = Outer { inner: 0 };\n     let inner = (&outer).inner;\n }\n+\n+struct Apple;\n+impl Apple {\n+    fn hello(&self) {}\n+}\n+struct Package(pub *const Apple);\n+fn foobar(package: *const Package) {\n+    unsafe { &*(&*package).0 }.hello();\n+}"}, {"sha": "436f4bcf7380465ac7c96598d38b8b759568126f", "filename": "tests/ui/unnecessary_ref.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnecessary_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnecessary_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_ref.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -10,5 +10,13 @@ note: the lint level is defined here\n LL | #[deny(clippy::ref_in_deref)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: creating a reference that is immediately dereferenced\n+  --> $DIR/unnecessary_ref.rs:22:16\n+   |\n+LL |     unsafe { &*(&*package).0 }.hello();\n+   |                ^^^^^^^^^^^ help: try this: `(*package)`\n+   |\n+   = note: `-D clippy::ref-in-deref` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "13a036cd800bca172efefc5c8af8b50ec90a5e97", "filename": "tests/ui/unnested_or_patterns.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnested_or_patterns.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnested_or_patterns.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -3,7 +3,7 @@\n #![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n-#![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]\n+#![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n #![allow(unreachable_patterns, irrefutable_let_patterns, unused_variables)]\n \n fn main() {"}, {"sha": "4a10cc702c401adf2a027ec11dba521a2bff7a27", "filename": "tests/ui/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnested_or_patterns.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -3,7 +3,7 @@\n #![feature(or_patterns)]\n #![feature(box_patterns)]\n #![warn(clippy::unnested_or_patterns)]\n-#![allow(clippy::cognitive_complexity, clippy::match_ref_pats)]\n+#![allow(clippy::cognitive_complexity, clippy::match_ref_pats, clippy::upper_case_acronyms)]\n #![allow(unreachable_patterns, irrefutable_let_patterns, unused_variables)]\n \n fn main() {"}, {"sha": "af0b577634863b26356d271f9cd0d0c04545290a", "filename": "tests/ui/upper_case_acronyms.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,21 @@\n+#![warn(clippy::upper_case_acronyms)]\n+\n+struct HTTPResponse; // linted\n+\n+struct CString; // not linted\n+\n+enum Flags {\n+    NS, // linted\n+    CWR,\n+    ECE,\n+    URG,\n+    ACK,\n+    PSH,\n+    RST,\n+    SYN,\n+    FIN,\n+}\n+\n+struct GCCLLVMSomething; // linted, beware that lint suggests `GccllvmSomething` instead of `GccLlvmSomething`\n+\n+fn main() {}"}, {"sha": "2065fe10bb151cdcdf905df38f9a7d7ddbaaab13", "filename": "tests/ui/upper_case_acronyms.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -0,0 +1,70 @@\n+error: name `HTTPResponse` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:3:8\n+   |\n+LL | struct HTTPResponse; // linted\n+   |        ^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `HttpResponse`\n+   |\n+   = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`\n+\n+error: name `NS` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:8:5\n+   |\n+LL |     NS, // linted\n+   |     ^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ns`\n+\n+error: name `CWR` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:9:5\n+   |\n+LL |     CWR,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Cwr`\n+\n+error: name `ECE` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:10:5\n+   |\n+LL |     ECE,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Ece`\n+\n+error: name `URG` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:11:5\n+   |\n+LL |     URG,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Urg`\n+\n+error: name `ACK` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:12:5\n+   |\n+LL |     ACK,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ack`\n+\n+error: name `PSH` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:13:5\n+   |\n+LL |     PSH,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Psh`\n+\n+error: name `RST` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:14:5\n+   |\n+LL |     RST,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Rst`\n+\n+error: name `SYN` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:15:5\n+   |\n+LL |     SYN,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Syn`\n+\n+error: name `FIN` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:16:5\n+   |\n+LL |     FIN,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Fin`\n+\n+error: name `GCCLLVMSomething` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:19:8\n+   |\n+LL | struct GCCLLVMSomething; // linted, beware that lint suggests `GccllvmSomething` instead of `GccLlvmSomething`\n+   |        ^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GccllvmSomething`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "bb2012441d90c591cbcb1d21e61fb5f5cc896a9b", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait)]\n+#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms)]\n \n fn main() {}\n "}, {"sha": "ddfd2beba31078a9c2b2e36a3a74699965e5bb47", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait)]\n+#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms)]\n \n fn main() {}\n "}, {"sha": "0a127858defdfefe997701fa396f34fcbfadeabf", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -22,14 +22,14 @@ fn main() {\n     writeln!(&mut v, \"{bar:8} {foo:>8}\", foo = \"hello\", bar = \"world\");\n     writeln!(&mut v, \"{number:>width$}\", number = 1, width = 6);\n     writeln!(&mut v, \"{number:>0width$}\", number = 1, width = 6);\n+    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+    writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n+    writeln!(&mut v, \"2 + 1 = {}\", 3);\n \n     // these should throw warnings\n-    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     write!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n     writeln!(&mut v, \"Hello {}\", \"world\");\n-    writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n-    writeln!(&mut v, \"2 + 1 = {}\", 3);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "e54d89ecf29e67ded79b647991050b226b7d4234", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -1,41 +1,23 @@\n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:27:79\n-   |\n-LL |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n-   |                                                                               ^\n-   |\n-   = note: `-D clippy::write-literal` implied by `-D warnings`\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:28:32\n+  --> $DIR/write_literal.rs:30:32\n    |\n LL |     write!(&mut v, \"Hello {}\", \"world\");\n    |                                ^^^^^^^\n+   |\n+   = note: `-D clippy::write-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:29:44\n+  --> $DIR/write_literal.rs:31:44\n    |\n LL |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:30:34\n+  --> $DIR/write_literal.rs:32:34\n    |\n LL |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n \n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:31:38\n-   |\n-LL |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n-   |                                      ^^^\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:32:36\n-   |\n-LL |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n-   |                                    ^\n-\n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:33\n    |\n@@ -84,5 +66,5 @@ error: literal with an empty format string\n LL |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                                          ^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}, {"sha": "1248e6b6a26a75777ef97786ce41537200a2fb90", "filename": "util/export.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2859437f930ed947386aa8d225cf078a9f53839/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/e2859437f930ed947386aa8d225cf078a9f53839/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=e2859437f930ed947386aa8d225cf078a9f53839", "patch": "@@ -22,7 +22,10 @@ def parse_code_block(match):\n     lines = []\n \n     for line in match.group(0).split('\\n'):\n-        if not line.startswith('# '):\n+        # fix syntax highlighting for headers like ```rust,ignore\n+        if line.startswith('```rust'):\n+            lines.append('```rust')\n+        elif not line.startswith('# '):\n             lines.append(line)\n \n     return '\\n'.join(lines)"}]}