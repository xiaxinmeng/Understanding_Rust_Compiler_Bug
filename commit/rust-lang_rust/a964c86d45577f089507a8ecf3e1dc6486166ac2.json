{"sha": "a964c86d45577f089507a8ecf3e1dc6486166ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjRjODZkNDU1NzdmMDg5NTA3YThlY2YzZTFkYzY0ODYxNjZhYzI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-14T13:42:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-14T13:42:29Z"}, "message": "Rollup merge of #30892 - shepmaster:box-grammar, r=alexcrichton", "tree": {"sha": "554d5d05b0c5f4baee9180cdec5fffd98c10239b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554d5d05b0c5f4baee9180cdec5fffd98c10239b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a964c86d45577f089507a8ecf3e1dc6486166ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a964c86d45577f089507a8ecf3e1dc6486166ac2", "html_url": "https://github.com/rust-lang/rust/commit/a964c86d45577f089507a8ecf3e1dc6486166ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a964c86d45577f089507a8ecf3e1dc6486166ac2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92aa3269203976cc01ee9d2ec8bc686076d37b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/92aa3269203976cc01ee9d2ec8bc686076d37b48", "html_url": "https://github.com/rust-lang/rust/commit/92aa3269203976cc01ee9d2ec8bc686076d37b48"}, {"sha": "6a4f3b2335465aa0f13d66b38bd9b58742c75719", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4f3b2335465aa0f13d66b38bd9b58742c75719", "html_url": "https://github.com/rust-lang/rust/commit/6a4f3b2335465aa0f13d66b38bd9b58742c75719"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "efc28be92a45b8e6c6b3d8afe4d3330a3d58e8e0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a964c86d45577f089507a8ecf3e1dc6486166ac2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a964c86d45577f089507a8ecf3e1dc6486166ac2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a964c86d45577f089507a8ecf3e1dc6486166ac2", "patch": "@@ -237,17 +237,17 @@ impl<T> Box<T> {\n }\n \n impl<T: ?Sized> Box<T> {\n-    /// Constructs a box from the raw pointer.\n+    /// Constructs a box from a raw pointer.\n     ///\n-    /// After this function call, pointer is owned by resulting box.\n-    /// In particular, it means that `Box` destructor calls destructor\n-    /// of `T` and releases memory. Since the way `Box` allocates and\n-    /// releases memory is unspecified, the only valid pointer to pass\n-    /// to this function is the one taken from another `Box` with\n-    /// `Box::into_raw` function.\n+    /// After calling this function, the raw pointer is owned by the\n+    /// resulting `Box`. Specifically, the `Box` destructor will call\n+    /// the destructor of `T` and free the allocated memory. Since the\n+    /// way `Box` allocates and releases memory is unspecified, the\n+    /// only valid pointer to pass to this function is the one taken\n+    /// from another `Box` via the `Box::into_raw` function.\n     ///\n-    /// Function is unsafe, because improper use of this function may\n-    /// lead to memory problems like double-free, for example if the\n+    /// This function is unsafe because improper use may lead to\n+    /// memory problems. For example, a double-free may occur if the\n     /// function is called twice on the same raw pointer.\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n@@ -257,11 +257,11 @@ impl<T: ?Sized> Box<T> {\n \n     /// Consumes the `Box`, returning the wrapped raw pointer.\n     ///\n-    /// After call to this function, caller is responsible for the memory\n-    /// previously managed by `Box`, in particular caller should properly\n-    /// destroy `T` and release memory. The proper way to do it is to\n-    /// convert pointer back to `Box` with `Box::from_raw` function, because\n-    /// `Box` does not specify, how memory is allocated.\n+    /// After calling this function, the caller is responsible for the\n+    /// memory previously managed by the `Box`. In particular, the\n+    /// caller should properly destroy `T` and release the memory. The\n+    /// proper way to do so is to convert the raw pointer back into a\n+    /// `Box` with the `Box::from_raw` function.\n     ///\n     /// # Examples\n     ///"}]}