{"sha": "92d3537abb36a1c8c269fc96b9a962be40745a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZDM1MzdhYmIzNmExYzhjMjY5ZmM5NmI5YTk2MmJlNDA3NDVhOTk=", "commit": {"author": {"name": "Noah", "email": "33094578+coolreader18@users.noreply.github.com", "date": "2020-12-13T03:38:23Z"}, "committer": {"name": "Noah", "email": "33094578+coolreader18@users.noreply.github.com", "date": "2021-01-08T19:09:40Z"}, "message": "Add wasi-exec-model cg option for emitting wasi reactors", "tree": {"sha": "cb6d2bb6ff16a6e6b77e48d4d7abc4b4d301c578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6d2bb6ff16a6e6b77e48d4d7abc4b4d301c578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92d3537abb36a1c8c269fc96b9a962be40745a99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEBPnEEc45c65Y0bFu6MFBRq4zcZUFAl/4rfQACgkQ6MFBRq4z\ncZU2ZQgAvkDi/43Qxf3Rd/TgTVqoir5FXGyV9gJAoQ2UJ0cQzhPsHjsMmVqifOqT\ntHaqXlvWLAO/X1SUpxq+/++oYkjgiUtuWc29sutQnUlgQb+HzpEDviijh5ft9lNL\nOiUozuOiqLKVm6Cl5FN+vTj8wVsF3Ni419JfSVWGbRJG/kZxnOHWLSE9jnwOcBg+\n4SazPuHmN0lI3EiLN+usOfUoSdjxbSmTcFE+InpIfS0+wGQgZ1PgKmQdS6cZKxCL\npfi0RVTWCQ1IfWY999UDyoTsb+sGD1RuJjjbkh3hKdzf2DPsCAaRsTVHOX4KKTH8\nSX3jYB/xNtxYEGXgODu5dxijMgywBw==\n=KSZ3\n-----END PGP SIGNATURE-----", "payload": "tree cb6d2bb6ff16a6e6b77e48d4d7abc4b4d301c578\nparent 7efc097c4fe6e97f54a44cee91c56189e9ddb41c\nauthor Noah <33094578+coolreader18@users.noreply.github.com> 1607830703 -0600\ncommitter Noah <33094578+coolreader18@users.noreply.github.com> 1610132980 -0600\n\nAdd wasi-exec-model cg option for emitting wasi reactors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92d3537abb36a1c8c269fc96b9a962be40745a99", "html_url": "https://github.com/rust-lang/rust/commit/92d3537abb36a1c8c269fc96b9a962be40745a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92d3537abb36a1c8c269fc96b9a962be40745a99/comments", "author": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "committer": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efc097c4fe6e97f54a44cee91c56189e9ddb41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7efc097c4fe6e97f54a44cee91c56189e9ddb41c", "html_url": "https://github.com/rust-lang/rust/commit/7efc097c4fe6e97f54a44cee91c56189e9ddb41c"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "80b92d3a72cdfcada375945cee6e61fad7648a23", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -1193,6 +1193,7 @@ fn exec_linker(\n \n fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n     let kind = match (crate_type, sess.crt_static(Some(crate_type)), sess.relocation_model()) {\n+        (CrateType::Executable, _, _) if sess.is_wasi_reactor() => LinkOutputKind::WasiReactorExe,\n         (CrateType::Executable, false, RelocModel::Pic) => LinkOutputKind::DynamicPicExe,\n         (CrateType::Executable, false, _) => LinkOutputKind::DynamicNoPicExe,\n         (CrateType::Executable, true, RelocModel::Pic) => LinkOutputKind::StaticPicExe,"}, {"sha": "bb35e7ec8943955f45f67c955f9989ea735e1083", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -314,6 +314,10 @@ impl<'a> Linker for GccLinker<'a> {\n                 self.cmd.arg(\"-static\");\n                 self.build_dylib(out_filename);\n             }\n+            LinkOutputKind::WasiReactorExe => {\n+                self.linker_arg(\"--entry\");\n+                self.linker_arg(\"_initialize\");\n+            }\n         }\n         // VxWorks compiler driver introduced `--static-crt` flag specifically for rustc,\n         // it switches linking for libc and similar system libraries to static without using\n@@ -662,6 +666,9 @@ impl<'a> Linker for MsvcLinker<'a> {\n                 arg.push(out_filename.with_extension(\"dll.lib\"));\n                 self.cmd.arg(arg);\n             }\n+            LinkOutputKind::WasiReactorExe => {\n+                panic!(\"can't link as reactor on non-wasi target\");\n+            }\n         }\n     }\n \n@@ -1085,6 +1092,10 @@ impl<'a> Linker for WasmLd<'a> {\n             LinkOutputKind::DynamicDylib | LinkOutputKind::StaticDylib => {\n                 self.cmd.arg(\"--no-entry\");\n             }\n+            LinkOutputKind::WasiReactorExe => {\n+                self.cmd.arg(\"--entry\");\n+                self.cmd.arg(\"_initialize\");\n+            }\n         }\n     }\n "}, {"sha": "62f620e0639a44d7d84475aea8022c5827c1a5a6", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -7,7 +7,7 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n-    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion,\n+    Externs, OutputType, OutputTypes, SanitizerSet, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n@@ -597,6 +597,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);\n+    tracked!(wasi_exec_model, Some(WasiExecModel::Reactor));\n }\n \n #[test]"}, {"sha": "31fc13d23727fc7275ffbbae0c04ffff6664fece", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -2086,6 +2086,7 @@ crate mod dep_tracking {\n         SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n+    use crate::options::WasiExecModel;\n     use crate::utils::NativeLibKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n@@ -2141,6 +2142,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n     impl_dep_tracking_hash_via_hash!(Option<CodeModel>);\n     impl_dep_tracking_hash_via_hash!(Option<TlsModel>);\n+    impl_dep_tracking_hash_via_hash!(Option<WasiExecModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);"}, {"sha": "bc1d862b16071d7157ee9825de748938950799e2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -278,6 +278,7 @@ macro_rules! options {\n         pub const parse_tls_model: &str =\n             \"one of supported TLS models (`rustc --print tls-models`)\";\n         pub const parse_target_feature: &str = parse_string;\n+        pub const parse_wasi_exec_model: &str = \"either `command` or `reactor`\";\n     }\n \n     #[allow(dead_code)]\n@@ -708,6 +709,15 @@ macro_rules! options {\n                 None => false,\n             }\n         }\n+\n+        fn parse_wasi_exec_model(slot: &mut Option<WasiExecModel>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"command\")  => *slot = Some(WasiExecModel::Command),\n+                Some(\"reactor\") => *slot = Some(WasiExecModel::Reactor),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1147,9 +1157,17 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"in general, enable more debug printouts (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n         \"verify LLVM IR (default: no)\"),\n+    wasi_exec_model: Option<WasiExecModel> = (None, parse_wasi_exec_model, [TRACKED],\n+        \"whether to build a wasi command or reactor\"),\n \n     // This list is in alphabetical order.\n     //\n     // If you add a new option, please update:\n-    // - src/librustc_interface/tests.rs\n+    // - compiler/rustc_interface/src/tests.rs\n+}\n+\n+#[derive(Clone, Hash)]\n+pub enum WasiExecModel {\n+    Command,\n+    Reactor,\n }"}, {"sha": "93c619c40545279e2e3fbeb83242dd5a632d6411", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -796,6 +796,14 @@ impl Session {\n         self.opts.debugging_opts.tls_model.unwrap_or(self.target.tls_model)\n     }\n \n+    pub fn is_wasi_reactor(&self) -> bool {\n+        self.target.options.os == \"wasi\"\n+            && matches!(\n+                self.opts.debugging_opts.wasi_exec_model,\n+                Some(config::WasiExecModel::Reactor)\n+            )\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "32da16a2d8ca83381034d3e0d3ebdd2025a97721", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -5,15 +5,16 @@\n //! The `crtx` ones are generally distributed with libc and the `begin/end` ones with gcc.\n //! See <https://dev.gentoo.org/~vapier/crt.txt> for some more details.\n //!\n-//! | Pre-link CRT objects | glibc                  | musl                   | bionic           | mingw             | wasi |\n-//! |----------------------|------------------------|------------------------|------------------|-------------------|------|\n-//! | dynamic-nopic-exe    | crt1, crti, crtbegin   | crt1, crti, crtbegin   | crtbegin_dynamic | crt2, crtbegin    | crt1 |\n-//! | dynamic-pic-exe      | Scrt1, crti, crtbeginS | Scrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1 |\n-//! | static-nopic-exe     | crt1, crti, crtbeginT  | crt1, crti, crtbegin   | crtbegin_static  | crt2, crtbegin    | crt1 |\n-//! | static-pic-exe       | rcrt1, crti, crtbeginS | rcrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1 |\n-//! | dynamic-dylib        | crti, crtbeginS        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -    |\n-//! | static-dylib (gcc)   | crti, crtbeginT        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -    |\n-//! | static-dylib (clang) | crti, crtbeginT        | N/A                    | crtbegin_static  | dllcrt2, crtbegin | -    |\n+//! | Pre-link CRT objects | glibc                  | musl                   | bionic           | mingw             | wasi         |\n+//! |----------------------|------------------------|------------------------|------------------|-------------------|--------------|\n+//! | dynamic-nopic-exe    | crt1, crti, crtbegin   | crt1, crti, crtbegin   | crtbegin_dynamic | crt2, crtbegin    | crt1         |\n+//! | dynamic-pic-exe      | Scrt1, crti, crtbeginS | Scrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1         |\n+//! | static-nopic-exe     | crt1, crti, crtbeginT  | crt1, crti, crtbegin   | crtbegin_static  | crt2, crtbegin    | crt1         |\n+//! | static-pic-exe       | rcrt1, crti, crtbeginS | rcrt1, crti, crtbeginS | crtbegin_dynamic | crt2, crtbegin    | crt1         |\n+//! | dynamic-dylib        | crti, crtbeginS        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -            |\n+//! | static-dylib (gcc)   | crti, crtbeginT        | crti, crtbeginS        | crtbegin_so      | dllcrt2, crtbegin | -            |\n+//! | static-dylib (clang) | crti, crtbeginT        | N/A                    | crtbegin_static  | dllcrt2, crtbegin | -            |\n+//! | wasi-reactor-exe     | N/A                    | N/A                    | N/A              | N/A               | crt1-reactor |\n //!\n //! | Post-link CRT objects | glibc         | musl          | bionic         | mingw  | wasi |\n //! |-----------------------|---------------|---------------|----------------|--------|------|\n@@ -105,6 +106,7 @@ pub(super) fn pre_wasi_fallback() -> CrtObjects {\n         (LinkOutputKind::DynamicPicExe, &[\"crt1.o\"]),\n         (LinkOutputKind::StaticNoPicExe, &[\"crt1.o\"]),\n         (LinkOutputKind::StaticPicExe, &[\"crt1.o\"]),\n+        (LinkOutputKind::WasiReactorExe, &[\"crt1-reactor.o\"]),\n     ])\n }\n "}, {"sha": "f0ef15e1a3944c6d968ea743bdaa7a733e7c26d5", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -407,6 +407,8 @@ pub enum LinkOutputKind {\n     DynamicDylib,\n     /// Dynamic library with bundled libc (\"statically linked\").\n     StaticDylib,\n+    /// WASI module with a lifetime past the _initialize entry point\n+    WasiReactorExe,\n }\n \n impl LinkOutputKind {\n@@ -418,6 +420,7 @@ impl LinkOutputKind {\n             LinkOutputKind::StaticPicExe => \"static-pic-exe\",\n             LinkOutputKind::DynamicDylib => \"dynamic-dylib\",\n             LinkOutputKind::StaticDylib => \"static-dylib\",\n+            LinkOutputKind::WasiReactorExe => \"wasi-reactor-exe\",\n         }\n     }\n \n@@ -429,6 +432,7 @@ impl LinkOutputKind {\n             \"static-pic-exe\" => LinkOutputKind::StaticPicExe,\n             \"dynamic-dylib\" => LinkOutputKind::DynamicDylib,\n             \"static-dylib\" => LinkOutputKind::StaticDylib,\n+            \"wasi-reactor-exe\" => LinkOutputKind::WasiReactorExe,\n             _ => return None,\n         })\n     }\n@@ -1377,7 +1381,7 @@ impl Target {\n                         let kind = LinkOutputKind::from_str(&k).ok_or_else(|| {\n                             format!(\"{}: '{}' is not a valid value for CRT object kind. \\\n                                      Use '(dynamic,static)-(nopic,pic)-exe' or \\\n-                                     '(dynamic,static)-dylib'\", name, k)\n+                                     '(dynamic,static)-dylib' or 'wasi-reactor-exe'\", name, k)\n                         })?;\n \n                         let v = v.as_array().ok_or_else(||"}, {"sha": "c142c43c98da4ac9550eee1e1a74b86b24f60c36", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92d3537abb36a1c8c269fc96b9a962be40745a99/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d3537abb36a1c8c269fc96b9a962be40745a99/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=92d3537abb36a1c8c269fc96b9a962be40745a99", "patch": "@@ -187,14 +187,16 @@ fn copy_self_contained_objects(\n         }\n     } else if target.ends_with(\"-wasi\") {\n         let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n-        copy_and_stamp(\n-            builder,\n-            &libdir_self_contained,\n-            &srcdir,\n-            \"crt1.o\",\n-            &mut target_deps,\n-            DependencyType::TargetSelfContained,\n-        );\n+        for &obj in &[\"crt1.o\", \"crt1-reactor.o\"] {\n+            copy_and_stamp(\n+                builder,\n+                &libdir_self_contained,\n+                &srcdir,\n+                obj,\n+                &mut target_deps,\n+                DependencyType::TargetSelfContained,\n+            );\n+        }\n     } else if target.contains(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n             let src = compiler_file(builder, builder.cc(target), target, obj);"}]}