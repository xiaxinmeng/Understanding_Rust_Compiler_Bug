{"sha": "19524f1ed14d8da8b3d953812a3c3b461085d3dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTI0ZjFlZDE0ZDhkYThiM2Q5NTM4MTJhM2MzYjQ2MTA4NWQzZGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T17:47:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcore: use unboxed closures in `Result` methods", "tree": {"sha": "084132956d97481b7b3034d04c69c31c9d538716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084132956d97481b7b3034d04c69c31c9d538716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19524f1ed14d8da8b3d953812a3c3b461085d3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19524f1ed14d8da8b3d953812a3c3b461085d3dc", "html_url": "https://github.com/rust-lang/rust/commit/19524f1ed14d8da8b3d953812a3c3b461085d3dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19524f1ed14d8da8b3d953812a3c3b461085d3dc/comments", "author": null, "committer": null, "parents": [{"sha": "135c4ab5fe3c6f8befd379846988e7ca6234c116", "url": "https://api.github.com/repos/rust-lang/rust/commits/135c4ab5fe3c6f8befd379846988e7ca6234c116", "html_url": "https://github.com/rust-lang/rust/commit/135c4ab5fe3c6f8befd379846988e7ca6234c116"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "88d33a59b38bd1852b05024619f83687e285f923", "filename": "src/libcore/result.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19524f1ed14d8da8b3d953812a3c3b461085d3dc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19524f1ed14d8da8b3d953812a3c3b461085d3dc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=19524f1ed14d8da8b3d953812a3c3b461085d3dc", "patch": "@@ -239,6 +239,7 @@ use slice::AsSlice;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use option::Option;\n use option::Option::{None, Some};\n+use ops::{FnMut, FnOnce};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n@@ -466,7 +467,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn map<U>(self, op: |T| -> U) -> Result<U,E> {\n+    pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U,E> {\n         match self {\n           Ok(t) => Ok(op(t)),\n           Err(e) => Err(e)\n@@ -492,7 +493,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn map_err<F>(self, op: |E| -> F) -> Result<T,F> {\n+    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T,F> {\n         match self {\n           Ok(t) => Ok(t),\n           Err(e) => Err(op(e))\n@@ -612,7 +613,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn and_then<U>(self, op: |T| -> Result<U, E>) -> Result<U, E> {\n+    pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {\n         match self {\n             Ok(t) => op(t),\n             Err(e) => Err(e),\n@@ -666,7 +667,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    pub fn or_else<F>(self, op: |E| -> Result<T, F>) -> Result<T, F> {\n+    pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {\n         match self {\n             Ok(t) => Ok(t),\n             Err(e) => op(e),\n@@ -708,7 +709,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for conventions\"]\n-    pub fn unwrap_or_else(self, op: |E| -> T) -> T {\n+    pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {\n         match self {\n             Ok(t) => t,\n             Err(e) => op(e)\n@@ -904,10 +905,11 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n pub fn fold<T,\n             V,\n             E,\n+            F: FnMut(V, T) -> V,\n             Iter: Iterator<Result<T, E>>>(\n             mut iterator: Iter,\n             mut init: V,\n-            f: |V, T| -> V)\n+            mut f: F)\n             -> Result<V, E> {\n     for t in iterator {\n         match t {"}]}