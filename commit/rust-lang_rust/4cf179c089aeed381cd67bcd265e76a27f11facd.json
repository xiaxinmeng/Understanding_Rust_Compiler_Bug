{"sha": "4cf179c089aeed381cd67bcd265e76a27f11facd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjE3OWMwODlhZWVkMzgxY2Q2N2JjZDI2NWU3NmEyN2YxMWZhY2Q=", "commit": {"author": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-19T09:44:23Z"}, "committer": {"name": "pcpthm", "email": "pcpthm@gmail.com", "date": "2019-03-19T09:44:23Z"}, "message": "Replace `contract_child` to a less ad-hoc API", "tree": {"sha": "a47ced34b0861ba6179f6644e5284eac628301c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a47ced34b0861ba6179f6644e5284eac628301c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf179c089aeed381cd67bcd265e76a27f11facd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf179c089aeed381cd67bcd265e76a27f11facd", "html_url": "https://github.com/rust-lang/rust/commit/4cf179c089aeed381cd67bcd265e76a27f11facd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf179c089aeed381cd67bcd265e76a27f11facd/comments", "author": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcpthm", "id": 43881370, "node_id": "MDQ6VXNlcjQzODgxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/43881370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcpthm", "html_url": "https://github.com/pcpthm", "followers_url": "https://api.github.com/users/pcpthm/followers", "following_url": "https://api.github.com/users/pcpthm/following{/other_user}", "gists_url": "https://api.github.com/users/pcpthm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcpthm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcpthm/subscriptions", "organizations_url": "https://api.github.com/users/pcpthm/orgs", "repos_url": "https://api.github.com/users/pcpthm/repos", "events_url": "https://api.github.com/users/pcpthm/events{/privacy}", "received_events_url": "https://api.github.com/users/pcpthm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ed813e8951517f59552323c55a0ff05167c945", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ed813e8951517f59552323c55a0ff05167c945", "html_url": "https://github.com/rust-lang/rust/commit/e2ed813e8951517f59552323c55a0ff05167c945"}], "stats": {"total": 77, "additions": 37, "deletions": 40}, "files": [{"sha": "73e1acd5a2193a7fe1749c635d0831f739c57421", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cf179c089aeed381cd67bcd265e76a27f11facd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf179c089aeed381cd67bcd265e76a27f11facd/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=4cf179c089aeed381cd67bcd265e76a27f11facd", "patch": "@@ -82,16 +82,15 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n         };\n \n         let (cm, blocklike) = expr_stmt(p);\n+        let kind = cm.as_ref().map(|cm| cm.kind()).unwrap_or(ERROR);\n \n-        if let Some(cm) = &cm {\n-            if has_attrs && !is_expr_stmt_attr_allowed(cm.kind()) {\n-                // test_err attr_on_expr_not_allowed\n-                // fn foo() {\n-                //    #[A] 1 + 2;\n-                //    #[B] if true {};\n-                // }\n-                p.error(format!(\"attributes are not allowed on {:?}\", cm.kind()));\n-            }\n+        if has_attrs && !is_expr_stmt_attr_allowed(kind) {\n+            // test_err attr_on_expr_not_allowed\n+            // fn foo() {\n+            //    #[A] 1 + 2;\n+            //    #[B] if true {};\n+            // }\n+            p.error(format!(\"attributes are not allowed on {:?}\", kind));\n         }\n \n         if p.at(R_CURLY) {\n@@ -101,7 +100,8 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n             //     #[B] &()\n             // }\n             if let Some(cm) = cm {\n-                m.contract_child(p, cm);\n+                cm.undo_completion(p).abandon(p);\n+                m.complete(p, kind);\n             } else {\n                 m.abandon(p);\n             }"}, {"sha": "3c326452b37398772dafc6cd39d85e50b6362ef7", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4cf179c089aeed381cd67bcd265e76a27f11facd/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf179c089aeed381cd67bcd265e76a27f11facd/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=4cf179c089aeed381cd67bcd265e76a27f11facd", "patch": "@@ -212,8 +212,9 @@ impl Marker {\n             }\n             _ => unreachable!(),\n         }\n+        let finish_pos = p.events.len() as u32;\n         p.push_event(Event::Finish);\n-        CompletedMarker::new(self.pos, kind)\n+        CompletedMarker::new(self.pos, finish_pos, kind)\n     }\n \n     /// Abandons the syntax tree node. All its children\n@@ -228,36 +229,17 @@ impl Marker {\n             }\n         }\n     }\n-\n-    /// Contract a node `cm` and complete as `cm`'s `kind`.\n-    /// `cm` must be a child of `m` to work correctly.\n-    /// ```text\n-    /// m--A        m--A\n-    /// +--cm--B -> +--B\n-    /// +--C        C\n-    ///\n-    /// [m: TOMBSTONE, A, cm: Start(k), B, Finish, C]\n-    /// [m: Start(k), A, cm: TOMBSTONE, B, Finish, C]\n-    /// ```\n-    pub(crate) fn contract_child(mut self, p: &mut Parser, cm: CompletedMarker) -> CompletedMarker {\n-        self.bomb.defuse();\n-        match p.events[self.pos as usize] {\n-            Event::Start { kind: ref mut slot, .. } => *slot = cm.kind(),\n-            _ => unreachable!(),\n-        };\n-        match p.events[cm.0 as usize] {\n-            Event::Start { kind: ref mut slot, .. } => *slot = TOMBSTONE,\n-            _ => unreachable!(),\n-        };\n-        CompletedMarker::new(self.pos, cm.kind())\n-    }\n }\n \n-pub(crate) struct CompletedMarker(u32, SyntaxKind);\n+pub(crate) struct CompletedMarker {\n+    start_pos: u32,\n+    finish_pos: u32,\n+    kind: SyntaxKind,\n+}\n \n impl CompletedMarker {\n-    fn new(pos: u32, kind: SyntaxKind) -> Self {\n-        CompletedMarker(pos, kind)\n+    fn new(start_pos: u32, finish_pos: u32, kind: SyntaxKind) -> Self {\n+        CompletedMarker { start_pos, finish_pos, kind }\n     }\n \n     /// This method allows to create a new node which starts\n@@ -274,17 +256,32 @@ impl CompletedMarker {\n     /// distance to `NEWSTART` into forward_parent(=2 in this case);\n     pub(crate) fn precede(self, p: &mut Parser) -> Marker {\n         let new_pos = p.start();\n-        let idx = self.0 as usize;\n+        let idx = self.start_pos as usize;\n         match p.events[idx] {\n             Event::Start { ref mut forward_parent, .. } => {\n-                *forward_parent = Some(new_pos.pos - self.0);\n+                *forward_parent = Some(new_pos.pos - self.start_pos);\n             }\n             _ => unreachable!(),\n         }\n         new_pos\n     }\n \n+    /// Undo this completion and turns into a `Marker`\n+    pub(crate) fn undo_completion(self, p: &mut Parser) -> Marker {\n+        let start_idx = self.start_pos as usize;\n+        let finish_idx = self.finish_pos as usize;\n+        match p.events[start_idx] {\n+            Event::Start { ref mut kind, forward_parent: None } => *kind = TOMBSTONE,\n+            _ => unreachable!(),\n+        }\n+        match p.events[finish_idx] {\n+            ref mut slot @ Event::Finish => *slot = Event::tombstone(),\n+            _ => unreachable!(),\n+        }\n+        Marker::new(self.start_pos)\n+    }\n+\n     pub(crate) fn kind(&self) -> SyntaxKind {\n-        self.1\n+        self.kind\n     }\n }"}]}