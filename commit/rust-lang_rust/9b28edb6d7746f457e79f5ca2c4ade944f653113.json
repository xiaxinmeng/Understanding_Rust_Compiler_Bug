{"sha": "9b28edb6d7746f457e79f5ca2c4ade944f653113", "node_id": "C_kwDOAAsO6NoAKDliMjhlZGI2ZDc3NDZmNDU3ZTc5ZjVjYTJjNGFkZTk0NGY2NTMxMTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T03:32:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-15T15:36:06Z"}, "message": "Make InstantiatedPredicates impl IntoIterator", "tree": {"sha": "18e256b7620ec7ed5ac0744e90fdaaa92854336d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e256b7620ec7ed5ac0744e90fdaaa92854336d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b28edb6d7746f457e79f5ca2c4ade944f653113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b28edb6d7746f457e79f5ca2c4ade944f653113", "html_url": "https://github.com/rust-lang/rust/commit/9b28edb6d7746f457e79f5ca2c4ade944f653113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b28edb6d7746f457e79f5ca2c4ade944f653113/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91fd862df011168e7634f79fc2f2c9fb15a7afd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/91fd862df011168e7634f79fc2f2c9fb15a7afd3", "html_url": "https://github.com/rust-lang/rust/commit/91fd862df011168e7634f79fc2f2c9fb15a7afd3"}], "stats": {"total": 139, "additions": 74, "deletions": 65}, "files": [{"sha": "11729e2c83f0b9d098788e495a6db5ea5b271ce5", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -107,11 +107,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         instantiated_predicates: ty::InstantiatedPredicates<'tcx>,\n         locations: Locations,\n     ) {\n-        for (predicate, span) in instantiated_predicates\n-            .predicates\n-            .into_iter()\n-            .zip(instantiated_predicates.spans.into_iter())\n-        {\n+        for (predicate, span) in instantiated_predicates {\n             debug!(?predicate);\n             let category = ConstraintCategory::Predicate(span);\n             let predicate = self.normalize_with_category(predicate, locations, category);"}, {"sha": "9af325b77fc94d4cd24bf2ae3eb4de9fd0bb9981", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -32,7 +32,6 @@ use rustc_trait_selection::traits::{\n };\n \n use std::cell::LazyCell;\n-use std::iter;\n use std::ops::{ControlFlow, Deref};\n \n pub(super) struct WfCheckingCtxt<'a, 'tcx> {\n@@ -1480,16 +1479,15 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n \n     debug!(?predicates.predicates);\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n-    let wf_obligations =\n-        iter::zip(&predicates.predicates, &predicates.spans).flat_map(|(&p, &sp)| {\n-            traits::wf::predicate_obligations(\n-                infcx,\n-                wfcx.param_env.without_const(),\n-                wfcx.body_id,\n-                p,\n-                sp,\n-            )\n-        });\n+    let wf_obligations = predicates.into_iter().flat_map(|(p, sp)| {\n+        traits::wf::predicate_obligations(\n+            infcx,\n+            wfcx.param_env.without_const(),\n+            wfcx.body_id,\n+            p,\n+            sp,\n+        )\n+    });\n \n     let obligations: Vec<_> = wf_obligations.chain(default_obligations).collect();\n     wfcx.register_obligations(obligations);"}, {"sha": "b617821fbd6528bbf6feee0f9efb8ff867a34ae5", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -375,14 +375,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.tcx.has_attr(def_id, sym::rustc_evaluate_where_clauses) {\n                     let predicates = self.tcx.predicates_of(def_id);\n                     let predicates = predicates.instantiate(self.tcx, subst);\n-                    for (predicate, predicate_span) in\n-                        predicates.predicates.iter().zip(&predicates.spans)\n-                    {\n+                    for (predicate, predicate_span) in predicates {\n                         let obligation = Obligation::new(\n                             self.tcx,\n                             ObligationCause::dummy_with_span(callee_expr.span),\n                             self.param_env,\n-                            *predicate,\n+                            predicate,\n                         );\n                         let result = self.evaluate_obligation(&obligation);\n                         self.tcx\n@@ -391,7 +389,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 callee_expr.span,\n                                 &format!(\"evaluate({:?}) = {:?}\", predicate, result),\n                             )\n-                            .span_label(*predicate_span, \"predicate\")\n+                            .span_label(predicate_span, \"predicate\")\n                             .emit();\n                     }\n                 }"}, {"sha": "c9609e69439812477b27d84f3d037abe82167ea0", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -2140,8 +2140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // FIXME(compiler-errors): This could be problematic if something has two\n                         // fn-like predicates with different args, but callable types really never\n                         // do that, so it's OK.\n-                        for (predicate, span) in\n-                            std::iter::zip(instantiated.predicates, instantiated.spans)\n+                        for (predicate, span) in instantiated\n                         {\n                             if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = predicate.kind().skip_binder()\n                                 && pred.self_ty().peel_refs() == callee_ty"}, {"sha": "372ea30ebd08e4877df583a8672b7b94df1bf2ae", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::ty::{InternalSubsts, UserSubsts, UserType};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;\n \n-use std::iter;\n use std::ops::Deref;\n \n struct ConfirmContext<'a, 'tcx> {\n@@ -101,7 +100,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let filler_substs = rcvr_substs\n             .extend_to(self.tcx, pick.item.def_id, |def, _| self.tcx.mk_param_from_def(def));\n         let illegal_sized_bound = self.predicates_require_illegal_sized_bound(\n-            &self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n+            self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n         );\n \n         // Unify the (adjusted) self type with what the method expects.\n@@ -565,7 +564,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n     fn predicates_require_illegal_sized_bound(\n         &self,\n-        predicates: &ty::InstantiatedPredicates<'tcx>,\n+        predicates: ty::InstantiatedPredicates<'tcx>,\n     ) -> Option<Span> {\n         let sized_def_id = self.tcx.lang_items().sized_trait()?;\n \n@@ -575,10 +574,11 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))\n                     if trait_pred.def_id() == sized_def_id =>\n                 {\n-                    let span = iter::zip(&predicates.predicates, &predicates.spans)\n+                    let span = predicates\n+                        .iter()\n                         .find_map(\n                             |(p, span)| {\n-                                if *p == obligation.predicate { Some(*span) } else { None }\n+                                if p == obligation.predicate { Some(span) } else { None }\n                             },\n                         )\n                         .unwrap_or(rustc_span::DUMMY_SP);"}, {"sha": "655753a42efd896a71b315c105f6d0f213cc065f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -1252,6 +1252,33 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n     pub fn is_empty(&self) -> bool {\n         self.predicates.is_empty()\n     }\n+\n+    pub fn iter(&self) -> <&Self as IntoIterator>::IntoIter {\n+        (&self).into_iter()\n+    }\n+}\n+\n+impl<'tcx> IntoIterator for InstantiatedPredicates<'tcx> {\n+    type Item = (Predicate<'tcx>, Span);\n+\n+    type IntoIter = std::iter::Zip<std::vec::IntoIter<Predicate<'tcx>>, std::vec::IntoIter<Span>>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        std::iter::zip(self.predicates, self.spans)\n+    }\n+}\n+\n+impl<'a, 'tcx> IntoIterator for &'a InstantiatedPredicates<'tcx> {\n+    type Item = (Predicate<'tcx>, Span);\n+\n+    type IntoIter = std::iter::Zip<\n+        std::iter::Copied<std::slice::Iter<'a, Predicate<'tcx>>>,\n+        std::iter::Copied<std::slice::Iter<'a, Span>>,\n+    >;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        std::iter::zip(self.predicates.iter().copied(), self.spans.iter().copied())\n+    }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable, Lift)]"}, {"sha": "0419bb3f724f9ed86454dc73c60dc5db20502ada", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -82,9 +82,7 @@ pub fn recompute_applicable_impls<'tcx>(\n \n     let predicates =\n         tcx.predicates_of(obligation.cause.body_id.owner.to_def_id()).instantiate_identity(tcx);\n-    for obligation in\n-        elaborate_predicates_with_span(tcx, std::iter::zip(predicates.predicates, predicates.spans))\n-    {\n+    for obligation in elaborate_predicates_with_span(tcx, predicates.into_iter()) {\n         let kind = obligation.predicate.kind();\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = kind.skip_binder()\n             && param_env_candidate_may_apply(kind.rebind(trait_pred))"}, {"sha": "6e2341a823b9b82d46edbf403f773eaf003297ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -2070,7 +2070,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n             // Find another predicate whose self-type is equal to the expected self type,\n             // but whose substs don't match.\n-            let other_pred = std::iter::zip(&predicates.predicates, &predicates.spans)\n+            let other_pred = predicates.into_iter()\n                 .enumerate()\n                 .find(|(other_idx, (pred, _))| match pred.kind().skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))\n@@ -2095,7 +2095,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // If we found one, then it's very likely the cause of the error.\n             if let Some((_, (_, other_pred_span))) = other_pred {\n                 err.span_note(\n-                    *other_pred_span,\n+                    other_pred_span,\n                     \"closure inferred to have a different signature due to this bound\",\n                 );\n             }"}, {"sha": "531aa23d6eac59a1fc7a41176a73631aa9c9e841", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -115,14 +115,12 @@ pub fn predicates_for_generics<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     generic_bounds: ty::InstantiatedPredicates<'tcx>,\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    std::iter::zip(generic_bounds.predicates, generic_bounds.spans).enumerate().map(\n-        move |(idx, (predicate, span))| Obligation {\n-            cause: cause(idx, span),\n-            recursion_depth: 0,\n-            param_env,\n-            predicate,\n-        },\n-    )\n+    generic_bounds.into_iter().enumerate().map(move |(idx, (predicate, span))| Obligation {\n+        cause: cause(idx, span),\n+        recursion_depth: 0,\n+        param_env,\n+        predicate,\n+    })\n }\n \n /// Determines whether the type `ty` is known to meet `bound` and"}, {"sha": "9c655aff0bac462df7efaf44335cd465d224cc22", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -2259,25 +2259,23 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         tcx.predicates_of(impl_fn_def_id).instantiate(tcx, impl_fn_substs),\n         &mut obligations,\n     );\n-    obligations.extend(std::iter::zip(predicates.predicates, predicates.spans).map(\n-        |(pred, span)| {\n-            Obligation::with_depth(\n-                tcx,\n-                ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    if span.is_dummy() {\n-                        super::ItemObligation(impl_fn_def_id)\n-                    } else {\n-                        super::BindingObligation(impl_fn_def_id, span)\n-                    },\n-                ),\n-                obligation.recursion_depth + 1,\n-                obligation.param_env,\n-                pred,\n-            )\n-        },\n-    ));\n+    obligations.extend(predicates.into_iter().map(|(pred, span)| {\n+        Obligation::with_depth(\n+            tcx,\n+            ObligationCause::new(\n+                obligation.cause.span,\n+                obligation.cause.body_id,\n+                if span.is_dummy() {\n+                    super::ItemObligation(impl_fn_def_id)\n+                } else {\n+                    super::BindingObligation(impl_fn_def_id, span)\n+                },\n+            ),\n+            obligation.recursion_depth + 1,\n+            obligation.param_env,\n+            pred,\n+        )\n+    }));\n \n     let ty = normalize_with_depth_to(\n         selcx,"}, {"sha": "2cebad64c43732f58741dd5e9fe5074eed52eacc", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -736,7 +736,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         trace!(\"{:#?}\", predicates);\n         debug_assert_eq!(predicates.predicates.len(), origins.len());\n \n-        iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n+        iter::zip(predicates, origins.into_iter().rev())\n             .map(|((mut pred, span), origin_def_id)| {\n                 let code = if span.is_dummy() {\n                     traits::ItemObligation(origin_def_id)"}, {"sha": "f35c5e44882df38db20a578bc83cdfcd9c2f50ae", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b28edb6d7746f457e79f5ca2c4ade944f653113/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=9b28edb6d7746f457e79f5ca2c4ade944f653113", "patch": "@@ -17,7 +17,6 @@ use rustc_trait_selection::traits::query::type_op::subtype::Subtype;\n use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{Normalized, Obligation, ObligationCause, ObligationCtxt};\n use std::fmt;\n-use std::iter::zip;\n \n pub(crate) fn provide(p: &mut Providers) {\n     *p = Providers {\n@@ -108,9 +107,7 @@ fn relate_mir_and_user_substs<'tcx>(\n     let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n \n     debug!(?instantiated_predicates);\n-    for (instantiated_predicate, predicate_span) in\n-        zip(instantiated_predicates.predicates, instantiated_predicates.spans)\n-    {\n+    for (instantiated_predicate, predicate_span) in instantiated_predicates {\n         let span = if span == DUMMY_SP { predicate_span } else { span };\n         let cause = ObligationCause::new(\n             span,"}]}