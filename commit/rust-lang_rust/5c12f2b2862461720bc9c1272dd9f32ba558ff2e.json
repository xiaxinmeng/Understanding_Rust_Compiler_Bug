{"sha": "5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMTJmMmIyODYyNDYxNzIwYmM5YzEyNzJkZDlmMzJiYTU1OGZmMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-26T12:30:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-26T12:30:52Z"}, "message": "Auto merge of #5509 - phansch:more-diagnostic-items2, r=matthiaskrgr\n\nUse more diagnostic items\n\nIn particular for:\n\n* `VecDeque`\n* `String`\n* `Mutex`\n* `HashMap`\n* `HashSet`\n\ncc rust-lang/rust#71414 #5393\n\n---\n\nchangelog: none", "tree": {"sha": "496c010ff7d7c3c7eb5e9ea37c15fd70f35e81c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496c010ff7d7c3c7eb5e9ea37c15fd70f35e81c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "html_url": "https://github.com/rust-lang/rust/commit/5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c802b5e33f5a402de3780bc5a8b05e7ebad409", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c802b5e33f5a402de3780bc5a8b05e7ebad409", "html_url": "https://github.com/rust-lang/rust/commit/b7c802b5e33f5a402de3780bc5a8b05e7ebad409"}, {"sha": "eda73fe707ed680c89e5a080318f6fa7b555616e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda73fe707ed680c89e5a080318f6fa7b555616e", "html_url": "https://github.com/rust-lang/rust/commit/eda73fe707ed680c89e5a080318f6fa7b555616e"}], "stats": {"total": 122, "additions": 64, "deletions": 58}, "files": [{"sha": "7b332c761a0c40b17ff3243e4457136c30d31887", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt};\n+use crate::utils::{get_item_name, higher, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n use crate::utils::{snippet_with_applicability, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -114,7 +114,7 @@ fn check_cond<'a, 'tcx, 'b>(\n             return if match_type(cx, obj_ty, &paths::BTREEMAP) {\n                 Some((\"BTreeMap\", map, key))\n             }\n-            else if match_type(cx, obj_ty, &paths::HASHMAP) {\n+            else if is_type_diagnostic_item(cx, obj_ty, sym!(hashmap_type)) {\n                 Some((\"HashMap\", map, key))\n             }\n             else {"}, {"sha": "5b092526ce4f2921cafb6bc22747cec1cf3c7dfb", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::paths;\n use crate::utils::{\n-    is_expn_of, last_path_segment, match_def_path, match_function_call, match_type, snippet, span_lint_and_then,\n-    walk_ptrs_ty,\n+    is_expn_of, is_type_diagnostic_item, last_path_segment, match_def_path, match_function_call, snippet,\n+    span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n@@ -91,7 +91,7 @@ fn on_argumentv1_new<'a, 'tcx>(\n         if pats.len() == 1;\n         then {\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pats[0]));\n-            if ty.kind != rustc_middle::ty::Str && !match_type(cx, ty, &paths::STRING) {\n+            if ty.kind != rustc_middle::ty::Str && !is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n                 return None;\n             }\n             if let ExprKind::Lit(ref lit) = format_args.kind {"}, {"sha": "ae92a96d16347646e0b5b7cd28c54cc132399d4a", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_type, paths, span_lint_and_help, SpanlessEq};\n+use crate::utils::{is_type_diagnostic_item, span_lint_and_help, SpanlessEq};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{self as visit, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, MatchSource};\n@@ -150,7 +150,7 @@ fn is_mutex_lock_call<'a>(cx: &LateContext<'a, '_>, expr: &'a Expr<'_>) -> Optio\n         if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n         if path.ident.to_string() == \"lock\";\n         let ty = cx.tables.expr_ty(&args[0]);\n-        if match_type(cx, ty, &paths::MUTEX);\n+        if is_type_diagnostic_item(cx, ty, sym!(mutex_type));\n         then {\n             Some(&args[0])\n         } else {"}, {"sha": "289628a2752af81ded7e8fdbe848b219888f0b0b", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -4,8 +4,8 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{\n-    get_trait_def_id, implements_trait, match_type, paths, return_ty, span_lint_and_help, trait_ref_of_method,\n-    walk_ptrs_ty,\n+    get_trait_def_id, implements_trait, is_type_diagnostic_item, paths, return_ty, span_lint_and_help,\n+    trait_ref_of_method, walk_ptrs_ty,\n };\n \n declare_clippy_lint! {\n@@ -107,7 +107,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n             if decl.inputs.len() == 1;\n \n             // Check if return type is String\n-            if match_type(cx, return_ty(cx, impl_item.hir_id), &paths::STRING);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(string_type));\n \n             // Filters instances of to_string which are required by a trait\n             if trait_ref_of_method(cx, impl_item.hir_id).is_none();"}, {"sha": "cb44eccae6847462dae702be42ffed3f23448920", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -816,7 +816,7 @@ fn is_slice_like<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, sym!(vec_type)) || match_type(cx, ty, &paths::VEC_DEQUE)\n+    is_slice || is_type_diagnostic_item(cx, ty, sym!(vec_type)) || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n }\n \n fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>, var: HirId) -> Option<FixedOffsetVar> {\n@@ -1569,7 +1569,7 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                 _ => arg,\n             };\n \n-            if match_type(cx, ty, &paths::HASHMAP) || match_type(cx, ty, &paths::BTREEMAP) {\n+            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,\n@@ -1971,9 +1971,9 @@ fn is_ref_iterable_type(cx: &LateContext<'_, '_>, e: &Expr<'_>) -> bool {\n     is_iterable_array(ty, cx) ||\n     is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n-    match_type(cx, ty, &paths::HASHMAP) ||\n-    match_type(cx, ty, &paths::HASHSET) ||\n-    match_type(cx, ty, &paths::VEC_DEQUE) ||\n+    is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) ||\n+    is_type_diagnostic_item(cx, ty, sym!(hashset_type)) ||\n+    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n     match_type(cx, ty, &paths::BINARY_HEAP) ||\n     match_type(cx, ty, &paths::BTREEMAP) ||\n     match_type(cx, ty, &paths::BTREESET)\n@@ -2480,9 +2480,9 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'a, '\n         then {\n             let ty = cx.tables.node_type(ty.hir_id);\n             if is_type_diagnostic_item(cx, ty, sym!(vec_type)) ||\n-                match_type(cx, ty, &paths::VEC_DEQUE) ||\n+                is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n-                match_type(cx, ty, &paths::HASHMAP) {\n+                is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_sugg("}, {"sha": "06138ab9783c34f19d8b1340a05d846c20237a3f", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,5 +1,7 @@\n use super::INEFFICIENT_TO_STRING;\n-use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty_depth};\n+use crate::utils::{\n+    is_type_diagnostic_item, match_def_path, paths, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty_depth,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -44,12 +46,17 @@ pub fn lint<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &hir::Expr<'_>, arg: &hir::E\n /// Returns whether `ty` specializes `ToString`.\n /// Currently, these are `str`, `String`, and `Cow<'_, str>`.\n fn specializes_tostring(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> bool {\n-    match ty.kind {\n-        ty::Str => true,\n-        ty::Adt(adt, substs) => {\n-            match_def_path(cx, adt.did, &paths::STRING)\n-                || (match_def_path(cx, adt.did, &paths::COW) && substs.type_at(1).is_str())\n-        },\n-        _ => false,\n+    if let ty::Str = ty.kind {\n+        return true;\n+    }\n+\n+    if is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n+        return true;\n+    }\n+\n+    if let ty::Adt(adt, substs) = ty.kind {\n+        match_def_path(cx, adt.did, &paths::COW) && substs.type_at(1).is_str()\n+    } else {\n+        false\n     }\n }"}, {"sha": "7f773c602eda8bb6b6794fd59596b3e4b513bccc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1756,7 +1756,7 @@ fn lint_expect_fun_call(\n                         && {\n                             let arg_type = cx.tables.expr_ty(&call_args[0]);\n                             let base_type = walk_ptrs_ty(arg_type);\n-                            base_type.kind == ty::Str || match_type(cx, base_type, &paths::STRING)\n+                            base_type.kind == ty::Str || is_type_diagnostic_item(cx, base_type, sym!(string_type))\n                         }\n                     {\n                         &call_args[0]\n@@ -1774,7 +1774,7 @@ fn lint_expect_fun_call(\n     // converted to string.\n     fn requires_to_string(cx: &LateContext<'_, '_>, arg: &hir::Expr<'_>) -> bool {\n         let arg_ty = cx.tables.expr_ty(arg);\n-        if match_type(cx, arg_ty, &paths::STRING) {\n+        if is_type_diagnostic_item(cx, arg_ty, sym!(string_type)) {\n             return false;\n         }\n         if let ty::Ref(_, ty, ..) = arg_ty.kind {\n@@ -2054,7 +2054,7 @@ fn lint_string_extend(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &[hi\n         let self_ty = walk_ptrs_ty(cx.tables.expr_ty(target));\n         let ref_str = if self_ty.kind == ty::Str {\n             \"\"\n-        } else if match_type(cx, self_ty, &paths::STRING) {\n+        } else if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n             \"&\"\n         } else {\n             return;\n@@ -2080,7 +2080,7 @@ fn lint_string_extend(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &[hi\n \n fn lint_extend(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(&args[0]));\n-    if match_type(cx, obj_ty, &paths::STRING) {\n+    if is_type_diagnostic_item(cx, obj_ty, sym!(string_type)) {\n         lint_string_extend(cx, expr, args);\n     }\n }\n@@ -2242,7 +2242,7 @@ fn lint_iter_nth<'a, 'tcx>(\n         \"slice\"\n     } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), sym!(vec_type)) {\n         \"Vec\"\n-    } else if match_type(cx, cx.tables.expr_ty(&iter_args[0]), &paths::VEC_DEQUE) {\n+    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n         \"VecDeque\"\n     } else {\n         let nth_args = nth_and_iter_args[0];\n@@ -2301,10 +2301,10 @@ fn lint_get_unwrap<'a, 'tcx>(\n     } else if is_type_diagnostic_item(cx, expr_ty, sym!(vec_type)) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n-    } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym!(vecdeque_type)) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"VecDeque\"\n-    } else if !is_mut && match_type(cx, expr_ty, &paths::HASHMAP) {\n+    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym!(hashmap_type)) {\n         needs_ref = true;\n         \"HashMap\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n@@ -2510,7 +2510,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<\n     }\n \n     // lint if caller of `.map().flatten()` is an Option\n-    if match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION) {\n+    if is_type_diagnostic_item(cx, cx.tables.expr_ty(&map_args[0]), sym!(option_type)) {\n         let msg = \"called `map(..).flatten()` on an `Option`. \\\n                     This is more succinctly expressed by calling `.and_then(..)`\";\n         let self_snippet = snippet(cx, map_args[0].span, \"..\");\n@@ -2678,7 +2678,7 @@ fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg\n     const NO_OP_MSG: &str = \"using `Option.and_then(Some)`, which is a no-op\";\n \n     let ty = cx.tables.expr_ty(&args[0]);\n-    if !match_type(cx, ty, &paths::OPTION) {\n+    if !is_type_diagnostic_item(cx, ty, sym!(option_type)) {\n         return;\n     }\n \n@@ -3282,7 +3282,7 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n     let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n \n     let option_ty = cx.tables.expr_ty(&as_ref_args[0]);\n-    if !match_type(cx, option_ty, &paths::OPTION) {\n+    if !is_type_diagnostic_item(cx, option_ty, sym!(option_type)) {\n         return;\n     }\n "}, {"sha": "4e1a8be4892e6b841a9c95a7774422dc76daf15a", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{match_type, paths, span_lint};\n+use crate::utils::{is_type_diagnostic_item, span_lint};\n use rustc_ast::ast;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Mutex {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         let ty = cx.tables.expr_ty(expr);\n         if let ty::Adt(_, subst) = ty.kind {\n-            if match_type(cx, ty, &paths::MUTEX) {\n+            if is_type_diagnostic_item(cx, ty, sym!(mutex_type)) {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!("}, {"sha": "653ab44e129b403c02a079fe8c8a64f7450a8e86", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::ptr::get_spans;\n use crate::utils::{\n-    get_trait_def_id, implements_trait, is_copy, is_self, is_type_diagnostic_item, match_type, multispan_sugg, paths,\n-    snippet, snippet_opt, span_lint_and_then,\n+    get_trait_def_id, implements_trait, is_copy, is_self, is_type_diagnostic_item, multispan_sugg, paths, snippet,\n+    snippet_opt, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -254,7 +254,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             }\n                         }\n \n-                        if match_type(cx, ty, &paths::STRING) {\n+                        if is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                                 diag.span_suggestion("}, {"sha": "2cdf96714195abbbec79deccf117807c16714113", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -197,7 +197,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_\n                         },\n                     );\n                 }\n-            } else if match_type(cx, ty, &paths::STRING) {\n+            } else if is_type_diagnostic_item(cx, ty, sym!(string_type)) {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                     span_lint_and_then(\n                         cx,"}, {"sha": "d5cace0c647461b4b1440f99b969366e51b464dc", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    fn_has_unsatisfiable_preds, has_drop, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_hir,\n-    span_lint_hir_and_then, walk_ptrs_ty_depth,\n+    fn_has_unsatisfiable_preds, has_drop, is_copy, is_type_diagnostic_item, match_def_path, match_type, paths,\n+    snippet_opt, span_lint_hir, span_lint_hir_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n@@ -113,7 +113,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n \n             let from_borrow = match_def_path(cx, fn_def_id, &paths::CLONE_TRAIT_METHOD)\n                 || match_def_path(cx, fn_def_id, &paths::TO_OWNED_METHOD)\n-                || (match_def_path(cx, fn_def_id, &paths::TO_STRING_METHOD) && match_type(cx, arg_ty, &paths::STRING));\n+                || (match_def_path(cx, fn_def_id, &paths::TO_STRING_METHOD)\n+                    && is_type_diagnostic_item(cx, arg_ty, sym!(string_type)));\n \n             let from_deref = !from_borrow\n                 && (match_def_path(cx, fn_def_id, &paths::PATH_TO_PATH_BUF)"}, {"sha": "2c51271e312dee312c7dac5a126390682b362061", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -8,7 +8,7 @@ use rustc_span::source_map::Spanned;\n use if_chain::if_chain;\n \n use crate::utils::SpanlessEq;\n-use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_parent_expr, is_allowed, is_type_diagnostic_item, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for string appends of the form `x = x + y` (without\n@@ -126,7 +126,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n }\n \n fn is_string(cx: &LateContext<'_, '_>, e: &Expr<'_>) -> bool {\n-    match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(e)), &paths::STRING)\n+    is_type_diagnostic_item(cx, walk_ptrs_ty(cx.tables.expr_ty(e)), sym!(string_type))\n }\n \n fn is_add(cx: &LateContext<'_, '_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {"}, {"sha": "c52e6a643f2a28e0348c764a4836d545db10a082", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    differing_macro_contexts, is_type_diagnostic_item, match_type, paths, snippet_with_applicability,\n-    span_lint_and_then, walk_ptrs_ty, SpanlessEq,\n+    differing_macro_contexts, is_type_diagnostic_item, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty,\n+    SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -199,7 +199,7 @@ fn check_for_slice<'a>(cx: &LateContext<'_, '_>, lhs1: &'a Expr<'_>, lhs2: &'a E\n                 if matches!(ty.kind, ty::Slice(_))\n                     || matches!(ty.kind, ty::Array(_, _))\n                     || is_type_diagnostic_item(cx, ty, sym!(vec_type))\n-                    || match_type(cx, ty, &paths::VEC_DEQUE)\n+                    || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n                 {\n                     return Slice::Swappable(lhs1, idx1, idx2);\n                 }"}, {"sha": "6d49f50d550e858d0a0f87bb92fa3e275f093e95", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -29,10 +29,10 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, last_path_segment, match_def_path,\n-    match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral, qpath_res, same_tys, sext, snippet,\n-    snippet_opt, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then, unsext,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, is_type_diagnostic_item,\n+    last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n+    qpath_res, same_tys, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -2352,14 +2352,14 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n \n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n \n-            if match_path(path, &paths::HASHMAP) && params_len == 2 {\n+            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) && params_len == 2 {\n                 Some(ImplicitHasherType::HashMap(\n                     hir_ty.span,\n                     ty,\n                     snippet(cx, params[0].span, \"K\"),\n                     snippet(cx, params[1].span, \"V\"),\n                 ))\n-            } else if match_path(path, &paths::HASHSET) && params_len == 1 {\n+            } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) && params_len == 1 {\n                 Some(ImplicitHasherType::HashSet(\n                     hir_ty.span,\n                     ty,\n@@ -2460,7 +2460,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n         if_chain! {\n             if let ExprKind::Call(ref fun, ref args) = e.kind;\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref method)) = fun.kind;\n-            if let TyKind::Path(QPath::Resolved(None, ref ty_path)) = ty.kind;\n+            if let TyKind::Path(QPath::Resolved(None, ty_path)) = ty.kind;\n             then {\n                 if !same_tys(self.cx, self.target.ty(), self.body.expr_ty(e)) {\n                     return;"}, {"sha": "ca2c4ade15565bc0d45c1e3c607fb0c883a4b788", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c12f2b2862461720bc9c1272dd9f32ba558ff2e/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=5c12f2b2862461720bc9c1272dd9f32ba558ff2e", "patch": "@@ -61,7 +61,6 @@ pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n-pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n@@ -120,7 +119,6 @@ pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n-pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];"}]}