{"sha": "132099950fc1d157b9af0130cf3f1eb20a263541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjA5OTk1MGZjMWQxNTdiOWFmMDEzMGNmM2YxZWIyMGEyNjM1NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-08T01:46:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-08T01:46:37Z"}, "message": "auto merge of #9747 : dim-an/rust/fix-match, r=alexcrichton\n\nWhen `specialize`ing struct-like enum patterns, compare struct fields to\r\npattern fields, not pattern fields to pattern fields.\r\n\r\nCloses #8351.", "tree": {"sha": "e5db9e735bd8e28addeb2dff3e9431c113c1ce3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5db9e735bd8e28addeb2dff3e9431c113c1ce3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/132099950fc1d157b9af0130cf3f1eb20a263541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/132099950fc1d157b9af0130cf3f1eb20a263541", "html_url": "https://github.com/rust-lang/rust/commit/132099950fc1d157b9af0130cf3f1eb20a263541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/132099950fc1d157b9af0130cf3f1eb20a263541/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17dc4a946838a7f0a1d8eb752536243e322e8de", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17dc4a946838a7f0a1d8eb752536243e322e8de", "html_url": "https://github.com/rust-lang/rust/commit/b17dc4a946838a7f0a1d8eb752536243e322e8de"}, {"sha": "da7f41104dda48ac3a03cfa039cb3e9570f91a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7f41104dda48ac3a03cfa039cb3e9570f91a35", "html_url": "https://github.com/rust-lang/rust/commit/da7f41104dda48ac3a03cfa039cb3e9570f91a35"}], "stats": {"total": 103, "additions": 76, "deletions": 27}, "files": [{"sha": "663108ee9b8e8dd7b0b87be6c6ceb619c666f77b", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/132099950fc1d157b9af0130cf3f1eb20a263541/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132099950fc1d157b9af0130cf3f1eb20a263541/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=132099950fc1d157b9af0130cf3f1eb20a263541", "patch": "@@ -28,7 +28,7 @@ use syntax::codemap::{Span, dummy_sp, Spanned};\n use syntax::visit;\n use syntax::visit::{Visitor,fn_kind};\n \n-pub struct MatchCheckCtxt {\n+struct MatchCheckCtxt {\n     tcx: ty::ctxt,\n     method_map: method_map,\n     moves_map: moves::MovesMap\n@@ -64,7 +64,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     tcx.sess.abort_if_errors();\n }\n \n-pub fn check_expr(v: &mut CheckMatchVisitor,\n+fn check_expr(v: &mut CheckMatchVisitor,\n                   cx: @MatchCheckCtxt,\n                   ex: @Expr,\n                   s: ()) {\n@@ -115,7 +115,7 @@ pub fn check_expr(v: &mut CheckMatchVisitor,\n }\n \n // Check for unreachable patterns\n-pub fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n+fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n     let mut seen = ~[];\n     for arm in arms.iter() {\n         for pat in arm.pats.iter() {\n@@ -154,14 +154,14 @@ pub fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) {\n     }\n }\n \n-pub fn raw_pat(p: @Pat) -> @Pat {\n+fn raw_pat(p: @Pat) -> @Pat {\n     match p.node {\n       PatIdent(_, _, Some(s)) => { raw_pat(s) }\n       _ => { p }\n     }\n }\n \n-pub fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n+fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n     assert!((!pats.is_empty()));\n     let ext = match is_useful(cx, &pats.map(|p| ~[*p]), [wild()]) {\n         not_useful => {\n@@ -209,12 +209,12 @@ pub fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: ~[@Pat]) {\n     cx.tcx.sess.span_err(sp, msg);\n }\n \n-pub type matrix = ~[~[@Pat]];\n+type matrix = ~[~[@Pat]];\n \n-pub enum useful { useful(ty::t, ctor), useful_, not_useful }\n+enum useful { useful(ty::t, ctor), useful_, not_useful }\n \n #[deriving(Eq)]\n-pub enum ctor {\n+enum ctor {\n     single,\n     variant(DefId),\n     val(const_val),\n@@ -235,7 +235,7 @@ pub enum ctor {\n \n // Note: is_useful doesn't work on empty types, as the paper notes.\n // So it assumes that v is non-empty.\n-pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n+fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n     if m.len() == 0u { return useful_; }\n     if m[0].len() == 0u { return not_useful; }\n     let real_pat = match m.iter().find(|r| r[0].id != 0) {\n@@ -314,7 +314,7 @@ pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n     }\n }\n \n-pub fn is_useful_specialized(cx: &MatchCheckCtxt,\n+fn is_useful_specialized(cx: &MatchCheckCtxt,\n                              m: &matrix,\n                              v: &[@Pat],\n                              ctor: ctor,\n@@ -330,7 +330,7 @@ pub fn is_useful_specialized(cx: &MatchCheckCtxt,\n     }\n }\n \n-pub fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n+fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n     let pat = raw_pat(p);\n     match pat.node {\n       PatWild => { None }\n@@ -366,7 +366,7 @@ pub fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n     }\n }\n \n-pub fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n+fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n     let pat = raw_pat(p);\n     match pat.node {\n       PatWild => { true }\n@@ -380,7 +380,7 @@ pub fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool {\n     }\n }\n \n-pub fn missing_ctor(cx: &MatchCheckCtxt,\n+fn missing_ctor(cx: &MatchCheckCtxt,\n                     m: &matrix,\n                     left_ty: ty::t)\n                  -> Option<ctor> {\n@@ -505,7 +505,7 @@ pub fn missing_ctor(cx: &MatchCheckCtxt,\n     }\n }\n \n-pub fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n+fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n     match ty::get(ty).sty {\n       ty::ty_tup(ref fs) => fs.len(),\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) => 1u,\n@@ -528,11 +528,11 @@ pub fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n     }\n }\n \n-pub fn wild() -> @Pat {\n+fn wild() -> @Pat {\n     @Pat {id: 0, node: PatWild, span: dummy_sp()}\n }\n \n-pub fn specialize(cx: &MatchCheckCtxt,\n+fn specialize(cx: &MatchCheckCtxt,\n                   r: &[@Pat],\n                   ctor_id: &ctor,\n                   arity: uint,\n@@ -662,15 +662,14 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                     _ => None\n                 }\n             }\n-            PatStruct(_, ref flds, _) => {\n+            PatStruct(_, ref pattern_fields, _) => {\n                 // Is this a struct or an enum variant?\n                 match cx.tcx.def_map.get_copy(&pat_id) {\n                     DefVariant(_, variant_id, _) => {\n                         if variant(variant_id) == *ctor_id {\n-                            // FIXME #4731: Is this right? --pcw\n-                            let args = flds.map(|ty_field| {\n-                                match flds.iter().find(|f|\n-                                                f.ident == ty_field.ident) {\n+                            let struct_fields = ty::lookup_struct_fields(cx.tcx, variant_id);\n+                            let args = struct_fields.map(|sf| {\n+                                match pattern_fields.iter().find(|f| f.ident.name == sf.name) {\n                                     Some(f) => f.pat,\n                                     _ => wild()\n                                 }\n@@ -700,7 +699,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                             }\n                         }\n                         let args = class_fields.iter().map(|class_field| {\n-                            match flds.iter().find(|f|\n+                            match pattern_fields.iter().find(|f|\n                                             f.ident.name == class_field.name) {\n                                 Some(f) => f.pat,\n                                 _ => wild()\n@@ -798,12 +797,12 @@ pub fn specialize(cx: &MatchCheckCtxt,\n     }\n }\n \n-pub fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<~[@Pat]> {\n+fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<~[@Pat]> {\n     if is_wild(cx, r[0]) { Some(r.tail().to_owned()) }\n     else { None }\n }\n \n-pub fn check_local(v: &mut CheckMatchVisitor,\n+fn check_local(v: &mut CheckMatchVisitor,\n                    cx: &MatchCheckCtxt,\n                    loc: @Local,\n                    s: ()) {\n@@ -817,7 +816,7 @@ pub fn check_local(v: &mut CheckMatchVisitor,\n     check_legality_of_move_bindings(cx, false, [ loc.pat ]);\n }\n \n-pub fn check_fn(v: &mut CheckMatchVisitor,\n+fn check_fn(v: &mut CheckMatchVisitor,\n                 cx: &MatchCheckCtxt,\n                 kind: &visit::fn_kind,\n                 decl: &fn_decl,\n@@ -834,7 +833,7 @@ pub fn check_fn(v: &mut CheckMatchVisitor,\n     }\n }\n \n-pub fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n+fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n     match cx.tcx.def_map.find(&pat.id) {\n       Some(&DefVariant(enum_id, _, _)) => {\n         if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n@@ -872,7 +871,7 @@ pub fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n \n // Legality of move bindings checking\n \n-pub fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n+fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                                        has_guard: bool,\n                                        pats: &[@Pat]) {\n     let tcx = cx.tcx;"}, {"sha": "44e100576e22f5567b3408d1f8183d332cd144de", "filename": "src/test/run-pass/issue-8351-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/132099950fc1d157b9af0130cf3f1eb20a263541/src%2Ftest%2Frun-pass%2Fissue-8351-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132099950fc1d157b9af0130cf3f1eb20a263541/src%2Ftest%2Frun-pass%2Fissue-8351-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8351-1.rs?ref=132099950fc1d157b9af0130cf3f1eb20a263541", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(struct_variant)];\n+\n+enum E {\n+    Foo{f: int},\n+    Bar,\n+}\n+\n+pub fn main() {\n+    let e = Foo{f: 0};\n+    match e {\n+        Foo{f: 1} => fail2!(),\n+        Foo{_} => (),\n+        _ => fail2!(),\n+    }\n+}"}, {"sha": "4c31921895337da3ef83b6311daa3a209e47cb43", "filename": "src/test/run-pass/issue-8351-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/132099950fc1d157b9af0130cf3f1eb20a263541/src%2Ftest%2Frun-pass%2Fissue-8351-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132099950fc1d157b9af0130cf3f1eb20a263541/src%2Ftest%2Frun-pass%2Fissue-8351-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8351-2.rs?ref=132099950fc1d157b9af0130cf3f1eb20a263541", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(struct_variant)];\n+\n+enum E {\n+    Foo{f: int, b: bool},\n+    Bar,\n+}\n+\n+pub fn main() {\n+    let e = Foo{f: 0, b: false};\n+    match e {\n+        Foo{f: 1, b: true} => fail2!(),\n+        Foo{b: false, f: 0} => (),\n+        _ => fail2!(),\n+    }\n+}"}]}