{"sha": "8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NzczNDNmOWViMTAyNGJmNzdmNTllMjgxYmE5ZjRjZDFlZTBhYWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-11T23:33:08Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-14T01:20:36Z"}, "message": "Fix fallout in macro_crate/quote tests.", "tree": {"sha": "2f3118430b415a311624aae721fa33d20bf398d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3118430b415a311624aae721fa33d20bf398d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa", "html_url": "https://github.com/rust-lang/rust/commit/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2837b9189d8ae85142d78679a217ca5b8e5767", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2837b9189d8ae85142d78679a217ca5b8e5767", "html_url": "https://github.com/rust-lang/rust/commit/5b2837b9189d8ae85142d78679a217ca5b8e5767"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "dd1f9c3404f029831e90cb11c07db2e12a4238b9", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa", "patch": "@@ -20,10 +20,9 @@ use syntax::codemap::Span;\n use syntax::ext::base::*;\n use syntax::parse::token;\n use syntax::parse;\n+use syntax::ptr::P;\n use rustc::plugin::Registry;\n \n-use std::gc::{Gc, GC};\n-\n #[macro_export]\n macro_rules! exported_macro (() => (2i))\n \n@@ -57,12 +56,12 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n     MacExpr::new(quote_expr!(&mut *cx, $expr))\n }\n \n-fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: Gc<MetaItem>, it: Gc<Item>)\n-                   -> Gc<Item> {\n-    box(GC) Item {\n+fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: &MetaItem, it: P<Item>)\n+                   -> P<Item> {\n+    P(Item {\n         attrs: it.attrs.clone(),\n         ..(*quote_item!(cx, enum Foo { Bar, Baz }).unwrap()).clone()\n-    }\n+    })\n }\n \n fn expand_forged_ident(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree]) -> Box<MacResult+'static> {"}, {"sha": "b7c4c14638226e23a56fc2a73987e0ce3655ff68", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=8577343f9eb1024bf77f59e281ba9f4cd1ee0aaa", "patch": "@@ -16,24 +16,24 @@\n extern crate syntax;\n \n use syntax::ext::base::ExtCtxt;\n-use std::gc::Gc;\n+use syntax::ptr::P;\n \n fn syntax_extension(cx: &ExtCtxt) {\n     let e_toks : Vec<syntax::ast::TokenTree> = quote_tokens!(cx, 1 + 2);\n     let p_toks : Vec<syntax::ast::TokenTree> = quote_tokens!(cx, (x, 1 .. 4, *));\n \n-    let a: Gc<syntax::ast::Expr> = quote_expr!(cx, 1 + 2);\n-    let _b: Option<Gc<syntax::ast::Item>> = quote_item!(cx, static foo : int = $e_toks; );\n-    let _c: Gc<syntax::ast::Pat> = quote_pat!(cx, (x, 1 .. 4, *) );\n-    let _d: Gc<syntax::ast::Stmt> = quote_stmt!(cx, let x = $a; );\n+    let a: P<syntax::ast::Expr> = quote_expr!(cx, 1 + 2);\n+    let _b: Option<P<syntax::ast::Item>> = quote_item!(cx, static foo : int = $e_toks; );\n+    let _c: P<syntax::ast::Pat> = quote_pat!(cx, (x, 1 .. 4, *) );\n+    let _d: P<syntax::ast::Stmt> = quote_stmt!(cx, let x = $a; );\n     let _d: syntax::ast::Arm = quote_arm!(cx, (ref x, ref y) = (x, y) );\n-    let _e: Gc<syntax::ast::Expr> = quote_expr!(cx, match foo { $p_toks => 10 } );\n+    let _e: P<syntax::ast::Expr> = quote_expr!(cx, match foo { $p_toks => 10 } );\n \n-    let _f: Gc<syntax::ast::Expr> = quote_expr!(cx, ());\n-    let _g: Gc<syntax::ast::Expr> = quote_expr!(cx, true);\n-    let _h: Gc<syntax::ast::Expr> = quote_expr!(cx, 'a');\n+    let _f: P<syntax::ast::Expr> = quote_expr!(cx, ());\n+    let _g: P<syntax::ast::Expr> = quote_expr!(cx, true);\n+    let _h: P<syntax::ast::Expr> = quote_expr!(cx, 'a');\n \n-    let i: Option<Gc<syntax::ast::Item>> = quote_item!(cx, #[deriving(Eq)] struct Foo; );\n+    let i: Option<P<syntax::ast::Item>> = quote_item!(cx, #[deriving(Eq)] struct Foo; );\n     assert!(i.is_some());\n }\n "}]}