{"sha": "cccce09dda14a3a76a61fc3abade19479a927534", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2NlMDlkZGExNGEzYTc2YTYxZmMzYWJhZGUxOTQ3OWE5Mjc1MzQ=", "commit": {"author": {"name": "John Erickson", "email": "john.t.erickson@gmail.com", "date": "2019-08-09T14:36:39Z"}, "committer": {"name": "John Erickson", "email": "john.t.erickson@gmail.com", "date": "2019-08-31T14:38:13Z"}, "message": "Add in generic type to description of BufReader and BufWriter", "tree": {"sha": "8d2ff86adad390b4c2a4e76deaecb593b32ccc1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2ff86adad390b4c2a4e76deaecb593b32ccc1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccce09dda14a3a76a61fc3abade19479a927534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccce09dda14a3a76a61fc3abade19479a927534", "html_url": "https://github.com/rust-lang/rust/commit/cccce09dda14a3a76a61fc3abade19479a927534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccce09dda14a3a76a61fc3abade19479a927534/comments", "author": {"login": "johnterickson", "id": 10488772, "node_id": "MDQ6VXNlcjEwNDg4Nzcy", "avatar_url": "https://avatars.githubusercontent.com/u/10488772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnterickson", "html_url": "https://github.com/johnterickson", "followers_url": "https://api.github.com/users/johnterickson/followers", "following_url": "https://api.github.com/users/johnterickson/following{/other_user}", "gists_url": "https://api.github.com/users/johnterickson/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnterickson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnterickson/subscriptions", "organizations_url": "https://api.github.com/users/johnterickson/orgs", "repos_url": "https://api.github.com/users/johnterickson/repos", "events_url": "https://api.github.com/users/johnterickson/events{/privacy}", "received_events_url": "https://api.github.com/users/johnterickson/received_events", "type": "User", "site_admin": true}, "committer": {"login": "johnterickson", "id": 10488772, "node_id": "MDQ6VXNlcjEwNDg4Nzcy", "avatar_url": "https://avatars.githubusercontent.com/u/10488772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnterickson", "html_url": "https://github.com/johnterickson", "followers_url": "https://api.github.com/users/johnterickson/followers", "following_url": "https://api.github.com/users/johnterickson/following{/other_user}", "gists_url": "https://api.github.com/users/johnterickson/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnterickson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnterickson/subscriptions", "organizations_url": "https://api.github.com/users/johnterickson/orgs", "repos_url": "https://api.github.com/users/johnterickson/repos", "events_url": "https://api.github.com/users/johnterickson/events{/privacy}", "received_events_url": "https://api.github.com/users/johnterickson/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "c8e474871ab5c13b0bdd92caecfb0bbc99f96541", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e474871ab5c13b0bdd92caecfb0bbc99f96541", "html_url": "https://github.com/rust-lang/rust/commit/c8e474871ab5c13b0bdd92caecfb0bbc99f96541"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "2dc7d6fe6d2acf319f763eab6a50ca22ccc9886b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cccce09dda14a3a76a61fc3abade19479a927534/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccce09dda14a3a76a61fc3abade19479a927534/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=cccce09dda14a3a76a61fc3abade19479a927534", "patch": "@@ -9,21 +9,21 @@ use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom,\n         IoSliceMut};\n use crate::memchr;\n \n-/// The `BufReader` struct adds buffering to any reader.\n+/// The `BufReader<R>` struct adds buffering to any reader.\n ///\n /// It can be excessively inefficient to work directly with a [`Read`] instance.\n /// For example, every call to [`read`][`TcpStream::read`] on [`TcpStream`]\n-/// results in a system call. A `BufReader` performs large, infrequent reads on\n+/// results in a system call. A `BufReader<R>` performs large, infrequent reads on\n /// the underlying [`Read`] and maintains an in-memory buffer of the results.\n ///\n-/// `BufReader` can improve the speed of programs that make *small* and\n+/// `BufReader<R>` can improve the speed of programs that make *small* and\n /// *repeated* read calls to the same file or network socket. It does not\n /// help when reading very large amounts at once, or reading just one or a few\n /// times. It also provides no advantage when reading from a source that is\n /// already in memory, like a `Vec<u8>`.\n ///\n-/// When the `BufReader` is dropped, the contents of its buffer will be\n-/// discarded. Creating multiple instances of a `BufReader` on the same\n+/// When the `BufReader<R>` is dropped, the contents of its buffer will be\n+/// discarded. Creating multiple instances of a `BufReader<R>` on the same\n /// stream can cause data loss.\n ///\n /// [`Read`]: ../../std/io/trait.Read.html\n@@ -56,7 +56,7 @@ pub struct BufReader<R> {\n }\n \n impl<R: Read> BufReader<R> {\n-    /// Creates a new `BufReader` with a default buffer capacity. The default is currently 8 KB,\n+    /// Creates a new `BufReader<R>` with a default buffer capacity. The default is currently 8 KB,\n     /// but may change in the future.\n     ///\n     /// # Examples\n@@ -76,7 +76,7 @@ impl<R: Read> BufReader<R> {\n         BufReader::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufReader` with the specified buffer capacity.\n+    /// Creates a new `BufReader<R>` with the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n@@ -177,7 +177,7 @@ impl<R> BufReader<R> {\n         &self.buf[self.pos..self.cap]\n     }\n \n-    /// Unwraps this `BufReader`, returning the underlying reader.\n+    /// Unwraps this `BufReader<R>`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost.\n     ///\n@@ -304,7 +304,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// Seek to an offset, in bytes, in the underlying reader.\n     ///\n     /// The position used for seeking with `SeekFrom::Current(_)` is the\n-    /// position the underlying reader would be at if the `BufReader` had no\n+    /// position the underlying reader would be at if the `BufReader<R>` had no\n     /// internal buffer.\n     ///\n     /// Seeking always discards the internal buffer, even if the seek position\n@@ -355,16 +355,16 @@ impl<R: Seek> Seek for BufReader<R> {\n /// It can be excessively inefficient to work directly with something that\n /// implements [`Write`]. For example, every call to\n /// [`write`][`TcpStream::write`] on [`TcpStream`] results in a system call. A\n-/// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n+/// `BufWriter<W>` keeps an in-memory buffer of data and writes it to an underlying\n /// writer in large, infrequent batches.\n ///\n-/// `BufWriter` can improve the speed of programs that make *small* and\n+/// `BufWriter<W>` can improve the speed of programs that make *small* and\n /// *repeated* write calls to the same file or network socket. It does not\n /// help when writing very large amounts at once, or writing just one or a few\n /// times. It also provides no advantage when writing to a destination that is\n /// in memory, like a `Vec<u8>`.\n ///\n-/// It is critical to call [`flush`] before `BufWriter` is dropped. Though\n+/// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n /// dropping will attempt to flush the the contents of the buffer, any errors\n /// that happen in the process will be ignored. Calling ['flush'] ensures that\n /// the buffer is empty and all errors have been observed.\n@@ -386,7 +386,7 @@ impl<R: Seek> Seek for BufReader<R> {\n ///\n /// Because we're not buffering, we write each one in turn, incurring the\n /// overhead of a system call per byte written. We can fix this with a\n-/// `BufWriter`:\n+/// `BufWriter<W>`:\n ///\n /// ```no_run\n /// use std::io::prelude::*;\n@@ -401,7 +401,7 @@ impl<R: Seek> Seek for BufReader<R> {\n /// stream.flush().unwrap();\n /// ```\n ///\n-/// By wrapping the stream with a `BufWriter`, these ten writes are all grouped\n+/// By wrapping the stream with a `BufWriter<W>`, these ten writes are all grouped\n /// together by the buffer and will all be written out in one system call when\n /// the `stream` is flushed.\n ///\n@@ -448,7 +448,7 @@ pub struct BufWriter<W: Write> {\n pub struct IntoInnerError<W>(W, Error);\n \n impl<W: Write> BufWriter<W> {\n-    /// Creates a new `BufWriter` with a default buffer capacity. The default is currently 8 KB,\n+    /// Creates a new `BufWriter<W>` with a default buffer capacity. The default is currently 8 KB,\n     /// but may change in the future.\n     ///\n     /// # Examples\n@@ -464,7 +464,7 @@ impl<W: Write> BufWriter<W> {\n         BufWriter::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufWriter` with the specified buffer capacity.\n+    /// Creates a new `BufWriter<W>` with the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n@@ -565,7 +565,7 @@ impl<W: Write> BufWriter<W> {\n         &self.buf\n     }\n \n-    /// Unwraps this `BufWriter`, returning the underlying writer.\n+    /// Unwraps this `BufWriter<W>`, returning the underlying writer.\n     ///\n     /// The buffer is written out before returning the writer.\n     ///"}]}