{"sha": "f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyY2JiYjkzYTJlMDAwOGYyOTA3ODk0ZWNkOWZkOWRlM2IzOTU5NWI=", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-25T13:48:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-25T13:48:51Z"}, "message": "Rollup merge of #88218 - Aaron1011:missing-method-dyn, r=nagisa\n\nRemove `Session.trait_methods_not_found`\n\nInstead, avoid registering the problematic well-formed obligation\nto begin with. This removes global untracked mutable state,\nand avoids potential issues with incremental compilation.", "tree": {"sha": "85cbcd9c23d862ee00c5600d41fcce3bd8d5f750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85cbcd9c23d862ee00c5600d41fcce3bd8d5f750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJkpECRBK7hj4Ov3rIwAAwLIIAHuPFELxPbz+AcccUhQJ8q84\niN9jSBiKT+Q8TFIBkXkJFAvA0zClJCllp/uD7YtmAlJiCIJnfJVJMERN85OWYoZ3\n95KvOyjMk3pBFMivZTbuZy0cp9XauyRbS8JzxcfwKXt5tblGsUWIwxZvcp4EZKa1\nHljFeOwhHsmmQevgybjEDxUYaQni0D7u3N8GbGz2IP99yBg0iB7y18ieMVH2e8EC\no/ul1Sb68mYCWXgQsE2j6E65jqE7IJZJOcE5dyoX5RsMCb0ZOWFYD6cm4tHTqF70\nLbpwMbZsdk9/xNn+cpl24qfaLMa5zWbdu5lpjoRfKHAIWYLpUbeGJxQqpjZ+mO0=\n=BkFy\n-----END PGP SIGNATURE-----\n", "payload": "tree 85cbcd9c23d862ee00c5600d41fcce3bd8d5f750\nparent 891fa3c5556c964fd4ebe1dab39d87917f1c9c4d\nparent 41f9f38d6e19c669a14432b9ec56f26425c6c9e2\nauthor L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> 1629899331 +0200\ncommitter GitHub <noreply@github.com> 1629899331 +0200\n\nRollup merge of #88218 - Aaron1011:missing-method-dyn, r=nagisa\n\nRemove `Session.trait_methods_not_found`\n\nInstead, avoid registering the problematic well-formed obligation\nto begin with. This removes global untracked mutable state,\nand avoids potential issues with incremental compilation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "html_url": "https://github.com/rust-lang/rust/commit/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891fa3c5556c964fd4ebe1dab39d87917f1c9c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/891fa3c5556c964fd4ebe1dab39d87917f1c9c4d", "html_url": "https://github.com/rust-lang/rust/commit/891fa3c5556c964fd4ebe1dab39d87917f1c9c4d"}, {"sha": "41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f9f38d6e19c669a14432b9ec56f26425c6c9e2", "html_url": "https://github.com/rust-lang/rust/commit/41f9f38d6e19c669a14432b9ec56f26425c6c9e2"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "d0bd508bc257f2dfd4fd63b71bdd0e65c669a7f2", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "patch": "@@ -104,11 +104,5 @@ pub fn report_object_safety_error(\n          to be resolvable dynamically; for more information visit \\\n          <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n     );\n-\n-    if tcx.sess.trait_methods_not_found.borrow().iter().any(|full_span| full_span.contains(span)) {\n-        // Avoid emitting error caused by non-existing method (#58734)\n-        err.cancel();\n-    }\n-\n     err\n }"}, {"sha": "20e94e32be61f396cd640cda0d8b80177e922922", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "patch": "@@ -189,9 +189,6 @@ pub struct Session {\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n-    /// `Span`s of trait methods that weren't found to avoid emitting object safety errors\n-    pub trait_methods_not_found: Lock<FxHashSet<Span>>,\n-\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: Lock<FxHashMap<Span, Span>>,\n@@ -1326,7 +1323,6 @@ pub fn build_session(\n         print_fuel,\n         jobserver: jobserver::client(),\n         driver_lint_caps,\n-        trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),"}, {"sha": "0cf30fecf73815415194abbe2da8d1976c34e8ac", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "patch": "@@ -858,13 +858,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     path.segments,\n                 );\n             }\n-            QPath::TypeRelative(ref qself, ref segment) => (self.to_ty(qself), qself, segment),\n+            QPath::TypeRelative(ref qself, ref segment) => {\n+                // Don't use `self.to_ty`, since this will register a WF obligation.\n+                // If we're trying to call a non-existent method on a trait\n+                // (e.g. `MyTrait::missing_method`), then resolution will\n+                // give us a `QPath::TypeRelative` with a trait object as\n+                // `qself`. In that case, we want to avoid registering a WF obligation\n+                // for `dyn MyTrait`, since we don't actually need the trait\n+                // to be object-safe.\n+                // We manually call `register_wf_obligation` in the success path\n+                // below.\n+                (<dyn AstConv<'_>>::ast_ty_to_ty(self, qself), qself, segment)\n+            }\n             QPath::LangItem(..) => {\n                 bug!(\"`resolve_ty_and_res_fully_qualified_call` called on `LangItem`\")\n             }\n         };\n         if let Some(&cached_result) = self.typeck_results.borrow().type_dependent_defs().get(hir_id)\n         {\n+            self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n             let def = cached_result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id));\n@@ -878,6 +890,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n                     _ => Err(ErrorReported),\n                 };\n+\n+                // If we have a path like `MyTrait::missing_method`, then don't register\n+                // a WF obligation for `dyn MyTrait` when method lookup fails. Otherwise,\n+                // register a WF obligation so that we can detect any additional\n+                // errors in the self type.\n+                if !(matches!(error, method::MethodError::NoMatch(_)) && ty.is_trait()) {\n+                    self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n+                }\n                 if item_name.name != kw::Empty {\n                     if let Some(mut e) = self.report_method_error(\n                         span,\n@@ -895,6 +915,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if result.is_ok() {\n             self.maybe_lint_bare_trait(qpath, hir_id);\n+            self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n         }\n \n         // Write back the new resolution."}, {"sha": "afe274a2a796e11e8b2c39d911eac04dab0b2fba", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cbbb93a2e0008f2907894ecd9fd9de3b39595b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f2cbbb93a2e0008f2907894ecd9fd9de3b39595b", "patch": "@@ -70,15 +70,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn report_method_error(\n         &self,\n-        span: Span,\n+        mut span: Span,\n         rcvr_ty: Ty<'tcx>,\n         item_name: Ident,\n         source: SelfSource<'tcx>,\n         error: MethodError<'tcx>,\n         args: Option<&'tcx [hir::Expr<'tcx>]>,\n     ) -> Option<DiagnosticBuilder<'_>> {\n-        let orig_span = span;\n-        let mut span = span;\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return None;\n@@ -545,7 +543,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     } else {\n                         err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n                     }\n-                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(orig_span);\n                 };\n \n                 // If the method name is the name of a field with a function or closure type,"}]}