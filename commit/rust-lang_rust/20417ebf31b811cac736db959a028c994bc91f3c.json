{"sha": "20417ebf31b811cac736db959a028c994bc91f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNDE3ZWJmMzFiODExY2FjNzM2ZGI5NTlhMDI4Yzk5NGJjOTFmM2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T22:25:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T22:47:52Z"}, "message": "core: Move unsafe conversions to str::unsafe", "tree": {"sha": "13d2bbe76a1fb4ad8b9b0575d5eb8fbbb0ef8f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d2bbe76a1fb4ad8b9b0575d5eb8fbbb0ef8f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20417ebf31b811cac736db959a028c994bc91f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20417ebf31b811cac736db959a028c994bc91f3c", "html_url": "https://github.com/rust-lang/rust/commit/20417ebf31b811cac736db959a028c994bc91f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20417ebf31b811cac736db959a028c994bc91f3c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a40aa0935357cbfc8bba6e7b0fd7c5461c9732e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a40aa0935357cbfc8bba6e7b0fd7c5461c9732e", "html_url": "https://github.com/rust-lang/rust/commit/1a40aa0935357cbfc8bba6e7b0fd7c5461c9732e"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "cf638470c6e2e46f851efde34d6854f23cd59898", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20417ebf31b811cac736db959a028c994bc91f3c/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20417ebf31b811cac736db959a028c994bc91f3c/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=20417ebf31b811cac736db959a028c994bc91f3c", "patch": "@@ -66,7 +66,7 @@ fn fill_charp_buf(f: fn(*mutable c_char, size_t) -> bool)\n     let buf = vec::to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n     vec::as_mut_buf(buf) { |b|\n         if f(b, tmpbuf_sz as size_t) unsafe {\n-            some(str::from_buf(b as *u8))\n+            some(str::unsafe::from_buf(b as *u8))\n         } else {\n             none\n         }\n@@ -125,7 +125,7 @@ fn getenv(n: str) -> option<str> unsafe {\n             option::none::<str>\n         } else {\n             let s = unsafe::reinterpret_cast(s);\n-            option::some::<str>(str::from_buf(s))\n+            option::some::<str>(str::unsafe::from_buf(s))\n         };\n }\n "}, {"sha": "b239579ba2df795a65c948748fec727ed90d3cf3", "filename": "src/libcore/str.rs", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/20417ebf31b811cac736db959a028c994bc91f3c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20417ebf31b811cac736db959a028c994bc91f3c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=20417ebf31b811cac736db959a028c994bc91f3c", "patch": "@@ -13,10 +13,6 @@ export\n    from_byte,\n    from_char,\n    from_chars,\n-   from_buf,\n-   from_buf_len,\n-   from_c_str,\n-   from_c_str_len,\n    push_char,\n    concat,\n    connect,\n@@ -185,40 +181,6 @@ fn from_chars(chs: [char]) -> str {\n     ret buf;\n }\n \n-#[doc = \"Create a Rust string from a null-terminated *u8 buffer\"]\n-unsafe fn from_buf(buf: *u8) -> str {\n-    let mut curr = buf, i = 0u;\n-    while *curr != 0u8 {\n-        i += 1u;\n-        curr = ptr::offset(buf, i);\n-    }\n-    ret from_buf_len(buf, i);\n-}\n-\n-#[doc = \"Create a Rust string from a null-terminated C string\"]\n-unsafe fn from_c_str(c_str: *libc::c_char) -> str {\n-    from_buf(::unsafe::reinterpret_cast(c_str))\n-}\n-\n-#[doc = \"Create a Rust string from a *u8 buffer of the given length\"]\n-unsafe fn from_buf_len(buf: *u8, len: uint) -> str {\n-    let mut v: [u8] = [];\n-    vec::reserve(v, len + 1u);\n-    vec::as_buf(v) {|b| ptr::memcpy(b, buf, len); }\n-    vec::unsafe::set_len(v, len);\n-    v += [0u8];\n-\n-    assert is_utf8(v);\n-    let s: str = ::unsafe::reinterpret_cast(v);\n-    ::unsafe::leak(v);\n-    ret s;\n-}\n-\n-#[doc = \"Create a Rust string from a `*c_char` buffer of the given length\"]\n-unsafe fn from_c_str_len(c_str: *libc::c_char, len: uint) -> str {\n-    from_buf_len(::unsafe::reinterpret_cast(c_str), len)\n-}\n-\n #[doc = \"Concatenate a vector of strings\"]\n fn concat(v: [str]) -> str {\n     let mut s: str = \"\";\n@@ -1522,6 +1484,10 @@ fn reserve(&ss: str, nn: uint) {\n mod unsafe {\n    export\n       // FIXME: stop exporting several of these\n+      from_buf,\n+      from_buf_len,\n+      from_c_str,\n+      from_c_str_len,\n       from_bytes,\n       from_byte,\n       slice_bytes,\n@@ -1531,6 +1497,42 @@ mod unsafe {\n       shift_byte,\n       set_len;\n \n+    #[doc = \"Create a Rust string from a null-terminated *u8 buffer\"]\n+    unsafe fn from_buf(buf: *u8) -> str {\n+        let mut curr = buf, i = 0u;\n+        while *curr != 0u8 {\n+            i += 1u;\n+            curr = ptr::offset(buf, i);\n+        }\n+        ret from_buf_len(buf, i);\n+    }\n+\n+    #[doc = \"Create a Rust string from a *u8 buffer of the given length\"]\n+    unsafe fn from_buf_len(buf: *u8, len: uint) -> str {\n+        let mut v: [u8] = [];\n+        vec::reserve(v, len + 1u);\n+        vec::as_buf(v) {|b| ptr::memcpy(b, buf, len); }\n+        vec::unsafe::set_len(v, len);\n+        v += [0u8];\n+\n+        assert is_utf8(v);\n+        let s: str = ::unsafe::reinterpret_cast(v);\n+        ::unsafe::leak(v);\n+        ret s;\n+    }\n+\n+    #[doc = \"Create a Rust string from a null-terminated C string\"]\n+    unsafe fn from_c_str(c_str: *libc::c_char) -> str {\n+        from_buf(::unsafe::reinterpret_cast(c_str))\n+    }\n+\n+    #[doc = \"\n+    Create a Rust string from a `*c_char` buffer of the given length\n+    \"]\n+    unsafe fn from_c_str_len(c_str: *libc::c_char, len: uint) -> str {\n+        from_buf_len(::unsafe::reinterpret_cast(c_str), len)\n+    }\n+\n    #[doc = \"\n    Converts a vector of bytes to a string.\n \n@@ -2222,15 +2224,15 @@ mod tests {\n     fn test_from_buf() unsafe {\n         let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n         let b = vec::unsafe::to_ptr(a);\n-        let c = from_buf(b);\n+        let c = unsafe::from_buf(b);\n         assert (c == \"AAAAAAA\");\n     }\n \n     #[test]\n     fn test_from_buf_len() unsafe {\n         let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n         let b = vec::unsafe::to_ptr(a);\n-        let c = from_buf_len(b, 3u);\n+        let c = unsafe::from_buf_len(b, 3u);\n         assert (c == \"AAA\");\n     }\n \n@@ -2252,7 +2254,7 @@ mod tests {\n     fn test_as_buf2() unsafe {\n         let s = \"hello\";\n         let sb = as_buf(s, {|b| b });\n-        let s_cstr = from_buf(sb);\n+        let s_cstr = unsafe::from_buf(sb);\n         assert (eq(s_cstr, s));\n     }\n "}, {"sha": "4ff6e3307974b3070e8a0898a06e78ea5b4480e6", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20417ebf31b811cac736db959a028c994bc91f3c/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20417ebf31b811cac736db959a028c994bc91f3c/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=20417ebf31b811cac736db959a028c994bc91f3c", "patch": "@@ -27,7 +27,7 @@ fn llvm_err(sess: session, msg: str) -> ! unsafe {\n     let cstr = llvm::LLVMRustGetLastError();\n     if cstr == ptr::null() {\n         sess.fatal(msg);\n-    } else { sess.fatal(msg + \": \" + str::from_c_str(cstr)); }\n+    } else { sess.fatal(msg + \": \" + str::unsafe::from_c_str(cstr)); }\n }\n \n fn load_intrinsics_bc(sess: session) -> option<ModuleRef> {"}, {"sha": "6f11b3817a7189b41eda1bacfb9e0c6e1d0abc41", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20417ebf31b811cac736db959a028c994bc91f3c/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20417ebf31b811cac736db959a028c994bc91f3c/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=20417ebf31b811cac736db959a028c994bc91f3c", "patch": "@@ -216,7 +216,7 @@ fn get_metadata_section(sess: session::session,\n     let si = mk_section_iter(of.llof);\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-        let name = unsafe { str::from_c_str(name_buf) };\n+        let name = unsafe { str::unsafe::from_c_str(name_buf) };\n         if str::eq(name, sess.targ_cfg.target_strs.meta_sect_name) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;"}]}