{"sha": "d73a0fef381f5c6f4720c152bb7235fe02e502fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3M2EwZmVmMzgxZjVjNmY0NzIwYzE1MmJiNzIzNWZlMDJlNTAyZmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-21T12:50:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-30T19:00:30Z"}, "message": "Turn public reexporting of private extern crates into a lint again", "tree": {"sha": "09ba1eb8d8bc77414c34c9dbd60e6db0e8d3ad84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ba1eb8d8bc77414c34c9dbd60e6db0e8d3ad84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d73a0fef381f5c6f4720c152bb7235fe02e502fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d73a0fef381f5c6f4720c152bb7235fe02e502fd", "html_url": "https://github.com/rust-lang/rust/commit/d73a0fef381f5c6f4720c152bb7235fe02e502fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d73a0fef381f5c6f4720c152bb7235fe02e502fd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caecb76f08e1365fe245118c7caa4f6add0f95f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/caecb76f08e1365fe245118c7caa4f6add0f95f5", "html_url": "https://github.com/rust-lang/rust/commit/caecb76f08e1365fe245118c7caa4f6add0f95f5"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "a892f9df6a646dfd6023bd66045de3ac655f65b4", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d73a0fef381f5c6f4720c152bb7235fe02e502fd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73a0fef381f5c6f4720c152bb7235fe02e502fd/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d73a0fef381f5c6f4720c152bb7235fe02e502fd", "patch": "@@ -18,6 +18,7 @@ use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n use rustc::ty;\n+use rustc::lint::builtin::PRIVATE_IN_PUBLIC;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::util::nodemap::FxHashMap;\n@@ -294,7 +295,8 @@ impl<'a> Resolver<'a> {\n     // return the corresponding binding defined by the import directive.\n     pub fn import(&self, binding: &'a NameBinding<'a>, directive: &'a ImportDirective<'a>)\n                   -> &'a NameBinding<'a> {\n-        let vis = if binding.pseudo_vis().is_at_least(directive.vis.get(), self) {\n+        let vis = if binding.pseudo_vis().is_at_least(directive.vis.get(), self) ||\n+                     !directive.is_glob() && binding.is_extern_crate() { // c.f. `PRIVATE_IN_PUBLIC`\n             directive.vis.get()\n         } else {\n             binding.pseudo_vis()\n@@ -718,7 +720,13 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         // All namespaces must be re-exported with extra visibility for an error to occur.\n         if !any_successful_reexport {\n-            if reexport_error.unwrap().0 == TypeNS {\n+            let (ns, binding) = reexport_error.unwrap();\n+            if ns == TypeNS && binding.is_extern_crate() {\n+                let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n+                                   (error E0365), consider declaring with `pub`\",\n+                                   ident);\n+                self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, directive.span, msg);\n+            } else if ns == TypeNS {\n                 struct_span_err!(self.session, directive.span, E0365,\n                                  \"`{}` is private, and cannot be reexported\", ident)\n                     .span_label(directive.span, format!(\"reexport of private `{}`\", ident))"}, {"sha": "185da379694bcf48fc386bb343515d8594f1cabf", "filename": "src/test/compile-fail/pub-reexport-priv-extern-crate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d73a0fef381f5c6f4720c152bb7235fe02e502fd/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d73a0fef381f5c6f4720c152bb7235fe02e502fd/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs?ref=d73a0fef381f5c6f4720c152bb7235fe02e502fd", "patch": "@@ -9,23 +9,27 @@\n // except according to those terms.\n \n #![allow(unused)]\n+#![deny(private_in_public)]\n \n extern crate core;\n pub use core as reexported_core; //~ ERROR `core` is private, and cannot be reexported\n+                                 //~^ WARN this was previously accepted\n \n mod foo1 {\n     extern crate core;\n }\n \n mod foo2 {\n     use foo1::core; //~ ERROR `core` is private, and cannot be reexported\n+                    //~^ WARN this was previously accepted\n     pub mod bar {\n         extern crate core;\n     }\n }\n \n mod baz {\n     pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be reexported\n+                             //~^ WARN this was previously accepted\n }\n \n fn main() {}"}]}