{"sha": "172b59abe510dde5826fec24377f208a19418c04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MmI1OWFiZTUxMGRkZTU4MjZmZWMyNDM3N2YyMDhhMTk0MThjMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-25T00:32:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-25T00:32:07Z"}, "message": "auto merge of #18080 : veddan/rust/assume, r=thestinger\n\nAdds an `assume` intrinsic that gets translated to llvm.assume. It is\r\nused on a boolean expression and allows the optimizer to assume that\r\nthe expression is true.\r\n\r\nThis implements #18051.", "tree": {"sha": "a0c5c42df701d0d0dd9a6874a1badc17d46237c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c5c42df701d0d0dd9a6874a1badc17d46237c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/172b59abe510dde5826fec24377f208a19418c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/172b59abe510dde5826fec24377f208a19418c04", "html_url": "https://github.com/rust-lang/rust/commit/172b59abe510dde5826fec24377f208a19418c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/172b59abe510dde5826fec24377f208a19418c04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a10917a6a9b087d10ac4fd0186b719218627281e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10917a6a9b087d10ac4fd0186b719218627281e", "html_url": "https://github.com/rust-lang/rust/commit/a10917a6a9b087d10ac4fd0186b719218627281e"}, {"sha": "0c18da503ca674eb4cbf8504b52afb2d7c242ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c18da503ca674eb4cbf8504b52afb2d7c242ae5", "html_url": "https://github.com/rust-lang/rust/commit/0c18da503ca674eb4cbf8504b52afb2d7c242ae5"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "8486535d188762ec261a87066fb83667f05da4b0", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/172b59abe510dde5826fec24377f208a19418c04/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172b59abe510dde5826fec24377f208a19418c04/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=172b59abe510dde5826fec24377f208a19418c04", "patch": "@@ -260,6 +260,17 @@ extern \"rust-intrinsic\" {\n     /// NB: This is very different from the `unreachable!()` macro!\n     pub fn unreachable() -> !;\n \n+    /// Inform the optimizer that a condition is always true.\n+    /// If the condition is false, the behavior is undefined.\n+    ///\n+    /// No code is generated for this intrinsic, but the optimizer will try\n+    /// to preserve it (and its condition) between passes, which may interfere\n+    /// with optimization of surrounding code and reduce performance. It should\n+    /// not be used if the invariant can be discovered by the optimizer on its\n+    /// own, or if it does not enable any significant optimizations.\n+    #[cfg(not(stage0))]\n+    pub fn assume(b: bool);\n+\n     /// Execute a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n "}, {"sha": "90159389688a6a0e3e7dd8cd3f57eec42f44ad9b", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/172b59abe510dde5826fec24377f208a19418c04/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172b59abe510dde5826fec24377f208a19418c04/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=172b59abe510dde5826fec24377f208a19418c04", "patch": "@@ -860,6 +860,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.lifetime.end\" fn(t_i64, i8p) -> void);\n \n     ifn!(\"llvm.expect.i1\" fn(i1, i1) -> i1);\n+    ifn!(\"llvm.assume\" fn(i1) -> void);\n \n     // Some intrinsics were introduced in later versions of LLVM, but they have\n     // fallbacks in libc or libm and such. Currently, all of these intrinsics"}, {"sha": "3e75b0772fb10d9616072cb52795c73e10e9bec6", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/172b59abe510dde5826fec24377f208a19418c04/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172b59abe510dde5826fec24377f208a19418c04/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=172b59abe510dde5826fec24377f208a19418c04", "patch": "@@ -81,6 +81,7 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Opti\n         \"bswap16\" => \"llvm.bswap.i16\",\n         \"bswap32\" => \"llvm.bswap.i32\",\n         \"bswap64\" => \"llvm.bswap.i64\",\n+        \"assume\" => \"llvm.assume\",\n         _ => return None\n     };\n     Some(ccx.get_intrinsic(&name))"}, {"sha": "736ebb8244a01796ac22c2c556d221c442853285", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/172b59abe510dde5826fec24377f208a19418c04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172b59abe510dde5826fec24377f208a19418c04/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=172b59abe510dde5826fec24377f208a19418c04", "patch": "@@ -5703,6 +5703,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n \n             \"return_address\" => (0, vec![], ty::mk_imm_ptr(tcx, ty::mk_u8())),\n \n+            \"assume\" => (0, vec![ty::mk_bool()], ty::mk_nil()),\n+\n             ref other => {\n                 span_err!(tcx.sess, it.span, E0093,\n                     \"unrecognized intrinsic function: `{}`\", *other);"}, {"sha": "abf9b94c59d8a6f113bc68e1563941904a25bf7d", "filename": "src/test/run-pass/intrinsic-assume.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/172b59abe510dde5826fec24377f208a19418c04/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/172b59abe510dde5826fec24377f208a19418c04/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs?ref=172b59abe510dde5826fec24377f208a19418c04", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::intrinsics::assume;\n+\n+unsafe fn f(x: i32) -> i32 {\n+    assume(x == 34);\n+    match x {\n+        34 => 42,\n+        _  => 30\n+    }\n+}\n+\n+fn main() {\n+    let x = unsafe { f(34) };\n+    assert_eq!(x, 42);\n+}\n+"}]}