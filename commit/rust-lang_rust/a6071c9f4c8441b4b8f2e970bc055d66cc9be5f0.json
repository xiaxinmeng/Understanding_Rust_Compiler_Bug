{"sha": "a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDcxYzlmNGM4NDQxYjRiOGYyZTk3MGJjMDU1ZDY2Y2M5YmU1ZjA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-07T06:26:09Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-07T06:26:09Z"}, "message": "Merge #442\n\n442: WIP: indent on typing dot r=matklad a=simonvandel\n\nFixes #439.\r\n\r\nThe unit test passes, but I can't seem to make VS code perform the action. The existing action on \"=\" doesn't work either on my end either though.\r\n\r\nI didn't add any smart way of detecting the current indent level. Any ideas how I would do that?\n\nCo-authored-by: Simon Vandel Sillesen <simon.vandel@gmail.com>", "tree": {"sha": "67fb82094ed6542f77f4ad1cc8b7bdbfb37bf6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67fb82094ed6542f77f4ad1cc8b7bdbfb37bf6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "html_url": "https://github.com/rust-lang/rust/commit/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c69bb8a7e737e09c667f9e343d0f1d3e4c13b8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c69bb8a7e737e09c667f9e343d0f1d3e4c13b8f7", "html_url": "https://github.com/rust-lang/rust/commit/c69bb8a7e737e09c667f9e343d0f1d3e4c13b8f7"}, {"sha": "f3c708ab7babc4e94250cbfbaae0fdd3919284ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c708ab7babc4e94250cbfbaae0fdd3919284ce", "html_url": "https://github.com/rust-lang/rust/commit/f3c708ab7babc4e94250cbfbaae0fdd3919284ce"}], "stats": {"total": 282, "additions": 225, "deletions": 57}, "files": [{"sha": "c8f846c5685bc7852b3ca4f1ba65fe5e1540fb44", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "patch": "@@ -12,41 +12,39 @@ macro_rules! ctry {\n     };\n }\n \n-mod db;\n-mod imp;\n mod completion;\n+mod db;\n mod goto_defenition;\n-mod symbol_index;\n+mod imp;\n pub mod mock_analysis;\n mod runnables;\n+mod symbol_index;\n \n mod extend_selection;\n-mod syntax_highlighting;\n mod hover;\n+mod syntax_highlighting;\n \n use std::{fmt, sync::Arc};\n \n-use rustc_hash::FxHashMap;\n-use ra_syntax::{SourceFileNode, TextRange, TextUnit, SmolStr, SyntaxKind};\n+use ra_syntax::{SmolStr, SourceFileNode, SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n+use rustc_hash::FxHashMap;\n use salsa::ParallelDatabase;\n \n-use crate::symbol_index::{SymbolIndex, FileSymbol};\n+use crate::symbol_index::{FileSymbol, SymbolIndex};\n \n pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertText},\n     runnables::{Runnable, RunnableKind},\n };\n-pub use ra_editor::{\n-    Fold, FoldKind, HighlightedRange, LineIndex, StructureNode, Severity\n-};\n pub use hir::FnSignatureInfo;\n+pub use ra_editor::{Fold, FoldKind, HighlightedRange, LineIndex, Severity, StructureNode};\n \n pub use ra_db::{\n-    Canceled, Cancelable, FilePosition, FileRange, LocalSyntaxPtr,\n-    CrateGraph, CrateId, SourceRootId, FileId, SyntaxDatabase, FilesDatabase\n+    Cancelable, Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, FilesDatabase,\n+    LocalSyntaxPtr, SourceRootId, SyntaxDatabase,\n };\n \n #[derive(Default)]\n@@ -346,14 +344,20 @@ impl Analysis {\n         let edit = ra_editor::on_enter(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n-    /// Returns an edit which should be applied after `=` was typed. Primaraly,\n+    /// Returns an edit which should be applied after `=` was typed. Primarily,\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.db.source_file(position.file_id);\n         let edit = ra_editor::on_eq_typed(&file, position.offset)?;\n         Some(SourceChange::from_local_edit(position.file_id, edit))\n     }\n+    /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n+    pub fn on_dot_typed(&self, position: FilePosition) -> Option<SourceChange> {\n+        let file = self.db.source_file(position.file_id);\n+        let edit = ra_editor::on_dot_typed(&file, position.offset)?;\n+        Some(SourceChange::from_local_edit(position.file_id, edit))\n+    }\n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {"}, {"sha": "a3c85ed5dad58f53390f4afb321d5c413301e68a", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "patch": "@@ -16,7 +16,7 @@ pub use self::{\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     structure::{file_structure, StructureNode},\n-    typing::{join_lines, on_enter, on_eq_typed},\n+    typing::{join_lines, on_enter, on_dot_typed, on_eq_typed},\n     diagnostics::diagnostics\n };\n use ra_text_edit::TextEditBuilder;"}, {"sha": "12500854c41e858745392c3f9f3169633653ae62", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 165, "deletions": 4, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "patch": "@@ -1,17 +1,17 @@\n use std::mem;\n \n+use itertools::Itertools;\n use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n     ast,\n     text_utils::intersect,\n-    AstNode, SourceFileNode, SyntaxKind,\n+    AstNode, Direction, SourceFileNode, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n-use itertools::Itertools;\n \n-use crate::{find_node_at_offset, TextEditBuilder, LocalEdit};\n+use crate::{find_node_at_offset, LocalEdit, TextEditBuilder};\n \n pub fn join_lines(file: &SourceFileNode, range: TextRange) -> LocalEdit {\n     let range = if range.is_empty() {\n@@ -136,6 +136,56 @@ pub fn on_eq_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit>\n     })\n }\n \n+pub fn on_dot_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n+    let before_dot_offset = offset - TextUnit::of_char('.');\n+\n+    let whitespace = find_leaf_at_offset(file.syntax(), before_dot_offset).left_biased()?;\n+\n+    // find whitespace just left of the dot\n+    ast::Whitespace::cast(whitespace)?;\n+\n+    // make sure there is a method call\n+    let method_call = whitespace\n+        .siblings(Direction::Prev)\n+        // first is whitespace\n+        .skip(1)\n+        .next()?;\n+\n+    ast::MethodCallExprNode::cast(method_call)?;\n+\n+    // find how much the _method call is indented\n+    let method_chain_indent = method_call\n+        .parent()?\n+        .siblings(Direction::Prev)\n+        .skip(1)\n+        .next()?\n+        .leaf_text()\n+        .map(|x| last_line_indent_in_whitespace(x))?;\n+\n+    let current_indent = TextUnit::of_str(last_line_indent_in_whitespace(whitespace.leaf_text()?));\n+    // TODO: indent is always 4 spaces now. A better heuristic could look on the previous line(s)\n+\n+    let target_indent = TextUnit::of_str(method_chain_indent) + TextUnit::from_usize(4);\n+\n+    let diff = target_indent - current_indent;\n+\n+    let indent = \"\".repeat(diff.to_usize());\n+\n+    let cursor_position = offset + diff;\n+    let mut edit = TextEditBuilder::default();\n+    edit.insert(before_dot_offset, indent);\n+    Some(LocalEdit {\n+        label: \"indent dot\".to_string(),\n+        edit: edit.finish(),\n+        cursor_position: Some(cursor_position),\n+    })\n+}\n+\n+/// Finds the last line in the whitespace\n+fn last_line_indent_in_whitespace(ws: &str) -> &str {\n+    ws.split('\\n').last().unwrap_or(\"\")\n+}\n+\n fn remove_newline(\n     edit: &mut TextEditBuilder,\n     node: SyntaxNodeRef,\n@@ -283,7 +333,9 @@ fn compute_ws(left: SyntaxNodeRef, right: SyntaxNodeRef) -> &'static str {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::test_utils::{add_cursor, check_action, extract_offset, extract_range, assert_eq_text};\n+    use crate::test_utils::{\n+        add_cursor, assert_eq_text, check_action, extract_offset, extract_range,\n+};\n \n     fn check_join_lines(before: &str, after: &str) {\n         check_action(before, after, |file, offset| {\n@@ -614,6 +666,115 @@ fn foo() {\n         // \");\n     }\n \n+    #[test]\n+    fn test_on_dot_typed() {\n+        fn do_check(before: &str, after: &str) {\n+            let (offset, before) = extract_offset(before);\n+            let file = SourceFileNode::parse(&before);\n+            if let Some(result) = on_eq_typed(&file, offset) {\n+                let actual = result.edit.apply(&before);\n+                assert_eq_text!(after, &actual);\n+            };\n+        }\n+        // indent if continuing chain call\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+        .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .\n+    }\n+\",\n+        );\n+\n+        // do not indent if already indented\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .\n+    }\n+\",\n+        );\n+\n+        // indent if the previous line is already indented\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .first()\n+        .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .first()\n+            .\n+    }\n+\",\n+        );\n+\n+        // don't indent if indent matches previous line\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .first()\n+            .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .first()\n+            .\n+    }\n+\",\n+        );\n+\n+        // don't indent if there is no method call on previous line\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        .\n+    }\n+\",\n+        );\n+\n+        // indent to match previous expr\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+.<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .\n+    }\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn test_on_enter() {\n         fn apply_on_enter(before: &str) -> Option<String> {"}, {"sha": "2599a4ca60205bdc2000ae4968a1048df5c4ede6", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "patch": "@@ -37,7 +37,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         document_range_formatting_provider: None,\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n-            more_trigger_character: None,\n+            more_trigger_character: Some(vec![\".\".to_string()]),\n         }),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),\n         rename_provider: Some(RenameProviderCapability::Options(RenameOptions {"}, {"sha": "2dc1be26aac1f4dafbc4a104172bb44f7bfc3886", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "patch": "@@ -1,25 +1,21 @@\n mod handlers;\n mod subscriptions;\n \n-use std::{\n-    fmt,\n-    path::PathBuf,\n-    sync::Arc,\n-};\n+use std::{fmt, path::PathBuf, sync::Arc};\n \n-use crossbeam_channel::{unbounded, select, Receiver, Sender, RecvError};\n+use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n+use failure::{bail, format_err};\n+use failure_derive::Fail;\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n use languageserver_types::NumberOrString;\n use ra_analysis::{Canceled, FileId, LibraryData};\n use ra_vfs::VfsTask;\n use rayon;\n-use threadpool::ThreadPool;\n use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n-use failure::{format_err, bail};\n-use failure_derive::Fail;\n+use threadpool::ThreadPool;\n \n use crate::{\n     main_loop::subscriptions::Subscriptions,"}, {"sha": "51f134e8a4088bad9baf437a6a77061a4570a22c", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=a6071c9f4c8441b4b8f2e970bc055d66cc9be5f0", "patch": "@@ -2,15 +2,16 @@ use std::collections::HashMap;\n \n use gen_lsp_server::ErrorCode;\n use languageserver_types::{\n-    CodeActionResponse, Command, Diagnostic,\n-    DiagnosticSeverity, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n-    FoldingRangeParams, Location, MarkupContent, MarkupKind, MarkedString, Position,\n-    PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    Range, WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover,\n-    HoverContents, DocumentFormattingParams, DocumentHighlight,\n+    CodeActionResponse, Command, Diagnostic, DiagnosticSeverity, DocumentFormattingParams,\n+    DocumentHighlight, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n+    FoldingRangeParams, Hover, HoverContents, Location, MarkedString, MarkupContent, MarkupKind,\n+    ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range, RenameParams,\n+    SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n-use ra_syntax::{TextUnit, text_utils::intersect};\n+use ra_analysis::{\n+    FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity, SourceChange,\n+};\n+use ra_syntax::{text_utils::intersect, TextUnit};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n use serde_json::to_value;\n@@ -92,29 +93,35 @@ pub fn handle_on_type_formatting(\n     world: ServerWorld,\n     params: req::DocumentOnTypeFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n-    if params.ch != \"=\" {\n-        return Ok(None);\n+    let analysis: Option<Box<Fn(FilePosition) -> Option<SourceChange>>> = match params.ch.as_str() {\n+        \"=\" => Some(Box::new(|pos| world.analysis().on_eq_typed(pos))),\n+        \".\" => Some(Box::new(|pos| world.analysis().on_dot_typed(pos))),\n+        _ => None,\n+    };\n+\n+    if let Some(ana) = analysis {\n+        let file_id = params.text_document.try_conv_with(&world)?;\n+        let line_index = world.analysis().file_line_index(file_id);\n+        let position = FilePosition {\n+            file_id,\n+            offset: params.position.conv_with(&line_index),\n+        };\n+\n+        if let Some(mut action) = ana(position) {\n+            let change: Vec<TextEdit> = action\n+                .source_file_edits\n+                .pop()\n+                .unwrap()\n+                .edit\n+                .as_atoms()\n+                .iter()\n+                .map_conv_with(&line_index)\n+                .collect();\n+            return Ok(Some(change));\n+        }\n     }\n \n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let position = FilePosition {\n-        file_id,\n-        offset: params.position.conv_with(&line_index),\n-    };\n-    let edits = match world.analysis().on_eq_typed(position) {\n-        None => return Ok(None),\n-        Some(mut action) => action\n-            .source_file_edits\n-            .pop()\n-            .unwrap()\n-            .edit\n-            .as_atoms()\n-            .iter()\n-            .map_conv_with(&line_index)\n-            .collect(),\n-    };\n-    Ok(Some(edits))\n+    return Ok(None);\n }\n \n pub fn handle_document_symbol("}]}