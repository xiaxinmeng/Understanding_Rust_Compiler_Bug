{"sha": "2e562a4d642736f78f52292feb05a5a1048de7d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNTYyYTRkNjQyNzM2Zjc4ZjUyMjkyZmViMDVhNWExMDQ4ZGU3ZDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-13T17:10:14Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-14T15:39:19Z"}, "message": "Fix static mutation tests", "tree": {"sha": "53b43c56e6f235f4daea24ea12d2cf0a9bfb6e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53b43c56e6f235f4daea24ea12d2cf0a9bfb6e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e562a4d642736f78f52292feb05a5a1048de7d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCABKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAllo5acsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQK\n+g//Tz+hYxDK2kuzsMsI9c5Ll7BOSkMUZznlTSo4cXqgeWHDp+Vdcl1iF5Od5EaZ\n1GGwkQwnucpehIVbO6h1YegQmLK/L/m2ivNcgGfo7MzCCM90zYOWN4sygazRmHm/\nPfHVqHawP6VC+w1evuA3avQkcd2pQ9Nj6gDV1MjDx+QWuFAry1b68uawI+GDr++p\nkXuy/ahtW5bfgq8SqiwgINOl6bIFv/TWuyu9eAJq9j/fzarC85bRvgm6nNSS0M/n\nIDNYB+gvA06WlISnaPCoVcblhARCwz3B+Ub2kqx57w9lZx/Q+Pd8pi19WAzdMRbi\niBxtscaB12FtY8fulbm7yFfvEPDdeO/1z5q0ayWSkkyvoRTl4KAH2iczLnpGhLul\nuQzwx2cA+0TFx4N78SM1cgq7zrxZgHcqSh3AdFf/T10DQF32m805Ii+AweYTAWlS\niTbRaC/Kc6yRoF0vGDp7nCI5Le7Obj5UEKWxTfjP/5q0PTqg3ghlNPng/8kdOwLZ\njdj1299xW3KmQjlCJALbH90oNQcUVQ+ytnD5Rl7VqN+5PhClcC0UXFKMWfFDOina\nju/mey/eOcjTxjCkA9KG34EdLRWoehFl2yG/SiE0/9gWYZcu1M77QvGjTUd/vj7u\nAnbifvUk7RrcV2VTqtdCJ+Rl5bjMekP6zAOvxH9mGszufZc=\n=/RUx\n-----END PGP SIGNATURE-----", "payload": "tree 53b43c56e6f235f4daea24ea12d2cf0a9bfb6e8a\nparent 7701ff2f898b24cb17391b2378a9c9fe7272aa72\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1499965814 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1500046759 +0200\n\nFix static mutation tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e562a4d642736f78f52292feb05a5a1048de7d5", "html_url": "https://github.com/rust-lang/rust/commit/2e562a4d642736f78f52292feb05a5a1048de7d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e562a4d642736f78f52292feb05a5a1048de7d5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7701ff2f898b24cb17391b2378a9c9fe7272aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/7701ff2f898b24cb17391b2378a9c9fe7272aa72", "html_url": "https://github.com/rust-lang/rust/commit/7701ff2f898b24cb17391b2378a9c9fe7272aa72"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "07f63fad6cf43d558d83a051187e80aeca6be2b9", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e562a4d642736f78f52292feb05a5a1048de7d5/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e562a4d642736f78f52292feb05a5a1048de7d5/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=2e562a4d642736f78f52292feb05a5a1048de7d5", "patch": "@@ -414,7 +414,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             let ptr = ptr.to_ptr()?;\n             self.memory.dump_alloc(ptr.alloc_id);\n             match self.memory.get(ptr.alloc_id)?.kind {\n-                ::memory::Kind::Static => {},\n+                ::memory::Kind::Static | ::memory::Kind::UninitializedStatic => {},\n                 ::memory::Kind::Stack => self.memory.deallocate(ptr, None, ::memory::Kind::Stack)?,\n                 other => bug!(\"local contained non-stack memory: {:?}\", other),\n             }"}, {"sha": "6b181e31063ab5e9f833cee370ca2bbd35936d53", "filename": "src/memory.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2e562a4d642736f78f52292feb05a5a1048de7d5/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e562a4d642736f78f52292feb05a5a1048de7d5/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=2e562a4d642736f78f52292feb05a5a1048de7d5", "patch": "@@ -193,9 +193,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Ok(MemoryPointer::new(alloc_id, 0));\n         }\n \n-        let ptr = self.allocate(bytes.len() as u64, 1, Kind::Static)?;\n+        let ptr = self.allocate(bytes.len() as u64, 1, Kind::UninitializedStatic)?;\n         self.write_bytes(PrimVal::Ptr(ptr), bytes)?;\n-        self.mark_static_initalized(ptr.alloc_id, Mutability::Mutable)?;\n+        self.mark_static_initalized(ptr.alloc_id, Mutability::Immutable)?;\n         self.literal_alloc_cache.insert(bytes.to_vec(), ptr.alloc_id);\n         Ok(ptr)\n     }\n@@ -605,7 +605,24 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         // do not use `self.get_mut(alloc_id)` here, because we might have already marked a\n         // sub-element or have circular pointers (e.g. `Rc`-cycles)\n         let relocations = match self.alloc_map.get_mut(&alloc_id) {\n-            Some(&mut Allocation { ref mut relocations, kind: ref mut kind @ Kind::UninitializedStatic, ref mut mutable, .. }) => {\n+            Some(&mut Allocation { ref mut relocations, ref mut kind, ref mut mutable, .. }) => {\n+                match *kind {\n+                    // const eval results can refer to \"locals\".\n+                    // E.g. `const Foo: &u32 = &1;` refers to the temp local that stores the `1`\n+                    Kind::Stack |\n+                    // The entire point of this function\n+                    Kind::UninitializedStatic |\n+                    // In the future const eval will allow heap allocations so we'll need to protect them\n+                    // from deallocation, too\n+                    Kind::Rust |\n+                    Kind::C => {},\n+                    Kind::Static => {\n+                        trace!(\"mark_static_initalized: skipping already initialized static referred to by static currently being initialized\");\n+                        return Ok(());\n+                    },\n+                    // FIXME: This could be allowed, but not for env vars set during miri execution\n+                    Kind::Env => return Err(EvalError::Unimplemented(\"statics can't refer to env vars\".to_owned())),\n+                }\n                 *kind = Kind::Static;\n                 *mutable = mutability;\n                 // take out the relocations vector to free the borrow on self, so we can call"}, {"sha": "68d027bc63384a14fad8edf6e66e873c705ab879", "filename": "src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e562a4d642736f78f52292feb05a5a1048de7d5/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e562a4d642736f78f52292feb05a5a1048de7d5/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=2e562a4d642736f78f52292feb05a5a1048de7d5", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         let ptr_size = self.memory.pointer_size();\n         let methods = ::rustc::traits::get_vtable_methods(self.tcx, trait_ref);\n-        let vtable = self.memory.allocate(ptr_size * (3 + methods.count() as u64), ptr_size, Kind::Static)?;\n+        let vtable = self.memory.allocate(ptr_size * (3 + methods.count() as u64), ptr_size, Kind::UninitializedStatic)?;\n \n         let drop = ::eval_context::resolve_drop_in_place(self.tcx, ty);\n         let drop = self.memory.create_fn_alloc(drop);"}, {"sha": "08ff7457b76bec9b6d84ed02b5331ca7233b5cf5", "filename": "tests/compile-fail/stack_free.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e562a4d642736f78f52292feb05a5a1048de7d5/tests%2Fcompile-fail%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e562a4d642736f78f52292feb05a5a1048de7d5/tests%2Fcompile-fail%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_free.rs?ref=2e562a4d642736f78f52292feb05a5a1048de7d5", "patch": "@@ -1,5 +1,7 @@\n+// error-pattern: tried to deallocate Stack memory but gave Rust as the kind\n+\n fn main() {\n     let x = 42;\n     let bad_box = unsafe { std::mem::transmute::<&i32, Box<i32>>(&x) };\n-    drop(bad_box); //~ ERROR tried to deallocate Stack memory but gave Rust as the kind\n+    drop(bad_box);\n }"}]}