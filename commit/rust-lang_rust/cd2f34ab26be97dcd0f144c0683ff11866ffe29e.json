{"sha": "cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMmYzNGFiMjZiZTk3ZGNkMGYxNDRjMDY4M2ZmMTE4NjZmZmUyOWU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-24T10:04:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-24T10:04:40Z"}, "message": "Merge pull request #143 from oli-obk/master\n\nrustup", "tree": {"sha": "f065789353a280bee231878049ff72633d93097d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f065789353a280bee231878049ff72633d93097d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "html_url": "https://github.com/rust-lang/rust/commit/cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af2c397bfc9c3a2d09ef4da1ecf049de8c29e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af2c397bfc9c3a2d09ef4da1ecf049de8c29e6c", "html_url": "https://github.com/rust-lang/rust/commit/1af2c397bfc9c3a2d09ef4da1ecf049de8c29e6c"}, {"sha": "35502fd47daf3a95d01e3a538e429c7ceb9de03b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35502fd47daf3a95d01e3a538e429c7ceb9de03b", "html_url": "https://github.com/rust-lang/rust/commit/35502fd47daf3a95d01e3a538e429c7ceb9de03b"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "54aae64c5caaf9eee61da1441e5dafe699c9dc88", "filename": "src/eval_context.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "patch": "@@ -456,7 +456,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     General { discr, ref variants, .. } => {\n                         if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n-                            let discr_val = adt_def.variants[variant].disr_val.to_u128_unchecked();\n+                            let discr_val = adt_def.variants[variant].disr_val;\n                             let discr_size = discr.size().bytes();\n                             if variants[variant].packed {\n                                 let ptr = self.force_allocation(dest)?.to_ptr_and_extra().0;\n@@ -529,7 +529,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     CEnum { .. } => {\n                         assert_eq!(operands.len(), 0);\n                         if let mir::AggregateKind::Adt(adt_def, variant, _, _) = *kind {\n-                            let n = adt_def.variants[variant].disr_val.to_u128_unchecked();\n+                            let n = adt_def.variants[variant].disr_val;\n                             self.write_primval(dest, PrimVal::Bytes(n), dest_ty)?;\n                         } else {\n                             bug!(\"tried to assign {:?} to Layout::CEnum\", kind);\n@@ -661,7 +661,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            InlineAsm { .. } => return Err(EvalError::InlineAsm),\n+            Discriminant(ref lvalue) => {\n+                let lval = self.eval_lvalue(lvalue)?;\n+                let ty = self.lvalue_ty(lvalue);\n+                let ptr = self.force_allocation(lval)?.to_ptr();\n+                let discr_val = self.read_discriminant_value(ptr, ty)?;\n+                if let ty::TyAdt(adt_def, _) = ty.sty {\n+                    if adt_def.variants.iter().all(|v| discr_val != v.disr_val) {\n+                        return Err(EvalError::InvalidDiscriminant);\n+                    }\n+                } else {\n+                    bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n+                }\n+                self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n+            },\n         }\n \n         if log_enabled!(::log::LogLevel::Trace) {"}, {"sha": "d1d8e8cf229f66993176d48a1dbe1d7b9d566462", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "patch": "@@ -1,7 +1,6 @@\n #![feature(\n     btree_range,\n     collections,\n-    field_init_shorthand,\n     i128_type,\n     pub_restricted,\n     rustc_private,"}, {"sha": "c08ac9693a4b1d28f7ae8942c07a4ea4090711eb", "filename": "src/step.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "patch": "@@ -119,6 +119,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly.\n             Nop => {}\n+\n+            InlineAsm { .. } => return Err(EvalError::InlineAsm),\n         }\n \n         self.frame_mut().stmt += 1;"}, {"sha": "dd199a4266c14ddb98929abc7d0969f922689152", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Layout::General { .. } => {\n                         let discr_val = self.read_discriminant_value(adt_ptr, ty)? as u128;\n                         let ptr = self.force_allocation(lval)?.to_ptr();\n-                        match adt_def.variants.iter().position(|v| discr_val == v.disr_val.to_u128_unchecked()) {\n+                        match adt_def.variants.iter().position(|v| discr_val == v.disr_val) {\n                             Some(i) => {\n                                 lval = Lvalue::Ptr {\n                                     ptr,"}, {"sha": "183a3f54fb639d92ed927a0198ce6957145555f0", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd2f34ab26be97dcd0f144c0683ff11866ffe29e/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=cd2f34ab26be97dcd0f144c0683ff11866ffe29e", "patch": "@@ -35,22 +35,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Goto { target } => self.goto_block(target),\n \n-            If { ref cond, targets: (then_target, else_target) } => {\n-                let cond_val = self.eval_operand_to_primval(cond)?.to_bool()?;\n-                self.goto_block(if cond_val { then_target } else { else_target });\n-            }\n-\n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n-                let discr_val = self.eval_and_read_lvalue(discr)?;\n-                let discr_ty = self.lvalue_ty(discr);\n+                let discr_val = self.eval_operand(discr)?;\n+                let discr_ty = self.operand_ty(discr);\n                 let discr_prim = self.value_to_primval(discr_val, discr_ty)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n \n-                for (index, const_val) in values.iter().enumerate() {\n-                    let val = self.const_to_value(const_val)?;\n-                    let prim = self.value_to_primval(val, discr_ty)?;\n+                for (index, const_int) in values.iter().enumerate() {\n+                    let prim = PrimVal::Bytes(const_int.to_u128_unchecked());\n                     if discr_prim.to_bytes()? == prim.to_bytes()? {\n                         target_block = targets[index];\n                         break;\n@@ -60,23 +54,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.goto_block(target_block);\n             }\n \n-            Switch { ref discr, ref targets, adt_def } => {\n-                // FIXME(solson)\n-                let lvalue = self.eval_lvalue(discr)?;\n-                let lvalue = self.force_allocation(lvalue)?;\n-\n-                let adt_ptr = lvalue.to_ptr();\n-                let adt_ty = self.lvalue_ty(discr);\n-                let discr_val = self.read_discriminant_value(adt_ptr, adt_ty)?;\n-                let matching = adt_def.variants.iter()\n-                    .position(|v| discr_val == v.disr_val.to_u128_unchecked());\n-\n-                match matching {\n-                    Some(i) => self.goto_block(targets[i]),\n-                    None => return Err(EvalError::InvalidDiscriminant),\n-                }\n-            }\n-\n             Call { ref func, ref args, ref destination, .. } => {\n                 let destination = match *destination {\n                     Some((ref lv, target)) => Some((self.eval_lvalue(lv)?, target)),\n@@ -216,12 +193,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         trace!(\"layout({:?}) = {:#?}\", dest_ty, dest_layout);\n                         match *dest_layout {\n                             Layout::Univariant { .. } => {\n-                                let disr_val = v.disr_val.to_u128_unchecked();\n+                                let disr_val = v.disr_val;\n                                 assert_eq!(disr_val, 0);\n                                 self.assign_fields(lvalue, dest_ty, args)?;\n                             },\n                             Layout::General { discr, ref variants, .. } => {\n-                                let disr_val = v.disr_val.to_u128_unchecked();\n+                                let disr_val = v.disr_val;\n                                 let discr_size = discr.size().bytes();\n                                 self.assign_discr_and_fields(\n                                     lvalue,\n@@ -234,7 +211,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 )?;\n                             },\n                             Layout::StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n-                                let disr_val = v.disr_val.to_u128_unchecked();\n+                                let disr_val = v.disr_val;\n                                 if nndiscr as u128 == disr_val {\n                                     self.assign_fields(lvalue, dest_ty, args)?;\n                                 } else {\n@@ -325,7 +302,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    fn read_discriminant_value(&self, adt_ptr: Pointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n+    pub fn read_discriminant_value(&self, adt_ptr: Pointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n         use rustc::ty::layout::Layout::*;\n         let adt_layout = self.type_layout(adt_ty)?;\n         trace!(\"read_discriminant_value {:#?}\", adt_layout);"}]}