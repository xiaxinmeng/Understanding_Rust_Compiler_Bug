{"sha": "21d497b77366bdf90e6fcc9a35ee8f24344622ca", "node_id": "C_kwDOAAsO6NoAKDIxZDQ5N2I3NzM2NmJkZjkwZTZmY2M5YTM1ZWU4ZjI0MzQ0NjIyY2E", "commit": {"author": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-26T14:50:09Z"}, "committer": {"name": "Moritz Vetter", "email": "mv@3yourmind.com", "date": "2022-02-26T14:50:09Z"}, "message": "refact: edit text in place in TextEdit::apply", "tree": {"sha": "abe42db6637f1b5cead6d0e1e109b9de6a62d748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abe42db6637f1b5cead6d0e1e109b9de6a62d748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d497b77366bdf90e6fcc9a35ee8f24344622ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d497b77366bdf90e6fcc9a35ee8f24344622ca", "html_url": "https://github.com/rust-lang/rust/commit/21d497b77366bdf90e6fcc9a35ee8f24344622ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d497b77366bdf90e6fcc9a35ee8f24344622ca/comments", "author": null, "committer": null, "parents": [{"sha": "c541f3396cd8dc1c2c87434d1e07d6862a2e8584", "url": "https://api.github.com/repos/rust-lang/rust/commits/c541f3396cd8dc1c2c87434d1e07d6862a2e8584", "html_url": "https://github.com/rust-lang/rust/commit/c541f3396cd8dc1c2c87434d1e07d6862a2e8584"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "f9d3ff9b07f523bf4bd4a126cbd1bba058165fc1", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21d497b77366bdf90e6fcc9a35ee8f24344622ca/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d497b77366bdf90e6fcc9a35ee8f24344622ca/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=21d497b77366bdf90e6fcc9a35ee8f24344622ca", "patch": "@@ -90,28 +90,22 @@ impl TextEdit {\n             _ => (),\n         }\n \n-        let mut total_len = TextSize::of(&*text);\n+        let text_size = TextSize::of(&*text);\n+        let mut total_len = text_size.clone();\n         for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n-            total_len -= indel.delete.end() - indel.delete.start();\n+            total_len -= indel.delete.len();\n         }\n-        let mut buf = String::with_capacity(total_len.into());\n-        let mut prev = 0;\n-        for indel in &self.indels {\n-            let start: usize = indel.delete.start().into();\n-            let end: usize = indel.delete.end().into();\n-            if start > prev {\n-                buf.push_str(&text[prev..start]);\n-            }\n-            buf.push_str(&indel.insert);\n-            prev = end;\n+\n+        if let Some(additional) = total_len.checked_sub(text_size.into()) {\n+            text.reserve(additional.into());\n+        }\n+\n+        for indel in self.indels.iter().rev() {\n+            indel.apply(text);\n         }\n-        buf.push_str(&text[prev..text.len()]);\n-        assert_eq!(TextSize::of(&buf), total_len);\n \n-        // FIXME: figure out a way to mutate the text in-place or reuse the\n-        // memory in some other way\n-        *text = buf;\n+        assert_eq!(TextSize::of(&*text), total_len);\n     }\n \n     pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {"}]}