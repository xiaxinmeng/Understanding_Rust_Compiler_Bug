{"sha": "06dff800614cab4e662ace032a2e61568db8bbdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZGZmODAwNjE0Y2FiNGU2NjJhY2UwMzJhMmU2MTU2OGRiOGJiZGY=", "commit": {"author": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-10T18:02:06Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-15T20:46:01Z"}, "message": "Add/Modify tests for argument position impl Trait", "tree": {"sha": "3ad71f55d103de486295c360751e24919a05c917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ad71f55d103de486295c360751e24919a05c917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06dff800614cab4e662ace032a2e61568db8bbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06dff800614cab4e662ace032a2e61568db8bbdf", "html_url": "https://github.com/rust-lang/rust/commit/06dff800614cab4e662ace032a2e61568db8bbdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06dff800614cab4e662ace032a2e61568db8bbdf/comments", "author": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdff9463a0afbbdcd52825ead6b6f9f1245652db", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdff9463a0afbbdcd52825ead6b6f9f1245652db", "html_url": "https://github.com/rust-lang/rust/commit/bdff9463a0afbbdcd52825ead6b6f9f1245652db"}], "stats": {"total": 182, "additions": 160, "deletions": 22}, "files": [{"sha": "bf2e22aa8e6f7d2154a2c78a11ac7aca166eb519", "filename": "src/test/compile-fail/impl-trait/disallowed.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs?ref=06dff800614cab4e662ace032a2e61568db8bbdf", "patch": "@@ -10,11 +10,6 @@\n \n #![feature(conservative_impl_trait)]\n \n-fn arguments(_: impl Fn(),\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-             _: Vec<impl Clone>) {}\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-\n type Factory<R> = impl Fn() -> R;\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n "}, {"sha": "41583d3b795fc426595b071b702d75868a263c3a", "filename": "src/test/compile-fail/impl-trait/impl-generic-mismatch.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fimpl-generic-mismatch.rs?ref=06dff800614cab4e662ace032a2e61568db8bbdf", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(universal_impl_trait)]\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    fn foo(&self, &impl Debug);\n+}\n+\n+impl Foo for () {\n+    fn foo<U: Debug>(&self, _: &U) { }\n+    //~^ Error method `foo` has incompatible signature for trait\n+}\n+\n+trait Bar {\n+    fn bar<U: Debug>(&self, &U);\n+}\n+\n+impl Bar for () {\n+    fn bar(&self, _: &impl Debug) { }\n+    //~^ Error method `bar` has incompatible signature for trait\n+}\n+\n+fn main() {}"}, {"sha": "5c2a8f89bf2e7494f8fc13ffdf7f77ab7a1e7918", "filename": "src/test/compile-fail/impl-trait/many-cases.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmany-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmany-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmany-cases.rs?ref=06dff800614cab4e662ace032a2e61568db8bbdf", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A simple test for testing many permutations of allowedness of\n+//! impl Trait\n+#![feature(conservative_impl_trait, universal_impl_trait, dyn_trait)]\n+use std::fmt::Debug;\n+\n+// Allowed\n+fn simple_universal(_: impl Debug) { panic!() }\n+\n+// Allowed\n+fn simple_existential() -> impl Debug { panic!() }\n+\n+// Allowed\n+fn collection_universal(_: Vec<impl Debug>) { panic!() }\n+\n+// Allowed\n+fn collection_existential() -> Vec<impl Debug> { panic!() }\n+\n+// Disallowed\n+fn fn_type_universal(_: fn(impl Debug)) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn fn_type_existential() -> fn(impl Debug) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Allowed\n+fn dyn_universal(_: &dyn Iterator<Item = impl Debug>) { panic!() }\n+\n+// Disallowed\n+fn dyn_fn_trait(_: &dyn Fn(impl Debug)) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Allowed\n+fn nested_universal(_: impl Iterator<Item = impl Iterator>) { panic!() }\n+\n+// Allowed\n+fn nested_existential() -> impl IntoIterator<Item = impl IntoIterator> {\n+    vec![vec![0; 10], vec![12; 7], vec![8; 3]]\n+}\n+\n+// Disallowed\n+fn universal_fn_trait(_: impl Fn(impl Debug)) { panic!() }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+struct ImplMember { x: impl Debug }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+trait Universal {\n+    // FIXME, should error?\n+    fn universal(impl Debug);\n+}\n+\n+// Disallowed\n+trait Existential {\n+    fn existential() -> impl Debug;\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+fn main() {}"}, {"sha": "ccf24b77a6b77bccc062bc1e39a56dfe6fb9cda9", "filename": "src/test/run-pass/impl-trait/equality-universal.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality-universal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality-universal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality-universal.rs?ref=06dff800614cab4e662ace032a2e61568db8bbdf", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(universal_impl_trait)]\n+use std::fmt::Display;\n+\n+fn check_display_eq(iter: impl IntoIterator<Item = impl Display>) {\n+    let mut collected = String::new();\n+    for it in iter {\n+        let disp = format!(\"{} \", it);\n+        collected.push_str(&disp);\n+    }\n+    assert_eq!(\"0 3 27 823 4891 1 0\", collected.trim());\n+}\n+\n+fn main() {\n+    let i32_list = [0i32, 3, 27, 823, 4891, 1, 0];\n+    let i32_list_vec = vec![0i32, 3, 27, 823, 4891, 1, 0];\n+    let u32_list = [0u32, 3, 27, 823, 4891, 1, 0];\n+    let u32_list_vec = vec![0u32, 3, 27, 823, 4891, 1, 0];\n+    let u16_list = [0u16, 3, 27, 823, 4891, 1, 0];\n+    let str_list = [\"0\", \"3\", \"27\", \"823\", \"4891\", \"1\", \"0\"];\n+    let str_list_vec = vec![\"0\", \"3\", \"27\", \"823\", \"4891\", \"1\", \"0\"];\n+\n+    check_display_eq(&i32_list);\n+    check_display_eq(i32_list_vec);\n+    check_display_eq(&u32_list);\n+    check_display_eq(u32_list_vec);\n+    check_display_eq(&u16_list);\n+    check_display_eq(&str_list);\n+    check_display_eq(str_list_vec);\n+}"}, {"sha": "0b612c2d3ff340dc1e4042e28c1e82addd0f75a9", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=06dff800614cab4e662ace032a2e61568db8bbdf", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016-2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(conservative_impl_trait, fn_traits, step_trait, unboxed_closures)]\n+#![feature(conservative_impl_trait,\n+           universal_impl_trait,\n+           fn_traits,\n+           step_trait,\n+           unboxed_closures\n+)]\n \n //! Derived from: <https://raw.githubusercontent.com/quickfur/dcal/master/dcal.d>.\n //!\n@@ -457,9 +462,9 @@ fn test_group_by() {\n ///\n /// Groups an iterator of dates by month.\n ///\n-fn by_month<It>(it: It)\n-                ->  impl Iterator<Item=(u32, impl Iterator<Item=NaiveDate> + Clone)> + Clone\n-where It: Iterator<Item=NaiveDate> + Clone {\n+fn by_month(it: impl Iterator<Item=NaiveDate> + Clone)\n+           ->  impl Iterator<Item=(u32, impl Iterator<Item=NaiveDate> + Clone)> + Clone\n+{\n     it.group_by(|d| d.month())\n }\n \n@@ -474,9 +479,9 @@ fn test_by_month() {\n ///\n /// Groups an iterator of dates by week.\n ///\n-fn by_week<It>(it: It)\n-               -> impl Iterator<Item=(u32, impl DateIterator)> + Clone\n-where It: DateIterator {\n+fn by_week(it: impl DateIterator)\n+          -> impl Iterator<Item=(u32, impl DateIterator)> + Clone\n+{\n     // We go forward one day because `isoweekdate` considers the week to start on a Monday.\n     it.group_by(|d| d.succ().isoweekdate().1)\n }\n@@ -548,8 +553,7 @@ const COLS_PER_WEEK: u32 = 7 * COLS_PER_DAY;\n ///\n /// Formats an iterator of weeks into an iterator of strings.\n ///\n-fn format_weeks<It>(it: It) -> impl Iterator<Item=String>\n-where It: Iterator, It::Item: DateIterator {\n+fn format_weeks(it: impl Iterator<Item = impl DateIterator>) -> impl Iterator<Item=String> {\n     it.map(|week| {\n         let mut buf = String::with_capacity((COLS_PER_DAY * COLS_PER_WEEK + 2) as usize);\n \n@@ -627,7 +631,7 @@ fn test_month_title() {\n ///\n /// Formats a month.\n ///\n-fn format_month<It: DateIterator>(it: It) -> impl Iterator<Item=String> {\n+fn format_month(it: impl DateIterator) -> impl Iterator<Item=String> {\n     let mut month_days = it.peekable();\n     let title = month_title(month_days.peek().unwrap().month());\n \n@@ -659,8 +663,9 @@ fn test_format_month() {\n ///\n /// Formats an iterator of months.\n ///\n-fn format_months<It>(it: It) -> impl Iterator<Item=impl Iterator<Item=String>>\n-where It: Iterator, It::Item: DateIterator {\n+fn format_months(it: impl Iterator<Item = impl DateIterator>)\n+                -> impl Iterator<Item=impl Iterator<Item=String>>\n+{\n     it.map(format_month)\n }\n "}, {"sha": "70a5a7a3f7a7486ea67691785cee2d13f499e977", "filename": "src/test/rustdoc/issue-43869.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06dff800614cab4e662ace032a2e61568db8bbdf/src%2Ftest%2Frustdoc%2Fissue-43869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-43869.rs?ref=06dff800614cab4e662ace032a2e61568db8bbdf", "patch": "@@ -55,9 +55,6 @@ pub fn test_44731_1() -> Result<Box<impl Clone>, ()> {\n     Ok(Box::new(j()))\n }\n \n-pub fn test_44731_2() -> Box<Fn(impl Clone)> {\n-    Box::new(|_: u32| {})\n-}\n \n pub fn test_44731_3() -> Box<Fn() -> impl Clone> {\n     Box::new(|| 0u32)\n@@ -78,6 +75,5 @@ pub fn test_44731_4() -> Box<Iterator<Item=impl Clone>> {\n // @has issue_43869/fn.o.html\n // @has issue_43869/fn.test_44731_0.html\n // @has issue_43869/fn.test_44731_1.html\n-// @has issue_43869/fn.test_44731_2.html\n // @has issue_43869/fn.test_44731_3.html\n // @has issue_43869/fn.test_44731_4.html"}]}