{"sha": "791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "node_id": "C_kwDOAAsO6NoAKDc5MWE3ZjIyZTMzNjBiZGJiYzdmYjdkYWI5ZjgwZTE5ZmNhNGRkMmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T13:03:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T13:03:31Z"}, "message": "Auto merge of #110598 - matthiaskrgr:rollup-0ybd9i3, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #110240 (Add `indent_style = tab` for `Makefile`s to `.editorconfig`)\n - #110545 (Add `GenericArgKind::as_{type,const,region}`)\n - #110574 ( fix out-of-date comment about rpath in bootstrap)\n - #110581 (Style fix for loongarch-linux.md)\n - #110584 (Allow overwriting the sysroot compile flag in compile tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3369694af592591fad925f1c39c7aec01dbd7aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3369694af592591fad925f1c39c7aec01dbd7aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "html_url": "https://github.com/rust-lang/rust/commit/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e23d180c1db42941b3bd32542a899e9eee7cbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e23d180c1db42941b3bd32542a899e9eee7cbcb", "html_url": "https://github.com/rust-lang/rust/commit/7e23d180c1db42941b3bd32542a899e9eee7cbcb"}, {"sha": "56d08d1bcddcba8e3fbdbb0231b992a328ee62b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d08d1bcddcba8e3fbdbb0231b992a328ee62b3", "html_url": "https://github.com/rust-lang/rust/commit/56d08d1bcddcba8e3fbdbb0231b992a328ee62b3"}], "stats": {"total": 210, "additions": 96, "deletions": 114}, "files": [{"sha": "d065fa46469fcf8e619b2de07d522694c7d3b413", "filename": ".editorconfig", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.editorconfig?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -20,3 +20,6 @@ trim_trailing_whitespace = false\n \n [*.yml]\n indent_size = 2\n+\n+[Makefile]\n+indent_style = tab"}, {"sha": "25fe3cb265d7982080fd9851453fc507a5bf3743", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -29,7 +29,6 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, AdtKind, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt, Visibility,\n };\n@@ -1182,23 +1181,21 @@ fn build_generic_type_param_di_nodes<'ll, 'tcx>(\n             let names = get_parameter_names(cx, generics);\n             let template_params: SmallVec<_> = iter::zip(substs, names)\n                 .filter_map(|(kind, name)| {\n-                    if let GenericArgKind::Type(ty) = kind.unpack() {\n+                    kind.as_type().map(|ty| {\n                         let actual_type =\n                             cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                         let actual_type_di_node = type_di_node(cx, actual_type);\n                         let name = name.as_str();\n-                        Some(unsafe {\n+                        unsafe {\n                             llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                                 DIB(cx),\n                                 None,\n                                 name.as_ptr().cast(),\n                                 name.len(),\n                                 actual_type_di_node,\n                             )\n-                        })\n-                    } else {\n-                        None\n-                    }\n+                        }\n+                    })\n                 })\n                 .collect();\n "}, {"sha": "dfc226db57b4f10e847e6b06552977e77c293db1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeVisitableExt};\n use rustc_session::config::{self, DebugInfo};\n use rustc_session::Session;\n@@ -461,23 +461,21 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 let names = get_parameter_names(cx, generics);\n                 iter::zip(substs, names)\n                     .filter_map(|(kind, name)| {\n-                        if let GenericArgKind::Type(ty) = kind.unpack() {\n+                        kind.as_type().map(|ty| {\n                             let actual_type =\n                                 cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                             let actual_type_metadata = type_di_node(cx, actual_type);\n                             let name = name.as_str();\n-                            Some(unsafe {\n+                            unsafe {\n                                 Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                                     DIB(cx),\n                                     None,\n                                     name.as_ptr().cast(),\n                                     name.len(),\n                                     actual_type_metadata,\n                                 ))\n-                            })\n-                        } else {\n-                            None\n-                        }\n+                            }\n+                        })\n                     })\n                     .collect()\n             } else {"}, {"sha": "81b49afb88391395061de37d308348f2ec0833d2", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -67,10 +67,10 @@ impl<'a, 'tcx> VirtualIndex {\n /// ref of the type.\n fn expect_dyn_trait_in_self(ty: Ty<'_>) -> ty::PolyExistentialTraitRef<'_> {\n     for arg in ty.peel_refs().walk() {\n-        if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Dynamic(data, _, _) = ty.kind() {\n-                return data.principal().expect(\"expected principal trait object\");\n-            }\n+        if let GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Dynamic(data, _, _) = ty.kind()\n+        {\n+            return data.principal().expect(\"expected principal trait object\");\n         }\n     }\n "}, {"sha": "3ba679df3ed09990d7bc07f866a6632a16fb7274", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -17,7 +17,6 @@ use rustc_infer::infer;\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt, TypeVisitableExt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n@@ -250,16 +249,12 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        if let Some(param) = param {\n-            if let GenericArgKind::Type(ty) = self.var_for_def(span, param).unpack() {\n-                return ty;\n-            }\n-            unreachable!()\n-        } else {\n-            self.next_ty_var(TypeVariableOrigin {\n+        match param {\n+            Some(param) => self.var_for_def(span, param).as_type().unwrap(),\n+            None => self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::TypeInference,\n                 span,\n-            })\n+            }),\n         }\n     }\n \n@@ -269,16 +264,12 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         param: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> Const<'tcx> {\n-        if let Some(param) = param {\n-            if let GenericArgKind::Const(ct) = self.var_for_def(span, param).unpack() {\n-                return ct;\n-            }\n-            unreachable!()\n-        } else {\n-            self.next_const_var(\n+        match param {\n+            Some(param) => self.var_for_def(span, param).as_const().unwrap(),\n+            None => self.next_const_var(\n                 ty,\n                 ConstVariableOrigin { kind: ConstVariableOriginKind::ConstInference, span },\n-            )\n+            ),\n         }\n     }\n "}, {"sha": "aeb791901bd23e7bf246cbe4228a2c99fb06b5be", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -166,10 +166,8 @@ declare_lint_pass!(BoxPointers => [BOX_POINTERS]);\n impl BoxPointers {\n     fn check_heap_type(&self, cx: &LateContext<'_>, span: Span, ty: Ty<'_>) {\n         for leaf in ty.walk() {\n-            if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n-                if leaf_ty.is_box() {\n-                    cx.emit_spanned_lint(BOX_POINTERS, span, BuiltinBoxPointers { ty });\n-                }\n+            if let GenericArgKind::Type(leaf_ty) = leaf.unpack() && leaf_ty.is_box() {\n+                cx.emit_spanned_lint(BOX_POINTERS, span, BuiltinBoxPointers { ty });\n             }\n         }\n     }"}, {"sha": "3e1b0706f6688640daf607dc623d68d39bbc5b4d", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -167,30 +167,45 @@ impl<'tcx> GenericArg<'tcx> {\n         }\n     }\n \n-    /// Unpack the `GenericArg` as a region when it is known certainly to be a region.\n-    pub fn expect_region(self) -> ty::Region<'tcx> {\n+    #[inline]\n+    pub fn as_type(self) -> Option<Ty<'tcx>> {\n+        match self.unpack() {\n+            GenericArgKind::Type(ty) => Some(ty),\n+            _ => None,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_region(self) -> Option<ty::Region<'tcx>> {\n         match self.unpack() {\n-            GenericArgKind::Lifetime(lt) => lt,\n-            _ => bug!(\"expected a region, but found another kind\"),\n+            GenericArgKind::Lifetime(re) => Some(re),\n+            _ => None,\n         }\n     }\n \n+    #[inline]\n+    pub fn as_const(self) -> Option<ty::Const<'tcx>> {\n+        match self.unpack() {\n+            GenericArgKind::Const(ct) => Some(ct),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Unpack the `GenericArg` as a region when it is known certainly to be a region.\n+    pub fn expect_region(self) -> ty::Region<'tcx> {\n+        self.as_region().unwrap_or_else(|| bug!(\"expected a region, but found another kind\"))\n+    }\n+\n     /// Unpack the `GenericArg` as a type when it is known certainly to be a type.\n     /// This is true in cases where `Substs` is used in places where the kinds are known\n     /// to be limited (e.g. in tuples, where the only parameters are type parameters).\n     pub fn expect_ty(self) -> Ty<'tcx> {\n-        match self.unpack() {\n-            GenericArgKind::Type(ty) => ty,\n-            _ => bug!(\"expected a type, but found another kind\"),\n-        }\n+        self.as_type().unwrap_or_else(|| bug!(\"expected a type, but found another kind\"))\n     }\n \n     /// Unpack the `GenericArg` as a const when it is known certainly to be a const.\n     pub fn expect_const(self) -> ty::Const<'tcx> {\n-        match self.unpack() {\n-            GenericArgKind::Const(c) => c,\n-            _ => bug!(\"expected a const, but found another kind\"),\n-        }\n+        self.as_const().unwrap_or_else(|| bug!(\"expected a const, but found another kind\"))\n     }\n \n     pub fn is_non_region_infer(self) -> bool {\n@@ -369,22 +384,17 @@ impl<'tcx> InternalSubsts<'tcx> {\n \n     #[inline]\n     pub fn types(&'tcx self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'tcx {\n-        self.iter()\n-            .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })\n+        self.iter().filter_map(|k| k.as_type())\n     }\n \n     #[inline]\n     pub fn regions(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Region<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| {\n-            if let GenericArgKind::Lifetime(lt) = k.unpack() { Some(lt) } else { None }\n-        })\n+        self.iter().filter_map(|k| k.as_region())\n     }\n \n     #[inline]\n     pub fn consts(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Const<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| {\n-            if let GenericArgKind::Const(ct) = k.unpack() { Some(ct) } else { None }\n-        })\n+        self.iter().filter_map(|k| k.as_const())\n     }\n \n     #[inline]\n@@ -400,31 +410,21 @@ impl<'tcx> InternalSubsts<'tcx> {\n     #[inline]\n     #[track_caller]\n     pub fn type_at(&self, i: usize) -> Ty<'tcx> {\n-        if let GenericArgKind::Type(ty) = self[i].unpack() {\n-            ty\n-        } else {\n-            bug!(\"expected type for param #{} in {:?}\", i, self);\n-        }\n+        self[i].as_type().unwrap_or_else(|| bug!(\"expected type for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]\n     #[track_caller]\n     pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {\n-        if let GenericArgKind::Lifetime(lt) = self[i].unpack() {\n-            lt\n-        } else {\n-            bug!(\"expected region for param #{} in {:?}\", i, self);\n-        }\n+        self[i]\n+            .as_region()\n+            .unwrap_or_else(|| bug!(\"expected region for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]\n     #[track_caller]\n     pub fn const_at(&self, i: usize) -> ty::Const<'tcx> {\n-        if let GenericArgKind::Const(ct) = self[i].unpack() {\n-            ct\n-        } else {\n-            bug!(\"expected const for param #{} in {:?}\", i, self);\n-        }\n+        self[i].as_const().unwrap_or_else(|| bug!(\"expected const for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]"}, {"sha": "f26c6de9648c080622d44a34bdbc328c7771dbd4", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, EarlyBinder, GenericArgKind, PredicateKind, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, PredicateKind, SubstsRef, Ty, TyCtxt};\n use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n use rustc_target::spec::abi::Abi;\n@@ -45,14 +45,12 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n                 // Handle calls to `transmute`\n                 if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                     let arg_ty = args[0].ty(self.body, self.tcx);\n-                    for generic_inner_ty in arg_ty.walk() {\n-                        if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                            if let Some((fn_id, fn_substs)) =\n-                                FunctionItemRefChecker::is_fn_ref(inner_ty)\n-                            {\n-                                let span = self.nth_arg_span(&args, 0);\n-                                self.emit_lint(fn_id, fn_substs, source_info, span);\n-                            }\n+                    for inner_ty in arg_ty.walk().filter_map(|arg| arg.as_type()) {\n+                        if let Some((fn_id, fn_substs)) =\n+                            FunctionItemRefChecker::is_fn_ref(inner_ty)\n+                        {\n+                            let span = self.nth_arg_span(&args, 0);\n+                            self.emit_lint(fn_id, fn_substs, source_info, span);\n                         }\n                     }\n                 } else {\n@@ -82,24 +80,22 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                 let arg_defs = self.tcx.fn_sig(def_id).subst_identity().skip_binder().inputs();\n                 for (arg_num, arg_def) in arg_defs.iter().enumerate() {\n                     // For all types reachable from the argument type in the fn sig\n-                    for generic_inner_ty in arg_def.walk() {\n-                        if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                            // If the inner type matches the type bound by `Pointer`\n-                            if inner_ty == bound_ty {\n-                                // Do a substitution using the parameters from the callsite\n-                                let subst_ty = EarlyBinder(inner_ty).subst(self.tcx, substs_ref);\n-                                if let Some((fn_id, fn_substs)) =\n-                                    FunctionItemRefChecker::is_fn_ref(subst_ty)\n-                                {\n-                                    let mut span = self.nth_arg_span(args, arg_num);\n-                                    if span.from_expansion() {\n-                                        // The operand's ctxt wouldn't display the lint since it's inside a macro so\n-                                        // we have to use the callsite's ctxt.\n-                                        let callsite_ctxt = span.source_callsite().ctxt();\n-                                        span = span.with_ctxt(callsite_ctxt);\n-                                    }\n-                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n+                    for inner_ty in arg_def.walk().filter_map(|arg| arg.as_type()) {\n+                        // If the inner type matches the type bound by `Pointer`\n+                        if inner_ty == bound_ty {\n+                            // Do a substitution using the parameters from the callsite\n+                            let subst_ty = EarlyBinder(inner_ty).subst(self.tcx, substs_ref);\n+                            if let Some((fn_id, fn_substs)) =\n+                                FunctionItemRefChecker::is_fn_ref(subst_ty)\n+                            {\n+                                let mut span = self.nth_arg_span(args, arg_num);\n+                                if span.from_expansion() {\n+                                    // The operand's ctxt wouldn't display the lint since it's inside a macro so\n+                                    // we have to use the callsite's ctxt.\n+                                    let callsite_ctxt = span.source_callsite().ctxt();\n+                                    span = span.with_ctxt(callsite_ctxt);\n                                 }\n+                                self.emit_lint(fn_id, fn_substs, source_info, span);\n                             }\n                         }\n                     }"}, {"sha": "a9152b8113f678f0e6c4d2d76ccd08d46d384738", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -814,16 +814,10 @@ fn transform_substs<'tcx>(\n     substs: SubstsRef<'tcx>,\n     options: TransformTyOptions,\n ) -> SubstsRef<'tcx> {\n-    let substs = substs.iter().map(|subst| {\n-        if let GenericArgKind::Type(ty) = subst.unpack() {\n-            if is_c_void_ty(tcx, ty) {\n-                tcx.mk_unit().into()\n-            } else {\n-                transform_ty(tcx, ty, options).into()\n-            }\n-        } else {\n-            subst\n-        }\n+    let substs = substs.iter().map(|subst| match subst.unpack() {\n+        GenericArgKind::Type(ty) if is_c_void_ty(tcx, ty) => tcx.mk_unit().into(),\n+        GenericArgKind::Type(ty) => transform_ty(tcx, ty, options).into(),\n+        _ => subst,\n     });\n     tcx.mk_substs_from_iter(substs)\n }"}, {"sha": "0d2d512b4b2ae482f344326fdc0defa515531516", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -1589,8 +1589,8 @@ impl<'a> Builder<'a> {\n         // which adds to the runtime dynamic loader path when looking for\n         // dynamic libraries. We use this by default on Unix platforms to ensure\n         // that our nightlies behave the same on Windows, that is they work out\n-        // of the box. This can be disabled, of course, but basically that's why\n-        // we're gated on RUSTC_RPATH here.\n+        // of the box. This can be disabled by setting `rpath = false` in `[rust]`\n+        // table of `config.toml`\n         //\n         // Ok, so the astute might be wondering \"why isn't `-C rpath` used\n         // here?\" and that is indeed a good question to ask. This codegen"}, {"sha": "16ccaf46b2fbddd46dbdb5156c4ac68e1d264816", "filename": "src/doc/rustc/src/platform-support/loongarch-linux.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-linux.md?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -15,6 +15,8 @@ While the integer base ABI is\u00a0implied by the\u2002machine\u2002field, the floating po\n |          f32           | The base ABI uses 32-bit FPRs for parameter passing. (lp64f)|\n |          sf            | The base ABI uses no FPR for parameter passing. (lp64s)     |\n \n+<br>\n+\n |`ABI type(Base ABI/ABI extension)`| `C library` | `kernel` |          `target tuple`          |\n |----------------------------------|-------------|----------|----------------------------------|\n |           lp64d/base             |   glibc     |  linux   | loongarch64-unknown-linux-gnu |"}, {"sha": "0c17ae798086d9f14d9b5b4ade79e5248c229f08", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "patch": "@@ -1900,8 +1900,11 @@ impl<'test> TestCx<'test> {\n         // Use a single thread for efficiency and a deterministic error message order\n         rustc.arg(\"-Zthreads=1\");\n \n-        // In stage 0, make sure we use `stage0-sysroot` instead of the bootstrap sysroot.\n-        rustc.arg(\"--sysroot\").arg(&self.config.sysroot_base);\n+        // Optionally prevent default --sysroot if specified in test compile-flags.\n+        if !self.props.compile_flags.iter().any(|flag| flag.starts_with(\"--sysroot\")) {\n+            // In stage 0, make sure we use `stage0-sysroot` instead of the bootstrap sysroot.\n+            rustc.arg(\"--sysroot\").arg(&self.config.sysroot_base);\n+        }\n \n         // Optionally prevent default --target if specified in test compile-flags.\n         let custom_target = self.props.compile_flags.iter().any(|x| x.starts_with(\"--target\"));"}]}