{"sha": "fb01dc857c2c073eedfa02ce37f6189a9972f838", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMDFkYzg1N2MyYzA3M2VlZGZhMDJjZTM3ZjYxODlhOTk3MmY4Mzg=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-10-04T15:22:01Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-04T15:22:01Z"}, "message": "do not force comments to be indented with a comment trailing a line of code (#3833)", "tree": {"sha": "b16785157d8d2c45c3267d0413765163e097ccb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16785157d8d2c45c3267d0413765163e097ccb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb01dc857c2c073eedfa02ce37f6189a9972f838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb01dc857c2c073eedfa02ce37f6189a9972f838", "html_url": "https://github.com/rust-lang/rust/commit/fb01dc857c2c073eedfa02ce37f6189a9972f838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb01dc857c2c073eedfa02ce37f6189a9972f838/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7926851bb015a31ca9174cde9214aa27aac0d7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7926851bb015a31ca9174cde9214aa27aac0d7af", "html_url": "https://github.com/rust-lang/rust/commit/7926851bb015a31ca9174cde9214aa27aac0d7af"}], "stats": {"total": 179, "additions": 150, "deletions": 29}, "files": [{"sha": "a6800b15e61110f4634b2394e938e6c94d9aeec5", "filename": "src/missed_spans.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fb01dc857c2c073eedfa02ce37f6189a9972f838/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb01dc857c2c073eedfa02ce37f6189a9972f838/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=fb01dc857c2c073eedfa02ce37f6189a9972f838", "patch": "@@ -3,10 +3,11 @@ use syntax::source_map::{BytePos, Pos, Span};\n use crate::comment::{is_last_comment_block, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileLines;\n use crate::config::FileName;\n+use crate::config::Version;\n use crate::coverage::transform_missing_snippet;\n use crate::shape::{Indent, Shape};\n use crate::source_map::LineRangeUtils;\n-use crate::utils::{count_lf_crlf, count_newlines, last_line_width, mk_sp};\n+use crate::utils::{count_lf_crlf, count_newlines, last_line_indent, last_line_width, mk_sp};\n use crate::visitor::FmtVisitor;\n \n struct SnippetStatus {\n@@ -238,6 +239,7 @@ impl<'a> FmtVisitor<'a> {\n             .next();\n \n         let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n+        let mut on_same_line = false;\n \n         let comment_indent = if fix_indent {\n             if let Some('{') = last_char {\n@@ -246,6 +248,13 @@ impl<'a> FmtVisitor<'a> {\n             let indent_str = self.block_indent.to_string(self.config);\n             self.push_str(&indent_str);\n             self.block_indent\n+        } else if self.config.version() == Version::Two && !snippet.starts_with('\\n') {\n+            // The comment appears on the same line as the previous formatted code.\n+            // Assuming that comment is logically associated with that code, we want to keep it on\n+            // the same level and avoid mixing it with possible other comment.\n+            on_same_line = true;\n+            self.push_str(\" \");\n+            Indent::from_width(self.config, last_line_indent(&self.buffer))\n         } else {\n             self.push_str(\" \");\n             Indent::from_width(self.config, last_line_width(&self.buffer))\n@@ -256,9 +265,34 @@ impl<'a> FmtVisitor<'a> {\n             self.config.max_width() - self.block_indent.width(),\n         );\n         let comment_shape = Shape::legacy(comment_width, comment_indent);\n-        let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n-            .unwrap_or_else(|| String::from(subslice));\n-        self.push_str(&comment_str);\n+\n+        if on_same_line {\n+            match subslice.find(\"\\n\") {\n+                None => {\n+                    self.push_str(subslice);\n+                }\n+                Some(offset) if offset + 1 == subslice.len() => {\n+                    self.push_str(&subslice[..offset]);\n+                }\n+                Some(offset) => {\n+                    // keep first line as is: if it were too long and wrapped, it may get mixed\n+                    // with the other lines.\n+                    let first_line = &subslice[..offset];\n+                    self.push_str(first_line);\n+                    self.push_str(&comment_indent.to_string_with_newline(self.config));\n+\n+                    let other_lines = &subslice[offset + 1..];\n+                    let comment_str =\n+                        rewrite_comment(other_lines, false, comment_shape, self.config)\n+                            .unwrap_or_else(|| String::from(other_lines));\n+                    self.push_str(&comment_str);\n+                }\n+            }\n+        } else {\n+            let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n+                .unwrap_or_else(|| String::from(subslice));\n+            self.push_str(&comment_str);\n+        }\n \n         status.last_wspace = None;\n         status.line_start = offset + subslice.len();"}, {"sha": "76af95a8c7f42e16689d0a3ef4e7dc9547b468b6", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb01dc857c2c073eedfa02ce37f6189a9972f838/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb01dc857c2c073eedfa02ce37f6189a9972f838/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=fb01dc857c2c073eedfa02ce37f6189a9972f838", "patch": "@@ -193,19 +193,26 @@ pub(crate) fn is_attributes_extendable(attrs_str: &str) -> bool {\n     !attrs_str.contains('\\n') && !last_line_contains_single_line_comment(attrs_str)\n }\n \n-// The width of the first line in s.\n+/// The width of the first line in s.\n #[inline]\n pub(crate) fn first_line_width(s: &str) -> usize {\n     unicode_str_width(s.splitn(2, '\\n').next().unwrap_or(\"\"))\n }\n \n-// The width of the last line in s.\n+/// The width of the last line in s.\n #[inline]\n pub(crate) fn last_line_width(s: &str) -> usize {\n     unicode_str_width(s.rsplitn(2, '\\n').next().unwrap_or(\"\"))\n }\n \n-// The total used width of the last line.\n+/// The indent width of the last line in s.\n+#[inline]\n+pub(crate) fn last_line_indent(s: &str) -> usize {\n+    let last_line = s.rsplitn(2, '\\n').next().unwrap_or(\"\");\n+    last_line.chars().take_while(|c| c.is_whitespace()).count()\n+}\n+\n+/// The total used width of the last line.\n #[inline]\n pub(crate) fn last_line_used_width(s: &str, offset: usize) -> usize {\n     if s.contains('\\n') {"}, {"sha": "8a1b3cd71fe739a6e496c752b3183423dd0c11ac", "filename": "src/visitor.rs", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fb01dc857c2c073eedfa02ce37f6189a9972f838/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb01dc857c2c073eedfa02ce37f6189a9972f838/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fb01dc857c2c073eedfa02ce37f6189a9972f838", "patch": "@@ -7,6 +7,7 @@ use syntax::{ast, visit};\n \n use crate::attr::*;\n use crate::comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n+use crate::config::Version;\n use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n@@ -252,32 +253,60 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n                     let mut comment_shape =\n                         Shape::indented(self.block_indent, config).comment(config);\n-                    if comment_on_same_line {\n-                        // 1 = a space before `//`\n-                        let offset_len = 1 + last_line_width(&self.buffer)\n-                            .saturating_sub(self.block_indent.width());\n-                        match comment_shape\n-                            .visual_indent(offset_len)\n-                            .sub_width(offset_len)\n-                        {\n-                            Some(shp) => comment_shape = shp,\n-                            None => comment_on_same_line = false,\n-                        }\n-                    };\n-\n-                    if comment_on_same_line {\n+                    if self.config.version() == Version::Two && comment_on_same_line {\n                         self.push_str(\" \");\n+                        // put the first line of the comment on the same line as the\n+                        // block's last line\n+                        match sub_slice.find(\"\\n\") {\n+                            None => {\n+                                self.push_str(&sub_slice);\n+                            }\n+                            Some(offset) if offset + 1 == sub_slice.len() => {\n+                                self.push_str(&sub_slice[..offset]);\n+                            }\n+                            Some(offset) => {\n+                                let first_line = &sub_slice[..offset];\n+                                self.push_str(first_line);\n+                                self.push_str(&self.block_indent.to_string_with_newline(config));\n+\n+                                // put the other lines below it, shaping it as needed\n+                                let other_lines = &sub_slice[offset + 1..];\n+                                let comment_str =\n+                                    rewrite_comment(other_lines, false, comment_shape, config);\n+                                match comment_str {\n+                                    Some(ref s) => self.push_str(s),\n+                                    None => self.push_str(other_lines),\n+                                }\n+                            }\n+                        }\n                     } else {\n-                        if count_newlines(snippet_in_between) >= 2 || extra_newline {\n-                            self.push_str(\"\\n\");\n+                        if comment_on_same_line {\n+                            // 1 = a space before `//`\n+                            let offset_len = 1 + last_line_width(&self.buffer)\n+                                .saturating_sub(self.block_indent.width());\n+                            match comment_shape\n+                                .visual_indent(offset_len)\n+                                .sub_width(offset_len)\n+                            {\n+                                Some(shp) => comment_shape = shp,\n+                                None => comment_on_same_line = false,\n+                            }\n+                        };\n+\n+                        if comment_on_same_line {\n+                            self.push_str(\" \");\n+                        } else {\n+                            if count_newlines(snippet_in_between) >= 2 || extra_newline {\n+                                self.push_str(\"\\n\");\n+                            }\n+                            self.push_str(&self.block_indent.to_string_with_newline(config));\n                         }\n-                        self.push_str(&self.block_indent.to_string_with_newline(config));\n-                    }\n \n-                    let comment_str = rewrite_comment(&sub_slice, false, comment_shape, config);\n-                    match comment_str {\n-                        Some(ref s) => self.push_str(s),\n-                        None => self.push_str(&sub_slice),\n+                        let comment_str = rewrite_comment(&sub_slice, false, comment_shape, config);\n+                        match comment_str {\n+                            Some(ref s) => self.push_str(s),\n+                            None => self.push_str(&sub_slice),\n+                        }\n                     }\n                 }\n                 CodeCharKind::Normal if skip_normal(&sub_slice) => {"}, {"sha": "7845f713b8a934ab3d3930ff624293bcdbf5da00", "filename": "tests/source/trailing_comments.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb01dc857c2c073eedfa02ce37f6189a9972f838/tests%2Fsource%2Ftrailing_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb01dc857c2c073eedfa02ce37f6189a9972f838/tests%2Fsource%2Ftrailing_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrailing_comments.rs?ref=fb01dc857c2c073eedfa02ce37f6189a9972f838", "patch": "@@ -0,0 +1,21 @@\n+// rustfmt-version: Two\n+// rustfmt-wrap_comments: true\n+\n+pub const IFF_MULTICAST: ::c_int = 0x0000000800; // Supports multicast\n+// Multicast using broadcst. add.\n+\n+pub const SQ_CRETAB: u16 = 0x000e; // CREATE TABLE\n+pub const SQ_DRPTAB: u16 = 0x000f; // DROP TABLE\n+pub const SQ_CREIDX: u16 = 0x0010; // CREATE INDEX\n+//const SQ_DRPIDX: u16 = 0x0011;\t// DROP INDEX\n+//const SQ_GRANT: u16 = 0x0012;\t// GRANT\n+//const SQ_REVOKE: u16 = 0x0013;\t// REVOKE\n+\n+fn foo() {\n+    let f = bar(); // Donec consequat mi. Quisque vitae dolor. Integer lobortis. Maecenas id nulla. Lorem.\n+    // Id turpis. Nam posuere lectus vitae nibh. Etiam tortor orci, sagittis malesuada, rhoncus quis, hendrerit eget, libero. Quisque commodo nulla at nunc. Mauris consequat, enim vitae venenatis sollicitudin, dolor orci bibendum enim, a sagittis nulla nunc quis elit. Phasellus augue. Nunc suscipit, magna tincidunt lacinia faucibus, lacus tellus ornare purus, a pulvinar lacus orci eget nibh.  Maecenas sed nibh non lacus tempor faucibus. In hac habitasse platea dictumst. Vivamus a orci at nulla tristique condimentum. Donec arcu quam, dictum accumsan, convallis accumsan, cursus sit amet, ipsum.  In pharetra sagittis nunc.\n+    let b = baz();\n+\n+    let normalized = self.ctfont.all_traits().normalized_weight(); // [-1.0, 1.0]\n+    // TODO(emilio): It may make sense to make this range [.01, 10.0], to align with css-fonts-4's range of [1, 1000].\n+}"}, {"sha": "eba943042ad0a0a6e44c9a11109012d7ba2f89ad", "filename": "tests/target/trailing_comments.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fb01dc857c2c073eedfa02ce37f6189a9972f838/tests%2Ftarget%2Ftrailing_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb01dc857c2c073eedfa02ce37f6189a9972f838/tests%2Ftarget%2Ftrailing_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrailing_comments.rs?ref=fb01dc857c2c073eedfa02ce37f6189a9972f838", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-version: Two\n+// rustfmt-wrap_comments: true\n+\n+pub const IFF_MULTICAST: ::c_int = 0x0000000800; // Supports multicast\n+// Multicast using broadcst. add.\n+\n+pub const SQ_CRETAB: u16 = 0x000e; // CREATE TABLE\n+pub const SQ_DRPTAB: u16 = 0x000f; // DROP TABLE\n+pub const SQ_CREIDX: u16 = 0x0010; // CREATE INDEX\n+//const SQ_DRPIDX: u16 = 0x0011;\t// DROP INDEX\n+//const SQ_GRANT: u16 = 0x0012;\t// GRANT\n+//const SQ_REVOKE: u16 = 0x0013;\t// REVOKE\n+\n+fn foo() {\n+    let f = bar(); // Donec consequat mi. Quisque vitae dolor. Integer lobortis. Maecenas id nulla. Lorem.\n+    // Id turpis. Nam posuere lectus vitae nibh. Etiam tortor orci, sagittis\n+    // malesuada, rhoncus quis, hendrerit eget, libero. Quisque commodo nulla at\n+    // nunc. Mauris consequat, enim vitae venenatis sollicitudin, dolor orci\n+    // bibendum enim, a sagittis nulla nunc quis elit. Phasellus augue. Nunc\n+    // suscipit, magna tincidunt lacinia faucibus, lacus tellus ornare purus, a\n+    // pulvinar lacus orci eget nibh.  Maecenas sed nibh non lacus tempor faucibus.\n+    // In hac habitasse platea dictumst. Vivamus a orci at nulla tristique\n+    // condimentum. Donec arcu quam, dictum accumsan, convallis accumsan, cursus sit\n+    // amet, ipsum.  In pharetra sagittis nunc.\n+    let b = baz();\n+\n+    let normalized = self.ctfont.all_traits().normalized_weight(); // [-1.0, 1.0]\n+    // TODO(emilio): It may make sense to make this range [.01, 10.0], to align\n+    // with css-fonts-4's range of [1, 1000].\n+}"}]}