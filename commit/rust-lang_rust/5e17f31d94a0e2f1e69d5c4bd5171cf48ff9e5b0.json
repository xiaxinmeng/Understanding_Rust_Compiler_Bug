{"sha": "5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTdmMzFkOTRhMGUyZjFlNjlkNWM0YmQ1MTcxY2Y0OGZmOWU1YjA=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-04T17:39:15Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-12T19:20:56Z"}, "message": "Replace min/max_value() with MIN/MAX in integer docs", "tree": {"sha": "fcfcadc0654a7f3e10c308800bda8f03b65998c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcfcadc0654a7f3e10c308800bda8f03b65998c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0", "html_url": "https://github.com/rust-lang/rust/commit/5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056", "html_url": "https://github.com/rust-lang/rust/commit/cf255c6dc1a9c41bf8e98865d85f8577ce8d2056"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "50d967dba633853dec633569a47abf47e9bda65d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5e17f31d94a0e2f1e69d5c4bd5171cf48ff9e5b0", "patch": "@@ -336,7 +336,7 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX.count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n@@ -673,8 +673,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT),\n-\"::max_value() - 2).checked_add(1), Some(\", stringify!($SelfT), \"::max_value() - 1));\n-assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\",\n+\"::MAX - 2).checked_add(1), Some(\", stringify!($SelfT), \"::MAX - 1));\n+assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -698,8 +698,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 2).checked_sub(1), Some(\", stringify!($SelfT), \"::min_value() + 1));\n-assert_eq!((\", stringify!($SelfT), \"::min_value() + 2).checked_sub(3), None);\",\n+\"::MIN + 2).checked_sub(1), Some(\", stringify!($SelfT), \"::MIN + 1));\n+assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -723,8 +723,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(\", stringify!($SelfT),\n-\"::max_value().checked_mul(1), Some(\", stringify!($SelfT), \"::max_value()));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\",\n+\"::MAX.checked_mul(1), Some(\", stringify!($SelfT), \"::MAX));\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -748,8 +748,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 1).checked_div(-1), Some(\", stringify!($Max), \"));\n-assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div(-1), None);\n+\"::MIN + 1).checked_div(-1), Some(\", stringify!($Max), \"));\n+assert_eq!(\", stringify!($SelfT), \"::MIN.checked_div(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\",\n $EndFeature, \"\n ```\"),\n@@ -778,8 +778,8 @@ Basic usage:\n \n ```\n assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 1).checked_div_euclid(-1), Some(\", stringify!($Max), \"));\n-assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n+\"::MIN + 1).checked_div_euclid(-1), Some(\", stringify!($Max), \"));\n+assert_eq!(\", stringify!($SelfT), \"::MIN.checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n@@ -959,7 +959,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(8\", stringify!($SelfT), \".checked_pow(2), Some(64));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_pow(2), None);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1000,10 +1000,10 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n-\"::max_value());\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_add(-1), \", stringify!($SelfT),\n-\"::min_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_add(100), \", stringify!($SelfT),\n+\"::MAX);\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_add(-1), \", stringify!($SelfT),\n+\"::MIN);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1027,10 +1027,10 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n-\"::min_value());\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_sub(-1), \", stringify!($SelfT),\n-\"::max_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_sub(100), \", stringify!($SelfT),\n+\"::MIN);\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_sub(-1), \", stringify!($SelfT),\n+\"::MAX);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1055,10 +1055,10 @@ Basic usage:\n \", $Feature, \"#![feature(saturating_neg)]\n assert_eq!(100\", stringify!($SelfT), \".saturating_neg(), -100);\n assert_eq!((-100\", stringify!($SelfT), \").saturating_neg(), 100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_neg(), \", stringify!($SelfT),\n-\"::max_value());\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_neg(), \", stringify!($SelfT),\n-\"::min_value() + 1);\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_neg(), \", stringify!($SelfT),\n+\"::MAX);\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_neg(), \", stringify!($SelfT),\n+\"::MIN + 1);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1082,10 +1082,10 @@ Basic usage:\n \", $Feature, \"#![feature(saturating_neg)]\n assert_eq!(100\", stringify!($SelfT), \".saturating_abs(), 100);\n assert_eq!((-100\", stringify!($SelfT), \").saturating_abs(), 100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_abs(), \", stringify!($SelfT),\n-\"::max_value());\n-assert_eq!((\", stringify!($SelfT), \"::min_value() + 1).saturating_abs(), \", stringify!($SelfT),\n-\"::max_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_abs(), \", stringify!($SelfT),\n+\"::MAX);\n+assert_eq!((\", stringify!($SelfT), \"::MIN + 1).saturating_abs(), \", stringify!($SelfT),\n+\"::MAX);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1171,8 +1171,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_add(27), 127);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!($SelfT),\n-\"::min_value() + 1);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_add(2), \", stringify!($SelfT),\n+\"::MIN + 1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1195,8 +1195,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(0\", stringify!($SelfT), \".wrapping_sub(127), -127);\n-assert_eq!((-2\", stringify!($SelfT), \").wrapping_sub(\", stringify!($SelfT), \"::max_value()), \",\n-stringify!($SelfT), \"::max_value());\",\n+assert_eq!((-2\", stringify!($SelfT), \").wrapping_sub(\", stringify!($SelfT), \"::MAX), \",\n+stringify!($SelfT), \"::MAX);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1367,8 +1367,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_neg(), -100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().wrapping_neg(), \", stringify!($SelfT),\n-\"::min_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.wrapping_neg(), \", stringify!($SelfT),\n+\"::MIN);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n@@ -1458,8 +1458,8 @@ Basic usage:\n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_abs(), 100);\n assert_eq!((-100\", stringify!($SelfT), \").wrapping_abs(), 100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().wrapping_abs(), \", stringify!($SelfT),\n-\"::min_value());\n+assert_eq!(\", stringify!($SelfT), \"::MIN.wrapping_abs(), \", stringify!($SelfT),\n+\"::MIN);\n assert_eq!((-128i8).wrapping_abs() as u8, 128);\",\n $EndFeature, \"\n ```\"),\n@@ -1831,8 +1831,8 @@ Basic usage:\n ```\n \", $Feature, \"assert_eq!(10\", stringify!($SelfT), \".overflowing_abs(), (10, false));\n assert_eq!((-10\", stringify!($SelfT), \").overflowing_abs(), (10, false));\n-assert_eq!((\", stringify!($SelfT), \"::min_value()).overflowing_abs(), (\", stringify!($SelfT),\n-\"::min_value(), true));\",\n+assert_eq!((\", stringify!($SelfT), \"::MIN).overflowing_abs(), (\", stringify!($SelfT),\n+\"::MIN, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n@@ -2028,10 +2028,10 @@ assert_eq!((-a).rem_euclid(-b), 1);\n \n # Overflow behavior\n \n-The absolute value of `\", stringify!($SelfT), \"::min_value()` cannot be represented as an\n+The absolute value of `\", stringify!($SelfT), \"::MIN` cannot be represented as an\n `\", stringify!($SelfT), \"`, and attempting to calculate it will cause an overflow. This means that\n code in debug mode will trigger a panic on this case and optimized code will return `\",\n-stringify!($SelfT), \"::min_value()` without a panic.\n+stringify!($SelfT), \"::MIN` without a panic.\n \n # Examples\n \n@@ -2505,7 +2505,7 @@ assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX.count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n@@ -2523,7 +2523,7 @@ Basic usage:\n Basic usage:\n \n ```\n-\", $Feature, \"let n = \", stringify!($SelfT), \"::max_value() >> 2;\n+\", $Feature, \"let n = \", stringify!($SelfT), \"::MAX >> 2;\n \n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n@@ -2565,7 +2565,7 @@ Basic usage:\n \n ```\n \", $Feature, \"#![feature(leading_trailing_ones)]\n-let n = !(\", stringify!($SelfT), \"::max_value() >> 2);\n+let n = !(\", stringify!($SelfT), \"::MAX >> 2);\n \n assert_eq!(n.leading_ones(), 2);\", $EndFeature, \"\n ```\"),\n@@ -2839,9 +2839,9 @@ if overflow occurred.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(1), \",\n-\"Some(\", stringify!($SelfT), \"::max_value() - 1));\n-assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(1), \",\n+\"Some(\", stringify!($SelfT), \"::MAX - 1));\n+assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n@@ -2887,7 +2887,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".checked_mul(1), Some(5));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\", $EndFeature, \"\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n@@ -3087,7 +3087,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".checked_pow(5), Some(32));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n@@ -3224,7 +3224,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(200\", stringify!($SelfT), \".wrapping_add(55), 255);\n-assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::max_value()), 199);\",\n+assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::MAX), 199);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3247,7 +3247,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(100), 0);\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::max_value()), 101);\",\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::MAX), 101);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -4029,7 +4029,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT),\n \".checked_next_power_of_two(), Some(2));\n assert_eq!(3\", stringify!($SelfT), \".checked_next_power_of_two(), Some(4));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_next_power_of_two(), None);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_next_power_of_two(), None);\",\n $EndFeature, \"\n ```\"),\n             #[inline]\n@@ -4053,7 +4053,7 @@ Basic usage:\n \", $Feature, \"\n assert_eq!(2\", stringify!($SelfT), \".wrapping_next_power_of_two(), 2);\n assert_eq!(3\", stringify!($SelfT), \".wrapping_next_power_of_two(), 4);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_next_power_of_two(), 0);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_next_power_of_two(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\","}]}