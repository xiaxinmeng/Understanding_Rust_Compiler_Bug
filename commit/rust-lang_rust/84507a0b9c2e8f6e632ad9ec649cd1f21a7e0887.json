{"sha": "84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTA3YTBiOWMyZThmNmU2MzJhZDllYzY0OWNkMWYyMWE3ZTA4ODc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T18:04:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T18:04:38Z"}, "message": "Merge #9317\n\n9317: internal: add From to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0c7bf1f81bd6c6b9b57d0c34acc6dfd16af0b23a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7bf1f81bd6c6b9b57d0c34acc6dfd16af0b23a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy462CRBK7hj4Ov3rIwAAdLoIACPOatCBt8Bz8nGWywbXNOG2\no7Y/EmprsWoVr3TD3h9dE2r2RaqTDiSqignC7XzUshdPlRQUhM62mM6oQdgtMohk\nv7mcZKKjZoi6BVQUWdJtkB6QpweyU9dDSyCxtx5UJ51gsDT4e8woCLkZZgNeoDfK\nCa8sGdcl2SkYSd+8pTUCrOmwv+JP3DRATYD/k8Z2y6Dl6plJxwuDDHefaqZ4HYzq\nmEJ67aIn2cjYCZiaUCi2yfAMvU1HK5RodcWHYLY1otUZYMiXu1odKwg2zAKocf80\nFGDPDXnzPK69HymrLl5bW8TbKbwc7XqkGHXnqCPlBXl6CcppWjsOrw9gJDhABzE=\n=1LAA\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c7bf1f81bd6c6b9b57d0c34acc6dfd16af0b23a\nparent 53d26164c6608fd5149180c91fa49c7cde79706f\nparent ca99aaa053c7915633a1b2dadd40ad0deb3a3ac3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623953078 +0000\ncommitter GitHub <noreply@github.com> 1623953078 +0000\n\nMerge #9317\n\n9317: internal: add From to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "html_url": "https://github.com/rust-lang/rust/commit/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d26164c6608fd5149180c91fa49c7cde79706f", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d26164c6608fd5149180c91fa49c7cde79706f", "html_url": "https://github.com/rust-lang/rust/commit/53d26164c6608fd5149180c91fa49c7cde79706f"}, {"sha": "ca99aaa053c7915633a1b2dadd40ad0deb3a3ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca99aaa053c7915633a1b2dadd40ad0deb3a3ac3", "html_url": "https://github.com/rust-lang/rust/commit/ca99aaa053c7915633a1b2dadd40ad0deb3a3ac3"}], "stats": {"total": 198, "additions": 129, "deletions": 69}, "files": [{"sha": "01dd0c0dae7bbbbb870f012119caf7d11873786e", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "patch": "@@ -3016,8 +3016,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 246..428,\n-                                    focus_range: 285..291,\n+                                    full_range: 247..429,\n+                                    focus_range: 286..292,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "79a0c487985cb87881db745deabb7f5ef93e1f94", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "patch": "@@ -6,6 +6,8 @@ use syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n+// FIXME: this should be a diagnostic\n+\n // Assist: convert_into_to_from\n //\n // Converts an Into impl to an equivalent From impl.\n@@ -114,12 +116,14 @@ pub(crate) fn convert_into_to_from(acc: &mut Assists, ctx: &AssistContext) -> Op\n mod tests {\n     use super::*;\n \n-    use crate::tests::check_assist;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn convert_into_to_from_converts_a_struct() {\n-        check_convert_into_to_from(\n+        check_assist(\n+            convert_into_to_from,\n             r#\"\n+//- minicore: from\n struct Thing {\n     a: String,\n     b: usize\n@@ -154,8 +158,10 @@ impl From<usize> for Thing {\n \n     #[test]\n     fn convert_into_to_from_converts_enums() {\n-        check_convert_into_to_from(\n+        check_assist(\n+            convert_into_to_from,\n             r#\"\n+//- minicore: from\n enum Thing {\n     Foo(String),\n     Bar(String)\n@@ -190,8 +196,10 @@ impl From<Thing> for String {\n \n     #[test]\n     fn convert_into_to_from_on_enum_with_lifetimes() {\n-        check_convert_into_to_from(\n+        check_assist(\n+            convert_into_to_from,\n             r#\"\n+//- minicore: from\n enum Thing<'a> {\n     Foo(&'a str),\n     Bar(&'a str)\n@@ -226,8 +234,10 @@ impl<'a> From<Thing<'a>> for &'a str {\n \n     #[test]\n     fn convert_into_to_from_works_on_references() {\n-        check_convert_into_to_from(\n+        check_assist(\n+            convert_into_to_from,\n             r#\"\n+//- minicore: from\n struct Thing(String);\n \n impl $0core::convert::Into<String> for &Thing {\n@@ -250,8 +260,10 @@ impl From<&Thing> for String {\n \n     #[test]\n     fn convert_into_to_from_works_on_qualified_structs() {\n-        check_convert_into_to_from(\n+        check_assist(\n+            convert_into_to_from,\n             r#\"\n+//- minicore: from\n mod things {\n     pub struct Thing(String);\n     pub struct BetterThing(String);\n@@ -280,8 +292,10 @@ impl From<&things::Thing> for things::BetterThing {\n \n     #[test]\n     fn convert_into_to_from_works_on_qualified_enums() {\n-        check_convert_into_to_from(\n+        check_assist(\n+            convert_into_to_from,\n             r#\"\n+//- minicore: from\n mod things {\n     pub enum Thing {\n         A(String)\n@@ -323,10 +337,12 @@ impl From<&things::Thing> for things::BetterThing {\n     #[test]\n     fn convert_into_to_from_not_applicable_on_any_trait_named_into() {\n         check_assist_not_applicable(\n+            convert_into_to_from,\n             r#\"\n-pub trait Into<T> {{\n+//- minicore: from\n+pub trait Into<T> {\n     pub fn into(self) -> T;\n-}}\n+}\n \n struct Thing {\n     a: String,\n@@ -342,14 +358,4 @@ impl $0Into<Thing> for String {\n \"#,\n         );\n     }\n-\n-    fn check_convert_into_to_from(before: &str, after: &str) {\n-        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n-        check_assist(convert_into_to_from, before, after);\n-    }\n-\n-    fn check_assist_not_applicable(before: &str) {\n-        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n-        crate::tests::check_assist_not_applicable(convert_into_to_from, before);\n-    }\n }"}, {"sha": "8727be07dd7268bcd91cd937443ce035d1405662", "filename": "crates/ide_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 74, "deletions": 31, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "patch": "@@ -110,68 +110,91 @@ mod tests {\n     fn test_generate_from_impl_for_enum() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            \"enum A { $0One(u32) }\",\n-            r#\"enum A { One(u32) }\n+            r#\"\n+//- minicore: from\n+enum A { $0One(u32) }\n+\"#,\n+            r#\"\n+enum A { One(u32) }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n         Self::One(v)\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_generate_from_impl_for_enum_complicated_path() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            r#\"enum A { $0One(foo::bar::baz::Boo) }\"#,\n-            r#\"enum A { One(foo::bar::baz::Boo) }\n+            r#\"\n+//- minicore: from\n+enum A { $0One(foo::bar::baz::Boo) }\n+\"#,\n+            r#\"\n+enum A { One(foo::bar::baz::Boo) }\n \n impl From<foo::bar::baz::Boo> for A {\n     fn from(v: foo::bar::baz::Boo) -> Self {\n         Self::One(v)\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        let fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n-        check_assist_not_applicable(generate_from_impl_for_enum, &fixture)\n-    }\n-\n     #[test]\n     fn test_add_from_impl_no_element() {\n-        check_not_applicable(\"enum A { $0One }\");\n+        check_assist_not_applicable(\n+            generate_from_impl_for_enum,\n+            r#\"\n+//- minicore: from\n+enum A { $0One }\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_add_from_impl_more_than_one_element_in_tuple() {\n-        check_not_applicable(\"enum A { $0One(u32, String) }\");\n+        check_assist_not_applicable(\n+            generate_from_impl_for_enum,\n+            r#\"\n+//- minicore: from\n+enum A { $0One(u32, String) }\n+\"#,\n+        );\n     }\n \n     #[test]\n     fn test_add_from_impl_struct_variant() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            \"enum A { $0One { x: u32 } }\",\n-            r#\"enum A { One { x: u32 } }\n+            r#\"\n+//- minicore: from\n+enum A { $0One { x: u32 } }\n+\"#,\n+            r#\"\n+enum A { One { x: u32 } }\n \n impl From<u32> for A {\n     fn from(x: u32) -> Self {\n         Self::One { x }\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_add_from_impl_already_exists() {\n         cov_mark::check!(test_add_from_impl_already_exists);\n-        check_not_applicable(\n+        check_assist_not_applicable(\n+            generate_from_impl_for_enum,\n             r#\"\n+//- minicore: from\n enum A { $0One(u32), }\n \n impl From<u32> for A {\n@@ -187,7 +210,9 @@ impl From<u32> for A {\n     fn test_add_from_impl_different_variant_impl_exists() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            r#\"enum A { $0One(u32), Two(String), }\n+            r#\"\n+//- minicore: from\n+enum A { $0One(u32), Two(String), }\n \n impl From<String> for A {\n     fn from(v: String) -> Self {\n@@ -197,8 +222,10 @@ impl From<String> for A {\n \n pub trait From<T> {\n     fn from(T) -> Self;\n-}\"#,\n-            r#\"enum A { One(u32), Two(String), }\n+}\n+\"#,\n+            r#\"\n+enum A { One(u32), Two(String), }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n@@ -214,52 +241,68 @@ impl From<String> for A {\n \n pub trait From<T> {\n     fn from(T) -> Self;\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_add_from_impl_static_str() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            \"enum A { $0One(&'static str) }\",\n-            r#\"enum A { One(&'static str) }\n+            r#\"\n+//- minicore: from\n+enum A { $0One(&'static str) }\n+\"#,\n+            r#\"\n+enum A { One(&'static str) }\n \n impl From<&'static str> for A {\n     fn from(v: &'static str) -> Self {\n         Self::One(v)\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_add_from_impl_generic_enum() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            \"enum Generic<T, U: Clone> { $0One(T), Two(U) }\",\n-            r#\"enum Generic<T, U: Clone> { One(T), Two(U) }\n+            r#\"\n+//- minicore: from\n+enum Generic<T, U: Clone> { $0One(T), Two(U) }\n+\"#,\n+            r#\"\n+enum Generic<T, U: Clone> { One(T), Two(U) }\n \n impl<T, U: Clone> From<T> for Generic<T, U> {\n     fn from(v: T) -> Self {\n         Self::One(v)\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_add_from_impl_with_lifetime() {\n         check_assist(\n             generate_from_impl_for_enum,\n-            \"enum Generic<'a> { $0One(&'a i32) }\",\n-            r#\"enum Generic<'a> { One(&'a i32) }\n+            r#\"\n+//- minicore: from\n+enum Generic<'a> { $0One(&'a i32) }\n+\"#,\n+            r#\"\n+enum Generic<'a> { One(&'a i32) }\n \n impl<'a> From<&'a i32> for Generic<'a> {\n     fn from(v: &'a i32) -> Self {\n         Self::One(v)\n     }\n-}\"#,\n+}\n+\"#,\n         );\n     }\n }"}, {"sha": "fa4fc530747b1cacf7c3939a0aa8e69f038e2ed4", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "patch": "@@ -10,23 +10,6 @@ pub mod cmp {\n     }\n }\n \n-pub mod convert {\n-    pub trait From<T> {\n-        fn from(t: T) -> Self;\n-    }\n-\n-    pub trait Into<T> {\n-        pub fn into(self) -> T;\n-    }\n-}\n-\n-pub mod option {\n-    pub enum Option<T> {\n-        None,\n-        Some(T),\n-    }\n-}\n-\n pub mod prelude {\n     pub mod rust_2018 {\n         pub use crate::{"}, {"sha": "a5a7c2f7df3b40d9d972febdfd5db891322020d0", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "patch": "@@ -23,6 +23,7 @@\n //!     iterator: option\n //!     iterators: iterator\n //!     default: sized\n+//!     from: sized\n \n pub mod marker {\n     // region:sized\n@@ -46,6 +47,32 @@ pub mod default {\n }\n // endregion:default\n \n+// region:from\n+pub mod convert {\n+    pub trait From<T>: Sized {\n+        fn from(_: T) -> Self;\n+    }\n+    pub trait Into<T>: Sized {\n+        fn into(self) -> T;\n+    }\n+\n+    impl<T, U> Into<U> for T\n+    where\n+        U: From<T>,\n+    {\n+        fn into(self) -> U {\n+            U::from(self)\n+        }\n+    }\n+\n+    impl<T> From<T> for T {\n+        fn from(t: T) -> T {\n+            t\n+        }\n+    }\n+}\n+// endregion:from\n+\n pub mod ops {\n     // region:coerce_unsized\n     mod unsize {\n@@ -324,6 +351,7 @@ pub mod prelude {\n             ops::{Fn, FnMut, FnOnce},           // :fn\n             option::Option::{self, None, Some}, // :option\n             result::Result::{self, Err, Ok},    // :result\n+            convert::{From, Into},    // :from\n         };\n     }\n "}]}