{"sha": "08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YzIwYmIwMTc3NTZhMjcxZGQ5NGRjMGYxZmZmZTFmNzdlYzU2YzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-18T16:13:47Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-18T16:13:47Z"}, "message": "Add missing Debug implementation for librand structs", "tree": {"sha": "38bf1f81bb54ed0bb7728be92fcfebde654b77fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bf1f81bb54ed0bb7728be92fcfebde654b77fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "html_url": "https://github.com/rust-lang/rust/commit/08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8af93f0901c336e873ce18274026d0fd9bc7c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8af93f0901c336e873ce18274026d0fd9bc7c1f", "html_url": "https://github.com/rust-lang/rust/commit/c8af93f0901c336e873ce18274026d0fd9bc7c1f"}], "stats": {"total": 278, "additions": 275, "deletions": 3}, "files": [{"sha": "e355eb44e4667f292e4265e9393e09c07d13b5a4", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -10,6 +10,7 @@\n \n //! The ChaCha random number generator.\n \n+use core::fmt;\n use {Rand, Rng, SeedableRng};\n \n const KEY_WORDS: usize = 8; // 8 words for the 256-bit key\n@@ -32,6 +33,16 @@ pub struct ChaChaRng {\n     index: usize, // Index into state\n }\n \n+impl fmt::Debug for ChaChaRng {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"ChaChaRng\")\n+         .field(\"buffer\", &self.buffer.iter())\n+         .field(\"state\", &self.state.iter())\n+         .field(\"index\", &self.index)\n+         .finish()\n+    }\n+}\n+\n static EMPTY: ChaChaRng = ChaChaRng {\n     buffer: [0; STATE_WORDS],\n     state: [0; STATE_WORDS],"}, {"sha": "3337cc2a6273cf78731a7ad12b3f2ef46e91b543", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -10,6 +10,8 @@\n \n //! The exponential distribution.\n \n+use core::fmt;\n+\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n@@ -55,6 +57,14 @@ impl Rand for Exp1 {\n     }\n }\n \n+impl fmt::Debug for Exp1 {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Exp1\")\n+         .field(&self.0)\n+         .finish()\n+    }\n+}\n+\n /// The exponential distribution `Exp(lambda)`.\n ///\n /// This distribution has density function: `f(x) = lambda *\n@@ -79,13 +89,22 @@ impl Sample<f64> for Exp {\n         self.ind_sample(rng)\n     }\n }\n+\n impl IndependentSample<f64> for Exp {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         let Exp1(n) = rng.gen::<Exp1>();\n         n * self.lambda_inverse\n     }\n }\n \n+impl fmt::Debug for Exp {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Exp\")\n+         .field(\"lambda_inverse\", &self.lambda_inverse)\n+         .finish()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use distributions::{IndependentSample, Sample};"}, {"sha": "e024b62adfb15c4756b395215e7abead5016e77c", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -10,6 +10,8 @@\n \n //! The Gamma and derived distributions.\n \n+use core::fmt;\n+\n use self::GammaRepr::*;\n use self::ChiSquaredRepr::*;\n \n@@ -44,6 +46,19 @@ pub struct Gamma {\n     repr: GammaRepr,\n }\n \n+impl fmt::Debug for Gamma {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Gamma\")\n+         .field(\"repr\",\n+                &match self.repr {\n+                    GammaRepr::Large(_) => \"Large\",\n+                    GammaRepr::One(_) => \"Exp\",\n+                    GammaRepr::Small(_) => \"Small\"\n+                })\n+          .finish()\n+    }\n+}\n+\n enum GammaRepr {\n     Large(GammaLargeShape),\n     One(Exp),\n@@ -182,6 +197,18 @@ pub struct ChiSquared {\n     repr: ChiSquaredRepr,\n }\n \n+impl fmt::Debug for ChiSquared {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"ChiSquared\")\n+         .field(\"repr\",\n+                &match self.repr {\n+                    ChiSquaredRepr::DoFExactlyOne => \"DoFExactlyOne\",\n+                    ChiSquaredRepr::DoFAnythingElse(_) => \"DoFAnythingElse\",\n+                })\n+         .finish()\n+    }\n+}\n+\n enum ChiSquaredRepr {\n     // k == 1, Gamma(alpha, ..) is particularly slow for alpha < 1,\n     // e.g. when alpha = 1/2 as it would be for this case, so special-\n@@ -203,11 +230,13 @@ impl ChiSquared {\n         ChiSquared { repr: repr }\n     }\n }\n+\n impl Sample<f64> for ChiSquared {\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n         self.ind_sample(rng)\n     }\n }\n+\n impl IndependentSample<f64> for ChiSquared {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         match self.repr {\n@@ -248,17 +277,29 @@ impl FisherF {\n         }\n     }\n }\n+\n impl Sample<f64> for FisherF {\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n         self.ind_sample(rng)\n     }\n }\n+\n impl IndependentSample<f64> for FisherF {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         self.numer.ind_sample(rng) / self.denom.ind_sample(rng) * self.dof_ratio\n     }\n }\n \n+impl fmt::Debug for FisherF {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"FisherF\")\n+         .field(\"numer\", &self.numer)\n+         .field(\"denom\", &self.denom)\n+         .field(\"dof_ratio\", &self.dof_ratio)\n+         .finish()\n+    }\n+}\n+\n /// The Student t distribution, `t(nu)`, where `nu` is the degrees of\n /// freedom.\n pub struct StudentT {\n@@ -277,18 +318,29 @@ impl StudentT {\n         }\n     }\n }\n+\n impl Sample<f64> for StudentT {\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n         self.ind_sample(rng)\n     }\n }\n+\n impl IndependentSample<f64> for StudentT {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         let StandardNormal(norm) = rng.gen::<StandardNormal>();\n         norm * (self.dof / self.chi.ind_sample(rng)).sqrt()\n     }\n }\n \n+impl fmt::Debug for StudentT {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"StudentT\")\n+         .field(\"chi\", &self.chi)\n+         .field(\"dof\", &self.dof)\n+         .finish()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use distributions::{IndependentSample, Sample};"}, {"sha": "fb0c9f17cf36737e78f8cd39501b6115800b1ea5", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -17,6 +17,8 @@\n //! internally. The `IndependentSample` trait is for generating values\n //! that do not need to record state.\n \n+use core::fmt;\n+\n #[cfg(not(test))] // only necessary for no_std\n use core::num::Float;\n \n@@ -78,6 +80,12 @@ impl<Sup: Rand> IndependentSample<Sup> for RandSample<Sup> {\n     }\n }\n \n+impl<Sup> fmt::Debug for RandSample<Sup> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"RandSample { .. }\")\n+    }\n+}\n+\n /// A value with a particular weight for use with `WeightedChoice`.\n pub struct Weighted<T> {\n     /// The numerical weight of this item\n@@ -86,6 +94,21 @@ pub struct Weighted<T> {\n     pub item: T,\n }\n \n+impl<T> fmt::Debug for Weighted<T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Weighted\")\n+    }\n+}\n+\n+impl<T: fmt::Debug> fmt::Debug for Weighted<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Weighted\")\n+         .field(\"weight\", &self.weight)\n+         .field(\"item\", &self.item)\n+         .finish()\n+    }\n+}\n+\n /// A distribution that selects from a finite collection of weighted items.\n ///\n /// Each item has an associated weight that influences how likely it\n@@ -189,6 +212,21 @@ impl<'a, T: Clone> IndependentSample<T> for WeightedChoice<'a, T> {\n     }\n }\n \n+impl<'a, T> fmt::Debug for WeightedChoice<'a, T> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"WeightedChoice\")\n+    }\n+}\n+\n+impl<'a, T: fmt::Debug> fmt::Debug for WeightedChoice<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"WeightedChoice\")\n+         .field(\"items\", &self.items)\n+         .field(\"weight_range\", &self.weight_range)\n+         .finish()\n+    }\n+}\n+\n mod ziggurat_tables;\n \n /// Sample a random number using the Ziggurat method (specifically the"}, {"sha": "33de11ab63087c766e7534706bf53c92ae6f2610", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -10,6 +10,8 @@\n \n //! The normal and derived distributions.\n \n+use core::fmt;\n+\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n@@ -73,6 +75,14 @@ impl Rand for StandardNormal {\n     }\n }\n \n+impl fmt::Debug for StandardNormal {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"StandardNormal\")\n+         .field(&self.0)\n+         .finish()\n+    }\n+}\n+\n /// The normal distribution `N(mean, std_dev**2)`.\n ///\n /// This uses the ZIGNOR variant of the Ziggurat method, see\n@@ -98,18 +108,29 @@ impl Normal {\n         }\n     }\n }\n+\n impl Sample<f64> for Normal {\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n         self.ind_sample(rng)\n     }\n }\n+\n impl IndependentSample<f64> for Normal {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         let StandardNormal(n) = rng.gen::<StandardNormal>();\n         self.mean + self.std_dev * n\n     }\n }\n \n+impl fmt::Debug for Normal {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Normal\")\n+         .field(\"mean\", &self.mean)\n+         .field(\"std_dev\", &self.std_dev)\n+         .finish()\n+    }\n+}\n+\n \n /// The log-normal distribution `ln N(mean, std_dev**2)`.\n ///\n@@ -132,17 +153,27 @@ impl LogNormal {\n         LogNormal { norm: Normal::new(mean, std_dev) }\n     }\n }\n+\n impl Sample<f64> for LogNormal {\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 {\n         self.ind_sample(rng)\n     }\n }\n+\n impl IndependentSample<f64> for LogNormal {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n         self.norm.ind_sample(rng).exp()\n     }\n }\n \n+impl fmt::Debug for LogNormal {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"LogNormal\")\n+         .field(\"norm\", &self.norm)\n+         .finish()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use distributions::{IndependentSample, Sample};"}, {"sha": "0df876fb16f34a11b8b4c63cc46eae00c82af5e6", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -12,6 +12,7 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n+use core::fmt;\n use core::marker::Sized;\n use Rng;\n use distributions::{IndependentSample, Sample};\n@@ -50,12 +51,29 @@ impl<Sup: SampleRange> Sample<Sup> for Range<Sup> {\n         self.ind_sample(rng)\n     }\n }\n+\n impl<Sup: SampleRange> IndependentSample<Sup> for Range<Sup> {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup {\n         SampleRange::sample_range(self, rng)\n     }\n }\n \n+impl<X> fmt::Debug for Range<X> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Range { .. }\")\n+    }\n+}\n+\n+impl<X: fmt::Debug> fmt::Debug for Range<X> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Range\")\n+         .field(\"low\", &self.low)\n+         .field(\"range\", &self.range)\n+         .field(\"accept_zone\", &self.accept_zone)\n+         .finish()\n+    }\n+}\n+\n /// The helper trait for types that have a sensible way to sample\n /// uniformly between two values. This should not be used directly,\n /// and is only to facilitate `Range`."}, {"sha": "2baa07e370e1740c775ee5ceabf57ab87fd4fbea", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -12,6 +12,7 @@\n \n #![allow(non_camel_case_types)]\n \n+use core::fmt;\n use core::slice;\n use core::iter::repeat;\n use core::num::Wrapping as w;\n@@ -44,6 +45,19 @@ pub struct IsaacRng {\n     c: w32,\n }\n \n+impl fmt::Debug for IsaacRng {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"IsaacRng\")\n+         .field(\"cnt\", &self.cnt)\n+         .field(\"rsl\", &self.rsl.iter())\n+         .field(\"mem\", &self.mem.iter())\n+         .field(\"a\", &self.a)\n+         .field(\"b\", &self.b)\n+         .field(\"c\", &self.c)\n+         .finish()\n+    }\n+}\n+\n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n     rsl: [w(0); RAND_SIZE_USIZE],\n@@ -322,6 +336,19 @@ pub struct Isaac64Rng {\n     c: w64,\n }\n \n+impl fmt::Debug for Isaac64Rng {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Isaac64Rng\")\n+         .field(\"cnt\", &self.cnt)\n+         .field(\"rsl\", &self.rsl.iter())\n+         .field(\"mem\", &self.mem.iter())\n+         .field(\"a\", &self.a)\n+         .field(\"b\", &self.b)\n+         .field(\"c\", &self.c)\n+         .finish()\n+    }\n+}\n+\n static EMPTY_64: Isaac64Rng = Isaac64Rng {\n     cnt: 0,\n     rsl: [w(0); RAND_SIZE_64],"}, {"sha": "888f0bc9b5547de9d9fbe9f314c0d4edc3cb2169", "filename": "src/librand/lib.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -24,6 +24,7 @@\n        html_playground_url = \"https://play.rust-lang.org/\",\n        test(attr(deny(warnings))))]\n #![deny(warnings)]\n+#![deny(missing_debug_implementations)]\n #![no_std]\n #![unstable(feature = \"rand\",\n             reason = \"use `rand` from crates.io\",\n@@ -32,6 +33,7 @@\n #![feature(staged_api)]\n #![feature(step_by)]\n #![feature(custom_attribute)]\n+#![feature(specialization)]\n #![allow(unused_attributes)]\n \n #![cfg_attr(not(test), feature(core_float))] // only necessary for no_std\n@@ -43,6 +45,7 @@\n #[macro_use]\n extern crate std;\n \n+use core::fmt;\n use core::f64;\n use core::intrinsics;\n use core::marker::PhantomData;\n@@ -288,6 +291,20 @@ impl<'a, T: Rand, R: Rng> Iterator for Generator<'a, T, R> {\n     }\n }\n \n+impl<'a, T, R> fmt::Debug for Generator<'a, T, R> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Generator { .. }\")\n+    }\n+}\n+\n+impl<'a, T, R: fmt::Debug> fmt::Debug for Generator<'a, T, R> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Generator\")\n+         .field(\"rng\", &self.rng)\n+         .finish()\n+    }\n+}\n+\n /// Iterator which will continuously generate random ascii characters.\n ///\n /// This iterator is created via the `gen_ascii_chars` method on `Rng`.\n@@ -306,6 +323,20 @@ impl<'a, R: Rng> Iterator for AsciiGenerator<'a, R> {\n     }\n }\n \n+impl<'a, R> fmt::Debug for AsciiGenerator<'a, R> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"AsciiGenerator { .. }\")\n+    }\n+}\n+\n+impl<'a, R: fmt::Debug> fmt::Debug for AsciiGenerator<'a, R> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"AsciiGenerator\")\n+         .field(\"rng\", &self.rng)\n+         .finish()\n+    }\n+}\n+\n /// A random number generator that can be explicitly seeded to produce\n /// the same stream of randomness multiple times.\n pub trait SeedableRng<Seed>: Rng {\n@@ -326,7 +357,7 @@ pub trait SeedableRng<Seed>: Rng {\n /// [1]: Marsaglia, George (July 2003). [\"Xorshift\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct XorShiftRng {\n     x: u32,\n     y: u32,\n@@ -415,6 +446,20 @@ impl Rand for XorShiftRng {\n /// `[0,1)`.\n pub struct Open01<F>(pub F);\n \n+impl<F> fmt::Debug for Open01<F> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Open01 { .. }\")\n+    }\n+}\n+\n+impl<F: fmt::Debug> fmt::Debug for Open01<F> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Open01\")\n+         .field(&self.0)\n+         .finish()\n+    }\n+}\n+\n /// A wrapper for generating floating point numbers uniformly in the\n /// closed interval `[0,1]` (including both endpoints).\n ///\n@@ -423,6 +468,20 @@ pub struct Open01<F>(pub F);\n /// `[0,1)`.\n pub struct Closed01<F>(pub F);\n \n+impl<F> fmt::Debug for Closed01<F> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Closed01 { .. }\")\n+    }\n+}\n+\n+impl<F: fmt::Debug> fmt::Debug for Closed01<F> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Closed01\")\n+         .field(&self.0)\n+         .finish()\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use std::__rand as rand;"}, {"sha": "89ed53f76a15cdecbfdafcccb99a35625f36a220", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08c20bb017756a271dd94dc0f1fffe1f77ec56c0/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=08c20bb017756a271dd94dc0f1fffe1f77ec56c0", "patch": "@@ -11,6 +11,7 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n+use core::fmt;\n use {Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n@@ -54,7 +55,6 @@ impl<R: Rng, Rsdr: Reseeder<R>> ReseedingRng<R, Rsdr> {\n     }\n }\n \n-\n impl<R: Rng, Rsdr: Reseeder<R>> Rng for ReseedingRng<R, Rsdr> {\n     fn next_u32(&mut self) -> u32 {\n         self.reseed_if_necessary();\n@@ -95,6 +95,23 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n     }\n }\n \n+impl<R, Rsdr> fmt::Debug for ReseedingRng<R, Rsdr> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ReseedingRng { .. }\")\n+    }\n+}\n+\n+impl<R: fmt::Debug, Rsdr: fmt::Debug> fmt::Debug for ReseedingRng<R, Rsdr> {\n+    default fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"ReseedingRng\")\n+         .field(\"rng\", &self.rng)\n+         .field(\"generation_threshold\", &self.generation_threshold)\n+         .field(\"bytes_generated\", &self.bytes_generated)\n+         .field(\"reseeder\", &self.reseeder)\n+         .finish()\n+    }\n+}\n+\n /// Something that can be used to reseed an RNG via `ReseedingRng`.\n pub trait Reseeder<R> {\n     /// Reseed the given RNG.\n@@ -103,7 +120,7 @@ pub trait Reseeder<R> {\n \n /// Reseed an RNG using a `Default` instance. This reseeds by\n /// replacing the RNG with the result of a `Default::default` call.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub struct ReseedWithDefault;\n \n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {"}]}