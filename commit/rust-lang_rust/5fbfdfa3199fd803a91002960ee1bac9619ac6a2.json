{"sha": "5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "node_id": "C_kwDOAAsO6NoAKDVmYmZkZmEzMTk5ZmQ4MDNhOTEwMDI5NjBlZTFiYWM5NjE5YWM2YTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-22T00:01:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-22T00:01:49Z"}, "message": "Auto merge of #8009 - xFrednet:8004-suboptimal-flops-in-const, r=giraffate\n\nAllow `suboptimal_flops` in const functions\n\nThis PR allows `clippy::suboptimal_flops` in constant functions. The check also effects the `clippy::imprecise_flops` lint logic. However, this doesn't have any effects as all functions checked for are not const and can therefore not be found in such functions.\n\n---\n\nchangelog: [`suboptimal_flops`]: No longer triggers in constant functions\n\nCloses: rust-lang/rust-clippy#8004", "tree": {"sha": "43ef9c16a73e15499958f9ad387b7aeeb9ab8230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43ef9c16a73e15499958f9ad387b7aeeb9ab8230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "html_url": "https://github.com/rust-lang/rust/commit/5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2208a351ae75e093dda3e7f14d48ee12d5be7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2208a351ae75e093dda3e7f14d48ee12d5be7a", "html_url": "https://github.com/rust-lang/rust/commit/de2208a351ae75e093dda3e7f14d48ee12d5be7a"}, {"sha": "1c8085d705849e528bf754e9db3b0e0521883d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8085d705849e528bf754e9db3b0e0521883d6d", "html_url": "https://github.com/rust-lang/rust/commit/1c8085d705849e528bf754e9db3b0e0521883d6d"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "3df511ea8e780e20496d0636a3af3435b5fa001e", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::consts::{\n };\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher;\n-use clippy_utils::{eq_expr_value, get_parent_expr, numeric_literal, sugg};\n+use clippy_utils::{eq_expr_value, get_parent_expr, in_constant, numeric_literal, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n@@ -687,6 +687,11 @@ fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n \n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        // All of these operations are currently not const.\n+        if in_constant(cx, expr.hir_id) {\n+            return;\n+        }\n+\n         if let ExprKind::MethodCall(path, _, args, _) = &expr.kind {\n             let recv_ty = cx.typeck_results().expr_ty(&args[0]);\n "}, {"sha": "ca747fefc6468b59b7de7e26afcfbf9d7d27830a", "filename": "tests/ui/floating_point_abs.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_abs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_abs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.fixed?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n+#![feature(const_fn_floating_point_arithmetic)]\n #![warn(clippy::suboptimal_flops)]\n \n+/// Allow suboptimal ops in constant context\n+pub const fn in_const_context(num: f64) -> f64 {\n+    if num >= 0.0 { num } else { -num }\n+}\n+\n struct A {\n     a: f64,\n     b: f64,"}, {"sha": "e4b606574979830bb07ca0ed5366b192afc2f165", "filename": "tests/ui/floating_point_abs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n+#![feature(const_fn_floating_point_arithmetic)]\n #![warn(clippy::suboptimal_flops)]\n \n+/// Allow suboptimal ops in constant context\n+pub const fn in_const_context(num: f64) -> f64 {\n+    if num >= 0.0 { num } else { -num }\n+}\n+\n struct A {\n     a: f64,\n     b: f64,"}, {"sha": "db8290423ae057e50a8d5f8f8be4d678435f8e83", "filename": "tests/ui/floating_point_abs.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.stderr?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,49 +1,49 @@\n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:10:5\n+  --> $DIR/floating_point_abs.rs:16:5\n    |\n LL |     if num >= 0.0 { num } else { -num }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.abs()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:14:5\n+  --> $DIR/floating_point_abs.rs:20:5\n    |\n LL |     if 0.0 < num { num } else { -num }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.abs()`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:18:5\n+  --> $DIR/floating_point_abs.rs:24:5\n    |\n LL |     if a.a > 0.0 { a.a } else { -a.a }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.a.abs()`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:22:5\n+  --> $DIR/floating_point_abs.rs:28:5\n    |\n LL |     if 0.0 >= num { -num } else { num }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.abs()`\n \n error: manual implementation of `abs` method\n-  --> $DIR/floating_point_abs.rs:26:5\n+  --> $DIR/floating_point_abs.rs:32:5\n    |\n LL |     if a.a < 0.0 { -a.a } else { a.a }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.a.abs()`\n \n error: manual implementation of negation of `abs` method\n-  --> $DIR/floating_point_abs.rs:30:5\n+  --> $DIR/floating_point_abs.rs:36:5\n    |\n LL |     if num < 0.0 { num } else { -num }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-num.abs()`\n \n error: manual implementation of negation of `abs` method\n-  --> $DIR/floating_point_abs.rs:34:5\n+  --> $DIR/floating_point_abs.rs:40:5\n    |\n LL |     if 0.0 >= num { num } else { -num }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-num.abs()`\n \n error: manual implementation of negation of `abs` method\n-  --> $DIR/floating_point_abs.rs:39:12\n+  --> $DIR/floating_point_abs.rs:45:12\n    |\n LL |         a: if a.a >= 0.0 { -a.a } else { a.a },\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-a.a.abs()`"}, {"sha": "169ec02f82be6d1769b2eb7581d8a907dc096d7e", "filename": "tests/ui/floating_point_mul_add.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_mul_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_mul_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.fixed?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,6 +1,17 @@\n // run-rustfix\n+#![feature(const_fn_floating_point_arithmetic)]\n #![warn(clippy::suboptimal_flops)]\n \n+/// Allow suboptimal_ops in constant context\n+pub const fn in_const_context() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+\n+    let _ = a * b + c;\n+    let _ = c + a * b;\n+}\n+\n fn main() {\n     let a: f64 = 1234.567;\n     let b: f64 = 45.67834;"}, {"sha": "5338d4fc2b7490f4f0480b69379b8d3ee3ab2c67", "filename": "tests/ui/floating_point_mul_add.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_mul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_mul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.rs?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,6 +1,17 @@\n // run-rustfix\n+#![feature(const_fn_floating_point_arithmetic)]\n #![warn(clippy::suboptimal_flops)]\n \n+/// Allow suboptimal_ops in constant context\n+pub const fn in_const_context() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+\n+    let _ = a * b + c;\n+    let _ = c + a * b;\n+}\n+\n fn main() {\n     let a: f64 = 1234.567;\n     let b: f64 = 45.67834;"}, {"sha": "e637bbf90caa24963d172aecc6baa45fa4e12e4e", "filename": "tests/ui/floating_point_mul_add.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_mul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_mul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.stderr?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,61 +1,61 @@\n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:10:13\n+  --> $DIR/floating_point_mul_add.rs:21:13\n    |\n LL |     let _ = a * b + c;\n    |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:11:13\n+  --> $DIR/floating_point_mul_add.rs:22:13\n    |\n LL |     let _ = c + a * b;\n    |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:12:13\n+  --> $DIR/floating_point_mul_add.rs:23:13\n    |\n LL |     let _ = a + 2.0 * 4.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4.0, a)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:13:13\n+  --> $DIR/floating_point_mul_add.rs:24:13\n    |\n LL |     let _ = a + 2. * 4.;\n    |             ^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4., a)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:15:13\n+  --> $DIR/floating_point_mul_add.rs:26:13\n    |\n LL |     let _ = (a * b) + c;\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:16:13\n+  --> $DIR/floating_point_mul_add.rs:27:13\n    |\n LL |     let _ = c + (a * b);\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:17:13\n+  --> $DIR/floating_point_mul_add.rs:28:13\n    |\n LL |     let _ = a * b * c + d;\n    |             ^^^^^^^^^^^^^ help: consider using: `(a * b).mul_add(c, d)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:19:13\n+  --> $DIR/floating_point_mul_add.rs:30:13\n    |\n LL |     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:20:13\n+  --> $DIR/floating_point_mul_add.rs:31:13\n    |\n LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:22:13\n+  --> $DIR/floating_point_mul_add.rs:33:13\n    |\n LL |     let _ = (a * a + b).sqrt();\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(a, b)`"}, {"sha": "a35bb1c27f35c4150b687fbe3854a36d4e3c5ece", "filename": "tests/ui/floating_point_rad.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_rad.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_rad.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.fixed?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,6 +1,13 @@\n // run-rustfix\n+#![feature(const_fn_floating_point_arithmetic)]\n #![warn(clippy::suboptimal_flops)]\n \n+/// Allow suboptimal_flops in constant context\n+pub const fn const_context() {\n+    let x = 3f32;\n+    let _ = x * 180f32 / std::f32::consts::PI;\n+}\n+\n fn main() {\n     let x = 3f32;\n     let _ = x.to_degrees();"}, {"sha": "834db4be533c046dfc4ff96680b8d7552d06385a", "filename": "tests/ui/floating_point_rad.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_rad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_rad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.rs?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,6 +1,13 @@\n // run-rustfix\n+#![feature(const_fn_floating_point_arithmetic)]\n #![warn(clippy::suboptimal_flops)]\n \n+/// Allow suboptimal_flops in constant context\n+pub const fn const_context() {\n+    let x = 3f32;\n+    let _ = x * 180f32 / std::f32::consts::PI;\n+}\n+\n fn main() {\n     let x = 3f32;\n     let _ = x * 180f32 / std::f32::consts::PI;"}, {"sha": "acecddbca53bf6254503e6e1d5c07c0be3c47b33", "filename": "tests/ui/floating_point_rad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_rad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fbfdfa3199fd803a91002960ee1bac9619ac6a2/tests%2Fui%2Ffloating_point_rad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.stderr?ref=5fbfdfa3199fd803a91002960ee1bac9619ac6a2", "patch": "@@ -1,13 +1,13 @@\n error: conversion to degrees can be done more accurately\n-  --> $DIR/floating_point_rad.rs:6:13\n+  --> $DIR/floating_point_rad.rs:13:13\n    |\n LL |     let _ = x * 180f32 / std::f32::consts::PI;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_degrees()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: conversion to radians can be done more accurately\n-  --> $DIR/floating_point_rad.rs:7:13\n+  --> $DIR/floating_point_rad.rs:14:13\n    |\n LL |     let _ = x * std::f32::consts::PI / 180f32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_radians()`"}]}