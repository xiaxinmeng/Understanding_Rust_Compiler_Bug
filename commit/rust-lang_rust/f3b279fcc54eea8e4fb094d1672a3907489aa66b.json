{"sha": "f3b279fcc54eea8e4fb094d1672a3907489aa66b", "node_id": "C_kwDOAAsO6NoAKGYzYjI3OWZjYzU0ZWVhOGU0ZmIwOTRkMTY3MmEzOTA3NDg5YWE2NmI", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-17T22:43:46Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-20T18:36:50Z"}, "message": "add EarlyBinder to output of explicit_item_bounds; replace bound_explicit_item_bounds usages; remove bound_explicit_item_bounds query", "tree": {"sha": "0ff5b9a39f46661ce09057ff5e40d4443ed650b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff5b9a39f46661ce09057ff5e40d4443ed650b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b279fcc54eea8e4fb094d1672a3907489aa66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b279fcc54eea8e4fb094d1672a3907489aa66b", "html_url": "https://github.com/rust-lang/rust/commit/f3b279fcc54eea8e4fb094d1672a3907489aa66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b279fcc54eea8e4fb094d1672a3907489aa66b/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0892a7380b1bde39b979a00de1d11cef3357a717", "url": "https://api.github.com/repos/rust-lang/rust/commits/0892a7380b1bde39b979a00de1d11cef3357a717", "html_url": "https://github.com/rust-lang/rust/commit/0892a7380b1bde39b979a00de1d11cef3357a717"}], "stats": {"total": 105, "additions": 49, "deletions": 56}, "files": [{"sha": "7ad9de057209088798c95f463fc7e1d78f371cd4", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -706,7 +706,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 .copied()\n                 .find_map(find_fn_kind_from_did),\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(tcx, substs)\n                 .find_map(find_fn_kind_from_did),\n             ty::Closure(_, substs) => match substs.as_closure().kind() {"}, {"sha": "1dfffafd1d3299ed0c83e1938e171dd9b0bf9089", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -318,10 +318,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n             tcx,\n             selftys: vec![],\n         };\n-        let prohibit_opaque = tcx\n-            .bound_explicit_item_bounds(def_id.to_def_id())\n-            .transpose_iter()\n-            .try_for_each(|bound| {\n+        let prohibit_opaque =\n+            tcx.explicit_item_bounds(def_id).transpose_iter().try_for_each(|bound| {\n                 let predicate = bound.map_bound(|&(predicate, _)| predicate).subst_identity();\n                 predicate.visit_with(&mut visitor)\n             });"}, {"sha": "48214b899a4b81f123205feb8aa08303f3198cb3", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -839,7 +839,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.interner().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n+            for (pred, pred_span) in self.interner().explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -2023,7 +2023,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     };\n \n     let obligations: Vec<_> = tcx\n-        .bound_explicit_item_bounds(trait_ty.def_id)\n+        .explicit_item_bounds(trait_ty.def_id)\n         .subst_iter_copied(tcx, rebased_substs)\n         .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);"}, {"sha": "fc40916f8fead8684c16faf3989c0fa4cf19f098", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -360,7 +360,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                             tcx,\n                             param_env,\n                             item_def_id,\n-                            tcx.bound_explicit_item_bounds(item_def_id.to_def_id())\n+                            tcx.explicit_item_bounds(item_def_id)\n                                 .transpose_iter()\n                                 .map(|bound| bound.map_bound(|b| *b).subst_identity())\n                                 .collect::<Vec<_>>(),\n@@ -1125,7 +1125,7 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n /// Assuming the defaults are used, check that all predicates (bounds on the\n /// assoc type and where clauses on the trait) hold.\n fn check_associated_type_bounds(wfcx: &WfCheckingCtxt<'_, '_>, item: ty::AssocItem, span: Span) {\n-    let bounds = wfcx.tcx().bound_explicit_item_bounds(item.def_id);\n+    let bounds = wfcx.tcx().explicit_item_bounds(item.def_id);\n \n     debug!(\"check_associated_type_bounds: bounds={:?}\", bounds);\n     let wf_obligations = bounds.transpose_iter().flat_map(|b| {\n@@ -1592,7 +1592,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                 }\n             });\n             for (bound, bound_span) in tcx\n-                .bound_explicit_item_bounds(opaque_ty.def_id)\n+                .explicit_item_bounds(opaque_ty.def_id)\n                 .subst_iter_copied(tcx, opaque_ty.substs)\n             {\n                 let bound = self.wfcx.normalize(bound_span, None, bound);"}, {"sha": "80d6bc7db9e8f3e54533c5312aa740e4e6f2f16d", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -79,14 +79,14 @@ fn opaque_type_bounds<'tcx>(\n pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-) -> &'_ [(ty::Predicate<'_>, Span)] {\n+) -> ty::EarlyBinder<&'_ [(ty::Predicate<'_>, Span)]> {\n     match tcx.opt_rpitit_info(def_id.to_def_id()) {\n         // RPITIT's bounds are the same as opaque type bounds, but with\n         // a projection self type.\n         Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n             let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n             let opaque_ty = item.expect_opaque_ty();\n-            return opaque_type_bounds(\n+            return ty::EarlyBinder(opaque_type_bounds(\n                 tcx,\n                 opaque_def_id.expect_local(),\n                 opaque_ty.bounds,\n@@ -95,15 +95,15 @@ pub(super) fn explicit_item_bounds(\n                     ty::InternalSubsts::identity_for_item(tcx, def_id),\n                 ),\n                 item.span,\n-            );\n+            ));\n         }\n         // These should have been fed!\n         Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n         None => {}\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    match tcx.hir().get(hir_id) {\n+    let bounds = match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n             span,\n@@ -123,14 +123,15 @@ pub(super) fn explicit_item_bounds(\n             opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n-    }\n+    };\n+    ty::EarlyBinder(bounds)\n }\n \n pub(super) fn item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> ty::EarlyBinder<&'_ ty::List<ty::Predicate<'_>>> {\n-    tcx.bound_explicit_item_bounds(def_id).map_bound(|bounds| {\n+    tcx.explicit_item_bounds(def_id).map_bound(|bounds| {\n         tcx.mk_predicates_from_iter(util::elaborate(\n             tcx,\n             bounds.iter().map(|&(bound, _span)| bound),"}, {"sha": "d8625bd21e8ebc6c8e13a179194551639d74fb98", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -153,7 +153,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n     let mut collector =\n         OpaqueTypeLifetimeCollector { tcx, root_def_id: item_def_id.to_def_id(), variances };\n     let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id);\n-    for pred in tcx.bound_explicit_item_bounds(item_def_id.to_def_id()).transpose_iter() {\n+    for pred in tcx.explicit_item_bounds(item_def_id).transpose_iter() {\n         let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n         debug!(?pred);\n "}, {"sha": "aefde8109a07a71dd5995a75522c893abff6a7ab", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -530,7 +530,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for ty in [first_ty, second_ty] {\n                     for (pred, _) in self\n                         .tcx\n-                        .bound_explicit_item_bounds(rpit_def_id)\n+                        .explicit_item_bounds(rpit_def_id)\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {"}, {"sha": "7046269c2de22c953644630010d4a85e7e8f92fa", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .deduce_closure_signature_from_predicates(\n                     expected_ty,\n-                    self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n+                    self.tcx.explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n                 ),\n             ty::Dynamic(ref object_type, ..) => {\n                 let sig = object_type.projection_bounds().find_map(|pb| {\n@@ -713,13 +713,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n             ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n                 .tcx\n-                .bound_explicit_item_bounds(proj.def_id)\n+                .explicit_item_bounds(proj.def_id)\n                 .subst_iter_copied(self.tcx, proj.substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!("}, {"sha": "5af824e0f57489e9978b833713e4a06df7fb565d", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -571,8 +571,8 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for bound in fcx.tcx.bound_explicit_item_bounds(def).transpose_iter() {\n-                let predicate = bound.map_bound(|&(predicate, _)| predicate).subst_identity();\n+            for bound in fcx.tcx.explicit_item_bounds(def).transpose_iter() {\n+                let predicate = bound.map_bound(|&(pred, _)| pred).subst_identity();\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "547f851526f0a23555c8eb88149568f7dc096d9f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -402,7 +402,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n         let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-        self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n+        self.tcx.explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n             |(predicate, _)| {\n                 predicate\n                     .kind()"}, {"sha": "334395945ea966ebb99822e13c149cdd2de71bea", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -540,7 +540,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 .obligations;\n         }\n \n-        let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n+        let item_bounds = tcx.explicit_item_bounds(def_id);\n \n         for (predicate, _) in item_bounds.subst_iter_copied(tcx, substs) {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {"}, {"sha": "1d4102114031563343dabe54f82c3680c0e483cd", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n         // For every projection predicate in the opaque type's explicit bounds,\n         // check that the type that we're assigning actually satisfies the bounds\n         // of the associated type.\n-        for bound in cx.tcx.bound_explicit_item_bounds(def_id).transpose_iter() {\n+        for bound in cx.tcx.explicit_item_bounds(def_id).transpose_iter() {\n             let (pred, pred_span) = bound.map_bound(|b| *b).subst_identity();\n \n             // Liberate bound regions in the predicate since we\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // with `impl Send: OtherTrait`.\n             for (assoc_pred, assoc_pred_span) in cx\n                 .tcx\n-                .bound_explicit_item_bounds(proj.projection_ty.def_id)\n+                .explicit_item_bounds(proj.projection_ty.def_id)\n                 .subst_iter_copied(cx.tcx, &proj.projection_ty.substs)\n             {\n                 let assoc_pred = assoc_pred.fold_with(proj_replacer);"}, {"sha": "8de358cf8ab118936793efd05ea26d428f388497", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     elaborate(\n                         cx.tcx,\n                         cx.tcx\n-                            .bound_explicit_item_bounds(def)\n+                            .explicit_item_bounds(def)\n                             .transpose_iter()\n                             .map(|bound| bound.map_bound(|b| *b).subst_identity()),\n                     )"}, {"sha": "0ca1d9ac6ff8229439eaad9806f52a166634210d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -203,7 +203,11 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n }\n \n provide! { tcx, def_id, other, cdata,\n-    explicit_item_bounds => { table_defaulted_array }\n+    explicit_item_bounds => {\n+        let lazy = cdata.root.tables.explicit_item_bounds.get(cdata, def_id.index);\n+        let output = if lazy.is_default() { &mut [] } else { tcx.arena.alloc_from_iter(lazy.decode((cdata, tcx))) };\n+        ty::EarlyBinder(&*output)\n+    }\n     explicit_predicates_of => { table }\n     generics_of => { table }\n     inferred_outlives_of => { table_defaulted_array }"}, {"sha": "fd308d5cad15292a67678bf87c1bec14ac4562ad", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -1425,7 +1425,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_explicit_item_bounds(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_explicit_item_bounds({:?})\", def_id);\n-        let bounds = self.tcx.explicit_item_bounds(def_id);\n+        let bounds = self.tcx.explicit_item_bounds(def_id).skip_binder();\n         record_defaulted_array!(self.tables.explicit_item_bounds[def_id] <- bounds);\n     }\n "}, {"sha": "f024ba46b6410db424ba070a64f8085ebaa78b5d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -274,7 +274,7 @@ rustc_queries! {\n     /// `key` is the `DefId` of the associated type or opaque type.\n     ///\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n-    query explicit_item_bounds(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n+    query explicit_item_bounds(key: DefId) -> ty::EarlyBinder<&'tcx [(ty::Predicate<'tcx>, Span)]> {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern"}, {"sha": "68c5b205fa0472b8bcd32bfaca2100e78d31c8bd", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -1611,7 +1611,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n-        self.bound_explicit_item_bounds(*def_id).skip_binder().iter().any(|(predicate, _)| {\n+        self.explicit_item_bounds(def_id).skip_binder().iter().any(|(predicate, _)| {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() else {\n                 return false;\n             };"}, {"sha": "0d4f69a27cf24cdccc3d355b10857a1627a686ef", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -911,7 +911,7 @@ pub trait PrettyPrinter<'tcx>:\n \n         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n         // by looking up the projections associated with the def_id.\n-        let bounds = tcx.bound_explicit_item_bounds(def_id);\n+        let bounds = tcx.explicit_item_bounds(def_id);\n \n         let mut traits = FxIndexMap::default();\n         let mut fn_traits = FxIndexMap::default();"}, {"sha": "d0bcad0d023608a606b0eecb2250b72b9756a889", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -694,13 +694,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n \n-    pub fn bound_explicit_item_bounds(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<&'tcx [(ty::Predicate<'tcx>, rustc_span::Span)]> {\n-        ty::EarlyBinder(self.explicit_item_bounds(def_id))\n-    }\n-\n     /// Returns names of captured upvars for closures and generators.\n     ///\n     /// Here are some examples:"}, {"sha": "e4396d70b7e5d44a99f5be0ea6a8296917b054a9", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -1800,7 +1800,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for bound in tcx.bound_explicit_item_bounds(def).transpose_iter() {\n+            for bound in tcx.explicit_item_bounds(def).transpose_iter() {\n                 let predicate = bound.map_bound(|&(pred, _)| pred).subst_identity();\n \n                 // We only look at the `DefId`, so it is safe to skip the binder here."}, {"sha": "c607c7fd5f4a73e586d3b08d3e9aebbbe92628b8", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -269,7 +269,7 @@ where\n                     // and are visited by shallow visitors.\n                     self.visit_predicates(ty::GenericPredicates {\n                         parent: None,\n-                        predicates: tcx.bound_explicit_item_bounds(def_id).skip_binder(),\n+                        predicates: tcx.explicit_item_bounds(def_id).skip_binder(),\n                     })?;\n                 }\n             }\n@@ -1784,10 +1784,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn bounds(&mut self) -> &mut Self {\n         self.visit_predicates(ty::GenericPredicates {\n             parent: None,\n-            predicates: self\n-                .tcx\n-                .bound_explicit_item_bounds(self.item_def_id.to_def_id())\n-                .skip_binder(),\n+            predicates: self.tcx.explicit_item_bounds(self.item_def_id).skip_binder(),\n         });\n         self\n     }"}, {"sha": "c09658cd4e158c758bc323fa2c8a38b9066379ef", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -297,7 +297,7 @@ fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span\n     tcx.associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Type)\n-        .flat_map(|item| tcx.bound_explicit_item_bounds(item.def_id).transpose_iter())\n+        .flat_map(|item| tcx.explicit_item_bounds(item.def_id).transpose_iter())\n         .map(|bound| bound.map_bound(|b| *b).subst_identity())\n         .filter_map(|pred_span| predicate_references_self(tcx, pred_span))\n         .collect()"}, {"sha": "0974c5ffaa25a0525de9c4e838ea60b169fcc284", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> RustIrDatabase<'tcx> {\n     where\n         ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n     {\n-        let bounds = self.interner.tcx.bound_explicit_item_bounds(def_id);\n+        let bounds = self.interner.tcx.explicit_item_bounds(def_id);\n         bounds\n             .0\n             .iter()\n@@ -506,7 +506,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let identity_substs = InternalSubsts::identity_for_item(self.interner.tcx, opaque_ty_id.0);\n \n-        let explicit_item_bounds = self.interner.tcx.bound_explicit_item_bounds(opaque_ty_id.0);\n+        let explicit_item_bounds = self.interner.tcx.explicit_item_bounds(opaque_ty_id.0);\n         let bounds =\n             explicit_item_bounds\n                 .0"}, {"sha": "00932c59cca9c59fe7d11994a41ab114cfbde9a2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -421,7 +421,7 @@ fn clean_projection<'tcx>(\n     if cx.tcx.is_impl_trait_in_trait(ty.skip_binder().def_id) {\n         let bounds = cx\n             .tcx\n-            .bound_explicit_item_bounds(ty.skip_binder().def_id)\n+            .explicit_item_bounds(ty.skip_binder().def_id)\n             .subst_iter_copied(cx.tcx, ty.skip_binder().substs)\n             .map(|(pred, _)| pred)\n             .collect::<Vec<_>>();\n@@ -1316,7 +1316,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n \n             if let ty::TraitContainer = assoc_item.container {\n                 let bounds = tcx\n-                    .bound_explicit_item_bounds(assoc_item.def_id)\n+                    .explicit_item_bounds(assoc_item.def_id)\n                     .transpose_iter()\n                     .map(|bound| bound.map_bound(|b| *b).subst_identity());\n                 let predicates = tcx.explicit_predicates_of(assoc_item.def_id).predicates;\n@@ -1847,7 +1847,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             // by looking up the bounds associated with the def_id.\n             let bounds = cx\n                 .tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(cx.tcx, substs)\n                 .map(|(bound, _)| bound)\n                 .collect::<Vec<_>>();"}, {"sha": "ff838c2d56e43f85214b79bdcc0e635c99e5f936", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         }\n         let ret_ty = return_ty(cx, cx.tcx.hir().local_def_id_to_hir_id(fn_def_id).expect_owner());\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n-            let preds = cx.tcx.bound_explicit_item_bounds(def_id);\n+            let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for (p, _span) in preds.subst_iter_copied(cx.tcx, substs) {\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {"}, {"sha": "5f768928adf052bc68d24a70597cbed24b6d3811", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3b279fcc54eea8e4fb094d1672a3907489aa66b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b279fcc54eea8e4fb094d1672a3907489aa66b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=f3b279fcc54eea8e4fb094d1672a3907489aa66b", "patch": "@@ -90,7 +90,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         return false;\n                     }\n \n-                    for bound in cx.tcx.bound_explicit_item_bounds(def_id).transpose_iter() {\n+                    for bound in cx.tcx.explicit_item_bounds(def_id).transpose_iter() {\n                         let (predicate, _span) = bound.map_bound(|b| *b).subst_identity();\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -268,7 +268,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            for (predicate, _) in cx.tcx.bound_explicit_item_bounds(*def_id).skip_binder() {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(def_id).skip_binder() {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n@@ -744,7 +744,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.def_id)\n+        .explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {"}]}