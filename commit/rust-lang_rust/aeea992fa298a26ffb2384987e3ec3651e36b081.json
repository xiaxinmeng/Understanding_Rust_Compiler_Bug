{"sha": "aeea992fa298a26ffb2384987e3ec3651e36b081", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZWE5OTJmYTI5OGEyNmZmYjIzODQ5ODdlM2VjMzY1MWUzNmIwODE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-19T19:56:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T06:58:01Z"}, "message": "alloc: fix deprecated warnings", "tree": {"sha": "be0809b9b4c84bc1b564a402fde89abfb03375b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be0809b9b4c84bc1b564a402fde89abfb03375b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeea992fa298a26ffb2384987e3ec3651e36b081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeea992fa298a26ffb2384987e3ec3651e36b081", "html_url": "https://github.com/rust-lang/rust/commit/aeea992fa298a26ffb2384987e3ec3651e36b081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeea992fa298a26ffb2384987e3ec3651e36b081/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a75a4d8633b9a71b47dbc1cd3c84248725425b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a75a4d8633b9a71b47dbc1cd3c84248725425b", "html_url": "https://github.com/rust-lang/rust/commit/25a75a4d8633b9a71b47dbc1cd3c84248725425b"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "08bcfea980b603afbaf659f353aba7bcbac46a25", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aeea992fa298a26ffb2384987e3ec3651e36b081/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeea992fa298a26ffb2384987e3ec3651e36b081/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=aeea992fa298a26ffb2384987e3ec3651e36b081", "patch": "@@ -42,7 +42,7 @@\n //   This implies that even an empty internal node has at least one edge.\n \n use core::marker::PhantomData;\n-use core::mem;\n+use core::mem::{self, MaybeUninit};\n use core::ptr::{self, Unique, NonNull};\n use core::slice;\n \n@@ -73,7 +73,7 @@ struct LeafNode<K, V> {\n     /// This node's index into the parent node's `edges` array.\n     /// `*node.parent.edges[node.parent_idx]` should be the same thing as `node`.\n     /// This is only guaranteed to be initialized when `parent` is nonnull.\n-    parent_idx: u16,\n+    parent_idx: MaybeUninit<u16>,\n \n     /// The number of keys and values this node stores.\n     ///\n@@ -83,8 +83,8 @@ struct LeafNode<K, V> {\n \n     /// The arrays storing the actual data of the node. Only the first `len` elements of each\n     /// array are initialized and valid.\n-    keys: [K; CAPACITY],\n-    vals: [V; CAPACITY],\n+    keys: MaybeUninit<[K; CAPACITY]>,\n+    vals: MaybeUninit<[V; CAPACITY]>,\n }\n \n impl<K, V> LeafNode<K, V> {\n@@ -94,10 +94,10 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: mem::uninitialized(),\n-            vals: mem::uninitialized(),\n+            keys: MaybeUninit::uninitialized(),\n+            vals: MaybeUninit::uninitialized(),\n             parent: ptr::null(),\n-            parent_idx: mem::uninitialized(),\n+            parent_idx: MaybeUninit::uninitialized(),\n             len: 0\n         }\n     }\n@@ -115,10 +115,10 @@ unsafe impl Sync for LeafNode<(), ()> {}\n // ever take a pointer past the first key.\n static EMPTY_ROOT_NODE: LeafNode<(), ()> = LeafNode {\n     parent: ptr::null(),\n-    parent_idx: 0,\n+    parent_idx: MaybeUninit::uninitialized(),\n     len: 0,\n-    keys: [(); CAPACITY],\n-    vals: [(); CAPACITY],\n+    keys: MaybeUninit::uninitialized(),\n+    vals: MaybeUninit::uninitialized(),\n };\n \n /// The underlying representation of internal nodes. As with `LeafNode`s, these should be hidden\n@@ -430,7 +430,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n                     root: self.root,\n                     _marker: PhantomData\n                 },\n-                idx: self.as_leaf().parent_idx as usize,\n+                idx: unsafe { usize::from(*self.as_leaf().parent_idx.get_ref()) },\n                 _marker: PhantomData\n             })\n         } else {\n@@ -567,7 +567,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n             // the node, which is allowed by LLVM.\n             unsafe {\n                 slice::from_raw_parts(\n-                    self.as_leaf().keys.as_ptr(),\n+                    self.as_leaf().keys.get_ref().as_ptr(),\n                     self.len()\n                 )\n             }\n@@ -578,7 +578,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts(\n-                self.as_leaf().vals.as_ptr(),\n+                self.as_leaf().vals.get_ref().as_ptr(),\n                 self.len()\n             )\n         }\n@@ -605,7 +605,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    &mut self.as_leaf_mut().keys as *mut [K] as *mut K,\n+                    self.as_leaf_mut().keys.get_mut() as *mut [K] as *mut K,\n                     self.len()\n                 )\n             }\n@@ -616,7 +616,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                &mut self.as_leaf_mut().vals as *mut [V] as *mut V,\n+                self.as_leaf_mut().vals.get_mut() as *mut [V] as *mut V,\n                 self.len()\n             )\n         }\n@@ -1013,7 +1013,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         let ptr = self.node.as_internal_mut() as *mut _;\n         let mut child = self.descend();\n         child.as_leaf_mut().parent = ptr;\n-        child.as_leaf_mut().parent_idx = idx;\n+        child.as_leaf_mut().parent_idx.set(idx);\n     }\n \n     /// Unsafely asserts to the compiler some static information about whether the underlying\n@@ -1152,12 +1152,12 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n \n             ptr::copy_nonoverlapping(\n                 self.node.keys().as_ptr().add(self.idx + 1),\n-                new_node.keys.as_mut_ptr(),\n+                new_node.keys.get_mut().as_mut_ptr(),\n                 new_len\n             );\n             ptr::copy_nonoverlapping(\n                 self.node.vals().as_ptr().add(self.idx + 1),\n-                new_node.vals.as_mut_ptr(),\n+                new_node.vals.get_mut().as_mut_ptr(),\n                 new_len\n             );\n \n@@ -1210,12 +1210,12 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             ptr::copy_nonoverlapping(\n                 self.node.keys().as_ptr().add(self.idx + 1),\n-                new_node.data.keys.as_mut_ptr(),\n+                new_node.data.keys.get_mut().as_mut_ptr(),\n                 new_len\n             );\n             ptr::copy_nonoverlapping(\n                 self.node.vals().as_ptr().add(self.idx + 1),\n-                new_node.data.vals.as_mut_ptr(),\n+                new_node.data.vals.get_mut().as_mut_ptr(),\n                 new_len\n             );\n             ptr::copy_nonoverlapping("}, {"sha": "987572e6b74a9c2dbb803b60aafb2e7f503798bd", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aeea992fa298a26ffb2384987e3ec3651e36b081/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeea992fa298a26ffb2384987e3ec3651e36b081/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=aeea992fa298a26ffb2384987e3ec3651e36b081", "patch": "@@ -119,6 +119,7 @@\n #![feature(rustc_const_unstable)]\n #![feature(const_vec_new)]\n #![feature(slice_partition_dedup)]\n+#![feature(maybe_uninit)]\n \n // Allow testing this library\n "}]}