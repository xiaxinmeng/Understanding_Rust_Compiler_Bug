{"sha": "d4432b37378ec55450e06799f5344b4b0f4b94e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDMyYjM3Mzc4ZWM1NTQ1MGUwNjc5OWY1MzQ0YjRiMGY0Yjk0ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T16:18:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T16:18:52Z"}, "message": "Auto merge of #27076 - alexcrichton:update-llvm, r=brson\n\nLLVM has recently created their 3.7 release branch, and this PR updates us to that point. This should hopefully mean that we're basically compatible with the upcoming 3.7 release. Additionally, there are a number of goodies on this branch.\r\n\r\n* This contains a fix for https://llvm.org/bugs/show_bug.cgi?id=23957\r\n  which should help us bootstrap farther on 32-bit MSVC targets.\r\n* There is better support for writing multiple flavors of archives, allowing us\r\n  to use the built-in LLVM support instead of the system `ar` on all current\r\n  platforms of the compiler.\r\n* This LLVM has SafeStack support\r\n* An [optimization patch](https://github.com/rust-lang/llvm/commit/7cf5e26e18f7d2d8db09c83c76dd727535f281ab) by @pcwalton is included.\r\n* A number of other minor test fixes here and there.\r\n\r\nDue to problems dealing with the data layout we pass to LLVM, this PR also takes the time to clean up how we specific this. We no longer specify a data layout to LLVM by default and instead take the default for the target from LLVM to pass to the module that we're building. This should be more robust going into the future, and I'm also not sure we know what any of these arcane strings are any more...", "tree": {"sha": "9be146a4b508b4738595c822c5ce0a499606c346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be146a4b508b4738595c822c5ce0a499606c346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4432b37378ec55450e06799f5344b4b0f4b94e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4432b37378ec55450e06799f5344b4b0f4b94e0", "html_url": "https://github.com/rust-lang/rust/commit/d4432b37378ec55450e06799f5344b4b0f4b94e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4432b37378ec55450e06799f5344b4b0f4b94e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "html_url": "https://github.com/rust-lang/rust/commit/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb"}, {"sha": "6d96edfe1641fb3c1c0cff40b09386cbd7bdbe53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d96edfe1641fb3c1c0cff40b09386cbd7bdbe53", "html_url": "https://github.com/rust-lang/rust/commit/6d96edfe1641fb3c1c0cff40b09386cbd7bdbe53"}], "stats": {"total": 878, "additions": 291, "deletions": 587}, "files": [{"sha": "7d50e6f6917ccf47b77cdb723f558b9943ed636c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -99,14 +99,8 @@ pub mod diagnostics;\n \n pub mod back {\n     pub use rustc_back::abi;\n-    pub use rustc_back::arm;\n-    pub use rustc_back::mips;\n-    pub use rustc_back::mipsel;\n     pub use rustc_back::rpath;\n     pub use rustc_back::svh;\n-    pub use rustc_back::target_strs;\n-    pub use rustc_back::x86;\n-    pub use rustc_back::x86_64;\n }\n \n pub mod ast_map;"}, {"sha": "9e288f6ddb2bfaa7b985831bba59939b47a03f31", "filename": "src/librustc_back/arm.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    let cc_args = if target_triple.contains(\"thumb\") {\n-        vec!(\"-mthumb\".to_string())\n-    } else {\n-        vec!(\"-marm\".to_string())\n-    };\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsAndroid => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd | abi::OsNetbsd => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: cc_args,\n-    };\n-}"}, {"sha": "ecba37c23153d8c97f149f48a54463dcc50f88d6", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -52,13 +52,7 @@ extern crate rustc_llvm;\n \n pub mod abi;\n pub mod tempdir;\n-pub mod arm;\n-pub mod mips;\n-pub mod mipsel;\n pub mod rpath;\n pub mod sha2;\n pub mod svh;\n-pub mod target_strs;\n-pub mod x86;\n-pub mod x86_64;\n pub mod target;"}, {"sha": "e1edff817d6c1f27cf9e37285a5a4e4c1f58bb38", "filename": "src/librustc_back/mips.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsAndroid => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsBitrig | abi::OsDragonfly | abi::OsFreebsd | abi::OsNetbsd | abi::OsOpenbsd => {\n-            \"E-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: Vec::new(),\n-    };\n-}"}, {"sha": "ca52a9e56ff52978b7ed9c68801219182fe98249", "filename": "src/librustc_back/mipsel.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsAndroid => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-\n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd | abi::OsNetbsd => {\n-            \"e-p:32:32:32\\\n-                -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                -f32:32:32-f64:64:64\\\n-                -v64:64:64-v128:64:128\\\n-                -a:0:64-n32\".to_string()\n-          }\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: Vec::new(),\n-    };\n-}"}, {"sha": "e87cb43128d24fc1efffd5d53c16b3673fc91d95", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,10 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        // reference layout: e-m:o-i64:64-i128:128-n32:64-S128\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      i128:128-f32:32:32-f64:64:64-v64:64:64-v128:128:128-\\\n-                      a:0:64-n32:64-S128\".to_string(),\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "8c350e8b28750ef3ec9f04682a257de05b715468", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -12,9 +12,6 @@ use target::Target;\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      n32:64-S128\".to_string(),\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "ed79caf486942158402e23ce2d47ce527b923ab8", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,9 +13,6 @@ use target::Target;\n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      n32:64-S128\".to_string(),\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "f34ba40a8b2fe2888d61d84551ba05d056c5625a", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         dll_prefix: \"lib\".to_string(),\n         dll_suffix: \".dylib\".to_string(),\n+        archive_format: \"bsd\".to_string(),\n         pre_link_args: Vec::new(),\n         .. Default::default()\n     }"}, {"sha": "0770fe70e8a5780b69c6e28739fca356d9def1fa", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.features = \"+v7\".to_string();\n \n     Target {\n-        data_layout: \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:64:128-a:0:64-\\\n-                      n32\".to_string(),\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "084f989277f317024220d1290a180deda2339d2d", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,11 +13,6 @@ use target::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "08f1aa5ade848c6c9d6503c44d463b3b61f0a9db", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,11 +13,6 @@ use target::{Target, TargetOptions};\n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "a6d649ea162f93be4cab857075cf4af188055781", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,7 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "264385512added148a0519249939a5bcfee2711e", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,7 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "9f6a1f1e530079f3b5239ce4edf9f3caf5a8bb27", "filename": "src/librustc_back/target/bitrig_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fbitrig_base.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -22,6 +22,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         pre_link_args: vec!(\n         ),\n+        archive_format: \"bsd\".to_string(),\n \n         .. Default::default()\n     }"}, {"sha": "51a371db72446a04745316d64706785c2af5c78e", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -29,6 +29,7 @@ pub fn opts() -> TargetOptions {\n             \"-Wl,--as-needed\".to_string(),\n         ),\n         position_independent_executables: true,\n+        archive_format: \"bsd\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "2c3d240dbf3d53851ad732980b532c4620d1fb29", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -18,6 +18,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         morestack: true,\n         has_rpath: true,\n+        archive_format: \"bsd\".to_string(),\n \n         .. Default::default()\n     }"}, {"sha": "d17aa915461df369a192a5bf13c88f303cea204a", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,11 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                      -i32:32:32-i64:32:64\\\n-                      -f32:32:32-f64:32:64-v64:64:64\\\n-                      -v128:128:128-a:0:64-f80:128:128\\\n-                      -n8:16:32\".to_string(),\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "9fe15e76942863c7ada3bf69aa878905f8e3ccb2", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -16,11 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                      -i32:32:32-i64:32:64\\\n-                      -f32:32:32-f64:32:64-v64:64:64\\\n-                      -v128:128:128-a:0:64-f80:128:128\\\n-                      -n8:16:32\".to_string(),\n         llvm_target: \"i686-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "ae1b4d450a58e93792f636f42e9ac966720a0308", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -24,7 +24,6 @@ pub fn target() -> Target {\n     options.pre_link_args.push(\"-shared-libgcc\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "f2ae799bd2438185bcae77d0f17f785c003dae3a", "filename": "src/librustc_back/target/i686_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n     base.cpu = \"i686\".to_string();\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "f2478e6d0dbfeb37cfe8765013a60a5aafc2d2c7", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "68fee41e2cfa531c31f09f4c3a88f23cafda7c11", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n     base.morestack = false;\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "074d5b2b9ed228d5be4995a2f78c5e0d55b77b18", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "3f3da6d6c9136aa86448c17ead7d1d761b37b021", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -12,11 +12,6 @@ use target::Target;\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"E-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "d7f286c8aa4085beda3357ee7c6cbb9b062a2785", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -12,11 +12,6 @@ use target::Target;\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n         llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "39e42913ff6745e4389001908b80804bb95e2a16", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -67,8 +67,6 @@ mod windows_msvc_base;\n /// Every field here must be specified, and has no default value.\n #[derive(Clone, Debug)]\n pub struct Target {\n-    /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n-    pub data_layout: String,\n     /// Target triple to pass to LLVM.\n     pub llvm_target: String,\n     /// String to use as the `target_endian` `cfg` variable.\n@@ -92,6 +90,8 @@ pub struct Target {\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n #[derive(Clone, Debug)]\n pub struct TargetOptions {\n+    /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n+    pub data_layout: String,\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,\n     /// Archive utility to use when managing archives. Defaults to \"ar\".\n@@ -178,6 +178,7 @@ impl Default for TargetOptions {\n     /// incomplete, and if used for compilation, will certainly not work.\n     fn default() -> TargetOptions {\n         TargetOptions {\n+            data_layout: String::new(),\n             linker: \"cc\".to_string(),\n             ar: \"ar\".to_string(),\n             pre_link_args: Vec::new(),\n@@ -245,7 +246,6 @@ impl Target {\n         };\n \n         let mut base = Target {\n-            data_layout: get_req_field(\"data-layout\"),\n             llvm_target: get_req_field(\"llvm-target\"),\n             target_endian: get_req_field(\"target-endian\"),\n             target_pointer_width: get_req_field(\"target-pointer-width\"),\n@@ -289,6 +289,7 @@ impl Target {\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n         key!(features);\n+        key!(data_layout);\n         key!(dynamic_linking, bool);\n         key!(executables, bool);\n         key!(morestack, bool);"}, {"sha": "9b20bd927cb7a1d161df8a1b19c512d5d080a0f8", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -27,6 +27,7 @@ pub fn opts() -> TargetOptions {\n             \"-Wl,--as-needed\".to_string(),\n         ),\n         position_independent_executables: true,\n+        archive_format: \"bsd\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "9b20bd927cb7a1d161df8a1b19c512d5d080a0f8", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -27,6 +27,7 @@ pub fn opts() -> TargetOptions {\n             \"-Wl,--as-needed\".to_string(),\n         ),\n         position_independent_executables: true,\n+        archive_format: \"bsd\".to_string(),\n         .. Default::default()\n     }\n }"}, {"sha": "896824eba0e56b627bbb4ce14ae0caf6f745d11d", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m32\".to_string());\n \n     Target {\n-        data_layout: \"E-S8-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string(),\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),"}, {"sha": "ef40c2f2006e1628086bdb2906f30d6748b6118b", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -17,9 +17,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64\".to_string(),\n         llvm_target: \"x86_64-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "7aca8c554dab63dd27c6d9b980dc1a1f3b464ceb", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -13,9 +13,6 @@ use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64\".to_string(),\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "e4d7b4bc9b024fab54df64f1d57958039c556098", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -18,10 +18,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        // FIXME: Test this. Copied from linux (#2398)\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "addaaeb1b636da2cf7353eed6b96eeca3942cd43", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,13 +15,6 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n \n     Target {\n-        // This is currently in sync with the specification for\n-        // x86_64-pc-windows-gnu but there's a comment in that file questioning\n-        // whether this is valid or not. Sounds like the two should stay in sync\n-        // at least for now.\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "6ecf885aba38eff9cf1f1e9441001c32ccf3a3ca", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-bitrig\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "f0e665967ec6f3fd2b77304ce1ec28f584b79543", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "f742ebfde1d2c314fdf2e28e54c72d38e76f8613", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "4749e481fd85534724ff1bba722cd73ffc9e557f", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "c66192c28b13d7ce1ef2ddddd1f03dd891ba679c", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -70,9 +70,6 @@ pub fn target() -> Target {\n     base.position_independent_executables = false;\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                      s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "e13e58e3a186d163d22cc7a3dfc3c0491dad20c9", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "a404db48b22bb38875769d86e8d82b675e46ccf8", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> Target {\n     base.pre_link_args.push(\"-m64\".to_string());\n \n     Target {\n-        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                     f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                     s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),"}, {"sha": "7928f3d8db098167d7571824ea1b7d5666835a21", "filename": "src/librustc_back/target_strs.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget_strs.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(non_camel_case_types)]\n-\n-pub struct t {\n-    pub module_asm: String,\n-    pub data_layout: String,\n-    pub target_triple: String,\n-    pub cc_args: Vec<String> ,\n-}"}, {"sha": "46e0a83ac033b681387cdc07c188c676cdefc3d8", "filename": "src/librustc_back/x86.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n-                       -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                -i32:32:32-i64:32:64\\\n-                -f32:32:32-f64:32:64-v64:64:64\\\n-                -v128:128:128-a:0:64-f80:128:128\\\n-                -n8:16:32\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\\\n-                -i32:32:32-i64:32:64\\\n-                -f32:32:32-f64:32:64-v64:64:64\\\n-                -v128:128:128-a:0:64-f80:128:128\\\n-                -n8:16:32\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-          abi::OsAndroid => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-\n-          abi::OsFreebsd | abi::OsDragonfly | abi::OsBitrig | abi::OsOpenbsd | abi::OsNetbsd => {\n-            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\".to_string()\n-          }\n-\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: vec!(\"-m32\".to_string()),\n-    };\n-}"}, {"sha": "abdcd56444213e121fbb7f023a6df1674716d554", "filename": "src/librustc_back/x86_64.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=b5dad7dcb22ed6bf8ebaae56b4339bd64f6983eb", "patch": "@@ -1,62 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use target_strs;\n-use syntax::abi;\n-\n-pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t {\n-    return target_strs::t {\n-        module_asm: \"\".to_string(),\n-\n-        data_layout: match target_os {\n-          abi::OsMacos => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64\".to_string()\n-          }\n-\n-          abi::OsiOS => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64\".to_string()\n-          }\n-\n-          abi::OsWindows => {\n-            // FIXME: Test this. Copied from Linux (#2398)\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-\n-          abi::OsLinux => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-          abi::OsAndroid => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-\n-          abi::OsBitrig | abi::OsDragonfly | abi::OsFreebsd | abi::OsNetbsd | abi::OsOpenbsd => {\n-            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n-                f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n-                s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()\n-          }\n-\n-        },\n-\n-        target_triple: target_triple,\n-\n-        cc_args: vec!(\"-m64\".to_string()),\n-    };\n-}"}, {"sha": "85c0c721114f5837d6c112e9a47a74420c0087e3", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -118,6 +118,9 @@ impl<'a> Child<'a> {\n         unsafe {\n             let mut data_len = 0;\n             let data_ptr = ::LLVMRustArchiveChildData(self.ptr, &mut data_len);\n+            if data_ptr.is_null() {\n+                panic!(\"failed to read data from archive child\");\n+            }\n             slice::from_raw_parts(data_ptr as *const u8, data_len as usize)\n         }\n     }"}, {"sha": "7734704b021a851a66b5396343acfdbd0671b1c9", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -452,6 +452,15 @@ pub enum DiagnosticKind {\n     DK_OptimizationFailure,\n }\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub enum ArchiveKind {\n+    K_GNU,\n+    K_MIPS64,\n+    K_BSD,\n+    K_COFF,\n+}\n+\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -1136,12 +1145,13 @@ extern {\n                            Catch: BasicBlockRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildLandingPad(B: BuilderRef,\n-                               Ty: TypeRef,\n-                               PersFn: ValueRef,\n-                               NumClauses: c_uint,\n-                               Name: *const c_char)\n-                               -> ValueRef;\n+    pub fn LLVMRustBuildLandingPad(B: BuilderRef,\n+                                   Ty: TypeRef,\n+                                   PersFn: ValueRef,\n+                                   NumClauses: c_uint,\n+                                   Name: *const c_char,\n+                                   F: ValueRef)\n+                                   -> ValueRef;\n     pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n     pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n \n@@ -2118,11 +2128,16 @@ extern {\n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n                                 Members: *const RustArchiveMemberRef,\n-                                WriteSymbtab: bool) -> c_int;\n+                                WriteSymbtab: bool,\n+                                Kind: ArchiveKind) -> c_int;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n                                     Child: ArchiveChildRef) -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n+\n+    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef,\n+                                                  TM: TargetMachineRef);\n+    pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;\n }\n \n // LLVM requires symbols from this library, but apparently they're not printed"}, {"sha": "02f4bc83b7524a0a040d66021e528323993f0f28", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -22,7 +22,7 @@ use std::str;\n \n use libc;\n use llvm::archive_ro::{ArchiveRO, Child};\n-use llvm;\n+use llvm::{self, ArchiveKind};\n use rustc::metadata::loader::METADATA_FILENAME;\n use rustc::session::Session;\n use rustc_back::tempdir::TempDir;\n@@ -208,28 +208,34 @@ impl<'a> ArchiveBuilder<'a> {\n     /// Combine the provided files, rlibs, and native libraries into a single\n     /// `Archive`.\n     pub fn build(&mut self) {\n-        let res = if self.using_llvm() {\n-            self.build_with_llvm()\n-        } else {\n-            self.build_with_ar_cmd()\n+        let res = match self.llvm_archive_kind() {\n+            Some(kind) => self.build_with_llvm(kind),\n+            None => self.build_with_ar_cmd(),\n         };\n         if let Err(e) = res {\n             self.config.sess.fatal(&format!(\"failed to build archive: {}\", e));\n         }\n     }\n \n-    pub fn using_llvm(&self) -> bool {\n+    pub fn llvm_archive_kind(&self) -> Option<ArchiveKind> {\n         if unsafe { llvm::LLVMVersionMinor() < 7 } {\n-            return false\n+            return None\n         }\n \n         // Currently LLVM only supports writing archives in the 'gnu' format.\n         match &self.config.sess.target.target.options.archive_format[..] {\n-            \"gnu\" => true,\n-            _ => false,\n+            \"gnu\" => Some(ArchiveKind::K_GNU),\n+            \"mips64\" => Some(ArchiveKind::K_MIPS64),\n+            \"bsd\" => Some(ArchiveKind::K_BSD),\n+            \"coff\" => Some(ArchiveKind::K_COFF),\n+            _ => None,\n         }\n     }\n \n+    pub fn using_llvm(&self) -> bool {\n+        self.llvm_archive_kind().is_some()\n+    }\n+\n     fn build_with_ar_cmd(&mut self) -> io::Result<()> {\n         let removals = mem::replace(&mut self.removals, Vec::new());\n         let additions = mem::replace(&mut self.additions, Vec::new());\n@@ -425,7 +431,7 @@ impl<'a> ArchiveBuilder<'a> {\n         }\n     }\n \n-    fn build_with_llvm(&mut self) -> io::Result<()> {\n+    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> {\n         let mut archives = Vec::new();\n         let mut strings = Vec::new();\n         let mut members = Vec::new();\n@@ -482,7 +488,8 @@ impl<'a> ArchiveBuilder<'a> {\n             let r = llvm::LLVMRustWriteArchive(dst.as_ptr(),\n                                                members.len() as libc::size_t,\n                                                members.as_ptr(),\n-                                               self.should_update_symbols);\n+                                               self.should_update_symbols,\n+                                               kind);\n             let ret = if r != 0 {\n                 let err = llvm::LLVMRustGetLastError();\n                 let msg = if err.is_null() {"}, {"sha": "1f97a9b93edf5d9cb49db077e4fa3adffbfadcf3", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 40, "deletions": 49, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -163,7 +163,7 @@ fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n     }\n }\n \n-fn create_target_machine(sess: &Session) -> TargetMachineRef {\n+pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n     let reloc_model_arg = match sess.opts.cg.relocation_model {\n         Some(ref s) => &s[..],\n         None => &sess.target.target.options.relocation_model[..],\n@@ -591,10 +591,6 @@ pub fn run_passes(sess: &Session,\n     // Sanity check\n     assert!(trans.modules.len() == sess.opts.cg.codegen_units);\n \n-    unsafe {\n-        configure_llvm(sess);\n-    }\n-\n     let tm = create_target_machine(sess);\n \n     // Figure out what we actually need to build.\n@@ -943,10 +939,7 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n     }\n }\n \n-unsafe fn configure_llvm(sess: &Session) {\n-    use std::sync::Once;\n-    static INIT: Once = Once::new();\n-\n+pub unsafe fn configure_llvm(sess: &Session) {\n     let mut llvm_c_strs = Vec::new();\n     let mut llvm_args = Vec::new();\n \n@@ -968,46 +961,44 @@ unsafe fn configure_llvm(sess: &Session) {\n         }\n     }\n \n-    INIT.call_once(|| {\n-        llvm::LLVMInitializePasses();\n-\n-        // Only initialize the platforms supported by Rust here, because\n-        // using --llvm-root will have multiple platforms that rustllvm\n-        // doesn't actually link to and it's pointless to put target info\n-        // into the registry that Rust cannot generate machine code for.\n-        llvm::LLVMInitializeX86TargetInfo();\n-        llvm::LLVMInitializeX86Target();\n-        llvm::LLVMInitializeX86TargetMC();\n-        llvm::LLVMInitializeX86AsmPrinter();\n-        llvm::LLVMInitializeX86AsmParser();\n-\n-        llvm::LLVMInitializeARMTargetInfo();\n-        llvm::LLVMInitializeARMTarget();\n-        llvm::LLVMInitializeARMTargetMC();\n-        llvm::LLVMInitializeARMAsmPrinter();\n-        llvm::LLVMInitializeARMAsmParser();\n-\n-        llvm::LLVMInitializeAArch64TargetInfo();\n-        llvm::LLVMInitializeAArch64Target();\n-        llvm::LLVMInitializeAArch64TargetMC();\n-        llvm::LLVMInitializeAArch64AsmPrinter();\n-        llvm::LLVMInitializeAArch64AsmParser();\n-\n-        llvm::LLVMInitializeMipsTargetInfo();\n-        llvm::LLVMInitializeMipsTarget();\n-        llvm::LLVMInitializeMipsTargetMC();\n-        llvm::LLVMInitializeMipsAsmPrinter();\n-        llvm::LLVMInitializeMipsAsmParser();\n-\n-        llvm::LLVMInitializePowerPCTargetInfo();\n-        llvm::LLVMInitializePowerPCTarget();\n-        llvm::LLVMInitializePowerPCTargetMC();\n-        llvm::LLVMInitializePowerPCAsmPrinter();\n-        llvm::LLVMInitializePowerPCAsmParser();\n-\n-        llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n-                                     llvm_args.as_ptr());\n-    });\n+    llvm::LLVMInitializePasses();\n+\n+    // Only initialize the platforms supported by Rust here, because\n+    // using --llvm-root will have multiple platforms that rustllvm\n+    // doesn't actually link to and it's pointless to put target info\n+    // into the registry that Rust cannot generate machine code for.\n+    llvm::LLVMInitializeX86TargetInfo();\n+    llvm::LLVMInitializeX86Target();\n+    llvm::LLVMInitializeX86TargetMC();\n+    llvm::LLVMInitializeX86AsmPrinter();\n+    llvm::LLVMInitializeX86AsmParser();\n+\n+    llvm::LLVMInitializeARMTargetInfo();\n+    llvm::LLVMInitializeARMTarget();\n+    llvm::LLVMInitializeARMTargetMC();\n+    llvm::LLVMInitializeARMAsmPrinter();\n+    llvm::LLVMInitializeARMAsmParser();\n+\n+    llvm::LLVMInitializeAArch64TargetInfo();\n+    llvm::LLVMInitializeAArch64Target();\n+    llvm::LLVMInitializeAArch64TargetMC();\n+    llvm::LLVMInitializeAArch64AsmPrinter();\n+    llvm::LLVMInitializeAArch64AsmParser();\n+\n+    llvm::LLVMInitializeMipsTargetInfo();\n+    llvm::LLVMInitializeMipsTarget();\n+    llvm::LLVMInitializeMipsTargetMC();\n+    llvm::LLVMInitializeMipsAsmPrinter();\n+    llvm::LLVMInitializeMipsAsmParser();\n+\n+    llvm::LLVMInitializePowerPCTargetInfo();\n+    llvm::LLVMInitializePowerPCTarget();\n+    llvm::LLVMInitializePowerPCTargetMC();\n+    llvm::LLVMInitializePowerPCAsmPrinter();\n+    llvm::LLVMInitializePowerPCAsmParser();\n+\n+    llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n+                                 llvm_args.as_ptr());\n }\n \n unsafe fn populate_llvm_passes(fpm: llvm::PassManagerRef,"}, {"sha": "af894b218eff8e87e76c7103da155d91e5a9df27", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -68,14 +68,8 @@ pub use rustc::util;\n \n pub mod back {\n     pub use rustc_back::abi;\n-    pub use rustc_back::arm;\n-    pub use rustc_back::mips;\n-    pub use rustc_back::mipsel;\n     pub use rustc_back::rpath;\n     pub use rustc_back::svh;\n-    pub use rustc_back::target_strs;\n-    pub use rustc_back::x86;\n-    pub use rustc_back::x86_64;\n \n     pub mod archive;\n     pub mod linker;"}, {"sha": "4aeba2fe062872fc93a519ef83bbff8c07c3e5c2", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -2666,6 +2666,8 @@ pub fn trans_crate(tcx: &ty::ctxt, analysis: ty::CrateAnalysis) -> CrateTranslat\n                 // cannot proceed despite the Once not running more than once.\n                 POISONED = true;\n             }\n+\n+            ::back::write::configure_llvm(&tcx.sess);\n         });\n \n         if POISONED {"}, {"sha": "3e4452a23b9f7c893460421590bb25c506cbfdea", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -1039,7 +1039,7 @@ pub fn LandingPad(cx: Block, ty: Type, pers_fn: ValueRef,\n                   num_clauses: usize) -> ValueRef {\n     check_not_terminated(cx);\n     assert!(!cx.unreachable.get());\n-    B(cx).landing_pad(ty, pers_fn, num_clauses)\n+    B(cx).landing_pad(ty, pers_fn, num_clauses, cx.fcx.llfn)\n }\n \n pub fn SetCleanup(cx: Block, landing_pad: ValueRef) {"}, {"sha": "e39fc18dc7bf1140c70c5738f011b4cb37c8be69", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -927,11 +927,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef, num_clauses: usize) -> ValueRef {\n+    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,\n+                       num_clauses: usize,\n+                       llfn: ValueRef) -> ValueRef {\n         self.count_insn(\"landingpad\");\n         unsafe {\n-            llvm::LLVMBuildLandingPad(\n-                self.llbuilder, ty.to_ref(), pers_fn, num_clauses as c_uint, noname())\n+            llvm::LLVMRustBuildLandingPad(self.llbuilder, ty.to_ref(), pers_fn,\n+                                          num_clauses as c_uint, noname(), llfn)\n         }\n     }\n "}, {"sha": "5a4bd7ff3a18468847b5bcb47ef974c1b7557ad5", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -10,8 +10,6 @@\n \n use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n-use llvm::TargetData;\n-use llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::def::ExportMap;\n use middle::traits;\n@@ -83,7 +81,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n pub struct LocalCrateContext<'tcx> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n-    td: TargetData,\n     tn: TypeNames,\n     externs: RefCell<ExternMap>,\n     item_vals: RefCell<NodeMap<ValueRef>>,\n@@ -226,9 +223,15 @@ unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextR\n     let mod_name = CString::new(mod_name).unwrap();\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n-    let data_layout = sess.target.target.data_layout.as_bytes();\n-    let data_layout = CString::new(data_layout).unwrap();\n-    llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n+    let custom_data_layout = &sess.target.target.options.data_layout[..];\n+    if custom_data_layout.len() > 0 {\n+        let data_layout = CString::new(custom_data_layout).unwrap();\n+        llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n+    } else {\n+        let tm = ::back::write::create_target_machine(sess);\n+        llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n+        llvm::LLVMRustDisposeTargetMachine(tm);\n+    }\n \n     let llvm_target = sess.target.target.llvm_target.as_bytes();\n     let llvm_target = CString::new(llvm_target).unwrap();\n@@ -419,13 +422,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n         unsafe {\n             let (llcx, llmod) = create_context_and_module(&shared.tcx.sess, name);\n \n-            let td = mk_target_data(&shared.tcx\n-                                          .sess\n-                                          .target\n-                                          .target\n-                                          .data_layout\n-                                          );\n-\n             let dbg_cx = if shared.tcx.sess.opts.debuginfo != NoDebugInfo {\n                 Some(debuginfo::CrateDebugContext::new(llmod))\n             } else {\n@@ -435,7 +431,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             let mut local_ccx = LocalCrateContext {\n                 llmod: llmod,\n                 llcx: llcx,\n-                td: td,\n                 tn: TypeNames::new(),\n                 externs: RefCell::new(FnvHashMap()),\n                 item_vals: RefCell::new(NodeMap()),\n@@ -581,8 +576,8 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.local.llcx\n     }\n \n-    pub fn td<'a>(&'a self) -> &'a TargetData {\n-        &self.local.td\n+    pub fn td(&self) -> llvm::TargetDataRef {\n+        unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n     }\n \n     pub fn tn<'a>(&'a self) -> &'a TypeNames {"}, {"sha": "599a255ef8b6cee31462774900a5783f93bc4819", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -1606,13 +1606,10 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         .collect();\n \n     let discriminant_type_metadata = |inttype| {\n-        // We can reuse the type of the discriminant for all monomorphized\n-        // instances of an enum because it doesn't depend on any type\n-        // parameters. The def_id, uniquely identifying the enum's polytype acts\n-        // as key in this cache.\n+        let disr_type_key = (enum_def_id, inttype);\n         let cached_discriminant_type_metadata = debug_context(cx).created_enum_disr_types\n                                                                  .borrow()\n-                                                                 .get(&enum_def_id).cloned();\n+                                                                 .get(&disr_type_key).cloned();\n         match cached_discriminant_type_metadata {\n             Some(discriminant_type_metadata) => discriminant_type_metadata,\n             None => {\n@@ -1641,7 +1638,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n                 debug_context(cx).created_enum_disr_types\n                                  .borrow_mut()\n-                                 .insert(enum_def_id, discriminant_type_metadata);\n+                                 .insert(disr_type_key, discriminant_type_metadata);\n \n                 discriminant_type_metadata\n             }"}, {"sha": "a87352989173104c409f6a239b8bc7c354f62dd3", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -32,7 +32,7 @@ use trans;\n use trans::monomorphize;\n use middle::ty::Ty;\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n-use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n+use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n \n use libc::c_uint;\n use std::cell::{Cell, RefCell};\n@@ -41,6 +41,7 @@ use std::ptr;\n use std::rc::Rc;\n use syntax::codemap::{Span, Pos};\n use syntax::{ast, codemap, ast_util};\n+use syntax::attr::IntType;\n use syntax::parse::token::{self, special_idents};\n \n pub mod gdb;\n@@ -73,7 +74,7 @@ pub struct CrateDebugContext<'tcx> {\n     builder: DIBuilderRef,\n     current_debug_location: Cell<InternalDebugLocation>,\n     created_files: RefCell<FnvHashMap<String, DIFile>>,\n-    created_enum_disr_types: RefCell<DefIdMap<DIType>>,\n+    created_enum_disr_types: RefCell<FnvHashMap<(ast::DefId, IntType), DIType>>,\n \n     type_map: RefCell<TypeMap<'tcx>>,\n     namespace_map: RefCell<FnvHashMap<Vec<ast::Name>, Rc<NamespaceTreeNode>>>,\n@@ -94,7 +95,7 @@ impl<'tcx> CrateDebugContext<'tcx> {\n             builder: builder,\n             current_debug_location: Cell::new(InternalDebugLocation::UnknownLocation),\n             created_files: RefCell::new(FnvHashMap()),\n-            created_enum_disr_types: RefCell::new(DefIdMap()),\n+            created_enum_disr_types: RefCell::new(FnvHashMap()),\n             type_map: RefCell::new(TypeMap::new()),\n             namespace_map: RefCell::new(FnvHashMap()),\n             composite_types_completed: RefCell::new(FnvHashSet()),"}, {"sha": "691fba42d57051e9aa74757d0b28fd8f1630e494", "filename": "src/librustc_trans/trans/machine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmachine.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -27,15 +27,15 @@ pub type llalign = u32;\n // Returns the number of bytes clobbered by a Store to this type.\n pub fn llsize_of_store(cx: &CrateContext, ty: Type) -> llsize {\n     unsafe {\n-        return llvm::LLVMStoreSizeOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMStoreSizeOfType(cx.td(), ty.to_ref());\n     }\n }\n \n // Returns the number of bytes between successive elements of type T in an\n // array of T. This is the \"ABI\" size. It includes any ABI-mandated padding.\n pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize {\n     unsafe {\n-        return llvm::LLVMABISizeOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMABISizeOfType(cx.td(), ty.to_ref());\n     }\n }\n \n@@ -51,7 +51,7 @@ pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize {\n // below.\n pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> llsize {\n     unsafe {\n-        let nbits = llvm::LLVMSizeOfTypeInBits(cx.td().lltd, ty.to_ref());\n+        let nbits = llvm::LLVMSizeOfTypeInBits(cx.td(), ty.to_ref());\n         if nbits & 7 != 0 {\n             // Not an even number of bytes, spills into \"next\" byte.\n             1 + (nbits >> 3)\n@@ -64,7 +64,7 @@ pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> llsize {\n /// Returns the \"real\" size of the type in bits.\n pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> llbits {\n     unsafe {\n-        llvm::LLVMSizeOfTypeInBits(cx.td().lltd, ty.to_ref())\n+        llvm::LLVMSizeOfTypeInBits(cx.td(), ty.to_ref())\n     }\n }\n \n@@ -86,7 +86,7 @@ pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef {\n // allocations inside a stack frame, which LLVM has a free hand in.\n pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign {\n     unsafe {\n-        return llvm::LLVMPreferredAlignmentOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMPreferredAlignmentOfType(cx.td(), ty.to_ref());\n     }\n }\n \n@@ -95,13 +95,13 @@ pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign {\n // and similar ABI-mandated things.\n pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> llalign {\n     unsafe {\n-        return llvm::LLVMABIAlignmentOfType(cx.td().lltd, ty.to_ref());\n+        return llvm::LLVMABIAlignmentOfType(cx.td(), ty.to_ref());\n     }\n }\n \n pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: usize) -> u64 {\n     unsafe {\n-        return llvm::LLVMOffsetOfElement(cx.td().lltd,\n+        return llvm::LLVMOffsetOfElement(cx.td(),\n                                          struct_ty.to_ref(),\n                                          element as u32);\n     }"}, {"sha": "874dc4ee4cb782056469f003831bcda3e4cdf0df", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -1 +1 @@\n-Subproject commit 8cbcdf1b72e1b23679646f6faca265f76b20d379\n+Subproject commit 874dc4ee4cb782056469f003831bcda3e4cdf0df"}, {"sha": "8643131d0fb74eadb5196b219e324b359e6a9822", "filename": "src/rt/rust_try.ll", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frt%2Frust_try.ll", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frt%2Frust_try.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_try.ll?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -14,7 +14,9 @@\n \n ; See also: libstd/rt/unwind/mod.rs\n \n-define i8* @rust_try(void (i8*)* %f, i8* %env) {\n+define i8* @rust_try(void (i8*)* %f, i8* %env)\n+    personality i8* bitcast (i32 (...)* @rust_eh_personality_catch to i8*)\n+{\n \n     %1 = invoke i8* @rust_try_inner(void (i8*)* %f, i8* %env)\n         to label %normal\n@@ -24,13 +26,15 @@ normal:\n     ret i8* %1\n \n catch:\n-    landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @rust_eh_personality_catch to i8*)\n-        catch i8* null\n-    ; rust_try_inner's landing pad does not resume unwinds, so execution will never reach here\n+    landingpad { i8*, i32 } catch i8* null\n+    ; rust_try_inner's landing pad does not resume unwinds, so execution will\n+    ; never reach here\n     ret i8* null\n }\n \n-define internal i8* @rust_try_inner(void (i8*)* %f, i8* %env) {\n+define internal i8* @rust_try_inner(void (i8*)* %f, i8* %env)\n+    personality i8* bitcast (i32 (...)* @rust_eh_personality to i8*)\n+{\n \n     invoke void %f(i8* %env)\n         to label %normal\n@@ -40,8 +44,7 @@ normal:\n     ret i8* null\n \n catch:\n-    %1 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @rust_eh_personality to i8*)\n-        catch i8* null\n+    %1 = landingpad { i8*, i32 } catch i8* null\n     ; extract and return pointer to the exception object\n     %2 = extractvalue { i8*, i32 } %1, 0\n     ret i8* %2"}, {"sha": "c38e6081bf2d3fdc07e1788ac15cb911c733a539", "filename": "src/rt/rust_try_msvc_64.ll", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frt%2Frust_try_msvc_64.ll", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frt%2Frust_try_msvc_64.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_try_msvc_64.ll?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -21,7 +21,9 @@\n ;\n ; See also: src/libstd/rt/unwind/seh.rs\n \n-define i8* @rust_try(void (i8*)* %f, i8* %env) {\n+define i8* @rust_try(void (i8*)* %f, i8* %env)\n+    personality i8* bitcast (i32 (...)* @__C_specific_handler to i8*)\n+{\n     invoke void %f(i8* %env)\n         to label %normal\n         unwind label %catch\n@@ -58,8 +60,8 @@ normal:\n ; but apparently LLVM chokes on this, so we do the more complicated thing to\n ; placate it.\n catch:\n-    %vals = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__C_specific_handler to i8*)\n-        catch i8* bitcast (i32 (i8*, i8*)* @__rust_try_filter to i8*)\n+    %vals = landingpad { i8*, i32 }\n+              catch i8* bitcast (i32 (i8*, i8*)* @__rust_try_filter to i8*)\n     %ehptr = extractvalue { i8*, i32 } %vals, 0\n     %sel = extractvalue { i8*, i32 } %vals, 1\n     %filter_sel = call i32 @llvm.eh.typeid.for(i8* bitcast (i32 (i8*, i8*)* @__rust_try_filter to i8*))"}, {"sha": "86225874df77d39b6e89e702b821bd092b9ae47b", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -120,7 +120,17 @@ LLVMRustArchiveChildName(const Archive::Child *child, size_t *size) {\n \n extern \"C\" const char*\n LLVMRustArchiveChildData(Archive::Child *child, size_t *size) {\n-    StringRef buf = child->getBuffer();\n+    StringRef buf;\n+#if LLVM_VERSION_MINOR >= 7\n+    ErrorOr<StringRef> buf_or_err = child->getBuffer();\n+    if (buf_or_err.getError()) {\n+      LLVMRustSetLastError(buf_or_err.getError().message().c_str());\n+      return NULL;\n+    }\n+    buf = buf_or_err.get();\n+#else\n+    buf = child->getBuffer();\n+#endif\n     *size = buf.size();\n     return buf.data();\n }\n@@ -144,7 +154,8 @@ extern \"C\" int\n LLVMRustWriteArchive(char *Dst,\n                      size_t NumMembers,\n                      const LLVMRustArchiveMember **NewMembers,\n-                     bool WriteSymbtab) {\n+                     bool WriteSymbtab,\n+                     Archive::Kind Kind) {\n #if LLVM_VERSION_MINOR >= 7\n   std::vector<NewArchiveIterator> Members;\n \n@@ -157,7 +168,7 @@ LLVMRustWriteArchive(char *Dst,\n       Members.push_back(NewArchiveIterator(Member->child, Member->name));\n     }\n   }\n-  auto pair = writeArchive(Dst, Members, WriteSymbtab);\n+  auto pair = writeArchive(Dst, Members, WriteSymbtab, Kind, false);\n   if (!pair.second)\n     return 0;\n   LLVMRustSetLastError(pair.second.message().c_str());"}, {"sha": "6513fdfd2f2c19251df063caab0ada32cd271089", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -21,6 +21,8 @@\n #else\n #include \"llvm/Target/TargetLibraryInfo.h\"\n #endif\n+#include \"llvm/Target/TargetMachine.h\"\n+#include \"llvm/Target/TargetSubtargetInfo.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n \n@@ -327,3 +329,28 @@ LLVMRustMarkAllFunctionsNounwind(LLVMModuleRef M) {\n         }\n     }\n }\n+\n+extern \"C\" void\n+LLVMRustSetDataLayoutFromTargetMachine(LLVMModuleRef Module,\n+                                       LLVMTargetMachineRef TMR) {\n+    TargetMachine *Target = unwrap(TMR);\n+#if LLVM_VERSION_MINOR >= 7\n+    if (const DataLayout *DL = Target->getDataLayout())\n+        unwrap(Module)->setDataLayout(*DL);\n+#elif LLVM_VERSION_MINOR >= 6\n+    if (const DataLayout *DL = Target->getSubtargetImpl()->getDataLayout())\n+        unwrap(Module)->setDataLayout(DL);\n+#else\n+    if (const DataLayout *DL = Target->getDataLayout())\n+        unwrap(Module)->setDataLayout(DL);\n+#endif\n+}\n+\n+extern \"C\" LLVMTargetDataRef\n+LLVMRustGetModuleDataLayout(LLVMModuleRef M) {\n+#if LLVM_VERSION_MINOR >= 7\n+    return wrap(&unwrap(M)->getDataLayout());\n+#else\n+    return wrap(unwrap(M)->getDataLayout());\n+#endif\n+}"}, {"sha": "163e95b890f4b25ab2a513a9d3774cd98e679fbc", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -942,3 +942,18 @@ extern \"C\" void LLVMWriteSMDiagnosticToString(LLVMSMDiagnosticRef d, RustStringR\n     raw_rust_string_ostream os(str);\n     unwrap(d)->print(\"\", os);\n }\n+\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildLandingPad(LLVMBuilderRef Builder,\n+                        LLVMTypeRef Ty,\n+                        LLVMValueRef PersFn,\n+                        unsigned NumClauses,\n+                        const char* Name,\n+                        LLVMValueRef F) {\n+#if LLVM_VERSION_MINOR >= 7\n+    unwrap<Function>(F)->setPersonalityFn(unwrap<Constant>(PersFn));\n+    return LLVMBuildLandingPad(Builder, Ty, NumClauses, Name);\n+#else\n+    return LLVMBuildLandingPad(Builder, Ty, PersFn, NumClauses, Name);\n+#endif\n+}"}, {"sha": "dc0fbf6bf94eacb652ff11edb14afb248546fd26", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2015-06-16\n+2015-06-30"}, {"sha": "ae290e228cc4ab81d78469b8e259fc47fd86d5ca", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -0,0 +1,92 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// ignore-lldb: FIXME(#27089)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+// gdb-command:run\n+\n+// gdb-command:print eight_bytes1\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Variant1, __0 = 100}, {RUST$ENUM$DISR = Variant1, __0 = 100}}\n+// gdb-command:print four_bytes1\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Variant1, __0 = 101}, {RUST$ENUM$DISR = Variant1, __0 = 101}}\n+// gdb-command:print two_bytes1\n+// gdb-check:$3 = {{RUST$ENUM$DISR = Variant1, __0 = 102}, {RUST$ENUM$DISR = Variant1, __0 = 102}}\n+// gdb-command:print one_byte1\n+// gdb-check:$4 = {{RUST$ENUM$DISR = Variant1, __0 = 65 'A'}, {RUST$ENUM$DISR = Variant1, __0 = 65 'A'}}\n+\n+// gdb-command:print eight_bytes2\n+// gdb-check:$5 = {{RUST$ENUM$DISR = Variant2, __0 = 100}, {RUST$ENUM$DISR = Variant2, __0 = 100}}\n+// gdb-command:print four_bytes2\n+// gdb-check:$6 = {{RUST$ENUM$DISR = Variant2, __0 = 101}, {RUST$ENUM$DISR = Variant2, __0 = 101}}\n+// gdb-command:print two_bytes2\n+// gdb-check:$7 = {{RUST$ENUM$DISR = Variant2, __0 = 102}, {RUST$ENUM$DISR = Variant2, __0 = 102}}\n+// gdb-command:print one_byte2\n+// gdb-check:$8 = {{RUST$ENUM$DISR = Variant2, __0 = 65 'A'}, {RUST$ENUM$DISR = Variant2, __0 = 65 'A'}}\n+\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print eight_bytes1\n+// lldb-check:[...]$0 = Variant1(100)\n+// lldb-command:print four_bytes1\n+// lldb-check:[...]$1 = Variant1(101)\n+// lldb-command:print two_bytes1\n+// lldb-check:[...]$2 = Variant1(102)\n+// lldb-command:print one_byte1\n+// lldb-check:[...]$3 = Variant1('A')\n+\n+// lldb-command:print eight_bytes2\n+// lldb-check:[...]$4 = Variant2(100)\n+// lldb-command:print four_bytes2\n+// lldb-check:[...]$5 = Variant2(101)\n+// lldb-command:print two_bytes2\n+// lldb-check:[...]$6 = Variant2(102)\n+// lldb-command:print one_byte2\n+// lldb-check:[...]$7 = Variant2('A')\n+\n+// lldb-command:continue\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// This test case makes sure that we get correct type descriptions for the enum\n+// discriminant of different instantiations of the same generic enum type where,\n+// dependending on the generic type parameter(s), the discriminant has a\n+// different size in memory.\n+\n+enum Enum<T> {\n+    Variant1(T),\n+    Variant2(T)\n+}\n+\n+fn main() {\n+    // These are ordered for descending size on purpose\n+    let eight_bytes1 = Enum::Variant1(100.0f64);\n+    let four_bytes1 = Enum::Variant1(101i32);\n+    let two_bytes1 = Enum::Variant1(102i16);\n+    let one_byte1 = Enum::Variant1(65u8);\n+\n+    let eight_bytes2 = Enum::Variant2(100.0f64);\n+    let four_bytes2 = Enum::Variant2(101i32);\n+    let two_bytes2 = Enum::Variant2(102i16);\n+    let one_byte2 = Enum::Variant2(65u8);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}