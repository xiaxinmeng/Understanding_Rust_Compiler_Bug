{"sha": "6db9a8c55cc45afb5b28f67352f32507188094f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjlhOGM1NWNjNDVhZmI1YjI4ZjY3MzUyZjMyNTA3MTg4MDk0ZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:56:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` `resolve::Module::def_id`", "tree": {"sha": "06acaf78d47144dffb463832ba50e3121d01da8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06acaf78d47144dffb463832ba50e3121d01da8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db9a8c55cc45afb5b28f67352f32507188094f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db9a8c55cc45afb5b28f67352f32507188094f5", "html_url": "https://github.com/rust-lang/rust/commit/6db9a8c55cc45afb5b28f67352f32507188094f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db9a8c55cc45afb5b28f67352f32507188094f5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d503fff28ef8498e9e4ba9fb36f63f6905e882a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d503fff28ef8498e9e4ba9fb36f63f6905e882a7", "html_url": "https://github.com/rust-lang/rust/commit/d503fff28ef8498e9e4ba9fb36f63f6905e882a7"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "b086217dbd0a800985e7c938c306f07e8fe52a3d", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6db9a8c55cc45afb5b28f67352f32507188094f5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db9a8c55cc45afb5b28f67352f32507188094f5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6db9a8c55cc45afb5b28f67352f32507188094f5", "patch": "@@ -416,7 +416,7 @@ enum ModuleKind {\n /// One node in the tree of modules.\n struct Module {\n     parent_link: ParentLink,\n-    def_id: Option<DefId>,\n+    def_id: Cell<Option<DefId>>,\n     kind: Cell<ModuleKind>,\n     is_public: bool,\n \n@@ -467,7 +467,7 @@ impl Module {\n            -> Module {\n         Module {\n             parent_link: parent_link,\n-            def_id: def_id,\n+            def_id: Cell::new(def_id),\n             kind: Cell::new(kind),\n             is_public: is_public,\n             children: @mut HashMap::new(),\n@@ -668,7 +668,7 @@ impl NameBindings {\n                             None => {\n                                 match type_def.module_def {\n                                     Some(module) => {\n-                                        match module.def_id {\n+                                        match module.def_id.get() {\n                                             Some(did) => Some(DefMod(did)),\n                                             None => None,\n                                         }\n@@ -1591,7 +1591,7 @@ impl Resolver {\n         let is_public = vis == ast::public;\n         let is_exported = is_public && match new_parent {\n             ModuleReducedGraphParent(module) => {\n-                match module.def_id {\n+                match module.def_id.get() {\n                     None => true,\n                     Some(did) => self.external_exports.contains(&did)\n                 }\n@@ -1607,7 +1607,7 @@ impl Resolver {\n               Some(TypeNsDef { module_def: Some(module_def), .. }) => {\n                 debug!(\"(building reduced graph for external crate) \\\n                         already created module\");\n-                module_def.def_id = Some(def_id);\n+                module_def.def_id.set(Some(def_id));\n               }\n               Some(_) | None => {\n                 debug!(\"(building reduced graph for \\\n@@ -1869,7 +1869,7 @@ impl Resolver {\n         debug!(\"(populating external module) attempting to populate {}\",\n                self.module_to_str(module));\n \n-        let def_id = match module.def_id {\n+        let def_id = match module.def_id.get() {\n             None => {\n                 debug!(\"(populating external module) ... no def ID!\");\n                 return\n@@ -1904,7 +1904,10 @@ impl Resolver {\n     fn build_reduced_graph_for_external_crate(&mut self,\n                                               root: @mut Module) {\n         csearch::each_top_level_item_of_crate(self.session.cstore,\n-                                              root.def_id.unwrap().crate,\n+                                              root.def_id\n+                                                  .get()\n+                                                  .unwrap()\n+                                                  .crate,\n                                               |def_like, ident, visibility| {\n             self.build_reduced_graph_for_external_crate_def(root,\n                                                             def_like,\n@@ -2568,7 +2571,7 @@ impl Resolver {\n         }\n \n         // Record the destination of this import\n-        match containing_module.def_id {\n+        match containing_module.def_id.get() {\n             Some(did) => {\n                 self.def_map.insert(id, DefMod(did));\n                 self.last_private.insert(id, lp);\n@@ -2667,7 +2670,8 @@ impl Resolver {\n                                             // resolving this import chain.\n                                             if !used_proxy &&\n                                                !search_module.is_public {\n-                                                match search_module.def_id {\n+                                                match search_module.def_id\n+                                                                   .get() {\n                                                     Some(did) => {\n                                                         closest_private =\n                                                             DependsOn(did);\n@@ -2787,7 +2791,9 @@ impl Resolver {\n             Success(PrefixFound(containing_module, index)) => {\n                 search_module = containing_module;\n                 start_index = index;\n-                last_private = DependsOn(containing_module.def_id.unwrap());\n+                last_private = DependsOn(containing_module.def_id\n+                                                          .get()\n+                                                          .unwrap());\n             }\n         }\n \n@@ -3196,7 +3202,7 @@ impl Resolver {\n         // If this isn't a local crate, then bail out. We don't need to record\n         // exports for nonlocal crates.\n \n-        match module_.def_id {\n+        match module_.def_id.get() {\n             Some(def_id) if def_id.crate == LOCAL_CRATE => {\n                 // OK. Continue.\n                 debug!(\"(recording exports for module subtree) recording \\\n@@ -3241,7 +3247,7 @@ impl Resolver {\n         let mut exports2 = ~[];\n \n         self.add_exports_for_module(&mut exports2, module_);\n-        match module_.def_id {\n+        match module_.def_id.get() {\n             Some(def_id) => {\n                 self.export_map2.insert(def_id.node, exports2);\n                 debug!(\"(computing exports) writing exports for {} (some)\",\n@@ -4644,7 +4650,7 @@ impl Resolver {\n             match containing_module.external_module_children.find(&name.name) {\n                 None => {}\n                 Some(module) => {\n-                    match module.def_id {\n+                    match module.def_id.get() {\n                         None => {} // Continue.\n                         Some(def_id) => {\n                             let lp = if module.is_public {AllPublic} else {\n@@ -4707,7 +4713,7 @@ impl Resolver {\n             TraitModuleKind | ImplModuleKind => {\n                 match self.method_map.find(&ident.name) {\n                     Some(s) => {\n-                        match containing_module.def_id {\n+                        match containing_module.def_id.get() {\n                             Some(def_id) if s.contains(&def_id) => {\n                                 debug!(\"containing module was a trait or impl \\\n                                         and name was a method -> not resolved\");"}]}