{"sha": "3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMmNkNjgxYWU3NmQwYzE0NDQyMzhkNTQzODRlMWQzY2IzZDM1ZmM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-19T01:14:27Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-01T06:36:40Z"}, "message": "Use 'first_line_width'", "tree": {"sha": "39cbbb8bd35dd5d373a3ced63fec5d9c4b494bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cbbb8bd35dd5d373a3ced63fec5d9c4b494bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "html_url": "https://github.com/rust-lang/rust/commit/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c9ac93be959272ffbb3fbbec79dbe9fc734140", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c9ac93be959272ffbb3fbbec79dbe9fc734140", "html_url": "https://github.com/rust-lang/rust/commit/02c9ac93be959272ffbb3fbbec79dbe9fc734140"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "a2485cab69f2f9fa4fcaf5272443ad876d1defc0", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "patch": "@@ -203,8 +203,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n                                                          shape) {\n                         // If the first line of the last method does not fit into a single line\n                         // after the others, allow new lines.\n-                        let first_line = try_opt!(last[0].lines().nth(0));\n-                        almost_total + first_line.len() < context.config.max_width\n+                        almost_total + first_line_width(&last[0]) < context.config.max_width\n                     } else {\n                         false\n                     }"}, {"sha": "43b0b033ea6d3fbbde9739104eae303beda95319", "filename": "tests/source/match.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "patch": "@@ -295,3 +295,81 @@ fn guards() {\n                (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb || cccccccccccccccccccccccccccccccccccccccc) => {}\n     }\n }\n+\n+fn issue1371() {\n+    Some(match type_ {\n+        sfEvtClosed => Closed,\n+        sfEvtResized => {\n+            let e = unsafe { *event.size.as_ref() };\n+\n+            Resized {\n+                width: e.width,\n+                height: e.height,\n+            }\n+        }\n+        sfEvtLostFocus => LostFocus,\n+        sfEvtGainedFocus => GainedFocus,\n+        sfEvtTextEntered => {\n+            TextEntered {\n+                unicode: unsafe {\n+                    ::std::char::from_u32((*event.text.as_ref()).unicode)\n+                        .expect(\"Invalid unicode encountered on TextEntered event\")\n+                },\n+            }\n+        }\n+        sfEvtKeyPressed => {\n+            let e = unsafe { event.key.as_ref() };\n+\n+            KeyPressed {\n+                code: unsafe { ::std::mem::transmute(e.code) },\n+                alt: e.alt.to_bool(),\n+                ctrl: e.control.to_bool(),\n+                shift: e.shift.to_bool(),\n+                system: e.system.to_bool(),\n+            }\n+        }\n+        sfEvtKeyReleased => {\n+            let e = unsafe { event.key.as_ref() };\n+\n+            KeyReleased {\n+                code: unsafe { ::std::mem::transmute(e.code) },\n+                alt: e.alt.to_bool(),\n+                ctrl: e.control.to_bool(),\n+                shift: e.shift.to_bool(),\n+                system: e.system.to_bool(),\n+            }\n+        }\n+    })\n+}\n+\n+fn issue1395() {\n+    let bar = Some(true);\n+    let foo = Some(true);\n+    let mut x = false;\n+    bar.and_then(|_| {\n+        match foo {\n+            None => None,\n+            Some(b) => {\n+                x = true;\n+                Some(b)\n+            }\n+        }\n+    });\n+}\n+\n+fn issue1456() {\n+    Ok(Recording {\n+        artists: match reader.evaluate(\".//mb:recording/mb:artist-credit/mb:name-credit\")? {\n+            Nodeset(nodeset) => {\n+                let res: Result<Vec<ArtistRef>, ReadError> = nodeset\n+                    .iter()\n+                    .map(|node| {\n+                        XPathNodeReader::new(node, &context).and_then(|r| ArtistRef::from_xml(&r))\n+                    })\n+                    .collect();\n+                res?\n+            }\n+            _ => Vec::new(),\n+        },\n+    })\n+}"}, {"sha": "0da943d28f78d9ba2aa5d40438d1345366b39133", "filename": "tests/target/match.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cd681ae76d0c1444238d54384e1d3cb3d35fc/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=3d2cd681ae76d0c1444238d54384e1d3cb3d35fc", "patch": "@@ -310,3 +310,82 @@ fn guards() {\n                 cccccccccccccccccccccccccccccccccccccccc) => {}\n     }\n }\n+\n+fn issue1371() {\n+    Some(match type_ {\n+             sfEvtClosed => Closed,\n+             sfEvtResized => {\n+                 let e = unsafe { *event.size.as_ref() };\n+\n+                 Resized {\n+                     width: e.width,\n+                     height: e.height,\n+                 }\n+             }\n+             sfEvtLostFocus => LostFocus,\n+             sfEvtGainedFocus => GainedFocus,\n+             sfEvtTextEntered => {\n+                 TextEntered {\n+                     unicode:\n+                         unsafe {\n+                             ::std::char::from_u32((*event.text.as_ref()).unicode)\n+                                 .expect(\"Invalid unicode encountered on TextEntered event\")\n+                         },\n+                 }\n+             }\n+             sfEvtKeyPressed => {\n+                 let e = unsafe { event.key.as_ref() };\n+\n+                 KeyPressed {\n+                     code: unsafe { ::std::mem::transmute(e.code) },\n+                     alt: e.alt.to_bool(),\n+                     ctrl: e.control.to_bool(),\n+                     shift: e.shift.to_bool(),\n+                     system: e.system.to_bool(),\n+                 }\n+             }\n+             sfEvtKeyReleased => {\n+                 let e = unsafe { event.key.as_ref() };\n+\n+                 KeyReleased {\n+                     code: unsafe { ::std::mem::transmute(e.code) },\n+                     alt: e.alt.to_bool(),\n+                     ctrl: e.control.to_bool(),\n+                     shift: e.shift.to_bool(),\n+                     system: e.system.to_bool(),\n+                 }\n+             }\n+         })\n+}\n+\n+fn issue1395() {\n+    let bar = Some(true);\n+    let foo = Some(true);\n+    let mut x = false;\n+    bar.and_then(|_| match foo {\n+                     None => None,\n+                     Some(b) => {\n+                         x = true;\n+                         Some(b)\n+                     }\n+                 });\n+}\n+\n+fn issue1456() {\n+    Ok(Recording {\n+           artists: match reader\n+                     .evaluate(\".//mb:recording/mb:artist-credit/mb:name-credit\")? {\n+               Nodeset(nodeset) => {\n+                   let res: Result<Vec<ArtistRef>, ReadError> = nodeset\n+                       .iter()\n+                       .map(|node| {\n+                                XPathNodeReader::new(node, &context)\n+                                    .and_then(|r| ArtistRef::from_xml(&r))\n+                            })\n+                       .collect();\n+                   res?\n+               }\n+               _ => Vec::new(),\n+           },\n+       })\n+}"}]}