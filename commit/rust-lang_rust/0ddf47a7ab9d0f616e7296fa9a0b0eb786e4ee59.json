{"sha": "0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGY0N2E3YWI5ZDBmNjE2ZTcyOTZmYTlhMGIwZWI3ODZlNGVlNTk=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-10-27T16:57:11Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-10-27T16:57:11Z"}, "message": "Introducing a Scopes Mapper to map from RA scopes to TextMate scopes with fallbacks.\nCurrent scopes defined:\n```\n    ['keyword.unsafe', ['storage.modifier', 'keyword.other', 'keyword.control']],\n    ['function', ['entity.name.function']],\n    ['parameter', ['variable.parameter']],\n    ['type', ['entity.name.type']],\n    ['builtin', ['variable.language', 'support.type', 'support.type']],\n    ['text', ['string', 'string.quoted', 'string.regexp']],\n    ['attribute', ['keyword']],\n    ['literal', ['string', 'string.quoted', 'string.regexp']],\n    ['macro', ['support.other']],\n    ['variable.mut', ['variable']],\n    ['field', ['variable.object.property']],\n    ['module', ['entity.name.section']]\n```\n\nNeed to complement with further fallbacks as some themes fail.", "tree": {"sha": "80234db0e3af0d5f0b428a18f1b66f8fa2ba3bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80234db0e3af0d5f0b428a18f1b66f8fa2ba3bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "html_url": "https://github.com/rust-lang/rust/commit/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5957b851e4451050151722598fa1ff9d41ccf0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5957b851e4451050151722598fa1ff9d41ccf0ff", "html_url": "https://github.com/rust-lang/rust/commit/5957b851e4451050151722598fa1ff9d41ccf0ff"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "a3fe39098729d7aaf11cdea835958a73a4080fae", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n import * as scopes from './scopes';\n+import * as scopesMapper from './scopes_mapper';\n import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n@@ -49,6 +50,7 @@ export class Config {\n         \n         Server.highlighter.removeHighlights();\n         scopes.load()\n+        scopesMapper.load()\n         if (config.has('highlightingOn')) {\n \n             this.highlightingOn = config.get('highlightingOn') as boolean;"}, {"sha": "bc19fae2ff2ccf83fb87f613a15ddf934d978532", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "patch": "@@ -2,7 +2,7 @@ import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as scopes from './scopes'\n-\n+import * as scopesMapper from './scopes_mapper';\n \n import { Server } from './server';\n \n@@ -65,10 +65,13 @@ export class Highlighter {\n             tag: string,\n             textDecoration?: string\n         ): [string, vscode.TextEditorDecorationType] => {\n-            const scope = scopes.find(tag)\n \n-            if (scope) {\n-                const decor = createDecorationFromTextmate(scope);\n+            const foundRule = scopesMapper.toRule(tag, scopes.find) || scopes.find(tag)\n+\n+\n+\n+            if (foundRule) {\n+                const decor = createDecorationFromTextmate(foundRule);\n                 return [tag, decor];\n             }\n             else {"}, {"sha": "470ee716ff27e677667ecbe676d74eae5e9bc560", "filename": "editors/code/src/scopes.ts", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "patch": "@@ -16,16 +16,16 @@ export interface TextMateRuleSettings {\n }\n \n // Current theme colors\n-const colors = new Map<string, TextMateRuleSettings>()\n+const rules = new Map<string, TextMateRuleSettings>()\n \n export function find(scope: string): TextMateRuleSettings | undefined {\n-    return colors.get(scope)\n+    return rules.get(scope)\n }\n \n // Load all textmate scopes in the currently active theme\n export function load() {\n     // Remove any previous theme\n-    colors.clear()\n+    rules.clear()\n     // Find out current color theme\n     const themeName = vscode.workspace.getConfiguration('workbench').get('colorTheme')\n \n@@ -95,21 +95,21 @@ function loadColors(textMateRules: TextMateRule[]): void {\n     for (const rule of textMateRules) {\n \n         if (typeof rule.scope === 'string') {\n-            const existingRule = colors.get(rule.scope);\n+            const existingRule = rules.get(rule.scope);\n             if (existingRule) {\n-                colors.set(rule.scope, mergeRuleSettings(existingRule, rule.settings))\n+                rules.set(rule.scope, mergeRuleSettings(existingRule, rule.settings))\n             }\n             else {\n-                colors.set(rule.scope, rule.settings)\n+                rules.set(rule.scope, rule.settings)\n             }\n         } else if (rule.scope instanceof Array) {\n             for (const scope of rule.scope) {\n-                const existingRule = colors.get(scope);\n+                const existingRule = rules.get(scope);\n                 if (existingRule) {\n-                    colors.set(scope, mergeRuleSettings(existingRule, rule.settings))\n+                    rules.set(scope, mergeRuleSettings(existingRule, rule.settings))\n                 }\n                 else {\n-                    colors.set(scope, rule.settings)\n+                    rules.set(scope, rule.settings)\n                 }\n             }\n         }"}, {"sha": "995adae2dd8fda847f8ff125e05481f7a8bf5591", "filename": "editors/code/src/scopes_mapper.ts", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts?ref=0ddf47a7ab9d0f616e7296fa9a0b0eb786e4ee59", "patch": "@@ -0,0 +1,42 @@\n+import * as vscode from 'vscode'\n+import { TextMateRuleSettings } from './scopes'\n+\n+\n+\n+\n+let mappings = new Map<string, string[]>()\n+\n+\n+const defaultMapping = new Map<string, string[]>([\n+    ['keyword.unsafe', ['storage.modifier', 'keyword.other', 'keyword.control']],\n+    ['function', ['entity.name.function']],\n+    ['parameter', ['variable.parameter']],\n+    ['type', ['entity.name.type']],\n+    ['builtin', ['variable.language', 'support.type', 'support.type']],\n+    ['text', ['string', 'string.quoted', 'string.regexp']],\n+    ['attribute', ['keyword']],\n+    ['literal', ['string', 'string.quoted', 'string.regexp']],\n+    ['macro', ['support.other']],\n+    ['variable.mut', ['variable']],\n+    ['field', ['variable.object.property']],\n+    ['module', ['entity.name.section']]\n+]\n+)\n+function find(scope: string): string[] {\n+    return mappings.get(scope) || []\n+}\n+\n+export function toRule(scope: string, intoRule: (scope: string) => TextMateRuleSettings | undefined): TextMateRuleSettings | undefined {\n+    return find(scope).map(intoRule).find(rule => rule !== null)\n+}\n+\n+\n+export function load() {\n+    const configuration = vscode.workspace\n+        .getConfiguration('rust-analyzer')\n+        .get('scopeMappings') as Map<string, string[]> | undefined || new Map()\n+\n+    mappings = new Map([...Array.from(defaultMapping.entries()), ...Array.from(configuration.entries())]);\n+\n+\n+}\n\\ No newline at end of file"}]}