{"sha": "33e111483fbc80c017037e0b158ee652ed41b3e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZTExMTQ4M2ZiYzgwYzAxNzAzN2UwYjE1OGVlNjUyZWQ0MWIzZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T09:10:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T09:10:15Z"}, "message": "Use snippets in change_return_type_to_result", "tree": {"sha": "54724a3d13ab1ba2abb7ddbae41736f4faade267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54724a3d13ab1ba2abb7ddbae41736f4faade267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33e111483fbc80c017037e0b158ee652ed41b3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33e111483fbc80c017037e0b158ee652ed41b3e8", "html_url": "https://github.com/rust-lang/rust/commit/33e111483fbc80c017037e0b158ee652ed41b3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33e111483fbc80c017037e0b158ee652ed41b3e8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d790a443f396ad53037a3f6ba794b6f4df5b3748", "url": "https://api.github.com/repos/rust-lang/rust/commits/d790a443f396ad53037a3f6ba794b6f4df5b3748", "html_url": "https://github.com/rust-lang/rust/commit/d790a443f396ad53037a3f6ba794b6f4df5b3748"}], "stats": {"total": 85, "additions": 37, "deletions": 48}, "files": [{"sha": "c6baa0a57c6c6d6eb5dd84c4ca1f93e9437e3b73", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/33e111483fbc80c017037e0b158ee652ed41b3e8/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e111483fbc80c017037e0b158ee652ed41b3e8/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=33e111483fbc80c017037e0b158ee652ed41b3e8", "patch": "@@ -1,8 +1,6 @@\n use ra_syntax::{\n     ast::{self, BlockExpr, Expr, LoopBodyOwner},\n-    AstNode,\n-    SyntaxKind::{COMMENT, WHITESPACE},\n-    SyntaxNode, TextSize,\n+    AstNode, SyntaxNode,\n };\n \n use crate::{AssistContext, AssistId, Assists};\n@@ -16,7 +14,7 @@ use crate::{AssistContext, AssistId, Assists};\n // ```\n // ->\n // ```\n-// fn foo() -> Result<i32, > { Ok(42i32) }\n+// fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n // ```\n pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let ret_type = ctx.find_node_at_offset::<ast::RetType>()?;\n@@ -42,14 +40,14 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n             for ret_expr_arg in tail_return_expr_collector.exprs_to_wrap {\n                 builder.replace_node_and_indent(&ret_expr_arg, format!(\"Ok({})\", ret_expr_arg));\n             }\n-            match ctx.config.snippet_cap {\n-                Some(_) => {}\n-                None => {}\n-            }\n-            builder.replace_node_and_indent(type_ref.syntax(), format!(\"Result<{}, >\", type_ref));\n \n-            if let Some(node_start) = result_insertion_offset(&type_ref) {\n-                builder.set_cursor(node_start + TextSize::of(&format!(\"Result<{}, \", type_ref)));\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snippet = format!(\"Result<{}, ${{0:_}}>\", type_ref);\n+                    builder.replace_snippet(cap, type_ref.syntax().text_range(), snippet)\n+                }\n+                None => builder\n+                    .replace(type_ref.syntax().text_range(), format!(\"Result<{}, _>\", type_ref)),\n             }\n         },\n     )\n@@ -251,17 +249,8 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n     }\n }\n \n-fn result_insertion_offset(ret_type: &ast::TypeRef) -> Option<TextSize> {\n-    let non_ws_child = ret_type\n-        .syntax()\n-        .children_with_tokens()\n-        .find(|it| it.kind() != COMMENT && it.kind() != WHITESPACE)?;\n-    Some(non_ws_child.text_range().start())\n-}\n-\n #[cfg(test)]\n mod tests {\n-\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n@@ -274,7 +263,7 @@ mod tests {\n                 let test = \"test\";\n                 return 42i32;\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 return Ok(42i32);\n             }\"#,\n@@ -289,7 +278,7 @@ mod tests {\n                 let test = \"test\";\n                 return 42i32;\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 return Ok(42i32);\n             }\"#,\n@@ -315,7 +304,7 @@ mod tests {\n                 let test = \"test\";\n                 return 42i32;\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 return Ok(42i32);\n             }\"#,\n@@ -330,7 +319,7 @@ mod tests {\n                 let test = \"test\";\n                 42i32\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 Ok(42i32)\n             }\"#,\n@@ -344,7 +333,7 @@ mod tests {\n             r#\"fn foo() -> i32<|> {\n                 42i32\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 Ok(42i32)\n             }\"#,\n         );\n@@ -360,7 +349,7 @@ mod tests {\n                     24i32\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     Ok(42i32)\n                 } else {\n@@ -385,7 +374,7 @@ mod tests {\n                     24i32\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     if false {\n                         Ok(1)\n@@ -414,7 +403,7 @@ mod tests {\n                     24i32.await\n                 }\n             }\"#,\n-            r#\"async fn foo() -> Result<i32, <|>> {\n+            r#\"async fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     if false {\n                         Ok(1.await)\n@@ -435,7 +424,7 @@ mod tests {\n             r#\"fn foo() -> [i32;<|> 3] {\n                 [1, 2, 3]\n             }\"#,\n-            r#\"fn foo() -> Result<[i32; 3], <|>> {\n+            r#\"fn foo() -> Result<[i32; 3], ${0:_}> {\n                 Ok([1, 2, 3])\n             }\"#,\n         );\n@@ -456,7 +445,7 @@ mod tests {\n                     24 as i32\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     if false {\n                         Ok(1 as i32)\n@@ -481,7 +470,7 @@ mod tests {\n                     _ => 24i32,\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 match my_var {\n                     5 => Ok(42i32),\n@@ -504,7 +493,7 @@ mod tests {\n \n                 my_var\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 loop {\n                     println!(\"test\");\n@@ -527,7 +516,7 @@ mod tests {\n \n                 my_var\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = let x = loop {\n                     break 1;\n                 };\n@@ -550,7 +539,7 @@ mod tests {\n \n                 res\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 let res = match my_var {\n                     5 => 42i32,\n@@ -573,7 +562,7 @@ mod tests {\n \n                 res\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 let res = if my_var == 5 {\n                     42i32\n@@ -609,7 +598,7 @@ mod tests {\n                     },\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 match my_var {\n                     5 => {\n@@ -642,7 +631,7 @@ mod tests {\n                 }\n                 53i32\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 if test == \"test\" {\n                     return Ok(24i32);\n@@ -673,7 +662,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -712,7 +701,7 @@ mod tests {\n \n                 t.unwrap_or_else(|| the_field)\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -750,7 +739,7 @@ mod tests {\n                     i += 1;\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 if test == \"test\" {\n                     return Ok(24i32);\n@@ -782,7 +771,7 @@ mod tests {\n                     }\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 if test == \"test\" {\n                     return Ok(24i32);\n@@ -820,7 +809,7 @@ mod tests {\n                     }\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 let other = 5;\n                 if test == \"test\" {\n@@ -861,7 +850,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n                     loop {\n@@ -895,7 +884,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n \n@@ -924,7 +913,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n \n@@ -954,7 +943,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n "}, {"sha": "cd6129dc58916aa10bd44cc5b2865ae8a29beaf6", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33e111483fbc80c017037e0b158ee652ed41b3e8/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e111483fbc80c017037e0b158ee652ed41b3e8/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=33e111483fbc80c017037e0b158ee652ed41b3e8", "patch": "@@ -276,7 +276,7 @@ fn doctest_change_return_type_to_result() {\n fn foo() -> i32<|> { 42i32 }\n \"#####,\n         r#####\"\n-fn foo() -> Result<i32, > { Ok(42i32) }\n+fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n \"#####,\n     )\n }"}, {"sha": "006ec4d547e591c82bffa94c723cb54a44fe4ea4", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33e111483fbc80c017037e0b158ee652ed41b3e8/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/33e111483fbc80c017037e0b158ee652ed41b3e8/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=33e111483fbc80c017037e0b158ee652ed41b3e8", "patch": "@@ -268,7 +268,7 @@ Change the function's return type to Result.\n fn foo() -> i32\u2503 { 42i32 }\n \n // AFTER\n-fn foo() -> Result<i32, > { Ok(42i32) }\n+fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n ```\n \n ## `change_visibility`"}]}