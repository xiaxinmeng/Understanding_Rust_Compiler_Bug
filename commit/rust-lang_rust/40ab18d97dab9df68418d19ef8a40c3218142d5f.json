{"sha": "40ab18d97dab9df68418d19ef8a40c3218142d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWIxOGQ5N2RhYjlkZjY4NDE4ZDE5ZWY4YTQwYzMyMTgxNDJkNWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-22T21:07:48Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-22T21:07:48Z"}, "message": "improve const infer error", "tree": {"sha": "ac2955a3535b0c7614603bd75ac85674f5ef3a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2955a3535b0c7614603bd75ac85674f5ef3a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ab18d97dab9df68418d19ef8a40c3218142d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ab18d97dab9df68418d19ef8a40c3218142d5f", "html_url": "https://github.com/rust-lang/rust/commit/40ab18d97dab9df68418d19ef8a40c3218142d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ab18d97dab9df68418d19ef8a40c3218142d5f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9cd294cf2775441e713c7ee2918b728733b99f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cd294cf2775441e713c7ee2918b728733b99f5", "html_url": "https://github.com/rust-lang/rust/commit/a9cd294cf2775441e713c7ee2918b728733b99f5"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "cf5e99845d1893eb646ea388d8544e5fa4caa3c0", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40ab18d97dab9df68418d19ef8a40c3218142d5f/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ab18d97dab9df68418d19ef8a40c3218142d5f/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=40ab18d97dab9df68418d19ef8a40c3218142d5f", "patch": "@@ -176,17 +176,17 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n     type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, Self::Error> {\n-        let (val, span) = match (value1.val, value2.val) {\n+        let (val, origin) = match (value1.val, value2.val) {\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Known { .. }) => {\n                 bug!(\"equating two const variables, both of which have known values\")\n             }\n \n             // If one side is known, prefer that one.\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => {\n-                (value1.val, value1.origin.span)\n+                (value1.val, value1.origin)\n             }\n             (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => {\n-                (value2.val, value2.origin.span)\n+                (value2.val, value2.origin)\n             }\n \n             // If both sides are *unknown*, it hardly matters, does it?\n@@ -200,17 +200,11 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n                 // universe is the minimum of the two universes, because that is\n                 // the one which contains the fewest names in scope.\n                 let universe = cmp::min(universe1, universe2);\n-                (ConstVariableValue::Unknown { universe }, value1.origin.span)\n+                (ConstVariableValue::Unknown { universe }, value1.origin)\n             }\n         };\n \n-        Ok(ConstVarValue {\n-            origin: ConstVariableOrigin {\n-                kind: ConstVariableOriginKind::ConstInference,\n-                span: span,\n-            },\n-            val,\n-        })\n+        Ok(ConstVarValue { origin, val })\n     }\n }\n "}, {"sha": "63facbf3b8c0f3f23106d0bedf5c569f3a065a01", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ab18d97dab9df68418d19ef8a40c3218142d5f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40ab18d97dab9df68418d19ef8a40c3218142d5f/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=40ab18d97dab9df68418d19ef8a40c3218142d5f", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-77092.rs:13:26\n    |\n LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n-   |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of the constant `{_: usize}`\n+   |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `take_array_from_mut`\n \n error: aborting due to previous error\n "}]}