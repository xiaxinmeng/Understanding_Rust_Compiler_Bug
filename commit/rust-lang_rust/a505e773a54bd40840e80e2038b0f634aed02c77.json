{"sha": "a505e773a54bd40840e80e2038b0f634aed02c77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDVlNzczYTU0YmQ0MDg0MGU4MGUyMDM4YjBmNjM0YWVkMDJjNzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-12T06:50:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-12T08:48:08Z"}, "message": "fix typos\n\nCo-authored-by: Oliver Scherer <github35764891676564198441@oli-obk.de>", "tree": {"sha": "9dd023ebb8f6f897c862ad91e3739d1a04ef803c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd023ebb8f6f897c862ad91e3739d1a04ef803c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a505e773a54bd40840e80e2038b0f634aed02c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a505e773a54bd40840e80e2038b0f634aed02c77", "html_url": "https://github.com/rust-lang/rust/commit/a505e773a54bd40840e80e2038b0f634aed02c77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a505e773a54bd40840e80e2038b0f634aed02c77/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21e0118d0eefc8b0073fa47fa16699d37047abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21e0118d0eefc8b0073fa47fa16699d37047abf", "html_url": "https://github.com/rust-lang/rust/commit/d21e0118d0eefc8b0073fa47fa16699d37047abf"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "525da87463a0e996475c291461b8de4612643e35", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a505e773a54bd40840e80e2038b0f634aed02c77/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a505e773a54bd40840e80e2038b0f634aed02c77/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a505e773a54bd40840e80e2038b0f634aed02c77", "patch": "@@ -84,7 +84,7 @@ pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     // Current position within the function\n     ////////////////////////////////////////////////////////////////////////////////\n     /// If this is `Err`, we are not currently executing any particular statement in\n-    /// this frame (can happen e.g. during frame initialziation, and during unwinding on\n+    /// this frame (can happen e.g. during frame initialization, and during unwinding on\n     /// frames without cleanup code).\n     /// We basically abuse `Result` as `Either`.\n     pub(super) loc: Result<mir::Location, Span>,\n@@ -663,7 +663,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let const_ =\n                 self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal);\n             self.const_to_op(const_, None).map_err(|err| {\n-                // If there was an error, set the span of the current frame so this constant.\n+                // If there was an error, set the span of the current frame to this constant.\n                 // Avoiding doing this when evaluation succeeds.\n                 self.frame_mut().loc = Err(span);\n                 err"}, {"sha": "fb3a670714b58ad0298612dc5261383d64f27b79", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a505e773a54bd40840e80e2038b0f634aed02c77/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a505e773a54bd40840e80e2038b0f634aed02c77/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=a505e773a54bd40840e80e2038b0f634aed02c77", "patch": "@@ -30,7 +30,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Assert that there is always such a frame.\n             .unwrap();\n         // Assert that the frame we look at is actually executing code currently\n-        // (`loc` is None when we are unwinding and the frame does not require cleanup).\n+        // (`loc` is `Err` when we are unwinding and the frame does not require cleanup).\n         let loc = frame.loc.unwrap();\n         // If this is a `Call` terminator, use the `fn_span` instead.\n         let block = &frame.body.basic_blocks()[loc.block];"}]}