{"sha": "30b6fe37a6d447a647f2608562aff7b1758bce54", "node_id": "C_kwDOAAsO6NoAKDMwYjZmZTM3YTZkNDQ3YTY0N2YyNjA4NTYyYWZmN2IxNzU4YmNlNTQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-10-27T07:11:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-03T15:09:02Z"}, "message": "Correctly resolve Inherent Associated Types", "tree": {"sha": "1a85407eb4302660f2c023f8047644778077f4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a85407eb4302660f2c023f8047644778077f4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b6fe37a6d447a647f2608562aff7b1758bce54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b6fe37a6d447a647f2608562aff7b1758bce54", "html_url": "https://github.com/rust-lang/rust/commit/30b6fe37a6d447a647f2608562aff7b1758bce54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b6fe37a6d447a647f2608562aff7b1758bce54/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160b19429523ea44c4c3b7cad4233b2a35f58b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/160b19429523ea44c4c3b7cad4233b2a35f58b8f", "html_url": "https://github.com/rust-lang/rust/commit/160b19429523ea44c4c3b7cad4233b2a35f58b8f"}], "stats": {"total": 115, "additions": 63, "deletions": 52}, "files": [{"sha": "aa4f3b40fbd64efa30fc9ca36f80f326cec79a1f", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30b6fe37a6d447a647f2608562aff7b1758bce54/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6fe37a6d447a647f2608562aff7b1758bce54/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=30b6fe37a6d447a647f2608562aff7b1758bce54", "patch": "@@ -1910,6 +1910,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n             }\n+\n+            // see if we can satisfy using an inherent associated type\n+            for impl_ in tcx.inherent_impls(adt_def.did()) {\n+                let assoc_ty = tcx.associated_items(impl_).find_by_name_and_kind(\n+                    tcx,\n+                    assoc_ident,\n+                    ty::AssocKind::Type,\n+                    *impl_,\n+                );\n+                if let Some(assoc_ty) = assoc_ty {\n+                    let ty = tcx.type_of(assoc_ty.def_id);\n+                    return Ok((ty, DefKind::AssocTy, assoc_ty.def_id));\n+                }\n+            }\n         }\n \n         // Find the type of the associated item, and the trait where the associated"}, {"sha": "c579c962ffcc16dcc9c01c1587a814168b103e3e", "filename": "src/test/ui/assoc-inherent.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,20 +0,0 @@\n-// Test that inherent associated types work with\n-// inherent_associated_types feature gate.\n-\n-#![feature(inherent_associated_types)]\n-#![allow(incomplete_features)]\n-\n-struct Foo;\n-\n-impl Foo {\n-    type Bar = isize;\n-}\n-\n-impl Foo {\n-    type Baz; //~ ERROR associated type in `impl` without body\n-}\n-\n-fn main() {\n-    let x : Foo::Bar; //~ERROR ambiguous associated type\n-    x = 0isize;\n-}"}, {"sha": "b703453fa0334b2e3f55680ce9df127a8460d2a1", "filename": "src/test/ui/assoc-inherent.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/160b19429523ea44c4c3b7cad4233b2a35f58b8f/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=160b19429523ea44c4c3b7cad4233b2a35f58b8f", "patch": "@@ -1,17 +0,0 @@\n-error: associated type in `impl` without body\n-  --> $DIR/assoc-inherent.rs:14:5\n-   |\n-LL |     type Baz;\n-   |     ^^^^^^^^-\n-   |             |\n-   |             help: provide a definition for the type: `= <type>;`\n-\n-error[E0223]: ambiguous associated type\n-  --> $DIR/assoc-inherent.rs:18:13\n-   |\n-LL |     let x : Foo::Bar;\n-   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0223`."}, {"sha": "71f65b92eae20e5e4d94028e894ec41d65534575", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-no-body.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs?ref=30b6fe37a6d447a647f2608562aff7b1758bce54", "patch": "@@ -0,0 +1,10 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Baz; //~ ERROR associated type in `impl` without body\n+}\n+\n+fn main() {}"}, {"sha": "387a5658da37304bdacafca6860c310355b5b1a2", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-no-body.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr?ref=30b6fe37a6d447a647f2608562aff7b1758bce54", "patch": "@@ -0,0 +1,10 @@\n+error: associated type in `impl` without body\n+  --> $DIR/assoc-inherent-no-body.rs:7:5\n+   |\n+LL |     type Baz;\n+   |     ^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the type: `= <type>;`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ae425e2aaafb79cf6957206a7907df2bd8d8255", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-use.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs?ref=30b6fe37a6d447a647f2608562aff7b1758bce54", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Bar = isize;\n+}\n+\n+fn main() {\n+    let x: Foo::Bar;\n+    x = 0isize;\n+}"}, {"sha": "b3042d413468ad1015a80a96d28f4e878787ad92", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30b6fe37a6d447a647f2608562aff7b1758bce54/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=30b6fe37a6d447a647f2608562aff7b1758bce54", "patch": "@@ -1,40 +1,40 @@\n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:14:13\n+  --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n-LL | impl Tr for Self {}\n-   |             ^^^^\n+LL | impl Self {}\n+   |      ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:15:15\n+  --> $DIR/resolve-self-in-impl.rs:17:8\n    |\n-LL | impl Tr for S<Self> {}\n-   |               ^^^^\n+LL | impl S<Self> {}\n+   |        ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:16:6\n+  --> $DIR/resolve-self-in-impl.rs:18:7\n    |\n-LL | impl Self {}\n-   |      ^^^^\n+LL | impl (Self, Self) {}\n+   |       ^^^^  ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:17:8\n+  --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n-LL | impl S<Self> {}\n-   |        ^^^^\n+LL | impl Tr for Self {}\n+   |             ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:18:7\n+  --> $DIR/resolve-self-in-impl.rs:15:15\n    |\n-LL | impl (Self, Self) {}\n-   |       ^^^^  ^^^^\n+LL | impl Tr for S<Self> {}\n+   |               ^^^^\n    |\n    = note: replace `Self` with a different type\n "}]}