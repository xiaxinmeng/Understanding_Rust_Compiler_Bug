{"sha": "f8109f8e9c9a460dcb3176bd002985d8a27afc32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTA5ZjhlOWM5YTQ2MGRjYjMxNzZiZDAwMjk4NWQ4YTI3YWZjMzI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-18T05:08:24Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-18T23:23:53Z"}, "message": "Put spaces around braces", "tree": {"sha": "4784deb77ea2d508aac846a8c16083d53819e2f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4784deb77ea2d508aac846a8c16083d53819e2f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8109f8e9c9a460dcb3176bd002985d8a27afc32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8109f8e9c9a460dcb3176bd002985d8a27afc32", "html_url": "https://github.com/rust-lang/rust/commit/f8109f8e9c9a460dcb3176bd002985d8a27afc32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8109f8e9c9a460dcb3176bd002985d8a27afc32/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96a83b57e51793de579dc90dc82525cd9f018148", "url": "https://api.github.com/repos/rust-lang/rust/commits/96a83b57e51793de579dc90dc82525cd9f018148", "html_url": "https://github.com/rust-lang/rust/commit/96a83b57e51793de579dc90dc82525cd9f018148"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "e36b4c5199302ea33a38002a40538e867b3c223d", "filename": "src/macros.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8109f8e9c9a460dcb3176bd002985d8a27afc32/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8109f8e9c9a460dcb3176bd002985d8a27afc32/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=f8109f8e9c9a460dcb3176bd002985d8a27afc32", "patch": "@@ -496,7 +496,7 @@ fn delim_token_to_str(\n     let (lhs, rhs) = match *delim_token {\n         DelimToken::Paren => (\"(\", \")\"),\n         DelimToken::Bracket => (\"[\", \"]\"),\n-        DelimToken::Brace => (\"{\", \"}\"),\n+        DelimToken::Brace => (\"{ \", \" }\"),\n         DelimToken::NoDelim => (\"\", \"\"),\n     };\n     if use_multiple_lines {\n@@ -515,6 +515,13 @@ fn delim_token_to_str(\n }\n \n impl MacroArgKind {\n+    fn starts_with_brace(&self) -> bool {\n+        match *self {\n+            MacroArgKind::Repeat(DelimToken::Brace, _, _, _)\n+            | MacroArgKind::Delimited(DelimToken::Brace, _) => true,\n+            _ => false,\n+        }\n+    }\n     fn starts_with_dollar(&self) -> bool {\n         match *self {\n             MacroArgKind::Repeat(..) | MacroArgKind::MetaVariable(..) => true,\n@@ -855,12 +862,7 @@ fn wrap_macro_args_inner(\n     let indent_str = shape.indent.to_string_with_newline(context.config);\n \n     while let Some(ref arg) = iter.next() {\n-        let nested_shape = if use_multiple_lines {\n-            shape.with_max_width(context.config)\n-        } else {\n-            shape\n-        };\n-        result.push_str(&arg.rewrite(context, nested_shape, use_multiple_lines)?);\n+        result.push_str(&arg.rewrite(context, shape, use_multiple_lines)?);\n \n         if use_multiple_lines\n             && (arg.kind.ends_with_space() || iter.peek().map_or(false, |a| a.kind.has_meta_var()))\n@@ -872,7 +874,8 @@ fn wrap_macro_args_inner(\n         } else if let Some(ref next_arg) = iter.peek() {\n             let space_before_dollar =\n                 !arg.kind.ends_with_space() && next_arg.kind.starts_with_dollar();\n-            if space_before_dollar {\n+            let space_before_brace = next_arg.kind.starts_with_brace();\n+            if space_before_dollar || space_before_brace {\n                 result.push(' ');\n             }\n         }"}, {"sha": "de927afc8312b357ea79d28cea28e26301cd5fe6", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8109f8e9c9a460dcb3176bd002985d8a27afc32/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8109f8e9c9a460dcb3176bd002985d8a27afc32/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=f8109f8e9c9a460dcb3176bd002985d8a27afc32", "patch": "@@ -19,6 +19,26 @@ macro_rules! m {\n     ( $ x : tt foo bar foo bar foo bar $ y : tt => x*y*z $ z : tt , $ ( $a: tt ) , * ) => {};\n }\n \n+\n+macro_rules! impl_a_method {\n+    ($n:ident ( $a:ident : $ta:ty ) -> $ret:ty { $body:expr }) => {\n+        fn $n($a:$ta) -> $ret { $body }\n+        macro_rules! $n { ($va:expr) => { $n($va) } }\n+    };\n+    ($n:ident ( $a:ident : $ta:ty, $b:ident : $tb:ty ) -> $ret:ty { $body:expr }) => {\n+        fn $n($a:$ta, $b:$tb) -> $ret { $body }\n+        macro_rules! $n { ($va:expr, $vb:expr) => { $n($va, $vb) } }\n+    };\n+    ($n:ident ( $a:ident : $ta:ty, $b:ident : $tb:ty, $c:ident : $tc:ty ) -> $ret:ty { $body:expr }) => {\n+        fn $n($a:$ta, $b:$tb, $c:$tc) -> $ret { $body }\n+        macro_rules! $n { ($va:expr, $vb:expr, $vc:expr) => { $n($va, $vb, $vc) } }\n+    };\n+    ($n:ident ( $a:ident : $ta:ty, $b:ident : $tb:ty, $c:ident : $tc:ty, $d:ident : $td:ty ) -> $ret:ty { $body:expr }) => {\n+        fn $n($a:$ta, $b:$tb, $c:$tc, $d:$td) -> $ret { $body }\n+        macro_rules! $n { ($va:expr, $vb:expr, $vc:expr, $vd:expr) => { $n($va, $vb, $vc, $vd) } }\n+    };\n+}\n+\n macro_rules! m {\n \t// a\n \t($expr :expr,  $( $func : ident    ) *   ) => {"}, {"sha": "22fed940685e6b42636869fab86c5b7255f149e4", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f8109f8e9c9a460dcb3176bd002985d8a27afc32/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8109f8e9c9a460dcb3176bd002985d8a27afc32/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=f8109f8e9c9a460dcb3176bd002985d8a27afc32", "patch": "@@ -27,6 +27,55 @@ macro_rules! m {\n     ($x: tt foo bar foo bar foo bar $y: tt => x * y * z $z: tt, $($a: tt),*) => {};\n }\n \n+macro_rules! impl_a_method {\n+    ($n: ident($a: ident: $ta: ty) -> $ret: ty { $body: expr }) => {\n+        fn $n($a: $ta) -> $ret {\n+            $body\n+        }\n+        macro_rules! $n {\n+            ($va: expr) => {\n+                $n($va)\n+            };\n+        }\n+    };\n+    ($n: ident($a: ident: $ta: ty, $b: ident: $tb: ty) -> $ret: ty { $body: expr }) => {\n+        fn $n($a: $ta, $b: $tb) -> $ret {\n+            $body\n+        }\n+        macro_rules! $n {\n+            ($va: expr,$vb: expr) => {\n+                $n($va, $vb)\n+            };\n+        }\n+    };\n+    (\n+        $n: ident($a: ident: $ta: ty, $b: ident: $tb: ty, $c: ident: $tc: ty) ->\n+        $ret: ty { $body: expr }\n+    ) => {\n+        fn $n($a: $ta, $b: $tb, $c: $tc) -> $ret {\n+            $body\n+        }\n+        macro_rules! $n {\n+            ($va: expr,$vb: expr,$vc: expr) => {\n+                $n($va, $vb, $vc)\n+            };\n+        }\n+    };\n+    (\n+        $n: ident($a: ident: $ta: ty, $b: ident: $tb: ty, $c: ident: $tc: ty, $d: ident: $td: ty) ->\n+        $ret: ty { $body: expr }\n+    ) => {\n+        fn $n($a: $ta, $b: $tb, $c: $tc, $d: $td) -> $ret {\n+            $body\n+        }\n+        macro_rules! $n {\n+            ($va: expr,$vb: expr,$vc: expr,$vd: expr) => {\n+                $n($va, $vb, $vc, $vd)\n+            };\n+        }\n+    };\n+}\n+\n macro_rules! m {\n     // a\n     ($expr: expr, $($func: ident)*) => {{"}]}