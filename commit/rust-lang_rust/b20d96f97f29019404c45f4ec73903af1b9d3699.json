{"sha": "b20d96f97f29019404c45f4ec73903af1b9d3699", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMGQ5NmY5N2YyOTAxOTQwNGM0NWY0ZWM3MzkwM2FmMWI5ZDM2OTk=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-24T17:26:30Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-06-03T03:55:29Z"}, "message": "remove as_mono_item", "tree": {"sha": "3e4f78ce06adca3a05af10ecd373678fc0eeaab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4f78ce06adca3a05af10ecd373678fc0eeaab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20d96f97f29019404c45f4ec73903af1b9d3699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20d96f97f29019404c45f4ec73903af1b9d3699", "html_url": "https://github.com/rust-lang/rust/commit/b20d96f97f29019404c45f4ec73903af1b9d3699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20d96f97f29019404c45f4ec73903af1b9d3699/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a", "html_url": "https://github.com/rust-lang/rust/commit/e21d002bd2485fb4bd5a783cc3fe3a1cf2ca2c5a"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "11e9a48133d9a2aff18b6b54fcdd60e0d26aedd3", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b20d96f97f29019404c45f4ec73903af1b9d3699/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20d96f97f29019404c45f4ec73903af1b9d3699/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=b20d96f97f29019404c45f4ec73903af1b9d3699", "patch": "@@ -7,15 +7,24 @@ use crate::traits::*;\n use rustc::mir::mono::MonoItem;\n \n pub trait MonoItemExt<'a, 'tcx: 'a> {\n-    fn as_mono_item(&self) -> &MonoItem<'tcx>;\n+    fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx);\n+    fn predefine<Bx: BuilderMethods<'a, 'tcx>>(\n+        &self,\n+        cx: &'a Bx::CodegenCx,\n+        linkage: Linkage,\n+        visibility: Visibility\n+    );\n+    fn to_raw_string(&self) -> String;\n+}\n \n+impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n-               self.as_mono_item().to_string(cx.tcx(), true),\n-               self.as_mono_item().to_raw_string(),\n+               self.to_string(cx.tcx(), true),\n+               self.to_raw_string(),\n                cx.codegen_unit().name());\n \n-        match *self.as_mono_item() {\n+        match *self {\n             MonoItem::Static(def_id) => {\n                 cx.codegen_static(def_id, cx.tcx().is_mutable_static(def_id));\n             }\n@@ -33,8 +42,8 @@ pub trait MonoItemExt<'a, 'tcx: 'a> {\n         }\n \n         debug!(\"END IMPLEMENTING '{} ({})' in cgu {}\",\n-               self.as_mono_item().to_string(cx.tcx(), true),\n-               self.as_mono_item().to_raw_string(),\n+               self.to_string(cx.tcx(), true),\n+               self.to_raw_string(),\n                cx.codegen_unit().name());\n     }\n \n@@ -45,15 +54,15 @@ pub trait MonoItemExt<'a, 'tcx: 'a> {\n         visibility: Visibility\n     ) {\n         debug!(\"BEGIN PREDEFINING '{} ({})' in cgu {}\",\n-               self.as_mono_item().to_string(cx.tcx(), true),\n-               self.as_mono_item().to_raw_string(),\n+               self.to_string(cx.tcx(), true),\n+               self.to_raw_string(),\n                cx.codegen_unit().name());\n \n-        let symbol_name = self.as_mono_item().symbol_name(cx.tcx()).as_str();\n+        let symbol_name = self.symbol_name(cx.tcx()).as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n \n-        match *self.as_mono_item() {\n+        match *self {\n             MonoItem::Static(def_id) => {\n                 cx.predefine_static(def_id, linkage, visibility, &symbol_name);\n             }\n@@ -64,13 +73,13 @@ pub trait MonoItemExt<'a, 'tcx: 'a> {\n         }\n \n         debug!(\"END PREDEFINING '{} ({})' in cgu {}\",\n-               self.as_mono_item().to_string(cx.tcx(), true),\n-               self.as_mono_item().to_raw_string(),\n+               self.to_string(cx.tcx(), true),\n+               self.to_raw_string(),\n                cx.codegen_unit().name());\n     }\n \n     fn to_raw_string(&self) -> String {\n-        match *self.as_mono_item() {\n+        match *self {\n             MonoItem::Fn(instance) => {\n                 format!(\"Fn({:?}, {})\",\n                         instance.def,\n@@ -85,9 +94,3 @@ pub trait MonoItemExt<'a, 'tcx: 'a> {\n         }\n     }\n }\n-\n-impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n-    fn as_mono_item(&self) -> &MonoItem<'tcx> {\n-        self\n-    }\n-}"}]}