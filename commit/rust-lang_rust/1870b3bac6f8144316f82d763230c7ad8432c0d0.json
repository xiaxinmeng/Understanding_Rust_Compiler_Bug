{"sha": "1870b3bac6f8144316f82d763230c7ad8432c0d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzBiM2JhYzZmODE0NDMxNmY4MmQ3NjMyMzBjN2FkODQzMmMwZDA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-22T09:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T09:26:10Z"}, "message": "Rollup merge of #82367 - matthiaskrgr:wraps, r=petrochenkov\n\nremove redundant option/result wrapping of return values\n\nIf a function always returns `Ok(something)`, we can return `something` directly and remove the corresponding error handling in the callers.\nclippy::unnecessary_wraps", "tree": {"sha": "cbd471a71bfdd30bd421af674429cc75525675d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd471a71bfdd30bd421af674429cc75525675d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1870b3bac6f8144316f82d763230c7ad8432c0d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM3izCRBK7hj4Ov3rIwAAdHIIADwMcLekNkOocyVjaQmclfME\n/Zeta3kEBOJRcYbrIjHtMU6b4FiXHDqG97BINCIfDkt6bzHCz29AyaBdR+PJmzWf\n+MGMqBFp0kx++NaJnANLWT8Y0OP4JIwqoUiySg5agGT6+fy+tGb5gW7x4R94YSVQ\nCPrHUkgcOrnfkkaVcQjZXnkhG2VPepnqOvWrilZfESEKf8gcHPyqkRau6zk+JVpR\n1Iwtxrr5aZpKEr6qPC6clrJ8guV78o+WGqDyRyq0h6DIyMMVGTEhuFGax/y1Hb0c\n+QRSWXfhg23M2QcheUg/UWrLyRonQEvLyghGtchOy5RDOdZh4YJ6cTu7spEDA6E=\n=CI6+\n-----END PGP SIGNATURE-----\n", "payload": "tree cbd471a71bfdd30bd421af674429cc75525675d5\nparent 4dfe69a6e6cc796154d6eb3e07e7fba18f29168e\nparent da9a588d4fda02c2fe6d52db651ec4c83b2b3e49\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613985970 +0900\ncommitter GitHub <noreply@github.com> 1613985970 +0900\n\nRollup merge of #82367 - matthiaskrgr:wraps, r=petrochenkov\n\nremove redundant option/result wrapping of return values\n\nIf a function always returns `Ok(something)`, we can return `something` directly and remove the corresponding error handling in the callers.\nclippy::unnecessary_wraps\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1870b3bac6f8144316f82d763230c7ad8432c0d0", "html_url": "https://github.com/rust-lang/rust/commit/1870b3bac6f8144316f82d763230c7ad8432c0d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1870b3bac6f8144316f82d763230c7ad8432c0d0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dfe69a6e6cc796154d6eb3e07e7fba18f29168e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dfe69a6e6cc796154d6eb3e07e7fba18f29168e", "html_url": "https://github.com/rust-lang/rust/commit/4dfe69a6e6cc796154d6eb3e07e7fba18f29168e"}, {"sha": "da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "html_url": "https://github.com/rust-lang/rust/commit/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49"}], "stats": {"total": 76, "additions": 30, "deletions": 46}, "files": [{"sha": "24da75114a65671458855207720e69763cdaba71", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -1035,22 +1035,22 @@ pub fn find_transparency(\n pub fn allow_internal_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n-) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+) -> impl Iterator<Item = Symbol> + 'a {\n     allow_unstable(sess, attrs, sym::allow_internal_unstable)\n }\n \n pub fn rustc_allow_const_fn_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n-) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+) -> impl Iterator<Item = Symbol> + 'a {\n     allow_unstable(sess, attrs, sym::rustc_allow_const_fn_unstable)\n }\n \n fn allow_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n     symbol: Symbol,\n-) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+) -> impl Iterator<Item = Symbol> + 'a {\n     let attrs = sess.filter_by_name(attrs, symbol);\n     let list = attrs\n         .filter_map(move |attr| {\n@@ -1064,7 +1064,7 @@ fn allow_unstable<'a>(\n         })\n         .flatten();\n \n-    Some(list.into_iter().filter_map(move |it| {\n+    list.into_iter().filter_map(move |it| {\n         let name = it.ident().map(|ident| ident.name);\n         if name.is_none() {\n             sess.diagnostic().span_err(\n@@ -1073,5 +1073,5 @@ fn allow_unstable<'a>(\n             );\n         }\n         name\n-    }))\n+    })\n }"}, {"sha": "f5ae406faec2d071f644aa3c4c7a615c1732c39c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -735,7 +735,7 @@ fn execute_work_item<B: ExtraBackendMethods>(\n     match work_item {\n         WorkItem::Optimize(module) => execute_optimize_work_item(cgcx, module, module_config),\n         WorkItem::CopyPostLtoArtifacts(module) => {\n-            execute_copy_from_cache_work_item(cgcx, module, module_config)\n+            Ok(execute_copy_from_cache_work_item(cgcx, module, module_config))\n         }\n         WorkItem::LTO(module) => execute_lto_work_item(cgcx, module, module_config),\n     }\n@@ -844,7 +844,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n     cgcx: &CodegenContext<B>,\n     module: CachedModuleCodegen,\n     module_config: &ModuleConfig,\n-) -> Result<WorkItemResult<B>, FatalError> {\n+) -> WorkItemResult<B> {\n     let incr_comp_session_dir = cgcx.incr_comp_session_dir.as_ref().unwrap();\n     let mut object = None;\n     if let Some(saved_file) = module.source.saved_file {\n@@ -870,13 +870,13 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n \n     assert_eq!(object.is_some(), module_config.emit_obj != EmitObj::None);\n \n-    Ok(WorkItemResult::Compiled(CompiledModule {\n+    WorkItemResult::Compiled(CompiledModule {\n         name: module.name,\n         kind: ModuleKind::Regular,\n         object,\n         dwarf_object: None,\n         bytecode: None,\n-    }))\n+    })\n }\n \n fn execute_lto_work_item<B: ExtraBackendMethods>("}, {"sha": "ca304c05cdce30614a7e464c2255f62e2cc2b5a8", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -756,8 +756,8 @@ impl SyntaxExtension {\n         name: Symbol,\n         attrs: &[ast::Attribute],\n     ) -> SyntaxExtension {\n-        let allow_internal_unstable = attr::allow_internal_unstable(sess, &attrs)\n-            .map(|features| features.collect::<Vec<Symbol>>().into());\n+        let allow_internal_unstable =\n+            Some(attr::allow_internal_unstable(sess, &attrs).collect::<Vec<Symbol>>().into());\n \n         let mut local_inner_macros = false;\n         if let Some(macro_export) = sess.find_by_name(attrs, sym::macro_export) {"}, {"sha": "449b3a82dcbb7c68f8423071d3a85975fa21b461", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -266,7 +266,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         let range = self.check_bounds(ptr.offset, size);\n \n         self.mark_init(ptr, size, true);\n-        self.clear_relocations(cx, ptr, size)?;\n+        self.clear_relocations(cx, ptr, size);\n \n         AllocationExtra::memory_written(self, ptr, size)?;\n \n@@ -484,18 +484,13 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// uninitialized. This is a somewhat odd \"spooky action at a distance\",\n     /// but it allows strictly more code to run than if we would just error\n     /// immediately in that case.\n-    fn clear_relocations(\n-        &mut self,\n-        cx: &impl HasDataLayout,\n-        ptr: Pointer<Tag>,\n-        size: Size,\n-    ) -> InterpResult<'tcx> {\n+    fn clear_relocations(&mut self, cx: &impl HasDataLayout, ptr: Pointer<Tag>, size: Size) {\n         // Find the start and end of the given range and its outermost relocations.\n         let (first, last) = {\n             // Find all relocations overlapping the given range.\n             let relocations = self.get_relocations(cx, ptr, size);\n             if relocations.is_empty() {\n-                return Ok(());\n+                return;\n             }\n \n             (\n@@ -517,8 +512,6 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n \n         // Forget all the relocations.\n         self.relocations.remove_range(first..last);\n-\n-        Ok(())\n     }\n \n     /// Errors if there are relocations overlapping with the edges of the"}, {"sha": "d36b3a7d9b56ecd7d4f59a26b86402d932146200", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -23,11 +23,7 @@ use super::{\n mod caller_location;\n mod type_name;\n \n-fn numeric_intrinsic<'tcx, Tag>(\n-    name: Symbol,\n-    bits: u128,\n-    kind: Primitive,\n-) -> InterpResult<'tcx, Scalar<Tag>> {\n+fn numeric_intrinsic<Tag>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<Tag> {\n     let size = match kind {\n         Primitive::Int(integer, _) => integer.size(),\n         _ => bug!(\"invalid `{}` argument: {:?}\", name, bits),\n@@ -41,7 +37,7 @@ fn numeric_intrinsic<'tcx, Tag>(\n         sym::bitreverse => (bits << extra).reverse_bits(),\n         _ => bug!(\"not a numeric intrinsic: {}\", name),\n     };\n-    Ok(Scalar::from_uint(bits_out, size))\n+    Scalar::from_uint(bits_out, size)\n }\n \n /// The logic for all nullary intrinsics is implemented here. These intrinsics don't get evaluated\n@@ -208,7 +204,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if nonzero && bits == 0 {\n                     throw_ub_format!(\"`{}_nonzero` called on 0\", intrinsic_name);\n                 }\n-                let out_val = numeric_intrinsic(intrinsic_name, bits, kind)?;\n+                let out_val = numeric_intrinsic(intrinsic_name, bits, kind);\n                 self.write_scalar(out_val, dest)?;\n             }\n             sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {"}, {"sha": "19aee033a6923fb1cda51eef51fe67efb3999160", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -85,8 +85,7 @@ pub fn rustc_allow_const_fn_unstable(\n     feature_gate: Symbol,\n ) -> bool {\n     let attrs = tcx.get_attrs(def_id);\n-    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs)\n-        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs).any(|name| name == feature_gate)\n }\n \n // Returns `true` if the given `const fn` is \"const-stable\"."}, {"sha": "28bfaea4555b5070e6e7435f29a364cf79aaee75", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -426,7 +426,7 @@ impl<'a> Parser<'a> {\n         let span = self.mk_expr_sp(&lhs, lhs.span, rhs_span);\n         let limits =\n             if op == AssocOp::DotDot { RangeLimits::HalfOpen } else { RangeLimits::Closed };\n-        Ok(self.mk_expr(span, self.mk_range(Some(lhs), rhs, limits)?, AttrVec::new()))\n+        Ok(self.mk_expr(span, self.mk_range(Some(lhs), rhs, limits), AttrVec::new()))\n     }\n \n     fn is_at_start_of_range_notation_rhs(&self) -> bool {\n@@ -474,7 +474,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 (lo, None)\n             };\n-            Ok(this.mk_expr(span, this.mk_range(None, opt_end, limits)?, attrs.into()))\n+            Ok(this.mk_expr(span, this.mk_range(None, opt_end, limits), attrs.into()))\n         })\n     }\n \n@@ -1041,7 +1041,7 @@ impl<'a> Parser<'a> {\n     /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         if self.token.uninterpolated_span().rust_2018() && self.eat_keyword(kw::Await) {\n-            return self.mk_await_expr(self_arg, lo);\n+            return Ok(self.mk_await_expr(self_arg, lo));\n         }\n \n         let fn_span_lo = self.token.span;\n@@ -2396,12 +2396,12 @@ impl<'a> Parser<'a> {\n         start: Option<P<Expr>>,\n         end: Option<P<Expr>>,\n         limits: RangeLimits,\n-    ) -> PResult<'a, ExprKind> {\n+    ) -> ExprKind {\n         if end.is_none() && limits == RangeLimits::Closed {\n             self.error_inclusive_range_with_no_end(self.prev_token.span);\n-            Ok(ExprKind::Err)\n+            ExprKind::Err\n         } else {\n-            Ok(ExprKind::Range(start, end, limits))\n+            ExprKind::Range(start, end, limits)\n         }\n     }\n \n@@ -2421,11 +2421,11 @@ impl<'a> Parser<'a> {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n+    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {\n         let span = lo.to(self.prev_token.span);\n         let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), AttrVec::new());\n         self.recover_from_await_method_call();\n-        Ok(await_expr)\n+        await_expr\n     }\n \n     crate fn mk_expr(&self, span: Span, kind: ExprKind, attrs: AttrVec) -> P<Expr> {"}, {"sha": "f3f5fc9af64fea7302e7dc4211d86e6d512fa0b8", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -1679,7 +1679,7 @@ impl<'a> Parser<'a> {\n         let constness = self.parse_constness();\n         let asyncness = self.parse_asyncness();\n         let unsafety = self.parse_unsafety();\n-        let ext = self.parse_extern()?;\n+        let ext = self.parse_extern();\n \n         if let Async::Yes { span, .. } = asyncness {\n             self.ban_async_in_2015(span);"}, {"sha": "1292286bc18b0dc68450db6f3b18562c6d7465c6", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -1202,12 +1202,8 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `extern string_literal?`.\n-    fn parse_extern(&mut self) -> PResult<'a, Extern> {\n-        Ok(if self.eat_keyword(kw::Extern) {\n-            Extern::from_abi(self.parse_abi())\n-        } else {\n-            Extern::None\n-        })\n+    fn parse_extern(&mut self) -> Extern {\n+        if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }\n     }\n \n     /// Parses a string literal as an ABI spec."}, {"sha": "da713566c31211e607e4f63d1af344b231611099", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870b3bac6f8144316f82d763230c7ad8432c0d0/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=1870b3bac6f8144316f82d763230c7ad8432c0d0", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n             // opt-in via `rustc_allow_const_fn_unstable`.\n             attr::rustc_allow_const_fn_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n-                .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+                .any(|name| name == feature_gate)\n         };\n \n         match required_gates {"}]}