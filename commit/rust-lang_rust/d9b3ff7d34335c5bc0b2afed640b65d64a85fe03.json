{"sha": "d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "node_id": "C_kwDOAAsO6NoAKGQ5YjNmZjdkMzQzMzVjNWJjMGIyYWZlZDY0MGI2NWQ2NGE4NWZlMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T14:24:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T14:24:14Z"}, "message": "Auto merge of #96117 - Dylan-DPC:rollup-5traczf, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #95887 (resolve: Create dummy bindings for all unresolved imports)\n - #96023 (couple of clippy::perf fixes)\n - #96035 (Update GitHub Actions actions/checkout Version v2 -> v3)\n - #96038 (docs: add link from zip to unzip)\n - #96047 (:arrow_up: rust-analyzer)\n - #96059 (clarify doc(cfg) wording)\n - #96081 (Make some `usize`-typed masks definitions agnostic to the size of `usize`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5e6cfdb26695ef535ca98195430c9f1ddbebede8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e6cfdb26695ef535ca98195430c9f1ddbebede8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "html_url": "https://github.com/rust-lang/rust/commit/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febce1fc316f5618d5bb8f05d19e2e3ba868c007", "url": "https://api.github.com/repos/rust-lang/rust/commits/febce1fc316f5618d5bb8f05d19e2e3ba868c007", "html_url": "https://github.com/rust-lang/rust/commit/febce1fc316f5618d5bb8f05d19e2e3ba868c007"}, {"sha": "4ed76271170ed781f0fc079ead9a5997a96f984f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed76271170ed781f0fc079ead9a5997a96f984f", "html_url": "https://github.com/rust-lang/rust/commit/4ed76271170ed781f0fc079ead9a5997a96f984f"}], "stats": {"total": 263, "additions": 137, "deletions": 126}, "files": [{"sha": "451116f320d64ae1d7d8e04a010ce666c1117c9e", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -56,7 +56,7 @@ jobs:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n       - name: checkout the source code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n       - name: configure the PR in which the error message will be posted\n@@ -454,7 +454,7 @@ jobs:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n       - name: checkout the source code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n       - name: configure the PR in which the error message will be posted\n@@ -567,7 +567,7 @@ jobs:\n       - name: disable git crlf conversion\n         run: git config --global core.autocrlf false\n       - name: checkout the source code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n       - name: configure the PR in which the error message will be posted\n@@ -670,7 +670,7 @@ jobs:\n     if: \"github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository == 'rust-lang-ci/rust'\"\n     steps:\n       - name: checkout the source code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n       - name: publish toolstate"}, {"sha": "d6e2c8ccdf44a2344cbf74004c0dec9f0f0b85db", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -372,7 +372,6 @@ fn build_union_fields_for_direct_tag_generator<'ll, 'tcx>(\n \n     // Build the type node for each field.\n     let variant_field_infos: SmallVec<VariantFieldInfo<'ll>> = variant_range\n-        .clone()\n         .map(|variant_index| {\n             let variant_struct_type_di_node = super::build_generator_variant_struct_type_di_node(\n                 cx,"}, {"sha": "416bc4e2e3bf2a518079585d9ce19236c670ea88", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -1208,7 +1208,7 @@ impl HandlerInner {\n             (0, 0) => return,\n             (0, _) => self.emitter.emit_diagnostic(&Diagnostic::new(\n                 Level::Warning,\n-                DiagnosticMessage::Str(warnings.to_owned()),\n+                DiagnosticMessage::Str(warnings),\n             )),\n             (_, 0) => {\n                 let _ = self.fatal(&errors);"}, {"sha": "8f260e1cdb5c8c04296792a237238a0b980fd6cf", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -590,7 +590,7 @@ impl TtParser {\n                 (_, 0) => {\n                     // Dump all possible `next_mps` into `cur_mps` for the next iteration. Then\n                     // process the next token.\n-                    self.cur_mps.extend(self.next_mps.drain(..));\n+                    self.cur_mps.append(&mut self.next_mps);\n                     parser.to_mut().bump();\n                 }\n "}, {"sha": "58e484e413dab4d5a1a4d4ca14f40479ec059328", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -844,7 +844,7 @@ fn non_exhaustive_match<'p, 'tcx>(\n                     format!(\n                         \"{}{}{} => todo!()\",\n                         comma,\n-                        snippet.strip_prefix(\",\").unwrap_or(&snippet),\n+                        snippet.strip_prefix(',').unwrap_or(&snippet),\n                         pattern\n                     ),\n                 ));"}, {"sha": "01dc727737a5a53e2c0891b11b2aa19ae2da5978", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -310,18 +310,23 @@ impl<'a> Resolver<'a> {\n         t\n     }\n \n-    // Define a \"dummy\" resolution containing a Res::Err as a placeholder for a\n-    // failed resolution\n+    // Define a dummy resolution containing a `Res::Err` as a placeholder for a failed resolution,\n+    // also mark such failed imports as used to avoid duplicate diagnostics.\n     fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n-        if let ImportKind::Single { target, .. } = import.kind {\n+        if let ImportKind::Single { target, ref target_bindings, .. } = import.kind {\n+            if target_bindings.iter().any(|binding| binding.get().is_some()) {\n+                return; // Has resolution, do not create the dummy binding\n+            }\n             let dummy_binding = self.dummy_binding;\n             let dummy_binding = self.import(dummy_binding, import);\n             self.per_ns(|this, ns| {\n                 let key = this.new_key(target, ns);\n                 let _ = this.try_define(import.parent_scope.module, key, dummy_binding);\n             });\n-            // Consider erroneous imports used to avoid duplicate diagnostics.\n             self.record_use(target, dummy_binding, false);\n+        } else if import.imported_module.get().is_none() {\n+            import.used.set(true);\n+            self.used_imports.insert(import.id);\n         }\n     }\n }\n@@ -386,7 +391,13 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             .map(|i| (false, i))\n             .chain(indeterminate_imports.into_iter().map(|i| (true, i)))\n         {\n-            if let Some(err) = self.finalize_import(import) {\n+            let unresolved_import_error = self.finalize_import(import);\n+\n+            // If this import is unresolved then create a dummy import\n+            // resolution for it so that later resolve stages won't complain.\n+            self.r.import_dummy_binding(import);\n+\n+            if let Some(err) = unresolved_import_error {\n                 if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {\n                     if source.name == kw::SelfLower {\n                         // Silence `unresolved import` error if E0429 is already emitted\n@@ -396,9 +407,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     }\n                 }\n \n-                // If the error is a single failed import then create a \"fake\" import\n-                // resolution for it so that later resolve stages won't complain.\n-                self.r.import_dummy_binding(import);\n                 if prev_root_id.as_u32() != 0\n                     && prev_root_id.as_u32() != import.root_id.as_u32()\n                     && !errors.is_empty()\n@@ -418,8 +426,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     prev_root_id = import.root_id;\n                 }\n             } else if is_indeterminate {\n-                // Consider erroneous imports used to avoid duplicate diagnostics.\n-                self.r.used_imports.insert(import.id);\n                 let path = import_path_to_string(\n                     &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n                     &import.kind,\n@@ -553,26 +559,23 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     Err(Undetermined) => indeterminate = true,\n                     // Don't update the resolution, because it was never added.\n                     Err(Determined) if target.name == kw::Underscore => {}\n-                    Err(Determined) => {\n+                    Ok(binding) if binding.is_importable() => {\n+                        let imported_binding = this.import(binding, import);\n+                        target_bindings[ns].set(Some(imported_binding));\n+                        this.define(parent, target, ns, imported_binding);\n+                    }\n+                    source_binding @ (Ok(..) | Err(Determined)) => {\n+                        if source_binding.is_ok() {\n+                            let msg = format!(\"`{}` is not directly importable\", target);\n+                            struct_span_err!(this.session, import.span, E0253, \"{}\", &msg)\n+                                .span_label(import.span, \"cannot be imported directly\")\n+                                .emit();\n+                        }\n                         let key = this.new_key(target, ns);\n                         this.update_resolution(parent, key, |_, resolution| {\n                             resolution.single_imports.remove(&Interned::new_unchecked(import));\n                         });\n                     }\n-                    Ok(binding) if !binding.is_importable() => {\n-                        let msg = format!(\"`{}` is not directly importable\", target);\n-                        struct_span_err!(this.session, import.span, E0253, \"{}\", &msg)\n-                            .span_label(import.span, \"cannot be imported directly\")\n-                            .emit();\n-                        // Do not import this illegal binding. Import a dummy binding and pretend\n-                        // everything is fine\n-                        this.import_dummy_binding(import);\n-                    }\n-                    Ok(binding) => {\n-                        let imported_binding = this.import(binding, import);\n-                        target_bindings[ns].set(Some(imported_binding));\n-                        this.define(parent, target, ns, imported_binding);\n-                    }\n                 }\n             }\n         });\n@@ -605,10 +608,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         import.vis.set(orig_vis);\n-        if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n-            // Consider erroneous imports used to avoid duplicate diagnostics.\n-            self.r.used_imports.insert(import.id);\n-        }\n         let module = match path_res {\n             PathResult::Module(module) => {\n                 // Consistency checks, analogous to `finalize_macro_resolutions`.\n@@ -872,7 +871,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 })\n             } else {\n                 // `resolve_ident_in_module` reported a privacy error.\n-                self.r.import_dummy_binding(import);\n                 None\n             };\n         }"}, {"sha": "7485c082f4eaf5af2b542719f7a204dccb038ebe", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -2724,9 +2724,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 &format!(\n                     \"consider annotating `{}` with `#[derive({})]`\",\n                     trait_pred.skip_binder().self_ty(),\n-                    diagnostic_name.to_string(),\n+                    diagnostic_name,\n                 ),\n-                format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),\n+                format!(\"#[derive({})]\\n\", diagnostic_name),\n                 Applicability::MaybeIncorrect,\n             );\n         }"}, {"sha": "a42a1dcfe39881d50134ab409e4ca38713f1fcb1", "filename": "library/core/benches/ascii/is_ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fbenches%2Fascii%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fbenches%2Fascii%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fascii%2Fis_ascii.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -77,6 +77,6 @@ fn is_ascii_align_to_unrolled(bytes: &[u8]) -> bool {\n \n #[inline]\n fn contains_nonascii(v: usize) -> bool {\n-    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    const NONASCII_MASK: usize = usize::from_ne_bytes([0x80; core::mem::size_of::<usize>()]);\n     (NONASCII_MASK & v) != 0\n }"}, {"sha": "69f06fb06ef5d19c478a691dc9b0b29fca84a69d", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -470,6 +470,10 @@ pub trait Iterator {\n     /// it will first try to advance the first iterator at most one time and if it still yielded an item\n     /// try to advance the second iterator at most one time.\n     ///\n+    /// To 'undo' the result of zipping up two iterators, see [`unzip`].\n+    ///\n+    /// [`unzip`]: Iterator::unzip\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "66193eaf5da73c1da12d93265d8b8b8f5a78636c", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -890,6 +890,27 @@ impl usize {\n     widening_impl! { usize, u128, 64, unsigned }\n }\n \n+impl usize {\n+    /// Returns an `usize` where every byte is equal to `x`.\n+    #[inline]\n+    pub(crate) const fn repeat_u8(x: u8) -> usize {\n+        usize::from_ne_bytes([x; mem::size_of::<usize>()])\n+    }\n+\n+    /// Returns an `usize` where every byte pair is equal to `x`.\n+    #[inline]\n+    pub(crate) const fn repeat_u16(x: u16) -> usize {\n+        let mut r = 0usize;\n+        let mut i = 0;\n+        while i < mem::size_of::<usize>() {\n+            // Use `wrapping_shl` to make it work on targets with 16-bit `usize`\n+            r = r.wrapping_shl(16) | (x as usize);\n+            i += 2;\n+        }\n+        r\n+    }\n+}\n+\n /// A classification of floating point numbers.\n ///\n /// This `enum` is used as the return type for [`f32::classify`] and [`f64::classify`]. See"}, {"sha": "63715a6b86b97fd42913bf06d71241c8afab3a28", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -235,7 +235,7 @@ impl<'a> fmt::Debug for EscapeAscii<'a> {\n /// from `../str/mod.rs`, which does something similar for utf8 validation.\n #[inline]\n fn contains_nonascii(v: usize) -> bool {\n-    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    const NONASCII_MASK: usize = usize::repeat_u8(0x80);\n     (NONASCII_MASK & v) != 0\n }\n "}, {"sha": "dffeaf6a834e75739ac296dc31ab29138d78ac28", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -4,12 +4,8 @@\n use crate::cmp;\n use crate::mem;\n \n-const LO_U64: u64 = 0x0101010101010101;\n-const HI_U64: u64 = 0x8080808080808080;\n-\n-// Use truncation.\n-const LO_USIZE: usize = LO_U64 as usize;\n-const HI_USIZE: usize = HI_U64 as usize;\n+const LO_USIZE: usize = usize::repeat_u8(0x01);\n+const HI_USIZE: usize = usize::repeat_u8(0x80);\n const USIZE_BYTES: usize = mem::size_of::<usize>();\n \n /// Returns `true` if `x` contains any zero byte."}, {"sha": "28567a7e753aa88b1eee668928bb47b0c1d4c69a", "filename": "library/core/src/str/count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fstr%2Fcount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fstr%2Fcount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fcount.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -112,16 +112,16 @@ fn do_count_chars(s: &str) -> usize {\n // true)\n #[inline]\n fn contains_non_continuation_byte(w: usize) -> usize {\n-    const LSB: usize = 0x0101_0101_0101_0101u64 as usize;\n+    const LSB: usize = usize::repeat_u8(0x01);\n     ((!w >> 7) | (w >> 6)) & LSB\n }\n \n // Morally equivalent to `values.to_ne_bytes().into_iter().sum::<usize>()`, but\n // more efficient.\n #[inline]\n fn sum_bytes_in_usize(values: usize) -> usize {\n-    const LSB_SHORTS: usize = 0x0001_0001_0001_0001_u64 as usize;\n-    const SKIP_BYTES: usize = 0x00ff_00ff_00ff_00ff_u64 as usize;\n+    const LSB_SHORTS: usize = usize::repeat_u16(0x0001);\n+    const SKIP_BYTES: usize = usize::repeat_u16(0x00ff);\n \n     let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);\n     pair_sum.wrapping_mul(LSB_SHORTS) >> ((USIZE_SIZE - 2) * 8)"}, {"sha": "04bc665233e385dc859f466730c030cf9b64ac20", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -112,8 +112,7 @@ where\n     Some(ch)\n }\n \n-// use truncation to fit u64 into usize\n-const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+const NONASCII_MASK: usize = usize::repeat_u8(0x80);\n \n /// Returns `true` if any byte in the word `x` is nonascii (>= 128).\n #[inline]"}, {"sha": "173ee170c9f585ae79aab4c8f30cd5869231d0a2", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -99,7 +99,7 @@ x--expand-yaml-anchors--remove:\n         run: git config --global core.autocrlf false\n \n       - name: checkout the source code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n \n@@ -703,7 +703,7 @@ jobs:\n     if: github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository == 'rust-lang-ci/rust'\n     steps:\n       - name: checkout the source code\n-        uses: actions/checkout@v2\n+        uses: actions/checkout@v3\n         with:\n           fetch-depth: 2\n "}, {"sha": "b15f5ee66aba1eaf8448b3116f30488a250f4197", "filename": "src/doc/unstable-book/src/language-features/doc-cfg.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdoc-cfg.md?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -7,7 +7,7 @@ The tracking issue for this feature is: [#43781]\n The `doc_cfg` feature allows an API be documented as only available in some specific platforms.\n This attribute has two effects:\n \n-1. In the annotated item's documentation, there will be a message saying \"This is supported on\n+1. In the annotated item's documentation, there will be a message saying \"Available on\n     (platform) only\".\n \n 2. The item's doc-tests will only run on the specific platform."}, {"sha": "0d213a5a2dee9d201e62c8a1315a8346dd41a8b6", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -171,11 +171,8 @@ impl Cfg {\n     pub(crate) fn render_long_html(&self) -> String {\n         let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n \n-        let mut msg = format!(\n-            \"This is supported {} <strong>{}</strong>\",\n-            on,\n-            Display(self, Format::LongHtml)\n-        );\n+        let mut msg =\n+            format!(\"Available {on} <strong>{}</strong>\", Display(self, Format::LongHtml));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n@@ -187,7 +184,7 @@ impl Cfg {\n     pub(crate) fn render_long_plain(&self) -> String {\n         let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n \n-        let mut msg = format!(\"This is supported {} {}\", on, Display(self, Format::LongPlain));\n+        let mut msg = format!(\"Available {on} {}\", Display(self, Format::LongPlain));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }"}, {"sha": "ece3fcb18b6f357c5605a6c2d9237802df66f1a5", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -359,81 +359,73 @@ fn test_render_short_html() {\n #[test]\n fn test_render_long_html() {\n     create_default_session_globals_then(|| {\n-        assert_eq!(\n-            word_cfg(\"unix\").render_long_html(),\n-            \"This is supported on <strong>Unix</strong> only.\"\n-        );\n+        assert_eq!(word_cfg(\"unix\").render_long_html(), \"Available on <strong>Unix</strong> only.\");\n         assert_eq!(\n             name_value_cfg(\"target_os\", \"macos\").render_long_html(),\n-            \"This is supported on <strong>macOS</strong> only.\"\n+            \"Available on <strong>macOS</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_os\", \"wasi\").render_long_html(),\n-            \"This is supported on <strong>WASI</strong> only.\"\n+            \"Available on <strong>WASI</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_pointer_width\", \"16\").render_long_html(),\n-            \"This is supported on <strong>16-bit</strong> only.\"\n+            \"Available on <strong>16-bit</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_endian\", \"little\").render_long_html(),\n-            \"This is supported on <strong>little-endian</strong> only.\"\n+            \"Available on <strong>little-endian</strong> only.\"\n         );\n         assert_eq!(\n             (!word_cfg(\"windows\")).render_long_html(),\n-            \"This is supported on <strong>non-Windows</strong> only.\"\n+            \"Available on <strong>non-Windows</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") & word_cfg(\"windows\")).render_long_html(),\n-            \"This is supported on <strong>Unix and Windows</strong> only.\"\n+            \"Available on <strong>Unix and Windows</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") | word_cfg(\"windows\")).render_long_html(),\n-            \"This is supported on <strong>Unix or Windows</strong> only.\"\n+            \"Available on <strong>Unix or Windows</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") & word_cfg(\"windows\") & word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>Unix and Windows and debug-assertions enabled\\\n-             </strong> only.\"\n+            \"Available on <strong>Unix and Windows and debug-assertions enabled</strong> only.\"\n         );\n         assert_eq!(\n             (word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>Unix or Windows or debug-assertions enabled\\\n-             </strong> only.\"\n+            \"Available on <strong>Unix or Windows or debug-assertions enabled</strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") | word_cfg(\"windows\") | word_cfg(\"debug_assertions\")))\n                 .render_long_html(),\n-            \"This is supported on <strong>neither Unix nor Windows nor debug-assertions \\\n-             enabled</strong>.\"\n+            \"Available on <strong>neither Unix nor Windows nor debug-assertions enabled</strong>.\"\n         );\n         assert_eq!(\n             ((word_cfg(\"unix\") & name_value_cfg(\"target_arch\", \"x86_64\"))\n                 | (word_cfg(\"windows\") & name_value_cfg(\"target_pointer_width\", \"64\")))\n             .render_long_html(),\n-            \"This is supported on <strong>Unix and x86-64, or Windows and 64-bit</strong> only.\"\n+            \"Available on <strong>Unix and x86-64, or Windows and 64-bit</strong> only.\"\n         );\n         assert_eq!(\n             (!(word_cfg(\"unix\") & word_cfg(\"windows\"))).render_long_html(),\n-            \"This is supported on <strong>not (Unix and Windows)</strong>.\"\n+            \"Available on <strong>not (Unix and Windows)</strong>.\"\n         );\n         assert_eq!(\n             ((word_cfg(\"debug_assertions\") | word_cfg(\"windows\")) & word_cfg(\"unix\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>(debug-assertions enabled or Windows) and Unix\\\n-             </strong> only.\"\n+            \"Available on <strong>(debug-assertions enabled or Windows) and Unix</strong> only.\"\n         );\n         assert_eq!(\n             name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n-            \"This is supported with <strong>target feature <code>sse2</code></strong> only.\"\n+            \"Available with <strong>target feature <code>sse2</code></strong> only.\"\n         );\n         assert_eq!(\n             (name_value_cfg(\"target_arch\", \"x86_64\") & name_value_cfg(\"target_feature\", \"sse2\"))\n                 .render_long_html(),\n-            \"This is supported on <strong>x86-64 and target feature \\\n-             <code>sse2</code></strong> only.\"\n+            \"Available on <strong>x86-64 and target feature <code>sse2</code></strong> only.\"\n         );\n     })\n }"}, {"sha": "a620ffa98786021454abebda501b0509d7ce2845", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n                     // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n                     if let Some(Some(generics_start)) = (is_open_tag\n-                        && dox[..range.end].ends_with(\">\"))\n+                        && dox[..range.end].ends_with('>'))\n                     .then(|| extract_path_backwards(&dox, range.start))\n                     {\n                         let generics_sp = match super::source_span_for_markdown_range("}, {"sha": "d6385e2acb8e637083f77ffdf8c8090a7da41232", "filename": "src/test/rustdoc-gui/item-info-overflow.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-overflow.goml?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -8,7 +8,7 @@ assert-property: (\".item-info\", {\"scrollWidth\": \"890\"})\n // Just to be sure we're comparing the correct \"item-info\":\n assert-text: (\n     \".item-info\",\n-    \"This is supported on Android or Linux or Emscripten or DragonFly BSD\",\n+    \"Available on Android or Linux or Emscripten or DragonFly BSD\",\n     STARTS_WITH,\n )\n \n@@ -23,6 +23,6 @@ assert-property: (\"#impl-SimpleTrait .item-info\", {\"scrollWidth\": \"866\"})\n // Just to be sure we're comparing the correct \"item-info\":\n assert-text: (\n     \"#impl-SimpleTrait .item-info\",\n-    \"This is supported on Android or Linux or Emscripten or DragonFly BSD\",\n+    \"Available on Android or Linux or Emscripten or DragonFly BSD\",\n     STARTS_WITH,\n )"}, {"sha": "8b6d355a8f1a7f488911fd79c505a6a793b6bda9", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -4,5 +4,5 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n assert-css: (\".item-info\", {\"width\": \"790px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"340px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"289px\"})\n assert-position: (\".item-info .stab\", {\"x\": 295})"}, {"sha": "c71e5bee12ead049c8b8c711df49f0ff76a6ba3b", "filename": "src/test/rustdoc-ui/intra-doc/unresolved-import-recovery.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -0,0 +1,6 @@\n+// Regression test for issue #95879.\n+\n+use unresolved_crate::module::Name; //~ ERROR failed to resolve\n+\n+/// [Name]\n+pub struct S;"}, {"sha": "b60ab6050d79cb035df45552214841b026ad892c", "filename": "src/test/rustdoc-ui/intra-doc/unresolved-import-recovery.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.stderr?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -0,0 +1,11 @@\n+error[E0433]: failed to resolve: maybe a missing crate `unresolved_crate`?\n+  --> $DIR/unresolved-import-recovery.rs:3:5\n+   |\n+LL | use unresolved_crate::module::Name;\n+   |     ^^^^^^^^^^^^^^^^ maybe a missing crate `unresolved_crate`?\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "4cddb0b76d410125eb708e69f86a433156642fdb", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -4,29 +4,29 @@\n // @has doc_cfg/struct.Portable.html\n // @!has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' ''\n // @has - '//*[@id=\"method.unix_and_arm_only_function\"]' 'fn unix_and_arm_only_function()'\n-// @has - '//*[@class=\"stab portability\"]' 'This is supported on Unix and ARM only.'\n+// @has - '//*[@class=\"stab portability\"]' 'Available on Unix and ARM only.'\n // @has - '//*[@id=\"method.wasi_and_wasm32_only_function\"]' 'fn wasi_and_wasm32_only_function()'\n-// @has - '//*[@class=\"stab portability\"]' 'This is supported on WASI and WebAssembly only.'\n+// @has - '//*[@class=\"stab portability\"]' 'Available on WASI and WebAssembly only.'\n pub struct Portable;\n \n // @has doc_cfg/unix_only/index.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//  'This is supported on Unix only.'\n+//  'Available on Unix only.'\n // @matches - '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]' '\\AARM\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(unix))]\n pub mod unix_only {\n     // @has doc_cfg/unix_only/fn.unix_only_function.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on Unix only.'\n+    //  'Available on Unix only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     pub fn unix_only_function() {\n         content::should::be::irrelevant();\n     }\n \n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on Unix and ARM only.'\n+    //  'Available on Unix and ARM only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n@@ -41,22 +41,22 @@ pub mod unix_only {\n \n // @has doc_cfg/wasi_only/index.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//  'This is supported on WASI only.'\n+//  'Available on WASI only.'\n // @matches - '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]' '\\AWebAssembly\\Z'\n // @count - '//*[@class=\"stab portability\"]' 2\n #[doc(cfg(target_os = \"wasi\"))]\n pub mod wasi_only {\n     // @has doc_cfg/wasi_only/fn.wasi_only_function.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on WASI only.'\n+    //  'Available on WASI only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     pub fn wasi_only_function() {\n         content::should::be::irrelevant();\n     }\n \n     // @has doc_cfg/wasi_only/trait.Wasm32Only.html \\\n     //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-    //  'This is supported on WASI and WebAssembly only.'\n+    //  'Available on WASI and WebAssembly only.'\n     // @count - '//*[@class=\"stab portability\"]' 1\n     #[doc(cfg(target_arch = \"wasm32\"))]\n     pub trait Wasm32Only {\n@@ -78,15 +78,15 @@ pub mod wasi_only {\n \n // @has doc_cfg/fn.uses_target_feature.html\n // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//        'This is supported with target feature avx only.'\n+//        'Available with target feature avx only.'\n #[target_feature(enable = \"avx\")]\n pub unsafe fn uses_target_feature() {\n     content::should::be::irrelevant();\n }\n \n // @has doc_cfg/fn.uses_cfg_target_feature.html\n // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//        'This is supported with target feature avx only.'\n+//        'Available with target feature avx only.'\n #[doc(cfg(target_feature = \"avx\"))]\n pub fn uses_cfg_target_feature() {\n     uses_target_feature();\n@@ -95,7 +95,7 @@ pub fn uses_cfg_target_feature() {\n // multiple attributes should be allowed\n // @has doc_cfg/fn.multiple_attrs.html \\\n //  '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n-//  'This is supported on x and y and z only.'\n+//  'Available on x and y and z only.'\n #[doc(cfg(x))]\n #[doc(cfg(y), cfg(z))]\n pub fn multiple_attrs() {}"}, {"sha": "18f3900b263b0b7617def5151e60c43519be7d5f", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -3,7 +3,7 @@\n \n // @has 'foo/index.html'\n // @matches '-' '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n-// @has '-' '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n+// @has '-' '//*[@class=\"item-left module-item\"]//*[@class=\"stab portability\"]/@title' 'Available on crate feature `sync` only'\n \n // @has 'foo/struct.Foo.html'\n // @has '-' '//*[@class=\"stab portability\"]' 'sync'\n@@ -13,41 +13,41 @@\n pub struct Foo;\n \n // @has 'foo/bar/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod bar {\n     // @has 'foo/bar/struct.Bar.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync only.'\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Bar;\n }\n \n // @has 'foo/baz/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate features sync and send only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n pub mod baz {\n     // @has 'foo/baz/struct.Baz.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate features sync and send only.'\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Baz;\n }\n \n // @has 'foo/qux/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod qux {\n     // @has 'foo/qux/struct.Qux.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate features sync and send only.'\n     #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n     pub struct Qux;\n }\n \n // @has 'foo/quux/index.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync and crate feature send and foo only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\", foo)))]\n pub mod quux {\n     // @has 'foo/quux/struct.Quux.html'\n-    // @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo and bar only.'\n+    // @has '-' '//*[@class=\"stab portability\"]' 'Available on crate feature sync and crate feature send and foo and bar only.'\n     #[doc(cfg(all(feature = \"send\", feature = \"sync\", bar)))]\n     pub struct Quux;\n }"}, {"sha": "64bfd14b7e7da346cf24751455fd9933adf70efd", "filename": "src/test/ui/use/use-super-global-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -9,7 +9,7 @@ mod foo {\n \n     pub fn g() {\n         use ::super::main; //~ ERROR global paths cannot start with `super`\n-        main(); //~ ERROR cannot find function `main` in this scope\n+        main();\n     }\n }\n "}, {"sha": "7014a12e9ddd26202c7766baba8c9e19234cba75", "filename": "src/test/ui/use/use-super-global-path.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9b3ff7d34335c5bc0b2afed640b65d64a85fe03/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -16,18 +16,6 @@ error[E0433]: failed to resolve: global paths cannot start with `super`\n LL |         use ::super::main;\n    |               ^^^^^ global paths cannot start with `super`\n \n-error[E0425]: cannot find function `main` in this scope\n-  --> $DIR/use-super-global-path.rs:12:9\n-   |\n-LL |         main();\n-   |         ^^^^ not found in this scope\n-   |\n-help: consider importing this function\n-   |\n-LL |     use main;\n-   |\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0425, E0433.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "24cf957627d5ede1b395f92ff871fd7a281d49a4", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=d9b3ff7d34335c5bc0b2afed640b65d64a85fe03", "patch": "@@ -1 +1 @@\n-Subproject commit 46d7ee68f26285db26b2640f2c07d6332380c756\n+Subproject commit 24cf957627d5ede1b395f92ff871fd7a281d49a4"}]}