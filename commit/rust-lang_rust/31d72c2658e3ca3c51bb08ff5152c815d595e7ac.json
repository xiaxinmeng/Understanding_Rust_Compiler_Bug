{"sha": "31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDcyYzI2NThlM2NhM2M1MWJiMDhmZjUxNTJjODE1ZDU5NWU3YWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-07T13:09:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-09T18:37:32Z"}, "message": "Accept arbitrary expressions in key-value attributes at parse time", "tree": {"sha": "fb7b58dcfd71cfad5addca827d99ca456dfa5d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb7b58dcfd71cfad5addca827d99ca456dfa5d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "html_url": "https://github.com/rust-lang/rust/commit/31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa55f668e5ea5388ec98b9340969527252239151", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa55f668e5ea5388ec98b9340969527252239151", "html_url": "https://github.com/rust-lang/rust/commit/fa55f668e5ea5388ec98b9340969527252239151"}], "stats": {"total": 355, "additions": 145, "deletions": 210}, "files": [{"sha": "220bbed7e78b639eaf75fd6d8e4451603bd6b522", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -24,7 +24,7 @@ pub use UnsafeSource::*;\n \n use crate::ptr::P;\n use crate::token::{self, CommentKind, DelimToken};\n-use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream, TokenTree};\n+use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -39,7 +39,6 @@ use rustc_span::{Span, DUMMY_SP};\n use std::cmp::Ordering;\n use std::convert::TryFrom;\n use std::fmt;\n-use std::iter;\n \n #[cfg(test)]\n mod tests;\n@@ -1514,20 +1513,6 @@ impl MacArgs {\n         }\n     }\n \n-    /// Tokens together with the delimiters or `=`.\n-    /// Use of this method generally means that something suboptimal or hacky is happening.\n-    pub fn outer_tokens(&self) -> TokenStream {\n-        match *self {\n-            MacArgs::Empty => TokenStream::default(),\n-            MacArgs::Delimited(dspan, delim, ref tokens) => {\n-                TokenTree::Delimited(dspan, delim.to_token(), tokens.clone()).into()\n-            }\n-            MacArgs::Eq(eq_span, ref tokens) => {\n-                iter::once(TokenTree::token(token::Eq, eq_span)).chain(tokens.trees()).collect()\n-            }\n-        }\n-    }\n-\n     /// Whether a macro with these arguments needs a semicolon\n     /// when used as a standalone item or statement.\n     pub fn need_semicolon(&self) -> bool {"}, {"sha": "3889ede7f4c21ccfdc0c5c40fe838efe01f8f710", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -371,20 +371,15 @@ pub fn visit_mac_args<T: MutVisitor>(args: &mut MacArgs, vis: &mut T) {\n             // The value in `#[key = VALUE]` must be visited as an expression for backward\n             // compatibility, so that macros can be expanded in that position.\n             if !vis.token_visiting_enabled() {\n-                if let Some(TokenTree::Token(token)) = tokens.trees_ref().next() {\n-                    if let token::Interpolated(..) = token.kind {\n-                        // ^^ Do not `make_mut` unless we have to.\n-                        match Lrc::make_mut(&mut tokens.0).get_mut(0) {\n-                            Some((TokenTree::Token(token), _spacing)) => match &mut token.kind {\n-                                token::Interpolated(nt) => match Lrc::make_mut(nt) {\n-                                    token::NtExpr(expr) => vis.visit_expr(expr),\n-                                    t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-                                },\n-                                t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-                            },\n+                match Lrc::make_mut(&mut tokens.0).get_mut(0) {\n+                    Some((TokenTree::Token(token), _spacing)) => match &mut token.kind {\n+                        token::Interpolated(nt) => match Lrc::make_mut(nt) {\n+                            token::NtExpr(expr) => vis.visit_expr(expr),\n                             t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-                        }\n-                    }\n+                        },\n+                        t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n+                    },\n+                    t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n                 }\n             }\n         }"}, {"sha": "a420bb56350c637591a31a50623af0feb75ff914", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -906,7 +906,6 @@ pub fn walk_mac_args<'a, V: Visitor<'a>>(visitor: &mut V, args: &'a MacArgs) {\n                     token::NtExpr(expr) => visitor.visit_expr(expr),\n                     t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n                 },\n-                token::Literal(..) | token::Ident(..) => {}\n                 t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n             },\n             t => panic!(\"unexpected token in key-value attribute: {:?}\", t),"}, {"sha": "9d54d89e080f59c3f081f7914f33db8bf3e4ae42", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -630,6 +630,10 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n+    gate_all!(\n+        extended_key_value_attributes,\n+        \"arbitrary expressions in key-value attributes are unstable\"\n+    );\n     if sess.parse_sess.span_diagnostic.err_count() == 0 {\n         // Errors for `destructuring_assignment` can get quite noisy, especially where `_` is\n         // involved, so we only emit errors where there are no other parsing errors."}, {"sha": "845e03150d71a85fda573010f84ca6f50e09a971", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -620,6 +620,9 @@ declare_features! (\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (active, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n \n+    /// Allows arbitrary expressions in key-value attributes at parse time.\n+    (active, extended_key_value_attributes, \"1.50.0\", Some(78835), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "df4695b18e7136ad3b17109e6b1faed699ea5a0e", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -23,6 +23,7 @@ use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, CrateSugar, E\n use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit};\n use rustc_ast::{Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::PResult;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError};\n use rustc_session::parse::ParseSess;\n@@ -935,16 +936,24 @@ impl<'a> Parser<'a> {\n                             is_interpolated_expr = true;\n                         }\n                     }\n-                    let token_tree = if is_interpolated_expr {\n-                        // We need to accept arbitrary interpolated expressions to continue\n-                        // supporting things like `doc = $expr` that work on stable.\n-                        // Non-literal interpolated expressions are rejected after expansion.\n-                        self.parse_token_tree()\n-                    } else {\n-                        self.parse_unsuffixed_lit()?.token_tree()\n-                    };\n \n-                    MacArgs::Eq(eq_span, token_tree.into())\n+                    // The value here is never passed to macros as tokens by itself (not as a part\n+                    // of the whole attribute), so we don't collect tokens here. If this changes,\n+                    // then token will need to be collected. One catch here is that we are using\n+                    // a nonterminal for keeping the expression, but this nonterminal should not\n+                    // be wrapped into a group when converting to token stream.\n+                    let expr = self.parse_expr()?;\n+                    let span = expr.span;\n+\n+                    match &expr.kind {\n+                        // Not gated to supporte things like `doc = $expr` that work on stable.\n+                        _ if is_interpolated_expr => {}\n+                        ExprKind::Lit(lit) if lit.kind.is_unsuffixed() => {}\n+                        _ => self.sess.gated_spans.gate(sym::extended_key_value_attributes, span),\n+                    }\n+\n+                    let token = token::Interpolated(Lrc::new(token::NtExpr(expr)));\n+                    MacArgs::Eq(eq_span, TokenTree::token(token, span).into())\n                 } else {\n                     MacArgs::Empty\n                 }"}, {"sha": "b9c942d61a92205f90e95f648299515bb49b17e7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -496,6 +496,7 @@ symbols! {\n         expf64,\n         export_name,\n         expr,\n+        extended_key_value_attributes,\n         extern_absolute_paths,\n         extern_crate_item_prelude,\n         extern_crate_self,"}, {"sha": "befd31a5492902ea90bd53648b1a2ce36b77f0fb", "filename": "src/test/rustdoc/external-doc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-doc.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,8 +1,24 @@\n #![feature(external_doc)]\n+#![feature(extended_key_value_attributes)]\n \n // @has external_doc/struct.CanHasDocs.html\n // @has - '//h1' 'External Docs'\n // @has - '//h2' 'Inline Docs'\n #[doc(include = \"auxiliary/external-doc.md\")]\n /// ## Inline Docs\n pub struct CanHasDocs;\n+\n+// @has external_doc/struct.IncludeStrDocs.html\n+// @has - '//h1' 'External Docs'\n+// @has - '//h2' 'Inline Docs'\n+#[doc = include_str!(\"auxiliary/external-doc.md\")]\n+/// ## Inline Docs\n+pub struct IncludeStrDocs;\n+\n+macro_rules! dir { () => { \"auxiliary\" } }\n+\n+// @has external_doc/struct.EagerExpansion.html\n+// @has - '//h1' 'External Docs'\n+#[doc = include_str!(concat!(dir!(), \"/external-doc.md\"))]\n+/// ## Inline Docs\n+pub struct EagerExpansion;"}, {"sha": "deb2a1af204a73014676742cc26b852d08ceef01", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":null}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "71336f452fcb83cfd58ac06b8a2feb8877d591ae", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":null}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "330b119772a64bbdcf1414e55abf34ee9d712c9f", "filename": "src/test/ui/attr-eq-token-tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,2 +1,2 @@\n-#[my_attr = !] //~ ERROR unexpected token: `!`\n+#[my_attr = !] //~ ERROR expected expression, found `]`\n fn main() {}"}, {"sha": "1846444b668f4ec6437477811b7548a8bc1d5364", "filename": "src/test/ui/attr-eq-token-tree.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,8 +1,8 @@\n-error: unexpected token: `!`\n-  --> $DIR/attr-eq-token-tree.rs:1:13\n+error: expected expression, found `]`\n+  --> $DIR/attr-eq-token-tree.rs:1:14\n    |\n LL | #[my_attr = !]\n-   |             ^\n+   |              ^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "08121413ee9f53acc83d67d6aa215c9bd21d641d", "filename": "src/test/ui/attributes/key-value-expansion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -12,23 +12,22 @@ extern crate key_value_expansion;\n macro_rules! bug {\n     ($expr:expr) => {\n         #[rustc_dummy = $expr] // Any key-value attribute, not necessarily `doc`\n-        //~^ ERROR unexpected token: `(7u32)`\n         struct S;\n     };\n }\n \n // Any expressions containing macro call `X` that's more complex than `X` itself.\n // Parentheses will work.\n-bug!((column!()));\n+bug!((column!())); //~ ERROR unexpected token: `(7u32)`\n \n // Original test case.\n \n macro_rules! bug {\n     () => {\n-        bug!(\"bug\" + stringify!(found));\n+        bug!(\"bug\" + stringify!(found)); //~ ERROR unexpected token: `\"bug\" + \"found\"`\n     };\n     ($test:expr) => {\n-        #[doc = $test] //~ ERROR unexpected token: `\"bug\" + \"found\"`\n+        #[doc = $test]\n         struct Test {}\n     };\n }\n@@ -39,14 +38,15 @@ bug!();\n \n macro_rules! doc_comment {\n     ($x:expr) => {\n-        #[doc = $x] //~ ERROR unexpected token: `{\n+        #[doc = $x]\n         extern {}\n     };\n }\n \n macro_rules! some_macro {\n     ($t1: ty) => {\n         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}\n+        //~^ ERROR unexpected token: `{\n     };\n }\n "}, {"sha": "4b14b88a74f2b74b048cbe53c18362b838dceb74", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,19 +1,14 @@\n error: unexpected token: `(7u32)`\n-  --> $DIR/key-value-expansion.rs:14:25\n+  --> $DIR/key-value-expansion.rs:21:6\n    |\n-LL |         #[rustc_dummy = $expr] // Any key-value attribute, not necessarily `doc`\n-   |                         ^^^^^\n-...\n LL | bug!((column!()));\n-   | ------------------ in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |      ^^^^^^^^^^^\n \n error: unexpected token: `\"bug\" + \"found\"`\n-  --> $DIR/key-value-expansion.rs:31:17\n+  --> $DIR/key-value-expansion.rs:27:14\n    |\n-LL |         #[doc = $test]\n-   |                 ^^^^^\n+LL |         bug!(\"bug\" + stringify!(found));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | bug!();\n    | ------- in this macro invocation\n@@ -30,10 +25,10 @@ error: unexpected token: `{\n                                                              }));\n     res\n }.as_str()`\n-  --> $DIR/key-value-expansion.rs:42:17\n+  --> $DIR/key-value-expansion.rs:48:23\n    |\n-LL |         #[doc = $x]\n-   |                 ^^\n+LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | some_macro!(u8);\n    | ---------------- in this macro invocation"}, {"sha": "f19fdb45f1f1e6f9a8dfa44bf198a75aa6073a38", "filename": "src/test/ui/feature-gates/feature-gate-extended_key_value_attributes.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -0,0 +1,8 @@\n+#[cfg(FALSE)]\n+#[attr = multi::segment::path] //~ ERROR arbitrary expressions in key-value attributes are unstable\n+#[attr = macro_call!()] //~ ERROR arbitrary expressions in key-value attributes are unstable\n+#[attr = 1 + 2] //~ ERROR arbitrary expressions in key-value attributes are unstable\n+#[attr = what?] //~ ERROR arbitrary expressions in key-value attributes are unstable\n+struct S;\n+\n+fn main() {}"}, {"sha": "9887814b90762bbf06e4e5a44d5c33d2d36e9678", "filename": "src/test/ui/feature-gates/feature-gate-extended_key_value_attributes.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: arbitrary expressions in key-value attributes are unstable\n+  --> $DIR/feature-gate-extended_key_value_attributes.rs:2:10\n+   |\n+LL | #[attr = multi::segment::path]\n+   |          ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n+   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: arbitrary expressions in key-value attributes are unstable\n+  --> $DIR/feature-gate-extended_key_value_attributes.rs:3:10\n+   |\n+LL | #[attr = macro_call!()]\n+   |          ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n+   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: arbitrary expressions in key-value attributes are unstable\n+  --> $DIR/feature-gate-extended_key_value_attributes.rs:4:10\n+   |\n+LL | #[attr = 1 + 2]\n+   |          ^^^^^\n+   |\n+   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n+   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: arbitrary expressions in key-value attributes are unstable\n+  --> $DIR/feature-gate-extended_key_value_attributes.rs:5:10\n+   |\n+LL | #[attr = what?]\n+   |          ^^^^^\n+   |\n+   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n+   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "88834a96721b98cebd0b98b1b9b0ec0506e17821", "filename": "src/test/ui/macros/macro-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,2 +1,2 @@\n-#[doc = $not_there] //~ ERROR unexpected token: `$`\n+#[doc = $not_there] //~ ERROR expected expression, found `$`\n fn main() { }"}, {"sha": "3316d38726487e0fe1c65e520f1cf25cc923961b", "filename": "src/test/ui/macros/macro-attribute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-attribute.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,8 +1,8 @@\n-error: unexpected token: `$`\n+error: expected expression, found `$`\n   --> $DIR/macro-attribute.rs:1:9\n    |\n LL | #[doc = $not_there]\n-   |         ^\n+   |         ^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "b962447e7ed04c5f615260eb7170368d982f59a5", "filename": "src/test/ui/malformed/malformed-interpolated.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -2,16 +2,15 @@\n \n macro_rules! check {\n     ($expr: expr) => (\n-        #[rustc_dummy = $expr] //~ ERROR unexpected token: `-0`\n-                               //~| ERROR unexpected token: `0 + 0`\n+        #[rustc_dummy = $expr]\n         use main as _;\n     );\n }\n \n check!(\"0\"); // OK\n check!(0); // OK\n check!(0u8); //~ ERROR suffixed literals are not allowed in attributes\n-check!(-0); // ERROR, see above\n-check!(0 + 0); // ERROR, see above\n+check!(-0); //~ ERROR unexpected token: `-0`\n+check!(0 + 0); //~ ERROR unexpected token: `0 + 0`\n \n fn main() {}"}, {"sha": "4b9332ddd013388faaac9927c558441f1918ae91", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,32 +1,22 @@\n error: suffixed literals are not allowed in attributes\n-  --> $DIR/malformed-interpolated.rs:13:8\n+  --> $DIR/malformed-interpolated.rs:12:8\n    |\n LL | check!(0u8);\n    |        ^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: unexpected token: `-0`\n-  --> $DIR/malformed-interpolated.rs:5:25\n-   |\n-LL |         #[rustc_dummy = $expr]\n-   |                         ^^^^^\n-...\n-LL | check!(-0); // ERROR, see above\n-   | ----------- in this macro invocation\n+  --> $DIR/malformed-interpolated.rs:13:8\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | check!(-0);\n+   |        ^^\n \n error: unexpected token: `0 + 0`\n-  --> $DIR/malformed-interpolated.rs:5:25\n-   |\n-LL |         #[rustc_dummy = $expr]\n-   |                         ^^^^^\n-...\n-LL | check!(0 + 0); // ERROR, see above\n-   | -------------- in this macro invocation\n+  --> $DIR/malformed-interpolated.rs:14:8\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | check!(0 + 0);\n+   |        ^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "db612ed883d7f3e03dae9bf4da402775be94c6ca", "filename": "src/test/ui/parser/attr-bad-meta-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,2 +1,2 @@\n-#[path =] //~ ERROR unexpected token: `]`\n+#[path =] //~ ERROR expected expression, found `]`\n mod m {}"}, {"sha": "6fc6fb665a80769ad278cb755dea33c16bcc8318", "filename": "src/test/ui/parser/attr-bad-meta-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-bad-meta-2.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,8 +1,8 @@\n-error: unexpected token: `]`\n+error: expected expression, found `]`\n   --> $DIR/attr-bad-meta-2.rs:1:9\n    |\n LL | #[path =]\n-   |         ^\n+   |         ^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "319264aec9cd67d441107f1855c5f3037ba3d035", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -1,27 +1,15 @@\n-#![feature(rustc_attrs)]\n+#![feature(rustc_attrs, extended_key_value_attributes)]\n \n #[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n-                        //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n-                     //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n-                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n-                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n-                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n-                        //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n-                     //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n-                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n-                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n-                      //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n-                        //~| ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n-                        //~| ERROR: suffixed literals are not allowed in attributes\n fn main() {}"}, {"sha": "5245ffead715321236cc5835899028d9a8fe479d", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 11, "deletions": 107, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d72c2658e3ca3c51bb08ff5152c815d595e7ac/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=31d72c2658e3ca3c51bb08ff5152c815d595e7ac", "patch": "@@ -7,188 +7,92 @@ LL | #[rustc_dummy = 1usize]\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:5:17\n+  --> $DIR/suffixed-literal-meta.rs:4:17\n    |\n LL | #[rustc_dummy = 1u8]\n    |                 ^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:17\n-   |\n-LL | #[rustc_dummy = 1u16]\n-   |                 ^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:17\n-   |\n-LL | #[rustc_dummy = 1u32]\n-   |                 ^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:17\n-   |\n-LL | #[rustc_dummy = 1u64]\n-   |                 ^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:13:17\n-   |\n-LL | #[rustc_dummy = 1isize]\n-   |                 ^^^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:15:17\n-   |\n-LL | #[rustc_dummy = 1i8]\n-   |                 ^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:17:17\n-   |\n-LL | #[rustc_dummy = 1i16]\n-   |                 ^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:19:17\n-   |\n-LL | #[rustc_dummy = 1i32]\n-   |                 ^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:21:17\n-   |\n-LL | #[rustc_dummy = 1i64]\n-   |                 ^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:23:17\n-   |\n-LL | #[rustc_dummy = 1.0f32]\n-   |                 ^^^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:25:17\n-   |\n-LL | #[rustc_dummy = 1.0f64]\n-   |                 ^^^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:3:17\n-   |\n-LL | #[rustc_dummy = 1usize]\n-   |                 ^^^^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n-LL | #[rustc_dummy = 1u8]\n-   |                 ^^^\n-   |\n-   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n-\n-error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:17\n-   |\n LL | #[rustc_dummy = 1u16]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:17\n+  --> $DIR/suffixed-literal-meta.rs:6:17\n    |\n LL | #[rustc_dummy = 1u32]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:17\n+  --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n LL | #[rustc_dummy = 1u64]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:13:17\n+  --> $DIR/suffixed-literal-meta.rs:8:17\n    |\n LL | #[rustc_dummy = 1isize]\n    |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:15:17\n+  --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n LL | #[rustc_dummy = 1i8]\n    |                 ^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:17:17\n+  --> $DIR/suffixed-literal-meta.rs:10:17\n    |\n LL | #[rustc_dummy = 1i16]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:19:17\n+  --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n LL | #[rustc_dummy = 1i32]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:21:17\n+  --> $DIR/suffixed-literal-meta.rs:12:17\n    |\n LL | #[rustc_dummy = 1i64]\n    |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:23:17\n+  --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n LL | #[rustc_dummy = 1.0f32]\n    |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:25:17\n+  --> $DIR/suffixed-literal-meta.rs:14:17\n    |\n LL | #[rustc_dummy = 1.0f64]\n    |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 12 previous errors\n "}]}