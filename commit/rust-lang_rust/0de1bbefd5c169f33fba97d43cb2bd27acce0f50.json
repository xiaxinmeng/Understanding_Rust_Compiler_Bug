{"sha": "0de1bbefd5c169f33fba97d43cb2bd27acce0f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTFiYmVmZDVjMTY5ZjMzZmJhOTdkNDNjYjJiZDI3YWNjZTBmNTA=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T05:24:27Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T05:24:27Z"}, "message": "Refactor isize/usize read/writes.", "tree": {"sha": "f8c69158faee0d27c711e15f08b78e7aad8f3994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8c69158faee0d27c711e15f08b78e7aad8f3994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de1bbefd5c169f33fba97d43cb2bd27acce0f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de1bbefd5c169f33fba97d43cb2bd27acce0f50", "html_url": "https://github.com/rust-lang/rust/commit/0de1bbefd5c169f33fba97d43cb2bd27acce0f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de1bbefd5c169f33fba97d43cb2bd27acce0f50/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e225d76580d6180e55d3e0cb21eeb1f2d2a4d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e225d76580d6180e55d3e0cb21eeb1f2d2a4d7", "html_url": "https://github.com/rust-lang/rust/commit/95e225d76580d6180e55d3e0cb21eeb1f2d2a4d7"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "839e76b710f7b5c083d185a34e6cb1af708e5ca9", "filename": "src/interpreter.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0de1bbefd5c169f33fba97d43cb2bd27acce0f50/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de1bbefd5c169f33fba97d43cb2bd27acce0f50/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=0de1bbefd5c169f33fba97d43cb2bd27acce0f50", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                 let src   = try!(self.memory.read_ptr(src_arg));\n                 let dest  = try!(self.memory.read_ptr(dest_arg));\n-                let count = try!(self.memory.read_int(count_arg, self.memory.pointer_size));\n+                let count = try!(self.memory.read_isize(count_arg));\n \n                 try!(self.memory.copy(src, dest, count as usize * elem_size));\n             }\n@@ -397,18 +397,17 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 let ptr_arg    = try!(self.eval_operand(&args[0]));\n                 let offset_arg = try!(self.eval_operand(&args[1]));\n \n-                let offset = try!(self.memory.read_int(offset_arg, self.memory.pointer_size));\n+                let offset = try!(self.memory.read_isize(offset_arg));\n \n                 match self.memory.read_ptr(ptr_arg) {\n                     Ok(ptr) => {\n                         let result_ptr = ptr.offset(offset as isize * pointee_size);\n                         try!(self.memory.write_ptr(dest, result_ptr));\n                     }\n                     Err(EvalError::ReadBytesAsPointer) => {\n-                        let psize = self.memory.pointer_size;\n-                        let addr = try!(self.memory.read_int(ptr_arg, psize));\n+                        let addr = try!(self.memory.read_isize(ptr_arg));\n                         let result_addr = addr + offset * pointee_size as i64;\n-                        try!(self.memory.write_int(dest, result_addr, psize));\n+                        try!(self.memory.write_isize(dest, result_addr));\n                     }\n                     Err(e) => return Err(e),\n                 }\n@@ -451,7 +450,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             \"__rust_allocate\" => {\n                 let size_arg  = try!(self.eval_operand(&args[0]));\n                 let _align_arg = try!(self.eval_operand(&args[1]));\n-                let size = try!(self.memory.read_uint(size_arg, self.memory.pointer_size));\n+                let size = try!(self.memory.read_usize(size_arg));\n                 let ptr = self.memory.allocate(size as usize);\n                 try!(self.memory.write_ptr(dest, ptr));\n             }\n@@ -553,8 +552,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                     },\n                     _ => panic!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n                 };\n-                let psize = self.memory.pointer_size;\n-                try!(self.memory.write_uint(dest, len, psize));\n+                try!(self.memory.write_usize(dest, len));\n             }\n \n             Ref(_, _, ref lvalue) => {\n@@ -563,9 +561,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 match lv.extra {\n                     LvalueExtra::None => {},\n                     LvalueExtra::Length(len) => {\n-                        let psize = self.memory.pointer_size;\n-                        let len_ptr = dest.offset(psize as isize);\n-                        try!(self.memory.write_uint(len_ptr, len, psize));\n+                        let len_ptr = dest.offset(self.memory.pointer_size as isize);\n+                        try!(self.memory.write_usize(len_ptr, len));\n                     }\n                 }\n             }\n@@ -589,9 +586,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                             (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n-                                let size = self.memory.pointer_size;\n-                                let len_ptr = dest.offset(size as isize);\n-                                try!(self.memory.write_uint(len_ptr, length as u64, size));\n+                                let len_ptr = dest.offset(self.memory.pointer_size as isize);\n+                                try!(self.memory.write_usize(len_ptr, length as u64));\n                             }\n \n                             _ => panic!(\"can't handle cast: {:?}\", rvalue),\n@@ -685,9 +681,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                         let ptr = try!(self.memory.read_ptr(base_ptr));\n                         let extra = match pointee_ty.sty {\n                             ty::TySlice(_) => {\n-                                let psize = self.memory.pointer_size;\n-                                let len_ptr = base_ptr.offset(psize as isize);\n-                                let len = try!(self.memory.read_uint(len_ptr, psize));\n+                                let len_ptr = base_ptr.offset(self.memory.pointer_size as isize);\n+                                let len = try!(self.memory.read_usize(len_ptr));\n                                 LvalueExtra::Length(len)\n                             }\n                             ty::TyTrait(_) => unimplemented!(),\n@@ -703,7 +698,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                             _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n                         };\n                         let n_ptr = try!(self.eval_operand(operand));\n-                        let n = try!(self.memory.read_uint(n_ptr, self.memory.pointer_size));\n+                        let n = try!(self.memory.read_usize(n_ptr));\n                         base_ptr.offset(n as isize * elem_size as isize)\n                     }\n \n@@ -734,7 +729,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 let ptr = self.memory.allocate(psize * 2);\n                 try!(self.memory.write_bytes(static_ptr, s.as_bytes()));\n                 try!(self.memory.write_ptr(ptr, static_ptr));\n-                try!(self.memory.write_uint(ptr.offset(psize as isize), s.len() as u64, psize));\n+                try!(self.memory.write_usize(ptr.offset(psize as isize), s.len() as u64));\n                 Ok(ptr)\n             }\n             ByteStr(ref bs) => {\n@@ -887,18 +882,16 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             ty::TyUint(UintTy::U64) => PrimVal::U64(try!(self.memory.read_uint(ptr, 8)) as u64),\n \n             // TODO(tsion): Pick the PrimVal dynamically.\n-            ty::TyInt(IntTy::Is) =>\n-                PrimVal::I64(try!(self.memory.read_int(ptr, self.memory.pointer_size))),\n-            ty::TyUint(UintTy::Us) =>\n-                PrimVal::U64(try!(self.memory.read_uint(ptr, self.memory.pointer_size))),\n+            ty::TyInt(IntTy::Is)   => PrimVal::I64(try!(self.memory.read_isize(ptr))),\n+            ty::TyUint(UintTy::Us) => PrimVal::U64(try!(self.memory.read_usize(ptr))),\n \n             ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n                 if self.type_is_sized(ty) {\n                     match self.memory.read_ptr(ptr) {\n                         Ok(p) => PrimVal::AbstractPtr(p),\n                         Err(EvalError::ReadBytesAsPointer) => {\n-                            let n = try!(self.memory.read_uint(ptr, self.memory.pointer_size));\n+                            let n = try!(self.memory.read_usize(ptr));\n                             PrimVal::IntegerPtr(n)\n                         }\n                         Err(e) => return Err(e),"}, {"sha": "3ac5688c190932a5507a44b6c65a5c28408b3ddc", "filename": "src/memory.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0de1bbefd5c169f33fba97d43cb2bd27acce0f50/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de1bbefd5c169f33fba97d43cb2bd27acce0f50/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=0de1bbefd5c169f33fba97d43cb2bd27acce0f50", "patch": "@@ -215,6 +215,24 @@ impl Memory {\n     pub fn write_uint(&mut self, ptr: Pointer, n: u64, size: usize) -> EvalResult<()> {\n         self.get_bytes_mut(ptr, size).map(|mut b| b.write_uint::<NativeEndian>(n, size).unwrap())\n     }\n+\n+    pub fn read_isize(&self, ptr: Pointer) -> EvalResult<i64> {\n+        self.read_int(ptr, self.pointer_size)\n+    }\n+\n+    pub fn write_isize(&mut self, ptr: Pointer, n: i64) -> EvalResult<()> {\n+        let size = self.pointer_size;\n+        self.write_int(ptr, n, size)\n+    }\n+\n+    pub fn read_usize(&self, ptr: Pointer) -> EvalResult<u64> {\n+        self.read_uint(ptr, self.pointer_size)\n+    }\n+\n+    pub fn write_usize(&mut self, ptr: Pointer, n: u64) -> EvalResult<()> {\n+        let size = self.pointer_size;\n+        self.write_uint(ptr, n, size)\n+    }\n }\n \n impl Allocation {"}]}