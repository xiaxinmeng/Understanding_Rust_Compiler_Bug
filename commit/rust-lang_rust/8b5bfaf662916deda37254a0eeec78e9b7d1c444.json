{"sha": "8b5bfaf662916deda37254a0eeec78e9b7d1c444", "node_id": "C_kwDOAAsO6NoAKDhiNWJmYWY2NjI5MTZkZWRhMzcyNTRhMGVlZWM3OGU5YjdkMWM0NDQ", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-11-16T19:13:45Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-11-16T19:24:03Z"}, "message": "rustdoc JSON: Use `Function` everywhere and remove `Method`", "tree": {"sha": "aec130381e26c32c28c8d3cb341b4497ffadd092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aec130381e26c32c28c8d3cb341b4497ffadd092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5bfaf662916deda37254a0eeec78e9b7d1c444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5bfaf662916deda37254a0eeec78e9b7d1c444", "html_url": "https://github.com/rust-lang/rust/commit/8b5bfaf662916deda37254a0eeec78e9b7d1c444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5bfaf662916deda37254a0eeec78e9b7d1c444/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d651a295e0e0c331153288b10b78344a4ede20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d651a295e0e0c331153288b10b78344a4ede20b", "html_url": "https://github.com/rust-lang/rust/commit/6d651a295e0e0c331153288b10b78344a4ede20b"}], "stats": {"total": 61, "additions": 13, "deletions": 48}, "files": [{"sha": "6995778a93d6158a0c854d5ecedf3f1da125f1d6", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=8b5bfaf662916deda37254a0eeec78e9b7d1c444", "patch": "@@ -257,12 +257,12 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         StructFieldItem(f) => ItemEnum::StructField(f.into_tcx(tcx)),\n         EnumItem(e) => ItemEnum::Enum(e.into_tcx(tcx)),\n         VariantItem(v) => ItemEnum::Variant(v.into_tcx(tcx)),\n-        FunctionItem(f) => ItemEnum::Function(from_function(f, header.unwrap(), tcx)),\n-        ForeignFunctionItem(f) => ItemEnum::Function(from_function(f, header.unwrap(), tcx)),\n+        FunctionItem(f) => ItemEnum::Function(from_function(f, true, header.unwrap(), tcx)),\n+        ForeignFunctionItem(f) => ItemEnum::Function(from_function(f, false, header.unwrap(), tcx)),\n         TraitItem(t) => ItemEnum::Trait((*t).into_tcx(tcx)),\n         TraitAliasItem(t) => ItemEnum::TraitAlias(t.into_tcx(tcx)),\n-        MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true, header.unwrap(), tcx)),\n-        TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false, header.unwrap(), tcx)),\n+        MethodItem(m, _) => ItemEnum::Function(from_function(m, true, header.unwrap(), tcx)),\n+        TyMethodItem(m) => ItemEnum::Function(from_function(m, false, header.unwrap(), tcx)),\n         ImplItem(i) => ItemEnum::Impl((*i).into_tcx(tcx)),\n         StaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignStaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n@@ -618,6 +618,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n \n pub(crate) fn from_function(\n     function: Box<clean::Function>,\n+    has_body: bool,\n     header: rustc_hir::FnHeader,\n     tcx: TyCtxt<'_>,\n ) -> Function {\n@@ -626,20 +627,6 @@ pub(crate) fn from_function(\n         decl: decl.into_tcx(tcx),\n         generics: generics.into_tcx(tcx),\n         header: from_fn_header(&header),\n-    }\n-}\n-\n-pub(crate) fn from_function_method(\n-    function: Box<clean::Function>,\n-    has_body: bool,\n-    header: rustc_hir::FnHeader,\n-    tcx: TyCtxt<'_>,\n-) -> Method {\n-    let clean::Function { decl, generics } = *function;\n-    Method {\n-        decl: decl.into_tcx(tcx),\n-        generics: generics.into_tcx(tcx),\n-        header: from_fn_header(&header),\n         has_body,\n     }\n }\n@@ -759,14 +746,13 @@ impl FromWithTcx<ItemType> for ItemKind {\n             Struct => ItemKind::Struct,\n             Union => ItemKind::Union,\n             Enum => ItemKind::Enum,\n-            Function => ItemKind::Function,\n+            Function | TyMethod | Method => ItemKind::Function,\n             Typedef => ItemKind::Typedef,\n             OpaqueTy => ItemKind::OpaqueTy,\n             Static => ItemKind::Static,\n             Constant => ItemKind::Constant,\n             Trait => ItemKind::Trait,\n             Impl => ItemKind::Impl,\n-            TyMethod | Method => ItemKind::Method,\n             StructField => ItemKind::StructField,\n             Variant => ItemKind::Variant,\n             Macro => ItemKind::Macro,"}, {"sha": "e4df1332521a782750061c446d6382d8b96f007a", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=8b5bfaf662916deda37254a0eeec78e9b7d1c444", "patch": "@@ -223,15 +223,14 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     false\n                 }\n \n-                types::ItemEnum::Method(_)\n+                types::ItemEnum::Function(_)\n                 | types::ItemEnum::Module(_)\n                 | types::ItemEnum::AssocConst { .. }\n                 | types::ItemEnum::AssocType { .. } => true,\n                 types::ItemEnum::ExternCrate { .. }\n                 | types::ItemEnum::Import(_)\n                 | types::ItemEnum::StructField(_)\n                 | types::ItemEnum::Variant(_)\n-                | types::ItemEnum::Function(_)\n                 | types::ItemEnum::TraitAlias(_)\n                 | types::ItemEnum::Impl(_)\n                 | types::ItemEnum::Typedef(_)"}, {"sha": "50004b1ca1ef8239d6bdf89697f4c5e05a117a6b", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=8b5bfaf662916deda37254a0eeec78e9b7d1c444", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 22;\n+pub const FORMAT_VERSION: u32 = 23;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -210,7 +210,6 @@ pub enum ItemKind {\n     Constant,\n     Trait,\n     TraitAlias,\n-    Method,\n     Impl,\n     Static,\n     ForeignType,\n@@ -243,7 +242,6 @@ pub enum ItemEnum {\n \n     Trait(Trait),\n     TraitAlias(TraitAlias),\n-    Method(Method),\n     Impl(Impl),\n \n     Typedef(Typedef),\n@@ -420,13 +418,6 @@ pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: Header,\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n-pub struct Method {\n-    pub decl: FnDecl,\n-    pub generics: Generics,\n-    pub header: Header,\n     pub has_body: bool,\n }\n "}, {"sha": "fa88b6113a5818cc783a39e3404cd3d947274f4b", "filename": "src/test/rustdoc-json/impls/import_from_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fimport_from_private.rs?ref=8b5bfaf662916deda37254a0eeec78e9b7d1c444", "patch": "@@ -8,7 +8,7 @@ mod bar {\n     pub struct Baz;\n     // @set impl = \"$.index[*][?(@.kind=='impl')].id\"\n     impl Baz {\n-        // @set doit = \"$.index[*][?(@.kind=='method')].id\"\n+        // @set doit = \"$.index[*][?(@.kind=='function')].id\"\n         pub fn doit() {}\n     }\n }"}, {"sha": "225651a997ed4fa1b7107e7ef99e9c1041abc945", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=8b5bfaf662916deda37254a0eeec78e9b7d1c444", "patch": "@@ -17,7 +17,6 @@ pub(crate) enum Kind {\n     Constant,\n     Trait,\n     TraitAlias,\n-    Method,\n     Impl,\n     Static,\n     ForeignType,\n@@ -63,7 +62,6 @@ impl Kind {\n             // Only in traits\n             AssocConst => false,\n             AssocType => false,\n-            Method => false,\n \n             StructField => false, // Only in structs or variants\n             Variant => false,     // Only in enums\n@@ -74,7 +72,7 @@ impl Kind {\n         match self {\n             Kind::AssocConst => true,\n             Kind::AssocType => true,\n-            Kind::Method => true,\n+            Kind::Function => true,\n \n             Kind::Module => false,\n             Kind::ExternCrate => false,\n@@ -84,7 +82,6 @@ impl Kind {\n             Kind::Union => false,\n             Kind::Enum => false,\n             Kind::Variant => false,\n-            Kind::Function => false,\n             Kind::Typedef => false,\n             Kind::OpaqueTy => false,\n             Kind::Constant => false,\n@@ -134,7 +131,6 @@ impl Kind {\n             ItemEnum::Function(_) => Function,\n             ItemEnum::Trait(_) => Trait,\n             ItemEnum::TraitAlias(_) => TraitAlias,\n-            ItemEnum::Method(_) => Method,\n             ItemEnum::Impl(_) => Impl,\n             ItemEnum::Typedef(_) => Typedef,\n             ItemEnum::OpaqueTy(_) => OpaqueTy,\n@@ -164,7 +160,6 @@ impl Kind {\n             ItemKind::Import => Import,\n             ItemKind::Keyword => Keyword,\n             ItemKind::Macro => Macro,\n-            ItemKind::Method => Method,\n             ItemKind::Module => Module,\n             ItemKind::OpaqueTy => OpaqueTy,\n             ItemKind::Primitive => Primitive,"}, {"sha": "5b293a3c4f701fe8986904386e80f06c5a52d4e3", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5bfaf662916deda37254a0eeec78e9b7d1c444/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=8b5bfaf662916deda37254a0eeec78e9b7d1c444", "patch": "@@ -3,9 +3,9 @@ use std::hash::Hash;\n \n use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n-    GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Method, Module, OpaqueTy,\n-    Path, Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type,\n-    TypeBinding, TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n+    GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Module, OpaqueTy, Path,\n+    Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n+    TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n };\n \n use crate::{item_kind::Kind, Error, ErrorKind};\n@@ -67,7 +67,6 @@ impl<'a> Validator<'a> {\n                 ItemEnum::Function(x) => self.check_function(x),\n                 ItemEnum::Trait(x) => self.check_trait(x),\n                 ItemEnum::TraitAlias(x) => self.check_trait_alias(x),\n-                ItemEnum::Method(x) => self.check_method(x),\n                 ItemEnum::Impl(x) => self.check_impl(x),\n                 ItemEnum::Typedef(x) => self.check_typedef(x),\n                 ItemEnum::OpaqueTy(x) => self.check_opaque_ty(x),\n@@ -176,11 +175,6 @@ impl<'a> Validator<'a> {\n         x.params.iter().for_each(|i| self.check_generic_bound(i));\n     }\n \n-    fn check_method(&mut self, x: &'a Method) {\n-        self.check_fn_decl(&x.decl);\n-        self.check_generics(&x.generics);\n-    }\n-\n     fn check_impl(&mut self, x: &'a Impl) {\n         self.check_generics(&x.generics);\n         if let Some(path) = &x.trait_ {"}]}