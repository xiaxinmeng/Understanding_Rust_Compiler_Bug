{"sha": "2b083373e4ac973bad8e3c2b949d6c12991bd623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMDgzMzczZTRhYzk3M2JhZDhlM2MyYjk0OWQ2YzEyOTkxYmQ2MjM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-05-29T21:18:09Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-05-29T21:18:09Z"}, "message": "Fix #6805: add --enable-ccache configure option to prefix compiler invocations with ccache to attempt to reuse common results, e.g. for LLVM (re)builds.", "tree": {"sha": "b19587b06a2847cf174f3311d4ad41a119bf08b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19587b06a2847cf174f3311d4ad41a119bf08b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b083373e4ac973bad8e3c2b949d6c12991bd623", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b083373e4ac973bad8e3c2b949d6c12991bd623", "html_url": "https://github.com/rust-lang/rust/commit/2b083373e4ac973bad8e3c2b949d6c12991bd623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b083373e4ac973bad8e3c2b949d6c12991bd623/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f254d119eab514c91fbd6590fba821ec7a0bfd7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f254d119eab514c91fbd6590fba821ec7a0bfd7f", "html_url": "https://github.com/rust-lang/rust/commit/f254d119eab514c91fbd6590fba821ec7a0bfd7f"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "afab563802e17263a1182418a47cb81acd217d52", "filename": "configure", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2b083373e4ac973bad8e3c2b949d6c12991bd623/configure", "raw_url": "https://github.com/rust-lang/rust/raw/2b083373e4ac973bad8e3c2b949d6c12991bd623/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=2b083373e4ac973bad8e3c2b949d6c12991bd623", "patch": "@@ -376,6 +376,7 @@ opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt manage-submodules 1 \"let the build manage the git submodules\"\n opt mingw-cross 0 \"cross-compile for win32 using mingw\"\n opt clang 0 \"prefer clang to gcc for building the runtime\"\n+opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-patched kernels)\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n@@ -421,6 +422,7 @@ else\n fi\n \n probe CFG_CLANG            clang++\n+probe CFG_CCACHE           ccache\n probe CFG_GCC              gcc\n probe CFG_LD               ld\n probe CFG_VALGRIND         valgrind\n@@ -571,6 +573,16 @@ else\n     CFG_C_COMPILER=\"gcc\"\n fi\n \n+if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n+then\n+    if [ -z \"$CFG_CCACHE\" ]\n+    then\n+        err \"ccache requested but not found\"\n+    fi\n+\n+    CFG_C_COMPILER=\"ccache $CFG_C_COMPILER\"\n+fi\n+\n # a little post-processing of various config values\n \n CFG_PREFIX=${CFG_PREFIX%/}\n@@ -825,20 +837,35 @@ do\n                    --enable-bindings=none --disable-threads \\\n                    --disable-pthreads\"\n \n-        if [ \"$CFG_C_COMPILER\" = \"clang\" ]\n-        then\n+        case \"$CFG_C_COMPILER\" in\n+            (\"ccache clang\")\n+            LLVM_CXX_32=\"ccache clang++ -m32 -Qunused-arguments\"\n+            LLVM_CC_32=\"ccache clang -m32 -Qunused-arguments\"\n+\n+            LLVM_CXX_64=\"ccache clang++ -Qunused-arguments\"\n+            LLVM_CC_64=\"ccache clang -Qunused-arguments\"\n+            ;;\n+            (\"clang\")\n             LLVM_CXX_32=\"clang++ -m32\"\n             LLVM_CC_32=\"clang -m32\"\n \n             LLVM_CXX_64=\"clang++\"\n             LLVM_CC_64=\"clang\"\n-        else\n+            ;;\n+            (\"ccache gcc\")\n+            LLVM_CXX_32=\"ccache g++ -m32\"\n+            LLVM_CC_32=\"ccache gcc -m32\"\n+\n+            LLVM_CXX_64=\"ccache g++\"\n+            LLVM_CC_64=\"ccache gcc\"\n+            ;;\n+            (\"gcc\")\n             LLVM_CXX_32=\"g++ -m32\"\n             LLVM_CC_32=\"gcc -m32\"\n \n             LLVM_CXX_64=\"g++\"\n             LLVM_CC_64=\"gcc\"\n-        fi\n+        esac\n \n         LLVM_CFLAGS_32=\"-m32\"\n         LLVM_CXXFLAGS_32=\"-m32\"\n@@ -935,6 +962,14 @@ then\n     putvar CFG_PAXCTL\n fi\n \n+# Avoid spurious warnings from clang by feeding it original source on\n+# ccache-miss rather than preprocessed input.\n+if [ ! -z \"$CFG_ENABLE_CCACHE\" ] && [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+then\n+    CFG_CCACHE_CPP2=1\n+    putvar CFG_CCACHE_CPP2\n+fi\n+\n if [ ! -z $BAD_PANDOC ]\n then\n     CFG_PANDOC="}, {"sha": "eecdef506926ab828b7567124dcc97e65825efa1", "filename": "mk/platform.mk", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2b083373e4ac973bad8e3c2b949d6c12991bd623/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2b083373e4ac973bad8e3c2b949d6c12991bd623/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=2b083373e4ac973bad8e3c2b949d6c12991bd623", "patch": "@@ -105,10 +105,35 @@ ifeq ($(CFG_C_COMPILER),gcc)\n   ifeq ($(origin CPP),default)\n     CPP=gcc\n   endif\n+else\n+ifeq ($(CFG_C_COMPILER),ccache clang)\n+  # The -Qunused-arguments sidesteps spurious warnings from clang\n+  ifeq ($(origin CC),default)\n+    CC=ccache clang -Qunused-arguments\n+  endif\n+  ifeq ($(origin CXX),default)\n+    CXX=ccache clang++ -Qunused-arguments\n+  endif\n+  ifeq ($(origin CPP),default)\n+    CPP=ccache clang -Qunused-arguments\n+  endif\n+else\n+ifeq ($(CFG_C_COMPILER),ccache gcc)\n+  ifeq ($(origin CC),default)\n+    CC=ccache gcc\n+  endif\n+  ifeq ($(origin CXX),default)\n+    CXX=ccache g++\n+  endif\n+  ifeq ($(origin CPP),default)\n+    CPP=ccache gcc\n+  endif\n else\n   CFG_ERR := $(error please try on a system with gcc or clang)\n endif\n endif\n+endif\n+endif\n \n \n # x86_64-unknown-linux-gnu configuration\n@@ -366,6 +391,10 @@ CFG_LDPATH_x86_64-unknown-freebsd :=\n CFG_RUN_x86_64-unknown-freebsd=$(2)\n CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))\n \n+ifeq ($(CFG_CCACHE_CPP2),1)\n+  CCACHE_CPP2=1\n+  export CCACHE_CPP\n+endif\n \n define CFG_MAKE_TOOLCHAIN\n   CFG_COMPILE_C_$(1) = $$(CC_$(1))  \\"}]}