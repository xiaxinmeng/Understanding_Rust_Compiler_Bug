{"sha": "75b15c68f81094ad6f1da6f29bd42a1197585257", "node_id": "C_kwDOAAsO6NoAKDc1YjE1YzY4ZjgxMDk0YWQ2ZjFkYTZmMjliZDQyYTExOTc1ODUyNTc", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-02-24T19:10:41Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-02-24T19:10:41Z"}, "message": "don't ice when an extern static is too big", "tree": {"sha": "680347d5833b71ea6315139c629900616b453d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680347d5833b71ea6315139c629900616b453d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b15c68f81094ad6f1da6f29bd42a1197585257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b15c68f81094ad6f1da6f29bd42a1197585257", "html_url": "https://github.com/rust-lang/rust/commit/75b15c68f81094ad6f1da6f29bd42a1197585257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b15c68f81094ad6f1da6f29bd42a1197585257/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d127e2040b57157936f5f24e114a8b4c9a505ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d127e2040b57157936f5f24e114a8b4c9a505ef", "html_url": "https://github.com/rust-lang/rust/commit/3d127e2040b57157936f5f24e114a8b4c9a505ef"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "158c3e261b8f16641a06722f69900832e17aec4d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/75b15c68f81094ad6f1da6f29bd42a1197585257/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b15c68f81094ad6f1da6f29bd42a1197585257/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=75b15c68f81094ad6f1da6f29bd42a1197585257", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::layout::MAX_SIMD_LANES;\n+use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, Ty, TyCtxt};\n@@ -415,10 +415,31 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Spa\n     // have UB during initialization if they are uninhabited, but there also seems to be no good\n     // reason to allow any statics to be uninhabited.\n     let ty = tcx.type_of(def_id);\n-    let Ok(layout) = tcx.layout_of(ParamEnv::reveal_all().and(ty)) else {\n+    let layout = match tcx.layout_of(ParamEnv::reveal_all().and(ty)) {\n+        Ok(l) => l,\n+        // Foreign statics that overflow their allowed size should emit an error\n+        Err(LayoutError::SizeOverflow(_))\n+            if {\n+                let node = tcx.hir().get_by_def_id(def_id);\n+                matches!(\n+                    node,\n+                    hir::Node::ForeignItem(hir::ForeignItem {\n+                        kind: hir::ForeignItemKind::Static(..),\n+                        ..\n+                    })\n+                )\n+            } =>\n+        {\n+            tcx.sess\n+                .struct_span_err(span, \"extern static is too large for the current architecture\")\n+                .emit();\n+            return;\n+        }\n         // Generic statics are rejected, but we still reach this case.\n-        tcx.sess.delay_span_bug(span, \"generic static must be rejected\");\n-        return;\n+        Err(e) => {\n+            tcx.sess.delay_span_bug(span, &e.to_string());\n+            return;\n+        }\n     };\n     if layout.abi.is_uninhabited() {\n         tcx.struct_span_lint_hir("}, {"sha": "30a0c445466861415415e9363acf5f6538a09647", "filename": "src/test/ui/extern/extern-static-size-overflow.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/75b15c68f81094ad6f1da6f29bd42a1197585257/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b15c68f81094ad6f1da6f29bd42a1197585257/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs?ref=75b15c68f81094ad6f1da6f29bd42a1197585257", "patch": "@@ -0,0 +1,43 @@\n+#[repr(C)]\n+struct ReallyBig {\n+    _a: [u8; usize::MAX],\n+}\n+\n+// The limit for \"too big for the current architecture\" is dependent on the target pointer size\n+// however it's artifically limited on 64 bits\n+// logic copied from rustc_target::abi::TargetDataLayout::obj_size_bound()\n+const fn max_size() -> usize {\n+    #[cfg(target_pointer_width = \"16\")]\n+    {\n+        1 << 15\n+    }\n+\n+    #[cfg(target_pointer_width = \"32\")]\n+    {\n+        1 << 31\n+    }\n+\n+    #[cfg(target_pointer_width = \"64\")]\n+    {\n+        1 << 47\n+    }\n+\n+    #[cfg(not(any(\n+        target_pointer_width = \"16\",\n+        target_pointer_width = \"32\",\n+        target_pointer_width = \"64\"\n+    )))]\n+    {\n+        isize::MAX as usize\n+    }\n+}\n+\n+extern \"C\" {\n+    static FOO: [u8; 1];\n+    static BAR: [u8; max_size() - 1];\n+    static BAZ: [u8; max_size()]; //~ ERROR extern static is too large\n+    static UWU: [usize; usize::MAX]; //~ ERROR extern static is too large\n+    static A: ReallyBig; //~ ERROR extern static is too large\n+}\n+\n+fn main() {}"}, {"sha": "f5173feec75d490ab1722b14c966a41774ea892c", "filename": "src/test/ui/extern/extern-static-size-overflow.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/75b15c68f81094ad6f1da6f29bd42a1197585257/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75b15c68f81094ad6f1da6f29bd42a1197585257/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr?ref=75b15c68f81094ad6f1da6f29bd42a1197585257", "patch": "@@ -0,0 +1,20 @@\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:38:5\n+   |\n+LL |     static BAZ: [u8; max_size()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:39:5\n+   |\n+LL |     static UWU: [usize; usize::MAX];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:40:5\n+   |\n+LL |     static A: ReallyBig;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}