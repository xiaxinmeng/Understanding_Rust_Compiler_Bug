{"sha": "68d458bb402b873b9ae80423710c2672967479df", "node_id": "C_kwDOAAsO6NoAKDY4ZDQ1OGJiNDAyYjg3M2I5YWU4MDQyMzcxMGMyNjcyOTY3NDc5ZGY", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-06T10:37:54Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:33:33Z"}, "message": "allow mutating the c compilers detected by bootstrap\n\nThis will be needed to create synthetic targets in future commits.", "tree": {"sha": "13450f59f911d5c3b3bb3534460cf3f09ce15f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13450f59f911d5c3b3bb3534460cf3f09ce15f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d458bb402b873b9ae80423710c2672967479df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGyk8ACgkQzXazX3c0\ndp4roQ//W/z3ie/cLS9g/3595JzIridTBjsS+Sn843Es9ZSOUzEU9s7c3Y1HHPZ1\nphh865TGVhSLJrN7NIBmBzco88lnz6kKL2qVW2mVPJGa8dsfnvsEL0PlWPfpZM1M\nrn7o2QATm6qTGDB8AYfJWMSta+A7kvU8n8XKmx9/x8YDkb1fTwroTSvwJyXf7v40\nL1B4oZSIluLK1yAcdOZ+6kL7UUtCvqUN4y6z22ubzwUSLCjj6LWE6DC0rn/n4/no\ncRNmVDKAwKlSPyxWuO66fqUFTbBv+edAmSDokB2RfXq7Rg1JXy/2SFlOaj4N3Wlj\nJxzImwXIiCyhB0VK01n6+pwvf7fJhfElEiNaR0IeiM5vWEtJfLu5Xou0ZohJiVOf\nPPRye6lO/OSGcVE/N2n5lK//16Q23C7gfQstgRUXynqHrAUuxhvVppM6yhqkzeSr\n9Bw0DQxCn2VQmB59f5bVpoVwSp+6UAYPrOBl9wuuz5l3fDY6N7hH9WxyvLx8dgvs\nus5rkPM2DvDiudERHFxNzBpj+jGGAZoA3a6yfvhQqxkvwHc6bzz8IYyLnWYfFRXF\nGD9XAUo0hQCIiKxZ4hHAugj6ZmSCUfXXQFgBGClmtoaGKvCFtD+6TvvyHL/2EYqq\nX/pnMdXnL9YcG6mDkV1PZ4LdekSeBtyHHlKB3B+6wEl3L42NB7I=\n=aDKF\n-----END PGP SIGNATURE-----", "payload": "tree 13450f59f911d5c3b3bb3534460cf3f09ce15f41\nparent 1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686047874 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555213 +0200\n\nallow mutating the c compilers detected by bootstrap\n\nThis will be needed to create synthetic targets in future commits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d458bb402b873b9ae80423710c2672967479df", "html_url": "https://github.com/rust-lang/rust/commit/68d458bb402b873b9ae80423710c2672967479df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d458bb402b873b9ae80423710c2672967479df/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "html_url": "https://github.com/rust-lang/rust/commit/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "fb0d1811f2d79932cb6a68d3f07d56f04f68f282", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -1650,7 +1650,7 @@ impl<'a> Builder<'a> {\n             }\n         };\n         cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n-        if self.cc[&target].args().iter().any(|arg| arg == \"-gz\") {\n+        if self.cc.borrow()[&target].args().iter().any(|arg| arg == \"-gz\") {\n             rustflags.arg(\"-Clink-arg=-gz\");\n         }\n         cargo.env("}, {"sha": "ec06e75ac4ab0a8779307477c173d283c9c302d7", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -89,7 +89,7 @@ fn new_cc_build(build: &Build, target: TargetSelection) -> cc::Build {\n     cfg\n }\n \n-pub fn find(build: &mut Build) {\n+pub fn find(build: &Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n     let targets = build\n@@ -115,7 +115,7 @@ pub fn find(build: &mut Build) {\n             cc2ar(compiler.path(), target)\n         };\n \n-        build.cc.insert(target, compiler.clone());\n+        build.cc.borrow_mut().insert(target, compiler.clone());\n         let cflags = build.cflags(target, GitRepo::Rustc, CLang::C);\n \n         // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n@@ -136,7 +136,7 @@ pub fn find(build: &mut Build) {\n         // for VxWorks, record CXX compiler which will be used in lib.rs:linker()\n         if cxx_configured || target.contains(\"vxworks\") {\n             let compiler = cfg.get_compiler();\n-            build.cxx.insert(target, compiler);\n+            build.cxx.borrow_mut().insert(target, compiler);\n         }\n \n         build.verbose(&format!(\"CC_{} = {:?}\", &target.triple, build.cc(target)));\n@@ -148,11 +148,11 @@ pub fn find(build: &mut Build) {\n         }\n         if let Some(ar) = ar {\n             build.verbose(&format!(\"AR_{} = {:?}\", &target.triple, ar));\n-            build.ar.insert(target, ar);\n+            build.ar.borrow_mut().insert(target, ar);\n         }\n \n         if let Some(ranlib) = config.and_then(|c| c.ranlib.clone()) {\n-            build.ranlib.insert(target, ranlib);\n+            build.ranlib.borrow_mut().insert(target, ranlib);\n         }\n     }\n }"}, {"sha": "12ca6c79b34b9ddd5aa5d84a66ae368da6510d66", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -314,7 +314,7 @@ fn copy_self_contained_objects(\n         }\n     } else if target.ends_with(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n-            let src = compiler_file(builder, builder.cc(target), target, CLang::C, obj);\n+            let src = compiler_file(builder, &builder.cc(target), target, CLang::C, obj);\n             let target = libdir_self_contained.join(obj);\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));\n@@ -995,8 +995,13 @@ fn rustc_llvm_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelect\n         && !target.contains(\"apple\")\n         && !target.contains(\"solaris\")\n     {\n-        let file =\n-            compiler_file(builder, builder.cxx(target).unwrap(), target, CLang::Cxx, \"libstdc++.a\");\n+        let file = compiler_file(\n+            builder,\n+            &builder.cxx(target).unwrap(),\n+            target,\n+            CLang::Cxx,\n+            \"libstdc++.a\",\n+        );\n         cargo.env(\"LLVM_STATIC_STDCPP\", file);\n     }\n     if builder.llvm_link_shared() {"}, {"sha": "b0026aedca15b3ddd16ac9dc950e326d7593753d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -226,10 +226,10 @@ pub struct Build {\n \n     // Runtime state filled in later on\n     // C/C++ compilers and archiver for all targets\n-    cc: HashMap<TargetSelection, cc::Tool>,\n-    cxx: HashMap<TargetSelection, cc::Tool>,\n-    ar: HashMap<TargetSelection, PathBuf>,\n-    ranlib: HashMap<TargetSelection, PathBuf>,\n+    cc: RefCell<HashMap<TargetSelection, cc::Tool>>,\n+    cxx: RefCell<HashMap<TargetSelection, cc::Tool>>,\n+    ar: RefCell<HashMap<TargetSelection, PathBuf>>,\n+    ranlib: RefCell<HashMap<TargetSelection, PathBuf>>,\n     // Miscellaneous\n     // allow bidirectional lookups: both name -> path and path -> name\n     crates: HashMap<Interned<String>, Crate>,\n@@ -451,10 +451,10 @@ impl Build {\n             miri_info,\n             rustfmt_info,\n             in_tree_llvm_info,\n-            cc: HashMap::new(),\n-            cxx: HashMap::new(),\n-            ar: HashMap::new(),\n-            ranlib: HashMap::new(),\n+            cc: RefCell::new(HashMap::new()),\n+            cxx: RefCell::new(HashMap::new()),\n+            ar: RefCell::new(HashMap::new()),\n+            ranlib: RefCell::new(HashMap::new()),\n             crates: HashMap::new(),\n             crate_paths: HashMap::new(),\n             is_sudo,\n@@ -482,7 +482,7 @@ impl Build {\n         }\n \n         build.verbose(\"finding compilers\");\n-        cc_detect::find(&mut build);\n+        cc_detect::find(&build);\n         // When running `setup`, the profile is about to change, so any requirements we have now may\n         // be different on the next invocation. Don't check for them until the next time x.py is\n         // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n@@ -1103,16 +1103,16 @@ impl Build {\n     }\n \n     /// Returns the path to the C compiler for the target specified.\n-    fn cc(&self, target: TargetSelection) -> &Path {\n-        self.cc[&target].path()\n+    fn cc(&self, target: TargetSelection) -> PathBuf {\n+        self.cc.borrow()[&target].path().into()\n     }\n \n     /// Returns a list of flags to pass to the C compiler for the target\n     /// specified.\n     fn cflags(&self, target: TargetSelection, which: GitRepo, c: CLang) -> Vec<String> {\n         let base = match c {\n-            CLang::C => &self.cc[&target],\n-            CLang::Cxx => &self.cxx[&target],\n+            CLang::C => self.cc.borrow()[&target].clone(),\n+            CLang::Cxx => self.cxx.borrow()[&target].clone(),\n         };\n \n         // Filter out -O and /O (the optimization flags) that we picked up from\n@@ -1153,41 +1153,41 @@ impl Build {\n     }\n \n     /// Returns the path to the `ar` archive utility for the target specified.\n-    fn ar(&self, target: TargetSelection) -> Option<&Path> {\n-        self.ar.get(&target).map(|p| &**p)\n+    fn ar(&self, target: TargetSelection) -> Option<PathBuf> {\n+        self.ar.borrow().get(&target).cloned()\n     }\n \n     /// Returns the path to the `ranlib` utility for the target specified.\n-    fn ranlib(&self, target: TargetSelection) -> Option<&Path> {\n-        self.ranlib.get(&target).map(|p| &**p)\n+    fn ranlib(&self, target: TargetSelection) -> Option<PathBuf> {\n+        self.ranlib.borrow().get(&target).cloned()\n     }\n \n     /// Returns the path to the C++ compiler for the target specified.\n-    fn cxx(&self, target: TargetSelection) -> Result<&Path, String> {\n-        match self.cxx.get(&target) {\n-            Some(p) => Ok(p.path()),\n+    fn cxx(&self, target: TargetSelection) -> Result<PathBuf, String> {\n+        match self.cxx.borrow().get(&target) {\n+            Some(p) => Ok(p.path().into()),\n             None => {\n                 Err(format!(\"target `{}` is not configured as a host, only as a target\", target))\n             }\n         }\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n-    fn linker(&self, target: TargetSelection) -> Option<&Path> {\n-        if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n+    fn linker(&self, target: TargetSelection) -> Option<PathBuf> {\n+        if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.clone())\n         {\n             Some(linker)\n         } else if target.contains(\"vxworks\") {\n             // need to use CXX compiler as linker to resolve the exception functions\n             // that are only existed in CXX libraries\n-            Some(self.cxx[&target].path())\n+            Some(self.cxx.borrow()[&target].path().into())\n         } else if target != self.config.build\n             && util::use_host_linker(target)\n             && !target.contains(\"msvc\")\n         {\n             Some(self.cc(target))\n         } else if self.config.use_lld && !self.is_fuse_ld_lld(target) && self.build == target {\n-            Some(&self.initial_lld)\n+            Some(self.initial_lld.clone())\n         } else {\n             None\n         }"}, {"sha": "4752b1f7ea1e405e6c74b27ddd7fb96f8c4623b0", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -605,7 +605,7 @@ fn configure_cmake(\n     }\n \n     let (cc, cxx) = match builder.config.llvm_clang_cl {\n-        Some(ref cl) => (cl.as_ref(), cl.as_ref()),\n+        Some(ref cl) => (cl.into(), cl.into()),\n         None => (builder.cc(target), builder.cxx(target).unwrap()),\n     };\n \n@@ -656,9 +656,9 @@ fn configure_cmake(\n                     .define(\"CMAKE_CXX_COMPILER_LAUNCHER\", ccache);\n             }\n         }\n-        cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n-            .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx))\n-            .define(\"CMAKE_ASM_COMPILER\", sanitize_cc(cc));\n+        cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n+            .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cxx))\n+            .define(\"CMAKE_ASM_COMPILER\", sanitize_cc(&cc));\n     }\n \n     cfg.build_arg(\"-j\").build_arg(builder.jobs().to_string());\n@@ -698,15 +698,15 @@ fn configure_cmake(\n         if ar.is_absolute() {\n             // LLVM build breaks if `CMAKE_AR` is a relative path, for some reason it\n             // tries to resolve this path in the LLVM build directory.\n-            cfg.define(\"CMAKE_AR\", sanitize_cc(ar));\n+            cfg.define(\"CMAKE_AR\", sanitize_cc(&ar));\n         }\n     }\n \n     if let Some(ranlib) = builder.ranlib(target) {\n         if ranlib.is_absolute() {\n             // LLVM build breaks if `CMAKE_RANLIB` is a relative path, for some reason it\n             // tries to resolve this path in the LLVM build directory.\n-            cfg.define(\"CMAKE_RANLIB\", sanitize_cc(ranlib));\n+            cfg.define(\"CMAKE_RANLIB\", sanitize_cc(&ranlib));\n         }\n     }\n "}, {"sha": "c04567f92b270b1b1a8d4f3ee741ed7fc89426b0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -1698,7 +1698,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         // Note that if we encounter `PATH` we make sure to append to our own `PATH`\n         // rather than stomp over it.\n         if target.contains(\"msvc\") {\n-            for &(ref k, ref v) in builder.cc[&target].env() {\n+            for &(ref k, ref v) in builder.cc.borrow()[&target].env() {\n                 if k != \"PATH\" {\n                     cmd.env(k, v);\n                 }"}, {"sha": "96341b69df046bd29a8b27ebac9b5d702942349d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d458bb402b873b9ae80423710c2672967479df/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=68d458bb402b873b9ae80423710c2672967479df", "patch": "@@ -855,7 +855,7 @@ impl<'a> Builder<'a> {\n         if compiler.host.contains(\"msvc\") {\n             let curpaths = env::var_os(\"PATH\").unwrap_or_default();\n             let curpaths = env::split_paths(&curpaths).collect::<Vec<_>>();\n-            for &(ref k, ref v) in self.cc[&compiler.host].env() {\n+            for &(ref k, ref v) in self.cc.borrow()[&compiler.host].env() {\n                 if k != \"PATH\" {\n                     continue;\n                 }"}]}