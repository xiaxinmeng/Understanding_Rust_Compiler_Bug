{"sha": "23404287fcb0fd63093d7ef98e6e2bf844b37287", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDA0Mjg3ZmNiMGZkNjMwOTNkN2VmOThlNmUyYmY4NDRiMzcyODc=", "commit": {"author": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2018-06-08T16:12:01Z"}, "committer": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2018-06-12T13:04:44Z"}, "message": "Implement lint checking for `unwrap`s that will always panic.", "tree": {"sha": "0b61979b6223366f729d66b12f299def18bb0a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b61979b6223366f729d66b12f299def18bb0a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23404287fcb0fd63093d7ef98e6e2bf844b37287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23404287fcb0fd63093d7ef98e6e2bf844b37287", "html_url": "https://github.com/rust-lang/rust/commit/23404287fcb0fd63093d7ef98e6e2bf844b37287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23404287fcb0fd63093d7ef98e6e2bf844b37287/comments", "author": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0edba6e991973dc67fc1e2ff51200c695c57fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0edba6e991973dc67fc1e2ff51200c695c57fd", "html_url": "https://github.com/rust-lang/rust/commit/8f0edba6e991973dc67fc1e2ff51200c695c57fd"}], "stats": {"total": 384, "additions": 297, "deletions": 87}, "files": [{"sha": "8c11f027db61b49d593a39881b5bced9a70562d6", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/23404287fcb0fd63093d7ef98e6e2bf844b37287/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23404287fcb0fd63093d7ef98e6e2bf844b37287/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=23404287fcb0fd63093d7ef98e6e2bf844b37287", "patch": "@@ -32,6 +32,27 @@ declare_clippy_lint! {\n     \"checks for calls of unwrap[_err]() that cannot fail\"\n }\n \n+/// **What it does:** Checks for calls of unwrap[_err]() that will always fail.\n+///\n+/// **Why is this bad?** If panicking is desired, an explicit `panic!()` should be used.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// if option.is_none() {\n+///     do_something_with(option.unwrap())\n+/// }\n+/// ```\n+///\n+/// This code will always panic. The if condition should probably be inverted.\n+/// ```\n+declare_clippy_lint! {\n+    pub PANICKING_UNWRAP,\n+    nursery,\n+    \"checks for calls of unwrap[_err]() that will always fail\"\n+}\n+\n pub struct Pass;\n \n /// Visitor that keeps track of which variables are unwrappable.\n@@ -124,17 +145,28 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                 if [\"unwrap\", \"unwrap_err\"].contains(&&*method_name.name.as_str());\n                 let call_to_unwrap = method_name.name == \"unwrap\";\n                 if let Some(unwrappable) = self.unwrappables.iter()\n-                    .find(|u| u.ident.def == path.def && call_to_unwrap == u.safe_to_unwrap);\n+                    .find(|u| u.ident.def == path.def);\n                 then {\n-                    span_lint_and_then(\n-                        self.cx,\n-                        UNNECESSARY_UNWRAP,\n-                        expr.span,\n-                        &format!(\"You checked before that `{}()` cannot fail. \\\n-                        Instead of checking and unwrapping, it's better to use `if let` or `match`.\",\n-                        method_name.name),\n-                        |db| { db.span_label(unwrappable.check.span, \"the check is happening here\"); },\n-                    );\n+                    if call_to_unwrap == unwrappable.safe_to_unwrap {\n+                        span_lint_and_then(\n+                            self.cx,\n+                            UNNECESSARY_UNWRAP,\n+                            expr.span,\n+                            &format!(\"You checked before that `{}()` cannot fail. \\\n+                            Instead of checking and unwrapping, it's better to use `if let` or `match`.\",\n+                            method_name.name),\n+                            |db| { db.span_label(unwrappable.check.span, \"the check is happening here\"); },\n+                        );\n+                    } else {\n+                        span_lint_and_then(\n+                            self.cx,\n+                            UNNECESSARY_UNWRAP,\n+                            expr.span,\n+                            &format!(\"This call to `{}()` will always panic.\",\n+                            method_name.name),\n+                            |db| { db.span_label(unwrappable.check.span, \"because of this check\"); },\n+                        );\n+                    }\n                 }\n             }\n             walk_expr(self, expr);"}, {"sha": "893e2db04335e853676ff6f298f27c981c291145", "filename": "tests/ui/checked_unwrap.rs", "status": "modified", "additions": 49, "deletions": 23, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/23404287fcb0fd63093d7ef98e6e2bf844b37287/tests%2Fui%2Fchecked_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23404287fcb0fd63093d7ef98e6e2bf844b37287/tests%2Fui%2Fchecked_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.rs?ref=23404287fcb0fd63093d7ef98e6e2bf844b37287", "patch": "@@ -1,75 +1,101 @@\n #![deny(unnecessary_unwrap)]\n+#![allow(if_same_then_else)]\n \n fn main() {\n     let x = Some(());\n     if x.is_some() {\n-        x.unwrap();\n+        x.unwrap(); // unnecessary\n+    } else {\n+        x.unwrap(); // will panic\n     }\n     if x.is_none() {\n-        // nothing to do here\n+        x.unwrap(); // will panic\n     } else {\n-        x.unwrap();\n+        x.unwrap(); // unnecessary\n     }\n     let mut x: Result<(), ()> = Ok(());\n     if x.is_ok() {\n-        x.unwrap();\n+        x.unwrap(); // unnecessary\n+        x.unwrap_err(); // will panic\n     } else {\n-        x.unwrap_err();\n+        x.unwrap(); // will panic\n+        x.unwrap_err(); // unnecessary\n     }\n     if x.is_err() {\n-        x.unwrap_err();\n+        x.unwrap(); // will panic\n+        x.unwrap_err(); // unnecessary\n     } else {\n-        x.unwrap();\n+        x.unwrap(); // unnecessary\n+        x.unwrap_err(); // will panic\n     }\n     if x.is_ok() {\n         x = Err(());\n-        x.unwrap();\n+        x.unwrap(); // not unnecessary because of mutation of x\n+        // it will always panic but the lint is not smart enoguh to see this (it only checks if conditions).\n     } else {\n         x = Ok(());\n-        x.unwrap_err();\n+        x.unwrap_err(); // not unnecessary because of mutation of x\n+        // it will always panic but the lint is not smart enoguh to see this (it only checks if conditions).\n     }\n }\n \n fn test_complex_conditions() {\n     let x: Result<(), ()> = Ok(());\n     let y: Result<(), ()> = Ok(());\n     if x.is_ok() && y.is_err() {\n-        x.unwrap();\n-        y.unwrap_err();\n+        x.unwrap(); // unnecessary\n+        x.unwrap_err(); // will panic\n+        y.unwrap(); // will panic\n+        y.unwrap_err(); // unnecessary\n     } else {\n-        // not clear whether unwrappable:\n+        // not statically determinable whether any of the following will always succeed or always fail:\n+        x.unwrap();\n         x.unwrap_err();\n         y.unwrap();\n+        y.unwrap_err();\n     }\n \n     if x.is_ok() || y.is_ok() {\n-        // not clear whether unwrappable:\n+        // not statically determinable whether any of the following will always succeed or always fail:\n         x.unwrap();\n         y.unwrap();\n     } else {\n-        x.unwrap_err();\n-        y.unwrap_err();\n+        x.unwrap(); // will panic\n+        x.unwrap_err(); // unnecessary\n+        y.unwrap(); // will panic\n+        y.unwrap_err(); // unnecessary\n     }\n     let z: Result<(), ()> = Ok(());\n     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n-        x.unwrap();\n-        y.unwrap_err();\n-        z.unwrap();\n+        x.unwrap(); // unnecessary\n+        x.unwrap_err(); // will panic\n+        y.unwrap(); // will panic\n+        y.unwrap_err(); // unnecessary\n+        z.unwrap(); // unnecessary\n+        z.unwrap_err(); // will panic\n     }\n     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n-        // not clear what's unwrappable\n-    } else {\n-        x.unwrap_err();\n+        // not statically determinable whether any of the following will always succeed or always fail:\n+        x.unwrap();\n         y.unwrap();\n-        z.unwrap_err();\n+        z.unwrap();\n+    } else {\n+        x.unwrap(); // will panic\n+        x.unwrap_err(); // unnecessary\n+        y.unwrap(); // unnecessary\n+        y.unwrap_err(); // will panic\n+        z.unwrap(); // will panic\n+        z.unwrap_err(); // unnecessary\n     }\n }\n \n fn test_nested() {\n     fn nested() {\n         let x = Some(());\n         if x.is_some() {\n-            x.unwrap();\n+            x.unwrap(); // unnecessary\n+        } else {\n+            x.unwrap(); // will panic\n         }\n     }\n }"}, {"sha": "28e0df8920a676206cb3f5caac6136964e927c7f", "filename": "tests/ui/checked_unwrap.stderr", "status": "modified", "additions": 206, "deletions": 54, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/23404287fcb0fd63093d7ef98e6e2bf844b37287/tests%2Fui%2Fchecked_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23404287fcb0fd63093d7ef98e6e2bf844b37287/tests%2Fui%2Fchecked_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.stderr?ref=23404287fcb0fd63093d7ef98e6e2bf844b37287", "patch": "@@ -1,9 +1,9 @@\n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n- --> $DIR/checked_unwrap.rs:6:9\n+ --> $DIR/checked_unwrap.rs:7:9\n   |\n-5 |     if x.is_some() {\n+6 |     if x.is_some() {\n   |        ----------- the check is happening here\n-6 |         x.unwrap();\n+7 |         x.unwrap(); // unnecessary\n   |         ^^^^^^^^^^\n   |\n note: lint level defined here\n@@ -12,144 +12,296 @@ note: lint level defined here\n 1 | #![deny(unnecessary_unwrap)]\n   |         ^^^^^^^^^^^^^^^^^^\n \n+error: This call to `unwrap()` will always panic.\n+ --> $DIR/checked_unwrap.rs:9:9\n+  |\n+6 |     if x.is_some() {\n+  |        ----------- because of this check\n+...\n+9 |         x.unwrap(); // will panic\n+  |         ^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:12:9\n+   |\n+11 |     if x.is_none() {\n+   |        ----------- because of this check\n+12 |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:11:9\n+  --> $DIR/checked_unwrap.rs:14:9\n    |\n-8  |     if x.is_none() {\n+11 |     if x.is_none() {\n    |        ----------- the check is happening here\n ...\n-11 |         x.unwrap();\n+14 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:15:9\n+  --> $DIR/checked_unwrap.rs:18:9\n    |\n-14 |     if x.is_ok() {\n+17 |     if x.is_ok() {\n    |        --------- the check is happening here\n-15 |         x.unwrap();\n+18 |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/checked_unwrap.rs:19:9\n+   |\n+17 |     if x.is_ok() {\n+   |        --------- because of this check\n+18 |         x.unwrap(); // unnecessary\n+19 |         x.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:21:9\n+   |\n+17 |     if x.is_ok() {\n+   |        --------- because of this check\n+...\n+21 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:17:9\n+  --> $DIR/checked_unwrap.rs:22:9\n    |\n-14 |     if x.is_ok() {\n+17 |     if x.is_ok() {\n    |        --------- the check is happening here\n ...\n-17 |         x.unwrap_err();\n+22 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:25:9\n+   |\n+24 |     if x.is_err() {\n+   |        ---------- because of this check\n+25 |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:20:9\n+  --> $DIR/checked_unwrap.rs:26:9\n    |\n-19 |     if x.is_err() {\n+24 |     if x.is_err() {\n    |        ---------- the check is happening here\n-20 |         x.unwrap_err();\n+25 |         x.unwrap(); // will panic\n+26 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:22:9\n+  --> $DIR/checked_unwrap.rs:28:9\n    |\n-19 |     if x.is_err() {\n+24 |     if x.is_err() {\n    |        ---------- the check is happening here\n ...\n-22 |         x.unwrap();\n+28 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/checked_unwrap.rs:29:9\n+   |\n+24 |     if x.is_err() {\n+   |        ---------- because of this check\n+...\n+29 |         x.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:37:9\n+  --> $DIR/checked_unwrap.rs:46:9\n    |\n-36 |     if x.is_ok() && y.is_err() {\n+45 |     if x.is_ok() && y.is_err() {\n    |        --------- the check is happening here\n-37 |         x.unwrap();\n+46 |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/checked_unwrap.rs:47:9\n+   |\n+45 |     if x.is_ok() && y.is_err() {\n+   |        --------- because of this check\n+46 |         x.unwrap(); // unnecessary\n+47 |         x.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:48:9\n+   |\n+45 |     if x.is_ok() && y.is_err() {\n+   |                     ---------- because of this check\n+...\n+48 |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:38:9\n+  --> $DIR/checked_unwrap.rs:49:9\n    |\n-36 |     if x.is_ok() && y.is_err() {\n+45 |     if x.is_ok() && y.is_err() {\n    |                     ---------- the check is happening here\n-37 |         x.unwrap();\n-38 |         y.unwrap_err();\n+...\n+49 |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:63:9\n+   |\n+58 |     if x.is_ok() || y.is_ok() {\n+   |        --------- because of this check\n+...\n+63 |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:50:9\n+  --> $DIR/checked_unwrap.rs:64:9\n    |\n-45 |     if x.is_ok() || y.is_ok() {\n+58 |     if x.is_ok() || y.is_ok() {\n    |        --------- the check is happening here\n ...\n-50 |         x.unwrap_err();\n+64 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:65:9\n+   |\n+58 |     if x.is_ok() || y.is_ok() {\n+   |                     --------- because of this check\n+...\n+65 |         y.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:51:9\n+  --> $DIR/checked_unwrap.rs:66:9\n    |\n-45 |     if x.is_ok() || y.is_ok() {\n+58 |     if x.is_ok() || y.is_ok() {\n    |                     --------- the check is happening here\n ...\n-51 |         y.unwrap_err();\n+66 |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:55:9\n+  --> $DIR/checked_unwrap.rs:70:9\n    |\n-54 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- the check is happening here\n-55 |         x.unwrap();\n+70 |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/checked_unwrap.rs:71:9\n+   |\n+69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+   |        --------- because of this check\n+70 |         x.unwrap(); // unnecessary\n+71 |         x.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:72:9\n+   |\n+69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+   |                       --------- because of this check\n+...\n+72 |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:56:9\n+  --> $DIR/checked_unwrap.rs:73:9\n    |\n-54 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                       --------- the check is happening here\n-55 |         x.unwrap();\n-56 |         y.unwrap_err();\n+...\n+73 |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:57:9\n+  --> $DIR/checked_unwrap.rs:74:9\n    |\n-54 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                                    ---------- the check is happening here\n ...\n-57 |         z.unwrap();\n+74 |         z.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/checked_unwrap.rs:75:9\n+   |\n+69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+   |                                    ---------- because of this check\n+...\n+75 |         z.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:83:9\n+   |\n+77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+   |        --------- because of this check\n+...\n+83 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:62:9\n+  --> $DIR/checked_unwrap.rs:84:9\n    |\n-59 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |        --------- the check is happening here\n ...\n-62 |         x.unwrap_err();\n+84 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:63:9\n+  --> $DIR/checked_unwrap.rs:85:9\n    |\n-59 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                       --------- the check is happening here\n ...\n-63 |         y.unwrap();\n+85 |         y.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/checked_unwrap.rs:86:9\n+   |\n+77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+   |                       --------- because of this check\n+...\n+86 |         y.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:87:9\n+   |\n+77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+   |                                    ---------- because of this check\n+...\n+87 |         z.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:64:9\n+  --> $DIR/checked_unwrap.rs:88:9\n    |\n-59 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                                    ---------- the check is happening here\n ...\n-64 |         z.unwrap_err();\n+88 |         z.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:72:13\n+  --> $DIR/checked_unwrap.rs:96:13\n    |\n-71 |         if x.is_some() {\n+95 |         if x.is_some() {\n    |            ----------- the check is happening here\n-72 |             x.unwrap();\n+96 |             x.unwrap(); // unnecessary\n+   |             ^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/checked_unwrap.rs:98:13\n+   |\n+95 |         if x.is_some() {\n+   |            ----------- because of this check\n+...\n+98 |             x.unwrap(); // will panic\n    |             ^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 34 previous errors\n "}]}