{"sha": "60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzJlOWEzMjlmM2UxMGZiODc5MjdhN2FmNDM5M2ZmYTljM2FhMWU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-07-21T01:28:37Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-08-02T22:57:24Z"}, "message": "Fix tidy", "tree": {"sha": "c19b5427dc636d4e0eb56f910f699c4b8038b01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c19b5427dc636d4e0eb56f910f699c4b8038b01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e", "html_url": "https://github.com/rust-lang/rust/commit/60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ab37e2dcd85ec42f5b90495340322a16c09102", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ab37e2dcd85ec42f5b90495340322a16c09102", "html_url": "https://github.com/rust-lang/rust/commit/97ab37e2dcd85ec42f5b90495340322a16c09102"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "ee00673dccdcba2141f8e486951a86f046a77538", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=60c2e9a329f3e10fb87927a7af4393ffa9c3aa1e", "patch": "@@ -93,7 +93,8 @@ impl CategoryData {\n             ($name:tt, $rustic_name:ident) => {\n                 let (hits, total) = self.query_counts.$rustic_name;\n                 let (hits, total) = if total > 0 {\n-                    (format!(\"{:.2}\", (((hits as f32) / (total as f32)) * 100.0)), total.to_string())\n+                    (format!(\"{:.2}\",\n+                     (((hits as f32) / (total as f32)) * 100.0)), total.to_string())\n                 } else {\n                     (\"\".into(), \"\".into())\n                 };\n@@ -109,8 +110,10 @@ impl CategoryData {\n             };\n         }\n \n-        writeln!(lock, \"| Phase            | Time (ms)      | Queries        | Hits (%) |\").unwrap();\n-        writeln!(lock, \"| ---------------- | -------------- | -------------- | -------- |\").unwrap();\n+        writeln!(lock, \"| Phase            | Time (ms)      | Queries        | Hits (%) |\")\n+            .unwrap();\n+        writeln!(lock, \"| ---------------- | -------------- | -------------- | -------- |\")\n+            .unwrap();\n \n         p!(\"Parsing\", parsing);\n         p!(\"Expansion\", expansion);\n@@ -126,7 +129,9 @@ impl CategoryData {\n             ($category:tt, $rustic_name:ident) => {{\n                 let (hits, total) = self.query_counts.$rustic_name;\n \n-                format!(\"{{ \\\"category\\\": {}, \\\"time_ms\\\": {}, \\\"query_count\\\": {}, \\\"query_hits\\\": {} }}\",\n+                format!(\n+                    \"{{ \\\"category\\\": {}, \\\"time_ms\\\": {},\n+                        \\\"query_count\\\": {}, \\\"query_hits\\\": {} }}\",\n                     stringify!($category),\n                     self.times.$rustic_name / 1_000_000,\n                     total,\n@@ -209,9 +214,9 @@ impl SelfProfiler {\n     pub fn end_activity(&mut self, category: ProfileCategory) {\n         match self.timer_stack.pop() {\n             None => bug!(\"end_activity() was called but there was no running activity\"),\n-            Some(c) => \n+            Some(c) =>\n                 assert!(\n-                    c == category, \n+                    c == category,\n                     \"end_activity() was called but a different activity was running\"),\n         }\n \n@@ -223,7 +228,8 @@ impl SelfProfiler {\n             }\n         }\n \n-        //the new timer is different than the previous, so record the elapsed time and start a new timer\n+        //the new timer is different than the previous,\n+        //so record the elapsed time and start a new timer\n         let elapsed = self.stop_timer();\n         let new_time = self.data.times.get(category) + elapsed;\n         self.data.times.set(category, new_time);\n@@ -240,12 +246,18 @@ impl SelfProfiler {\n     pub fn print_results(&mut self, opts: &Options) {\n         self.end_activity(ProfileCategory::Other);\n \n-        assert!(self.timer_stack.is_empty(), \"there were timers running when print_results() was called\");\n+        assert!(\n+            self.timer_stack.is_empty(),\n+            \"there were timers running when print_results() was called\");\n \n         let out = io::stdout();\n         let mut lock = out.lock();\n \n-        let crate_name = opts.crate_name.as_ref().map(|n| format!(\" for {}\", n)).unwrap_or_default();\n+        let crate_name =\n+            opts.crate_name\n+            .as_ref()\n+            .map(|n| format!(\" for {}\", n))\n+            .unwrap_or_default();\n \n         writeln!(lock, \"Self profiling results{}:\", crate_name).unwrap();\n         writeln!(lock).unwrap();\n@@ -261,9 +273,10 @@ impl SelfProfiler {\n \n     pub fn save_results(&self, opts: &Options) {\n         let category_data = self.data.json();\n-        let compilation_options = format!(\"{{ \\\"optimization_level\\\": \\\"{:?}\\\", \\\"incremental\\\": {} }}\",\n-                                    opts.optimize,\n-                                    if opts.incremental.is_some() { \"true\" } else { \"false\" });\n+        let compilation_options =\n+            format!(\"{{ \\\"optimization_level\\\": \\\"{:?}\\\", \\\"incremental\\\": {} }}\",\n+                    opts.optimize,\n+                    if opts.incremental.is_some() { \"true\" } else { \"false\" });\n \n         let json = format!(\"{{ \\\"category_data\\\": {}, \\\"compilation_options\\\": {} }}\",\n                         category_data,"}]}