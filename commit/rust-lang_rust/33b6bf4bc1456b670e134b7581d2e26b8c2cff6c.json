{"sha": "33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjZiZjRiYzE0NTZiNjcwZTEzNGI3NTgxZDJlMjZiOGMyY2ZmNmM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T12:53:57Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T13:18:51Z"}, "message": "std::vec: remove aliasing &mut [] and &[] from shift_opt.\n\nAlso, dramatically simplify it with some tasteful raw pointers, rather\nthan treating everything as a nail with `transmute`.", "tree": {"sha": "a8be46d876833a48d737e9850f9f3f81c098d6e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8be46d876833a48d737e9850f9f3f81c098d6e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "html_url": "https://github.com/rust-lang/rust/commit/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b0e0adbbb9f41f79592822ffe1e5834222a96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b0e0adbbb9f41f79592822ffe1e5834222a96b", "html_url": "https://github.com/rust-lang/rust/commit/e7b0e0adbbb9f41f79592822ffe1e5834222a96b"}], "stats": {"total": 70, "additions": 27, "deletions": 43}, "files": [{"sha": "404cc66a2d267e5854f872d8fb8e878640830785", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 27, "deletions": 43, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "patch": "@@ -1621,54 +1621,38 @@ impl<T> OwnedVector<T> for ~[T] {\n     }\n \n     fn shift_opt(&mut self) -> Option<T> {\n-        unsafe {\n-            let ln = match self.len() {\n-                0 => return None,\n-                1 => return self.pop_opt(),\n-                2 =>  {\n-                    let last = self.pop();\n-                    let first = self.pop_opt();\n-                    self.push(last);\n-                    return first;\n-                }\n-                x => x\n-            };\n-\n-            let next_ln = self.len() - 1;\n-\n-            // Save the last element. We're going to overwrite its position\n-            let work_elt = self.pop();\n-            // We still should have room to work where what last element was\n-            assert!(self.capacity() >= ln);\n-            // Pretend like we have the original length so we can use\n-            // the vector copy_memory to overwrite the hole we just made\n-            self.set_len(ln);\n-\n-            // Memcopy the head element (the one we want) to the location we just\n-            // popped. For the moment it unsafely exists at both the head and last\n-            // positions\n-            {\n-                let first_slice = self.slice(0, 1);\n-                let last_slice = self.slice(next_ln, ln);\n-                raw::copy_memory(cast::transmute(last_slice), first_slice);\n+        match self.len() {\n+            0 => None,\n+            1 => self.pop_opt(),\n+            2 => {\n+                let last = self.pop();\n+                let first = self.pop_opt();\n+                self.push(last);\n+                first\n             }\n+            len => {\n+                unsafe {\n+                    let next_len = len - 1;\n \n-            // Memcopy everything to the left one element\n-            {\n-                let init_slice = self.slice(0, next_ln);\n-                let tail_slice = self.slice(1, ln);\n-                raw::copy_memory(cast::transmute(init_slice),\n-                                 tail_slice);\n-            }\n+                    let ptr = self.as_ptr();\n+\n+                    // copy out the head element, for the moment it exists\n+                    // unsafely on the stack and as the first element of the\n+                    // vector.\n+                    let head = ptr::read_ptr(ptr);\n \n-            // Set the new length. Now the vector is back to normal\n-            self.set_len(next_ln);\n+                    // Memcpy everything to the left one element (leaving the\n+                    // last element unsafely in two consecutive memory\n+                    // locations)\n+                    ptr::copy_memory(self.as_mut_ptr(), ptr.offset(1), next_len);\n \n-            // Swap out the element we want from the end\n-            let vp = self.as_mut_ptr();\n-            let vp = ptr::mut_offset(vp, (next_ln - 1) as int);\n+                    // set the new length, which means the second instance of\n+                    // the last element is forgotten.\n+                    self.set_len(next_len);\n \n-            Some(ptr::replace_ptr(vp, work_elt))\n+                    Some(head)\n+                }\n+            }\n         }\n     }\n "}]}