{"sha": "ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "node_id": "C_kwDOAAsO6NoAKGVhMTMxYmNhMTcxNDRkMDE0MzRjYzVlYzVkMTJjYjAzYmM2OWRiY2I", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T05:12:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T05:12:45Z"}, "message": "Rollup merge of #95961 - RalfJung:gather-scatter, r=workingjubilee\n\nimplement SIMD gather/scatter via vector getelementptr\n\nFixes https://github.com/rust-lang/portable-simd/issues/271\n\nHowever, I don't *really* know what I am doing here... Cc ``@workingjubilee`` ``@calebzulawski``\n\nI didn't do anything for cranelift -- ``@bjorn3`` not sure if it's okay for that backend to temporarily break. I'm happy to cherry-pick a patch that adds cranelift support. :)", "tree": {"sha": "8fd0fa3a57a8e0b9593c62d8abfe338ce76d5c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd0fa3a57a8e0b9593c62d8abfe338ce76d5c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWlBNCRBK7hj4Ov3rIwAAzN0IAFkdHTP+KZq78TiicYH0/R1a\n8U+oMhDmrjsP28KWb6dsmBEs5HLTlH6xio7xQICDj29rQiNX9irzbyaqFmyG0uDZ\nPLPQIpapRwb2Ym40yyAiWym/5lxUpeO/m+U6DcFqyQnPbDisDKHcoQNHMLh3JiO1\nr2v2c1+uKq1PKXMBT8/Zyl+8g+xmxNOvXw/7cDeD8tU+EAFdJJ+taE4ZYoQ/bsSH\na7D2wErSAaAl0dOJzthDA4xCkmYNy2+VJzauQG8EnoSeXsaKa0HYLqJtCwhIE+HC\nhTDojUfOzjWQGB9DeUB5SqJUFo2sH9VX5gI4aRFAz5BPVhki3dT+MS7eBPF3tLI=\n=0pS1\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fd0fa3a57a8e0b9593c62d8abfe338ce76d5c10\nparent 946d76ec0e3d965bf9a8d3524434abf27db7ecd6\nparent 73f9571d4f45fb56a2076d2c43d21ff618c396d2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650085965 +0200\ncommitter GitHub <noreply@github.com> 1650085965 +0200\n\nRollup merge of #95961 - RalfJung:gather-scatter, r=workingjubilee\n\nimplement SIMD gather/scatter via vector getelementptr\n\nFixes https://github.com/rust-lang/portable-simd/issues/271\n\nHowever, I don't *really* know what I am doing here... Cc ``@workingjubilee`` ``@calebzulawski``\n\nI didn't do anything for cranelift -- ``@bjorn3`` not sure if it's okay for that backend to temporarily break. I'm happy to cherry-pick a patch that adds cranelift support. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "html_url": "https://github.com/rust-lang/rust/commit/ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946d76ec0e3d965bf9a8d3524434abf27db7ecd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/946d76ec0e3d965bf9a8d3524434abf27db7ecd6", "html_url": "https://github.com/rust-lang/rust/commit/946d76ec0e3d965bf9a8d3524434abf27db7ecd6"}, {"sha": "73f9571d4f45fb56a2076d2c43d21ff618c396d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f9571d4f45fb56a2076d2c43d21ff618c396d2", "html_url": "https://github.com/rust-lang/rust/commit/73f9571d4f45fb56a2076d2c43d21ff618c396d2"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "cf9cf1b70aaa7b4f672cc973b13554fe3f84ba0d", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "patch": "@@ -1839,6 +1839,27 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         simd_neg: Int => neg, Float => fneg;\n     }\n \n+    if name == sym::simd_arith_offset {\n+        // This also checks that the first operand is a ptr type.\n+        let pointee = in_elem.builtin_deref(true).unwrap_or_else(|| {\n+            span_bug!(span, \"must be called with a vector of pointer types as first argument\")\n+        });\n+        let layout = bx.layout_of(pointee.ty);\n+        let ptrs = args[0].immediate();\n+        // The second argument must be a ptr-sized integer.\n+        // (We don't care about the signedness, this is wrapping anyway.)\n+        let (_offsets_len, offsets_elem) = arg_tys[1].simd_size_and_type(bx.tcx());\n+        if !matches!(offsets_elem.kind(), ty::Int(ty::IntTy::Isize) | ty::Uint(ty::UintTy::Usize)) {\n+            span_bug!(\n+                span,\n+                \"must be called with a vector of pointer-sized integers as second argument\"\n+            );\n+        }\n+        let offsets = args[1].immediate();\n+\n+        return Ok(bx.gep(bx.backend_type(layout), ptrs, &[offsets]));\n+    }\n+\n     if name == sym::simd_saturating_add || name == sym::simd_saturating_sub {\n         let lhs = args[0].immediate();\n         let rhs = args[1].immediate();"}, {"sha": "d9bada295894f314be2b5c90268a155a19a0c3b7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "patch": "@@ -1247,6 +1247,7 @@ symbols! {\n         simd,\n         simd_add,\n         simd_and,\n+        simd_arith_offset,\n         simd_as,\n         simd_bitmask,\n         simd_cast,"}, {"sha": "0dd8ee88ca2ad772b67b5500d84f20a4ec015aeb", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "patch": "@@ -437,6 +437,7 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         | sym::simd_fpow\n         | sym::simd_saturating_add\n         | sym::simd_saturating_sub => (1, vec![param(0), param(0)], param(0)),\n+        sym::simd_arith_offset => (2, vec![param(0), param(1)], param(0)),\n         sym::simd_neg\n         | sym::simd_fsqrt\n         | sym::simd_fsin"}, {"sha": "82508c6882daba5340e2be67bd87d84b6c2a363c", "filename": "library/portable-simd/crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "patch": "@@ -61,6 +61,10 @@ extern \"platform-intrinsic\" {\n     /// xor\n     pub(crate) fn simd_xor<T>(x: T, y: T) -> T;\n \n+    /// getelementptr (without inbounds)\n+    #[cfg(not(bootstrap))]\n+    pub(crate) fn simd_arith_offset<T, U>(ptrs: T, offsets: U) -> T;\n+\n     /// fptoui/fptosi/uitofp/sitofp\n     /// casting floats to integers is truncating, so it is safe to convert values like e.g. 1.5\n     /// but the truncated value must fit in the target type or the result is poison."}, {"sha": "68a9c67f795af984749230c2934564cee15bfe16", "filename": "library/portable-simd/crates/core_simd/src/vector/ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "patch": "@@ -1,5 +1,8 @@\n //! Private implementation details of public gather/scatter APIs.\n+#[cfg(not(bootstrap))]\n+use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n+#[cfg(bootstrap)]\n use core::mem;\n \n /// A vector of *const T.\n@@ -21,12 +24,16 @@ where\n     #[inline]\n     #[must_use]\n     pub fn wrapping_add(self, addend: Simd<usize, LANES>) -> Self {\n+        #[cfg(bootstrap)]\n         // Safety: converting pointers to usize and vice-versa is safe\n         // (even if using that pointer is not)\n         unsafe {\n             let x: Simd<usize, LANES> = mem::transmute_copy(&self);\n             mem::transmute_copy(&{ x + (addend * Simd::splat(mem::size_of::<T>())) })\n         }\n+        #[cfg(not(bootstrap))]\n+        // Safety: this intrinsic doesn't have a precondition\n+        unsafe { intrinsics::simd_arith_offset(self, addend) }\n     }\n }\n \n@@ -49,11 +56,15 @@ where\n     #[inline]\n     #[must_use]\n     pub fn wrapping_add(self, addend: Simd<usize, LANES>) -> Self {\n+        #[cfg(bootstrap)]\n         // Safety: converting pointers to usize and vice-versa is safe\n         // (even if using that pointer is not)\n         unsafe {\n             let x: Simd<usize, LANES> = mem::transmute_copy(&self);\n             mem::transmute_copy(&{ x + (addend * Simd::splat(mem::size_of::<T>())) })\n         }\n+        #[cfg(not(bootstrap))]\n+        // Safety: this intrinsic doesn't have a precondition\n+        unsafe { intrinsics::simd_arith_offset(self, addend) }\n     }\n }"}, {"sha": "a858270d4e76dffad3d028fd9fcc977078e86bc0", "filename": "src/test/codegen/simd_arith_offset.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/src%2Ftest%2Fcodegen%2Fsimd_arith_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea131bca17144d01434cc5ec5d12cb03bc69dbcb/src%2Ftest%2Fcodegen%2Fsimd_arith_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd_arith_offset.rs?ref=ea131bca17144d01434cc5ec5d12cb03bc69dbcb", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -C no-prepopulate-passes\n+// only-64bit (because the LLVM type of i64 for usize shows up)\n+//\n+\n+#![crate_type = \"lib\"]\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_arith_offset<T, U>(ptrs: T, offsets: U) -> T;\n+}\n+\n+/// A vector of *const T.\n+#[derive(Debug, Copy, Clone)]\n+#[repr(simd)]\n+pub struct SimdConstPtr<T, const LANES: usize>([*const T; LANES]);\n+\n+#[derive(Debug, Copy, Clone)]\n+#[repr(simd)]\n+pub struct Simd<T, const LANES: usize>([T; LANES]);\n+\n+// CHECK-LABEL: smoke\n+#[no_mangle]\n+pub fn smoke(ptrs: SimdConstPtr<u8, 8>, offsets: Simd<usize, 8>) -> SimdConstPtr<u8, 8> {\n+    // CHECK: getelementptr i8, <8 x i8*> %_3, <8 x i64> %_4\n+    unsafe { simd_arith_offset(ptrs, offsets) }\n+}"}]}