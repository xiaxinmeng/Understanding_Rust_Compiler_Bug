{"sha": "aa83481a5cfe668bdb081a7189204d4819c986ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODM0ODFhNWNmZTY2OGJkYjA4MWE3MTg5MjA0ZDQ4MTljOTg2Y2U=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-01-05T15:56:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-05T15:56:43Z"}, "message": "Rollup merge of #57219 - matthewjasper:mir-cleanup, r=nikomatsakis\n\nRemove some unused code\n\nCloses #57096", "tree": {"sha": "efdffa15a2f4b413076f463aed8d8b717e188cf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efdffa15a2f4b413076f463aed8d8b717e188cf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa83481a5cfe668bdb081a7189204d4819c986ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMNO7CRBK7hj4Ov3rIwAAdHIIAFkgZtOb6tY+S5suhCvwcUiQ\nNiB+IgVTQeSXSmW+TL3XhcgFXOJCS7zhZBCtP/oYPJmP+XlRFpmAVPwvtuggYfVi\nCGwvkNO+32YR7Hr8RcvMKA3xt66VfJlbqTMHyQaBrQ9Gz9kMqfbRnQrmPX5JXmXL\nAJh8jl3d023K+SXLQ1rdUaxzIsoQnogJdY7gi+cv/Gpbdzu1t5Rj9ALN8z6RddZ4\n/XlWVcW0tNFCwm5o40jsbPmzR0UqDSm8h2GAmEPeNJODmrzRqpbJO8hN/6N7wrT4\nIZqMBbyueextD8rNjlunl1KOZA9B/k9MvLtf9jay9iXZ1ToJ9Ju15/k+Qlwr7QQ=\n=0maf\n-----END PGP SIGNATURE-----\n", "payload": "tree efdffa15a2f4b413076f463aed8d8b717e188cf9\nparent 68614265d312fc2cbe8a696f7dabb9416eb6f221\nparent afb7c0683415bec312a1ac4679768472fa8ab73b\nauthor kennytm <kennytm@gmail.com> 1546703803 +0800\ncommitter GitHub <noreply@github.com> 1546703803 +0800\n\nRollup merge of #57219 - matthewjasper:mir-cleanup, r=nikomatsakis\n\nRemove some unused code\n\nCloses #57096\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa83481a5cfe668bdb081a7189204d4819c986ce", "html_url": "https://github.com/rust-lang/rust/commit/aa83481a5cfe668bdb081a7189204d4819c986ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa83481a5cfe668bdb081a7189204d4819c986ce/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68614265d312fc2cbe8a696f7dabb9416eb6f221", "url": "https://api.github.com/repos/rust-lang/rust/commits/68614265d312fc2cbe8a696f7dabb9416eb6f221", "html_url": "https://github.com/rust-lang/rust/commit/68614265d312fc2cbe8a696f7dabb9416eb6f221"}, {"sha": "afb7c0683415bec312a1ac4679768472fa8ab73b", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb7c0683415bec312a1ac4679768472fa8ab73b", "html_url": "https://github.com/rust-lang/rust/commit/afb7c0683415bec312a1ac4679768472fa8ab73b"}], "stats": {"total": 80, "additions": 9, "deletions": 71}, "files": [{"sha": "ef7fb0128ef4b4740df08cde6ccc5461469b4b3c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -477,22 +477,6 @@ impl_stable_hash_for!(enum mir::interpret::InboundsCheck {\n     MaybeDead\n });\n \n-impl_stable_hash_for!(enum mir::interpret::Lock {\n-    NoLock,\n-    WriteLock(dl),\n-    ReadLock(v)\n-});\n-\n-impl_stable_hash_for!(struct mir::interpret::DynamicLifetime {\n-    frame,\n-    region\n-});\n-\n-impl_stable_hash_for!(enum mir::interpret::AccessKind {\n-    Read,\n-    Write\n-});\n-\n impl_stable_hash_for!(enum ty::Variance {\n     Covariant,\n     Invariant,"}, {"sha": "e6a560b2ad7b6e87f2008b54467686f92087b6c2", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -29,7 +29,6 @@ use mir;\n use hir::def_id::DefId;\n use ty::{self, TyCtxt, Instance};\n use ty::layout::{self, Size};\n-use middle::region;\n use std::io;\n use rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n@@ -40,27 +39,6 @@ use ty::codec::TyDecoder;\n use std::sync::atomic::{AtomicU32, Ordering};\n use std::num::NonZeroU32;\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum Lock {\n-    NoLock,\n-    WriteLock(DynamicLifetime),\n-    /// This should never be empty -- that would be a read lock held and nobody\n-    /// there to release it...\n-    ReadLock(Vec<DynamicLifetime>),\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub struct DynamicLifetime {\n-    pub frame: usize,\n-    pub region: Option<region::Scope>, // \"None\" indicates \"until the function ends\"\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n-pub enum AccessKind {\n-    Read,\n-    Write,\n-}\n-\n /// Uniquely identifies a specific constant or static.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct GlobalId<'tcx> {"}, {"sha": "42adc6a87fdba2a5ffc0803f250817213456b24e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -1311,12 +1311,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n-    nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n-        \"when tracking region error causes, accept subminimal results for faster execution.\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],\n                        \"dump facts from NLL analysis into side files\"),\n-    disable_nll_user_type_assert: bool = (false, parse_bool, [UNTRACKED],\n-        \"disable user provided type assertion in NLL\"),\n     nll_dont_emit_read_for_match: bool = (false, parse_bool, [UNTRACKED],\n         \"in match codegen, do not include FakeRead statements (used by mir-borrowck)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "0ceff4aa04898cca0061e2e664ffc3ad8011e222", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -279,20 +279,6 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n                     });\n \n                     sets.gen(*index);\n-\n-                    // Issue #46746: Two-phase borrows handles\n-                    // stmts of form `Tmp = &mut Borrow` ...\n-                    match lhs {\n-                        Place::Promoted(_) |\n-                        Place::Local(..) | Place::Static(..) => {} // okay\n-                        Place::Projection(..) => {\n-                            // ... can assign into projections,\n-                            // e.g., `box (&mut _)`. Current\n-                            // conservative solution: force\n-                            // immediate activation here.\n-                            sets.gen(*index);\n-                        }\n-                    }\n                 }\n             }\n "}, {"sha": "c38524857b4a24a27c5fe484ae984eba51c1b18f", "filename": "src/test/run-pass/generator/yield-subtype.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -3,7 +3,6 @@\n #![allow(dead_code)]\n \n // revisions:lexical nll\n-//[nll]compile-flags: -Z disable-nll-user-type-assert\n #![cfg_attr(nll, feature(nll))]\n \n #![feature(generators)]"}, {"sha": "05692515af8467fde41a214a39f45c12ea185bab", "filename": "src/test/ui/span/dropck_vec_cycle_checked.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.nll.stderr?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:103:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:98:24\n    |\n LL |     c1.v[0].v.set(Some(&c2));\n    |                        ^^^ borrowed value does not live long enough\n@@ -13,7 +13,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:105:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:100:24\n    |\n LL |     c1.v[1].v.set(Some(&c3));\n    |                        ^^^ borrowed value does not live long enough\n@@ -27,7 +27,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are defined\n \n error[E0597]: `c1` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:111:24\n+  --> $DIR/dropck_vec_cycle_checked.rs:106:24\n    |\n LL |     c3.v[0].v.set(Some(&c1));\n    |                        ^^^ borrowed value does not live long enough"}, {"sha": "c80e0386e6a15aeb484a68ea6f8dd5e4eb2e73b2", "filename": "src/test/ui/span/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.rs?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -1,12 +1,7 @@\n-// compile-flags: -Z nll-subminimal-causes\n-// (Work around rust-lang/rust#49998 by opting into nll-subminimal-causes.)\n-\n // Reject mixing cyclic structure and Drop when using Vec.\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n \n-\n-\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "35e4314d0c66f46708af2ef505dac34859214ed1", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa83481a5cfe668bdb081a7189204d4819c986ce/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=aa83481a5cfe668bdb081a7189204d4819c986ce", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:103:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:98:25\n    |\n LL |     c1.v[0].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:105:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:100:25\n    |\n LL |     c1.v[1].v.set(Some(&c3));\n    |                         ^^ borrowed value does not live long enough\n@@ -21,7 +21,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:107:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:102:25\n    |\n LL |     c2.v[0].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n@@ -32,7 +32,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c3` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:109:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:104:25\n    |\n LL |     c2.v[1].v.set(Some(&c3));\n    |                         ^^ borrowed value does not live long enough\n@@ -43,7 +43,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c1` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:111:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:106:25\n    |\n LL |     c3.v[0].v.set(Some(&c1));\n    |                         ^^ borrowed value does not live long enough\n@@ -54,7 +54,7 @@ LL | }\n    = note: values in a scope are dropped in the opposite order they are created\n \n error[E0597]: `c2` does not live long enough\n-  --> $DIR/dropck_vec_cycle_checked.rs:113:25\n+  --> $DIR/dropck_vec_cycle_checked.rs:108:25\n    |\n LL |     c3.v[1].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough"}]}