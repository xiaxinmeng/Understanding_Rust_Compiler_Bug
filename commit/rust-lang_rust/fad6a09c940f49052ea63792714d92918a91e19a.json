{"sha": "fad6a09c940f49052ea63792714d92918a91e19a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZDZhMDljOTQwZjQ5MDUyZWE2Mzc5MjcxNGQ5MjkxOGE5MWUxOWE=", "commit": {"author": {"name": "Eitan Adler", "email": "lists@eitanadler.com", "date": "2016-09-18T06:36:59Z"}, "committer": {"name": "Eitan Adler", "email": "lists@eitanadler.com", "date": "2016-09-18T06:36:59Z"}, "message": "remove duplicate duplicate words", "tree": {"sha": "338f6ee757c0f78c69c50aedc99985d2a8921eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338f6ee757c0f78c69c50aedc99985d2a8921eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad6a09c940f49052ea63792714d92918a91e19a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad6a09c940f49052ea63792714d92918a91e19a", "html_url": "https://github.com/rust-lang/rust/commit/fad6a09c940f49052ea63792714d92918a91e19a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad6a09c940f49052ea63792714d92918a91e19a/comments", "author": {"login": "grimreaper", "id": 433817, "node_id": "MDQ6VXNlcjQzMzgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/433817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grimreaper", "html_url": "https://github.com/grimreaper", "followers_url": "https://api.github.com/users/grimreaper/followers", "following_url": "https://api.github.com/users/grimreaper/following{/other_user}", "gists_url": "https://api.github.com/users/grimreaper/gists{/gist_id}", "starred_url": "https://api.github.com/users/grimreaper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grimreaper/subscriptions", "organizations_url": "https://api.github.com/users/grimreaper/orgs", "repos_url": "https://api.github.com/users/grimreaper/repos", "events_url": "https://api.github.com/users/grimreaper/events{/privacy}", "received_events_url": "https://api.github.com/users/grimreaper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "grimreaper", "id": 433817, "node_id": "MDQ6VXNlcjQzMzgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/433817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grimreaper", "html_url": "https://github.com/grimreaper", "followers_url": "https://api.github.com/users/grimreaper/followers", "following_url": "https://api.github.com/users/grimreaper/following{/other_user}", "gists_url": "https://api.github.com/users/grimreaper/gists{/gist_id}", "starred_url": "https://api.github.com/users/grimreaper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grimreaper/subscriptions", "organizations_url": "https://api.github.com/users/grimreaper/orgs", "repos_url": "https://api.github.com/users/grimreaper/repos", "events_url": "https://api.github.com/users/grimreaper/events{/privacy}", "received_events_url": "https://api.github.com/users/grimreaper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3cf06b296c3944f7c23237106a3d2754012ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3cf06b296c3944f7c23237106a3d2754012ed6", "html_url": "https://github.com/rust-lang/rust/commit/9c3cf06b296c3944f7c23237106a3d2754012ed6"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c284a8bec4ba4b19f32889156bcaaec2cb941da4", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad6a09c940f49052ea63792714d92918a91e19a/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad6a09c940f49052ea63792714d92918a91e19a/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=fad6a09c940f49052ea63792714d92918a91e19a", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> Mir<'tcx> {\n         Some(Local::new(idx))\n     }\n \n-    /// Counts the number of locals, such that that local_index\n+    /// Counts the number of locals, such that local_index\n     /// will always return an index smaller than this count.\n     pub fn count_locals(&self) -> usize {\n         self.arg_decls.len() +"}, {"sha": "86eec563fd407a6fccad49124e0ae28dc2f3590e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad6a09c940f49052ea63792714d92918a91e19a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad6a09c940f49052ea63792714d92918a91e19a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fad6a09c940f49052ea63792714d92918a91e19a", "patch": "@@ -2913,7 +2913,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// See `ParameterEnvironment` struct def'n for details.\n     /// If you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\n-    /// for the `free_id_outlive` parameter. (But note that that is not always quite right.)\n+    /// for the `free_id_outlive` parameter. (But note that is not always quite right.)\n     pub fn construct_parameter_environment(self,\n                                            span: Span,\n                                            def_id: DefId,"}, {"sha": "343f62cb10220895126cd81c9226276a45aaa212", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fad6a09c940f49052ea63792714d92918a91e19a/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad6a09c940f49052ea63792714d92918a91e19a/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=fad6a09c940f49052ea63792714d92918a91e19a", "patch": "@@ -153,7 +153,7 @@\n //! The collection algorithm handles this more or less transparently. If it is\n //! about to create a translation item for something with an external `DefId`,\n //! it will take a look if the MIR for that item is available, and if so just\n-//! proceed normally. If the MIR is not available, it assumes that that item is\n+//! proceed normally. If the MIR is not available, it assumes that the item is\n //! just linked to and no node is created; which is exactly what we want, since\n //! no machine code should be generated in the current crate for such an item.\n //!"}]}