{"sha": "19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzQwZDkzMzRkMWY0MjYwYTI4NTFjM2RiN2E3ZTcwZWIzZDJlYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T04:39:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T04:39:25Z"}, "message": "Auto merge of #7076 - rail-rain:missing_const_for_fn, r=phansch\n\nFix a FP in `missing_const_for_fn`\n\nwhere a function that calls a standard library function whose constness\nis unstable is considered as being able to be a const function. Fixes #5995.\n\nThe core change is the move from `rustc_mir::const_eval::is_min_const_fn` to `rustc_mir::const_eval::is_const_fn`. I'm not clear about the difference in their purpose between them so I'm not sure if it's acceptable to call `qualify_min_const_fn::is_min_const_fn` this way now.\n\n---\n\nchangelog: `missing_const_for_fn`: No longer lints when an unstably const function is called", "tree": {"sha": "bfd246df1c05d96fd056accad0ea5e7ae9f18f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd246df1c05d96fd056accad0ea5e7ae9f18f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "html_url": "https://github.com/rust-lang/rust/commit/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3c2450c2dff0d4ae82395699809d3ea726d6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3c2450c2dff0d4ae82395699809d3ea726d6c2", "html_url": "https://github.com/rust-lang/rust/commit/8f3c2450c2dff0d4ae82395699809d3ea726d6c2"}, {"sha": "26a1989041393116c001f17d0323d6b4fc989dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a1989041393116c001f17d0323d6b4fc989dd9", "html_url": "https://github.com/rust-lang/rust/commit/26a1989041393116c001f17d0323d6b4fc989dd9"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "93b7a897405aee42b368639e58ee6cca2a4bba11", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n             if rustc_mir::const_eval::is_min_const_fn(cx.tcx, def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, &err);\n             }"}, {"sha": "8e1a2105b9612f0c022dab9fe0e6e652913cbbad", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -9,6 +9,7 @@\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n+extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;"}, {"sha": "b2ce58b597b3d901a160645b34d04342459f11f3", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -1,3 +1,8 @@\n+// This code used to be a part of `rustc` but moved to Clippy as a result of\n+// https://github.com/rust-lang/rust/issues/76618. Because of that, it contains unused code and some\n+// of terminologies might not be relevant in the context of Clippy. Note that its behavior might\n+// differ from the time of `rustc` even if the name stays the same.\n+\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n@@ -6,14 +11,15 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n+use rustc_semver::RustcVersion;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>) -> McfResult {\n+pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&RustcVersion>) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -70,7 +76,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>) -> McfResult {\n     )?;\n \n     for bb in body.basic_blocks() {\n-        check_terminator(tcx, body, bb.terminator())?;\n+        check_terminator(tcx, body, bb.terminator(), msrv)?;\n         for stmt in &bb.statements {\n             check_statement(tcx, body, def_id, stmt)?;\n         }\n@@ -268,7 +274,12 @@ fn check_place(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &Body<'t\n     Ok(())\n }\n \n-fn check_terminator(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, terminator: &Terminator<'tcx>) -> McfResult {\n+fn check_terminator(\n+    tcx: TyCtxt<'tcx>,\n+    body: &'a Body<'tcx>,\n+    terminator: &Terminator<'tcx>,\n+    msrv: Option<&RustcVersion>,\n+) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n         TerminatorKind::FalseEdge { .. }\n@@ -305,7 +316,7 @@ fn check_terminator(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, terminator: &Termin\n         } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(fn_def_id, _) = *fn_ty.kind() {\n-                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id) {\n+                if !is_const_fn(tcx, fn_def_id, msrv) {\n                     return Err((\n                         span,\n                         format!(\n@@ -350,3 +361,24 @@ fn check_terminator(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, terminator: &Termin\n         TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n     }\n }\n+\n+fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n+    rustc_mir::const_eval::is_const_fn(tcx, def_id)\n+        && if let Some(const_stab) = tcx.lookup_const_stability(def_id) {\n+            if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n+                // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n+                // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n+                // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n+                crate::meets_msrv(\n+                    msrv,\n+                    &RustcVersion::parse(&since.as_str())\n+                        .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n+                )\n+            } else {\n+                // `rustc_mir::const_eval::is_const_fn` should return false for unstably const functions.\n+                unreachable!();\n+            }\n+        } else {\n+            true\n+        }\n+}"}, {"sha": "7b9dc76b8f1d48d7b055bf5b6c48442fd5f6bebb", "filename": "tests/ui/missing_const_for_fn/auxiliary/helper.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fauxiliary%2Fhelper.rs?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -0,0 +1,8 @@\n+// This file provides a const function that is unstably const forever.\n+\n+#![feature(staged_api)]\n+#![stable(feature = \"1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"foo\", issue = \"none\")]\n+pub const fn unstably_const_fn() {}"}, {"sha": "7cda1aaa3c22894def353f9e6223546a930ab2f5", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -2,9 +2,14 @@\n //! compilation error.\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n+// aux-build:helper.rs\n+\n #![warn(clippy::missing_const_for_fn)]\n #![allow(incomplete_features)]\n #![feature(start, const_generics)]\n+#![feature(custom_inner_attributes)]\n+\n+extern crate helper;\n \n struct Game;\n \n@@ -101,3 +106,17 @@ fn const_generic_return<T, const N: usize>(t: &[T]) -> &[T; N] {\n \n     unsafe { &*p }\n }\n+\n+// Do not lint this because it calls a function whose constness is unstable.\n+fn unstably_const_fn() {\n+    helper::unstably_const_fn()\n+}\n+\n+mod const_fn_stabilized_after_msrv {\n+    #![clippy::msrv = \"1.46.0\"]\n+\n+    // Do not lint this because `u8::is_ascii_digit` is stabilized as a const function in 1.47.0.\n+    fn const_fn_stabilized_after_msrv(byte: u8) {\n+        byte.is_ascii_digit();\n+    }\n+}"}, {"sha": "0accb516f5f6b4a145e161c708cc726a72b221a8", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::missing_const_for_fn)]\n #![allow(incomplete_features, clippy::let_and_return)]\n #![feature(const_generics)]\n+#![feature(custom_inner_attributes)]\n \n use std::mem::transmute;\n \n@@ -70,5 +71,14 @@ mod with_drop {\n     }\n }\n \n+mod const_fn_stabilized_before_msrv {\n+    #![clippy::msrv = \"1.47.0\"]\n+\n+    // This could be const because `u8::is_ascii_digit` is a stable const function in 1.47.\n+    fn const_fn_stabilized_before_msrv(byte: u8) {\n+        byte.is_ascii_digit();\n+    }\n+}\n+\n // Should not be const\n fn main() {}"}, {"sha": "63c211f39fa1e3530a1be0d041f69d6bae65ee63", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19740d9334d1f4260a2851c3db7a7e70eb3d2ec3/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=19740d9334d1f4260a2851c3db7a7e70eb3d2ec3", "patch": "@@ -1,5 +1,5 @@\n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:13:5\n+  --> $DIR/could_be_const.rs:14:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self { guess: 42 }\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:17:5\n+  --> $DIR/could_be_const.rs:18:5\n    |\n LL | /     fn const_generic_params<'a, T, const N: usize>(&self, b: &'a [T; N]) -> &'a [T; N] {\n LL | |         b\n LL | |     }\n    | |_____^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:23:1\n+  --> $DIR/could_be_const.rs:24:1\n    |\n LL | / fn one() -> i32 {\n LL | |     1\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:28:1\n+  --> $DIR/could_be_const.rs:29:1\n    |\n LL | / fn two() -> i32 {\n LL | |     let abc = 2;\n@@ -34,36 +34,44 @@ LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:34:1\n+  --> $DIR/could_be_const.rs:35:1\n    |\n LL | / fn string() -> String {\n LL | |     String::new()\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:39:1\n+  --> $DIR/could_be_const.rs:40:1\n    |\n LL | / unsafe fn four() -> i32 {\n LL | |     4\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:44:1\n+  --> $DIR/could_be_const.rs:45:1\n    |\n LL | / fn generic<T>(t: T) -> T {\n LL | |     t\n LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:67:9\n+  --> $DIR/could_be_const.rs:68:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n-error: aborting due to 8 previous errors\n+error: this could be a `const fn`\n+  --> $DIR/could_be_const.rs:78:5\n+   |\n+LL | /     fn const_fn_stabilized_before_msrv(byte: u8) {\n+LL | |         byte.is_ascii_digit();\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 9 previous errors\n "}]}