{"sha": "ac162c6abe34cdf965afc0389f6cefa79653c63b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTYyYzZhYmUzNGNkZjk2NWFmYzAzODlmNmNlZmE3OTY1M2M2M2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-09T17:02:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-09T17:02:49Z"}, "message": "Auto merge of #63871 - BatmanAoD:FloatFnMustUse, r=withoutboats\n\nAdd #[must_use] to all functions 'fn(float) -> float'\n\nThese are pure functions.\n\n```rust\nimpl f32/f64 {\n    fn floor(self) -> Self;\n    fn ceil(self) -> Self;\n    fn round(self) -> Self;\n    fn trunc(self) -> Self;\n    fn fract(self) -> Self;\n    fn abs(self) -> Self;\n    fn signum(self) -> Self;\n    fn mul_add(self, a: Self, b: Self) -> Self;\n    fn div_euclid(self, rhs: Self) -> Self;\n    fn rem_euclid(self, rhs: Self) -> Self;\n    fn powi(self, n: i32) -> Self;\n    fn powf(self, n: Self) -> Self;\n    fn sqrt(self) -> Self;\n    fn exp(self) -> Self;\n    fn exp2(self) -> Self;\n    fn ln(self) -> Self;\n    fn log(self, base: Self) -> Self;\n    fn log2(self) -> Self;\n    fn log10(self) -> Self;\n    fn abs_sub(self, other: Self) -> Self;\n    fn cbrt(self) -> Self;\n    fn hypot(self, other: Self) -> Self;\n    fn sin(self) -> Self;\n    fn cos(self) -> Self;\n    fn tan(self) -> Self;\n    fn asin(self) -> Self;\n    fn acos(self) -> Self;\n    fn atan(self) -> Self;\n    fn atan2(self, other: Self) -> Self;\n    fn exp_m1(self) -> Self;\n    fn ln_1p(self) -> Self;\n    fn sinh(self) -> Self;\n    fn cosh(self) -> Self;\n    fn tanh(self) -> Self;\n    fn asinh(self) -> Self;\n    fn acosh(self) -> Self;\n    fn atanh(self) -> Self;\n    fn clamp(self, min: Self, max: Self) -> Self;\n}\n```\n\nPart of #48926", "tree": {"sha": "e936dd9b20535d0dbe34dc4afd688061d96097e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e936dd9b20535d0dbe34dc4afd688061d96097e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac162c6abe34cdf965afc0389f6cefa79653c63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac162c6abe34cdf965afc0389f6cefa79653c63b", "html_url": "https://github.com/rust-lang/rust/commit/ac162c6abe34cdf965afc0389f6cefa79653c63b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac162c6abe34cdf965afc0389f6cefa79653c63b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb981a1da4bcd2d372f0b61b38e6ce3b13a47468", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb981a1da4bcd2d372f0b61b38e6ce3b13a47468", "html_url": "https://github.com/rust-lang/rust/commit/eb981a1da4bcd2d372f0b61b38e6ce3b13a47468"}, {"sha": "1aa5d0cace3a72ae23f32ece5bb18085b36b5258", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa5d0cace3a72ae23f32ece5bb18085b36b5258", "html_url": "https://github.com/rust-lang/rust/commit/1aa5d0cace3a72ae23f32ece5bb18085b36b5258"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "4b672a4c78810e0b1119d3c291915b26356c07ca", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ac162c6abe34cdf965afc0389f6cefa79653c63b/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac162c6abe34cdf965afc0389f6cefa79653c63b/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=ac162c6abe34cdf965afc0389f6cefa79653c63b", "patch": "@@ -40,6 +40,7 @@ impl f32 {\n     /// assert_eq!(g.floor(), 3.0);\n     /// assert_eq!(h.floor(), -4.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn floor(self) -> f32 {\n@@ -73,6 +74,7 @@ impl f32 {\n     /// assert_eq!(f.ceil(), 4.0);\n     /// assert_eq!(g.ceil(), 4.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ceil(self) -> f32 {\n@@ -95,6 +97,7 @@ impl f32 {\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn round(self) -> f32 {\n@@ -114,6 +117,7 @@ impl f32 {\n     /// assert_eq!(g.trunc(), 3.0);\n     /// assert_eq!(h.trunc(), -3.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn trunc(self) -> f32 {\n@@ -135,6 +139,7 @@ impl f32 {\n     /// assert!(abs_difference_x <= f32::EPSILON);\n     /// assert!(abs_difference_y <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn fract(self) -> f32 { self - self.trunc() }\n@@ -158,6 +163,7 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.abs().is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn abs(self) -> f32 {\n@@ -182,6 +188,7 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.signum().is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn signum(self) -> f32 {\n@@ -213,8 +220,8 @@ impl f32 {\n     ///\n     /// assert!(f32::NAN.copysign(1.0).is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n-    #[must_use]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n     pub fn copysign(self, sign: f32) -> f32 {\n         unsafe { intrinsics::copysignf32(self, sign) }\n@@ -240,6 +247,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn mul_add(self, a: f32, b: f32) -> f32 {\n@@ -263,6 +271,7 @@ impl f32 {\n     /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn div_euclid(self, rhs: f32) -> f32 {\n@@ -296,6 +305,7 @@ impl f32 {\n     /// // limitation due to round-off error\n     /// assert!((-std::f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn rem_euclid(self, rhs: f32) -> f32 {\n@@ -322,6 +332,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powi(self, n: i32) -> f32 {\n@@ -340,6 +351,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f32) -> f32 {\n@@ -367,6 +379,7 @@ impl f32 {\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// assert!(negative.sqrt().is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sqrt(self) -> f32 {\n@@ -393,6 +406,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp(self) -> f32 {\n@@ -417,6 +431,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp2(self) -> f32 {\n@@ -439,6 +454,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f32 {\n@@ -467,6 +483,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log(self, base: f32) -> f32 { self.ln() / base.ln() }\n@@ -485,6 +502,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log2(self) -> f32 {\n@@ -508,6 +526,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f32 {\n@@ -537,6 +556,7 @@ impl f32 {\n     /// assert!(abs_difference_x <= f32::EPSILON);\n     /// assert!(abs_difference_y <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_deprecated(since = \"1.10.0\",\n@@ -565,6 +585,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cbrt(self) -> f32 {\n@@ -587,6 +608,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn hypot(self, other: f32) -> f32 {\n@@ -606,6 +628,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin(self) -> f32 {\n@@ -629,6 +652,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cos(self) -> f32 {\n@@ -651,6 +675,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn tan(self) -> f32 {\n@@ -673,6 +698,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asin(self) -> f32 {\n@@ -695,6 +721,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acos(self) -> f32 {\n@@ -716,6 +743,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atan(self) -> f32 {\n@@ -750,6 +778,7 @@ impl f32 {\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// assert!(abs_difference_2 <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atan2(self, other: f32) -> f32 {\n@@ -794,6 +823,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp_m1(self) -> f32 {\n@@ -815,6 +845,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln_1p(self) -> f32 {\n@@ -838,6 +869,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sinh(self) -> f32 {\n@@ -861,6 +893,7 @@ impl f32 {\n     /// // Same result\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cosh(self) -> f32 {\n@@ -884,6 +917,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn tanh(self) -> f32 {\n@@ -904,6 +938,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n@@ -928,6 +963,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n@@ -952,6 +988,7 @@ impl f32 {\n     ///\n     /// assert!(abs_difference <= 1e-5);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atanh(self) -> f32 {\n@@ -979,6 +1016,7 @@ impl f32 {\n     /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n     /// assert!((std::f32::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n     pub fn clamp(self, min: f32, max: f32) -> f32 {\n@@ -1594,18 +1632,18 @@ mod tests {\n     #[test]\n     #[should_panic]\n     fn test_clamp_min_greater_than_max() {\n-        1.0f32.clamp(3.0, 1.0);\n+        let _ = 1.0f32.clamp(3.0, 1.0);\n     }\n \n     #[test]\n     #[should_panic]\n     fn test_clamp_min_is_nan() {\n-        1.0f32.clamp(NAN, 1.0);\n+        let _ = 1.0f32.clamp(NAN, 1.0);\n     }\n \n     #[test]\n     #[should_panic]\n     fn test_clamp_max_is_nan() {\n-        1.0f32.clamp(3.0, NAN);\n+        let _ = 1.0f32.clamp(3.0, NAN);\n     }\n }"}, {"sha": "b16038ee1f8ca13dacf266dc2fd995caddce1459", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ac162c6abe34cdf965afc0389f6cefa79653c63b/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac162c6abe34cdf965afc0389f6cefa79653c63b/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=ac162c6abe34cdf965afc0389f6cefa79653c63b", "patch": "@@ -40,6 +40,7 @@ impl f64 {\n     /// assert_eq!(g.floor(), 3.0);\n     /// assert_eq!(h.floor(), -4.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn floor(self) -> f64 {\n@@ -57,6 +58,7 @@ impl f64 {\n     /// assert_eq!(f.ceil(), 4.0);\n     /// assert_eq!(g.ceil(), 4.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ceil(self) -> f64 {\n@@ -75,6 +77,7 @@ impl f64 {\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn round(self) -> f64 {\n@@ -94,6 +97,7 @@ impl f64 {\n     /// assert_eq!(g.trunc(), 3.0);\n     /// assert_eq!(h.trunc(), -3.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn trunc(self) -> f64 {\n@@ -113,6 +117,7 @@ impl f64 {\n     /// assert!(abs_difference_x < 1e-10);\n     /// assert!(abs_difference_y < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn fract(self) -> f64 { self - self.trunc() }\n@@ -136,6 +141,7 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.abs().is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn abs(self) -> f64 {\n@@ -160,6 +166,7 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.signum().is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn signum(self) -> f64 {\n@@ -191,9 +198,9 @@ impl f64 {\n     ///\n     /// assert!(f64::NAN.copysign(1.0).is_nan());\n     /// ```\n-    #[inline]\n-    #[must_use]\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"copysign\", since = \"1.35.0\")]\n+    #[inline]\n     pub fn copysign(self, sign: f64) -> f64 {\n         unsafe { intrinsics::copysignf64(self, sign) }\n     }\n@@ -216,6 +223,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn mul_add(self, a: f64, b: f64) -> f64 {\n@@ -239,6 +247,7 @@ impl f64 {\n     /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n     /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn div_euclid(self, rhs: f64) -> f64 {\n@@ -272,6 +281,7 @@ impl f64 {\n     /// // limitation due to round-off error\n     /// assert!((-std::f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n     #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n     pub fn rem_euclid(self, rhs: f64) -> f64 {\n@@ -295,6 +305,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powi(self, n: i32) -> f64 {\n@@ -311,6 +322,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f64) -> f64 {\n@@ -332,6 +344,7 @@ impl f64 {\n     /// assert!(abs_difference < 1e-10);\n     /// assert!(negative.sqrt().is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sqrt(self) -> f64 {\n@@ -356,6 +369,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp(self) -> f64 {\n@@ -374,6 +388,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp2(self) -> f64 {\n@@ -394,6 +409,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f64 {\n@@ -416,6 +432,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log(self, base: f64) -> f64 { self.ln() / base.ln() }\n@@ -432,6 +449,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log2(self) -> f64 {\n@@ -455,6 +473,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f64 {\n@@ -478,6 +497,7 @@ impl f64 {\n     /// assert!(abs_difference_x < 1e-10);\n     /// assert!(abs_difference_y < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_deprecated(since = \"1.10.0\",\n@@ -504,6 +524,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cbrt(self) -> f64 {\n@@ -524,6 +545,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn hypot(self, other: f64) -> f64 {\n@@ -543,6 +565,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin(self) -> f64 {\n@@ -562,6 +585,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cos(self) -> f64 {\n@@ -580,6 +604,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-14);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn tan(self) -> f64 {\n@@ -602,6 +627,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asin(self) -> f64 {\n@@ -624,6 +650,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acos(self) -> f64 {\n@@ -643,6 +670,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atan(self) -> f64 {\n@@ -677,6 +705,7 @@ impl f64 {\n     /// assert!(abs_difference_1 < 1e-10);\n     /// assert!(abs_difference_2 < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atan2(self, other: f64) -> f64 {\n@@ -719,6 +748,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp_m1(self) -> f64 {\n@@ -740,6 +770,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln_1p(self) -> f64 {\n@@ -763,6 +794,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sinh(self) -> f64 {\n@@ -786,6 +818,7 @@ impl f64 {\n     /// // Same result\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cosh(self) -> f64 {\n@@ -809,6 +842,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn tanh(self) -> f64 {\n@@ -827,6 +861,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n@@ -849,6 +884,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n@@ -873,6 +909,7 @@ impl f64 {\n     ///\n     /// assert!(abs_difference < 1.0e-10);\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn atanh(self) -> f64 {\n@@ -900,6 +937,7 @@ impl f64 {\n     /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n     /// assert!((std::f64::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     #[inline]\n     pub fn clamp(self, min: f64, max: f64) -> f64 {\n@@ -1535,18 +1573,18 @@ mod tests {\n     #[test]\n     #[should_panic]\n     fn test_clamp_min_greater_than_max() {\n-        1.0f64.clamp(3.0, 1.0);\n+        let _ = 1.0f64.clamp(3.0, 1.0);\n     }\n \n     #[test]\n     #[should_panic]\n     fn test_clamp_min_is_nan() {\n-        1.0f64.clamp(NAN, 1.0);\n+        let _ = 1.0f64.clamp(NAN, 1.0);\n     }\n \n     #[test]\n     #[should_panic]\n     fn test_clamp_max_is_nan() {\n-        1.0f64.clamp(3.0, NAN);\n+        let _ = 1.0f64.clamp(3.0, NAN);\n     }\n }"}]}