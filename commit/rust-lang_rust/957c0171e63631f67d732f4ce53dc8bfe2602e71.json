{"sha": "957c0171e63631f67d732f4ce53dc8bfe2602e71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1N2MwMTcxZTYzNjMxZjY3ZDczMmY0Y2U1M2RjOGJmZTI2MDJlNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:11:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:11:01Z"}, "message": "Remove more copy-paste", "tree": {"sha": "6503fb74cbcf61b92f40db42f8fb889771647c4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6503fb74cbcf61b92f40db42f8fb889771647c4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957c0171e63631f67d732f4ce53dc8bfe2602e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957c0171e63631f67d732f4ce53dc8bfe2602e71", "html_url": "https://github.com/rust-lang/rust/commit/957c0171e63631f67d732f4ce53dc8bfe2602e71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957c0171e63631f67d732f4ce53dc8bfe2602e71/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65377620245bda207145742595a7bd878e14f7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/65377620245bda207145742595a7bd878e14f7ec", "html_url": "https://github.com/rust-lang/rust/commit/65377620245bda207145742595a7bd878e14f7ec"}], "stats": {"total": 87, "additions": 30, "deletions": 57}, "files": [{"sha": "042fd3f8ba01fb4a7b7a7db539c84c8ee4805375", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 30, "deletions": 57, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/957c0171e63631f67d732f4ce53dc8bfe2602e71/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957c0171e63631f67d732f4ce53dc8bfe2602e71/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=957c0171e63631f67d732f4ce53dc8bfe2602e71", "patch": "@@ -45,7 +45,7 @@ use std::hash::Hash;\n use hir_expand::{ast_id_map::FileAstId, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n-use ra_syntax::ast;\n+use ra_syntax::{ast, AstNode};\n \n use crate::builtin_type::BuiltinType;\n \n@@ -65,16 +65,23 @@ pub struct ModuleId {\n pub struct LocalModuleId(RawId);\n impl_arena_id!(LocalModuleId);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct FunctionId(salsa::InternId);\n-impl_intern_key!(FunctionId);\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ItemLoc<N: AstNode> {\n+    pub container: ContainerId,\n+    pub ast_id: AstId<N>,\n+}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct FunctionLoc {\n+pub struct AssocItemLoc<N: AstNode> {\n     pub container: AssocContainerId,\n-    pub ast_id: AstId<ast::FnDef>,\n+    pub ast_id: AstId<N>,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct FunctionId(salsa::InternId);\n+impl_intern_key!(FunctionId);\n+type FunctionLoc = AssocItemLoc<ast::FnDef>;\n+\n impl Intern for FunctionLoc {\n     type ID = FunctionId;\n     fn intern(self, db: &impl db::DefDatabase) -> FunctionId {\n@@ -92,12 +99,7 @@ impl Lookup for FunctionId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructId(salsa::InternId);\n impl_intern_key!(StructId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::StructDef>,\n-}\n+pub type StructLoc = ItemLoc<ast::StructDef>;\n \n impl Intern for StructLoc {\n     type ID = StructId;\n@@ -116,12 +118,7 @@ impl Lookup for StructId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct UnionId(salsa::InternId);\n impl_intern_key!(UnionId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct UnionLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::UnionDef>,\n-}\n+pub type UnionLoc = ItemLoc<ast::UnionDef>;\n \n impl Intern for UnionLoc {\n     type ID = UnionId;\n@@ -140,12 +137,7 @@ impl Lookup for UnionId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(salsa::InternId);\n impl_intern_key!(EnumId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct EnumLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::EnumDef>,\n-}\n+pub type EnumLoc = ItemLoc<ast::EnumDef>;\n \n impl Intern for EnumLoc {\n     type ID = EnumId;\n@@ -185,11 +177,7 @@ impl_arena_id!(LocalStructFieldId);\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstLoc {\n-    pub container: AssocContainerId,\n-    pub ast_id: AstId<ast::ConstDef>,\n-}\n+type ConstLoc = AssocItemLoc<ast::ConstDef>;\n \n impl Intern for ConstLoc {\n     type ID = ConstId;\n@@ -208,12 +196,7 @@ impl Lookup for ConstId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StaticId(salsa::InternId);\n impl_intern_key!(StaticId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StaticLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::StaticDef>,\n-}\n+pub type StaticLoc = ItemLoc<ast::StaticDef>;\n \n impl Intern for StaticLoc {\n     type ID = StaticId;\n@@ -232,12 +215,7 @@ impl Lookup for StaticId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TraitId(salsa::InternId);\n impl_intern_key!(TraitId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TraitLoc {\n-    pub container: ContainerId,\n-    pub ast_id: AstId<ast::TraitDef>,\n-}\n+pub type TraitLoc = ItemLoc<ast::TraitDef>;\n \n impl Intern for TraitLoc {\n     type ID = TraitId;\n@@ -256,12 +234,7 @@ impl Lookup for TraitId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAliasId(salsa::InternId);\n impl_intern_key!(TypeAliasId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeAliasLoc {\n-    pub container: AssocContainerId,\n-    pub ast_id: AstId<ast::TypeAliasDef>,\n-}\n+type TypeAliasLoc = AssocItemLoc<ast::TypeAliasDef>;\n \n impl Intern for TypeAliasLoc {\n     type ID = TypeAliasId;\n@@ -301,6 +274,16 @@ impl Lookup for ImplId {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TypeParamId {\n+    pub parent: GenericDefId,\n+    pub local_id: LocalTypeParamId,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct LocalTypeParamId(RawId);\n+impl_arena_id!(LocalTypeParamId);\n+\n macro_rules! impl_froms {\n     ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {\n         $(\n@@ -320,16 +303,6 @@ macro_rules! impl_froms {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TypeParamId {\n-    pub parent: GenericDefId,\n-    pub local_id: LocalTypeParamId,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalTypeParamId(RawId);\n-impl_arena_id!(LocalTypeParamId);\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {\n     ModuleId(ModuleId),"}]}