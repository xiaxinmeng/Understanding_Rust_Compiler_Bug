{"sha": "542bfe357015e24504377c7347a8811797126ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MmJmZTM1NzAxNWUyNDUwNDM3N2M3MzQ3YTg4MTE3OTcxMjZlZTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-19T18:48:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-11-19T18:48:31Z"}, "message": "+match_if_let", "tree": {"sha": "14e9274723d99a84f982c049c7c704ef70f2c0a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e9274723d99a84f982c049c7c704ef70f2c0a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542bfe357015e24504377c7347a8811797126ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542bfe357015e24504377c7347a8811797126ee3", "html_url": "https://github.com/rust-lang/rust/commit/542bfe357015e24504377c7347a8811797126ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542bfe357015e24504377c7347a8811797126ee3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871641030e7256f310a85c5ac41dd5c8959d74d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/871641030e7256f310a85c5ac41dd5c8959d74d3", "html_url": "https://github.com/rust-lang/rust/commit/871641030e7256f310a85c5ac41dd5c8959d74d3"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "4528585c82c46b2818c179cd0ed2807dda70496d", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/542bfe357015e24504377c7347a8811797126ee3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542bfe357015e24504377c7347a8811797126ee3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=542bfe357015e24504377c7347a8811797126ee3", "patch": "@@ -1,5 +1,6 @@\n-#![feature(globs, phase, plugin_registrar)] \n+#![feature(globs, phase, plugin_registrar, if_let)] \n \n+#![allow(unused_imports)]\n \n #[phase(plugin,link)]\n extern crate syntax;\n@@ -12,10 +13,10 @@ use rustc::plugin::Registry;\n use rustc::lint::LintPassObject;\n \n pub mod types;\n+pub mod misc;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    //reg.register_syntax_extension(intern(\"jstraceable\"), base::ItemDecorator(box expand_jstraceable));\n-    //reg.register_macro(\"factorial\", expand)\n     reg.register_lint_pass(box types::TypePass as LintPassObject);\n+    reg.register_lint_pass(box misc::MiscPass as LintPassObject);\n }\n\\ No newline at end of file"}, {"sha": "c70d4b48c1c5445708a6a6147c3209c61c504643", "filename": "src/misc.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/542bfe357015e24504377c7347a8811797126ee3/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542bfe357015e24504377c7347a8811797126ee3/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=542bfe357015e24504377c7347a8811797126ee3", "patch": "@@ -0,0 +1,46 @@\n+use syntax::ptr::P;\n+use syntax::ast;\n+use syntax::ast::*;\n+use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n+use syntax::codemap::Span;\n+\n+use types::span_note_and_lint;\n+\n+/// Handles uncategorized lints\n+/// Currently handles linting of if-let-able matches\n+pub struct MiscPass;\n+\n+\n+declare_lint!(CLIPPY_SINGLE_MATCH, Warn,\n+              \"Warn on usage of matches with a single nontrivial arm\")\n+\n+impl LintPass for MiscPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CLIPPY_SINGLE_MATCH)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprMatch(ref ex, ref arms, MatchNormal) = expr.node {\n+            if arms.len() == 2 {\n+                if arms[0].guard.is_none() && arms[1].pats.len() == 1 {\n+                    match arms[1].body.node {\n+                        ExprTup(ref v) if v.len() == 0 && arms[1].guard.is_none() => (),\n+                        ExprBlock(ref b) if b.stmts.len() == 0 && arms[1].guard.is_none() => (),\n+                         _ => return\n+                    }\n+                    // In some cases, an exhaustive match is preferred to catch situations when\n+                    // an enum is extended. So we only consider cases where a `_` wildcard is used\n+                    if arms[1].pats[0].node == PatWild(PatWildSingle) && arms[0].pats.len() == 1 {\n+                        let map = cx.sess().codemap();\n+                        span_note_and_lint(cx, CLIPPY_SINGLE_MATCH, expr.span,\n+                              \"You seem to be trying to use match for destructuring a single type. Did you mean to use `if let`?\",\n+                              format!(\"Try if let {} = {} {{ ... }}\",\n+                                      map.span_to_snippet(arms[0].pats[0].span).unwrap_or(\"..\".to_string()),\n+                                      map.span_to_snippet(ex.span).unwrap_or(\"..\".to_string())).as_slice()\n+                        );                        \n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}