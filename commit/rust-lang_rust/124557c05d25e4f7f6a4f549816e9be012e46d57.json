{"sha": "124557c05d25e4f7f6a4f549816e9be012e46d57", "node_id": "C_kwDOAAsO6NoAKDEyNDU1N2MwNWQyNWU0ZjdmNmE0ZjU0OTgxNmU5YmUwMTJlNDZkNTc", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-06-23T23:32:15Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-06-23T23:32:15Z"}, "message": "Move init_repo.sh to checkout-submodules.sh\n\ncheckout-submodules.sh is no longer serving any purpose other than to\nrun init_repo.", "tree": {"sha": "065fbb2eb66ddd36ffd227448bcc45c06f86db7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065fbb2eb66ddd36ffd227448bcc45c06f86db7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/124557c05d25e4f7f6a4f549816e9be012e46d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/124557c05d25e4f7f6a4f549816e9be012e46d57", "html_url": "https://github.com/rust-lang/rust/commit/124557c05d25e4f7f6a4f549816e9be012e46d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/124557c05d25e4f7f6a4f549816e9be012e46d57/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d7c20c345b0042b8dd2eeda2892c872fc68b3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7c20c345b0042b8dd2eeda2892c872fc68b3ca", "html_url": "https://github.com/rust-lang/rust/commit/1d7c20c345b0042b8dd2eeda2892c872fc68b3ca"}], "stats": {"total": 141, "additions": 65, "deletions": 76}, "files": [{"sha": "23c5ec559e4eeaca2d50fb024799eb16c3c36066", "filename": "src/ci/init_repo.sh", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1d7c20c345b0042b8dd2eeda2892c872fc68b3ca/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1d7c20c345b0042b8dd2eeda2892c872fc68b3ca/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=1d7c20c345b0042b8dd2eeda2892c872fc68b3ca", "patch": "@@ -1,72 +0,0 @@\n-#!/usr/bin/env bash\n-\n-set -o errexit\n-set -o pipefail\n-set -o nounset\n-\n-ci_dir=$(cd $(dirname $0) && pwd)\n-. \"$ci_dir/shared.sh\"\n-\n-REPO_DIR=\"$1\"\n-\n-if [ ! -d \"$REPO_DIR\" -o ! -d \"$REPO_DIR/.git\" ]; then\n-    echo \"Error: $REPO_DIR does not exist or is not a git repo\"\n-    exit 1\n-fi\n-cd $REPO_DIR\n-\n-# On the beta channel we'll be automatically calculating the prerelease version\n-# via the git history, so unshallow our shallow clone from CI.\n-if [ \"$(releaseChannel)\" = \"beta\" ]; then\n-  git fetch origin --unshallow beta master\n-fi\n-\n-function fetch_github_commit_archive {\n-    local module=$1\n-    local cached=\"download-${module//\\//-}.tar.gz\"\n-    retry sh -c \"rm -f $cached && \\\n-        curl -f -sSL -o $cached $2\"\n-    mkdir $module\n-    touch \"$module/.git\"\n-    # On Windows, the default behavior is to emulate symlinks by copying\n-    # files. However, that ends up being order-dependent while extracting,\n-    # which can cause a failure if the symlink comes first. This env var\n-    # causes tar to use real symlinks instead, which are allowed to dangle.\n-    export MSYS=winsymlinks:nativestrict\n-    tar -C $module --strip-components=1 -xf $cached\n-    rm $cached\n-}\n-\n-# Archive downloads are temporarily disabled due to sudden 504\n-# gateway timeout errors.\n-# included=\"src/llvm-project src/doc/book src/doc/rust-by-example\"\n-included=\"\"\n-modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n-modules=($modules)\n-use_git=\"\"\n-urls=\"$(git config --file .gitmodules --get-regexp '\\.url$' | cut -d' ' -f2)\"\n-urls=($urls)\n-# shellcheck disable=SC2068\n-for i in ${!modules[@]}; do\n-    module=${modules[$i]}\n-    if [[ \" $included \" = *\" $module \"* ]]; then\n-        commit=\"$(git ls-tree HEAD $module | awk '{print $3}')\"\n-        git rm $module\n-        url=${urls[$i]}\n-        url=${url/\\.git/}\n-        fetch_github_commit_archive $module \"$url/archive/$commit.tar.gz\" &\n-        bg_pids[${i}]=$!\n-        continue\n-    else\n-        use_git=\"$use_git $module\"\n-    fi\n-done\n-retry sh -c \"git submodule deinit -f $use_git && \\\n-    git submodule sync && \\\n-    git submodule update -j 16 --init --recursive --depth 1 $use_git\"\n-# STATUS=0\n-# for pid in ${bg_pids[*]}\n-# do\n-#     wait $pid || STATUS=1\n-# done\n-# exit ${STATUS}"}, {"sha": "3eb4b8f9058328183d498b60c858cc173bf238c1", "filename": "src/ci/scripts/checkout-submodules.sh", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/124557c05d25e4f7f6a4f549816e9be012e46d57/src%2Fci%2Fscripts%2Fcheckout-submodules.sh", "raw_url": "https://github.com/rust-lang/rust/raw/124557c05d25e4f7f6a4f549816e9be012e46d57/src%2Fci%2Fscripts%2Fcheckout-submodules.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fcheckout-submodules.sh?ref=124557c05d25e4f7f6a4f549816e9be012e46d57", "patch": "@@ -2,9 +2,70 @@\n # Check out all our submodules, but more quickly than using git by using one of\n # our custom scripts\n \n-set -euo pipefail\n-IFS=$'\\n\\t'\n+set -o errexit\n+set -o pipefail\n+set -o nounset\n \n-source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+if [ ! -d \".git\" ]; then\n+    echo \"Error: This must run in the root of the repository\"\n+    exit 1\n+fi\n \n-\"$(cd \"$(dirname \"$0\")\" && pwd)/../init_repo.sh\" .\n+ci_dir=$(cd $(dirname $0) && pwd)/..\n+. \"$ci_dir/shared.sh\"\n+\n+# On the beta channel we'll be automatically calculating the prerelease version\n+# via the git history, so unshallow our shallow clone from CI.\n+if [ \"$(releaseChannel)\" = \"beta\" ]; then\n+  git fetch origin --unshallow beta master\n+fi\n+\n+function fetch_github_commit_archive {\n+    local module=$1\n+    local cached=\"download-${module//\\//-}.tar.gz\"\n+    retry sh -c \"rm -f $cached && \\\n+        curl -f -sSL -o $cached $2\"\n+    mkdir $module\n+    touch \"$module/.git\"\n+    # On Windows, the default behavior is to emulate symlinks by copying\n+    # files. However, that ends up being order-dependent while extracting,\n+    # which can cause a failure if the symlink comes first. This env var\n+    # causes tar to use real symlinks instead, which are allowed to dangle.\n+    export MSYS=winsymlinks:nativestrict\n+    tar -C $module --strip-components=1 -xf $cached\n+    rm $cached\n+}\n+\n+# Archive downloads are temporarily disabled due to sudden 504\n+# gateway timeout errors.\n+# included=\"src/llvm-project src/doc/book src/doc/rust-by-example\"\n+included=\"\"\n+modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n+modules=($modules)\n+use_git=\"\"\n+urls=\"$(git config --file .gitmodules --get-regexp '\\.url$' | cut -d' ' -f2)\"\n+urls=($urls)\n+# shellcheck disable=SC2068\n+for i in ${!modules[@]}; do\n+    module=${modules[$i]}\n+    if [[ \" $included \" = *\" $module \"* ]]; then\n+        commit=\"$(git ls-tree HEAD $module | awk '{print $3}')\"\n+        git rm $module\n+        url=${urls[$i]}\n+        url=${url/\\.git/}\n+        fetch_github_commit_archive $module \"$url/archive/$commit.tar.gz\" &\n+        bg_pids[${i}]=$!\n+        continue\n+    else\n+        use_git=\"$use_git $module\"\n+    fi\n+done\n+retry sh -c \"git submodule deinit -f $use_git && \\\n+    git submodule sync && \\\n+    git submodule update -j 16 --init --recursive --depth 1 $use_git\"\n+# STATUS=0\n+# for pid in ${bg_pids[*]}\n+# do\n+#     wait $pid || STATUS=1\n+# done\n+# exit ${STATUS}"}]}