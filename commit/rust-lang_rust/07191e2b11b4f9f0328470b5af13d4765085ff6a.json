{"sha": "07191e2b11b4f9f0328470b5af13d4765085ff6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTkxZTJiMTFiNGY5ZjAzMjg0NzBiNWFmMTNkNDc2NTA4NWZmNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-01T22:45:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-01T22:45:02Z"}, "message": "Auto merge of #38548 - GuillaumeGomez:thread_struct_docs, r=frewsxcv\n\nAdd missing example for Thread struct\n\nr? @frewsxcv", "tree": {"sha": "a2a7a18fe000223af4b8d2767fdd5ca0ce58a9b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a7a18fe000223af4b8d2767fdd5ca0ce58a9b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07191e2b11b4f9f0328470b5af13d4765085ff6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07191e2b11b4f9f0328470b5af13d4765085ff6a", "html_url": "https://github.com/rust-lang/rust/commit/07191e2b11b4f9f0328470b5af13d4765085ff6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07191e2b11b4f9f0328470b5af13d4765085ff6a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917e5baae7ff931b13a8b40d2fce60395fefe7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/917e5baae7ff931b13a8b40d2fce60395fefe7a4", "html_url": "https://github.com/rust-lang/rust/commit/917e5baae7ff931b13a8b40d2fce60395fefe7a4"}, {"sha": "3312febf22794bb9451410e5950b9c970d77004d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3312febf22794bb9451410e5950b9c970d77004d", "html_url": "https://github.com/rust-lang/rust/commit/3312febf22794bb9451410e5950b9c970d77004d"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "a2039db0e40c3ed4437912989f3a73b2f0df3c13", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/07191e2b11b4f9f0328470b5af13d4765085ff6a/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07191e2b11b4f9f0328470b5af13d4765085ff6a/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=07191e2b11b4f9f0328470b5af13d4765085ff6a", "patch": "@@ -648,6 +648,23 @@ pub fn park_timeout(dur: Duration) {\n /// A `ThreadId` is an opaque object that has a unique value for each thread\n /// that creates one. `ThreadId`s do not correspond to a thread's system-\n /// designated identifier.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(thread_id)]\n+///\n+/// use std::thread;\n+///\n+/// let handler = thread::Builder::new()\n+///     .spawn(|| {\n+///         let thread = thread::current();\n+///         let thread_id = thread.id();\n+///     })\n+///     .unwrap();\n+///\n+/// handler.join().unwrap();\n+/// ```\n #[unstable(feature = \"thread_id\", issue = \"21507\")]\n #[derive(Eq, PartialEq, Copy, Clone)]\n pub struct ThreadId(u64);\n@@ -700,6 +717,22 @@ struct Inner {\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n /// A handle to a thread.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// let handler = thread::Builder::new()\n+///     .name(\"foo\".into())\n+///     .spawn(|| {\n+///         let thread = thread::current();\n+///         println!(\"thread name: {}\", thread.name().unwrap());\n+///     })\n+///     .unwrap();\n+///\n+/// handler.join().unwrap();\n+/// ```\n pub struct Thread {\n     inner: Arc<Inner>,\n }\n@@ -723,6 +756,21 @@ impl Thread {\n     /// Atomically makes the handle's token available if it is not already.\n     ///\n     /// See the module doc for more detail.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let handler = thread::Builder::new()\n+    ///     .spawn(|| {\n+    ///         let thread = thread::current();\n+    ///         thread.unpark();\n+    ///     })\n+    ///     .unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unpark(&self) {\n         let mut guard = self.inner.lock.lock().unwrap();\n@@ -733,6 +781,23 @@ impl Thread {\n     }\n \n     /// Gets the thread's unique identifier.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(thread_id)]\n+    ///\n+    /// use std::thread;\n+    ///\n+    /// let handler = thread::Builder::new()\n+    ///     .spawn(|| {\n+    ///         let thread = thread::current();\n+    ///         println!(\"thread id: {:?}\", thread.id());\n+    ///     })\n+    ///     .unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[unstable(feature = \"thread_id\", issue = \"21507\")]\n     pub fn id(&self) -> ThreadId {\n         self.inner.id"}]}