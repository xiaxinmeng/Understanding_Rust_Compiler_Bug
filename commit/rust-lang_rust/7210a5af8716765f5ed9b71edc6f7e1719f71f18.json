{"sha": "7210a5af8716765f5ed9b71edc6f7e1719f71f18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTBhNWFmODcxNjc2NWY1ZWQ5YjcxZWRjNmY3ZTE3MTlmNzFmMTg=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-15T14:58:39Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-16T15:15:36Z"}, "message": "librustc: Stop generating visit glue and remove from TyDesc.", "tree": {"sha": "4fdb5a556ac89112c66531df83b0e784af6f8995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fdb5a556ac89112c66531df83b0e784af6f8995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7210a5af8716765f5ed9b71edc6f7e1719f71f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7210a5af8716765f5ed9b71edc6f7e1719f71f18", "html_url": "https://github.com/rust-lang/rust/commit/7210a5af8716765f5ed9b71edc6f7e1719f71f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7210a5af8716765f5ed9b71edc6f7e1719f71f18/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4122ac6798d1db84c3dc76047a1136cd7da258", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4122ac6798d1db84c3dc76047a1136cd7da258", "html_url": "https://github.com/rust-lang/rust/commit/7a4122ac6798d1db84c3dc76047a1136cd7da258"}], "stats": {"total": 98, "additions": 1, "deletions": 97}, "files": [{"sha": "2586fdc60d5a1fd130bb78a202d42866e26d638f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -58,6 +58,7 @@ pub struct TyDesc {\n     pub drop_glue: GlueFn,\n \n     // Called by reflection visitor to visit a value of type `T`\n+    #[cfg(stage0)]\n     pub visit_glue: GlueFn,\n \n     // Name corresponding to the type"}, {"sha": "a681a750f0b439b86562551d32eb387043884d80", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -130,7 +130,6 @@ pub struct tydesc_info {\n     pub size: ValueRef,\n     pub align: ValueRef,\n     pub name: ValueRef,\n-    pub visit_glue: Cell<Option<ValueRef>>,\n }\n \n /*"}, {"sha": "67ae93e25c6dab94ce055c0add911fc0821d88e3", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -72,7 +72,6 @@ pub struct SharedCrateContext<'tcx> {\n \n     available_monomorphizations: RefCell<HashSet<String>>,\n     available_drop_glues: RefCell<HashMap<ty::t, String>>,\n-    available_visit_glues: RefCell<HashMap<ty::t, String>>,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -275,7 +274,6 @@ impl<'tcx> SharedCrateContext<'tcx> {\n             },\n             available_monomorphizations: RefCell::new(HashSet::new()),\n             available_drop_glues: RefCell::new(HashMap::new()),\n-            available_visit_glues: RefCell::new(HashMap::new()),\n         };\n \n         for i in range(0, local_count) {\n@@ -682,10 +680,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.shared.available_drop_glues\n     }\n \n-    pub fn available_visit_glues<'a>(&'a self) -> &'a RefCell<HashMap<ty::t, String>> {\n-        &self.shared.available_visit_glues\n-    }\n-\n     pub fn int_type(&self) -> Type {\n         self.local.int_type\n     }"}, {"sha": "f0b0d9d33e53ef4b99b313ccd58bd9ef032e511f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -31,7 +31,6 @@ use middle::trans::datum;\n use middle::trans::debuginfo;\n use middle::trans::expr;\n use middle::trans::machine::*;\n-use middle::trans::reflect;\n use middle::trans::tvec;\n use middle::trans::type_::Type;\n use middle::trans::type_of::{type_of, sizing_type_of, align_of};\n@@ -41,7 +40,6 @@ use util::ppaux;\n \n use arena::TypedArena;\n use std::c_str::ToCStr;\n-use std::cell::Cell;\n use libc::c_uint;\n use syntax::ast;\n use syntax::parse::token;\n@@ -186,71 +184,6 @@ pub fn get_drop_glue(ccx: &CrateContext, t: ty::t) -> ValueRef {\n     glue\n }\n \n-pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: &tydesc_info) -> ValueRef {\n-    let _icx = push_ctxt(\"lazily_emit_visit_glue\");\n-\n-    let llfnty = Type::glue_fn(ccx, type_of(ccx, ti.ty).ptr_to());\n-\n-    match ti.visit_glue.get() {\n-        Some(visit_glue) => visit_glue,\n-        None => {\n-            debug!(\"+++ lazily_emit_tydesc_glue VISIT {}\", ppaux::ty_to_string(ccx.tcx(), ti.ty));\n-\n-            let (glue_fn, new_sym) = match ccx.available_visit_glues().borrow().find(&ti.ty) {\n-                Some(old_sym) => {\n-                    let glue_fn = decl_cdecl_fn(ccx, old_sym.as_slice(), llfnty, ty::mk_nil());\n-                    (glue_fn, None)\n-                },\n-                None => {\n-                    let (sym, glue_fn) = declare_generic_glue(ccx, ti.ty, llfnty, \"visit\");\n-                    (glue_fn, Some(sym))\n-                },\n-            };\n-\n-            ti.visit_glue.set(Some(glue_fn));\n-\n-            match new_sym {\n-                Some(sym) => {\n-                    ccx.available_visit_glues().borrow_mut().insert(ti.ty, sym);\n-                    make_generic_glue(ccx, ti.ty, glue_fn, make_visit_glue, \"visit\");\n-                },\n-                None => {},\n-            }\n-\n-            debug!(\"--- lazily_emit_tydesc_glue VISIT {}\", ppaux::ty_to_string(ccx.tcx(), ti.ty));\n-            glue_fn\n-        }\n-    }\n-}\n-\n-// See [Note-arg-mode]\n-pub fn call_visit_glue(bcx: Block, v: ValueRef, tydesc: ValueRef) {\n-    let _icx = push_ctxt(\"call_visit_glue\");\n-\n-    // Select the glue function to call from the tydesc\n-    let llfn = Load(bcx, GEPi(bcx, tydesc, [0u, abi::tydesc_field_visit_glue]));\n-    let llrawptr = PointerCast(bcx, v, Type::i8p(bcx.ccx()));\n-\n-    Call(bcx, llfn, [llrawptr], None);\n-}\n-\n-fn make_visit_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v: ValueRef, t: ty::t)\n-                               -> Block<'blk, 'tcx> {\n-    let _icx = push_ctxt(\"make_visit_glue\");\n-    let mut bcx = bcx;\n-    let (visitor_trait, object_ty) = match ty::visitor_object_ty(bcx.tcx(),\n-                                                                 ty::ReStatic,\n-                                                                 ty::ReStatic) {\n-        Ok(pair) => pair,\n-        Err(s) => {\n-            bcx.tcx().sess.fatal(s.as_slice());\n-        }\n-    };\n-    let v = PointerCast(bcx, v, type_of(bcx.ccx(), object_ty).ptr_to());\n-    bcx = reflect::emit_calls_to_trait_visit_ty(bcx, t, v, visitor_trait.def_id);\n-    bcx\n-}\n-\n fn trans_struct_drop_flag<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                       t: ty::t,\n                                       v0: ValueRef,\n@@ -577,7 +510,6 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> tydesc_info {\n         size: llsize,\n         align: llalign,\n         name: ty_name,\n-        visit_glue: Cell::new(None),\n     }\n }\n \n@@ -643,27 +575,11 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n             llvm::LLVMConstPointerCast(get_drop_glue(ccx, ti.ty), glue_fn_ty.to_ref())\n         };\n         ccx.stats().n_real_glues.set(ccx.stats().n_real_glues.get() + 1);\n-        let visit_glue =\n-            match ti.visit_glue.get() {\n-              None => {\n-                  ccx.stats().n_null_glues.set(ccx.stats().n_null_glues.get() +\n-                                             1u);\n-                  C_null(glue_fn_ty)\n-              }\n-              Some(v) => {\n-                unsafe {\n-                    ccx.stats().n_real_glues.set(ccx.stats().n_real_glues.get() +\n-                                               1);\n-                    llvm::LLVMConstPointerCast(v, glue_fn_ty.to_ref())\n-                }\n-              }\n-            };\n \n         let tydesc = C_named_struct(ccx.tydesc_type(),\n                                     [ti.size, // size\n                                      ti.align, // align\n                                      drop_glue, // drop_glue\n-                                     visit_glue, // visit_glue\n                                      ti.name]); // name\n \n         unsafe {"}, {"sha": "cf47bbd2a526ec91c4a6d45cf49fec173808161f", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -269,7 +269,6 @@ pub fn trans_intrinsic_call<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>, node: ast::N\n         (_, \"get_tydesc\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n             let static_ti = get_tydesc(ccx, tp_ty);\n-            glue::lazily_emit_visit_glue(ccx, &*static_ti);\n \n             // FIXME (#3730): ideally this shouldn't need a cast,\n             // but there's a circularity between translating rust types to llvm"}, {"sha": "96c2c1f1450b8c5791133a124526f7ed238e0a11", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -17,7 +17,6 @@ use middle::trans::callee::ArgVals;\n use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::datum::*;\n-use middle::trans::glue;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::type_::Type;\n@@ -74,7 +73,6 @@ impl<'a, 'blk, 'tcx> Reflector<'a, 'blk, 'tcx> {\n     pub fn c_tydesc(&mut self, t: ty::t) -> ValueRef {\n         let bcx = self.bcx;\n         let static_ti = get_tydesc(bcx.ccx(), t);\n-        glue::lazily_emit_visit_glue(bcx.ccx(), &*static_ti);\n         PointerCast(bcx, static_ti.tydesc, self.tydesc_ty.ptr_to())\n     }\n "}, {"sha": "6acbde3b2adc95ad7088d9a10cae731a62b484e9", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -197,7 +197,6 @@ impl Type {\n         let elems = [int_ty,     // size\n                      int_ty,     // align\n                      glue_fn_ty, // drop\n-                     glue_fn_ty, // visit\n                      str_slice_ty]; // name\n         tydesc.set_struct_body(elems, false);\n "}, {"sha": "aa07b9a5034c7b99f355de1cbe0f64fc79dd9217", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7210a5af8716765f5ed9b71edc6f7e1719f71f18/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=7210a5af8716765f5ed9b71edc6f7e1719f71f18", "patch": "@@ -14,8 +14,6 @@ pub const box_field_refcnt: uint = 0u;\n pub const box_field_drop_glue: uint = 1u;\n pub const box_field_body: uint = 4u;\n \n-pub const tydesc_field_visit_glue: uint = 3u;\n-\n // The two halves of a closure: code and environment.\n pub const fn_field_code: uint = 0u;\n pub const fn_field_box: uint = 1u;"}]}