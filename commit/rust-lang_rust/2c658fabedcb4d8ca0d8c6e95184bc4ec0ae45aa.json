{"sha": "2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNjU4ZmFiZWRjYjRkOGNhMGQ4YzZlOTUxODRiYzRlYzBhZTQ1YWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T02:31:19Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-29T14:05:54Z"}, "message": "std: remove prettyprint\n\nEveryone uses fmt!(\"%?\", ...) instead of the prettyprint\nmodule, so I'm removing this file.", "tree": {"sha": "406f8b86f840b463068617c675467f5db7933b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/406f8b86f840b463068617c675467f5db7933b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa", "html_url": "https://github.com/rust-lang/rust/commit/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05e148dc954d7c1fb4666d4529653993a93eb1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05e148dc954d7c1fb4666d4529653993a93eb1d", "html_url": "https://github.com/rust-lang/rust/commit/b05e148dc954d7c1fb4666d4529653993a93eb1d"}], "stats": {"total": 221, "additions": 0, "deletions": 221}, "files": [{"sha": "ed4f3e957c02af8258f6762569a0039730ec3420", "filename": "src/libstd/prettyprint.rs", "status": "removed", "additions": 0, "deletions": 199, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/b05e148dc954d7c1fb4666d4529653993a93eb1d/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b05e148dc954d7c1fb4666d4529653993a93eb1d/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=b05e148dc954d7c1fb4666d4529653993a93eb1d", "patch": "@@ -1,199 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use serialize;\n-\n-use core::io::WriterUtil;\n-use core::io;\n-\n-pub struct Serializer {\n-    wr: @io::Writer,\n-}\n-\n-pub fn Serializer(wr: @io::Writer) -> Serializer {\n-    Serializer { wr: wr }\n-}\n-\n-impl serialize::Encoder for Serializer {\n-    fn emit_nil(&self) {\n-        self.wr.write_str(~\"()\")\n-    }\n-\n-    fn emit_uint(&self, v: uint) {\n-        self.wr.write_str(fmt!(\"%?u\", v));\n-    }\n-\n-    fn emit_u64(&self, v: u64) {\n-        self.wr.write_str(fmt!(\"%?_u64\", v));\n-    }\n-\n-    fn emit_u32(&self, v: u32) {\n-        self.wr.write_str(fmt!(\"%?_u32\", v));\n-    }\n-\n-    fn emit_u16(&self, v: u16) {\n-        self.wr.write_str(fmt!(\"%?_u16\", v));\n-    }\n-\n-    fn emit_u8(&self, v: u8) {\n-        self.wr.write_str(fmt!(\"%?_u8\", v));\n-    }\n-\n-    fn emit_int(&self, v: int) {\n-        self.wr.write_str(fmt!(\"%?\", v));\n-    }\n-\n-    fn emit_i64(&self, v: i64) {\n-        self.wr.write_str(fmt!(\"%?_i64\", v));\n-    }\n-\n-    fn emit_i32(&self, v: i32) {\n-        self.wr.write_str(fmt!(\"%?_i32\", v));\n-    }\n-\n-    fn emit_i16(&self, v: i16) {\n-        self.wr.write_str(fmt!(\"%?_i16\", v));\n-    }\n-\n-    fn emit_i8(&self, v: i8) {\n-        self.wr.write_str(fmt!(\"%?_i8\", v));\n-    }\n-\n-    fn emit_bool(&self, v: bool) {\n-        self.wr.write_str(fmt!(\"%b\", v));\n-    }\n-\n-    fn emit_float(&self, v: float) {\n-        self.wr.write_str(fmt!(\"%?_f\", v));\n-    }\n-\n-    fn emit_f64(&self, v: f64) {\n-        self.wr.write_str(fmt!(\"%?_f64\", v));\n-    }\n-\n-    fn emit_f32(&self, v: f32) {\n-        self.wr.write_str(fmt!(\"%?_f32\", v));\n-    }\n-\n-    fn emit_char(&self, v: char) {\n-        self.wr.write_str(fmt!(\"%?\", v));\n-    }\n-\n-    fn emit_borrowed_str(&self, v: &str) {\n-        self.wr.write_str(fmt!(\"&%?\", v));\n-    }\n-\n-    fn emit_owned_str(&self, v: &str) {\n-        self.wr.write_str(fmt!(\"~%?\", v));\n-    }\n-\n-    fn emit_managed_str(&self, v: &str) {\n-        self.wr.write_str(fmt!(\"@%?\", v));\n-    }\n-\n-    fn emit_borrowed(&self, f: &fn()) {\n-        self.wr.write_str(~\"&\");\n-        f();\n-    }\n-\n-    fn emit_owned(&self, f: &fn()) {\n-        self.wr.write_str(~\"~\");\n-        f();\n-    }\n-\n-    fn emit_managed(&self, f: &fn()) {\n-        self.wr.write_str(~\"@\");\n-        f();\n-    }\n-\n-    fn emit_enum(&self, _name: &str, f: &fn()) {\n-        f();\n-    }\n-\n-    fn emit_enum_variant(&self, v_name: &str, _v_id: uint, sz: uint,\n-                         f: &fn()) {\n-        self.wr.write_str(v_name);\n-        if sz > 0u { self.wr.write_str(~\"(\"); }\n-        f();\n-        if sz > 0u { self.wr.write_str(~\")\"); }\n-    }\n-\n-    fn emit_enum_variant_arg(&self, idx: uint, f: &fn()) {\n-        if idx > 0u { self.wr.write_str(~\", \"); }\n-        f();\n-    }\n-\n-    fn emit_borrowed_vec(&self, _len: uint, f: &fn()) {\n-        self.wr.write_str(~\"&[\");\n-        f();\n-        self.wr.write_str(~\"]\");\n-    }\n-\n-    fn emit_owned_vec(&self, _len: uint, f: &fn()) {\n-        self.wr.write_str(~\"~[\");\n-        f();\n-        self.wr.write_str(~\"]\");\n-    }\n-\n-    fn emit_managed_vec(&self, _len: uint, f: &fn()) {\n-        self.wr.write_str(~\"@[\");\n-        f();\n-        self.wr.write_str(~\"]\");\n-    }\n-\n-    fn emit_vec_elt(&self, idx: uint, f: &fn()) {\n-        if idx > 0u { self.wr.write_str(~\", \"); }\n-        f();\n-    }\n-\n-    fn emit_rec(&self, f: &fn()) {\n-        self.wr.write_str(~\"{\");\n-        f();\n-        self.wr.write_str(~\"}\");\n-    }\n-\n-    fn emit_struct(&self, name: &str, _len: uint, f: &fn()) {\n-        self.wr.write_str(fmt!(\"%s {\", name));\n-        f();\n-        self.wr.write_str(~\"}\");\n-    }\n-\n-    fn emit_field(&self, name: &str, idx: uint, f: &fn()) {\n-        if idx > 0u { self.wr.write_str(~\", \"); }\n-        self.wr.write_str(name);\n-        self.wr.write_str(~\": \");\n-        f();\n-    }\n-\n-    fn emit_tup(&self, _len: uint, f: &fn()) {\n-        self.wr.write_str(~\"(\");\n-        f();\n-        self.wr.write_str(~\")\");\n-    }\n-\n-    fn emit_tup_elt(&self, idx: uint, f: &fn()) {\n-        if idx > 0u { self.wr.write_str(~\", \"); }\n-        f();\n-    }\n-\n-    fn emit_option(&self, f: &fn()) {\n-        f();\n-    }\n-\n-    fn emit_option_none(&self) {\n-        self.wr.write_str(\"None\");\n-    }\n-\n-    fn emit_option_some(&self, f: &fn()) {\n-        self.wr.write_str(\"Some(\");\n-        f();\n-        self.wr.write_char(')');\n-    }\n-}"}, {"sha": "b28e2f0ab6df18c6098d02df7bfbf24dede7b4a1", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa", "patch": "@@ -88,7 +88,6 @@ pub mod md4;\n pub mod tempfile;\n pub mod term;\n pub mod time;\n-pub mod prettyprint;\n pub mod arena;\n pub mod par;\n pub mod cmp;"}, {"sha": "137213d815f6be575ebeb12083bc3082e764d5a5", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=2c658fabedcb4d8ca0d8c6e95184bc4ec0ae45aa", "patch": "@@ -22,21 +22,9 @@ use EBWriter = std::ebml::writer;\n use core::cmp::Eq;\n use core::io::Writer;\n use std::ebml;\n-use std::prettyprint;\n use std::serialize::{Encodable, Decodable};\n use std::time;\n \n-fn test_prettyprint<A:Encodable<prettyprint::Serializer>>(\n-    a: &A,\n-    expected: &~str\n-) {\n-    let s = do io::with_str_writer |w| {\n-        a.encode(&prettyprint::Serializer(w))\n-    };\n-    debug!(\"s == %?\", s);\n-    fail_unless!(s == *expected);\n-}\n-\n fn test_ebml<A:\n     Eq +\n     Encodable<EBWriter::Encoder> +\n@@ -149,36 +137,27 @@ enum CLike { A, B, C }\n \n pub fn main() {\n     let a = &Plus(@Minus(@Val(3u), @Val(10u)), @Plus(@Val(22u), @Val(5u)));\n-    test_prettyprint(a, &~\"Plus(@Minus(@Val(3u), @Val(10u)), \\\n-                           @Plus(@Val(22u), @Val(5u)))\");\n     test_ebml(a);\n \n     let a = &Spanned {lo: 0u, hi: 5u, node: 22u};\n-    test_prettyprint(a, &~\"Spanned {lo: 0u, hi: 5u, node: 22u}\");\n     test_ebml(a);\n \n     let a = &Point {x: 3u, y: 5u};\n-    test_prettyprint(a, &~\"Point {x: 3u, y: 5u}\");\n     test_ebml(a);\n \n     let a = &@[1u, 2u, 3u];\n-    test_prettyprint(a, &~\"@[1u, 2u, 3u]\");\n     test_ebml(a);\n \n     let a = &Top(22u);\n-    test_prettyprint(a, &~\"Top(22u)\");\n     test_ebml(a);\n \n     let a = &Bottom(222u);\n-    test_prettyprint(a, &~\"Bottom(222u)\");\n     test_ebml(a);\n \n     let a = &A;\n-    test_prettyprint(a, &~\"A\");\n     test_ebml(a);\n \n     let a = &B;\n-    test_prettyprint(a, &~\"B\");\n     test_ebml(a);\n \n     let a = &time::now();"}]}