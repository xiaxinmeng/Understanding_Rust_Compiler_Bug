{"sha": "1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNWFhYzJiMzA4NDQ1YzdhMDNjZGY5ZmY0YjU0NTdmN2FkYmYxZmI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T16:11:15Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libarena: use unboxed closures", "tree": {"sha": "38cae9e2c3cecffe441aa6944495c6bc4b035da4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38cae9e2c3cecffe441aa6944495c6bc4b035da4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "html_url": "https://github.com/rust-lang/rust/commit/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb/comments", "author": null, "committer": null, "parents": [{"sha": "341e7bc08bfab8fa3abe851501d72336b8556275", "url": "https://api.github.com/repos/rust-lang/rust/commits/341e7bc08bfab8fa3abe851501d72336b8556275", "html_url": "https://github.com/rust-lang/rust/commit/341e7bc08bfab8fa3abe851501d72336b8556275"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "1f4df1fd0a5a28e1199ac28ca10c0ec90bc39433", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "patch": "@@ -28,6 +28,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![feature(unsafe_destructor)]\n+#![feature(unboxed_closures)]\n #![allow(missing_docs)]\n \n extern crate alloc;\n@@ -209,7 +210,7 @@ impl Arena {\n     }\n \n     #[inline]\n-    fn alloc_copy<T>(&self, op: || -> T) -> &mut T {\n+    fn alloc_copy<T, F>(&self, op: F) -> &mut T where F: FnOnce() -> T {\n         unsafe {\n             let ptr = self.alloc_copy_inner(mem::size_of::<T>(),\n                                             mem::min_align_of::<T>());\n@@ -263,7 +264,7 @@ impl Arena {\n     }\n \n     #[inline]\n-    fn alloc_noncopy<T>(&self, op: || -> T) -> &mut T {\n+    fn alloc_noncopy<T, F>(&self, op: F) -> &mut T where F: FnOnce() -> T {\n         unsafe {\n             let tydesc = get_tydesc::<T>();\n             let (ty_ptr, ptr) =\n@@ -287,7 +288,7 @@ impl Arena {\n     /// Allocates a new item in the arena, using `op` to initialize the value,\n     /// and returns a reference to it.\n     #[inline]\n-    pub fn alloc<T>(&self, op: || -> T) -> &mut T {\n+    pub fn alloc<T, F>(&self, op: F) -> &mut T where F: FnOnce() -> T {\n         unsafe {\n             if intrinsics::needs_drop::<T>() {\n                 self.alloc_noncopy(op)\n@@ -339,7 +340,7 @@ fn test_arena_destructors_fail() {\n         arena.alloc(|| { [0u8, 1u8, 2u8] });\n     }\n     // Now, panic while allocating\n-    arena.alloc::<Rc<int>>(|| {\n+    arena.alloc::<Rc<int>, _>(|| {\n         panic!();\n     });\n }"}]}