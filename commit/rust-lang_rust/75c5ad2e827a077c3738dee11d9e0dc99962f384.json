{"sha": "75c5ad2e827a077c3738dee11d9e0dc99962f384", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YzVhZDJlODI3YTA3N2MzNzM4ZGVlMTFkOWUwZGM5OTk2MmYzODQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T16:39:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T16:40:26Z"}, "message": "review comments: use structured suggestion", "tree": {"sha": "fa4e6ca8f07c93cac7fef8242d094326c7ba0874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4e6ca8f07c93cac7fef8242d094326c7ba0874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c5ad2e827a077c3738dee11d9e0dc99962f384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c5ad2e827a077c3738dee11d9e0dc99962f384", "html_url": "https://github.com/rust-lang/rust/commit/75c5ad2e827a077c3738dee11d9e0dc99962f384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c5ad2e827a077c3738dee11d9e0dc99962f384/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c96d90c2081f3ca84b3786a125cf2c415335e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c96d90c2081f3ca84b3786a125cf2c415335e40", "html_url": "https://github.com/rust-lang/rust/commit/7c96d90c2081f3ca84b3786a125cf2c415335e40"}], "stats": {"total": 92, "additions": 52, "deletions": 40}, "files": [{"sha": "9a3195b1165b10d17798ae7f6f669aa56e7f0dc4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=75c5ad2e827a077c3738dee11d9e0dc99962f384", "patch": "@@ -6,6 +6,7 @@ use crate::config::StripUnconfigured;\n use crate::ext::base::*;\n use crate::ext::proc_macro::collect_derives;\n use crate::ext::hygiene::{ExpnId, SyntaxContext, ExpnInfo, ExpnKind};\n+use crate::ext::tt::macro_rules::annotate_err_with_kind;\n use crate::ext::placeholders::{placeholder, PlaceholderExpander};\n use crate::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use crate::mut_visit::*;\n@@ -701,21 +702,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             Err(mut err) => {\n                 err.set_span(span);\n-                match kind {\n-                    AstFragmentKind::Ty => {\n-                        err.span_label(\n-                            span,\n-                            \"this macro call doesn't expand to a type\",\n-                        );\n-                    }\n-                    AstFragmentKind::Pat => {\n-                        err.span_label(\n-                            span,\n-                            \"this macro call doesn't expand to a pattern\",\n-                        );\n-                    }\n-                    _ => {}\n-                };\n+                annotate_err_with_kind(&mut err, kind, span);\n                 err.emit();\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)"}, {"sha": "b057a9ad44d0bd966a71ab5998211d9baf36ac7a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=75c5ad2e827a077c3738dee11d9e0dc99962f384", "patch": "@@ -17,7 +17,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use crate::{ast, attr, attr::TransparencyError};\n \n-use errors::FatalError;\n+use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n use syntax_pos::Span;\n \n@@ -43,6 +43,18 @@ pub struct ParserAnyMacro<'a> {\n     arm_span: Span,\n }\n \n+pub fn annotate_err_with_kind(err: &mut DiagnosticBuilder<'_>, kind: AstFragmentKind, span: Span) {\n+    match kind {\n+        AstFragmentKind::Ty => {\n+            err.span_label(span, \"this macro call doesn't expand to a type\");\n+        }\n+        AstFragmentKind::Pat => {\n+            err.span_label(span, \"this macro call doesn't expand to a pattern\");\n+        }\n+        _ => {}\n+    };\n+}\n+\n impl<'a> ParserAnyMacro<'a> {\n     pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n@@ -71,27 +83,30 @@ impl<'a> ParserAnyMacro<'a> {\n                 e.span_label(site_span, \"in this macro invocation\");\n             }\n             match kind {\n-                AstFragmentKind::Ty => {\n-                    e.span_label(\n-                        site_span,\n-                        \"this macro call doesn't expand to a type\",\n-                    );\n-                }\n                 AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n-                    e.span_label(\n-                        site_span,\n-                        \"use a slice pattern here instead\",\n-                    );\n+                    let mut suggestion = None;\n+                    if let Ok(code) = parser.sess.source_map().span_to_snippet(site_span) {\n+                        if let Some(bang) = code.find('!') {\n+                            suggestion = Some(code[bang + 1..].to_string());\n+                        }\n+                    }\n+                    if let Some(suggestion) = suggestion {\n+                        e.span_suggestion(\n+                            site_span,\n+                            \"use a slice pattern here instead\",\n+                            suggestion,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        e.span_label(\n+                            site_span,\n+                            \"use a slice pattern here instead\",\n+                        );\n+                    }\n                     e.help(\"for more information, see https://doc.rust-lang.org/edition-guide/\\\n-                              rust-2018/slice-patterns.html\");\n-                }\n-                AstFragmentKind::Pat => {\n-                    e.span_label(\n-                        site_span,\n-                        \"this macro call doesn't expand to a pattern\",\n-                    );\n+                            rust-2018/slice-patterns.html\");\n                 }\n-                _ => {}\n+                _ => annotate_err_with_kind(&mut e, kind, site_span),\n             };\n             e\n         }));"}, {"sha": "e1695d6820a817d3ba6d5e4501484872579886c6", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed?ref=75c5ad2e827a077c3738dee11d9e0dc99962f384", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+    // everything after `.as_ref` should be suggested\n+    match Some(vec![3]).as_ref().map(|v| v.as_slice()) {\n+        Some([_x]) => (), //~ ERROR unexpected `(` after qualified path\n+        _ => (),\n+    }\n+}"}, {"sha": "4843629fbcf904788e0567d86717418ce7005794", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs?ref=75c5ad2e827a077c3738dee11d9e0dc99962f384", "patch": "@@ -1,6 +1,8 @@\n+// run-rustfix\n fn main() {\n-    match Some(vec![3]) {\n-        Some(vec![x]) => (), //~ ERROR unexpected `(` after qualified path\n+    // everything after `.as_ref` should be suggested\n+    match Some(vec![3]).as_ref().map(|v| v.as_slice()) {\n+        Some(vec![_x]) => (), //~ ERROR unexpected `(` after qualified path\n         _ => (),\n     }\n }"}, {"sha": "59ca8ebbf63399eb34928b67a59563c6521c7f39", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75c5ad2e827a077c3738dee11d9e0dc99962f384/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=75c5ad2e827a077c3738dee11d9e0dc99962f384", "patch": "@@ -1,12 +1,12 @@\n error: unexpected `(` after qualified path\n-  --> $DIR/vec-macro-in-pattern.rs:3:14\n+  --> $DIR/vec-macro-in-pattern.rs:5:14\n    |\n-LL |         Some(vec![x]) => (),\n-   |              ^^^^^^^\n+LL |         Some(vec![_x]) => (),\n+   |              ^^^^^^^^\n    |              |\n    |              unexpected `(` after qualified path\n    |              in this macro invocation\n-   |              use a slice pattern here instead\n+   |              help: use a slice pattern here instead: `[_x]`\n    |\n    = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}]}