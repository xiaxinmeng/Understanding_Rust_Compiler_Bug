{"sha": "fba3989052eb367814d61f0c8557ef5f2217657a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTM5ODkwNTJlYjM2NzgxNGQ2MWYwYzg1NTdlZjVmMjIxNzY1N2E=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:46:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:46:33Z"}, "message": "Rollup merge of #74062 - poliorcetics:unsafe-in-unsafe-c_str, r=Mark-Simulacrum\n\ndeny(unsafe_op_in_unsafe_fn) in libstd/ffi/c_str.rs\n\nPartial fix of #73904.\n\nThis encloses `unsafe` operations in `unsafe fn` in `libstd/ffi/c_str.rs`.", "tree": {"sha": "2502329f6c320b9d59198a61c3843affe8917eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2502329f6c320b9d59198a61c3843affe8917eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba3989052eb367814d61f0c8557ef5f2217657a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwY5CRBK7hj4Ov3rIwAAdHIIADSisJ1vJjPs4+xzBu8iiRZf\n3HJZdogt6Q4cqHv0bFaTG2kjrBGo4xDhzTu1aG0OXkD6hWtF+PLLGTsdluTVQWfh\nJuHcuQqjG35k9d6Ks2gqpw1eAc4LQmNMf1fpOjgiqc/BoiHDm/7ABzMytDbPg8s4\ns5f9Vzk7gnz11vJi1PD/OIUV3NLUpdCuErEoKJBn4g4KHxxofZHNukSSOvD3xsTv\nG2IlbnIA739fWq+1jeVXrzEbyR3WBeqX2lZyfoTE62PzbSU396xpfsKBb00sDOHB\nfNVmqjTfjbsE2Qku6sqaOBTcmobhuNfXM3vPC9G2UeOF/bQPV8Ek9Z4gxTxPGSk=\n=PGju\n-----END PGP SIGNATURE-----\n", "payload": "tree 2502329f6c320b9d59198a61c3843affe8917eb5\nparent f163ec5b18209bf8b58d3dbe6e9b48cfb07e8390\nparent e97fa1e3da60376cacb73a37d3f486bcccac9571\nauthor Tyler Mandry <tmandry@gmail.com> 1597441593 -0700\ncommitter GitHub <noreply@github.com> 1597441593 -0700\n\nRollup merge of #74062 - poliorcetics:unsafe-in-unsafe-c_str, r=Mark-Simulacrum\n\ndeny(unsafe_op_in_unsafe_fn) in libstd/ffi/c_str.rs\n\nPartial fix of #73904.\n\nThis encloses `unsafe` operations in `unsafe fn` in `libstd/ffi/c_str.rs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba3989052eb367814d61f0c8557ef5f2217657a", "html_url": "https://github.com/rust-lang/rust/commit/fba3989052eb367814d61f0c8557ef5f2217657a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba3989052eb367814d61f0c8557ef5f2217657a/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f163ec5b18209bf8b58d3dbe6e9b48cfb07e8390", "url": "https://api.github.com/repos/rust-lang/rust/commits/f163ec5b18209bf8b58d3dbe6e9b48cfb07e8390", "html_url": "https://github.com/rust-lang/rust/commit/f163ec5b18209bf8b58d3dbe6e9b48cfb07e8390"}, {"sha": "e97fa1e3da60376cacb73a37d3f486bcccac9571", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97fa1e3da60376cacb73a37d3f486bcccac9571", "html_url": "https://github.com/rust-lang/rust/commit/e97fa1e3da60376cacb73a37d3f486bcccac9571"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "8816262668761faefa1ffeb88853fb23ff1d0707", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fba3989052eb367814d61f0c8557ef5f2217657a/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba3989052eb367814d61f0c8557ef5f2217657a/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=fba3989052eb367814d61f0c8557ef5f2217657a", "patch": "@@ -1,3 +1,4 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n use crate::ascii;\n use crate::borrow::{Borrow, Cow};\n use crate::cmp::Ordering;\n@@ -510,9 +511,16 @@ impl CString {\n     /// ```\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n-        let len = sys::strlen(ptr) + 1; // Including the NUL byte\n-        let slice = slice::from_raw_parts_mut(ptr, len as usize);\n-        CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n+        // SAFETY: This is called with a pointer that was obtained from a call\n+        // to `CString::into_raw` and the length has not been modified. As such,\n+        // we know there is a NUL byte (and only one) at the end and that the\n+        // information about the size of the allocation is correct on Rust's\n+        // side.\n+        unsafe {\n+            let len = sys::strlen(ptr) + 1; // Including the NUL byte\n+            let slice = slice::from_raw_parts_mut(ptr, len as usize);\n+            CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n+        }\n     }\n \n     /// Consumes the `CString` and transfers ownership of the string to a C caller.\n@@ -1228,9 +1236,21 @@ impl CStr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n-        let len = sys::strlen(ptr);\n-        let ptr = ptr as *const u8;\n-        CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+        // SAFETY: The caller has provided a pointer that points to a valid C\n+        // string with a NUL terminator of size less than `isize::MAX`, whose\n+        // content remain valid and doesn't change for the lifetime of the\n+        // returned `CStr`.\n+        //\n+        // Thus computing the length is fine (a NUL byte exists), the call to\n+        // from_raw_parts is safe because we know the length is at most `isize::MAX`, meaning\n+        // the call to `from_bytes_with_nul_unchecked` is correct.\n+        //\n+        // The cast from c_char to u8 is ok because a c_char is always one byte.\n+        unsafe {\n+            let len = sys::strlen(ptr);\n+            let ptr = ptr as *const u8;\n+            CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+        }\n     }\n \n     /// Creates a C string wrapper from a byte slice.\n@@ -1299,7 +1319,12 @@ impl CStr {\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n-        &*(bytes as *const [u8] as *const CStr)\n+        // SAFETY: Casting to CStr is safe because its internal representation\n+        // is a [u8] too (safe only inside std).\n+        // Dereferencing the obtained pointer is safe because it comes from a\n+        // reference. Making a reference is then safe because its lifetime\n+        // is bound by the lifetime of the given `bytes`.\n+        unsafe { &*(bytes as *const [u8] as *const CStr) }\n     }\n \n     /// Returns the inner pointer to this C string."}]}