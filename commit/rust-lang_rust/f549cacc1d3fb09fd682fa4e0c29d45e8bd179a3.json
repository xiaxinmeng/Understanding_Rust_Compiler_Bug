{"sha": "f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3", "node_id": "C_kwDOAAsO6NoAKGY1NDljYWNjMWQzZmIwOWZkNjgyZmE0ZTBjMjlkNDVlOGJkMTc5YTM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-04T11:32:46Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-04T11:38:40Z"}, "message": "Destructure `InferenceResult` in `resolve_all()`\n\nso that whenever new fields are added we don't forget to handle them.", "tree": {"sha": "6568ea9565376832cb40e8bd527abb840b3fcc08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6568ea9565376832cb40e8bd527abb840b3fcc08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmR8d8AACgkQ4laYqTBY\nYXFUxA/8DSmHHXKUoEpdn+LLgP4RuUYfAYHW8roc0rE+5xwhxlOohPyXxbmRjN19\n2Mxn/IwD/KOnW932Q3Mj5cfjkDLcv3WpPkpkQeAVj38APSLxSpjeBzaAU7mDYYPO\nXYKzx/5YL5/JYa/latXWbU8f88Ke7HrNs2Ud3o6/lEBdTmiDzMsRZ5pQxhy/PxpD\nUixE8n+vp68IawZTmktCe+PAIA12AspnWofghXeoJZPx2cNhUDV38sCk7yP40K1I\n2IG4ddZ4m01xzMngXaGhGcK+cjWU0mmGG0SPRHkZaXOuDPZJxd4NSjvY6Q7qizal\nDcF6qNMFpXjofVGfrklakXKGGxIgo/bnKDL8s9eEuTPSFcJGQ1yso1hW4gvHPcy5\nrsscBchUwhC+bvXhsWBNvFUPbY9w6C7TBloI5P+QjvI2uEgO1w+BzeGAQOaFsEiT\njQ/8Sym56QCvCYPlPZAUIwSOLRUYYbn8BpevvdMddux17woeAIcRGqLJ5fo5uNlr\nqWaWyAm/lHwhLfsG/D6NSmMj6wV7E1u7ocpQjRwDZVn2F3zpj+RsUl2d5YLQKK0i\ncezosbon4Ez9Vuwal4xKDsMzYgPNs6ZkcQzqnpOCx1SkYBYzlYiwJDHLsgfQuGLh\ncRQvJGRHGyOr0YsLeUZ0SFWvT3SJhn36ZchNv1qVDF/ptSo3XGk=\n=jMc6\n-----END PGP SIGNATURE-----", "payload": "tree 6568ea9565376832cb40e8bd527abb840b3fcc08\nparent a3789eabc9281d29dce3c4199c971f0490074dfe\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1685878366 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685878720 +0900\n\nDestructure `InferenceResult` in `resolve_all()`\n\nso that whenever new fields are added we don't forget to handle them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3", "html_url": "https://github.com/rust-lang/rust/commit/f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3789eabc9281d29dce3c4199c971f0490074dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3789eabc9281d29dce3c4199c971f0490074dfe", "html_url": "https://github.com/rust-lang/rust/commit/a3789eabc9281d29dce3c4199c971f0490074dfe"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "80f32e96ee63f4b8cb712df1d04e7edb84687e8a", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=f549cacc1d3fb09fd682fa4e0c29d45e8bd179a3", "patch": "@@ -579,9 +579,31 @@ impl<'a> InferenceContext<'a> {\n     // used this function for another workaround, mention it here. If you really need this function and believe that\n     // there is no problem in it being `pub(crate)`, remove this comment.\n     pub(crate) fn resolve_all(self) -> InferenceResult {\n-        // NOTE: `InferenceResult::closure_info` is `resolve_completely()`'d during\n-        // `InferenceContext::infer_closures()` (in `HirPlace::ty()` specifically).\n         let InferenceContext { mut table, mut result, .. } = self;\n+        // Destructure every single field so whenever new fields are added to `InferenceResult` we\n+        // don't forget to handle them here.\n+        let InferenceResult {\n+            method_resolutions,\n+            field_resolutions: _,\n+            variant_resolutions: _,\n+            assoc_resolutions,\n+            diagnostics,\n+            type_of_expr,\n+            type_of_pat,\n+            type_of_binding,\n+            type_of_rpit,\n+            type_of_for_iterator,\n+            type_mismatches,\n+            standard_types: _,\n+            pat_adjustments,\n+            binding_modes: _,\n+            expr_adjustments,\n+            // Types in `closure_info` have already been `resolve_completely()`'d during\n+            // `InferenceContext::infer_closures()` (in `HirPlace::ty()` specifically), so no need\n+            // to resolve them here.\n+            closure_info: _,\n+            mutated_bindings_in_closure: _,\n+        } = &mut result;\n \n         table.fallback_if_possible();\n \n@@ -590,26 +612,26 @@ impl<'a> InferenceContext<'a> {\n \n         // make sure diverging type variables are marked as such\n         table.propagate_diverging_flag();\n-        for ty in result.type_of_expr.values_mut() {\n+        for ty in type_of_expr.values_mut() {\n             *ty = table.resolve_completely(ty.clone());\n         }\n-        for ty in result.type_of_pat.values_mut() {\n+        for ty in type_of_pat.values_mut() {\n             *ty = table.resolve_completely(ty.clone());\n         }\n-        for ty in result.type_of_binding.values_mut() {\n+        for ty in type_of_binding.values_mut() {\n             *ty = table.resolve_completely(ty.clone());\n         }\n-        for ty in result.type_of_rpit.values_mut() {\n+        for ty in type_of_rpit.values_mut() {\n             *ty = table.resolve_completely(ty.clone());\n         }\n-        for ty in result.type_of_for_iterator.values_mut() {\n+        for ty in type_of_for_iterator.values_mut() {\n             *ty = table.resolve_completely(ty.clone());\n         }\n-        for mismatch in result.type_mismatches.values_mut() {\n+        for mismatch in type_mismatches.values_mut() {\n             mismatch.expected = table.resolve_completely(mismatch.expected.clone());\n             mismatch.actual = table.resolve_completely(mismatch.actual.clone());\n         }\n-        result.diagnostics.retain_mut(|diagnostic| {\n+        diagnostics.retain_mut(|diagnostic| {\n             use InferenceDiagnostic::*;\n             match diagnostic {\n                 ExpectedFunction { found: ty, .. }\n@@ -637,16 +659,16 @@ impl<'a> InferenceContext<'a> {\n             }\n             true\n         });\n-        for (_, subst) in result.method_resolutions.values_mut() {\n+        for (_, subst) in method_resolutions.values_mut() {\n             *subst = table.resolve_completely(subst.clone());\n         }\n-        for (_, subst) in result.assoc_resolutions.values_mut() {\n+        for (_, subst) in assoc_resolutions.values_mut() {\n             *subst = table.resolve_completely(subst.clone());\n         }\n-        for adjustment in result.expr_adjustments.values_mut().flatten() {\n+        for adjustment in expr_adjustments.values_mut().flatten() {\n             adjustment.target = table.resolve_completely(adjustment.target.clone());\n         }\n-        for adjustment in result.pat_adjustments.values_mut().flatten() {\n+        for adjustment in pat_adjustments.values_mut().flatten() {\n             *adjustment = table.resolve_completely(adjustment.clone());\n         }\n         result"}]}