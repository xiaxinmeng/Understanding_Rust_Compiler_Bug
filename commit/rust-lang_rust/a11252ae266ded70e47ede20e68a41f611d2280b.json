{"sha": "a11252ae266ded70e47ede20e68a41f611d2280b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMTI1MmFlMjY2ZGVkNzBlNDdlZGUyMGU2OGE0MWY2MTFkMjI4MGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T08:29:17Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract recover_paren_lifetime", "tree": {"sha": "943adaa7bd43d804ba2fbe2dc25d6ebb9ece26bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943adaa7bd43d804ba2fbe2dc25d6ebb9ece26bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a11252ae266ded70e47ede20e68a41f611d2280b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a11252ae266ded70e47ede20e68a41f611d2280b", "html_url": "https://github.com/rust-lang/rust/commit/a11252ae266ded70e47ede20e68a41f611d2280b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a11252ae266ded70e47ede20e68a41f611d2280b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b484faefab8bfd27d7ccf28aa5597e85591d2a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/b484faefab8bfd27d7ccf28aa5597e85591d2a90", "html_url": "https://github.com/rust-lang/rust/commit/b484faefab8bfd27d7ccf28aa5597e85591d2a90"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "2b642ad2de7a37144e64b203f7e314a5da07a1c4", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a11252ae266ded70e47ede20e68a41f611d2280b/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a11252ae266ded70e47ede20e68a41f611d2280b/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=a11252ae266ded70e47ede20e68a41f611d2280b", "patch": "@@ -386,21 +386,7 @@ impl<'a> Parser<'a> {\n                     self.error_opt_out_lifetime(question);\n                     bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n                     if has_parens {\n-                        let inner_span = inner_lo.to(self.prev_span);\n-                        self.expect(&token::CloseDelim(token::Paren))?;\n-                        let mut err = self.struct_span_err(\n-                            lo.to(self.prev_span),\n-                            \"parenthesized lifetime bounds are not supported\"\n-                        );\n-                        if let Ok(snippet) = self.span_to_snippet(inner_span) {\n-                            err.span_suggestion_short(\n-                                lo.to(self.prev_span),\n-                                \"remove the parentheses\",\n-                                snippet.to_owned(),\n-                                Applicability::MachineApplicable\n-                            );\n-                        }\n-                        err.emit();\n+                        self.recover_paren_lifetime(lo, inner_lo)?;\n                     }\n                 } else {\n                     let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n@@ -477,6 +463,26 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Recover on `('lifetime)` with `(` already eaten.\n+    fn recover_paren_lifetime(&mut self, lo: Span, inner_lo: Span) -> PResult<'a, ()> {\n+        let inner_span = inner_lo.to(self.prev_span);\n+        self.expect(&token::CloseDelim(token::Paren))?;\n+        let mut err = self.struct_span_err(\n+            lo.to(self.prev_span),\n+            \"parenthesized lifetime bounds are not supported\"\n+        );\n+        if let Ok(snippet) = self.span_to_snippet(inner_span) {\n+            err.span_suggestion_short(\n+                lo.to(self.prev_span),\n+                \"remove the parentheses\",\n+                snippet.to_owned(),\n+                Applicability::MachineApplicable\n+            );\n+        }\n+        err.emit();\n+        Ok(())\n+    }\n+\n     pub(super) fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n         if self.eat_keyword(kw::For) {\n             self.expect_lt()?;"}]}