{"sha": "ab3081a70e5d402188c26c6f3e671a3c44812d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMzA4MWE3MGU1ZDQwMjE4OGMyNmM2ZjNlNjcxYTNjNDQ4MTJkMWI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-14T04:30:31Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T08:00:08Z"}, "message": "Add `constness` field to `ty::Predicate::Trait`", "tree": {"sha": "43b03f1f2ae32691a5225969785e551a37d6257f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b03f1f2ae32691a5225969785e551a37d6257f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3081a70e5d402188c26c6f3e671a3c44812d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3081a70e5d402188c26c6f3e671a3c44812d1b", "html_url": "https://github.com/rust-lang/rust/commit/ab3081a70e5d402188c26c6f3e671a3c44812d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3081a70e5d402188c26c6f3e671a3c44812d1b/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a3bd5775f8b8a1354ec703acf3a3a07e5f8b7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3bd5775f8b8a1354ec703acf3a3a07e5f8b7c2", "html_url": "https://github.com/rust-lang/rust/commit/1a3bd5775f8b8a1354ec703acf3a3a07e5f8b7c2"}], "stats": {"total": 159, "additions": 104, "deletions": 55}, "files": [{"sha": "c97c5c2077f85f4f30d5fcea41b51f76a5013fdb", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -337,7 +337,10 @@ impl AutoTraitFinder<'tcx> {\n                 &Err(SelectionError::Unimplemented) => {\n                     if self.is_param_no_infer(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n-                        self.add_user_pred(&mut user_computed_preds, ty::Predicate::Trait(pred));\n+                        self.add_user_pred(\n+                            &mut user_computed_preds,\n+                            ty::Predicate::Trait(pred, ast::Constness::NotConst),\n+                        );\n                         predicates.push_back(pred);\n                     } else {\n                         debug!(\n@@ -405,7 +408,7 @@ impl AutoTraitFinder<'tcx> {\n         let mut should_add_new = true;\n         user_computed_preds.retain(|&old_pred| {\n             match (&new_pred, old_pred) {\n-                (&ty::Predicate::Trait(new_trait), ty::Predicate::Trait(old_trait)) => {\n+                (&ty::Predicate::Trait(new_trait, _), ty::Predicate::Trait(old_trait, _)) => {\n                     if new_trait.def_id() == old_trait.def_id() {\n                         let new_substs = new_trait.skip_binder().trait_ref.substs;\n                         let old_substs = old_trait.skip_binder().trait_ref.substs;\n@@ -627,7 +630,7 @@ impl AutoTraitFinder<'tcx> {\n             // We check this by calling is_of_param on the relevant types\n             // from the various possible predicates\n             match &predicate {\n-                &ty::Predicate::Trait(p) => {\n+                &ty::Predicate::Trait(p, _) => {\n                     if self.is_param_no_infer(p.skip_binder().trait_ref.substs)\n                         && !only_projections\n                         && is_new_pred"}, {"sha": "1dbf53003585fcd5a274070fb765cf3661bee3db", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n         }\n \n         match obligation.predicate {\n-            ty::Predicate::Trait(ref data) => {\n+            ty::Predicate::Trait(ref data, _) => {\n                 let trait_obligation = obligation.with(data.clone());\n \n                 if data.is_global() {"}, {"sha": "ad6b821b1d771edf2b5c60166a125d6fe68a22c7", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -234,7 +234,7 @@ fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_o\n         .map(|(predicate, _)| predicate.subst_supertrait(tcx, &trait_ref))\n         .any(|predicate| {\n             match predicate {\n-                ty::Predicate::Trait(ref data) => {\n+                ty::Predicate::Trait(ref data, _) => {\n                     // In the case of a trait predicate, we can skip the \"self\" type.\n                     data.skip_binder().input_types().skip(1).any(has_self_ty)\n                 }\n@@ -285,7 +285,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let predicates = tcx.predicates_of(def_id);\n     let predicates = predicates.instantiate_identity(tcx).predicates;\n     elaborate_predicates(tcx, predicates).any(|predicate| match predicate {\n-        ty::Predicate::Trait(ref trait_pred) => {\n+        ty::Predicate::Trait(ref trait_pred, _) => {\n             trait_pred.def_id() == sized_def_id && trait_pred.skip_binder().self_ty().is_param(0)\n         }\n         ty::Predicate::Projection(..)"}, {"sha": "15870ec95d8d28b168a13d78a0b15ac2d3026ba0", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -24,7 +24,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n         // `&T`, accounts for about 60% percentage of the predicates\n         // we have to prove. No need to canonicalize and all that for\n         // such cases.\n-        if let Predicate::Trait(trait_ref) = key.value.predicate {\n+        if let Predicate::Trait(trait_ref, _) = key.value.predicate {\n             if let Some(sized_def_id) = tcx.lang_items().sized_trait() {\n                 if trait_ref.def_id() == sized_def_id {\n                     if trait_ref.skip_binder().self_ty().is_trivially_sized(tcx) {"}, {"sha": "9db907e88fab85651fcf4d667b3f238646c67b0c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -51,7 +51,7 @@ use std::cmp;\n use std::fmt::{self, Display};\n use std::iter;\n use std::rc::Rc;\n-use syntax::attr;\n+use syntax::{ast, attr};\n \n pub struct SelectionContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n@@ -718,7 +718,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         match obligation.predicate {\n-            ty::Predicate::Trait(ref t) => {\n+            ty::Predicate::Trait(ref t, _) => {\n                 debug_assert!(!t.has_escaping_bound_vars());\n                 let obligation = obligation.with(t.clone());\n                 self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n@@ -945,7 +945,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // trait refs. This is important because it's only a cycle\n             // if the regions match exactly.\n             let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);\n-            let cycle = cycle.map(|stack| ty::Predicate::Trait(stack.obligation.predicate));\n+            let cycle = cycle.map(|stack| {\n+                ty::Predicate::Trait(stack.obligation.predicate, ast::Constness::NotConst)\n+            });\n             if self.coinductive_match(cycle) {\n                 debug!(\"evaluate_stack({:?}) --> recursive, coinductive\", stack.fresh_trait_ref);\n                 Some(EvaluatedToOk)\n@@ -1060,7 +1062,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n         let result = match predicate {\n-            ty::Predicate::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),\n+            ty::Predicate::Trait(ref data, _) => self.tcx().trait_is_auto(data.def_id()),\n             _ => false,\n         };\n         debug!(\"coinductive_predicate({:?}) = {:?}\", predicate, result);"}, {"sha": "a5a16a147122575ee34040db1cbbbf8a9c537a15", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -13,8 +13,8 @@ use super::{Normalized, Obligation, ObligationCause, PredicateObligation, Select\n \n fn anonymize_predicate<'tcx>(tcx: TyCtxt<'tcx>, pred: &ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n     match *pred {\n-        ty::Predicate::Trait(ref data) => {\n-            ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data))\n+        ty::Predicate::Trait(ref data, constness) => {\n+            ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data), constness)\n         }\n \n         ty::Predicate::RegionOutlives(ref data) => {\n@@ -127,7 +127,7 @@ impl Elaborator<'tcx> {\n     fn elaborate(&mut self, predicate: &ty::Predicate<'tcx>) {\n         let tcx = self.visited.tcx;\n         match *predicate {\n-            ty::Predicate::Trait(ref data) => {\n+            ty::Predicate::Trait(ref data, _) => {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n@@ -471,7 +471,7 @@ impl<'tcx, I: Iterator<Item = ty::Predicate<'tcx>>> Iterator for FilterToTraits<\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         while let Some(pred) = self.base_iterator.next() {\n-            if let ty::Predicate::Trait(data) = pred {\n+            if let ty::Predicate::Trait(data, _) = pred {\n                 return Some(data.to_poly_trait_ref());\n             }\n         }"}, {"sha": "aba09c3c8185006495db0a8ef055392a5096c29d", "filename": "src/librustc/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -62,7 +62,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n \n     // (*) ok to skip binders, because wf code is prepared for it\n     match *predicate {\n-        ty::Predicate::Trait(ref t) => {\n+        ty::Predicate::Trait(ref t, _) => {\n             wf.compute_trait_ref(&t.skip_binder().trait_ref, Elaborate::None); // (*)\n         }\n         ty::Predicate::RegionOutlives(..) => {}\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    ty::Predicate::Trait(proj) => {\n+                    ty::Predicate::Trait(proj, _) => {\n                         // An associated item obligation born out of the `trait` failed to be met.\n                         // Point at the `impl` that failed the obligation, the associated item that\n                         // needed to meet the obligation, and the definition of that associated item,"}, {"sha": "0dddca98c62576842301b9dee6fec6720c9b08bd", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -150,6 +150,15 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n+impl TypeFoldable<'tcx> for syntax::ast::Constness {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n+        *self\n+    }\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n+        false\n+    }\n+}\n+\n /// The `TypeFolder` trait defines the actual *folding*. There is a\n /// method defined for every foldable type. Each of these has a\n /// default implementation that does an \"identity\" fold. Within each"}, {"sha": "c5fbf2896a4a16b12bed7f36684cdf8a786982b3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -1068,7 +1068,11 @@ pub enum Predicate<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n     /// would be the type parameters.\n-    Trait(PolyTraitPredicate<'tcx>),\n+    ///\n+    /// A trait predicate will have `Constness::Const` if it originates\n+    /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n+    /// `const fn foobar<Foo: Bar>() {}`).\n+    Trait(PolyTraitPredicate<'tcx>, ast::Constness),\n \n     /// `where 'a: 'b`\n     RegionOutlives(PolyRegionOutlivesPredicate<'tcx>),\n@@ -1191,8 +1195,8 @@ impl<'tcx> Predicate<'tcx> {\n \n         let substs = &trait_ref.skip_binder().substs;\n         match *self {\n-            Predicate::Trait(ref binder) => {\n-                Predicate::Trait(binder.map_bound(|data| data.subst(tcx, substs)))\n+            Predicate::Trait(ref binder, constness) => {\n+                Predicate::Trait(binder.map_bound(|data| data.subst(tcx, substs)), constness)\n             }\n             Predicate::Subtype(ref binder) => {\n                 Predicate::Subtype(binder.map_bound(|data| data.subst(tcx, substs)))\n@@ -1338,13 +1342,16 @@ pub trait ToPredicate<'tcx> {\n \n impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n-        ty::Predicate::Trait(ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.clone() }))\n+        ty::Predicate::Trait(\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.clone() }),\n+            ast::Constness::NotConst,\n+        )\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTraitRef<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n-        ty::Predicate::Trait(self.to_poly_trait_predicate())\n+        ty::Predicate::Trait(self.to_poly_trait_predicate(), ast::Constness::NotConst)\n     }\n }\n \n@@ -1413,7 +1420,7 @@ impl<'tcx> Predicate<'tcx> {\n     /// with depth 0 are bound by the predicate.\n     pub fn walk_tys(&'a self) -> impl Iterator<Item = Ty<'tcx>> + 'a {\n         match *self {\n-            ty::Predicate::Trait(ref data) => {\n+            ty::Predicate::Trait(ref data, _) => {\n                 WalkTysIter::InputTypes(data.skip_binder().input_types())\n             }\n             ty::Predicate::Subtype(binder) => {\n@@ -1439,7 +1446,7 @@ impl<'tcx> Predicate<'tcx> {\n \n     pub fn to_opt_poly_trait_ref(&self) -> Option<PolyTraitRef<'tcx>> {\n         match *self {\n-            Predicate::Trait(ref t) => Some(t.to_poly_trait_ref()),\n+            Predicate::Trait(ref t, _) => Some(t.to_poly_trait_ref()),\n             Predicate::Projection(..)\n             | Predicate::Subtype(..)\n             | Predicate::RegionOutlives(..)"}, {"sha": "9091de55b7d8ea5f4762e9f3f25e3a239c7170c3", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -1791,7 +1791,12 @@ define_print_and_forward_display! {\n \n     ty::Predicate<'tcx> {\n         match *self {\n-            ty::Predicate::Trait(ref data) => p!(print(data)),\n+            ty::Predicate::Trait(ref data, constness) => {\n+                if let ast::Constness::Const = constness {\n+                    p!(write(\"const \"));\n+                }\n+                p!(print(data))\n+            }\n             ty::Predicate::Subtype(ref predicate) => p!(print(predicate)),\n             ty::Predicate::RegionOutlives(ref predicate) => p!(print(predicate)),\n             ty::Predicate::TypeOutlives(ref predicate) => p!(print(predicate)),"}, {"sha": "25f9dc5b0c7bfec208097dbe1328f3a6257085bf", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -15,6 +15,7 @@ use smallvec::SmallVec;\n use std::fmt;\n use std::rc::Rc;\n use std::sync::Arc;\n+use syntax::ast;\n \n impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -234,7 +235,12 @@ impl fmt::Debug for ty::ProjectionPredicate<'tcx> {\n impl fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            ty::Predicate::Trait(ref a) => a.fmt(f),\n+            ty::Predicate::Trait(ref a, constness) => {\n+                if let ast::Constness::Const = constness {\n+                    write!(f, \"const \")?;\n+                }\n+                a.fmt(f)\n+            }\n             ty::Predicate::Subtype(ref pair) => pair.fmt(f),\n             ty::Predicate::RegionOutlives(ref pair) => pair.fmt(f),\n             ty::Predicate::TypeOutlives(ref pair) => pair.fmt(f),\n@@ -474,7 +480,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n     type Lifted = ty::Predicate<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         match *self {\n-            ty::Predicate::Trait(ref binder) => tcx.lift(binder).map(ty::Predicate::Trait),\n+            ty::Predicate::Trait(ref binder, constness) => {\n+                tcx.lift(binder).map(|binder| ty::Predicate::Trait(binder, constness))\n+            }\n             ty::Predicate::Subtype(ref binder) => tcx.lift(binder).map(ty::Predicate::Subtype),\n             ty::Predicate::RegionOutlives(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::RegionOutlives)"}, {"sha": "15158c09af0743274d5c4b3b7e089fb981676c73", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n-                        if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n+                        if let ty::Predicate::Trait(ref poly_trait_predicate, _) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;\n                             let descr_pre ="}, {"sha": "8f00801eb25a303c1693e6c806116c06f3981ecc", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -33,6 +33,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::{Span, DUMMY_SP};\n+use syntax::ast;\n \n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;\n@@ -1931,12 +1932,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                         traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                     ),\n                                     self.param_env,\n-                                    ty::Predicate::Trait(ty::Binder::bind(ty::TraitPredicate {\n-                                        trait_ref: ty::TraitRef::new(\n-                                            self.tcx().lang_items().copy_trait().unwrap(),\n-                                            tcx.mk_substs_trait(ty, &[]),\n-                                        ),\n-                                    })),\n+                                    ty::Predicate::Trait(\n+                                        ty::Binder::bind(ty::TraitPredicate {\n+                                            trait_ref: ty::TraitRef::new(\n+                                                self.tcx().lang_items().copy_trait().unwrap(),\n+                                                tcx.mk_substs_trait(ty, &[]),\n+                                            ),\n+                                        }),\n+                                        ast::Constness::NotConst,\n+                                    ),\n                                 ),\n                                 &traits::SelectionError::Unimplemented,\n                                 false,\n@@ -2574,7 +2578,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n     ) {\n         self.prove_predicates(\n-            Some(ty::Predicate::Trait(trait_ref.to_poly_trait_ref().to_poly_trait_predicate())),\n+            Some(ty::Predicate::Trait(\n+                trait_ref.to_poly_trait_ref().to_poly_trait_predicate(),\n+                ast::Constness::NotConst,\n+            )),\n             locations,\n             category,\n         );"}, {"sha": "b047e534e4f1ce4a38838e8408b5bf6cc635af48", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n-use syntax::attr;\n+use syntax::{ast, attr};\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n@@ -27,12 +27,19 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                     bug!(\"closure kind predicate on function: {:#?}\", predicate)\n                 }\n                 Predicate::Subtype(_) => bug!(\"subtype predicate on function: {:#?}\", predicate),\n-                Predicate::Trait(pred) => {\n+                Predicate::Trait(pred, constness) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n                     }\n                     match pred.skip_binder().self_ty().kind {\n                         ty::Param(ref p) => {\n+                            // Allow `T: ?const Trait`\n+                            if *constness == ast::Constness::NotConst\n+                                && feature_allowed(tcx, def_id, sym::const_trait_bound_opt_out)\n+                            {\n+                                continue;\n+                            }\n+\n                             let generics = tcx.generics_of(current);\n                             let def = generics.type_param(p, tcx);\n                             let span = tcx.def_span(def.def_id);"}, {"sha": "4b2e90ed83de2df5c12df24ffc29eb8b13c057fe", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -93,7 +93,7 @@ where\n         let ty::GenericPredicates { parent: _, predicates } = predicates;\n         for (predicate, _span) in predicates {\n             match predicate {\n-                ty::Predicate::Trait(poly_predicate) => {\n+                ty::Predicate::Trait(poly_predicate, _) => {\n                     let ty::TraitPredicate { trait_ref } = *poly_predicate.skip_binder();\n                     if self.visit_trait(trait_ref) {\n                         return true;"}, {"sha": "b77c603da9a74a58ad9ac6cbe25872da0187ba6f", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> Lower<PolyDomainGoal<'tcx>> for ty::Predicate<'tcx> {\n         use rustc::ty::Predicate;\n \n         match self {\n-            Predicate::Trait(predicate) => predicate.lower(),\n+            Predicate::Trait(predicate, _) => predicate.lower(),\n             Predicate::RegionOutlives(predicate) => predicate.lower(),\n             Predicate::TypeOutlives(predicate) => predicate.lower(),\n             Predicate::Projection(predicate) => predicate.lower(),"}, {"sha": "7f196b2c4d35257d7d1bd7f0cb23bb844a88696e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -1490,7 +1490,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     trait_ref\n                 );\n                 match trait_ref {\n-                    ty::Predicate::Trait(pred) => {\n+                    ty::Predicate::Trait(pred, constness) => {\n                         associated_types.entry(span).or_default().extend(\n                             tcx.associated_items(pred.def_id())\n                                 .filter(|item| item.kind == ty::AssocKind::Type)"}, {"sha": "087b720a2f4c4bd98235c7b8672557d95f94c8f1", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -565,7 +565,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_ref = match obligation.predicate {\n-                ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => {\n+                ty::Predicate::Trait(ref tr, _) if traits.contains(&tr.def_id()) => {\n                     if unsize_did == tr.def_id() {\n                         let sty = &tr.skip_binder().input_types().nth(1).unwrap().kind;\n                         if let ty::Tuple(..) = sty {"}, {"sha": "a88dca008d751a1f1719a0eefaee48dfa34c3f2b", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -234,7 +234,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         let predicate_matches_closure = |p: &'_ Predicate<'tcx>| {\n             let mut relator: SimpleEqRelation<'tcx> = SimpleEqRelation::new(tcx, self_param_env);\n             match (predicate, p) {\n-                (Predicate::Trait(a), Predicate::Trait(b)) => relator.relate(a, b).is_ok(),\n+                (Predicate::Trait(a, _), Predicate::Trait(b, _)) => relator.relate(a, b).is_ok(),\n                 (Predicate::Projection(a), Predicate::Projection(b)) => {\n                     relator.relate(a, b).is_ok()\n                 }"}, {"sha": "2012a2a1526b1c440e00b8f813448c5f6769e767", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -569,7 +569,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         traits::elaborate_predicates(self.tcx, predicates.predicates.clone())\n             .filter_map(|predicate| match predicate {\n-                ty::Predicate::Trait(trait_pred) if trait_pred.def_id() == sized_def_id => {\n+                ty::Predicate::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n                     Some(trait_pred)\n                 }\n                 _ => None,"}, {"sha": "67526bb70d12572310de822ebfae10f03d6566ae", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -826,7 +826,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // FIXME: do we want to commit to this behavior for param bounds?\n \n         let bounds = self.param_env.caller_bounds.iter().filter_map(|predicate| match *predicate {\n-            ty::Predicate::Trait(ref trait_predicate) => {\n+            ty::Predicate::Trait(ref trait_predicate, _) => {\n                 match trait_predicate.skip_binder().trait_ref.self_ty().kind {\n                     ty::Param(ref p) if *p == param_ty => Some(trait_predicate.to_poly_trait_ref()),\n                     _ => None,\n@@ -1430,7 +1430,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 let o = self.resolve_vars_if_possible(&o);\n                 if !self.predicate_may_hold(&o) {\n                     result = ProbeResult::NoMatch;\n-                    if let &ty::Predicate::Trait(ref pred) = &o.predicate {\n+                    if let &ty::Predicate::Trait(ref pred, _) = &o.predicate {\n                         possibly_unsatisfied_predicates.push(pred.skip_binder().trait_ref);\n                     }\n                 }"}, {"sha": "7c1876f5d449c1ab5c4588d1f50c94df6b5203e7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -2623,7 +2623,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n             parent: None,\n             predicates: tcx.arena.alloc_from_iter(self.param_env.caller_bounds.iter().filter_map(\n                 |&predicate| match predicate {\n-                    ty::Predicate::Trait(ref data)\n+                    ty::Predicate::Trait(ref data, _)\n                         if data.skip_binder().self_ty().is_param(index) =>\n                     {\n                         // HACK(eddyb) should get the original `Span`.\n@@ -3695,7 +3695,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Predicate::Projection(ref data) => {\n                     Some((data.to_poly_trait_ref(self.tcx), obligation))\n                 }\n-                ty::Predicate::Trait(ref data) => Some((data.to_poly_trait_ref(), obligation)),\n+                ty::Predicate::Trait(ref data, _) => Some((data.to_poly_trait_ref(), obligation)),\n                 ty::Predicate::Subtype(..) => None,\n                 ty::Predicate::RegionOutlives(..) => None,\n                 ty::Predicate::TypeOutlives(..) => None,\n@@ -3998,7 +3998,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 continue;\n             }\n \n-            if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+            if let ty::Predicate::Trait(predicate, _) = error.obligation.predicate {\n                 // Collect the argument position for all arguments that could have caused this\n                 // `FulfillmentError`.\n                 let mut referenced_in = final_arg_types\n@@ -4042,7 +4042,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let hir::ExprKind::Path(qpath) = &path.kind {\n                 if let hir::QPath::Resolved(_, path) = &qpath {\n                     for error in errors {\n-                        if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                        if let ty::Predicate::Trait(predicate, _) = error.obligation.predicate {\n                             // If any of the type arguments in this path segment caused the\n                             // `FullfillmentError`, point at its span (#61860).\n                             for arg in path"}, {"sha": "35f9a4fa68e110a0a787877e56de288f887b4299", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -432,7 +432,7 @@ fn type_param_predicates(\n         icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, OnlySelfBounds(true))\n             .into_iter()\n             .filter(|(predicate, _)| match predicate {\n-                ty::Predicate::Trait(ref data) => data.skip_binder().self_ty().is_param(index),\n+                ty::Predicate::Trait(ref data, _) => data.skip_binder().self_ty().is_param(index),\n                 _ => false,\n             }),\n     );\n@@ -857,7 +857,7 @@ fn super_predicates_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> ty::GenericPredi\n     // which will, in turn, reach indirect supertraits.\n     for &(pred, span) in superbounds {\n         debug!(\"superbound: {:?}\", pred);\n-        if let ty::Predicate::Trait(bound) = pred {\n+        if let ty::Predicate::Trait(bound, _) = pred {\n             tcx.at(span).super_predicates_of(bound.def_id());\n         }\n     }"}, {"sha": "27f8059691a14040701622ecbada80a9c5efb7e1", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .filter(|p| {\n                 !orig_bounds.contains(p)\n                     || match p {\n-                        &&ty::Predicate::Trait(pred) => pred.def_id() == sized_trait,\n+                        ty::Predicate::Trait(pred, _) => pred.def_id() == sized_trait,\n                         _ => false,\n                     }\n             })"}, {"sha": "7a7d69c68a585aaacae347bf9de867799e99ef22", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -482,7 +482,7 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n         use rustc::ty::Predicate;\n \n         match *self {\n-            Predicate::Trait(ref pred) => Some(pred.clean(cx)),\n+            Predicate::Trait(ref pred, _) => Some(pred.clean(cx)),\n             Predicate::Subtype(ref pred) => Some(pred.clean(cx)),\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),"}, {"sha": "2b59c60f0b77f26d613b988ebfa77bff46e34357", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -141,7 +141,7 @@ fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId)\n         .predicates\n         .iter()\n         .filter_map(|(pred, _)| {\n-            if let ty::Predicate::Trait(ref pred) = *pred {\n+            if let ty::Predicate::Trait(ref pred, _) = *pred {\n                 if pred.skip_binder().trait_ref.self_ty() == self_ty {\n                     Some(pred.def_id())\n                 } else {"}, {"sha": "88bfb8ccb952596cc88b9c2d243b955652d2fdec", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3081a70e5d402188c26c6f3e671a3c44812d1b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ab3081a70e5d402188c26c6f3e671a3c44812d1b", "patch": "@@ -2165,7 +2165,8 @@ impl IsAsync {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum Constness {\n     Const,\n     NotConst,"}]}