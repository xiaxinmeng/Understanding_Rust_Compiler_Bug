{"sha": "eae0d468932660ca383e35bb9d8b0cb4943a82ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTBkNDY4OTMyNjYwY2EzODNlMzViYjlkOGIwY2I0OTQzYTgyYWU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-04T16:57:48Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:21Z"}, "message": "Restore Global.oom() functionality\n\n\u2026 now that #[global_allocator] does not define a symbol for it", "tree": {"sha": "818c14771c58c3fe97bd5d6c18bb94e30fe2064e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/818c14771c58c3fe97bd5d6c18bb94e30fe2064e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae0d468932660ca383e35bb9d8b0cb4943a82ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae0d468932660ca383e35bb9d8b0cb4943a82ae", "html_url": "https://github.com/rust-lang/rust/commit/eae0d468932660ca383e35bb9d8b0cb4943a82ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae0d468932660ca383e35bb9d8b0cb4943a82ae/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c9d225a9667bc5ffcbc1594d44c29b201e999c", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c9d225a9667bc5ffcbc1594d44c29b201e999c", "html_url": "https://github.com/rust-lang/rust/commit/96c9d225a9667bc5ffcbc1594d44c29b201e999c"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "e5297d1482e8b57b711e53f72ee33bf0d450f136", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -19,6 +19,7 @@ dependencies = [\n name = \"alloc_jemalloc\"\n version = \"0.0.0\"\n dependencies = [\n+ \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.0.0\","}, {"sha": "beae52726a6ecf1a0f51428e58aab2c52aa3dcaf", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -26,6 +26,9 @@ extern \"Rust\" {\n     #[allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize, err: *mut u8) -> *mut u8;\n+    #[cold]\n+    #[rustc_allocator_nounwind]\n+    fn __rust_oom(err: *const u8) -> !;\n     #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n     #[rustc_allocator_nounwind]\n@@ -44,6 +47,9 @@ extern \"Rust\" {\n     #[allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n+    #[cold]\n+    #[rustc_allocator_nounwind]\n+    fn __rust_oom() -> !;\n     #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n     #[rustc_allocator_nounwind]\n@@ -120,6 +126,16 @@ unsafe impl Alloc for Global {\n             Err(AllocErr)\n         }\n     }\n+\n+    #[inline]\n+    fn oom(&mut self) -> ! {\n+        unsafe {\n+            #[cfg(not(stage0))]\n+            __rust_oom();\n+            #[cfg(stage0)]\n+            __rust_oom(&mut 0);\n+        }\n+    }\n }\n \n /// The allocator for unique pointers."}, {"sha": "a10820ebefd00adfc140c18b0a7fbab3d4f26b2b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -97,6 +97,7 @@\n #![feature(from_ref)]\n #![feature(fundamental)]\n #![feature(lang_items)]\n+#![feature(libc)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]\n #![feature(optin_builtin_traits)]"}, {"sha": "02435170374c503c81b7111974ebfc0266e2d3a1", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -12,6 +12,7 @@ test = false\n doc = false\n \n [dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "2b66c293f21a025b16075103a640fa36c61b7d29", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -14,6 +14,7 @@\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n             issue = \"27783\")]\n+#![feature(alloc_system)]\n #![feature(libc)]\n #![feature(linkage)]\n #![feature(staged_api)]\n@@ -22,12 +23,15 @@\n #![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n #![rustc_alloc_kind = \"exe\"]\n \n+extern crate alloc_system;\n extern crate libc;\n \n #[cfg(not(dummy_jemalloc))]\n pub use contents::*;\n #[cfg(not(dummy_jemalloc))]\n mod contents {\n+    use core::alloc::GlobalAlloc;\n+    use alloc_system::System;\n     use libc::{c_int, c_void, size_t};\n \n     // Note that the symbols here are prefixed by default on macOS and Windows (we\n@@ -96,6 +100,12 @@ mod contents {\n         ptr\n     }\n \n+    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n+    pub unsafe extern fn __rde_oom() -> ! {\n+        System.oom()\n+    }\n+\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_dealloc(ptr: *mut u8,"}, {"sha": "c6507282b244d1409b93b9cf5fdb130bd2eedf86", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -367,6 +367,7 @@ mod platform {\n     }\n }\n \n+#[inline]\n fn oom() -> ! {\n     write_to_stderr(\"fatal runtime error: memory allocation failed\");\n     unsafe {\n@@ -375,6 +376,7 @@ fn oom() -> ! {\n }\n \n #[cfg(any(unix, target_os = \"redox\"))]\n+#[inline]\n fn write_to_stderr(s: &str) {\n     extern crate libc;\n \n@@ -386,6 +388,7 @@ fn write_to_stderr(s: &str) {\n }\n \n #[cfg(windows)]\n+#[inline]\n fn write_to_stderr(s: &str) {\n     use core::ptr;\n \n@@ -421,4 +424,5 @@ fn write_to_stderr(s: &str) {\n }\n \n #[cfg(not(any(windows, unix, target_os = \"redox\")))]\n+#[inline]\n fn write_to_stderr(_: &str) {}"}, {"sha": "7334f986f2baac3e1a179b901e2ceeefb62ad332", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -438,6 +438,10 @@ pub unsafe trait GlobalAlloc {\n         }\n         new_ptr\n     }\n+\n+    fn oom(&self) -> ! {\n+        unsafe { ::intrinsics::abort() }\n+    }\n }\n \n /// An implementation of `Alloc` can allocate, reallocate, and"}, {"sha": "58d4c7f289c39a400a0d67604b5b0c9c9b0ccb45", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -231,6 +231,7 @@ impl<'a> AllocFnFactory<'a> {\n             }\n \n             AllocatorTy::ResultPtr |\n+            AllocatorTy::Bang |\n             AllocatorTy::Unit => {\n                 panic!(\"can't convert AllocatorTy to an argument\")\n             }\n@@ -248,6 +249,10 @@ impl<'a> AllocFnFactory<'a> {\n                 (self.ptr_u8(), expr)\n             }\n \n+            AllocatorTy::Bang => {\n+                (self.cx.ty(self.span, TyKind::Never), expr)\n+            }\n+\n             AllocatorTy::Unit => {\n                 (self.cx.ty(self.span, TyKind::Tup(Vec::new())), expr)\n             }"}, {"sha": "706eab72d44cc8af296a9fec233d3bf5babeb347", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -23,6 +23,11 @@ pub static ALLOCATOR_METHODS: &[AllocatorMethod] = &[\n         inputs: &[AllocatorTy::Layout],\n         output: AllocatorTy::ResultPtr,\n     },\n+    AllocatorMethod {\n+        name: \"oom\",\n+        inputs: &[],\n+        output: AllocatorTy::Bang,\n+    },\n     AllocatorMethod {\n         name: \"dealloc\",\n         inputs: &[AllocatorTy::Ptr, AllocatorTy::Layout],\n@@ -47,6 +52,7 @@ pub struct AllocatorMethod {\n }\n \n pub enum AllocatorTy {\n+    Bang,\n     Layout,\n     Ptr,\n     ResultPtr,"}, {"sha": "f2dd2ed8460ebbfa65d1776cae8d703d1a5c8d1b", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -43,11 +43,13 @@ pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind)\n                 AllocatorTy::Ptr => args.push(i8p),\n                 AllocatorTy::Usize => args.push(usize),\n \n+                AllocatorTy::Bang |\n                 AllocatorTy::ResultPtr |\n                 AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n             }\n         }\n         let output = match method.output {\n+            AllocatorTy::Bang => None,\n             AllocatorTy::ResultPtr => Some(i8p),\n             AllocatorTy::Unit => None,\n "}, {"sha": "4e728df010a47cae5ce4166531dd8b0942d89714", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -35,6 +35,12 @@ pub mod __default_lib_allocator {\n         System.alloc(layout) as *mut u8\n     }\n \n+    #[no_mangle]\n+    #[rustc_std_internal_symbol]\n+    pub unsafe extern fn __rdl_oom() -> ! {\n+        System.oom()\n+    }\n+\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_dealloc(ptr: *mut u8,"}, {"sha": "1479d0b62642a76cc8267994d270e196ce0eade0", "filename": "src/test/compile-fail/allocator/not-an-allocator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae0d468932660ca383e35bb9d8b0cb4943a82ae/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs?ref=eae0d468932660ca383e35bb9d8b0cb4943a82ae", "patch": "@@ -16,5 +16,6 @@ static A: usize = 0;\n //~| the trait bound `usize:\n //~| the trait bound `usize:\n //~| the trait bound `usize:\n+//~| the trait bound `usize:\n \n fn main() {}"}]}