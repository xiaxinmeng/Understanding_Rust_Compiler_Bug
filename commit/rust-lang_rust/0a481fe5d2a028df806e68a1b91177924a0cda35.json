{"sha": "0a481fe5d2a028df806e68a1b91177924a0cda35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDgxZmU1ZDJhMDI4ZGY4MDZlNjhhMWI5MTE3NzkyNGEwY2RhMzU=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-16T17:01:32Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:30Z"}, "message": "Fix rebase fallout and compilation fixes", "tree": {"sha": "b8f4030a34576819f4cce007a031d24d32ed2747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f4030a34576819f4cce007a031d24d32ed2747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a481fe5d2a028df806e68a1b91177924a0cda35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a481fe5d2a028df806e68a1b91177924a0cda35", "html_url": "https://github.com/rust-lang/rust/commit/0a481fe5d2a028df806e68a1b91177924a0cda35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a481fe5d2a028df806e68a1b91177924a0cda35/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd10c5a5033cd90af65e32a08c43ce5e34fc9168", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd10c5a5033cd90af65e32a08c43ce5e34fc9168", "html_url": "https://github.com/rust-lang/rust/commit/dd10c5a5033cd90af65e32a08c43ce5e34fc9168"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "6acdc8102a7d089f4b399a03efb2705370116f33", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=0a481fe5d2a028df806e68a1b91177924a0cda35", "patch": "@@ -330,6 +330,7 @@ name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n+ \"rustc_i128 0.0.0\",\n  \"serialize 0.0.0\",\n ]\n "}, {"sha": "bb6103748102de1a49d1cd376b8d497039805d18", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=0a481fe5d2a028df806e68a1b91177924a0cda35", "patch": "@@ -11,3 +11,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = { path = \"../liblog\" }\n serialize = { path = \"../libserialize\" }\n+rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "d3ec674daed4da97d90fa62cfc6d2b5dd4289741", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=0a481fe5d2a028df806e68a1b91177924a0cda35", "patch": "@@ -44,6 +44,8 @@ extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n \n+extern crate rustc_i128;\n+\n pub use rustc_serialize::hex::ToHex;\n \n pub mod array_vec;"}, {"sha": "87048eff5b78b9fcc3af0d37be46da11cc29ab65", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=0a481fe5d2a028df806e68a1b91177924a0cda35", "patch": "@@ -13,13 +13,14 @@ use std::marker::PhantomData;\n use std::mem;\n use blake2b::Blake2bHasher;\n use rustc_serialize::leb128;\n+use rustc_i128::{u128,i128};\n \n fn write_unsigned_leb128_to_buf(buf: &mut [u8; 16], value: u64) -> usize {\n-    leb128::write_unsigned_leb128_to(value, |i, v| buf[i] = v)\n+    leb128::write_unsigned_leb128_to(value as u128, |i, v| buf[i] = v)\n }\n \n fn write_signed_leb128_to_buf(buf: &mut [u8; 16], value: i64) -> usize {\n-    leb128::write_signed_leb128_to(value, |i, v| buf[i] = v)\n+    leb128::write_signed_leb128_to(value as i128, |i, v| buf[i] = v)\n }\n \n /// When hashing something that ends up affecting properties like symbol names. We"}, {"sha": "392f332d508dd64e1979579531023b19066cb0cc", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a481fe5d2a028df806e68a1b91177924a0cda35/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=0a481fe5d2a028df806e68a1b91177924a0cda35", "patch": "@@ -26,7 +26,7 @@ fn write_to_vec(vec: &mut Vec<u8>, position: usize, byte: u8) {\n /// The callback `write` is called once for each position\n /// that is to be written to with the byte to be encoded\n /// at that position.\n-pub fn write_unsigned_leb128_to<W>(mut value: u64, mut write: W) -> usize\n+pub fn write_unsigned_leb128_to<W>(mut value: u128, mut write: W) -> usize\n     where W: FnMut(usize, u8)\n {\n     let mut position = 0;\n@@ -48,7 +48,7 @@ pub fn write_unsigned_leb128_to<W>(mut value: u64, mut write: W) -> usize\n     position\n }\n \n-pub fn write_unsigned_leb128(out: &mut Vec<u8>, start_position: usize, value: u64) -> usize {\n+pub fn write_unsigned_leb128(out: &mut Vec<u8>, start_position: usize, value: u128) -> usize {\n     write_unsigned_leb128_to(value, |i, v| write_to_vec(out, start_position+i, v))\n }\n "}]}