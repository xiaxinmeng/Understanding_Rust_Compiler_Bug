{"sha": "765806ef1ee93b352b724aa76870d23d82894e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NTgwNmVmMWVlOTNiMzUyYjcyNGFhNzY4NzBkMjNkODI4OTRlNGU=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-12T06:04:47Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-16T01:26:28Z"}, "message": "Use wrapper structs for `BTreeMap`'s iterators.\n\nUsing a type alias for iterator implementations is fragile since this\nexposes the implementation to users of the iterator, and any changes\ncould break existing code.\n\nThis commit changes the keys and values iterators of `BTreeMap` to use\nproper new types, rather than type aliases.  However, since it is\nfair-game to treat a type-alias as the aliased type, this is a:\n\n[breaking-change].", "tree": {"sha": "62f8cfd05a96017e0bfda339864811362f76e2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62f8cfd05a96017e0bfda339864811362f76e2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/765806ef1ee93b352b724aa76870d23d82894e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/765806ef1ee93b352b724aa76870d23d82894e4e", "html_url": "https://github.com/rust-lang/rust/commit/765806ef1ee93b352b724aa76870d23d82894e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/765806ef1ee93b352b724aa76870d23d82894e4e/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "html_url": "https://github.com/rust-lang/rust/commit/0669a432a2e09ad08886cb2138dbe9f5d681fb7f"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "e45e91b93ba4215a71307b2efe277b455fce011f", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/765806ef1ee93b352b724aa76870d23d82894e4e/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765806ef1ee93b352b724aa76870d23d82894e4e/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=765806ef1ee93b352b724aa76870d23d82894e4e", "patch": "@@ -26,6 +26,7 @@ use std::hash::{Writer, Hash};\n use core::default::Default;\n use core::{iter, fmt, mem};\n use core::fmt::Show;\n+use core::iter::Map;\n \n use ring_buf::RingBuf;\n \n@@ -107,12 +108,14 @@ pub struct MoveEntries<K, V> {\n }\n \n /// An iterator over a BTreeMap's keys.\n-pub type Keys<'a, K, V> =\n-    iter::Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>;\n+pub struct Keys<'a, K: 'a, V: 'a> {\n+    inner: Map<(&'a K, &'a V), &'a K, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>\n+}\n \n /// An iterator over a BTreeMap's values.\n-pub type Values<'a, K, V> =\n-    iter::Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>;\n+pub struct Values<'a, K: 'a, V: 'a> {\n+    inner: Map<(&'a K, &'a V), &'a V, Entries<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>\n+}\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n pub enum Entry<'a, K:'a, V:'a> {\n@@ -1061,6 +1064,25 @@ impl<K, V> DoubleEndedIterator<(K, V)> for MoveEntries<K, V> {\n impl<K, V> ExactSizeIterator<(K, V)> for MoveEntries<K, V> {}\n \n \n+impl<'a, K, V> Iterator<&'a K> for Keys<'a, K, V> {\n+    fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+}\n+impl<'a, K, V> DoubleEndedIterator<&'a K> for Keys<'a, K, V> {\n+    fn next_back(&mut self) -> Option<(&'a K)> { self.inner.next_back() }\n+}\n+impl<'a, K, V> ExactSizeIterator<&'a K> for Keys<'a, K, V> {}\n+\n+\n+impl<'a, K, V> Iterator<&'a V> for Values<'a, K, V> {\n+    fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n+}\n+impl<'a, K, V> DoubleEndedIterator<&'a V> for Values<'a, K, V> {\n+    fn next_back(&mut self) -> Option<(&'a V)> { self.inner.next_back() }\n+}\n+impl<'a, K, V> ExactSizeIterator<&'a V> for Values<'a, K, V> {}\n+\n \n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     /// Sets the value of the entry with the VacantEntry's key,\n@@ -1211,7 +1233,7 @@ impl<K, V> BTreeMap<K, V> {\n     pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n \n-        self.iter().map(first)\n+        Keys { inner: self.iter().map(first) }\n     }\n \n     /// Gets an iterator over the values of the map.\n@@ -1232,7 +1254,7 @@ impl<K, V> BTreeMap<K, V> {\n     pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n         fn second<A, B>((_, b): (A, B)) -> B { b }\n \n-        self.iter().map(second)\n+        Values { inner: self.iter().map(second) }\n     }\n \n     /// Return the number of elements in the map."}]}