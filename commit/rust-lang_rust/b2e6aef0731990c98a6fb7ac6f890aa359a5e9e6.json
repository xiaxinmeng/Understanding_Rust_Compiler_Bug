{"sha": "b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTZhZWYwNzMxOTkwYzk4YTZmYjdhYzZmODkwYWEzNTlhNWU5ZTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-14T22:08:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-18T19:02:44Z"}, "message": "review comments: tweak prefix strings", "tree": {"sha": "df1407f0fe6c3c53725fcf0f93a5ec293ca86247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1407f0fe6c3c53725fcf0f93a5ec293ca86247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "html_url": "https://github.com/rust-lang/rust/commit/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ffda5216a9a4248221b980ee08c30ac6e517f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ffda5216a9a4248221b980ee08c30ac6e517f8", "html_url": "https://github.com/rust-lang/rust/commit/83ffda5216a9a4248221b980ee08c30ac6e517f8"}], "stats": {"total": 814, "additions": 407, "deletions": 407}, "files": [{"sha": "09a833baca93f3f455b8cafdf92a521a6c8a8449", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -252,7 +252,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         match self.kind {\n             ty::Infer(_) | ty::Error | ty::Bool | ty::Char | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => \"type\".into(),\n-            ty::Tuple(ref tys) if tys.is_empty() => \"type\".into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => \"unit type\".into(),\n             ty::Adt(def, _) => def.descr().into(),\n             ty::Foreign(_) => \"extern type\".into(),\n             ty::Array(..) => \"array\".into(),\n@@ -264,13 +264,13 @@ impl<'tcx> ty::TyS<'tcx> {\n             }.into(),\n             ty::FnDef(..) => \"fn item\".into(),\n             ty::FnPtr(_) => \"fn pointer\".into(),\n-            ty::Dynamic(..) => \"trait\".into(),\n+            ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(..) => \"generator\".into(),\n             ty::GeneratorWitness(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n-            ty::Placeholder(..) => \"placeholder type\".into(),\n-            ty::Bound(..) => \"bound type\".into(),\n+            ty::Placeholder(..) => \"higher-ranked type\".into(),\n+            ty::Bound(..) => \"bound type variable\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n             ty::UnnormalizedProjection(_) => \"associated type\".into(),\n             ty::Param(_) => \"type parameter\".into(),"}, {"sha": "95aa36ebb89f99cb8fcf4f0446cd251df0ccd5c3", "filename": "src/test/ui/arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn main() { let i: (); i = f(()); }\n    |                              ^^ expected isize, found ()\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "971b3685b90a1797758d5431f0de41a138ae7dc8", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -16,17 +16,17 @@ error[E0308]: mismatched types\n LL |         |_: [_; break]| {}\n    |         ^^^^^^^^^^^^^^^^^^ expected (), found closure\n    |\n-   = note: expected type `()`\n-           found closure `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n \n error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:8:9\n    |\n LL |         |_: [_; continue]| {}\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found closure\n    |\n-   = note: expected type `()`\n-           found closure `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7751d20f3527a3c3b704acc74708b88d566dcf39", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL |     fn visit() {}\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &()\n    |\n-   = note:   expected type `()`\n-           found reference `&()`\n+   = note: expected unit type `()`\n+              found reference `&()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "ceb811f7e014391478f20519ba5128309d680d2e", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -9,8 +9,8 @@ LL | impl Bar for Foo {\n LL |     type Ok = ();\n    |     ^^^^^^^^^^^^^ expected u32, found ()\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "832f00642e3a50d8ea839d732e7fc25a6fabc137", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -26,17 +26,17 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `u8`\n-              found type `()`\n+   = note:   expected type `u8`\n+           found unit type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected (), found u8\n    |\n-   = note: expected type `()`\n-              found type `u8`\n+   = note: expected unit type `()`\n+                   found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n@@ -52,17 +52,17 @@ LL | |\n LL | | }\n    | |_^ expected u8, found ()\n    |\n-   = note: expected type `u8`\n-              found type `()`\n+   = note:   expected type `u8`\n+           found unit type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected (), found u8\n    |\n-   = note: expected type `()`\n-              found type `u8`\n+   = note: expected unit type `()`\n+                   found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n@@ -73,8 +73,8 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected enum `std::result::Result<u8, MyErr>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<u8, MyErr>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n@@ -84,8 +84,8 @@ LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected enum `std::result::Result<u8, MyErr>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<u8, MyErr>`\n+           found unit type `()`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "29a53bed7d7448821bf98c6f576e94d465cdc3f1", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -9,8 +9,8 @@ LL | |         foo();\n LL | |     };\n    | |_____^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "11f9db6937e1205502cc3f0d4f90d2bd34a3b005", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         true\n    |         ^^^^ expected (), found bool\n    |\n-   = note: expected type `()`\n-              found type `bool`\n+   = note: expected unit type `()`\n+                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "ba80ce2d6b14ab6138f2fd1fb52f69175707c588", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL |     fn drop(&mut self) {\n LL |         true\n    |         ^^^^ expected (), found bool\n    |\n-   = note: expected type `()`\n-              found type `bool`\n+   = note: expected unit type `()`\n+                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "42b439cd3208e25f0f1aeddbb9b6a398de6fab78", "filename": "src/test/ui/block-result/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     while true { //~ WARN denote infinite loops with\n         true //~  ERROR mismatched types\n-             //~| expected type `()`\n+             //~| expected unit type `()`\n              //~| found type `bool`\n              //~| expected (), found bool\n     }"}, {"sha": "d19ae3af657c02e462a819ec7ba6f10d1ed7f4b8", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |         true\n    |         ^^^^ expected (), found bool\n    |\n-   = note: expected type `()`\n-              found type `bool`\n+   = note: expected unit type `()`\n+                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "76643b49bc04e50c6916181751ac13427f562ec6", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,7 +10,7 @@ LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n    |\n    = note: expected struct `std::string::String`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n@@ -24,7 +24,7 @@ LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon\n    |\n    = note: expected struct `std::string::String`\n-                found type `()`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "54c1bb220a912f734d5feb6fd7f0acc0096ea11d", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -9,8 +9,8 @@ LL | fn blah() -> i32 {\n LL |     ;\n    |     - help: consider removing this semicolon\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "b1f2ca634511b1281c8889a7572570d98a13a96b", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,7 +10,7 @@ LL |     ;\n    |     - help: consider removing this semicolon\n    |\n    = note: expected struct `std::string::String`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n@@ -24,7 +24,7 @@ LL |     ;\n    |     - help: consider removing this semicolon\n    |\n    = note: expected struct `std::string::String`\n-                found type `()`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca457aa907d9f0cc450a33859679e0ca8a0b18e9", "filename": "src/test/ui/block-result/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,7 +7,7 @@ mod a {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n     //~| expected (), found enum `a::Enum`\n-    //~| expected type `()`\n+    //~| expected unit type `()`\n     //~| found enum `a::Enum`\n   }\n }\n@@ -22,7 +22,7 @@ mod b {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n         //~| expected (), found enum `a::Enum`\n-        //~| expected type `()`\n+        //~| expected unit type `()`\n         //~| found enum `a::Enum`\n         }\n       }"}, {"sha": "6e2b2812c7241dbf5962b3ef3ac8cfe2dd9b8217", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL |   pub fn get_enum_struct_variant() -> () {\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |\n-   = note: expected type `()`\n-              found enum `a::Enum`\n+   = note: expected unit type `()`\n+                   found enum `a::Enum`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:22:9\n@@ -17,8 +17,8 @@ LL |       match enum_struct_variant {\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n    |\n-   = note: expected type `()`\n-              found enum `a::Enum`\n+   = note: expected unit type `()`\n+                   found enum `a::Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "717c7517defd672e1527883fcba6d25e547c0ac2", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn foo(x: i32) {\n LL |     |y| x + y\n    |     ^^^^^^^^^ expected (), found closure\n    |\n-   = note: expected type `()`\n-           found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n \n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:7:13"}, {"sha": "5df71e8374b1d2f730d30c948133df89e3e860d8", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -17,8 +17,8 @@ LL |   let b = Bob + 3.5;\n LL |   b + 3\n    |   ^^^^^ expected (), found struct `Bob`\n    |\n-   = note: expected type `()`\n-            found struct `Bob`\n+   = note: expected unit type `()`\n+                 found struct `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "55f1efce93dbca8521b309d6a0db10785f83454c", "filename": "src/test/ui/block-result/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     &panic!()\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n+    //~| expected unit type `()`\n     //~| found reference `&_`\n     //~| expected (), found reference\n }"}, {"sha": "12ee677d09dd03f19fc4d3e8e774d2442a0304e5", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -9,8 +9,8 @@ LL |     &panic!()\n    |     expected (), found reference\n    |     help: consider removing the borrow: `panic!()`\n    |\n-   = note:   expected type `()`\n-           found reference `&_`\n+   = note: expected unit type `()`\n+              found reference `&_`\n \n error: aborting due to previous error\n "}, {"sha": "3eae3e7542241df7a11caec4dcba448de66b55b8", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo()\n    |     ^^^^^ expected (), found usize\n    |\n-   = note: expected type `()`\n-              found type `usize`\n+   = note: expected unit type `()`\n+                   found type `usize`\n help: try adding a semicolon\n    |\n LL |     foo();"}, {"sha": "6f131514a4084bee591032e198e988297f811797", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL | |             'a: while break 'a {};\n LL | |         };\n    | |_________^ expected !, found ()\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:16:13\n@@ -18,8 +18,8 @@ LL | |                 break\n LL | |             }\n    | |_____________^ expected !, found ()\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:24:13\n@@ -29,8 +29,8 @@ LL | |                 return\n LL | |             }\n    | |_____________^ expected !, found ()\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ea3ded67c0a0c780e78b488c2f626b29f46a5088", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -12,8 +12,8 @@ LL | fn foo() {\n LL |     \"bar            boo\"\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n    |\n-   = note:   expected type `()`\n-           found reference `&'static str`\n+   = note: expected unit type `()`\n+              found reference `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1122901a17eda8ec8a2e48905ee8f8f4682d97dd", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,8 +8,8 @@ LL | fn plus_one(x: i32) -> i32 {\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n@@ -21,8 +21,8 @@ LL | fn foo() -> Result<u8, u64> {\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |\n-   = note: expected enum `std::result::Result<u8, u64>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<u8, u64>`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c1b178b221cce4c2287854cc855e12f06c6769d0", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -31,16 +31,16 @@ fn main() {\n     // n > m\n     let &&x = &1isize as &dyn T;\n     //~^ ERROR mismatched types\n-    //~| expected trait `dyn T`\n+    //~| expected trait object `dyn T`\n     //~| found reference `&_`\n     //~| expected trait T, found reference\n     let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n-    //~| expected trait `dyn T`\n+    //~| expected trait object `dyn T`\n     //~| found reference `&_`\n     //~| expected trait T, found reference\n     let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n-    //~| expected trait `dyn T`\n+    //~| expected trait object `dyn T`\n     //~| found struct `std::boxed::Box<_>`\n }"}, {"sha": "ef67c1c9637edc30d17d3479d56bece068cf2222", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -25,8 +25,8 @@ LL |     let &&x = &1isize as &dyn T;\n    |          expected trait T, found reference\n    |          help: you can probably remove the explicit borrow: `x`\n    |\n-   = note:  expected trait `dyn T`\n-           found reference `&_`\n+   = note: expected trait object `dyn T`\n+                 found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:37:11\n@@ -37,17 +37,17 @@ LL |     let &&&x = &(&1isize as &dyn T);\n    |           expected trait T, found reference\n    |           help: you can probably remove the explicit borrow: `x`\n    |\n-   = note:  expected trait `dyn T`\n-           found reference `&_`\n+   = note: expected trait object `dyn T`\n+                 found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:42:13\n    |\n LL |     let box box x = box 1isize as Box<dyn T>;\n    |             ^^^^^ expected trait T, found struct `std::boxed::Box`\n    |\n-   = note: expected trait `dyn T`\n-             found struct `std::boxed::Box<_>`\n+   = note: expected trait object `dyn T`\n+                    found struct `std::boxed::Box<_>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "de5cf274c5349518478bd1dfd65ff742d606e101", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     &panic!()\n    |     ^^^^^^^^^ expected (), found reference\n    |\n-   = note:   expected type `()`\n-           found reference `&_`\n+   = note: expected unit type `()`\n+              found reference `&_`\n help: try adding a return type\n    |\n LL | fn g() -> &_ {"}, {"sha": "8218614134c389f4c4e42c3cebf3311a43672ab2", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -33,7 +33,7 @@ pub fn main() {\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| expected trait `dyn ToBar`\n+    //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type\n }"}, {"sha": "54bb4bf9a3a431490d97fbcd6bf60be6f2a376a9", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f5.2 = Bar1 {f: 36};\n    |            ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n    |\n-   = note: expected trait `dyn ToBar`\n-             found struct `Bar1`\n+   = note: expected trait object `dyn ToBar`\n+                    found struct `Bar1`\n \n error[E0277]: the size for values of type `dyn ToBar` cannot be known at compilation time\n   --> $DIR/dst-bad-assign-3.rs:33:5"}, {"sha": "ad3b3c71f5777d43e817dc4477c6132661bd0aab", "filename": "src/test/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| expected trait `dyn ToBar`\n+    //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type\n }"}, {"sha": "5a2d73c3b1ac3efa36ade87ac05168ddd6b4b396", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f5.ptr = Bar1 {f: 36};\n    |              ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n    |\n-   = note: expected trait `dyn ToBar`\n-             found struct `Bar1`\n+   = note: expected trait object `dyn ToBar`\n+                    found struct `Bar1`\n \n error[E0277]: the size for values of type `dyn ToBar` cannot be known at compilation time\n   --> $DIR/dst-bad-assign.rs:35:5"}, {"sha": "c77a337012d55162f68e5dcbb69533f4eb880680", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -16,8 +16,8 @@ error[E0308]: mismatched types\n LL |     some_other_func() = 4;\n    |                         ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:8:5"}, {"sha": "63ab8e88e4459123990c3c315e3c569a60b0b0f7", "filename": "src/test/ui/fn/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -5,15 +5,15 @@ fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n fn main() {\n     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n+    //~| expected unit type `()`\n     //~| found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n+    //~| expected unit type `()`\n     //~| found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n+    //~| expected unit type `()`\n     //~| found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n     needs_fn(1);"}, {"sha": "44cc744809751651f3effb38a319542c3dbd412f", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,26 +4,26 @@ error[E0308]: mismatched types\n LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n-   = note: expected type `()`\n-            found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n+   = note: expected unit type `()`\n+                 found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n-   = note: expected type `()`\n-            found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n+   = note: expected unit type `()`\n+                 found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n    |\n-   = note: expected type `()`\n-            found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n+   = note: expected unit type `()`\n+                 found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14"}, {"sha": "4b1af8e915c92abbbbecb8e6f86a1e42503e7e7b", "filename": "src/test/ui/generic/generic-type-params-name-repr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -14,38 +14,38 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected struct `Foo`, found ()\n     //~| expected struct `Foo<isize>`\n-    //~| found type `()`\n+    //~| found unit type `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n     //~| expected struct `Foo`, found ()\n     //~| expected struct `Foo<isize>`\n-    //~| found type `()`\n+    //~| found unit type `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n     //~| expected struct `HashMap`, found ()\n     //~| expected struct `HashMap<std::string::String, isize>`\n-    //~| found type `()`\n+    //~| found unit type `()`\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n     //~| expected struct `HashMap`, found ()\n     //~| expected struct `HashMap<std::string::String, isize>`\n-    //~| found type `()`\n+    //~| found unit type `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n     //~| expected struct `Foo`, found ()\n     //~| expected struct `Foo<A, isize>`\n-    //~| found type `()`\n+    //~| found unit type `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n     //~| expected struct `Foo`, found ()\n     //~| expected struct `Foo`\n-    //~| found type `()`\n+    //~| found unit type `()`\n }"}, {"sha": "12cc11236f85015c44633c1e207ae4dec56d1314", "filename": "src/test/ui/generic/generic-type-params-name-repr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Foo<isize> = ();\n    |                         ^^ expected struct `Foo`, found ()\n    |\n    = note: expected struct `Foo<isize>`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n@@ -14,7 +14,7 @@ LL |     let _: Foo<isize, B, C> = ();\n    |                               ^^ expected struct `Foo`, found ()\n    |\n    = note: expected struct `Foo<isize>`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n@@ -23,7 +23,7 @@ LL |     let _: HashMap<String, isize> = ();\n    |                                     ^^ expected struct `HashMap`, found ()\n    |\n    = note: expected struct `HashMap<std::string::String, isize>`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n@@ -32,7 +32,7 @@ LL |     let _: HashMap<String, isize, Hash<String>> = ();\n    |                                                   ^^ expected struct `HashMap`, found ()\n    |\n    = note: expected struct `HashMap<std::string::String, isize>`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n@@ -41,7 +41,7 @@ LL |     let _: Foo<A, isize, C> = ();\n    |                               ^^ expected struct `Foo`, found ()\n    |\n    = note: expected struct `Foo<A, isize>`\n-                found type `()`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n@@ -50,7 +50,7 @@ LL |     let _: Foo<A, B, C> = ();\n    |                           ^^ expected struct `Foo`, found ()\n    |\n    = note: expected struct `Foo`\n-                found type `()`\n+           found unit type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d25eda0e9805734ec3898090c5f4bb647f80ebcc", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -60,8 +60,8 @@ LL | |         6u32;\n LL | |     };\n    | |_____- if and else have incompatible types\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:25:9\n@@ -92,8 +92,8 @@ LL | |         10u32;\n LL | |     };\n    | |_____- if and else have incompatible types\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:37:9\n@@ -122,8 +122,8 @@ LL | |\n LL | |     };\n    | |_____^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "a62a2cc1522a7ffbd2a323b4b6067a5def1cb72f", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,8 +8,8 @@ LL | |         return 3;\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -24,8 +24,8 @@ LL | |         return 3;\n LL | |     };\n    | |_____^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -39,8 +39,8 @@ LL | |         3\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -54,8 +54,8 @@ LL | |         return 3;\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -70,8 +70,8 @@ LL | |         return 3;\n LL | |     };\n    | |_____^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -85,8 +85,8 @@ LL | |         3\n LL | |     }\n    | |_____^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "4602beb4c77dbdf74277c835371f90309d0e3ff4", "filename": "src/test/ui/if/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let a = if true { true };\n     //~^ ERROR if may be missing an else clause [E0317]\n-    //~| expected type `()`\n+    //~| expected unit type `()`\n     //~| found type `bool`\n     //~| expected (), found bool\n     println!(\"{}\", a);"}, {"sha": "7870439fee15ddb4065a95c0bc8fbf3945780cd1", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL |     let a = if true { true };\n    |             |         found here\n    |             expected (), found bool\n    |\n-   = note: expected type `()`\n-              found type `bool`\n+   = note: expected unit type `()`\n+                   found type `bool`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "9abae68ed5290c063651f620188d558b484d56dc", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -16,8 +16,8 @@ LL | |         _       => true\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "aaa38b8f1709da17cec12214044f12a6e3e63420", "filename": "src/test/ui/issues/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `()`\n+        //~| expected unit type `()`\n         //~| found struct `Slice<_>`\n         //~| expected (), found struct `Slice`\n         _ => unreachable!()"}, {"sha": "872066bd3f765db87837642f02d8efacac17ed74", "filename": "src/test/ui/issues/issue-16401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL |     match () {\n LL |         Slice { data: data, len: len } => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `Slice`\n    |\n-   = note: expected type `()`\n-            found struct `Slice<_>`\n+   = note: expected unit type `()`\n+                 found struct `Slice<_>`\n \n error: aborting due to previous error\n "}, {"sha": "c330745bc07d65643f06ec8edf4277e92b538f5e", "filename": "src/test/ui/issues/issue-17033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -1,7 +1,7 @@\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n              //~| expected mutable reference `&mut ()`\n-             //~| found type `()`\n+             //~| found unit type `()`\n              //~| expected &mut (), found ()\n }\n "}, {"sha": "37f817c2e9b143be6510b192a1e18c8a237322a1", "filename": "src/test/ui/issues/issue-17033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,7 +8,7 @@ LL |     (*p)(())\n    |          help: consider mutably borrowing here: `&mut ()`\n    |\n    = note: expected mutable reference `&mut ()`\n-                           found type `()`\n+                      found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "ef193ad85bf65c4a8d6d2d2f7065fec4005169db", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -13,8 +13,8 @@ LL | |         _ => None\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `RoomDirection`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `RoomDirection`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to previous error\n "}, {"sha": "1d8128ffcb9e1ca3b9775de91e0e9e0e2f945417", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n-                                           //~| expected type `()`\n+                                           //~| expected unit type `()`\n                                            //~| found type `{integer}`\n                                            //~| expected (), found integer\n         765"}, {"sha": "c808680ce619b0a975cf66eb3958f1b348a7e18a", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ LL | |         765\n LL | |     };\n    | |_____^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "20a0d6f41033863c77cbd0bf3fd621cf2d5d5a20", "filename": "src/test/ui/issues/issue-22684.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: () = foo::Foo.bar();\n    |                 ^^^^^^^^^^^^^^ expected (), found bool\n    |\n-   = note: expected type `()`\n-              found type `bool`\n+   = note: expected unit type `()`\n+                   found type `bool`\n \n error: aborting due to previous error\n "}, {"sha": "4244f36e481802b92208ae1bcee9375fc2802341", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -17,8 +17,8 @@ LL |         loop { break };\n    |                expected i32, found ()\n    |                help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:8:9\n@@ -28,8 +28,8 @@ LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n    | |____________________________^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:12:9\n@@ -38,8 +38,8 @@ LL | /         'c:\n LL | |         for _ in None { break }; // but here we cite the whole loop\n    | |_______________________________^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:15:9\n@@ -48,8 +48,8 @@ LL | /         'd:\n LL | |         while let Some(_) = None { break };\n    | |__________________________________________^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f0ca557e581d52c4376dfe1b51a89003789c75c2", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,7 +7,7 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected associated type `<T as Tr<'a>>::Out`\n-                         found type `()`\n+                    found unit type `()`\n    = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "00e44738742ec284fa56261e815964f70f3d98f8", "filename": "src/test/ui/issues/issue-37026.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     let empty_struct::XEmpty2 = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty2`\n    |\n-   = note: expected type `()`\n-            found struct `empty_struct::XEmpty2`\n+   = note: expected unit type `()`\n+                 found struct `empty_struct::XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty6`\n    |\n-   = note: expected type `()`\n-            found struct `empty_struct::XEmpty6`\n+   = note: expected unit type `()`\n+                 found struct `empty_struct::XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e7eef47fd29102996a9f45f4f8c83cacee09e7e7", "filename": "src/test/ui/issues/issue-37665.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: () = 0;\n    |                 ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "7cef2e6cd4c88ad6fbf7faf0c24c381f9aa06f73", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,7 +8,7 @@ LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected &(), found ()\n    |\n    = note: expected reference `&()`\n-                   found type `()`\n+              found unit type `()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "c2ffc2f4ac30cdd9ea70913221f82f1cda7cb667", "filename": "src/test/ui/issues/issue-41549.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0326]: implemented const `CONST` has an incompatible type for trait\n LL |     const CONST: () = ();\n    |                  ^^ expected u32, found ()\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "d4ac39526dd6862b8bec19a4db65ec5774fa6ac6", "filename": "src/test/ui/issues/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -3,7 +3,7 @@ fn main() {\n         0\n     } else if false {\n //~^ ERROR if may be missing an else clause\n-//~| expected type `()`\n+//~| expected unit type `()`\n //~| found type `{integer}`\n //~| expected (), found integer\n         1"}, {"sha": "8abb7c3c9f585af1b5749a161ac4dba9f57e9be9", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -12,8 +12,8 @@ LL | |         1\n LL | |     };\n    | |_____^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "259b47ebe7c21e2adf29d628ab1823e002fcc46d", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -21,8 +21,8 @@ LL |\n LL |     break true;\n    |               - help: consider removing this semicolon\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c7b5f7b204048b5fa6b8c5ad0e5900fb32c7febb", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( )\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "ea1eca7552d7b015dc193a7168b6d658ea89238c", "filename": "src/test/ui/issues/issue-46112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL | fn main() { test(Ok(())); }\n    |                     expected enum `std::option::Option`, found ()\n    |                     help: try using a variant of the expected enum: `Some(())`\n    |\n-   = note: expected enum `std::option::Option<()>`\n-              found type `()`\n+   = note:   expected enum `std::option::Option<()>`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "2b49c273330684ba3fe808feddc07de1ac79cc2f", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     () < std::mem::size_of::<_>();\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found usize\n    |\n-   = note: expected type `()`\n-              found type `usize`\n+   = note: expected unit type `()`\n+                   found type `usize`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-47486.rs:3:11"}, {"sha": "bcc2fc500995f8058f8a83566cbcc2622232d162", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -31,8 +31,8 @@ LL |         Drop = assert_eq!(1, 1)\n    |                expected (), found isize\n    |                found here\n    |\n-   = note: expected type `()`\n-              found type `isize`\n+   = note: expected unit type `()`\n+                   found type `isize`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "d2a21c48a09fc0e1a712e9cae2f02e5a128b1f96", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    |                  ^^^^^^^^^^^^^^^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d36297886df88f75ba07a94d5b44b72c26e2f6d0", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(b: bool) -> Result<bool,String> {\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |\n-   = note: expected enum `std::result::Result<bool, std::string::String>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<bool, std::string::String>`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "5d631d576c7ac9da4a46fb8026d3f3674c8644bf", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -76,7 +76,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+found unit type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "a9c3ae4795d20a2a02aacd7ddccc4b4c1d6f3297", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -76,7 +76,7 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found ()\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"expected struct `std::string::String`\n-     found type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n+found unit type `()`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "3885341e7b312f7ff3447346468e3565b237f72f", "filename": "src/test/ui/liveness/liveness-closure-require-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn main() { println!(\"{}\", force(|| {})); }\n    |                                     ^^ expected isize, found ()\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "201f90c6412e1ca5d3787ce69e5c638e53b174fc", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "738811adedb29d5d61c169ea6dda8c598961d1bd", "filename": "src/test/ui/liveness/liveness-issue-2163.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL | |\n LL | |     });\n    | |_____^ expected bool, found ()\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "9825ecce403c50a621112d5afad75efc722bc950", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn f() -> isize {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "4255f55a4ec5f658cf7dea56ba1a30b3d54ea8ae", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n LL |     test!();\n    |     -------- in this macro invocation\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n@@ -21,8 +21,8 @@ LL | fn no_return() -> i32 {}\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n@@ -34,8 +34,8 @@ LL | fn bar(x: u32) -> u32 {\n LL |     x * 2;\n    |          - help: consider removing this semicolon\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n@@ -45,8 +45,8 @@ LL | fn baz(x: u64) -> u32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8a049ac002356f9b21cb1ef50151b6db8616b8d2", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -100,8 +100,8 @@ error[E0308]: mismatched types\n LL |     let val: ! = loop { break break; };\n    |                               ^^^^^ expected !, found ()\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:11:19\n@@ -136,26 +136,26 @@ error[E0308]: mismatched types\n LL |                 break 'c 123;\n    |                          ^^^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:80:15\n    |\n LL |         break (break, break);\n    |               ^^^^^^^^^^^^^^ expected (), found tuple\n    |\n-   = note: expected type `()`\n-             found tuple `(!, !)`\n+   = note: expected unit type `()`\n+                  found tuple `(!, !)`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:85:15\n    |\n LL |         break 2;\n    |               ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:90:9\n@@ -166,8 +166,8 @@ LL |         break;\n    |         expected integer, found ()\n    |         help: give it a value of the expected type: `break value`\n    |\n-   = note: expected type `{integer}`\n-              found type `()`\n+   = note:   expected type `{integer}`\n+           found unit type `()`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "e34e7f4e956e21ce57a98275d65c018afbd4ced9", "filename": "src/test/ui/loops/loop-labeled-break-value.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL |         let _: i32 = loop { break };\n    |                             expected i32, found ()\n    |                             help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:6:37\n@@ -19,8 +19,8 @@ LL |         let _: i32 = 'inner: loop { break 'inner };\n    |                                     expected i32, found ()\n    |                                     help: give it a value of the expected type: `break 'inner 42`\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:9:45\n@@ -31,8 +31,8 @@ LL |         let _: i32 = 'inner2: loop { loop { break 'inner2 } };\n    |                                             expected i32, found ()\n    |                                             help: give it a value of the expected type: `break 'inner2 42`\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "41027dc3ad6e4e5c953ea432ff72f2ffd748e19e", "filename": "src/test/ui/loops/loop-properly-diverging-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL |   let x: i32 = loop { break };\n    |                       expected i32, found ()\n    |                       help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "8f8bb4bdcd2ca1410c04c75c3a31b35126b4cee3", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -62,8 +62,8 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "99e0a466817fcaf4b9207fcabccd6167e8c139bb", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u32\n    |\n-   = note: expected type `()`\n-              found type `u32`\n+   = note: expected unit type `()`\n+                   found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:102:24\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u64\n    |\n-   = note: expected type `()`\n-              found type `u64`\n+   = note: expected unit type `()`\n+                   found type `u64`\n \n error[E0034]: multiple applicable items in scope\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:120:15\n@@ -47,26 +47,26 @@ error[E0308]: mismatched types\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u8\n    |\n-   = note: expected type `()`\n-              found type `u8`\n+   = note: expected unit type `()`\n+                   found type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:155:24\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u32\n    |\n-   = note: expected type `()`\n-              found type `u32`\n+   = note: expected unit type `()`\n+                   found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:172:24\n    |\n LL |     let _seetype: () = z;\n    |                        ^ expected (), found u32\n    |\n-   = note: expected type `()`\n-              found type `u32`\n+   = note: expected unit type `()`\n+                   found type `u32`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "cb2715f5543528fe11a27b229ede3376b21cfe61", "filename": "src/test/ui/mir-unpretty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmir-unpretty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-unpretty.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: () = 0;\n    |                 ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "8bba0efc8142de8dd64b1319721b81a6adc3adcf", "filename": "src/test/ui/mismatched_types/for-loop-has-unit-body.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffor-loop-has-unit-body.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         x\n    |         ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "c790cc90a2cf536d77da153c7f92d1301a42d7aa", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn function(t: &mut dyn Trait) {\n LL |     t as *mut dyn Trait\n    |     ^^^^^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |\n-   = note:     expected type `()`\n-           found raw pointer `*mut dyn Trait`\n+   = note: expected unit type `()`\n+            found raw pointer `*mut dyn Trait`\n \n error: aborting due to previous error\n "}, {"sha": "fc128fe6fc7f303bda9259d037002fea4d7bffe4", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL |       let x: u32 = (\n LL | |     );\n    | |_____^ expected u32, found ()\n    |\n-   = note: expected type `u32`\n-              found type `()`\n+   = note:   expected type `u32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "8d8d6b78c197bada569f16446abe7921fd05413c", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn f() -> isize { }\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "b56aebb99d5623426df3f73a87786410b0ad7566", "filename": "src/test/ui/or-patterns/consistent-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fconsistent-bindings.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let () = 0;\n    |         ^^ expected integer, found ()\n    |\n-   = note: expected type `{integer}`\n-              found type `()`\n+   = note:   expected type `{integer}`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "051af60121bcf553d34c23e9c72c3bd983ab4c6d", "filename": "src/test/ui/output-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn main() { let i: isize; i = f(); }\n    |                               ^^^ expected isize, found ()\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "83e8880f183f264929e00d9b79e14b2bda542d34", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -49,35 +49,35 @@ error[E0308]: mismatched types\n LL |     {2} + {2}\n    |      ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:12:6\n    |\n LL |     {2} + 2\n    |      ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:18:7\n    |\n LL |     { 42 } + foo;\n    |       ^^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/expr-as-stmt.rs:24:7\n    |\n LL |     { 3 } * 3\n    |       ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0614]: type `{integer}` cannot be dereferenced\n   --> $DIR/expr-as-stmt.rs:24:11"}, {"sha": "d1e09ce16554a100cea04a4c91e95ec0d5cce31b", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -12,8 +12,8 @@ LL |     fn f(*, a: u8) -> u8 {}\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `u8`\n-              found type `()`\n+   = note:   expected type `u8`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2905cc7370db24bbd038dd166aefdfa0548695b4", "filename": "src/test/ui/parser/issue-62881.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -21,8 +21,8 @@ LL | fn f() -> isize { fn f() -> isize {} pub f<\n    |                      |\n    |                      implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "61cb1faead124a8b657be6f8c91e0ca6dc000f96", "filename": "src/test/ui/parser/issue-62895.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -41,8 +41,8 @@ LL | fn v() -> isize {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `isize`\n-              found type `()`\n+   = note:   expected type `isize`\n+           found unit type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2e4bf8320fb58061c78429e5ca776aef82b24c70", "filename": "src/test/ui/parser/match-vec-invalid.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-vec-invalid.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -36,8 +36,8 @@ error[E0308]: mismatched types\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d702dac81daf6c07b2fd383cff74ffedddb64cda", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -19,8 +19,8 @@ error[E0308]: mismatched types\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "77bb3b0417adba72c775eec6c54cabd6b3584d0e", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7aa91ab2af476585778920a24f10624595144bef", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -19,8 +19,8 @@ error[E0308]: mismatched types\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f0373b0c89f191922d9ec2322aaa515bd666b3d7", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -19,8 +19,8 @@ error[E0308]: mismatched types\n LL |         const RECOVERY_WITNESS: () = 0;\n    |                                      ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d69cba7a106530037f2b4c0e482c472f40e04a13", "filename": "src/test/ui/parser/recover-from-homoglyph.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -15,8 +15,8 @@ error[E0308]: mismatched types\n LL |     let x: usize = ();\n    |                    ^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41640ac3f23a64acce4575d708fed8f8a8cbb843", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -22,17 +22,17 @@ error[E0308]: mismatched types\n LL |     let _: usize = ()\n    |                    ^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:9:20\n    |\n LL |     let _: usize = ()\n    |                    ^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7a599b07f1e55cacbc7d488bc76734634f938c8a", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -15,8 +15,8 @@ error[E0308]: mismatched types\n LL |         (..) => {}\n    |         ^^^^ expected u8, found ()\n    |\n-   = note: expected type `u8`\n-              found type `()`\n+   = note:   expected type `u8`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9c35115857f8c24ec6d0d00efe966912731b3aab", "filename": "src/test/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -9,8 +9,8 @@ LL |     std::cell::Cell::new(0)\n    |     |\n    |     expected (), found struct `std::cell::Cell`\n    |\n-   = note: expected type `()`\n-            found struct `std::cell::Cell<{integer}>`\n+   = note: expected unit type `()`\n+                 found struct `std::cell::Cell<{integer}>`\n \n error: aborting due to previous error\n "}, {"sha": "60fb9755003276e2d4ae521a803f1e8be6000a43", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -49,8 +49,8 @@ LL | extern \"C\" fn baz() {\n LL |     0\n    |     ^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:49:5"}, {"sha": "b47e2ea3981efe5d069190c39350667d6bd8058f", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to previous error\n "}, {"sha": "85046f59da67d814e82df47f17553b15e59748f9", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n+   = note: expected fn pointer `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n+                 found fn item `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n \n error: aborting due to previous error\n "}, {"sha": "78966048265d382aecf1495cc1fb5702cab4b150", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |                                           ^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n+   = note: expected fn pointer `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n+                 found fn item `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n \n error: aborting due to previous error\n "}, {"sha": "cd1b9336ac7701c996d32fedb73f3fb1dda58559", "filename": "src/test/ui/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected usize, found ()\n     //~| expected type `usize`\n-    //~| found type `()`\n+    //~| found unit type `()`\n     let c = [0; true];\n     //~^ ERROR mismatched types\n     //~| expected usize, found bool"}, {"sha": "056cad6127f1a2945f8815152878a75f1b6e1f85", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL |     let b = [0; ()];\n    |                 ^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:12:17"}, {"sha": "40f12347101235ac79ec8f2a15e95cc0c8a2a6b3", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(4 as usize)\n    |     ^^^^^^^^^^^^^^^ expected (), found struct `S`\n    |\n-   = note: expected type `()`\n-            found struct `S<usize>`\n+   = note: expected unit type `()`\n+                 found struct `S<usize>`\n help: try adding a semicolon\n    |\n LL |     foo(4 as usize);"}, {"sha": "b7f16a8d5bbd9d62de4d5bc2ccadeddab6d00520", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -584,8 +584,8 @@ LL |     if x = let 0 = 0 {}\n    |        expected bool, found ()\n    |        help: try comparing for equality: `x == let 0 = 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:59:8\n@@ -772,8 +772,8 @@ LL |     while x = let 0 = 0 {}\n    |           expected bool, found ()\n    |           help: try comparing for equality: `x == let 0 = 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:123:11\n@@ -959,8 +959,8 @@ LL | fn outside_if_and_while_expr() {\n LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected (), found &bool\n    |\n-   = note:   expected type `()`\n-           found reference `&bool`\n+   = note: expected unit type `()`\n+              found reference `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/disallowed-positions.rs:179:17"}, {"sha": "f6ee7d4d44e7fd22039be230509e0e41d112c37b", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: () = move || ();\n    |                 ^^^^^^^^^^ expected (), found closure\n    |\n-   = note: expected type `()`\n-           found closure `[closure@$DIR/move-closure.rs:5:17: 5:27]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/move-closure.rs:5:17: 5:27]`\n \n error: aborting due to previous error\n "}, {"sha": "bad7fc35edf3d7fb78afd5f949198a426e4cef8d", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,7 +8,7 @@ LL |     ()\n    |     ^^ expected associated type, found ()\n    |\n    = note: expected associated type `<T as Foo>::Assoc`\n-                         found type `()`\n+                    found unit type `()`\n    = note: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -23,7 +23,7 @@ LL |     generic::<()>()\n    |     |\n    |     expected (), found associated type\n    |\n-   = note:         expected type `()`\n+   = note:    expected unit type `()`\n            found associated type `<() as Foo>::Assoc`\n    = note: consider constraining the associated type `<() as Foo>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html"}, {"sha": "8c7475e622a21a8a07b80c7a0929785c70e4ea0a", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -59,17 +59,17 @@ LL |     if x == E::V { field } {}\n    |     |              expected (), found bool\n    |     expected this to be `()`\n    |\n-   = note: expected type `()`\n-              found type `bool`\n+   = note: expected unit type `()`\n+                   found type `bool`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:21:20\n    |\n LL |     let y: usize = ();\n    |                    ^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "2e23e7220b760a696c10f22853fa702d57077761", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -25,8 +25,8 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -40,8 +40,8 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -55,8 +55,8 @@ LL |     let x: () = foo::<'static>;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {foo::<'static>}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {foo::<'static>}`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "66cd94d7a1b3730f224fdd13c3c44ca10ebb44ba", "filename": "src/test/ui/substs-ppaux.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -15,35 +15,35 @@ fn main() {}\n fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected type `()`\n+    //[verbose]~| expected unit type `()`\n     //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected type `()`\n+    //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n \n \n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected type `()`\n+    //[verbose]~| expected unit type `()`\n     //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected type `()`\n+    //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n \n     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected type `()`\n+    //[verbose]~| expected unit type `()`\n     //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected type `()`\n+    //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n \n     let x: () = foo::<'static>;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected type `()`\n+    //[verbose]~| expected unit type `()`\n     //[verbose]~| found fn item `fn() {foo::<ReStatic>}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected type `()`\n+    //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {foo::<'static>}`\n \n     <str as Foo<u8>>::bar;"}, {"sha": "0d26dcc4c17675adcff97b95c03a7e69215165e9", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -25,8 +25,8 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -40,8 +40,8 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -55,8 +55,8 @@ LL |     let x: () = foo::<'static>;\n    |                 expected (), found fn item\n    |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n-   = note: expected type `()`\n-           found fn item `fn() {foo::<ReStatic>}`\n+   = note: expected unit type `()`\n+                found fn item `fn() {foo::<ReStatic>}`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "eccd9d01fec5e69c5fa9c786ae6406f34a28d57e", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -13,8 +13,8 @@ LL | |     }\n    | |_____|\n    |       expected this to be `()`\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/match-needing-semi.rs:12:5\n@@ -28,8 +28,8 @@ LL | |     }\n    | |_____|\n    |       expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "65da1ccd9758ff069de49bff80994cc1dfc02275", "filename": "src/test/ui/suppressed-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuppressed-error.rs?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let (x, y) = ();\n //~^ ERROR mismatched types\n-//~| expected type `()`\n+//~| expected unit type `()`\n //~| found tuple `(_, _)`\n //~| expected (), found tuple\n     return x;"}, {"sha": "994011f3f0ea1e0fa0dadfbffe4909fe8b85e3e4", "filename": "src/test/ui/suppressed-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsuppressed-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fsuppressed-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuppressed-error.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let (x, y) = ();\n    |         ^^^^^^ expected (), found tuple\n    |\n-   = note: expected type `()`\n-             found tuple `(_, _)`\n+   = note: expected unit type `()`\n+                  found tuple `(_, _)`\n \n error: aborting due to previous error\n "}, {"sha": "fca72817d651f5655fb92789103bc4c06c4c2ede", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | ...; let _: usize = 14; let _: usize = 15; let _: () = 42; let _: usize = 0; let _: usize = 1; let _: usize = 2; let _: usize = 3; let _:...\n    |                                                        ^^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "e1b73104521a876f77d95330f2aaaba57a8189f1", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | ...\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646...\n    |                                               ^^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "72b1502fbf23ee91e917bc4cf847ea4350a9cb5d", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | ...) = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ()...\n    |                                                        ^^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "dae00b902dcf8b982110eaeb71ebf7f281712cbf", "filename": "src/test/ui/terminal-width/whitespace-trimming-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | ...-> usize {\n LL | ...                                                                                                                                                                                 ()\n    |                                                                                                                                                                                     ^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "4a1f8f6f84669bdff2ec3af550afabce14218191", "filename": "src/test/ui/terminal-width/whitespace-trimming.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | ...                   let _: () = 42;\n    |                                   ^^ expected (), found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected unit type `()`\n+                   found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "722b7a3b60a63443aaa0cb23f512129be621440f", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -28,8 +28,8 @@ error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::op\n LL |     let res: Result<i32, i32> = try { };\n    |                                       ^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n   --> $DIR/try-block-bad-type.rs:17:23"}, {"sha": "0dd81d8e152fe006dee6417524597b86215a530b", "filename": "src/test/ui/try-block/try-block-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -16,8 +16,8 @@ error[E0271]: type mismatch resolving `<std::option::Option<i32> as std::ops::Tr\n LL |     };\n    |     ^ expected i32, found ()\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bbe152d69d75556a17e81b85d8c2c21d8db86ed7", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -8,7 +8,7 @@ LL |         Self::TSVariant(());\n    |                         ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type parameter `T`\n-                        found type `()`\n+                   found unit type `()`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -34,7 +34,7 @@ LL |         Self::<()>::TSVariant(());\n    |                               ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type parameter `T`\n-                        found type `()`\n+                   found unit type `()`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -60,7 +60,7 @@ LL |         Self::SVariant { v: () };\n    |                             ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type parameter `T`\n-                        found type `()`\n+                   found unit type `()`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -80,7 +80,7 @@ LL |         Self::SVariant::<()> { v: () };\n    |                                   ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type parameter `T`\n-                        found type `()`\n+                   found unit type `()`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -100,7 +100,7 @@ LL |         Self::<()>::SVariant { v: () };\n    |                                   ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type parameter `T`\n-                        found type `()`\n+                   found unit type `()`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -126,7 +126,7 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    |                                         ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type parameter `T`\n-                        found type `()`\n+                   found unit type `()`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "7e744925a7ce2af6f2b47175a7428f84e6b2fa07", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ error[E0308]: mismatched types\n LL |     let z: i32 = x;\n    |                  ^ expected i32, found opaque type\n    |\n-   = note: expected type `i32`\n-              found type `WrongGeneric::<&{integer}>`\n+   = note:     expected type `i32`\n+           found opaque type `WrongGeneric::<&{integer}>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb5f1d3bbc97b38cbfcb15d7cee730ee6b79dfff", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -5,7 +5,7 @@ LL | type Closure = impl FnOnce();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found ()\n    |\n    = note: expected opaque type `Closure`\n-                     found type `()`\n+                found unit type `()`\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "c6b42afa513b41dbe34cd38ea669506d8441b6b9", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL |     let _: bool = 0 = 0;\n    |                   expected bool, found ()\n    |                   help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:9:14\n@@ -19,8 +19,8 @@ LL |         0 => 0 = 0,\n    |              expected bool, found ()\n    |              help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:10:14\n@@ -31,8 +31,8 @@ LL |         _ => 0 = 0,\n    |              expected bool, found ()\n    |              help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:14:17\n@@ -43,8 +43,8 @@ LL |         true => 0 = 0,\n    |                 expected bool, found ()\n    |                 help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:18:8\n@@ -55,8 +55,8 @@ LL |     if 0 = 0 {}\n    |        expected bool, found ()\n    |        help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:20:24\n@@ -67,8 +67,8 @@ LL |     let _: bool = if { 0 = 0 } {\n    |                        expected bool, found ()\n    |                        help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:21:9\n@@ -79,8 +79,8 @@ LL |         0 = 0\n    |         expected bool, found ()\n    |         help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:23:9\n@@ -91,8 +91,8 @@ LL |         0 = 0\n    |         expected bool, found ()\n    |         help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:26:13\n@@ -103,8 +103,8 @@ LL |     let _ = (0 = 0)\n    |             expected bool, found ()\n    |             help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:27:14\n@@ -115,8 +115,8 @@ LL |         && { 0 = 0 }\n    |              expected bool, found ()\n    |              help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:28:12\n@@ -127,8 +127,8 @@ LL |         || (0 = 0);\n    |            expected bool, found ()\n    |            help: try comparing for equality: `0 == 0`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/assignment-expected-bool.rs:31:20\n@@ -142,8 +142,8 @@ error[E0308]: mismatched types\n LL |     let _: usize = 0 = 0;\n    |                    ^^^^^ expected usize, found ()\n    |\n-   = note: expected type `usize`\n-              found type `()`\n+   = note:   expected type `usize`\n+           found unit type `()`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "05280aab2ddfb9e21ddfe84a533f66a6ad6f1b9b", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -7,8 +7,8 @@ LL |     if x = x {\n    |        expected bool, found ()\n    |        help: try comparing for equality: `x == x`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:20:8\n@@ -19,8 +19,8 @@ LL |     if (x = x) {\n    |        expected bool, found ()\n    |        help: try comparing for equality: `x == x`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:25:8\n@@ -31,8 +31,8 @@ LL |     if y = (Foo { foo: x }) {\n    |        expected bool, found ()\n    |        help: try comparing for equality: `y == (Foo { foo: x })`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:30:8\n@@ -43,8 +43,8 @@ LL |     if 3 = x {\n    |        expected bool, found ()\n    |        help: try comparing for equality: `3 == x`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:36:13\n@@ -55,8 +55,8 @@ LL |             x = 4\n    |             expected bool, found ()\n    |             help: try comparing for equality: `x == 4`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:38:13\n@@ -67,8 +67,8 @@ LL |             x = 5\n    |             expected bool, found ()\n    |             help: try comparing for equality: `x == 5`\n    |\n-   = note: expected type `bool`\n-              found type `()`\n+   = note:   expected type `bool`\n+           found unit type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "47416c4f911f5e400445cf7dfa7f86369f16242c", "filename": "src/test/ui/type/type-error-break-tail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-error-break-tail.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -10,8 +10,8 @@ LL |         if false { break; }\n    |                    expected i32, found ()\n    |                    help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `i32`\n-              found type `()`\n+   = note:   expected type `i32`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "aca9c3f558a7b9438fd8e2cd4aa1d1ccdd7ccd0f", "filename": "src/test/ui/typeck/issue-57673-ice-on-deref-of-boxed-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -6,8 +6,8 @@ LL | fn ice(x: Box<dyn Iterator<Item=()>>) {\n LL |     *x\n    |     ^^ expected (), found trait std::iter::Iterator\n    |\n-   = note: expected type `()`\n-             found trait `(dyn std::iter::Iterator<Item = ()> + 'static)`\n+   = note: expected unit type `()`\n+           found trait object `(dyn std::iter::Iterator<Item = ()> + 'static)`\n \n error: aborting due to previous error\n "}, {"sha": "a512a60aa42d91dc01ee24d9a6943c4ba95e83bb", "filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     v\n    |     ^ lifetime mismatch\n    |\n-   = note: expected trait `dyn Get<&'min i32>`\n-              found trait `dyn Get<&'max i32>`\n+   = note: expected trait object `dyn Get<&'min i32>`\n+              found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-contravariant-arg-object.rs:10:21\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     v\n    |     ^ lifetime mismatch\n    |\n-   = note: expected trait `dyn Get<&'max i32>`\n-              found trait `dyn Get<&'min i32>`\n+   = note: expected trait object `dyn Get<&'max i32>`\n+              found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined on the function body at 17:21...\n   --> $DIR/variance-contravariant-arg-object.rs:17:21\n    |"}, {"sha": "75b6d588c15936c54791947fa9366aa85016e835", "filename": "src/test/ui/variance/variance-covariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     v\n    |     ^ lifetime mismatch\n    |\n-   = note: expected trait `dyn Get<&'min i32>`\n-              found trait `dyn Get<&'max i32>`\n+   = note: expected trait object `dyn Get<&'min i32>`\n+              found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-covariant-arg-object.rs:10:21\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     v\n    |     ^ lifetime mismatch\n    |\n-   = note: expected trait `dyn Get<&'max i32>`\n-              found trait `dyn Get<&'min i32>`\n+   = note: expected trait object `dyn Get<&'max i32>`\n+              found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined on the function body at 18:21...\n   --> $DIR/variance-covariant-arg-object.rs:18:21\n    |"}, {"sha": "13ee9b9da3c982d38ef80c8ff1dbf24d1114d5a2", "filename": "src/test/ui/variance/variance-invariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr?ref=b2e6aef0731990c98a6fb7ac6f890aa359a5e9e6", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     v\n    |     ^ lifetime mismatch\n    |\n-   = note: expected trait `dyn Get<&'min i32>`\n-              found trait `dyn Get<&'max i32>`\n+   = note: expected trait object `dyn Get<&'min i32>`\n+              found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined on the function body at 7:21...\n   --> $DIR/variance-invariant-arg-object.rs:7:21\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     v\n    |     ^ lifetime mismatch\n    |\n-   = note: expected trait `dyn Get<&'max i32>`\n-              found trait `dyn Get<&'min i32>`\n+   = note: expected trait object `dyn Get<&'max i32>`\n+              found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined on the function body at 14:21...\n   --> $DIR/variance-invariant-arg-object.rs:14:21\n    |"}]}