{"sha": "645035a7150b7af12c92e07287588e7d901ae2e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NTAzNWE3MTUwYjdhZjEyYzkyZTA3Mjg3NTg4ZTdkOTAxYWUyZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T02:21:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:35Z"}, "message": "rustdoc: Convert tystr_pass to use astsrv", "tree": {"sha": "15a913fc7960d856b9bebc435c5d2ac73b872826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a913fc7960d856b9bebc435c5d2ac73b872826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645035a7150b7af12c92e07287588e7d901ae2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645035a7150b7af12c92e07287588e7d901ae2e9", "html_url": "https://github.com/rust-lang/rust/commit/645035a7150b7af12c92e07287588e7d901ae2e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645035a7150b7af12c92e07287588e7d901ae2e9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "447f1fd4af4214086edc4aad5e8fbd483b8f3b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/447f1fd4af4214086edc4aad5e8fbd483b8f3b35", "html_url": "https://github.com/rust-lang/rust/commit/447f1fd4af4214086edc4aad5e8fbd483b8f3b35"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "8f69ba780e35f36d490dc4ca1af00635576e2a49", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/645035a7150b7af12c92e07287588e7d901ae2e9/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645035a7150b7af12c92e07287588e7d901ae2e9/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=645035a7150b7af12c92e07287588e7d901ae2e9", "patch": "@@ -67,9 +67,16 @@ fn main(argv: [str]) {\n     }\n \n     let source_file = argv[1];\n+    run(source_file);\n+}\n+\n+fn run(source_file: str) {\n+\n     let default_name = source_file;\n-    let crate = parse::from_file(source_file);\n-    let doc = extract::extract(crate, default_name);\n-    let doc = tystr_pass::run(doc, crate);\n+    let srv = astsrv::mk_seq_srv_from_file(source_file);\n+    let doc = extract::from_srv(srv, default_name);\n+    let doc = run_passes(srv, doc, [\n+        tystr_pass::run\n+    ]);\n     gen::write_markdown(doc, std::io::stdout());\n-}\n+}\n\\ No newline at end of file"}, {"sha": "7af075f5183f06dcdf4a43640cf3ab536a4f98bd", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/645035a7150b7af12c92e07287588e7d901ae2e9/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645035a7150b7af12c92e07287588e7d901ae2e9/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=645035a7150b7af12c92e07287588e7d901ae2e9", "patch": "@@ -1,33 +1,32 @@\n import rustc::syntax::ast;\n+import rustc::syntax::print::pprust;\n+import rustc::middle::ast_map;\n+import astsrv::seq_srv;\n \n export run;\n \n fn run(\n-    doc: doc::cratedoc,\n-    crate: @ast::crate\n+    srv: astsrv::seq_srv,\n+    doc: doc::cratedoc\n ) -> doc::cratedoc {\n     let fold = fold::fold({\n         fold_fn: fn~(\n-            f: fold::fold<@ast::crate>,\n+            f: fold::fold<astsrv::seq_srv>,\n             d: doc::fndoc\n         ) -> doc::fndoc {\n             fold_fn(f, d)\n         }\n-        with *fold::default_seq_fold(crate)\n+        with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n }\n \n fn fold_fn(\n-    fold: fold::fold<@ast::crate>,\n+    fold: fold::fold<astsrv::seq_srv>,\n     doc: doc::fndoc\n ) -> doc::fndoc {\n-    import rustc::middle::ast_map;\n-    import rustc::syntax::print::pprust;\n \n-    let crate = fold.ctxt;\n-\n-    let map = ast_map::map_crate(*crate);\n+    let srv = fold.ctxt;\n \n     fn add_ret_ty(\n         doc: option<doc::retdoc>,\n@@ -46,14 +45,18 @@ fn fold_fn(\n         }\n     }\n \n-    ~{\n-        return: alt map.get(doc.id) {\n+    let retty = srv.exec {|ctxt|\n+        alt ctxt.map.get(doc.id) {\n           ast_map::node_item(@{\n             node: ast::item_fn(decl, _, _), _\n           }) {\n-            add_ret_ty(doc.return, pprust::ty_to_str(decl.output))\n+            pprust::ty_to_str(decl.output)\n           }\n         }\n+    };\n+\n+    ~{\n+        return: add_ret_ty(doc.return, retty)\n         with *doc\n     }\n }\n@@ -64,9 +67,9 @@ mod tests {\n     #[test]\n     fn should_add_fn_ret_types() {\n         let source = \"fn a() -> int { }\";\n-        let ast = parse::from_str(source);\n-        let doc = extract::extract(ast, \"\");\n-        let doc = run(doc, ast);\n+        let srv = astsrv::mk_seq_srv_from_str(source);\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = run(srv, doc);\n         assert option::get(doc.topmod.fns[0].return).ty == some(\"int\");\n     }\n }"}]}