{"sha": "247db704a97d36fa1bbf27a67295391045e661ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0N2RiNzA0YTk3ZDM2ZmExYmJmMjdhNjcyOTUzOTEwNDVlNjYxYWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-14T02:07:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-14T04:06:57Z"}, "message": "integrate simple notion of borrowing into trans", "tree": {"sha": "32fa5842b6af9745c84d556568e913052e81e6a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32fa5842b6af9745c84d556568e913052e81e6a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247db704a97d36fa1bbf27a67295391045e661ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247db704a97d36fa1bbf27a67295391045e661ac", "html_url": "https://github.com/rust-lang/rust/commit/247db704a97d36fa1bbf27a67295391045e661ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247db704a97d36fa1bbf27a67295391045e661ac/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378996092ec494126585d36d8984fa11c5ae4ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/378996092ec494126585d36d8984fa11c5ae4ae2", "html_url": "https://github.com/rust-lang/rust/commit/378996092ec494126585d36d8984fa11c5ae4ae2"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "6e48fb2f112f309c42a2898ab2b2b2932836f320", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=247db704a97d36fa1bbf27a67295391045e661ac", "patch": "@@ -844,6 +844,7 @@ impl assignment for infer_ctxt {\n                 sub(self).contraregions(r_a, r_b).chain {|_r|\n                     // if successful, add an entry indicating that\n                     // borrowing occurred\n+                    #debug[\"borrowing expression #%?\", a_node_id];\n                     self.tcx.borrowings.insert(a_node_id, ());\n                     uok()\n                 }"}, {"sha": "7b6c5450eedb1b92bf782442536ab309fa03b771", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 69, "deletions": 12, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=247db704a97d36fa1bbf27a67295391045e661ac", "patch": "@@ -313,8 +313,8 @@ fn shared_malloc(cx: block, llptr_ty: TypeRef, llsize: ValueRef)\n //\n // The runtime equivalent is box_body() in \"rust_internal.h\".\n fn opaque_box_body(bcx: block,\n-                      body_t: ty::t,\n-                      boxptr: ValueRef) -> ValueRef {\n+                   body_t: ty::t,\n+                   boxptr: ValueRef) -> ValueRef {\n     let _icx = bcx.insn_ctxt(\"opaque_box_body\");\n     let ccx = bcx.ccx();\n     let boxptr = PointerCast(bcx, boxptr, T_ptr(T_box_header(ccx)));\n@@ -2323,6 +2323,10 @@ fn trans_index(cx: block, ex: @ast::expr, base: @ast::expr,\n     ret lval_owned(bcx, PointerCast(bcx, elt, T_ptr(llunitty)));\n }\n \n+fn expr_is_borrowed(bcx: block, e: @ast::expr) -> bool {\n+    bcx.tcx().borrowings.contains_key(e.id)\n+}\n+\n fn expr_is_lval(bcx: block, e: @ast::expr) -> bool {\n     let ccx = bcx.ccx();\n     ty::expr_is_lval(ccx.maps.method_map, e)\n@@ -2553,6 +2557,7 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n       }\n       none { trans_temp_lval(cx, e) }\n     };\n+    let lv = adapt_borrowed_value(lv, arg, e);\n     let mut bcx = lv.bcx;\n     let mut val = lv.val;\n     let arg_mode = ty::resolved_mode(ccx.tcx, arg.mode);\n@@ -2611,6 +2616,58 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n     ret rslt(bcx, val);\n }\n \n+fn adapt_borrowed_value(lv: lval_result, arg: ty::arg,\n+                        e: @ast::expr) -> lval_result {\n+    let bcx = lv.bcx;\n+    if !expr_is_borrowed(bcx, e) { ret lv; }\n+\n+    let e_ty = expr_ty(bcx, e);\n+    alt ty::get(e_ty).struct {\n+      ty::ty_box(mt) {\n+        let box_ptr = {\n+            alt lv.kind {\n+              temporary { lv.val }\n+              owned { Load(bcx, lv.val) }\n+              owned_imm { lv.val }\n+            }\n+        };\n+        let body_ptr = GEPi(bcx, box_ptr, [0, abi::box_field_body]);\n+        ret lval_temp(bcx, body_ptr);\n+      }\n+\n+      ty::ty_uniq(_) {\n+        ret lv; // no change needed at runtime (I think)\n+      }\n+\n+      ty::ty_estr(ty::vstore_box) |\n+      ty::ty_evec(_, ty::vstore_box) {\n+        bcx.tcx().sess.span_unimpl(\n+            e.span, #fmt[\"borrowing a value of type %s\",\n+                         ty_to_str(bcx.tcx(), e_ty)]);\n+      }\n+\n+      ty::ty_estr(ty::vstore_uniq) |\n+      ty::ty_evec(_, ty::vstore_uniq) {\n+        bcx.tcx().sess.span_unimpl(\n+            e.span, #fmt[\"borrowing a value of type %s\",\n+                         ty_to_str(bcx.tcx(), e_ty)]);\n+      }\n+\n+      ty::ty_estr(ty::vstore_fixed(_)) |\n+      ty::ty_evec(_, ty::vstore_fixed(_)) {\n+        bcx.tcx().sess.span_unimpl(\n+            e.span, #fmt[\"borrowing a value of type %s\",\n+                         ty_to_str(bcx.tcx(), e_ty)]);\n+      }\n+\n+      _ {\n+        bcx.tcx().sess.span_bug(\n+            e.span, #fmt[\"cannot borrow a value of type %s\",\n+                         ty_to_str(bcx.tcx(), e_ty)]);\n+      }\n+    }\n+}\n+\n enum call_args {\n     arg_exprs([@ast::expr]),\n     arg_vals([ValueRef])\n@@ -3006,7 +3063,12 @@ fn trans_expr_save_in(bcx: block, e: @ast::expr, dest: ValueRef)\n fn trans_temp_lval(bcx: block, e: @ast::expr) -> lval_result {\n     let _icx = bcx.insn_ctxt(\"trans_temp_lval\");\n     let mut bcx = bcx;\n-    if expr_is_lval(bcx, e) {\n+    if expr_is_lval(bcx, e) && !expr_is_borrowed(bcx, e) {\n+        // if the expression is borrowed, then are not actually passing the\n+        // lvalue itself, but rather an adaptation of it.  This is a bit of a\n+        // hack, though, but it only needs to exist so long as we have\n+        // reference modes and the like---otherwise, all potentially borrowed\n+        // things will go directly through trans_expr() as they ought to.\n         ret trans_lval(bcx, e);\n     } else {\n         let ty = expr_ty(bcx, e);\n@@ -3047,12 +3109,6 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n     let tcx = bcx.tcx();\n     debuginfo::update_source_pos(bcx, e.span);\n \n-    #debug[\"trans_expr(e=%s,e.id=%d,dest=%s,ty=%s)\",\n-           expr_to_str(e),\n-           e.id,\n-           dest_str(bcx.ccx(), dest),\n-           ty_to_str(tcx, expr_ty(bcx, e))];\n-\n     if expr_is_lval(bcx, e) {\n         ret lval_to_dps(bcx, e, dest);\n     }\n@@ -3264,9 +3320,10 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n         let bcx = trans_expr(bcx, val, save_in(ptr_val));\n         store_in_dest(bcx, ptr_val, dest)\n       }\n-      _ { bcx.tcx().sess.span_bug(e.span, \"trans_expr reached \\\n-             fall-through case\"); }\n-\n+      _ {\n+        bcx.tcx().sess.span_bug(e.span, \"trans_expr reached \\\n+                                         fall-through case\");\n+      }\n     }\n }\n "}, {"sha": "0210edb60fb2cadd8b8b0049218d20bc2f577fe1", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=247db704a97d36fa1bbf27a67295391045e661ac", "patch": "@@ -875,6 +875,13 @@ pure fn type_is_boxed(ty: t) -> bool {\n     }\n }\n \n+pure fn type_is_region_ptr(ty: t) -> bool {\n+    alt get(ty).struct {\n+      ty_rptr(_, _) { true }\n+      _ { false }\n+    }\n+}\n+\n pure fn type_is_slice(ty: t) -> bool {\n     alt get(ty).struct {\n       ty_evec(_, vstore_slice(_)) | ty_estr(vstore_slice(_)) { true }\n@@ -924,7 +931,7 @@ pure fn type_is_scalar(ty: t) -> bool {\n // FIXME maybe inline this for speed?\n fn type_is_immediate(ty: t) -> bool {\n     ret type_is_scalar(ty) || type_is_boxed(ty) ||\n-        type_is_unique(ty);\n+        type_is_unique(ty) || type_is_region_ptr(ty);\n }\n \n fn type_needs_drop(cx: ctxt, ty: t) -> bool {"}, {"sha": "77e2dfcb44c8442b4a4b3cbd22fdd755485bccaa", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247db704a97d36fa1bbf27a67295391045e661ac/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=247db704a97d36fa1bbf27a67295391045e661ac", "patch": "@@ -2581,7 +2581,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n     // A generic function to factor out common logic from call and bind\n     // expressions.\n     fn check_call_or_bind(\n-        fcx: @fn_ctxt, sp: span, call_expr_id: ast::node_id, fty: ty::t,\n+        fcx: @fn_ctxt, sp: span, fty: ty::t,\n         args: [option<@ast::expr>]) -> {fty: ty::t, bot: bool} {\n \n         let fty = universally_quantify_before_call(fcx, region_env(), fty);\n@@ -2680,8 +2680,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // Call the generic checker.\n         let fty = {\n             let args_opt = args.map { |arg| some(arg) };\n-            let r = check_call_or_bind(fcx, sp, call_expr_id,\n-                                       fn_ty, args_opt);\n+            let r = check_call_or_bind(fcx, sp, fn_ty, args_opt);\n             bot |= r.bot;\n             r.fty\n         };\n@@ -2762,8 +2761,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           some(origin) {\n             let {fty: method_ty, bot: bot} = {\n                 let method_ty = fcx.node_ty(callee_id);\n-                check_call_or_bind(fcx, op_ex.span, op_ex.id,\n-                                   method_ty, args)\n+                check_call_or_bind(fcx, op_ex.span, method_ty, args)\n             };\n             fcx.ccx.method_map.insert(op_ex.id, origin);\n             some((ty::ty_fn_ret(method_ty), bot))\n@@ -3194,7 +3192,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n         let {fty, bot: ccob_bot} = {\n             let fn_ty = fcx.expr_ty(f);\n-            check_call_or_bind(fcx, expr.span, expr.id, fn_ty, args)\n+            check_call_or_bind(fcx, expr.span, fn_ty, args)\n         };\n         bot |= ccob_bot;\n "}, {"sha": "18c7222dfa64cf687936d0b7c2d4f92135ac4018", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/247db704a97d36fa1bbf27a67295391045e661ac/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247db704a97d36fa1bbf27a67295391045e661ac/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=247db704a97d36fa1bbf27a67295391045e661ac", "patch": "@@ -1,11 +1,10 @@\n-// xfail-test it don't work yet\n-\n fn foo(x: &uint) -> uint {\n     *x\n }\n \n fn main() {\n-    let p = @3u;\n+    let p = @22u;\n     let r = foo(p);\n-    assert r == 3u;\n+    #debug[\"r=%u\", r];\n+    assert r == 22u;\n }"}]}