{"sha": "7eb1a1afcfd5564f0d78f37c9c6397a070d794c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjFhMWFmY2ZkNTU2NGYwZDc4ZjM3YzljNjM5N2EwNzBkNzk0YzI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-13T19:23:12Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-13T20:54:42Z"}, "message": "Validate that locals have a corresponding `LocalDecl`", "tree": {"sha": "9ff1e7167623fe7cc7124609aa13f1739333d693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff1e7167623fe7cc7124609aa13f1739333d693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb1a1afcfd5564f0d78f37c9c6397a070d794c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb1a1afcfd5564f0d78f37c9c6397a070d794c2", "html_url": "https://github.com/rust-lang/rust/commit/7eb1a1afcfd5564f0d78f37c9c6397a070d794c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb1a1afcfd5564f0d78f37c9c6397a070d794c2/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a11a25378293e41cfcb00dbf67c524ffd79b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a11a25378293e41cfcb00dbf67c524ffd79b39", "html_url": "https://github.com/rust-lang/rust/commit/f2a11a25378293e41cfcb00dbf67c524ffd79b39"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "919e4a90a1716ca49d8995b2ba7d643e3690ace8", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7eb1a1afcfd5564f0d78f37c9c6397a070d794c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb1a1afcfd5564f0d78f37c9c6397a070d794c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=7eb1a1afcfd5564f0d78f37c9c6397a070d794c2", "patch": "@@ -183,6 +183,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n+        if self.body.local_decls.get(*local).is_none() {\n+            self.fail(\n+                location,\n+                format!(\"local {:?} has no corresponding declaration in `body.local_decls`\", local),\n+            );\n+        }\n+\n         if self.reachable_blocks.contains(location.block) && context.is_use() {\n             // Uses of locals must occur while the local's storage is allocated.\n             self.storage_liveness.seek_after_primary_effect(location);"}]}