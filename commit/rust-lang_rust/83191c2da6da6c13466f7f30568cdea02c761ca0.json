{"sha": "83191c2da6da6c13466f7f30568cdea02c761ca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMTkxYzJkYTZkYTZjMTM0NjZmN2YzMDU2OGNkZWEwMmM3NjFjYTA=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-04T22:08:59Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-02-12T19:20:56Z"}, "message": "Update float documentation to use associated consts", "tree": {"sha": "d066dd07e65828fcf8c34c2c4cc062a842c2735c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d066dd07e65828fcf8c34c2c4cc062a842c2735c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83191c2da6da6c13466f7f30568cdea02c761ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83191c2da6da6c13466f7f30568cdea02c761ca0", "html_url": "https://github.com/rust-lang/rust/commit/83191c2da6da6c13466f7f30568cdea02c761ca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83191c2da6da6c13466f7f30568cdea02c761ca0/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086927480be716a14f9c68954d417b544066184b", "url": "https://api.github.com/repos/rust-lang/rust/commits/086927480be716a14f9c68954d417b544066184b", "html_url": "https://github.com/rust-lang/rust/commit/086927480be716a14f9c68954d417b544066184b"}], "stats": {"total": 24, "additions": 2, "deletions": 22}, "files": [{"sha": "3a2f3691d8a976b876ac1596a34e702aaaca9907", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/83191c2da6da6c13466f7f30568cdea02c761ca0/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83191c2da6da6c13466f7f30568cdea02c761ca0/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=83191c2da6da6c13466f7f30568cdea02c761ca0", "patch": "@@ -213,8 +213,6 @@ impl f32 {\n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let nan = f32::NAN;\n     /// let f = 7.0_f32;\n     ///\n@@ -239,8 +237,6 @@ impl f32 {\n     /// `false` otherwise.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 7.0f32;\n     /// let inf = f32::INFINITY;\n     /// let neg_inf = f32::NEG_INFINITY;\n@@ -261,8 +257,6 @@ impl f32 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 7.0f32;\n     /// let inf = f32::INFINITY;\n     /// let neg_inf = f32::NEG_INFINITY;\n@@ -286,8 +280,6 @@ impl f32 {\n     /// [subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n     /// let max = f32::MAX;\n     /// let lower_than_min = 1.0e-40_f32;\n@@ -315,7 +307,6 @@ impl f32 {\n     ///\n     /// ```\n     /// use std::num::FpCategory;\n-    /// use std::f32;\n     ///\n     /// let num = 12.4_f32;\n     /// let inf = f32::INFINITY;\n@@ -375,8 +366,6 @@ impl f32 {\n     /// Takes the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 2.0_f32;\n     /// let abs_difference = (x.recip() - (1.0 / x)).abs();\n     ///\n@@ -391,7 +380,7 @@ impl f32 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// use std::f32::{self, consts};\n+    /// use std::f32::consts;\n     ///\n     /// let angle = consts::PI;\n     ///\n@@ -410,7 +399,7 @@ impl f32 {\n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// use std::f32::{self, consts};\n+    /// use std::f32::consts;\n     ///\n     /// let angle = 180.0f32;\n     ///"}, {"sha": "ca81f98a6b50565ecd755947bac81a8ede17cf54", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83191c2da6da6c13466f7f30568cdea02c761ca0/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83191c2da6da6c13466f7f30568cdea02c761ca0/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=83191c2da6da6c13466f7f30568cdea02c761ca0", "patch": "@@ -212,8 +212,6 @@ impl f64 {\n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let nan = f64::NAN;\n     /// let f = 7.0_f64;\n     ///\n@@ -238,8 +236,6 @@ impl f64 {\n     /// `false` otherwise.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let f = 7.0f64;\n     /// let inf = f64::INFINITY;\n     /// let neg_inf = f64::NEG_INFINITY;\n@@ -260,8 +256,6 @@ impl f64 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let f = 7.0f64;\n     /// let inf: f64 = f64::INFINITY;\n     /// let neg_inf: f64 = f64::NEG_INFINITY;\n@@ -285,8 +279,6 @@ impl f64 {\n     /// [subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let min = f64::MIN_POSITIVE; // 2.2250738585072014e-308f64\n     /// let max = f64::MAX;\n     /// let lower_than_min = 1.0e-308_f64;\n@@ -314,7 +306,6 @@ impl f64 {\n     ///\n     /// ```\n     /// use std::num::FpCategory;\n-    /// use std::f64;\n     ///\n     /// let num = 12.4_f64;\n     /// let inf = f64::INFINITY;"}]}