{"sha": "a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjg0MmZiOGI3YjU1MDNiMWM0ZmM0OTM1NWVkZDRmMmZlMGQyOGQ=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T21:19:32Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-19T21:19:32Z"}, "message": "Add tests and only traverse in the crates directory", "tree": {"sha": "8a6044df2e589d1dab26f9551b13360fac0e974f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6044df2e589d1dab26f9551b13360fac0e974f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "html_url": "https://github.com/rust-lang/rust/commit/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db677414304bec41a5eae57eea4eb0b546619415", "url": "https://api.github.com/repos/rust-lang/rust/commits/db677414304bec41a5eae57eea4eb0b546619415", "html_url": "https://github.com/rust-lang/rust/commit/db677414304bec41a5eae57eea4eb0b546619415"}], "stats": {"total": 279, "additions": 185, "deletions": 94}, "files": [{"sha": "4f8c46ab3c2821a0722f6a7d8dbc1c0cad7efd0c", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -73,6 +73,10 @@ pub(crate) fn block(p: &mut Parser) {\n                             //     for _ in () {}\n                             //     {}\n                             //     {}\n+                            //     macro_rules! test {\n+                            //          () => {}\n+                            //     }\n+                            //     test!{}\n                             // }\n                             if is_blocklike {\n                                 p.eat(SEMI);\n@@ -168,13 +172,13 @@ fn current_op(p: &Parser) -> (u8, Op) {\n // Parses expression with binding power of at least bp.\n fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n     let mut lhs = match lhs(p, r) {\n-        Some((lhs, macro_blocklike)) => {\n+        Some((lhs, blocklike)) => {\n             // test stmt_bin_expr_ambiguity\n             // fn foo() {\n             //     let _ = {1} & 2;\n             //     {1} &2;\n             // }\n-            if r.prefer_stmt && macro_blocklike.is_block() {\n+            if r.prefer_stmt && blocklike.is_block() {\n                 return BlockLike::Block;\n             }\n             lhs"}, {"sha": "cd7d62affb3bc6667460762da9c71a53afa4202b", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -353,6 +353,7 @@ pub(crate) fn match_arm_list(p: &mut Parser) {\n // fn foo() {\n //     match () {\n //         _ => (),\n+//         _ if Test>{field: 0} => (),\n //         X | Y if Z => (),\n //         | X | Y if Z => (),\n //         | X => (),"}, {"sha": "3380fa4ca13156f5ea507d64f243b6a4be6d7171", "filename": "crates/ra_syntax/tests/data/parser/inline/0069_match_arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0069_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0069_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0069_match_arm.rs?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -1,6 +1,7 @@\n fn foo() {\n     match () {\n         _ => (),\n+        _ if Test>{field: 0} => (),\n         X | Y if Z => (),\n         | X | Y if Z => (),\n         | X => (),"}, {"sha": "e5647765cb00014ae0b349cd4ec158ea03fc47b2", "filename": "crates/ra_syntax/tests/data/parser/inline/0069_match_arm.txt", "status": "modified", "additions": 117, "deletions": 77, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0069_match_arm.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0069_match_arm.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0069_match_arm.txt?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 125)\n-  FN_DEF@[0; 124)\n+SOURCE_FILE@[0; 161)\n+  FN_DEF@[0; 160)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n     NAME@[3; 6)\n@@ -8,18 +8,18 @@ SOURCE_FILE@[0; 125)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n     WHITESPACE@[8; 9)\n-    BLOCK@[9; 124)\n+    BLOCK@[9; 160)\n       L_CURLY@[9; 10)\n       WHITESPACE@[10; 15)\n-      EXPR_STMT@[15; 122)\n-        MATCH_EXPR@[15; 121)\n+      EXPR_STMT@[15; 158)\n+        MATCH_EXPR@[15; 157)\n           MATCH_KW@[15; 20)\n           WHITESPACE@[20; 21)\n           TUPLE_EXPR@[21; 23)\n             L_PAREN@[21; 22)\n             R_PAREN@[22; 23)\n           WHITESPACE@[23; 24)\n-          MATCH_ARM_LIST@[24; 121)\n+          MATCH_ARM_LIST@[24; 157)\n             L_CURLY@[24; 25)\n             WHITESPACE@[25; 34)\n             MATCH_ARM@[34; 41)\n@@ -33,76 +33,116 @@ SOURCE_FILE@[0; 125)\n                 R_PAREN@[40; 41)\n             COMMA@[41; 42)\n             WHITESPACE@[42; 51)\n-            MATCH_ARM@[51; 67)\n-              BIND_PAT@[51; 52)\n-                NAME@[51; 52)\n-                  IDENT@[51; 52) \"X\"\n+            MATCH_ARM@[51; 77)\n+              PLACEHOLDER_PAT@[51; 52)\n+                UNDERSCORE@[51; 52)\n               WHITESPACE@[52; 53)\n-              PIPE@[53; 54)\n-              WHITESPACE@[54; 55)\n-              BIND_PAT@[55; 56)\n-                NAME@[55; 56)\n-                  IDENT@[55; 56) \"Y\"\n-              WHITESPACE@[56; 57)\n-              IF_KW@[57; 59)\n-              WHITESPACE@[59; 60)\n-              PATH_EXPR@[60; 61)\n-                PATH@[60; 61)\n-                  PATH_SEGMENT@[60; 61)\n-                    NAME_REF@[60; 61)\n-                      IDENT@[60; 61) \"Z\"\n-              WHITESPACE@[61; 62)\n-              FAT_ARROW@[62; 64)\n-              WHITESPACE@[64; 65)\n-              TUPLE_EXPR@[65; 67)\n-                L_PAREN@[65; 66)\n-                R_PAREN@[66; 67)\n-            COMMA@[67; 68)\n-            WHITESPACE@[68; 77)\n-            MATCH_ARM@[77; 95)\n-              PIPE@[77; 78)\n-              WHITESPACE@[78; 79)\n-              BIND_PAT@[79; 80)\n-                NAME@[79; 80)\n-                  IDENT@[79; 80) \"X\"\n-              WHITESPACE@[80; 81)\n-              PIPE@[81; 82)\n-              WHITESPACE@[82; 83)\n-              BIND_PAT@[83; 84)\n-                NAME@[83; 84)\n-                  IDENT@[83; 84) \"Y\"\n-              WHITESPACE@[84; 85)\n-              IF_KW@[85; 87)\n-              WHITESPACE@[87; 88)\n-              PATH_EXPR@[88; 89)\n-                PATH@[88; 89)\n-                  PATH_SEGMENT@[88; 89)\n-                    NAME_REF@[88; 89)\n-                      IDENT@[88; 89) \"Z\"\n-              WHITESPACE@[89; 90)\n-              FAT_ARROW@[90; 92)\n+              IF_KW@[53; 55)\n+              WHITESPACE@[55; 56)\n+              BIN_EXPR@[56; 71)\n+                PATH_EXPR@[56; 60)\n+                  PATH@[56; 60)\n+                    PATH_SEGMENT@[56; 60)\n+                      NAME_REF@[56; 60)\n+                        IDENT@[56; 60) \"Test\"\n+                R_ANGLE@[60; 61)\n+                BLOCK_EXPR@[61; 71)\n+                  BLOCK@[61; 71)\n+                    L_CURLY@[61; 62)\n+                    EXPR_STMT@[62; 67)\n+                      PATH_EXPR@[62; 67)\n+                        PATH@[62; 67)\n+                          PATH_SEGMENT@[62; 67)\n+                            NAME_REF@[62; 67)\n+                              IDENT@[62; 67) \"field\"\n+                              err: `expected SEMI`\n+                              err: `expected expression`\n+                    EXPR_STMT@[67; 68)\n+                      ERROR@[67; 68)\n+                        COLON@[67; 68)\n+                        err: `expected SEMI`\n+                    WHITESPACE@[68; 69)\n+                    LITERAL@[69; 70)\n+                      INT_NUMBER@[69; 70) \"0\"\n+                    R_CURLY@[70; 71)\n+              WHITESPACE@[71; 72)\n+              FAT_ARROW@[72; 74)\n+              WHITESPACE@[74; 75)\n+              TUPLE_EXPR@[75; 77)\n+                L_PAREN@[75; 76)\n+                R_PAREN@[76; 77)\n+            COMMA@[77; 78)\n+            WHITESPACE@[78; 87)\n+            MATCH_ARM@[87; 103)\n+              BIND_PAT@[87; 88)\n+                NAME@[87; 88)\n+                  IDENT@[87; 88) \"X\"\n+              WHITESPACE@[88; 89)\n+              PIPE@[89; 90)\n+              WHITESPACE@[90; 91)\n+              BIND_PAT@[91; 92)\n+                NAME@[91; 92)\n+                  IDENT@[91; 92) \"Y\"\n               WHITESPACE@[92; 93)\n-              TUPLE_EXPR@[93; 95)\n-                L_PAREN@[93; 94)\n-                R_PAREN@[94; 95)\n-            COMMA@[95; 96)\n-            WHITESPACE@[96; 105)\n-            MATCH_ARM@[105; 114)\n-              PIPE@[105; 106)\n-              WHITESPACE@[106; 107)\n-              BIND_PAT@[107; 108)\n-                NAME@[107; 108)\n-                  IDENT@[107; 108) \"X\"\n-              WHITESPACE@[108; 109)\n-              FAT_ARROW@[109; 111)\n-              WHITESPACE@[111; 112)\n-              TUPLE_EXPR@[112; 114)\n-                L_PAREN@[112; 113)\n-                R_PAREN@[113; 114)\n-            COMMA@[114; 115)\n-            WHITESPACE@[115; 120)\n-            R_CURLY@[120; 121)\n-        SEMI@[121; 122)\n-      WHITESPACE@[122; 123)\n-      R_CURLY@[123; 124)\n-  WHITESPACE@[124; 125)\n+              IF_KW@[93; 95)\n+              WHITESPACE@[95; 96)\n+              PATH_EXPR@[96; 97)\n+                PATH@[96; 97)\n+                  PATH_SEGMENT@[96; 97)\n+                    NAME_REF@[96; 97)\n+                      IDENT@[96; 97) \"Z\"\n+              WHITESPACE@[97; 98)\n+              FAT_ARROW@[98; 100)\n+              WHITESPACE@[100; 101)\n+              TUPLE_EXPR@[101; 103)\n+                L_PAREN@[101; 102)\n+                R_PAREN@[102; 103)\n+            COMMA@[103; 104)\n+            WHITESPACE@[104; 113)\n+            MATCH_ARM@[113; 131)\n+              PIPE@[113; 114)\n+              WHITESPACE@[114; 115)\n+              BIND_PAT@[115; 116)\n+                NAME@[115; 116)\n+                  IDENT@[115; 116) \"X\"\n+              WHITESPACE@[116; 117)\n+              PIPE@[117; 118)\n+              WHITESPACE@[118; 119)\n+              BIND_PAT@[119; 120)\n+                NAME@[119; 120)\n+                  IDENT@[119; 120) \"Y\"\n+              WHITESPACE@[120; 121)\n+              IF_KW@[121; 123)\n+              WHITESPACE@[123; 124)\n+              PATH_EXPR@[124; 125)\n+                PATH@[124; 125)\n+                  PATH_SEGMENT@[124; 125)\n+                    NAME_REF@[124; 125)\n+                      IDENT@[124; 125) \"Z\"\n+              WHITESPACE@[125; 126)\n+              FAT_ARROW@[126; 128)\n+              WHITESPACE@[128; 129)\n+              TUPLE_EXPR@[129; 131)\n+                L_PAREN@[129; 130)\n+                R_PAREN@[130; 131)\n+            COMMA@[131; 132)\n+            WHITESPACE@[132; 141)\n+            MATCH_ARM@[141; 150)\n+              PIPE@[141; 142)\n+              WHITESPACE@[142; 143)\n+              BIND_PAT@[143; 144)\n+                NAME@[143; 144)\n+                  IDENT@[143; 144) \"X\"\n+              WHITESPACE@[144; 145)\n+              FAT_ARROW@[145; 147)\n+              WHITESPACE@[147; 148)\n+              TUPLE_EXPR@[148; 150)\n+                L_PAREN@[148; 149)\n+                R_PAREN@[149; 150)\n+            COMMA@[150; 151)\n+            WHITESPACE@[151; 156)\n+            R_CURLY@[156; 157)\n+        SEMI@[157; 158)\n+      WHITESPACE@[158; 159)\n+      R_CURLY@[159; 160)\n+  WHITESPACE@[160; 161)"}, {"sha": "4919665cb57817f1f844f33c3bbb6c64aa44bc3c", "filename": "crates/ra_syntax/tests/data/parser/inline/0086_no_semi_after_block.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.rs?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -6,4 +6,8 @@ fn foo() {\n     for _ in () {}\n     {}\n     {}\n+    macro_rules! test {\n+         () => {}\n+    }\n+    test!{}\n }"}, {"sha": "63b2300916b74d64252410851ce857e98a99a6fd", "filename": "crates/ra_syntax/tests/data/parser/inline/0086_no_semi_after_block.txt", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2F0086_no_semi_after_block.txt?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 107)\n-  FN_DEF@[0; 106)\n+SOURCE_FILE@[0; 167)\n+  FN_DEF@[0; 166)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n     NAME@[3; 6)\n@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 107)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n     WHITESPACE@[8; 9)\n-    BLOCK@[9; 106)\n+    BLOCK@[9; 166)\n       L_CURLY@[9; 10)\n       WHITESPACE@[10; 15)\n       EXPR_STMT@[15; 25)\n@@ -78,10 +78,46 @@ SOURCE_FILE@[0; 107)\n             L_CURLY@[95; 96)\n             R_CURLY@[96; 97)\n       WHITESPACE@[97; 102)\n-      BLOCK_EXPR@[102; 104)\n-        BLOCK@[102; 104)\n-          L_CURLY@[102; 103)\n-          R_CURLY@[103; 104)\n-      WHITESPACE@[104; 105)\n-      R_CURLY@[105; 106)\n-  WHITESPACE@[106; 107)\n+      EXPR_STMT@[102; 104)\n+        BLOCK_EXPR@[102; 104)\n+          BLOCK@[102; 104)\n+            L_CURLY@[102; 103)\n+            R_CURLY@[103; 104)\n+      WHITESPACE@[104; 109)\n+      EXPR_STMT@[109; 152)\n+        MACRO_CALL@[109; 152)\n+          PATH@[109; 120)\n+            PATH_SEGMENT@[109; 120)\n+              NAME_REF@[109; 120)\n+                IDENT@[109; 120) \"macro_rules\"\n+          EXCL@[120; 121)\n+          WHITESPACE@[121; 122)\n+          IDENT@[122; 126) \"test\"\n+          WHITESPACE@[126; 127)\n+          TOKEN_TREE@[127; 152)\n+            L_CURLY@[127; 128)\n+            WHITESPACE@[128; 138)\n+            TOKEN_TREE@[138; 140)\n+              L_PAREN@[138; 139)\n+              R_PAREN@[139; 140)\n+            WHITESPACE@[140; 141)\n+            FAT_ARROW@[141; 143)\n+            WHITESPACE@[143; 144)\n+            TOKEN_TREE@[144; 146)\n+              L_CURLY@[144; 145)\n+              R_CURLY@[145; 146)\n+            WHITESPACE@[146; 151)\n+            R_CURLY@[151; 152)\n+      WHITESPACE@[152; 157)\n+      MACRO_CALL@[157; 164)\n+        PATH@[157; 161)\n+          PATH_SEGMENT@[157; 161)\n+            NAME_REF@[157; 161)\n+              IDENT@[157; 161) \"test\"\n+        EXCL@[161; 162)\n+        TOKEN_TREE@[162; 164)\n+          L_CURLY@[162; 163)\n+          R_CURLY@[163; 164)\n+      WHITESPACE@[164; 165)\n+      R_CURLY@[165; 166)\n+  WHITESPACE@[166; 167)"}, {"sha": "c17b6ffa606872c498a6e28f28bb2f0929e03675", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=a3b842fb8b7b5503b1c4fc49355edd4f2fe0d28d", "patch": "@@ -41,8 +41,10 @@ fn parser_fuzz_tests() {\n /// TODO: Use this as a benchmark\n #[test]\n fn self_hosting_parsing() {\n+    use std::ffi::OsStr;\n     let empty_vec = vec![];\n-    let dir = project_dir();\n+    let dir = project_dir().join(\"crates\");\n+    let mut count = 0;\n     for entry in walkdir::WalkDir::new(dir)\n         .into_iter()\n         .filter_entry(|entry| {\n@@ -52,17 +54,16 @@ fn self_hosting_parsing() {\n                 // TODO: this more neatly\n                 .any(|component| {\n                     // Get all files which are not in the crates/ra_syntax/tests/data folder\n-                    (component == Component::Normal(std::ffi::OsStr::new(\"data\"))\n-                    // or the .git folder\n-                        || component == Component::Normal(std::ffi::OsStr::new(\".git\")))\n+                    component == Component::Normal(OsStr::new(\"data\"))\n                 })\n         })\n         .map(|e| e.unwrap())\n         .filter(|entry| {\n             // Get all `.rs ` files\n-            !entry.path().is_dir() && (entry.path().extension() == Some(std::ffi::OsStr::new(\"rs\")))\n+            !entry.path().is_dir() && (entry.path().extension() == Some(OsStr::new(\"rs\")))\n         })\n     {\n+        count += 1;\n         let text = read_text(entry.path());\n         let node = SourceFileNode::parse(&text);\n         let errors = node.errors();\n@@ -72,6 +73,10 @@ fn self_hosting_parsing() {\n             entry\n         );\n     }\n+    assert!(\n+        count > 30,\n+        \"self_hosting_parsing found too few files - is it running in the right directory?\"\n+    )\n }\n /// Read file and normalize newlines.\n ///"}]}