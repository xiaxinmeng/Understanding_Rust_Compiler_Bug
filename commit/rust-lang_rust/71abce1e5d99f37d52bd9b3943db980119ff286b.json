{"sha": "71abce1e5d99f37d52bd9b3943db980119ff286b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYWJjZTFlNWQ5OWYzN2Q1MmJkOWIzOTQzZGI5ODAxMTlmZjI4NmI=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2019-11-30T13:54:39Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2019-11-30T13:54:39Z"}, "message": "document match and move keywords", "tree": {"sha": "765b4e0b577a6ab6bebdb8715105b8814262ee3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/765b4e0b577a6ab6bebdb8715105b8814262ee3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71abce1e5d99f37d52bd9b3943db980119ff286b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71abce1e5d99f37d52bd9b3943db980119ff286b", "html_url": "https://github.com/rust-lang/rust/commit/71abce1e5d99f37d52bd9b3943db980119ff286b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71abce1e5d99f37d52bd9b3943db980119ff286b/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1bbd69e13c9e04a4c2b75612bc0c31af972439", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1bbd69e13c9e04a4c2b75612bc0c31af972439", "html_url": "https://github.com/rust-lang/rust/commit/8f1bbd69e13c9e04a4c2b75612bc0c31af972439"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "6bc0af47be5affe564a2db193934ddb01a102057", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/71abce1e5d99f37d52bd9b3943db980119ff286b/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71abce1e5d99f37d52bd9b3943db980119ff286b/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=71abce1e5d99f37d52bd9b3943db980119ff286b", "patch": "@@ -812,9 +812,48 @@ mod loop_keyword { }\n //\n /// Control flow based on pattern matching.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n-///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// `match` can be used to run code conditionally. Every pattern must\n+/// be handled exhaustively either explicitly or by using wildcards like\n+/// `_` in the `match`. Since `match` is an expression values can also be\n+/// returned.\n+/// \n+/// ```rust\n+/// let opt = Option::None::<usize>;\n+/// let x = match opt {\n+///     Some(int) => int,\n+///     None => 10,\n+/// }\n+/// assert_eq!(x, 10);\n+/// \n+/// let a_number = Option::Some(10);\n+/// match a_number {\n+///     Some(x) if x <= 5 => println!(\"0 to 5 num = {}\", x),\n+///     Some(x @ 6..=10) => println!(\"6 to 10 num = {}\", x),\n+///     None => oh_no(),\n+///     _ => all_other_numbers(),\n+/// }\n+/// ```\n+/// \n+/// `match` can be used to gain access to the inner members of an enum \n+/// and use them directly.\n+/// \n+/// ```rust\n+/// enum Outer {\n+///     Double(Option<u8>, Option<String>),\n+///     Single(Option<u8>),\n+///     Empty\n+/// }\n+/// \n+/// let get_inner = Outer::Double(None, Some(String::new()));\n+/// match get_inner {\n+///     Outer::Double(None, Some(st)) => println!(\"{}\", st),\n+///     Outer::Single(opt) => println!(\"{:?}\", opt),\n+///     _ => the_rest(),\n+/// }\n+/// ```\n+/// \n+/// For more information on `match` and matching in general, see the [Reference].\n+/// [Reference]: ../reference/expressions/match-expr.html\n mod match_keyword { }\n \n #[doc(keyword = \"mod\")]\n@@ -831,9 +870,29 @@ mod mod_keyword { }\n //\n /// Capture a [closure]'s environment by value.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `move` converts any variables captured by reference or mutable reference\n+/// to owned by value variables. The three [`Fn` trait]'s mirror the ways to capture\n+/// variables, when `move` is used the closures is represented by the `FnOnce` trait.\n+/// \n+/// ```rust\n+/// \n+/// ```\n+/// \n+/// `move` is often used when [threads] are involved.\n+/// \n+/// ```rust\n+/// let x = 5;\n+/// \n+/// std::thread::spawn(move || {\n+///     println!(\"captured {} by value\", x)\n+/// }).join().unwrap();\n+/// \n+/// // x is no longer available\n+/// ```\n ///\n-/// [closure]: ../book/second-edition/ch13-01-closures.html\n+/// [`Fn` trait]: ../std/ops/trait.Fn.html\n+/// [closure]: ../book/ch13-01-closures.html\n+/// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads\n /// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod move_keyword { }\n "}]}