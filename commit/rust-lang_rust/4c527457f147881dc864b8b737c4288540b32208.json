{"sha": "4c527457f147881dc864b8b737c4288540b32208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNTI3NDU3ZjE0Nzg4MWRjODY0YjhiNzM3YzQyODg1NDBiMzIyMDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-24T14:03:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:20Z"}, "message": "rip out link guards\n\nAs discussed in\nhttps://github.com/rust-lang/rust/pull/32293#issuecomment-200597130,\nadding link guards are a heuristic that is causing undue complications:\n\n- the link guards inject extra public symbols, which is not always OK.\n- link guards as implemented could be a non-trivial performance hit,\n  because no attempt is made to \"de-duplicate\" the dependency graph,\n  so at worst you have O(N!) calls to the link guard functions.\n\nNonetheless, link guards are very helpful in detecting errors, so it may\nbe worth adding them back in some modified form in the future.", "tree": {"sha": "10c7f992cfb8f0f35eacacf50cabf16cbc6214ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c7f992cfb8f0f35eacacf50cabf16cbc6214ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c527457f147881dc864b8b737c4288540b32208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c527457f147881dc864b8b737c4288540b32208", "html_url": "https://github.com/rust-lang/rust/commit/4c527457f147881dc864b8b737c4288540b32208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c527457f147881dc864b8b737c4288540b32208/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b385ce12232a6c192b168b75ec9867a5a83d2036", "url": "https://api.github.com/repos/rust-lang/rust/commits/b385ce12232a6c192b168b75ec9867a5a83d2036", "html_url": "https://github.com/rust-lang/rust/commit/b385ce12232a6c192b168b75ec9867a5a83d2036"}], "stats": {"total": 162, "additions": 0, "deletions": 162}, "files": [{"sha": "c6576b7fe0d9771101634474d1c89571a3172040", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c527457f147881dc864b8b737c4288540b32208/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c527457f147881dc864b8b737c4288540b32208/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=4c527457f147881dc864b8b737c4288540b32208", "patch": "@@ -23,7 +23,6 @@ use session::config::CrateTypeDylib;\n use session::config;\n use syntax::ast;\n use trans::CrateTranslation;\n-use trans::link_guard;\n \n /// Linker abstraction used by back::link to build up the command to invoke a\n /// linker.\n@@ -361,25 +360,6 @@ impl<'a> Linker for MsvcLinker<'a> {\n                 writeln!(f, \"  {}\", symbol)?;\n             }\n \n-            // Add link-guard symbols\n-            {\n-                // local crate\n-                let symbol = link_guard::link_guard_name(&trans.link.crate_name[..],\n-                                                         &trans.link.crate_hash);\n-                try!(writeln!(f, \"  {}\", symbol));\n-            }\n-            // statically linked dependencies\n-            for (i, format) in formats[&CrateTypeDylib].iter().enumerate() {\n-                if *format == Linkage::Static {\n-                    let cnum = (i + 1) as ast::CrateNum;\n-                    let crate_name = cstore.original_crate_name(cnum);\n-                    let svh = cstore.crate_hash(cnum);\n-\n-                    let symbol = link_guard::link_guard_name(&crate_name[..], &svh);\n-                    try!(writeln!(f, \"  {}\", symbol));\n-                }\n-            }\n-\n             Ok(())\n         })();\n         if let Err(e) = res {"}, {"sha": "7231304ec4c4f43185bda4b27c4ba139f0082115", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c527457f147881dc864b8b737c4288540b32208/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c527457f147881dc864b8b737c4288540b32208/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=4c527457f147881dc864b8b737c4288540b32208", "patch": "@@ -79,7 +79,6 @@ use trans::expr;\n use trans::glue;\n use trans::inline;\n use trans::intrinsic;\n-use trans::link_guard;\n use trans::machine;\n use trans::machine::{llalign_of_min, llsize_of, llsize_of_real};\n use trans::meth;\n@@ -2384,7 +2383,6 @@ pub fn create_entry_wrapper(ccx: &CrateContext, sp: Span, main_llfn: ValueRef) {\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n-            link_guard::insert_reference_to_link_guard(ccx, llbb);\n             debuginfo::gdb::insert_reference_to_gdb_debug_scripts_section_global(ccx);\n \n             let (start_fn, args) = if use_start_lang_item {\n@@ -2763,8 +2761,6 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n         symbol_names_test::report_symbol_names(&ccx);\n     }\n \n-    emit_link_guard_if_necessary(&shared_ccx);\n-\n     for ccx in shared_ccx.iter() {\n         if ccx.sess().opts.debuginfo != NoDebugInfo {\n             debuginfo::finalize(&ccx);\n@@ -2825,8 +2821,6 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n     if sess.entry_fn.borrow().is_some() {\n         reachable_symbols.push(\"main\".to_string());\n     }\n-    reachable_symbols.push(link_guard::link_guard_name(&link_meta.crate_name,\n-                                                       &link_meta.crate_hash));\n \n     // For the purposes of LTO, we add to the reachable set all of the upstream\n     // reachable extern fns. These functions are all part of the public ABI of\n@@ -2870,24 +2864,6 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n     }\n }\n \n-fn emit_link_guard_if_necessary(shared_ccx: &SharedCrateContext) {\n-    let link_meta = shared_ccx.link_meta();\n-    let link_guard_name = link_guard::link_guard_name(&link_meta.crate_name,\n-                                                      &link_meta.crate_hash);\n-    let link_guard_name = CString::new(link_guard_name).unwrap();\n-\n-    // Check if the link-guard has already been emitted in a codegen unit\n-    let link_guard_already_emitted = shared_ccx.iter().any(|ccx| {\n-        let link_guard = unsafe { llvm::LLVMGetNamedValue(ccx.llmod(),\n-                                                          link_guard_name.as_ptr()) };\n-        !link_guard.is_null()\n-    });\n-\n-    if !link_guard_already_emitted {\n-        link_guard::get_or_insert_link_guard(&shared_ccx.get_ccx(0));\n-    }\n-}\n-\n /// We visit all the items in the krate and translate them.  We do\n /// this in two walks. The first walk just finds module items. It then\n /// walks the full contents of those module items and translates all"}, {"sha": "453afa827e8f12218d2892076ab5b052c0140404", "filename": "src/librustc_trans/trans/link_guard.rs", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b385ce12232a6c192b168b75ec9867a5a83d2036/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b385ce12232a6c192b168b75ec9867a5a83d2036/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs?ref=b385ce12232a6c192b168b75ec9867a5a83d2036", "patch": "@@ -1,117 +0,0 @@\n-// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use back::svh::Svh;\n-use libc::c_uint;\n-use llvm;\n-use std::ffi::CString;\n-use std::ptr;\n-use trans::attributes;\n-use trans::builder;\n-use trans::CrateContext;\n-use trans::declare;\n-use trans::type_::Type;\n-\n-const GUARD_PREFIX: &'static str = \"__rustc_link_guard_\";\n-\n-pub fn link_guard_name(crate_name: &str, crate_svh: &Svh) -> String {\n-\n-    let mut guard_name = String::new();\n-\n-    guard_name.push_str(GUARD_PREFIX);\n-    guard_name.push_str(crate_name);\n-    guard_name.push_str(\"_\");\n-    guard_name.push_str(crate_svh.as_str());\n-\n-    guard_name\n-}\n-\n-pub fn get_or_insert_link_guard<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>)\n-                                          -> llvm::ValueRef {\n-\n-    let guard_name = link_guard_name(&ccx.tcx().crate_name[..],\n-                                     &ccx.link_meta().crate_hash);\n-\n-    let guard_function = unsafe {\n-        let guard_name_c_string = CString::new(&guard_name[..]).unwrap();\n-        llvm::LLVMGetNamedValue(ccx.llmod(), guard_name_c_string.as_ptr())\n-    };\n-\n-    if guard_function != ptr::null_mut() {\n-        return guard_function;\n-    }\n-\n-    let llfty = Type::func(&[], &Type::void(ccx));\n-    if declare::get_defined_value(ccx, &guard_name[..]).is_some() {\n-        ccx.sess().bug(\n-            &format!(\"Link guard already defined\"));\n-    }\n-    let guard_function = declare::declare_cfn(ccx, &guard_name[..], llfty);\n-\n-    attributes::emit_uwtable(guard_function, true);\n-    attributes::unwind(guard_function, false);\n-\n-    let bld = ccx.raw_builder();\n-    unsafe {\n-        let llbb = llvm::LLVMAppendBasicBlockInContext(ccx.llcx(),\n-                                                       guard_function,\n-                                                       \"link_guard_top\\0\".as_ptr() as *const _);\n-        llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n-\n-        for crate_num in ccx.sess().cstore.crates() {\n-            if !ccx.sess().cstore.is_explicitly_linked(crate_num) {\n-                continue;\n-            }\n-\n-            let crate_name = ccx.sess().cstore.original_crate_name(crate_num);\n-            let svh = ccx.sess().cstore.crate_hash(crate_num);\n-\n-            let dependency_guard_name = link_guard_name(&crate_name[..], &svh);\n-\n-            if declare::get_defined_value(ccx, &dependency_guard_name[..]).is_some() {\n-                ccx.sess().bug(\n-                    &format!(\"Link guard already defined for dependency `{}`\",\n-                             crate_name));\n-            }\n-            let decl = declare::declare_cfn(ccx, &dependency_guard_name[..], llfty);\n-            attributes::unwind(decl, false);\n-\n-            llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n-\n-            let args: &[llvm::ValueRef] = &[];\n-            llvm::LLVMRustBuildCall(bld,\n-                                    decl,\n-                                    args.as_ptr(),\n-                                    args.len() as c_uint,\n-                                    0 as *mut _,\n-                                    builder::noname());\n-        }\n-\n-        llvm::LLVMBuildRetVoid(bld);\n-    }\n-\n-    guard_function\n-}\n-\n-pub fn insert_reference_to_link_guard<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                                llbb: llvm::BasicBlockRef) {\n-    let guard_function = get_or_insert_link_guard(ccx);\n-\n-    unsafe {\n-        llvm::LLVMPositionBuilderAtEnd(ccx.raw_builder(), llbb);\n-        let args: &[llvm::ValueRef] = &[];\n-        llvm::LLVMRustBuildCall(ccx.raw_builder(),\n-                                guard_function,\n-                                args.as_ptr(),\n-                                args.len() as c_uint,\n-                                0 as *mut _,\n-                                builder::noname());\n-    }\n-}"}, {"sha": "930f37ce256345ca80b5728a61a2552ea6d343e3", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c527457f147881dc864b8b737c4288540b32208/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c527457f147881dc864b8b737c4288540b32208/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=4c527457f147881dc864b8b737c4288540b32208", "patch": "@@ -53,7 +53,6 @@ mod expr;\n mod glue;\n mod inline;\n mod intrinsic;\n-pub mod link_guard;\n mod machine;\n mod _match;\n mod meth;"}]}