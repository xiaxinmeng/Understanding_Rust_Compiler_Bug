{"sha": "eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "node_id": "C_kwDOAAsO6NoAKGViNGJkYjAwYTRlMWQ4ODFlYWFkYzYyNTQ4MjRiYjA2MzE5NTBjNWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:15:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:17:10Z"}, "message": "fix cranelift and gcc", "tree": {"sha": "a951eb3e7dda9bf24683f50f82d7bb8b04954e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a951eb3e7dda9bf24683f50f82d7bb8b04954e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "html_url": "https://github.com/rust-lang/rust/commit/eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4bdb00a4e1d881eaadc6254824bb0631950c5b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3db45f00ff9411163b1365f46c34b8f8a7138a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/3db45f00ff9411163b1365f46c34b8f8a7138a58", "html_url": "https://github.com/rust-lang/rust/commit/3db45f00ff9411163b1365f46c34b8f8a7138a58"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0b8393e3d17c0c11aa5f26091ad1f5d690208f0a", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4bdb00a4e1d881eaadc6254824bb0631950c5b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4bdb00a4e1d881eaadc6254824bb0631950c5b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "patch": "@@ -398,7 +398,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n \n-        for &(offset, alloc_id) in alloc.provenance().iter() {\n+        for &(offset, alloc_id) in alloc.provenance().ptrs().iter() {\n             let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;\n@@ -431,7 +431,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     {\n                         tcx.sess.fatal(&format!(\n                             \"Allocation {:?} contains reference to TLS value {:?}\",\n-                            alloc, def_id\n+                            alloc_id, def_id\n                         ));\n                     }\n "}, {"sha": "111bfeb1322038961f693f4d924b9ff18754d600", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb4bdb00a4e1d881eaadc6254824bb0631950c5b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4bdb00a4e1d881eaadc6254824bb0631950c5b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=eb4bdb00a4e1d881eaadc6254824bb0631950c5b", "patch": "@@ -297,12 +297,12 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n \n pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAllocation<'tcx>) -> RValue<'gcc> {\n     let alloc = alloc.inner();\n-    let mut llvals = Vec::with_capacity(alloc.provenance().len() + 1);\n+    let mut llvals = Vec::with_capacity(alloc.provenance().ptrs().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n \n     let mut next_offset = 0;\n-    for &(offset, alloc_id) in alloc.provenance().iter() {\n+    for &(offset, alloc_id) in alloc.provenance().ptrs().iter() {\n         let offset = offset.bytes();\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;"}]}