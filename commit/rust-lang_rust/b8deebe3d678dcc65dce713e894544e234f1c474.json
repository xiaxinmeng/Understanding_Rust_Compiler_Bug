{"sha": "b8deebe3d678dcc65dce713e894544e234f1c474", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZGVlYmUzZDY3OGRjYzY1ZGNlNzEzZTg5NDU0NGUyMzRmMWM0NzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-21T23:14:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-21T23:14:38Z"}, "message": "Auto merge of #34402 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\n- Successful merges: #34356, #34360, #34369, #34371, #34378, #34380, #34391\n- Failed merges:", "tree": {"sha": "4f28b25e8fd567833c85761a58208d4298874e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f28b25e8fd567833c85761a58208d4298874e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8deebe3d678dcc65dce713e894544e234f1c474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8deebe3d678dcc65dce713e894544e234f1c474", "html_url": "https://github.com/rust-lang/rust/commit/b8deebe3d678dcc65dce713e894544e234f1c474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8deebe3d678dcc65dce713e894544e234f1c474/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe96928d7de991e527a7ed7b88bb30aa965c8a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe96928d7de991e527a7ed7b88bb30aa965c8a08", "html_url": "https://github.com/rust-lang/rust/commit/fe96928d7de991e527a7ed7b88bb30aa965c8a08"}, {"sha": "0db65750bc5e0f2ded19fa32ecc791aaf3dd1536", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db65750bc5e0f2ded19fa32ecc791aaf3dd1536", "html_url": "https://github.com/rust-lang/rust/commit/0db65750bc5e0f2ded19fa32ecc791aaf3dd1536"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "5b75ad6cfa858f3deeaba8969d691dbbc4fa0699", "filename": "src/doc/book/compiler-plugins.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Fdoc%2Fbook%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcompiler-plugins.md?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -34,7 +34,7 @@ code that manipulates syntax trees at\n compile time.\n \n Let's write a plugin\n-[`roman_numerals.rs`](https://github.com/rust-lang/rust/tree/master/src/test/auxiliary/roman_numerals.rs)\n+[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs)\n that implements Roman numeral integer literals.\n \n ```rust,ignore\n@@ -166,7 +166,8 @@ quasiquote as an ordinary plugin library.\n \n Plugins can extend [Rust's lint\n infrastructure](../reference.html#lint-check-attributes) with additional checks for\n-code style, safety, etc. Now let's write a plugin [`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/auxiliary/lint_plugin_test.rs)\n+code style, safety, etc. Now let's write a plugin\n+[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n that warns about any item named `lintme`.\n \n ```rust,ignore"}, {"sha": "15b3bfebfac2e24806d56360e55ea5e7fcb9decd", "filename": "src/doc/rustc-ux-guidelines.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -56,7 +56,19 @@ Error explanations are long form descriptions of error messages provided with\n the compiler. They are accessible via the `--explain` flag. Each explanation\n comes with an example of how to trigger it and advice on how to fix it.\n \n-* All of them are accessible [online](https://github.com/rust-lang/rust/blob/master/src/librustc/diagnostics.rs).\n+* All of them are accessible [online](http://doc.rust-lang.org/error-index.html),\n+  which are auto-generated from rustc source code in different places:\n+  [librustc](https://github.com/rust-lang/rust/blob/master/src/librustc/diagnostics.rs),\n+  [librustc_borrowck](https://github.com/rust-lang/rust/blob/master/src/librustc_borrowck/diagnostics.rs),\n+  [librustc_const_eval](https://github.com/rust-lang/rust/blob/master/src/librustc_const_eval/diagnostics.rs),\n+  [librustc_lint](https://github.com/rust-lang/rust/blob/master/src/librustc_lint/types.rs),\n+  [librustc_metadata](https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/diagnostics.rs),\n+  [librustc_mir](https://github.com/rust-lang/rust/blob/master/src/librustc_mir/diagnostics.rs),\n+  [librustc_passes](https://github.com/rust-lang/rust/blob/master/src/librustc_passes/diagnostics.rs),\n+  [librustc_privacy](https://github.com/rust-lang/rust/blob/master/src/librustc_privacy/diagnostics.rs),\n+  [librustc_resolve](https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/diagnostics.rs),\n+  [librustc_trans](https://github.com/rust-lang/rust/blob/master/src/librustc_trans/diagnostics.rs),\n+  [librustc_typeck](https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/diagnostics.rs).\n * Explanations have full markdown support. Use it, especially to highlight\n code with backticks.\n * When talking about the compiler, call it `the compiler`, not `Rust` or"}, {"sha": "f1c56d8d3960f94519a4d111377f8fc652926258", "filename": "src/etc/Dockerfile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -4,6 +4,8 @@ FROM ubuntu:xenial\n #   Download stage0, see src/bootstrap/bootstrap.py\n # g++\n #   Compile LLVM binding in src/rustllvm\n+# gdb\n+#   Used to run tests in src/test/debuginfo\n # git\n #   Get commit hash and commit date in version string\n # make\n@@ -17,7 +19,7 @@ FROM ubuntu:xenial\n #   FileCheck is used to run tests in src/test/codegen\n \n RUN apt-get update && apt-get -y install \\\n-    curl g++ git make \\\n+    curl g++ gdb git make \\\n     libedit-dev zlib1g-dev \\\n     llvm-3.7-tools\n "}, {"sha": "7258c8a1b6b3dc97cb4111dece310eac916886d7", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -1608,6 +1608,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// See the [`contains()`](#method.contains) method for its characterization.\n ///\n /// It cannot serve as an iterator because it doesn't have a starting point.\n+///\n /// ```\n /// fn main() {\n ///     assert_eq!((..5), std::ops::RangeTo{ end: 5 });"}, {"sha": "927953b034ba2496c1c1232adca94246c0904a8b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -12,6 +12,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::{map as hir_map, FreevarMap, TraitMap};\n use rustc::hir::def::DefMap;\n+use rustc::hir::lowering::lower_crate;\n use rustc_mir as mir;\n use rustc::mir::mir_map::MirMap;\n use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n@@ -30,14 +31,12 @@ use rustc_resolve as resolve;\n use rustc_metadata::macro_import;\n use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n-use rustc_trans::back::link;\n-use rustc_trans::back::write;\n+use rustc_trans::back::{link, write};\n use rustc_trans as trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc::hir::lowering::lower_crate;\n use rustc_passes::{ast_validation, no_asm, loops, consts, rvalues, static_recursion};\n use rustc_const_eval::check_match;\n use super::Compilation;"}, {"sha": "0d3e18f9b966a2848781cafd10f2944d14ec2156", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -509,6 +509,38 @@ impl CStr {\n     /// The returned pointer will be valid for as long as `self` is and points\n     /// to a contiguous region of memory terminated with a 0 byte to represent\n     /// the end of the string.\n+    ///\n+    /// **WARNING**\n+    ///\n+    /// It is your responsibility to make sure that the underlying memory is not\n+    /// freed too early. For example, the following code will cause undefined\n+    /// behaviour when `ptr` is used inside the `unsafe` block:\n+    ///\n+    /// ```no_run\n+    /// use std::ffi::{CString};\n+    ///\n+    /// let ptr = CString::new(\"Hello\").unwrap().as_ptr();\n+    /// unsafe {\n+    ///     // `ptr` is dangling\n+    ///     *ptr;\n+    /// }\n+    /// ```\n+    ///\n+    /// This happens because the pointer returned by `as_ptr` does not carry any\n+    /// lifetime information and the string is deallocated immediately after\n+    /// the `CString::new(\"Hello\").unwrap().as_ptr()` expression is evaluated.\n+    /// To fix the problem, bind the string to a local variable:\n+    ///\n+    /// ```no_run\n+    /// use std::ffi::{CString};\n+    ///\n+    /// let hello = CString::new(\"Hello\").unwrap();\n+    /// let ptr = hello.as_ptr();\n+    /// unsafe {\n+    ///     // `ptr` is valid because `hello` is in scope\n+    ///     *ptr;\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_ptr(&self) -> *const c_char {\n         self.inner.as_ptr()"}, {"sha": "1f78b32bcf38e9c8f7445d3e895a23d4080f1f85", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8deebe3d678dcc65dce713e894544e234f1c474/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b8deebe3d678dcc65dce713e894544e234f1c474", "patch": "@@ -507,6 +507,37 @@ impl Thread {\n     }\n \n     /// Gets the thread's name.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Threads by default have no name specified:\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let handler = builder.spawn(|| {\n+    ///     assert!(thread::current().name().is_none());\n+    /// }).unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n+    ///\n+    /// Thread with a specified name:\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new()\n+    ///     .name(\"foo\".into());\n+    ///\n+    /// let handler = builder.spawn(|| {\n+    ///     assert_eq!(thread::current().name(), Some(\"foo\"))\n+    /// }).unwrap();\n+    ///\n+    /// handler.join().unwrap();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn name(&self) -> Option<&str> {\n         self.cname().map(|s| unsafe { str::from_utf8_unchecked(s.to_bytes()) } )"}]}