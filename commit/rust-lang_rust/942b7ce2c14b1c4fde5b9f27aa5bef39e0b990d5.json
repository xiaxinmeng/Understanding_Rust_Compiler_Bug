{"sha": "942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MmI3Y2UyYzE0YjFjNGZkZTViOWYyN2FhNWJlZjM5ZTBiOTkwZDU=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2020-12-31T17:32:06Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-01-01T10:01:01Z"}, "message": "make `const_generics_defaults` use the unstable syntax mechanism\n\nThis is important to not accidentally stabilize the parsing of the syntax while it still is experimental and not formally accepted", "tree": {"sha": "9532b132fe203e8115ef515448f1cc18f508b5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9532b132fe203e8115ef515448f1cc18f508b5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "html_url": "https://github.com/rust-lang/rust/commit/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fc3c4c16dde2a6cb4f565435d131b8c57bc1295", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fc3c4c16dde2a6cb4f565435d131b8c57bc1295", "html_url": "https://github.com/rust-lang/rust/commit/1fc3c4c16dde2a6cb4f565435d131b8c57bc1295"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "e172f9d71ffbcf0bdce31480b03963657a24aeb2", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1166,20 +1166,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            if !self.session.features_untracked().const_generics_defaults {\n-                if let GenericParamKind::Const { default: Some(ref default), .. } = param.kind {\n-                    let mut err = self.err_handler().struct_span_err(\n-                        default.value.span,\n-                        \"default values for const generic parameters are unstable\",\n-                    );\n-                    err.help(\n-                        \"add `#![feature(const_generics_defaults)]` \\\n-                         to the crate attributes to enable\",\n-                    );\n-                    err.emit();\n-                    break;\n-                }\n-            }\n         }\n \n         validate_generic_param_order("}, {"sha": "435f32535b6d4d5a383652a93f97bac9e0346568", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -619,6 +619,10 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         extended_key_value_attributes,\n         \"arbitrary expressions in key-value attributes are unstable\"\n     );\n+    gate_all!(\n+        const_generics_defaults,\n+        \"default values for const generic parameters are experimental\"\n+    );\n     if sess.parse_sess.span_diagnostic.err_count() == 0 {\n         // Errors for `destructuring_assignment` can get quite noisy, especially where `_` is\n         // involved, so we only emit errors where there are no other parsing errors."}, {"sha": "42a13376863216cbd8ec053a902bf4b3793ba9c4", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::{\n     self as ast, Attribute, GenericBounds, GenericParam, GenericParamKind, WhereClause,\n };\n use rustc_errors::PResult;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, sym};\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n@@ -56,8 +56,19 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        // Parse optional const generics default value.\n-        let default = if self.eat(&token::Eq) { Some(self.parse_const_arg()?) } else { None };\n+        // Parse optional const generics default value, taking care of feature gating the spans\n+        // with the unstable syntax mechanism.\n+        let default = if self.eat(&token::Eq) {\n+            // The gated span goes from the `=` to the end of the const argument that follows (and\n+            // which could be a block expression).\n+            let start = self.prev_token.span;\n+            let const_arg = self.parse_const_arg()?;\n+            let span = start.to(const_arg.value.span);\n+            self.sess.gated_spans.gate(sym::const_generics_defaults, span);\n+            Some(const_arg)\n+        } else {\n+            None\n+        };\n \n         Ok(GenericParam {\n             ident,"}, {"sha": "5b0a42a45565cff2d9fd7b69100095bbd591ed3f", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1,4 +1,4 @@\n fn foo<const SIZE: usize = 5>() {}\n-//~^ ERROR default values for const generic parameters are unstable\n+//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "31b5ad5123ed2bf175bb92a04d70a90e40fa0539", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1,10 +1,12 @@\n-error: default values for const generic parameters are unstable\n-  --> $DIR/default_function_param.rs:1:28\n+error[E0658]: default values for const generic parameters are experimental\n+  --> $DIR/default_function_param.rs:1:26\n    |\n LL | fn foo<const SIZE: usize = 5>() {}\n-   |                            ^\n+   |                          ^^^\n    |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "14bac473ed9a08a8d1dc537e95cd98797e13c40b", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1,4 +1,4 @@\n trait Foo<const KIND: bool = true> {}\n-//~^ ERROR default values for const generic parameters are unstable\n+//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "5617b35ad013afc2510f5c87109d8886a42d57fc", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.stderr?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1,10 +1,12 @@\n-error: default values for const generic parameters are unstable\n-  --> $DIR/default_trait_param.rs:1:30\n+error[E0658]: default values for const generic parameters are experimental\n+  --> $DIR/default_trait_param.rs:1:28\n    |\n LL | trait Foo<const KIND: bool = true> {}\n-   |                              ^^^^\n+   |                            ^^^^^^\n    |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5b5ccc888732242ddfd158596d83a27a0c8b775c", "filename": "src/test/ui/feature-gates/feature-gate-const_generics_defaults.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.rs?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1,7 +1,9 @@\n+#[cfg(FALSE)]\n struct A<const N: usize = 3>;\n-//~^ ERROR default values for const generic parameters are unstable\n+//~^ ERROR default values for const generic parameters are experimental\n \n-fn foo<const N: u8 = 6>() {}\n-//~^ ERROR default values for const generic parameters are unstable\n+#[cfg(FALSE)]\n+fn foo<const B: bool = false>() {}\n+//~^ ERROR default values for const generic parameters are experimental\n \n fn main() {}"}, {"sha": "e2b48d793fdfffdd6b8f072744e6ca81183248c3", "filename": "src/test/ui/feature-gates/feature-gate-const_generics_defaults.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics_defaults.stderr?ref=942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5", "patch": "@@ -1,18 +1,21 @@\n-error: default values for const generic parameters are unstable\n-  --> $DIR/feature-gate-const_generics_defaults.rs:1:27\n+error[E0658]: default values for const generic parameters are experimental\n+  --> $DIR/feature-gate-const_generics_defaults.rs:2:25\n    |\n LL | struct A<const N: usize = 3>;\n-   |                           ^\n+   |                         ^^^\n    |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n \n-error: default values for const generic parameters are unstable\n-  --> $DIR/feature-gate-const_generics_defaults.rs:4:22\n+error[E0658]: default values for const generic parameters are experimental\n+  --> $DIR/feature-gate-const_generics_defaults.rs:6:22\n    |\n-LL | fn foo<const N: u8 = 6>() {}\n-   |                      ^\n+LL | fn foo<const B: bool = false>() {}\n+   |                      ^^^^^^^\n    |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}]}