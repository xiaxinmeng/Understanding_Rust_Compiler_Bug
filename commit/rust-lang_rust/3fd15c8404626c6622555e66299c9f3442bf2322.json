{"sha": "3fd15c8404626c6622555e66299c9f3442bf2322", "node_id": "C_kwDOAAsO6NoAKDNmZDE1Yzg0MDQ2MjZjNjYyMjU1NWU2NjI5OWM5ZjM0NDJiZjIzMjI", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-08T20:32:17Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-07T02:06:56Z"}, "message": "Refer to uninferred `const` params by their name, instead of `{ _: _ }`\n\nWhen the value of a const param isn't inferred, replace it with the\nparam name from the definition.", "tree": {"sha": "426e86437c8417b7cf115e4689c4860403e9aad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/426e86437c8417b7cf115e4689c4860403e9aad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd15c8404626c6622555e66299c9f3442bf2322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd15c8404626c6622555e66299c9f3442bf2322", "html_url": "https://github.com/rust-lang/rust/commit/3fd15c8404626c6622555e66299c9f3442bf2322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd15c8404626c6622555e66299c9f3442bf2322/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e88f46d60c5487946fc7632a7561bdff6b9fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e88f46d60c5487946fc7632a7561bdff6b9fcc", "html_url": "https://github.com/rust-lang/rust/commit/78e88f46d60c5487946fc7632a7561bdff6b9fcc"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "56f0b5c1927860fdfdb0ba9dc2147835b34809be", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3fd15c8404626c6622555e66299c9f3442bf2322/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd15c8404626c6622555e66299c9f3442bf2322/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3fd15c8404626c6622555e66299c9f3442bf2322", "patch": "@@ -1,6 +1,5 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n-use crate::infer::InferCtxt;\n-use crate::rustc_middle::ty::TypeFoldable;\n+use crate::infer::{InferCtxt, Symbol};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n@@ -938,8 +937,17 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n                 let substs: Vec<_> = substs\n                     .iter()\n                     .zip(generics.params.iter())\n-                    .map(|(subst, param)| match &param.kind {\n-                        ty::GenericParamDefKind::Type { has_default: true, .. } => subst,\n+                    .map(|(subst, param)| match &(subst.unpack(), &param.kind) {\n+                        (_, ty::GenericParamDefKind::Type { has_default: true, .. }) => subst,\n+                        (crate::infer::GenericArgKind::Const(c), _) => {\n+                            match c.val {\n+                                ty::ConstKind::Infer(..) => {\n+                                    // Replace not yet inferred const params with their def name.\n+                                    self.tcx().mk_const_param(param.index, param.name, c.ty).into()\n+                                }\n+                                _ => subst,\n+                            }\n+                        }\n                         _ => subst.super_fold_with(self),\n                     })\n                     .collect();\n@@ -977,8 +985,19 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n             | ty::FnPtr(_)\n             | ty::Opaque(..)\n             | ty::Projection(_)\n-            | ty::Never\n-            | ty::Array(..) => t.super_fold_with(self),\n+            | ty::Never => t.super_fold_with(self),\n+            ty::Array(ty, c) => {\n+                self.tcx().mk_ty(ty::Array(\n+                    self.fold_ty(ty),\n+                    match c.val {\n+                        ty::ConstKind::Infer(..) => {\n+                            // Replace not yet inferred const params with their def name.\n+                            self.tcx().mk_const_param(0, Symbol::intern(\"N\"), c.ty).into()\n+                        }\n+                        _ => c,\n+                    },\n+                ))\n+            }\n             // We don't want to hide type params that haven't been resolved yet.\n             // This would be the type that will be written out with the type param\n             // name in the output."}, {"sha": "10cd491b480c1b687bec35092a10302783de6696", "filename": "src/test/ui/const-generics/defaults/doesnt_infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd15c8404626c6622555e66299c9f3442bf2322/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fd15c8404626c6622555e66299c9f3442bf2322/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdoesnt_infer.stderr?ref=3fd15c8404626c6622555e66299c9f3442bf2322", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed for `Foo<{_: u32}>`\n LL |     let foo = Foo::foo();\n    |         ---   ^^^^^^^^ cannot infer the value of const parameter `N`\n    |         |\n-   |         consider giving `foo` the explicit type `Foo<{_: _}>`, where the type parameter `N` is specified\n+   |         consider giving `foo` the explicit type `Foo<N>`, where the type parameter `N` is specified\n \n error: aborting due to previous error\n "}, {"sha": "0746b2491fbd654d2b1a91a0e4d1f7f2661ed486", "filename": "src/test/ui/inference/issue-83606.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd15c8404626c6622555e66299c9f3442bf2322/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fd15c8404626c6622555e66299c9f3442bf2322/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr?ref=3fd15c8404626c6622555e66299c9f3442bf2322", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed for `[usize; _]`\n LL |     let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n    |         -   ^^^ cannot infer the value of const parameter `N` declared on the function `foo`\n    |         |\n-   |         consider giving this pattern the explicit type `[_; _]`, where the type parameter `N` is specified\n+   |         consider giving this pattern the explicit type `[_; N]`, where the type parameter `N` is specified\n \n error: aborting due to previous error\n "}]}