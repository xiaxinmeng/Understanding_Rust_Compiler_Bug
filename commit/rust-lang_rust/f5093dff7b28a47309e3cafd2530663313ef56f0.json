{"sha": "f5093dff7b28a47309e3cafd2530663313ef56f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MDkzZGZmN2IyOGE0NzMwOWUzY2FmZDI1MzA2NjMzMTNlZjU2ZjA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-07T22:11:26Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-08T00:22:04Z"}, "message": "Remove support for multiple traits in a single impl\n\nThere was half-working support for them, but they were never fully\nimplemented or even approved. Remove them altogether.\n\nCloses #3410", "tree": {"sha": "cb577838e5daba3158f7177dbc51de6258ece757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb577838e5daba3158f7177dbc51de6258ece757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5093dff7b28a47309e3cafd2530663313ef56f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5093dff7b28a47309e3cafd2530663313ef56f0", "html_url": "https://github.com/rust-lang/rust/commit/f5093dff7b28a47309e3cafd2530663313ef56f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5093dff7b28a47309e3cafd2530663313ef56f0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ab9d70f4ba1f35f0fc6d851318ac0966001229", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ab9d70f4ba1f35f0fc6d851318ac0966001229", "html_url": "https://github.com/rust-lang/rust/commit/62ab9d70f4ba1f35f0fc6d851318ac0966001229"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "140df4c29c0a298796402db43ad03af2aa0648c5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -1267,7 +1267,7 @@ enum item_ {\n     item_class(@struct_def, ~[ty_param]),\n     item_trait(~[ty_param], ~[@trait_ref], ~[trait_method]),\n     item_impl(~[ty_param],\n-              ~[@trait_ref], /* traits this impl implements */\n+              Option<@trait_ref>, /* (optional) trait this impl implements */\n               @ty, /* self */\n               ~[@method]),\n     item_mac(mac),"}, {"sha": "2377555dfb3dcf7ba65a39658051648cd9df0cb8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -2571,11 +2571,11 @@ struct parser {\n \n \n         // Parse traits, if necessary.\n-        let traits = if self.token == token::COLON {\n+        let opt_trait = if self.token == token::COLON {\n             self.bump();\n-            self.parse_trait_ref_list(token::LBRACE)\n+            Some(self.parse_trait_ref())\n         } else {\n-            ~[]\n+            None\n         };\n \n         let mut meths = ~[];\n@@ -2584,7 +2584,7 @@ struct parser {\n             let vis = self.parse_visibility();\n             vec::push(meths, self.parse_method(vis));\n         }\n-        (ident, item_impl(tps, traits, ty, meths), None)\n+        (ident, item_impl(tps, opt_trait, ty, meths), None)\n     }\n \n     // Instantiates ident <i> with references to <typarams> as arguments."}, {"sha": "ae0eac571af7ab48434eb882c298a5a9e1f666bb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -499,20 +499,21 @@ fn print_item(s: ps, &&item: @ast::item) {\n           print_struct(s, struct_def, tps, item.ident, item.span);\n       }\n \n-      ast::item_impl(tps, traits, ty, methods) => {\n+      ast::item_impl(tps, opt_trait, ty, methods) => {\n         head(s, ~\"impl\");\n         if tps.is_not_empty() {\n             print_type_params(s, tps);\n             space(s.s);\n         }\n         print_type(s, ty);\n \n-        if vec::len(traits) != 0u {\n-            word_space(s, ~\":\");\n-            do commasep(s, inconsistent, traits) |s, p| {\n-                print_path(s, p.path, false);\n+        match opt_trait {\n+            Some(t) => {\n+                word_space(s, ~\":\");\n+                print_path(s, t.path, false);\n             }\n-        }\n+            None => ()\n+        };\n         space(s.s);\n \n         bopen(s);"}, {"sha": "f45cd38fe832b45bb3a2ed44d1c3b04848cd26d1", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -699,7 +699,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n                                  else { None }, tps);\n         }\n       }\n-      item_impl(tps, traits, _, methods) => {\n+      item_impl(tps, opt_trait, _, methods) => {\n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n@@ -714,10 +714,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n             ebml_w.writer.write(str::to_bytes(def_to_str(local_def(m.id))));\n             ebml_w.end_tag();\n         }\n-        if traits.len() > 1 {\n-            fail ~\"multiple traits!!\";\n-        }\n-        for traits.each |associated_trait| {\n+        do opt_trait.iter() |associated_trait| {\n            encode_trait_ref(ebml_w, ecx, associated_trait)\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));"}, {"sha": "32f3348218ab2dc6f858e89e99aae003801c3c24", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -3532,7 +3532,7 @@ struct Resolver {\n     fn resolve_implementation(id: node_id,\n                               span: span,\n                               type_parameters: ~[ty_param],\n-                              trait_references: ~[@trait_ref],\n+                              opt_trait_reference: Option<@trait_ref>,\n                               self_type: @ty,\n                               methods: ~[@method],\n                               visitor: ResolveVisitor) {\n@@ -3549,10 +3549,10 @@ struct Resolver {\n \n             // Resolve the trait reference, if necessary.\n             let original_trait_refs = self.current_trait_refs;\n-            if trait_references.len() >= 1 {\n-                let mut new_trait_refs = @DVec();\n-                for trait_references.each |trait_reference| {\n-                    match self.resolve_path(\n+            match opt_trait_reference {\n+              Some(trait_reference) => {\n+                let new_trait_refs = @DVec();\n+                match self.resolve_path(\n                         trait_reference.path, TypeNS, true, visitor) {\n                         None => {\n                             self.session.span_err(span,\n@@ -3566,11 +3566,11 @@ struct Resolver {\n                             (*new_trait_refs).push(def_id_of_def(def));\n                         }\n                     }\n-                }\n-\n                 // Record the current set of trait references.\n                 self.current_trait_refs = Some(new_trait_refs);\n             }\n+            None => ()\n+            }\n \n             // Resolve the self type.\n             self.resolve_type(self_type, visitor);"}, {"sha": "1d6cd1f45c3acb0ab00f6d6b11edb749ee2d9bf6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -3121,13 +3121,13 @@ fn impl_traits(cx: ctxt, id: ast::def_id) -> ~[t] {\n         debug!(\"(impl_traits) searching for trait impl %?\", id);\n         match cx.items.find(id.node) {\n            Some(ast_map::node_item(@{\n-                        node: ast::item_impl(_, trait_refs, _, _),\n+                        node: ast::item_impl(_, opt_trait, _, _),\n                         _},\n                     _)) => {\n \n-                do vec::map(trait_refs) |trait_ref| {\n-                    node_id_to_type(cx, trait_ref.ref_id)\n-                }\n+               do option::map_default(opt_trait, ~[]) |trait_ref| {\n+                       ~[node_id_to_type(cx, trait_ref.ref_id)]\n+                   }\n            }\n            Some(ast_map::node_item(@{node: ast::item_class(sd,_),\n                            _},_)) => {"}, {"sha": "434a2b1caf2601f2b12d83b7663e8ec1a8136c87", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -231,8 +231,8 @@ struct CoherenceChecker {\n                        self.crate_context.tcx.sess.str_of(item.ident));\n \n                 match item.node {\n-                    item_impl(_, associated_traits, _, _) => {\n-                        self.check_implementation(item, associated_traits);\n+                    item_impl(_, opt_trait, _, _) => {\n+                        self.check_implementation(item, opt_trait.to_vec());\n                     }\n                     item_class(struct_def, _) => {\n                         self.check_implementation(item, struct_def.traits);\n@@ -432,7 +432,7 @@ struct CoherenceChecker {\n                         // Then visit the module items.\n                         visit_mod(module_, item.span, item.id, (), visitor);\n                     }\n-                    item_impl(_, associated_traits, _, _) => {\n+                    item_impl(_, opt_trait, _, _) => {\n                         match self.base_type_def_ids.find(\n                             local_def(item.id)) {\n \n@@ -453,7 +453,8 @@ struct CoherenceChecker {\n                                     // if the traits are defined in the same\n                                     // crate.\n \n-                                    if associated_traits.len() == 0 {\n+                                  match opt_trait {\n+                                    None => {\n                                         // There is no trait to implement, so\n                                         // this is an error.\n \n@@ -470,8 +471,10 @@ struct CoherenceChecker {\n                                                           or new type \\\n                                                           instead\");\n                                     }\n+                                    _ => ()\n+                                  }\n \n-                                    for associated_traits.each |trait_ref| {\n+                                  do opt_trait.iter() |trait_ref| {\n                                         // This is OK if and only if the\n                                         // trait was defined in this\n                                         // crate."}, {"sha": "68a3c94316e6981fdbd08601e597142cb6adfec2", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -243,10 +243,10 @@ fn fold_impl(\n     let (trait_types, self_ty) = do astsrv::exec(srv) |ctxt| {\n         match ctxt.ast_map.get(doc.id()) {\n           ast_map::node_item(@{\n-            node: ast::item_impl(_, trait_types, self_ty, _), _\n+            node: ast::item_impl(_, opt_trait_type, self_ty, _), _\n           }, _) => {\n-            let trait_types = vec::map(trait_types, |p| {\n-                pprust::path_to_str(p.path, extract::interner())\n+            let trait_types = opt_trait_type.map_default(~[], |p| {\n+                ~[pprust::path_to_str(p.path, extract::interner())]\n             });\n             (trait_types, Some(pprust::ty_to_str(self_ty,\n                                                  extract::interner())))"}, {"sha": "6ce063ecf170491081b5a14a31f91b52e542f6fa", "filename": "src/test/compile-fail/multitrait.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5093dff7b28a47309e3cafd2530663313ef56f0/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs?ref=f5093dff7b28a47309e3cafd2530663313ef56f0", "patch": "@@ -0,0 +1,8 @@\n+struct S {\n+ y: int;\n+}\n+\n+impl S: Cmp, ToStr { //~ ERROR: expected `{` but found `,`\n+  fn eq(&&other: S) { false }\n+  fn to_str() -> ~str { ~\"hi\" }\n+}\n\\ No newline at end of file"}]}