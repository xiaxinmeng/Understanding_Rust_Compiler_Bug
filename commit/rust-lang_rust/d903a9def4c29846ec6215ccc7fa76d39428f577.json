{"sha": "d903a9def4c29846ec6215ccc7fa76d39428f577", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDNhOWRlZjRjMjk4NDZlYzYyMTVjY2M3ZmE3NmQzOTQyOGY1Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-12T10:28:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-12T10:28:08Z"}, "message": "Auto merge of #72134 - Dylan-DPC:rollup-h3shfz5, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71737 (Miri: run liballoc tests with threads)\n - #71928 (Add strikethrough support to rustdoc)\n - #72048 (Visit move out of `_0` when visiting `return`)\n - #72096 (Make MIR typeck use `LocalDefId` and fix docs)\n - #72128 (strings do not have to be valid UTF-8 any more)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "aa59db539531cfd59fe1af12db6363baaff96632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa59db539531cfd59fe1af12db6363baaff96632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d903a9def4c29846ec6215ccc7fa76d39428f577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d903a9def4c29846ec6215ccc7fa76d39428f577", "html_url": "https://github.com/rust-lang/rust/commit/d903a9def4c29846ec6215ccc7fa76d39428f577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d903a9def4c29846ec6215ccc7fa76d39428f577/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c817eeb29e764cfc12d0a8d94841e3ffe34023", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c817eeb29e764cfc12d0a8d94841e3ffe34023", "html_url": "https://github.com/rust-lang/rust/commit/09c817eeb29e764cfc12d0a8d94841e3ffe34023"}, {"sha": "ceeb9bdee6de1883012be5894c360b34b644fa44", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb9bdee6de1883012be5894c360b34b644fa44", "html_url": "https://github.com/rust-lang/rust/commit/ceeb9bdee6de1883012be5894c360b34b644fa44"}], "stats": {"total": 207, "additions": 127, "deletions": 80}, "files": [{"sha": "1c003983df9892a1c13aef1d7796a9ad36594559", "filename": "src/liballoc/alloc/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc%2Ftests.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -23,7 +23,7 @@ fn allocate_zeroed() {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n         let _: Box<_> = box 10;"}, {"sha": "b8c93a28bba815a1bfa38fea9a49e581a335c13f", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -182,7 +182,6 @@ fn test_insert_prev() {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn test_send() {\n     let n = list_from(&[1, 2, 3]);\n     thread::spawn(move || {"}, {"sha": "fc2ec7908e82368e5c667a847a1abc2ab8a6765b", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -3,7 +3,7 @@ use super::*;\n use test;\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -16,7 +16,7 @@ fn bench_push_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -29,7 +29,7 @@ fn bench_push_front_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::<i32>::with_capacity(101);\n \n@@ -43,7 +43,7 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::<i32>::with_capacity(101);\n "}, {"sha": "a2bb651e2b77804397d0e88fea8955cacee86d5b", "filename": "src/liballoc/sync/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Fliballoc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync%2Ftests.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -32,7 +32,6 @@ impl Drop for Canary {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn manually_share_arc() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = Arc::new(v);\n@@ -337,12 +336,13 @@ fn test_ptr_eq() {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn test_weak_count_locked() {\n     let mut a = Arc::new(atomic::AtomicBool::new(false));\n     let a2 = a.clone();\n     let t = thread::spawn(move || {\n-        for _i in 0..1000000 {\n+        // Miri is too slow\n+        let count = if cfg!(miri) { 1000 } else { 1000000 };\n+        for _i in 0..count {\n             Arc::get_mut(&mut a);\n         }\n         a.store(true, SeqCst);\n@@ -351,6 +351,8 @@ fn test_weak_count_locked() {\n     while !a2.load(SeqCst) {\n         let n = Arc::weak_count(&a2);\n         assert!(n < 2, \"bad weak count: {}\", n);\n+        #[cfg(miri)] // Miri's scheduler does not guarantee liveness, and thus needs this hint.\n+        atomic::spin_loop_hint();\n     }\n     t.join().unwrap();\n }"}, {"sha": "1f097f24942decf27a19892b858a94c04c623e5d", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -427,13 +427,29 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Goto { .. } |\n                     TerminatorKind::Resume |\n                     TerminatorKind::Abort |\n-                    TerminatorKind::Return |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable |\n                     TerminatorKind::FalseEdges { .. } |\n                     TerminatorKind::FalseUnwind { .. } => {\n                     }\n \n+                    TerminatorKind::Return => {\n+                        // `return` logically moves from the return place `_0`. Note that the place\n+                        // cannot be changed by any visitor, though.\n+                        let $($mutability)? local = RETURN_PLACE;\n+                        self.visit_local(\n+                            & $($mutability)? local,\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Move),\n+                            source_location,\n+                        );\n+\n+                        assert_eq!(\n+                            local,\n+                            RETURN_PLACE,\n+                            \"`MutVisitor` tried to mutate return place of `return` terminator\"\n+                        );\n+                    }\n+\n                     TerminatorKind::SwitchInt {\n                         discr,\n                         switch_ty,"}, {"sha": "a3ee49651ba7b9a0de492f705a5bb20edfe45f73", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -209,7 +209,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         nll_errors,\n     } = nll::compute_regions(\n         infcx,\n-        def_id.to_def_id(),\n+        def_id,\n         free_regions,\n         body,\n         &promoted,"}, {"sha": "b820b79c47fe8c547298925afff63a5abf04845c", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Diagnostic;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{\n@@ -157,7 +157,7 @@ fn populate_polonius_move_facts(\n /// This may result in errors being reported.\n pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -272,7 +272,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     // Dump facts if requested.\n     let polonius_output = all_facts.and_then(|all_facts| {\n         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n-            let def_path = infcx.tcx.def_path(def_id);\n+            let def_path = infcx.tcx.def_path(def_id.to_def_id());\n             let dir_path =\n                 PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n@@ -292,7 +292,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n     // Solve the region constraints.\n     let (closure_region_requirements, nll_errors) =\n-        regioncx.solve(infcx, &body, def_id, polonius_output.clone());\n+        regioncx.solve(infcx, &body, def_id.to_def_id(), polonius_output.clone());\n \n     if !nll_errors.is_empty() {\n         // Suppress unhelpful extra errors in `infer_opaque_types`."}, {"sha": "edd2dc3c2de55acf0e0424511e9b329b8dcfb412", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -33,35 +33,37 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         //\n         // e.g., `|x: FxHashMap<_, &'static u32>| ...`\n         let user_provided_sig;\n-        if !self.tcx().is_closure(self.mir_def_id) {\n+        if !self.tcx().is_closure(self.mir_def_id.to_def_id()) {\n             user_provided_sig = None;\n         } else {\n-            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id.expect_local());\n-            user_provided_sig = match typeck_tables.user_provided_sigs.get(&self.mir_def_id) {\n-                None => None,\n-                Some(user_provided_poly_sig) => {\n-                    // Instantiate the canonicalized variables from\n-                    // user-provided signature (e.g., the `_` in the code\n-                    // above) with fresh variables.\n-                    let (poly_sig, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n-                        body.span,\n-                        &user_provided_poly_sig,\n-                    );\n-\n-                    // Replace the bound items in the fn sig with fresh\n-                    // variables, so that they represent the view from\n-                    // \"inside\" the closure.\n-                    Some(\n-                        self.infcx\n-                            .replace_bound_vars_with_fresh_vars(\n+            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id);\n+            user_provided_sig =\n+                match typeck_tables.user_provided_sigs.get(&self.mir_def_id.to_def_id()) {\n+                    None => None,\n+                    Some(user_provided_poly_sig) => {\n+                        // Instantiate the canonicalized variables from\n+                        // user-provided signature (e.g., the `_` in the code\n+                        // above) with fresh variables.\n+                        let (poly_sig, _) =\n+                            self.infcx.instantiate_canonical_with_fresh_inference_vars(\n                                 body.span,\n-                                LateBoundRegionConversionTime::FnCall,\n-                                &poly_sig,\n-                            )\n-                            .0,\n-                    )\n+                                &user_provided_poly_sig,\n+                            );\n+\n+                        // Replace the bound items in the fn sig with fresh\n+                        // variables, so that they represent the view from\n+                        // \"inside\" the closure.\n+                        Some(\n+                            self.infcx\n+                                .replace_bound_vars_with_fresh_vars(\n+                                    body.span,\n+                                    LateBoundRegionConversionTime::FnCall,\n+                                    &poly_sig,\n+                                )\n+                                .0,\n+                        )\n+                    }\n                 }\n-            }\n         };\n \n         debug!(\n@@ -120,7 +122,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Err(terr) = self.eq_opaque_type_and_type(\n             mir_output_ty,\n             normalized_output_ty,\n-            self.mir_def_id,\n+            self.mir_def_id.to_def_id(),\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n         ) {\n@@ -143,7 +145,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n                 user_provided_output_ty,\n-                self.mir_def_id,\n+                self.mir_def_id.to_def_id(),\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n             ) {"}, {"sha": "9282a0a06b480e3381022ea97b9c87bc8c07c2a0", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -108,26 +108,22 @@ mod relate_tys;\n ///\n /// - `infcx` -- inference context to use\n /// - `param_env` -- parameter environment to use for trait solving\n-/// - `mir` -- MIR to type-check\n-/// - `mir_def_id` -- DefId from which the MIR is derived (must be local)\n-/// - `region_bound_pairs` -- the implied outlives obligations between type parameters\n-///   and lifetimes (e.g., `&'a T` implies `T: 'a`)\n-/// - `implicit_region_bound` -- a region which all generic parameters are assumed\n-///   to outlive; should represent the fn body\n-/// - `input_tys` -- fully liberated, but **not** normalized, expected types of the arguments;\n-///   the types of the input parameters found in the MIR itself will be equated with these\n-/// - `output_ty` -- fully liberated, but **not** normalized, expected return type;\n-///   the type for the RETURN_PLACE will be equated with this\n-/// - `liveness` -- results of a liveness computation on the MIR; used to create liveness\n-///   constraints for the regions in the types of variables\n+/// - `body` -- MIR body to type-check\n+/// - `promoted` -- map of promoted constants within `body`\n+/// - `mir_def_id` -- `LocalDefId` from which the MIR is derived\n+/// - `universal_regions` -- the universal regions from `body`s function signature\n+/// - `location_table` -- MIR location map of `body`\n+/// - `borrow_set` -- information about borrows occurring in `body`\n+/// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts\n /// - `flow_inits` -- results of a maybe-init dataflow analysis\n /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n+/// - `elements` -- MIR region map\n pub(crate) fn type_check<'mir, 'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n     borrow_set: &BorrowSet<'tcx>,\n@@ -191,7 +187,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n \n fn type_check_internal<'a, 'tcx, R>(\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &'a Body<'tcx>,\n     promoted: &'a IndexVec<Promoted, Body<'tcx>>,\n@@ -271,7 +267,7 @@ struct TypeVerifier<'a, 'b, 'tcx> {\n     body: &'b Body<'tcx>,\n     promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n     last_span: Span,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     errors_reported: bool,\n }\n \n@@ -815,7 +811,7 @@ struct TypeChecker<'a, 'tcx> {\n     /// User type annotations are shared between the main MIR and the MIR of\n     /// all of the promoted items.\n     user_type_annotations: &'a CanonicalUserTypeAnnotations<'tcx>,\n-    mir_def_id: DefId,\n+    mir_def_id: LocalDefId,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n@@ -963,7 +959,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn new(\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         body: &'a Body<'tcx>,\n-        mir_def_id: DefId,\n+        mir_def_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: ty::Region<'tcx>,\n@@ -1142,7 +1138,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // When you have `let x: impl Foo = ...` in a closure,\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n-                let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id);\n+                let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id.to_def_id());\n                 return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n             } else {\n                 return Err(terr);\n@@ -1994,7 +1990,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n                             let ccx = ConstCx::new_with_param_env(\n                                 tcx,\n-                                self.mir_def_id.expect_local(),\n+                                self.mir_def_id,\n                                 body,\n                                 self.param_env,\n                             );\n@@ -2010,9 +2006,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                 &traits::Obligation::new(\n                                     ObligationCause::new(\n                                         span,\n-                                        self.tcx()\n-                                            .hir()\n-                                            .local_def_id_to_hir_id(self.mir_def_id.expect_local()),\n+                                        self.tcx().hir().local_def_id_to_hir_id(self.mir_def_id),\n                                         traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                     ),\n                                     self.param_env,"}, {"sha": "7eb05ba2d2c54d2f36fb021ac70451beb257486b", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::interpret::{InterpError, InterpErrorInfo};\n use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, LayoutOf, Scalar, VariantIdx, Variants};\n+use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx, Variants};\n \n use std::hash::Hash;\n \n@@ -744,10 +744,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         match op.layout.ty.kind {\n             ty::Str => {\n                 let mplace = op.assert_mem_place(self.ecx); // strings are never immediate\n+                let len = mplace.len(self.ecx)?;\n                 try_validation!(\n-                    self.ecx.read_str(mplace),\n+                    self.ecx.memory.read_bytes(mplace.ptr, Size::from_bytes(len)),\n                     self.path,\n-                    err_ub!(InvalidStr(..)) => { \"uninitialized or non-UTF-8 data in str\" },\n+                    err_ub!(InvalidUninitBytes(..)) => { \"uninitialized data in `str`\" },\n                 );\n             }\n             ty::Array(tys, ..) | ty::Slice(tys)"}, {"sha": "ba406c72df8488225a10da8425e45b66752fdf8f", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -73,7 +73,12 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n                     }\n                     // Conservatively gives up if the dest is an argument,\n                     // because there may be uses of the original argument value.\n-                    if body.local_kind(dest_local) == LocalKind::Arg {\n+                    // Also gives up on the return place, as we cannot propagate into its implicit\n+                    // use by `return`.\n+                    if matches!(\n+                        body.local_kind(dest_local),\n+                        LocalKind::Arg | LocalKind::ReturnPointer\n+                    ) {\n                         debug!(\"  Can't copy-propagate local: dest {:?} (argument)\", dest_local);\n                         continue;\n                     }"}, {"sha": "bfc872be653a596ca25db421d3f6a00d58b40089", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -91,6 +91,16 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor<'tcx> {\n             *local = self.to;\n         }\n     }\n+\n+    fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, location: Location) {\n+        match kind {\n+            TerminatorKind::Return => {\n+                // Do not replace the implicit `_0` access here, as that's not possible. The\n+                // transform already handles `return` correctly.\n+            }\n+            _ => self.super_terminator_kind(kind, location),\n+        }\n+    }\n }\n \n struct DerefArgVisitor<'tcx> {"}, {"sha": "632408fde749f225ef864c88f92faaecf48917cd", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -732,7 +732,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     }\n \n     fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, loc: Location) {\n-        self.super_terminator_kind(kind, loc);\n+        // Don't try to modify the implicit `_0` access on return (`return` terminators are\n+        // replaced down below anyways).\n+        if !matches!(kind, TerminatorKind::Return) {\n+            self.super_terminator_kind(kind, loc);\n+        }\n \n         match *kind {\n             TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => bug!(),"}, {"sha": "c129e54c0f28ae3e92f5748c073ce6aa569fc9fe", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -44,7 +44,7 @@ use pulldown_cmark::{html, CodeBlockKind, CowStr, Event, Options, Parser, Tag};\n mod tests;\n \n fn opts() -> Options {\n-    Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES\n+    Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES | Options::ENABLE_STRIKETHROUGH\n }\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to\n@@ -933,7 +933,11 @@ impl MarkdownSummaryLine<'_> {\n             }\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, Options::empty(), Some(&replacer));\n+        let p = Parser::new_with_broken_link_callback(\n+            md,\n+            Options::ENABLE_STRIKETHROUGH,\n+            Some(&replacer),\n+        );\n \n         let mut s = String::new();\n \n@@ -975,7 +979,11 @@ pub fn plain_summary_line(md: &str) -> String {\n         }\n     }\n     let mut s = String::with_capacity(md.len() * 3 / 2);\n-    let p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n+    let p = ParserWrapper {\n+        inner: Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH),\n+        is_in: 0,\n+        is_first: true,\n+    };\n     p.filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n     s\n }"}, {"sha": "c7855729a98eee20cd78c1c566287add8db9ecee", "filename": "src/test/rustdoc/test-strikethrough.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Ftest%2Frustdoc%2Ftest-strikethrough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Ftest%2Frustdoc%2Ftest-strikethrough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest-strikethrough.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.f.html\n+// @has - //del \"Y\"\n+/// ~~Y~~\n+pub fn f() {}"}, {"sha": "f69f6a1109f76653b56bf49251cf2c3348571c21", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -42,11 +42,11 @@ const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n //~^ ERROR it is undefined behavior to use this value\n \n-// invalid UTF-8\n-const STR_NO_UTF8: &str = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n+// uninitialized byte\n+const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n //~^ ERROR it is undefined behavior to use this value\n-// invalid UTF-8 in user-defined str-like\n-const MYSTR_NO_UTF8: &MyStr = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n+// uninitialized byte in user-defined str-like\n+const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n //~^ ERROR it is undefined behavior to use this value\n \n // # slice"}, {"sha": "47d29ffc9b3c16617311a29975476641d9898787", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d903a9def4c29846ec6215ccc7fa76d39428f577/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=d903a9def4c29846ec6215ccc7fa76d39428f577", "patch": "@@ -41,16 +41,16 @@ LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize:\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:46:1\n    |\n-LL | const STR_NO_UTF8: &str = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n+LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:49:1\n    |\n-LL | const MYSTR_NO_UTF8: &MyStr = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n+LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>.0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}