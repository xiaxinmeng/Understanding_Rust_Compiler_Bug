{"sha": "96be287f12ff4199b3b1005a22a2dd7c1f01f5bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmUyODdmMTJmZjQxOTliM2IxMDA1YTIyYTJkZDdjMWYwMWY1YmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-24T15:29:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-29T08:45:45Z"}, "message": "detect negations of terminals like a != b vs a == b", "tree": {"sha": "4cf60c07bd049b58c9047e20a4e2f70581a06898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf60c07bd049b58c9047e20a4e2f70581a06898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf", "html_url": "https://github.com/rust-lang/rust/commit/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0791e68080297fe7b8d622f037037108e67148", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0791e68080297fe7b8d622f037037108e67148", "html_url": "https://github.com/rust-lang/rust/commit/3a0791e68080297fe7b8d622f037037108e67148"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "b43f22973115e7e32056839ef9c4edceadd9cc1f", "filename": "src/booleans.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=96be287f12ff4199b3b1005a22a2dd7c1f01f5bf", "patch": "@@ -1,7 +1,8 @@\n use rustc::lint::{LintArray, LateLintPass, LateContext, LintPass};\n use rustc_front::hir::*;\n use rustc_front::intravisit::*;\n-use syntax::ast::LitKind;\n+use syntax::ast::{LitKind, DUMMY_NODE_ID};\n+use syntax::codemap::{DUMMY_SP, dummy_spanned};\n use utils::{span_lint_and_then, in_macro, snippet_opt, SpanlessEq};\n \n /// **What it does:** This lint checks for boolean expressions that can be written more concisely\n@@ -92,6 +93,30 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                 #[allow(cast_possible_truncation)]\n                 return Ok(Bool::Term(n as u8));\n             }\n+            let negated = match e.node {\n+                ExprBinary(binop, ref lhs, ref rhs) => {\n+                    let mk_expr = |op| Expr {\n+                        id: DUMMY_NODE_ID,\n+                        span: DUMMY_SP,\n+                        attrs: None,\n+                        node: ExprBinary(dummy_spanned(op), lhs.clone(), rhs.clone()),\n+                    };\n+                    match binop.node {\n+                        BiEq => mk_expr(BiNe),\n+                        BiNe => mk_expr(BiEq),\n+                        BiGt => mk_expr(BiLe),\n+                        BiGe => mk_expr(BiLt),\n+                        BiLt => mk_expr(BiGe),\n+                        BiLe => mk_expr(BiGt),\n+                        _ => continue,\n+                    }\n+                },\n+                _ => continue,\n+            };\n+            if SpanlessEq::new(self.cx).ignore_fn().eq_expr(&negated, expr) {\n+                #[allow(cast_possible_truncation)]\n+                return Ok(Bool::Not(Box::new(Bool::Term(n as u8))));\n+            }\n         }\n         let n = self.terminals.len();\n         self.terminals.push(e);"}, {"sha": "4ad51226d5162394e436a4a3328cffe17f52d956", "filename": "tests/compile-fail/booleans.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96be287f12ff4199b3b1005a22a2dd7c1f01f5bf/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=96be287f12ff4199b3b1005a22a2dd7c1f01f5bf", "patch": "@@ -54,14 +54,26 @@ fn equality_stuff() {\n     let c: i32 = unimplemented!();\n     let d: i32 = unimplemented!();\n     let e: i32 = unimplemented!();\n-    let _ = a == b && a != b;\n+    let _ = a == b && a != b; //~ ERROR this boolean expression contains a logic bug\n+    //|~ HELP for further information visit\n+    //|~ HELP this expression can be optimized out\n+    //|~ HELP it would look like the following\n+    //|~ SUGGESTION let _ = false;\n     let _ = a == b && c == 5 && a == b; //~ ERROR this boolean expression can be simplified\n     //|~ HELP for further information visit\n     //|~ SUGGESTION let _ = c == 5 && a == b;\n     let _ = a == b && c == 5 && b == a; //~ ERROR this boolean expression can be simplified\n     //|~ HELP for further information visit\n     //|~ SUGGESTION let _ = c == 5 && a == b;\n-    let _ = a < b && a >= b;\n-    let _ = a > b && a <= b;\n+    let _ = a < b && a >= b; //~ ERROR this boolean expression contains a logic bug\n+    //|~ HELP for further information visit\n+    //|~ HELP this expression can be optimized out\n+    //|~ HELP it would look like the following\n+    //|~ SUGGESTION let _ = false;\n+    let _ = a > b && a <= b; //~ ERROR this boolean expression contains a logic bug\n+    //|~ HELP for further information visit\n+    //|~ HELP this expression can be optimized out\n+    //|~ HELP it would look like the following\n+    //|~ SUGGESTION let _ = false;\n     let _ = a > b && a == b;\n }"}]}