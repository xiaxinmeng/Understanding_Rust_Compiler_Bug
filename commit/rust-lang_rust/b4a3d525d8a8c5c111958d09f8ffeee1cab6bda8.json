{"sha": "b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YTNkNTI1ZDhhOGM1YzExMTk1OGQwOWY4ZmZlZWUxY2FiNmJkYTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-24T06:40:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-24T06:41:18Z"}, "message": "rustc: Eliminate trans dependency from metadata::tyencode", "tree": {"sha": "0ab064461ebfb8905ccea25b129645a3b44b2903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab064461ebfb8905ccea25b129645a3b44b2903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "html_url": "https://github.com/rust-lang/rust/commit/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7641286b23b0169f7d062ae1b45c49e9bea063d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7641286b23b0169f7d062ae1b45c49e9bea063d", "html_url": "https://github.com/rust-lang/rust/commit/f7641286b23b0169f7d062ae1b45c49e9bea063d"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "787ee5ea73b2247084e14553c6689a5eabf84a92", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "patch": "@@ -659,7 +659,7 @@ impl helpers for @e::encode_ctxt {\n     fn ty_str_ctxt() -> @tyencode::ctxt {\n         @{ds: e::def_to_str,\n           tcx: self.ccx.tcx,\n-          reachable: self.ccx.reachable,\n+          reachable: encoder::reachable(self, _),\n           abbrevs: tyencode::ac_use_abbrevs(self.type_abbrevs)}\n     }\n }"}, {"sha": "8968be31ce7d72ad6d2349ce3198660da4a940df", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "patch": "@@ -20,6 +20,7 @@ import std::ebml::serializer;\n \n export encode_metadata;\n export encoded_ty;\n+export reachable;\n \n // used by astencode:\n export def_to_str;\n@@ -32,6 +33,10 @@ type abbrev_map = map::hashmap<ty::t, tyencode::ty_abbrev>;\n type encode_ctxt = {ccx: @crate_ctxt,\n                     type_abbrevs: abbrev_map};\n \n+fn reachable(ecx: @encode_ctxt, id: node_id) -> bool {\n+    ecx.ccx.reachable.contains_key(id)\n+}\n+\n // Path table encoding\n fn encode_name(ebml_w: ebml::writer, name: str) {\n     ebml_w.wr_tagged_str(tag_paths_data_name, name);\n@@ -110,7 +115,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                             module: _mod, path: [str], &index: [entry<str>]) {\n     // FIXME factor out add_to_index/start/encode_name/encode_def_id/end ops\n     for module.items.each {|it|\n-        if !ecx.ccx.reachable.contains_key(it.id) ||\n+        if !reachable(ecx, it.id) ||\n            !ast_util::is_exported(it.ident, module) { cont; }\n         alt it.node {\n           item_const(_, _) {\n@@ -235,7 +240,7 @@ fn encode_type_param_bounds(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                             params: [ty_param]) {\n     let ty_str_ctxt = @{ds: def_to_str,\n                         tcx: ecx.ccx.tcx,\n-                        reachable: ecx.ccx.reachable,\n+                        reachable: reachable(ecx, _),\n                         abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n     for params.each {|param|\n         ebml_w.start_tag(tag_items_data_item_ty_param_bounds);\n@@ -255,7 +260,7 @@ fn write_type(ecx: @encode_ctxt, ebml_w: ebml::writer, typ: ty::t) {\n     let ty_str_ctxt =\n         @{ds: def_to_str,\n           tcx: ecx.ccx.tcx,\n-          reachable: ecx.ccx.reachable,\n+          reachable: reachable(ecx, _),\n           abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n     tyencode::enc_ty(ebml_w.writer, ty_str_ctxt, typ);\n }\n@@ -489,7 +494,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n     let tcx = ecx.ccx.tcx;\n     let must_write =\n         alt item.node { item_enum(_, _, _) { true } _ { false } };\n-    if !must_write && !ecx.ccx.reachable.contains_key(item.id) { ret; }\n+    if !must_write && !reachable(ecx, item.id) { ret; }\n \n     fn add_to_index_(item: @item, ebml_w: ebml::writer,\n                      index: @mut [entry<int>]) {\n@@ -704,7 +709,7 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                                nitem: @native_item,\n                                index: @mut [entry<int>],\n                                path: ast_map::path, abi: native_abi) {\n-    if !ecx.ccx.reachable.contains_key(nitem.id) { ret; }\n+    if !reachable(ecx, nitem.id) { ret; }\n     *index += [{val: nitem.id, pos: ebml_w.writer.tell()}];\n \n     ebml_w.start_tag(tag_items_data_item);\n@@ -1019,7 +1024,7 @@ fn encode_metadata(cx: @crate_ctxt, crate: @crate) -> [u8] {\n fn encoded_ty(tcx: ty::ctxt, t: ty::t) -> str {\n     let cx = @{ds: def_to_str,\n                tcx: tcx,\n-               reachable: std::map::int_hash(),\n+               reachable: {|_id| false},\n                abbrevs: tyencode::ac_no_abbrevs};\n     let buf = io::mem_buffer();\n     tyencode::enc_ty(io::mem_buffer_writer(buf), cx, t);"}, {"sha": "ae7f47e2f319d532f400210c410001cfc2ce5fbe", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=b4a3d525d8a8c5c111958d09f8ffeee1cab6bda8", "patch": "@@ -7,7 +7,6 @@ import driver::session::session;\n import middle::ty;\n import middle::ty::vid;\n import syntax::print::pprust::*;\n-import middle::trans::reachable;\n \n export ctxt;\n export ty_abbrev;\n@@ -17,11 +16,14 @@ export enc_ty;\n export enc_bounds;\n export enc_mode;\n \n-type ctxt =\n+type ctxt = {\n     // Def -> str Callback:\n+    ds: fn@(def_id) -> str,\n     // The type context.\n-    {ds: fn@(def_id) -> str, tcx: ty::ctxt,\n-     reachable: reachable::map, abbrevs: abbrev_ctxt};\n+    tcx: ty::ctxt,\n+    reachable: fn@(node_id) -> bool,\n+    abbrevs: abbrev_ctxt\n+};\n \n // Compact string representation for ty.t values. API ty_str & parse_from_str.\n // Extra parameters are for converting to/from def_ids in the string rep.\n@@ -61,7 +63,7 @@ fn enc_ty(w: io::writer, cx: @ctxt, t: ty::t) {\n                 // Do not emit node ids that map to unexported names.  Those\n                 // are not helpful.\n                 if def_id.crate != local_crate ||\n-                    cx.reachable.contains_key(def_id.node) {\n+                    cx.reachable(def_id.node) {\n                     w.write_char('\"');\n                     w.write_str(cx.ds(def_id));\n                     w.write_char('|');"}]}