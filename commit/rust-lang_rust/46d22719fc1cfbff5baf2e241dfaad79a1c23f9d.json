{"sha": "46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "node_id": "C_kwDOAAsO6NoAKDQ2ZDIyNzE5ZmMxY2ZiZmY1YmFmMmUyNDFkZmFhZDc5YTFjMjNmOWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T18:16:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T18:16:40Z"}, "message": "Remove pattern rendering hack", "tree": {"sha": "6ad6a39f4219d9791e3139e3d03d950be4e2f5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad6a39f4219d9791e3139e3d03d950be4e2f5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "html_url": "https://github.com/rust-lang/rust/commit/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ee4d62227d3a1faf369f235aaf610ea477c7ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ee4d62227d3a1faf369f235aaf610ea477c7ab", "html_url": "https://github.com/rust-lang/rust/commit/06ee4d62227d3a1faf369f235aaf610ea477c7ab"}], "stats": {"total": 357, "additions": 235, "deletions": 122}, "files": [{"sha": "750b0222593a5b5ee41769f6a452666688f9fed9", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -36,9 +36,9 @@ use crate::{\n         const_::render_const,\n         function::{render_fn, render_method},\n         literal::{render_struct_literal, render_variant_lit},\n-        macro_::render_macro,\n+        macro_::{render_macro, render_macro_pat},\n         pattern::{render_struct_pat, render_variant_pat},\n-        render_field, render_path_resolution, render_resolution_simple, render_tuple_field,\n+        render_field, render_path_resolution, render_pattern_resolution, render_tuple_field,\n         type_alias::{render_type_alias, render_type_alias_with_eq},\n         union_literal::render_union_literal,\n         RenderContext,\n@@ -134,10 +134,14 @@ impl Completions {\n         item.add_to(self);\n     }\n \n-    pub(crate) fn add_crate_roots(&mut self, ctx: &CompletionContext) {\n+    pub(crate) fn add_crate_roots(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        path_ctx: &PathCompletionCtx,\n+    ) {\n         ctx.process_all_names(&mut |name, res| match res {\n             ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {\n-                self.add_module(ctx, m, name);\n+                self.add_module(ctx, path_ctx, m, name);\n             }\n             _ => (),\n         });\n@@ -160,25 +164,36 @@ impl Completions {\n         );\n     }\n \n-    pub(crate) fn add_resolution_simple(\n+    pub(crate) fn add_pattern_resolution(\n         &mut self,\n         ctx: &CompletionContext,\n+        pattern_ctx: &PatternContext,\n         local_name: hir::Name,\n         resolution: hir::ScopeDef,\n     ) {\n         if ctx.is_scope_def_hidden(resolution) {\n+            cov_mark::hit!(qualified_path_doc_hidden);\n             return;\n         }\n-        self.add(render_resolution_simple(RenderContext::new(ctx), local_name, resolution).build());\n+        self.add(\n+            render_pattern_resolution(RenderContext::new(ctx), pattern_ctx, local_name, resolution)\n+                .build(),\n+        );\n     }\n \n     pub(crate) fn add_module(\n         &mut self,\n         ctx: &CompletionContext,\n+        path_ctx: &PathCompletionCtx,\n         module: hir::Module,\n         local_name: hir::Name,\n     ) {\n-        self.add_resolution_simple(ctx, local_name, hir::ScopeDef::ModuleDef(module.into()));\n+        self.add_path_resolution(\n+            ctx,\n+            path_ctx,\n+            local_name,\n+            hir::ScopeDef::ModuleDef(module.into()),\n+        );\n     }\n \n     pub(crate) fn add_macro(\n@@ -204,6 +219,29 @@ impl Completions {\n         );\n     }\n \n+    pub(crate) fn add_macro_pat(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        pattern_ctx: &PatternContext,\n+        mac: hir::Macro,\n+        local_name: hir::Name,\n+    ) {\n+        let is_private_editable = match ctx.is_visible(&mac) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n+        self.add(\n+            render_macro_pat(\n+                RenderContext::new(ctx).private_editable(is_private_editable),\n+                pattern_ctx,\n+                local_name,\n+                mac,\n+            )\n+            .build(),\n+        );\n+    }\n+\n     pub(crate) fn add_function(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "154c096f4d5982c271394cbdca2dbc9ef232682f", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -95,22 +95,24 @@ pub(crate) fn complete_attribute_path(\n                         acc.add_macro(ctx, path_ctx, m, name)\n                     }\n                     hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n-                        acc.add_module(ctx, m, name)\n+                        acc.add_module(ctx, path_ctx, m, name)\n                     }\n                     _ => (),\n                 }\n             }\n             return;\n         }\n         // fresh use tree with leading colon2, only show crate roots\n-        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         // only show modules in a fresh UseTree\n         Qualified::No => {\n             ctx.process_all_names(&mut |name, def| match def {\n                 hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_attr(ctx.db) => {\n                     acc.add_macro(ctx, path_ctx, m, name)\n                 }\n-                hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => acc.add_module(ctx, m, name),\n+                hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n+                    acc.add_module(ctx, path_ctx, m, name)\n+                }\n                 _ => (),\n             });\n             acc.add_nameref_keywords_with_colon(ctx);"}, {"sha": "48eb76029ff755734098639c878e73516d37901c", "filename": "crates/ide-completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -35,12 +35,14 @@ pub(crate) fn complete_derive_path(\n                     {\n                         acc.add_macro(ctx, path_ctx, mac, name)\n                     }\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => acc.add_module(ctx, m, name),\n+                    ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n+                        acc.add_module(ctx, path_ctx, m, name)\n+                    }\n                     _ => (),\n                 }\n             }\n         }\n-        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         // only show modules in a fresh UseTree\n         Qualified::No => {\n             ctx.process_all_names(&mut |name, def| {\n@@ -51,7 +53,7 @@ pub(crate) fn complete_derive_path(\n                         mac\n                     }\n                     ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n-                        return acc.add_module(ctx, m, name);\n+                        return acc.add_module(ctx, path_ctx, m, name);\n                     }\n                     _ => return,\n                 };"}, {"sha": "6b36801205af777bf74361ec494ad59b7a265511", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -152,7 +152,7 @@ pub(crate) fn complete_expr_path(\n                 _ => (),\n             }\n         }\n-        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         Qualified::No => {\n             acc.add_nameref_keywords_with_colon(ctx);\n             if let Some(adt) ="}, {"sha": "fa8c0eb77ace133979e302fbd73a2df19200b1a4", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -12,7 +12,7 @@ use crate::{\n         CompletionContext, DotAccess, PathCompletionCtx, PathKind, PatternContext, Qualified,\n         TypeLocation,\n     },\n-    render::{render_resolution_with_import, RenderContext},\n+    render::{render_resolution_with_import, render_resolution_with_import_pat, RenderContext},\n };\n \n use super::Completions;\n@@ -149,32 +149,22 @@ pub(crate) fn import_on_the_fly_path(\n pub(crate) fn import_on_the_fly_pat(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    pat_ctx: &PatternContext,\n+    pattern_ctx: &PatternContext,\n ) -> Option<()> {\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if let PatternContext { record_pat: Some(_), .. } = pat_ctx {\n+    if let PatternContext { record_pat: Some(_), .. } = pattern_ctx {\n         return None;\n     }\n \n     let potential_import_name = import_name(ctx);\n     let import_assets = import_assets_for_path(ctx, &potential_import_name, None)?;\n \n-    import_on_the_fly(\n+    import_on_the_fly_pat2(\n         acc,\n         ctx,\n-        &PathCompletionCtx {\n-            has_call_parens: false,\n-            has_macro_bang: false,\n-            qualified: Qualified::No,\n-            parent: None,\n-            // FIXME\n-            path: syntax::ast::make::ext::ident_path(\"dummy__\"),\n-            kind: crate::context::PathKind::Pat { pat_ctx: pat_ctx.clone() },\n-            has_type_args: false,\n-            use_tree_parent: false,\n-        },\n+        pattern_ctx,\n         import_assets,\n         ctx.original_token.parent()?,\n         potential_import_name,\n@@ -289,6 +279,50 @@ fn import_on_the_fly(\n     Some(())\n }\n \n+fn import_on_the_fly_pat2(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    pattern_ctx: &PatternContext,\n+    import_assets: ImportAssets,\n+    position: SyntaxNode,\n+    potential_import_name: String,\n+) -> Option<()> {\n+    let _p = profile::span(\"import_on_the_fly_pat\").detail(|| potential_import_name.clone());\n+\n+    if ImportScope::find_insert_use_container(&position, &ctx.sema).is_none() {\n+        return None;\n+    }\n+\n+    let ns_filter = |import: &LocatedImport| match import.original_item {\n+        ItemInNs::Macros(mac) => mac.is_fn_like(ctx.db),\n+        ItemInNs::Types(_) => true,\n+        ItemInNs::Values(def) => matches!(def, hir::ModuleDef::Const(_)),\n+    };\n+    let user_input_lowercased = potential_import_name.to_lowercase();\n+\n+    acc.add_all(\n+        import_assets\n+            .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n+            .into_iter()\n+            .filter(ns_filter)\n+            .filter(|import| {\n+                !ctx.is_item_hidden(&import.item_to_import)\n+                    && !ctx.is_item_hidden(&import.original_item)\n+            })\n+            .sorted_by_key(|located_import| {\n+                compute_fuzzy_completion_order_key(\n+                    &located_import.import_path,\n+                    &user_input_lowercased,\n+                )\n+            })\n+            .filter_map(|import| {\n+                render_resolution_with_import_pat(RenderContext::new(ctx), pattern_ctx, import)\n+            })\n+            .map(|builder| builder.build()),\n+    );\n+    Some(())\n+}\n+\n fn import_on_the_fly_method(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n@@ -297,7 +331,7 @@ fn import_on_the_fly_method(\n     position: SyntaxNode,\n     potential_import_name: String,\n ) -> Option<()> {\n-    let _p = profile::span(\"import_on_the_fly\").detail(|| potential_import_name.clone());\n+    let _p = profile::span(\"import_on_the_fly_method\").detail(|| potential_import_name.clone());\n \n     if ImportScope::find_insert_use_container(&position, &ctx.sema).is_none() {\n         return None;"}, {"sha": "4a32e0ebf58ba8382e111e247786545eb1fa8117", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn complete_item_list(\n                         acc.add_macro(ctx, path_ctx, m, name)\n                     }\n                     hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n-                        acc.add_module(ctx, m, name)\n+                        acc.add_module(ctx, path_ctx, m, name)\n                     }\n                     _ => (),\n                 }\n@@ -55,13 +55,15 @@ pub(crate) fn complete_item_list(\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         Qualified::No if ctx.qualifier_ctx.none() => {\n             ctx.process_all_names(&mut |name, def| match def {\n                 hir::ScopeDef::ModuleDef(hir::ModuleDef::Macro(m)) if m.is_fn_like(ctx.db) => {\n                     acc.add_macro(ctx, path_ctx, m, name)\n                 }\n-                hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => acc.add_module(ctx, m, name),\n+                hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) => {\n+                    acc.add_module(ctx, path_ctx, m, name)\n+                }\n                 _ => (),\n             });\n             acc.add_nameref_keywords_with_colon(ctx);"}, {"sha": "4ea80a50777c86b41ae1be1c6006494b9dfd372a", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -82,22 +82,7 @@ pub(crate) fn complete_pattern(\n                 hir::ModuleDef::Const(..) => refutable,\n                 hir::ModuleDef::Module(..) => true,\n                 hir::ModuleDef::Macro(mac) if mac.is_fn_like(ctx.db) => {\n-                    return acc.add_macro(\n-                        ctx,\n-                        &PathCompletionCtx {\n-                            has_call_parens: false,\n-                            has_macro_bang: false,\n-                            qualified: Qualified::No,\n-                            // FIXME\n-                            path: syntax::ast::make::ext::ident_path(\"dummy__\"),\n-                            parent: None,\n-                            kind: crate::context::PathKind::Pat { pat_ctx: pattern_ctx.clone() },\n-                            has_type_args: false,\n-                            use_tree_parent: false,\n-                        },\n-                        mac,\n-                        name,\n-                    );\n+                    return acc.add_macro_pat(ctx, pattern_ctx, mac, name);\n                 }\n                 _ => false,\n             },\n@@ -118,7 +103,7 @@ pub(crate) fn complete_pattern(\n             | ScopeDef::Unknown => false,\n         };\n         if add_simple_path {\n-            acc.add_resolution_simple(ctx, name, res);\n+            acc.add_pattern_resolution(ctx, pattern_ctx, name, res);\n         }\n     });\n }\n@@ -207,7 +192,7 @@ pub(crate) fn complete_pattern_path(\n             }\n         }\n         // qualifier can only be none here if we are in a TuplePat or RecordPat in which case special characters have to follow the path\n-        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         Qualified::No => {\n             ctx.process_all_names(&mut |name, res| {\n                 // FIXME: properly filter here"}, {"sha": "c5b65d36ae8f9571d8a0dd47db6ff57636188323", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -141,7 +141,7 @@ pub(crate) fn complete_type_path(\n                 _ => (),\n             }\n         }\n-        Qualified::Absolute => acc.add_crate_roots(ctx),\n+        Qualified::Absolute => acc.add_crate_roots(ctx, path_ctx),\n         Qualified::No => {\n             acc.add_nameref_keywords_with_colon(ctx);\n             if let TypeLocation::TypeBound = location {"}, {"sha": "c98590f1361c00ea84fc34499dfb57d815c13d96", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -89,15 +89,15 @@ pub(crate) fn complete_use_path(\n         // fresh use tree with leading colon2, only show crate roots\n         Qualified::Absolute => {\n             cov_mark::hit!(use_tree_crate_roots_only);\n-            acc.add_crate_roots(ctx);\n+            acc.add_crate_roots(ctx, path_ctx);\n         }\n         // only show modules and non-std enum in a fresh UseTree\n         Qualified::No => {\n             cov_mark::hit!(unqualified_path_selected_only);\n             ctx.process_all_names(&mut |name, res| {\n                 match res {\n                     ScopeDef::ModuleDef(hir::ModuleDef::Module(module)) => {\n-                        acc.add_module(ctx, module, name);\n+                        acc.add_module(ctx, path_ctx, module, name);\n                     }\n                     ScopeDef::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n                         // exclude prelude enum"}, {"sha": "6621aafe4bd6c2569c762aa80fabe6efbc639df8", "filename": "crates/ide-completion/src/completions/vis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fvis.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -8,7 +8,7 @@ use crate::{\n pub(crate) fn complete_vis_path(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n+    path_ctx @ PathCompletionCtx { qualified, .. }: &PathCompletionCtx,\n     &has_in_token: &bool,\n ) {\n     match qualified {\n@@ -23,7 +23,7 @@ pub(crate) fn complete_vis_path(\n             if let Some(next) = next_towards_current {\n                 if let Some(name) = next.name(ctx.db) {\n                     cov_mark::hit!(visibility_qualified);\n-                    acc.add_module(ctx, next, name);\n+                    acc.add_module(ctx, path_ctx, next, name);\n                 }\n             }\n "}, {"sha": "c29a50dd6325ee433fc1911a36140b1116336fb7", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 98, "deletions": 61, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -17,9 +17,13 @@ use ide_db::{\n use syntax::{AstNode, SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind},\n+    context::{PathCompletionCtx, PathKind, PatternContext},\n     item::{Builder, CompletionRelevanceTypeMatch},\n-    render::{function::render_fn, literal::render_variant_lit, macro_::render_macro},\n+    render::{\n+        function::render_fn,\n+        literal::render_variant_lit,\n+        macro_::{render_macro, render_macro_pat},\n+    },\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n };\n /// Interface for data and methods required for items rendering.\n@@ -153,21 +157,29 @@ pub(crate) fn render_tuple_field(\n     item.build()\n }\n \n+pub(crate) fn render_type_inference(ty_string: String, ctx: &CompletionContext) -> CompletionItem {\n+    let mut builder =\n+        CompletionItem::new(CompletionItemKind::InferredType, ctx.source_range(), ty_string);\n+    builder.set_relevance(CompletionRelevance { is_definite: true, ..Default::default() });\n+    builder.build()\n+}\n+\n pub(crate) fn render_path_resolution(\n     ctx: RenderContext<'_>,\n     path_ctx: &PathCompletionCtx,\n     local_name: hir::Name,\n     resolution: ScopeDef,\n ) -> Builder {\n-    render_resolution_(ctx, path_ctx, local_name, None, resolution)\n+    render_resolution_path(ctx, path_ctx, local_name, None, resolution)\n }\n \n-pub(crate) fn render_resolution_simple(\n+pub(crate) fn render_pattern_resolution(\n     ctx: RenderContext<'_>,\n+    pattern_ctx: &PatternContext,\n     local_name: hir::Name,\n     resolution: ScopeDef,\n ) -> Builder {\n-    render_resolution_simple_(ctx, None, local_name, None, resolution)\n+    render_resolution_pat(ctx, pattern_ctx, local_name, None, resolution)\n }\n \n pub(crate) fn render_resolution_with_import(\n@@ -176,23 +188,56 @@ pub(crate) fn render_resolution_with_import(\n     import_edit: LocatedImport,\n ) -> Option<Builder> {\n     let resolution = ScopeDef::from(import_edit.original_item);\n-    let local_name = match resolution {\n+    let local_name = scope_def_to_name(resolution, &ctx, &import_edit)?;\n+\n+    Some(render_resolution_path(ctx, path_ctx, local_name, Some(import_edit), resolution))\n+}\n+\n+pub(crate) fn render_resolution_with_import_pat(\n+    ctx: RenderContext<'_>,\n+    pattern_ctx: &PatternContext,\n+    import_edit: LocatedImport,\n+) -> Option<Builder> {\n+    let resolution = ScopeDef::from(import_edit.original_item);\n+    let local_name = scope_def_to_name(resolution, &ctx, &import_edit)?;\n+    Some(render_resolution_pat(ctx, pattern_ctx, local_name, Some(import_edit), resolution))\n+}\n+\n+fn scope_def_to_name(\n+    resolution: ScopeDef,\n+    ctx: &RenderContext,\n+    import_edit: &LocatedImport,\n+) -> Option<hir::Name> {\n+    Some(match resolution {\n         ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n         ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n         ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n         _ => item_name(ctx.db(), import_edit.original_item)?,\n-    };\n-    Some(render_resolution_(ctx, path_ctx, local_name, Some(import_edit), resolution))\n+    })\n }\n \n-pub(crate) fn render_type_inference(ty_string: String, ctx: &CompletionContext) -> CompletionItem {\n-    let mut builder =\n-        CompletionItem::new(CompletionItemKind::InferredType, ctx.source_range(), ty_string);\n-    builder.set_relevance(CompletionRelevance { is_definite: true, ..Default::default() });\n-    builder.build()\n+fn render_resolution_pat(\n+    ctx: RenderContext<'_>,\n+    pattern_ctx: &PatternContext,\n+    local_name: hir::Name,\n+    import_to_add: Option<LocatedImport>,\n+    resolution: ScopeDef,\n+) -> Builder {\n+    let _p = profile::span(\"render_resolution\");\n+    use hir::ModuleDef::*;\n+\n+    match resolution {\n+        ScopeDef::ModuleDef(Macro(mac)) => {\n+            let ctx = ctx.import_to_add(import_to_add);\n+            return render_macro_pat(ctx, pattern_ctx, local_name, mac);\n+        }\n+        _ => (),\n+    }\n+\n+    render_resolution_simple_(ctx, local_name, import_to_add, resolution)\n }\n \n-fn render_resolution_(\n+fn render_resolution_path(\n     ctx: RenderContext<'_>,\n     path_ctx: &PathCompletionCtx,\n     local_name: hir::Name,\n@@ -221,22 +266,14 @@ fn render_resolution_(\n         }\n         _ => (),\n     }\n-    render_resolution_simple_type(ctx, path_ctx, local_name, import_to_add, resolution)\n-}\n \n-fn render_resolution_simple_type(\n-    ctx: RenderContext<'_>,\n-    path_ctx: &PathCompletionCtx,\n-    local_name: hir::Name,\n-    import_to_add: Option<LocatedImport>,\n-    resolution: ScopeDef,\n-) -> Builder {\n+    let completion = ctx.completion;\n     let cap = ctx.snippet_cap();\n-    let db = ctx.completion.db;\n-    let config = ctx.completion.config;\n+    let db = completion.db;\n+    let config = completion.config;\n+\n     let name = local_name.to_smol_str();\n-    let mut item =\n-        render_resolution_simple_(ctx, Some(path_ctx), local_name, import_to_add, resolution);\n+    let mut item = render_resolution_simple_(ctx, local_name, import_to_add, resolution);\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n         path_ctx,\n@@ -251,6 +288,7 @@ fn render_resolution_simple_type(\n                 }\n                 _ => false,\n             };\n+\n             if has_non_default_type_params {\n                 cov_mark::hit!(inserts_angle_brackets_for_generics);\n                 item.lookup_by(name.clone())\n@@ -260,22 +298,52 @@ fn render_resolution_simple_type(\n             }\n         }\n     }\n+    if let ScopeDef::Local(local) = resolution {\n+        let ty = local.ty(db);\n+        if !ty.is_unknown() {\n+            item.detail(ty.display(db).to_string());\n+        }\n+\n+        item.set_relevance(CompletionRelevance {\n+            type_match: compute_type_match(completion, &ty),\n+            exact_name_match: compute_exact_name_match(completion, &name),\n+            is_local: true,\n+            ..CompletionRelevance::default()\n+        });\n+\n+        if let Some(ref_match) = compute_ref_match(completion, &ty) {\n+            item.ref_match(ref_match, path_ctx.path.syntax().text_range().start());\n+        }\n+    };\n     item\n }\n \n fn render_resolution_simple_(\n     ctx: RenderContext<'_>,\n-    path_ctx: Option<&PathCompletionCtx>,\n     local_name: hir::Name,\n     import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n ) -> Builder {\n     let _p = profile::span(\"render_resolution\");\n-    use hir::ModuleDef::*;\n \n     let db = ctx.db();\n     let ctx = ctx.import_to_add(import_to_add);\n-    let kind = match resolution {\n+    let kind = res_to_kind(resolution);\n+\n+    let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.to_smol_str());\n+    item.set_relevance(ctx.completion_relevance())\n+        .set_documentation(scope_def_docs(db, resolution))\n+        .set_deprecated(scope_def_is_deprecated(&ctx, resolution));\n+\n+    if let Some(import_to_add) = ctx.import_to_add {\n+        item.add_import(import_to_add);\n+    }\n+    item\n+}\n+\n+fn res_to_kind(resolution: ScopeDef) -> CompletionItemKind {\n+    use hir::ModuleDef::*;\n+    match resolution {\n         ScopeDef::Unknown => CompletionItemKind::UnresolvedReference,\n         ScopeDef::ModuleDef(Function(_)) => CompletionItemKind::SymbolKind(SymbolKind::Function),\n         ScopeDef::ModuleDef(Variant(_)) => CompletionItemKind::SymbolKind(SymbolKind::Variant),\n@@ -301,38 +369,7 @@ fn render_resolution_simple_(\n         ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n             CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n         }\n-    };\n-\n-    let local_name = local_name.to_smol_str();\n-    let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.clone());\n-    item.set_relevance(ctx.completion_relevance());\n-    if let ScopeDef::Local(local) = resolution {\n-        let ty = local.ty(db);\n-        if !ty.is_unknown() {\n-            item.detail(ty.display(db).to_string());\n-        }\n-\n-        item.set_relevance(CompletionRelevance {\n-            type_match: compute_type_match(ctx.completion, &ty),\n-            exact_name_match: compute_exact_name_match(ctx.completion, &local_name),\n-            is_local: true,\n-            ..CompletionRelevance::default()\n-        });\n-\n-        if let Some(path_ctx) = path_ctx {\n-            if let Some(ref_match) = compute_ref_match(ctx.completion, &ty) {\n-                item.ref_match(ref_match, path_ctx.path.syntax().text_range().start());\n-            }\n-        }\n-    };\n-\n-    item.set_documentation(scope_def_docs(db, resolution))\n-        .set_deprecated(scope_def_is_deprecated(&ctx, resolution));\n-\n-    if let Some(import_to_add) = ctx.import_to_add {\n-        item.add_import(import_to_add);\n     }\n-    item\n }\n \n fn scope_def_docs(db: &RootDatabase, resolution: ScopeDef) -> Option<hir::Documentation> {"}, {"sha": "ac2091eca981fe8bcb78ff5cf613e366ae7cf9b0", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d22719fc1cfbff5baf2e241dfaad79a1c23f9d/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=46d22719fc1cfbff5baf2e241dfaad79a1c23f9d", "patch": "@@ -5,24 +5,37 @@ use ide_db::SymbolKind;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{PathCompletionCtx, PathKind},\n+    context::{PathCompletionCtx, PathKind, PatternContext},\n     item::{Builder, CompletionItem},\n     render::RenderContext,\n };\n \n pub(crate) fn render_macro(\n     ctx: RenderContext<'_>,\n-    path_ctx: &PathCompletionCtx,\n+    PathCompletionCtx { kind, has_macro_bang, has_call_parens, .. }: &PathCompletionCtx,\n+\n+    name: hir::Name,\n+    macro_: hir::Macro,\n+) -> Builder {\n+    let _p = profile::span(\"render_macro\");\n+    render(ctx, *kind == PathKind::Use, *has_macro_bang, *has_call_parens, name, macro_)\n+}\n+\n+pub(crate) fn render_macro_pat(\n+    ctx: RenderContext<'_>,\n+    _pattern_ctx: &PatternContext,\n     name: hir::Name,\n     macro_: hir::Macro,\n ) -> Builder {\n     let _p = profile::span(\"render_macro\");\n-    render(ctx, path_ctx, name, macro_)\n+    render(ctx, false, false, false, name, macro_)\n }\n \n fn render(\n     ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n-    PathCompletionCtx { kind, has_macro_bang, has_call_parens, .. }: &PathCompletionCtx,\n+    is_use_path: bool,\n+    has_macro_bang: bool,\n+    has_call_parens: bool,\n     name: hir::Name,\n     macro_: hir::Macro,\n ) -> Builder {\n@@ -39,7 +52,7 @@ fn render(\n     let is_fn_like = macro_.is_fn_like(completion.db);\n     let (bra, ket) = if is_fn_like { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n-    let needs_bang = is_fn_like && *kind != PathKind::Use && !has_macro_bang;\n+    let needs_bang = is_fn_like && !is_use_path && !has_macro_bang;\n \n     let mut item = CompletionItem::new(\n         SymbolKind::from(macro_.kind(completion.db)),"}]}