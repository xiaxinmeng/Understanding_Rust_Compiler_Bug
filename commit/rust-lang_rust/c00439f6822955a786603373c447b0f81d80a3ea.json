{"sha": "c00439f6822955a786603373c447b0f81d80a3ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDQzOWY2ODIyOTU1YTc4NjYwMzM3M2M0NDdiMGY4MWQ4MGEzZWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-24T03:17:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-24T03:17:01Z"}, "message": "Rollup merge of #83990 - the8472:take-trusted-len, r=dtolnay\n\nimplement `TrustedRandomAccess` for `Take` iterator adapter\n\n`TrustedRandomAccess` requires the iterator length to fit within `usize`. `take(n)` only constrains the upper bound of an iterator. So if the inner is `TrustedRandomAccess` (which already implies a finite length) then so can be `Take`.\n\n```````@rustbot``````` label T-libs-impl", "tree": {"sha": "86a7deb2164c60830386897212247251c0a25fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86a7deb2164c60830386897212247251c0a25fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00439f6822955a786603373c447b0f81d80a3ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgg42tCRBK7hj4Ov3rIwAAdjYIAAvA81QAEXGJH2qNUNSX9ko3\nglZNAVzsTv243mQ8pJ+jb67IoW5c/sSFiKZQBYJbIKUPy9rkSytL994CRa7B3TkK\nJwpSjloiKkpfigq+8ShxDeLBv1PeMnLY8P1ErpaV2RHrMjUvPo1UDXy5GvLX7Gs/\nG/GveJyybDvU6XCAln8D+ns4k+9owcRn3V80jAaGldHjNuX9HpcoptZum5c6f4rh\nPFbAuC12RWK4ejlJYx67jzw8WZmS7t/CTo2LwPXVZkPzV3jE+7+5BeFNFvhtBjF2\nfifP6smgLlkoCMMChZtB6Zf1V+5nlX7Uytxe0qJPM8n0WQtokVSoQk4DhDw6s6s=\n=MRlF\n-----END PGP SIGNATURE-----\n", "payload": "tree 86a7deb2164c60830386897212247251c0a25fcc\nparent 8ad0821b035e35aed07ec252c2dd831c15a4e26e\nparent 37a5b515e9c36ee3f57d9e0d7db7efce2fb02195\nauthor Yuki Okushi <jtitor@2k36.org> 1619234221 +0900\ncommitter GitHub <noreply@github.com> 1619234221 +0900\n\nRollup merge of #83990 - the8472:take-trusted-len, r=dtolnay\n\nimplement `TrustedRandomAccess` for `Take` iterator adapter\n\n`TrustedRandomAccess` requires the iterator length to fit within `usize`. `take(n)` only constrains the upper bound of an iterator. So if the inner is `TrustedRandomAccess` (which already implies a finite length) then so can be `Take`.\n\n```````@rustbot``````` label T-libs-impl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00439f6822955a786603373c447b0f81d80a3ea", "html_url": "https://github.com/rust-lang/rust/commit/c00439f6822955a786603373c447b0f81d80a3ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00439f6822955a786603373c447b0f81d80a3ea/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad0821b035e35aed07ec252c2dd831c15a4e26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad0821b035e35aed07ec252c2dd831c15a4e26e", "html_url": "https://github.com/rust-lang/rust/commit/8ad0821b035e35aed07ec252c2dd831c15a4e26e"}, {"sha": "37a5b515e9c36ee3f57d9e0d7db7efce2fb02195", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a5b515e9c36ee3f57d9e0d7db7efce2fb02195", "html_url": "https://github.com/rust-lang/rust/commit/37a5b515e9c36ee3f57d9e0d7db7efce2fb02195"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "54a47f1323ebf3f17d03e50318410013e58c54c2", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c00439f6822955a786603373c447b0f81d80a3ea/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00439f6822955a786603373c447b0f81d80a3ea/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=c00439f6822955a786603373c447b0f81d80a3ea", "patch": "@@ -1,5 +1,8 @@\n use crate::cmp;\n-use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::iter::{\n+    adapters::zip::try_get_unchecked, adapters::SourceIter, FusedIterator, InPlaceIterable,\n+    TrustedLen, TrustedRandomAccess,\n+};\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -111,6 +114,15 @@ where\n \n         self.try_fold(init, ok(fold)).unwrap()\n     }\n+\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <I as Iterator>::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: the caller must uphold the contract for\n+        // `Iterator::__iterator_get_unchecked`.\n+        unsafe { try_get_unchecked(&mut self.iter, idx) }\n+    }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n@@ -207,3 +219,12 @@ impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+unsafe impl<I> TrustedRandomAccess for Take<I>\n+where\n+    I: TrustedRandomAccess,\n+{\n+    const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n+}"}]}