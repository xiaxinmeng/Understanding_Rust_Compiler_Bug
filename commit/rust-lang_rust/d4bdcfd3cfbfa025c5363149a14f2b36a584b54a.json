{"sha": "d4bdcfd3cfbfa025c5363149a14f2b36a584b54a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YmRjZmQzY2ZiZmEwMjVjNTM2MzE0OWExNGYyYjM2YTU4NGI1NGE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-06T08:46:37Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-06T08:46:37Z"}, "message": "don't record upvars into generator interior", "tree": {"sha": "7a73fa97beedca1943ef51c7c6b47de71c41ccb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a73fa97beedca1943ef51c7c6b47de71c41ccb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4bdcfd3cfbfa025c5363149a14f2b36a584b54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bdcfd3cfbfa025c5363149a14f2b36a584b54a", "html_url": "https://github.com/rust-lang/rust/commit/d4bdcfd3cfbfa025c5363149a14f2b36a584b54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4bdcfd3cfbfa025c5363149a14f2b36a584b54a/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2", "html_url": "https://github.com/rust-lang/rust/commit/a5d103ff90f4ad90b1f13f5b5de83a3eb758d9e2"}], "stats": {"total": 33, "additions": 3, "deletions": 30}, "files": [{"sha": "7a5f74384f8c3b4ec2ff4eef259f92814dab26b3", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d4bdcfd3cfbfa025c5363149a14f2b36a584b54a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bdcfd3cfbfa025c5363149a14f2b36a584b54a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=d4bdcfd3cfbfa025c5363149a14f2b36a584b54a", "patch": "@@ -16,7 +16,6 @@ use rustc_span::Span;\n \n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n-    closure_def_id: DefId,\n     types: FxHashMap<ty::GeneratorInteriorTypeCause<'tcx>, usize>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     expr_count: usize,\n@@ -31,7 +30,6 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n         scope: Option<region::Scope>,\n         expr: Option<&'tcx Expr<'tcx>>,\n         source_span: Span,\n-        is_upvar: bool,\n     ) {\n         use rustc_span::DUMMY_SP;\n \n@@ -119,20 +117,6 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                     unresolved_type, unresolved_type_span\n                 );\n                 self.prev_unresolved_span = unresolved_type_span;\n-            } else {\n-                if is_upvar {\n-                    let entries = self.types.len();\n-                    let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));\n-                    self.types\n-                        .entry(ty::GeneratorInteriorTypeCause {\n-                            span: source_span,\n-                            ty: &ty,\n-                            scope_span,\n-                            yield_span: None,\n-                            expr: expr.map(|e| e.hir_id),\n-                        })\n-                        .or_insert(entries);\n-                }\n             }\n         }\n     }\n@@ -147,11 +131,8 @@ pub fn resolve_interior<'a, 'tcx>(\n ) {\n     let body = fcx.tcx.hir().body(body_id);\n \n-    let closure_def_id = fcx.tcx.hir().body_owner_def_id(body_id).to_def_id();\n-\n     let mut visitor = InteriorVisitor {\n         fcx,\n-        closure_def_id,\n         types: FxHashMap::default(),\n         region_scope_tree: fcx.tcx.region_scope_tree(def_id),\n         expr_count: 0,\n@@ -243,7 +224,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         if let PatKind::Binding(..) = pat.kind {\n             let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n             let ty = self.fcx.tables.borrow().pat_ty(pat);\n-            self.record(ty, Some(scope), None, pat.span, false);\n+            self.record(ty, Some(scope), None, pat.span);\n         }\n     }\n \n@@ -284,7 +265,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n         if let Some(adjusted_ty) = self.fcx.tables.borrow().expr_ty_adjusted_opt(expr) {\n-            self.record(adjusted_ty, scope, Some(expr), expr.span, false);\n+            self.record(adjusted_ty, scope, Some(expr), expr.span);\n         }\n \n         // Also record the unadjusted type (which is the only type if\n@@ -312,17 +293,9 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // The type table might not have information for this expression\n         // if it is in a malformed scope. (#66387)\n         if let Some(ty) = self.fcx.tables.borrow().expr_ty_opt(expr) {\n-            self.record(ty, scope, Some(expr), expr.span, false);\n+            self.record(ty, scope, Some(expr), expr.span);\n         } else {\n             self.fcx.tcx.sess.delay_span_bug(expr.span, \"no type for node\");\n         }\n-\n-        if let Some(upvars) = self.fcx.tcx.upvars(self.closure_def_id) {\n-            for (upvar_id, upvar) in upvars.iter() {\n-                let upvar_ty = self.fcx.tables.borrow().node_type(*upvar_id);\n-                debug!(\"type of upvar: {:?}\", upvar_ty);\n-                self.record(upvar_ty, scope, Some(expr), upvar.span, true);\n-            }\n-        }\n     }\n }"}]}