{"sha": "16286f5cf921a9de463d8a744c33f49837698c3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Mjg2ZjVjZjkyMWE5ZGU0NjNkOGE3NDRjMzNmNDk4Mzc2OThjM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-26T15:39:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-26T15:39:13Z"}, "message": "Auto merge of #21614 - kvark:typedef, r=huonw\n\nFixes #21497 \r\n\r\nI don't know if this can be tested with built-in tests.", "tree": {"sha": "8a3ec6a5cdd831483f2761c5490f21cdd5b257fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3ec6a5cdd831483f2761c5490f21cdd5b257fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16286f5cf921a9de463d8a744c33f49837698c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16286f5cf921a9de463d8a744c33f49837698c3d", "html_url": "https://github.com/rust-lang/rust/commit/16286f5cf921a9de463d8a744c33f49837698c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16286f5cf921a9de463d8a744c33f49837698c3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977c44ade09450016d9c95dea245fd4464a509e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/977c44ade09450016d9c95dea245fd4464a509e9", "html_url": "https://github.com/rust-lang/rust/commit/977c44ade09450016d9c95dea245fd4464a509e9"}, {"sha": "e5632157b1a51976e691fc873472f53e629d1013", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5632157b1a51976e691fc873472f53e629d1013", "html_url": "https://github.com/rust-lang/rust/commit/e5632157b1a51976e691fc873472f53e629d1013"}], "stats": {"total": 71, "additions": 55, "deletions": 16}, "files": [{"sha": "9c85d3d28a7a0039d5b34ade26d4d773a2f11f67", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -51,7 +51,8 @@ pub fn expand_deriving_bound<F>(cx: &mut ExtCtxt,\n         path: Path::new(vec!(\"std\", \"marker\", name)),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n-        methods: vec!()\n+        methods: Vec::new(),\n+        associated_types: Vec::new(),\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "e1dcc887778231d1b8f557b59caa4d424faafc9e", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -44,7 +44,8 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n                     cs_clone(\"Clone\", c, s, sub)\n                 }),\n             }\n-        )\n+        ),\n+        associated_types: Vec::new(),\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "00971b96e9288759ec9dcdaea150112d278fc772", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -88,7 +88,8 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n         methods: vec!(\n             md!(\"eq\", cs_eq),\n             md!(\"ne\", cs_ne)\n-        )\n+        ),\n+        associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "1f92f8d7b372a3ac92738b41fcfda4de05ac94e8", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -78,7 +78,8 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n             md!(\"le\", true, true),\n             md!(\"gt\", false, false),\n             md!(\"ge\", false, true)\n-        ]\n+        ],\n+        associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "0429db3643bb1a335279fb04c181668906bd04e2", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -61,7 +61,8 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n                     cs_total_eq_assert(a, b, c)\n                 })\n             }\n-        )\n+        ),\n+        associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "e90c1aa6fcee8254a18eea0a04520f8db653380b", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -45,7 +45,8 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                     cs_cmp(a, b, c)\n                 }),\n             }\n-        )\n+        ),\n+        associated_types: Vec::new(),\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "9552dff941d273d1a55ac99e8c96091d186dd7b1", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -79,7 +79,9 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     decodable_substructure(a, b, c, krate)\n                 }),\n-            })\n+            }\n+        ),\n+        associated_types: Vec::new(),\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "27f3c46c48fceaf3edb4f6ccac496773ac2fc00f", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -43,7 +43,9 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     default_substructure(a, b, c)\n                 })\n-            })\n+            }\n+        ),\n+        associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "d0b2c2faf3719e2a3a70f921abd0fb0ee0970425", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -155,7 +155,9 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                 combine_substructure: combine_substructure(box |a, b, c| {\n                     encodable_substructure(a, b, c)\n                 }),\n-            })\n+            }\n+        ),\n+        associated_types: Vec::new(),\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "56ff455a02bb87c0aca8bfab12b852da2c4c6c60", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -228,6 +228,8 @@ pub struct TraitDef<'a> {\n     pub generics: LifetimeBounds<'a>,\n \n     pub methods: Vec<MethodDef<'a>>,\n+\n+    pub associated_types: Vec<(ast::Ident, Ty<'a>)>,\n }\n \n \n@@ -387,6 +389,22 @@ impl<'a> TraitDef<'a> {\n                            methods: Vec<P<ast::Method>>) -> P<ast::Item> {\n         let trait_path = self.path.to_path(cx, self.span, type_ident, generics);\n \n+        // Transform associated types from `deriving::ty::Ty` into `ast::Typedef`\n+        let associated_types = self.associated_types.iter().map(|&(ident, ref type_def)| {\n+            P(ast::Typedef {\n+                id: ast::DUMMY_NODE_ID,\n+                span: self.span,\n+                ident: ident,\n+                vis: ast::Inherited,\n+                attrs: Vec::new(),\n+                typ: type_def.to_ty(cx,\n+                    self.span,\n+                    type_ident,\n+                    generics\n+                ),\n+            })\n+        });\n+\n         let Generics { mut lifetimes, ty_params, mut where_clause } =\n             self.generics.to_generics(cx, self.span, type_ident, generics);\n         let mut ty_params = ty_params.into_vec();\n@@ -494,7 +512,11 @@ impl<'a> TraitDef<'a> {\n                           methods.into_iter()\n                                  .map(|method| {\n                                      ast::MethodImplItem(method)\n-                                 }).collect()))\n+                                 }).chain(\n+                                     associated_types.map(|type_| {\n+                                         ast::TypeImplItem(type_)\n+                                     })\n+                                 ).collect()))\n     }\n \n     fn expand_struct_def(&self,"}, {"sha": "e7f546b2691f2c7bb9d94c597f0649d43df536c6", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -54,7 +54,8 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n                     hash_substructure(a, b, c)\n                 })\n             }\n-        )\n+        ),\n+        associated_types: Vec::new(),\n     };\n \n     hash_trait_def.expand(cx, mitem, item, push);"}, {"sha": "c694b054ba3c25cf273d88f19db0e0b5c6d73de1", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -65,7 +65,9 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                 combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_from(\"u64\", c, s, sub)\n                 }),\n-            })\n+            }\n+        ),\n+        associated_types: Vec::new(),\n     };\n \n     trait_def.expand(cx, mitem, item, push)"}, {"sha": "9fd5091e194dcee568d8ee9a585f5e19138baaca", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -49,7 +49,8 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                     rand_substructure(a, b, c)\n                 })\n             }\n-        )\n+        ),\n+        associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "ec5941f58f3f02c1aaf49b01a8d3ceafd0970689", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16286f5cf921a9de463d8a744c33f49837698c3d/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=16286f5cf921a9de463d8a744c33f49837698c3d", "patch": "@@ -35,10 +35,10 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"fmt\", \"Debug\")),\n+        path: Path::new(vec![\"std\", \"fmt\", \"Debug\"]),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n-        methods: vec!(\n+        methods: vec![\n             MethodDef {\n                 name: \"fmt\",\n                 generics: LifetimeBounds::empty(),\n@@ -50,7 +50,8 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                     show_substructure(a, b, c)\n                 })\n             }\n-        )\n+        ],\n+        associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }"}]}