{"sha": "fc21640a65b5caef8dbbc9e85e9616b843847fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjE2NDBhNjViNWNhZWY4ZGJiYzllODVlOTYxNmI4NDM4NDdmYjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-19T18:56:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T18:56:38Z"}, "message": "Merge #8111\n\n8111: Return `Either` from `MacroDefId::ast_id` r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "6f4808ef6a79fa816d6b03d18234f27a0ed59c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f4808ef6a79fa816d6b03d18234f27a0ed59c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc21640a65b5caef8dbbc9e85e9616b843847fb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVPPmCRBK7hj4Ov3rIwAAdHIIACz6128+mHDgqAmrWVWQCX1q\nYy+4owf5RuOkOfoQDmdfiKCBEyzSPys4NlJevMw3YHRKj+o/la6Rk/V061RaZAdG\ndZJ4j/JEK4IFANquJutBxq6d5HMptd421WnkhC1Ol3G2hmx3vFQb/LHjWeXe+VZO\ntgegdTAm8OHTxaTKb4pzsrZNp63KW7x3dPFlWU13jQEYZBNDaHB0nCyt8Epntu28\nxKk+AuSVJa7wcZI0s0TYlKqvUT3dit//6uqAiaXa0rbSeUvrV9a3C32lUjljBqOx\nQkO4bxgi4J6ZONVhhaFUp7L+ElPZOwvBYqTURmzmtofqVk+lRuGEA0Hctrry8DU=\n=KCdL\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f4808ef6a79fa816d6b03d18234f27a0ed59c42\nparent 0392e63c95736e988bda0fc62261ef48e89b3a31\nparent 93aeb16eb21709de38ba8484fa82ed4e05ae5665\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616180198 +0000\ncommitter GitHub <noreply@github.com> 1616180198 +0000\n\nMerge #8111\n\n8111: Return `Either` from `MacroDefId::ast_id` r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc21640a65b5caef8dbbc9e85e9616b843847fb4", "html_url": "https://github.com/rust-lang/rust/commit/fc21640a65b5caef8dbbc9e85e9616b843847fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc21640a65b5caef8dbbc9e85e9616b843847fb4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0392e63c95736e988bda0fc62261ef48e89b3a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/0392e63c95736e988bda0fc62261ef48e89b3a31", "html_url": "https://github.com/rust-lang/rust/commit/0392e63c95736e988bda0fc62261ef48e89b3a31"}, {"sha": "93aeb16eb21709de38ba8484fa82ed4e05ae5665", "url": "https://api.github.com/repos/rust-lang/rust/commits/93aeb16eb21709de38ba8484fa82ed4e05ae5665", "html_url": "https://github.com/rust-lang/rust/commit/93aeb16eb21709de38ba8484fa82ed4e05ae5665"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "dc10a4d0fab8133b66ea5db57d5e3e5f13c54c80", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=fc21640a65b5caef8dbbc9e85e9616b843847fb4", "patch": "@@ -6,7 +6,7 @@ use hir_def::{\n     src::{HasChildSource, HasSource as _},\n     Lookup, VariantId,\n };\n-use hir_expand::{InFile, MacroDefKind};\n+use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n@@ -113,15 +113,10 @@ impl HasSource for TypeAlias {\n impl HasSource for MacroDef {\n     type Ast = Either<ast::Macro, ast::Fn>;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n-        Some(match &self.id.kind {\n-            MacroDefKind::Declarative(id)\n-            | MacroDefKind::BuiltIn(_, id)\n-            | MacroDefKind::BuiltInDerive(_, id)\n-            | MacroDefKind::BuiltInEager(_, id) => {\n-                id.with_value(Either::Left(id.to_node(db.upcast())))\n-            }\n-            MacroDefKind::ProcMacro(_, id) => id.map(|_| Either::Right(id.to_node(db.upcast()))),\n-        })\n+        Some(self.id.ast_id().either(\n+            |id| id.with_value(Either::Left(id.to_node(db.upcast()))),\n+            |id| id.with_value(Either::Right(id.to_node(db.upcast()))),\n+        ))\n     }\n }\n impl HasSource for Impl {"}, {"sha": "beeaaf117cc41e604e02955b2159aebfbc1530ef", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=fc21640a65b5caef8dbbc9e85e9616b843847fb4", "patch": "@@ -208,9 +208,10 @@ impl Attrs {\n                 AdtId::UnionId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             },\n             AttrDefId::TraitId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n-            AttrDefId::MacroDefId(it) => {\n-                it.ast_id().map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n-            }\n+            AttrDefId::MacroDefId(it) => it\n+                .ast_id()\n+                .left()\n+                .map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db)),\n             AttrDefId::ImplId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::ConstId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n             AttrDefId::StaticId(it) => attrs_from_item_tree(it.lookup(db).id, db),"}, {"sha": "0e0f7214a24d7de06f1cff91c45ff303e88a4d32", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=fc21640a65b5caef8dbbc9e85e9616b843847fb4", "patch": "@@ -145,7 +145,7 @@ fn make_hygiene_info(\n ) -> Option<HygieneInfo> {\n     let arg_tt = loc.kind.arg(db)?;\n \n-    let def_offset = loc.def.ast_id().and_then(|id| {\n+    let def_offset = loc.def.ast_id().left().and_then(|id| {\n         let def_tt = match id.to_node(db) {\n             ast::Macro::MacroRules(mac) => mac.token_tree()?.syntax().text_range().start(),\n             ast::Macro::MacroDef(_) => return None,"}, {"sha": "f49fd4fda1b2a21a90f3ce84c087f1d37ef00e6b", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc21640a65b5caef8dbbc9e85e9616b843847fb4/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=fc21640a65b5caef8dbbc9e85e9616b843847fb4", "patch": "@@ -15,6 +15,7 @@ pub mod proc_macro;\n pub mod quote;\n pub mod eager;\n \n+use either::Either;\n pub use mbe::{ExpandError, ExpandResult};\n \n use std::hash::Hash;\n@@ -143,7 +144,7 @@ impl HirFileId {\n \n                 let arg_tt = loc.kind.arg(db)?;\n \n-                let def = loc.def.ast_id().and_then(|id| {\n+                let def = loc.def.ast_id().left().and_then(|id| {\n                     let def_tt = match id.to_node(db) {\n                         ast::Macro::MacroRules(mac) => mac.token_tree()?,\n                         ast::Macro::MacroDef(_) => return None,\n@@ -239,15 +240,15 @@ impl MacroDefId {\n         db.intern_macro(MacroCallLoc { def: self, krate, kind })\n     }\n \n-    pub fn ast_id(&self) -> Option<AstId<ast::Macro>> {\n+    pub fn ast_id(&self) -> Either<AstId<ast::Macro>, AstId<ast::Fn>> {\n         let id = match &self.kind {\n             MacroDefKind::Declarative(id) => id,\n             MacroDefKind::BuiltIn(_, id) => id,\n             MacroDefKind::BuiltInDerive(_, id) => id,\n             MacroDefKind::BuiltInEager(_, id) => id,\n-            MacroDefKind::ProcMacro(..) => return None,\n+            MacroDefKind::ProcMacro(_, id) => return Either::Right(*id),\n         };\n-        Some(*id)\n+        Either::Left(*id)\n     }\n }\n "}]}