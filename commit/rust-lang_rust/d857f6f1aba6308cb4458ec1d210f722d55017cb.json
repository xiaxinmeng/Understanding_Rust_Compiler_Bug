{"sha": "d857f6f1aba6308cb4458ec1d210f722d55017cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NTdmNmYxYWJhNjMwOGNiNDQ1OGVjMWQyMTBmNzIyZDU1MDE3Y2I=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-24T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-27T11:08:53Z"}, "message": "compiletest: Add unit tests for EarlyProps", "tree": {"sha": "0f2ff64e94a65e9ed504927e3ce66ed7b2361d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2ff64e94a65e9ed504927e3ce66ed7b2361d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d857f6f1aba6308cb4458ec1d210f722d55017cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d857f6f1aba6308cb4458ec1d210f722d55017cb", "html_url": "https://github.com/rust-lang/rust/commit/d857f6f1aba6308cb4458ec1d210f722d55017cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d857f6f1aba6308cb4458ec1d210f722d55017cb/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6aac38131528384343e6724578a89bf8daf68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6aac38131528384343e6724578a89bf8daf68f", "html_url": "https://github.com/rust-lang/rust/commit/bb6aac38131528384343e6724578a89bf8daf68f"}], "stats": {"total": 156, "additions": 155, "deletions": 1}, "files": [{"sha": "b2d4ad382dde243fa8911bff5ce545a081b4c00d", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 155, "deletions": 1, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d857f6f1aba6308cb4458ec1d210f722d55017cb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d857f6f1aba6308cb4458ec1d210f722d55017cb/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=d857f6f1aba6308cb4458ec1d210f722d55017cb", "patch": "@@ -1,4 +1,7 @@\n-use super::*;\n+use std::path::Path;\n+\n+use crate::common::{Config, Debugger};\n+use crate::header::{parse_normalization_string, EarlyProps};\n \n #[test]\n fn test_parse_normalization_string() {\n@@ -25,3 +28,154 @@ fn test_parse_normalization_string() {\n     assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n     assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n }\n+\n+fn config() -> Config {\n+    let args = &[\n+        \"compiletest\",\n+        \"--mode=ui\",\n+        \"--compile-lib-path=\",\n+        \"--run-lib-path=\",\n+        \"--rustc-path=\",\n+        \"--lldb-python=\",\n+        \"--docck-python=\",\n+        \"--src-base=\",\n+        \"--build-base=\",\n+        \"--stage-id=stage2\",\n+        \"--cc=c\",\n+        \"--cxx=c++\",\n+        \"--cflags=\",\n+        \"--llvm-components=\",\n+        \"--llvm-cxxflags=\",\n+        \"--android-cross-path=\",\n+        \"--target=x86_64-unknown-linux-gnu\",\n+    ];\n+    let args = args.iter().map(ToString::to_string).collect();\n+    crate::parse_config(args)\n+}\n+\n+fn parse_rs(config: &Config, contents: &str) -> EarlyProps {\n+    let bytes = contents.as_bytes();\n+    EarlyProps::from_reader(config, Path::new(\"a.rs\"), bytes)\n+}\n+\n+fn parse_makefile(config: &Config, contents: &str) -> EarlyProps {\n+    let bytes = contents.as_bytes();\n+    EarlyProps::from_reader(config, Path::new(\"Makefile\"), bytes)\n+}\n+\n+#[test]\n+fn should_fail() {\n+    let config = config();\n+\n+    assert!(!parse_rs(&config, \"\").should_fail);\n+    assert!(parse_rs(&config, \"// should-fail\").should_fail);\n+}\n+\n+#[test]\n+fn revisions() {\n+    let config = config();\n+\n+    assert_eq!(parse_rs(&config, \"// revisions: a b c\").revisions, vec![\"a\", \"b\", \"c\"],);\n+    assert_eq!(\n+        parse_makefile(&config, \"# revisions: hello there\").revisions,\n+        vec![\"hello\", \"there\"],\n+    );\n+}\n+\n+#[test]\n+fn aux_build() {\n+    let config = config();\n+\n+    assert_eq!(\n+        parse_rs(\n+            &config,\n+            r\"\n+        // aux-build: a.rs\n+        // aux-build: b.rs\n+        \"\n+        )\n+        .aux,\n+        vec![\"a.rs\", \"b.rs\"],\n+    );\n+}\n+\n+#[test]\n+fn no_system_llvm() {\n+    let mut config = config();\n+\n+    config.system_llvm = false;\n+    assert!(!parse_rs(&config, \"// no-system-llvm\").ignore);\n+\n+    config.system_llvm = true;\n+    assert!(parse_rs(&config, \"// no-system-llvm\").ignore);\n+}\n+\n+#[test]\n+fn ignore_target() {\n+    let mut config = config();\n+    config.target = \"x86_64-unknown-linux-gnu\".to_owned();\n+\n+    assert!(parse_rs(&config, \"// ignore-x86_64-unknown-linux-gnu\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-x86_64\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-linux\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-gnu\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-64bit\").ignore);\n+\n+    assert!(!parse_rs(&config, \"// ignore-i686\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-windows\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-msvc\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-32bit\").ignore);\n+}\n+\n+#[test]\n+fn only_target() {\n+    let mut config = config();\n+    config.target = \"x86_64-pc-windows-gnu\".to_owned();\n+\n+    assert!(parse_rs(&config, \"// only-i686\").ignore);\n+    assert!(parse_rs(&config, \"// only-linux\").ignore);\n+    assert!(parse_rs(&config, \"// only-msvc\").ignore);\n+    assert!(parse_rs(&config, \"// only-32bit\").ignore);\n+\n+    assert!(!parse_rs(&config, \"// only-x86_64-pc-windows-gnu\").ignore);\n+    assert!(!parse_rs(&config, \"// only-x86_64\").ignore);\n+    assert!(!parse_rs(&config, \"// only-windows\").ignore);\n+    assert!(!parse_rs(&config, \"// only-gnu\").ignore);\n+    assert!(!parse_rs(&config, \"// only-64bit\").ignore);\n+}\n+\n+#[test]\n+fn stage() {\n+    let mut config = config();\n+    config.stage_id = \"stage1\".to_owned();\n+\n+    assert!(parse_rs(&config, \"// ignore-stage1\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-stage2\").ignore);\n+}\n+\n+#[test]\n+fn cross_compile() {\n+    let mut config = config();\n+    config.host = \"x86_64-apple-darwin\".to_owned();\n+    config.target = \"wasm32-unknown-unknown\".to_owned();\n+    assert!(parse_rs(&config, \"// ignore-cross-compile\").ignore);\n+\n+    config.target = config.host.clone();\n+    assert!(!parse_rs(&config, \"// ignore-cross-compile\").ignore);\n+}\n+\n+#[test]\n+fn debugger() {\n+    let mut config = config();\n+    config.debugger = None;\n+    assert!(!parse_rs(&config, \"// ignore-cdb\").ignore);\n+\n+    config.debugger = Some(Debugger::Cdb);\n+    assert!(parse_rs(&config, \"// ignore-cdb\").ignore);\n+\n+    config.debugger = Some(Debugger::Gdb);\n+    assert!(parse_rs(&config, \"// ignore-gdb\").ignore);\n+\n+    config.debugger = Some(Debugger::Lldb);\n+    assert!(parse_rs(&config, \"// ignore-lldb\").ignore);\n+}"}]}