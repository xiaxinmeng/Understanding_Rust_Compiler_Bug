{"sha": "3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNmNjZmU2NDc0Y2YxNWU3YzU5YzhiNmMwMWQ4YTFiMzYwNGJhMDI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-02T18:32:51Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-02T18:32:51Z"}, "message": "Merge #32\n\n32: G: type_parameter_list r=matklad a=matklad", "tree": {"sha": "9c0b788009666087bdaa4072f0a466ff7cc93caf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c0b788009666087bdaa4072f0a466ff7cc93caf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "html_url": "https://github.com/rust-lang/rust/commit/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "94caa9d3a2c645df5c0f2d332bc001831119484d", "url": "https://api.github.com/repos/rust-lang/rust/commits/94caa9d3a2c645df5c0f2d332bc001831119484d", "html_url": "https://github.com/rust-lang/rust/commit/94caa9d3a2c645df5c0f2d332bc001831119484d"}, {"sha": "7a02097b717c6f7055a92c52dca65c374b06f057", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a02097b717c6f7055a92c52dca65c374b06f057", "html_url": "https://github.com/rust-lang/rust/commit/7a02097b717c6f7055a92c52dca65c374b06f057"}], "stats": {"total": 254, "additions": 247, "deletions": 7}, "files": [{"sha": "8585fd2d4deb7885675cf24cf1a8ea7a76c1508f", "filename": "grammar.ron", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -17,6 +17,11 @@ Grammar(\n         \"super\",\n         \"in\",\n         \"where\",\n+        \"for\",\n+        \"loop\",\n+        \"while\",\n+        \"if\",\n+        \"match\"\n     ],\n     tokens: [\n         \"ERROR\","}, {"sha": "4d878373549a7c5d405fdf56b95d29e9604fd271", "filename": "src/parser/event_parser/grammar/items/mod.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -103,8 +103,32 @@ fn type_param_list(p: &mut Parser) {\n         assert!(p.at(IDENT));\n         let m = p.start();\n         p.bump();\n+        if p.eat(COLON) {\n+            loop {\n+                let has_paren = p.eat(L_PAREN);\n+                p.eat(QUESTION);\n+                if p.at(FOR_KW) {\n+                    //TODO\n+                }\n+                if p.at(LIFETIME) {\n+                    p.bump();\n+                } else if paths::is_path_start(p) {\n+                    paths::type_path(p);\n+                } else {\n+                    break;\n+                }\n+                if has_paren {\n+                    p.expect(R_PAREN);\n+                }\n+                if !p.eat(PLUS) {\n+                    break;\n+                }\n+            }\n+        }\n+        if p.at(EQ) {\n+            types::type_ref(p)\n+        }\n         m.complete(p, TYPE_PARAM);\n-        //TODO: bounds\n     }\n }\n "}, {"sha": "4c0d2c8b4e67db8673a8cec43d6358ce71630de9", "filename": "src/parser/event_parser/grammar/paths.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fpaths.rs?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -1,10 +1,18 @@\n use super::*;\n \n-pub(crate) fn is_path_start(p: &Parser) -> bool {\n+pub(super) fn is_path_start(p: &Parser) -> bool {\n     AnyOf(&[IDENT, SELF_KW, SUPER_KW, COLONCOLON]).is_ahead(p)\n }\n \n-pub(crate) fn use_path(p: &mut Parser) {\n+pub(super) fn use_path(p: &mut Parser) {\n+    path(p)\n+}\n+\n+pub(super) fn type_path(p: &mut Parser) {\n+    path(p)\n+}\n+\n+fn path(p: &mut Parser) {\n     if !is_path_start(p) {\n         return;\n     }"}, {"sha": "cd4c753a9b71d6e5ee6d372c5cda91e35fcf0d4b", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -23,6 +23,11 @@ pub enum SyntaxKind {\n     SUPER_KW,\n     IN_KW,\n     WHERE_KW,\n+    FOR_KW,\n+    LOOP_KW,\n+    WHILE_KW,\n+    IF_KW,\n+    MATCH_KW,\n     ERROR,\n     IDENT,\n     UNDERSCORE,\n@@ -125,6 +130,11 @@ impl SyntaxKind {\n             SUPER_KW => &SyntaxInfo { name: \"SUPER_KW\" },\n             IN_KW => &SyntaxInfo { name: \"IN_KW\" },\n             WHERE_KW => &SyntaxInfo { name: \"WHERE_KW\" },\n+            FOR_KW => &SyntaxInfo { name: \"FOR_KW\" },\n+            LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n+            WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n+            IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n+            MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n             ERROR => &SyntaxInfo { name: \"ERROR\" },\n             IDENT => &SyntaxInfo { name: \"IDENT\" },\n             UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -223,6 +233,11 @@ pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n         \"super\" => Some(SUPER_KW),\n         \"in\" => Some(IN_KW),\n         \"where\" => Some(WHERE_KW),\n+        \"for\" => Some(FOR_KW),\n+        \"loop\" => Some(LOOP_KW),\n+        \"while\" => Some(WHILE_KW),\n+        \"if\" => Some(IF_KW),\n+        \"match\" => Some(MATCH_KW),\n         _ => None,\n     }\n }"}, {"sha": "02ca1908919108f2bde947615ee4e4551ee4b6d7", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -1 +1 @@\n-fn use struct trait enum impl true false as extern crate mod pub self super in where\n+fn use struct trait enum impl true false as extern crate mod pub self super in where for loop while if match"}, {"sha": "964e3475a3a03be883ae78d4a3e67164504e5257", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -31,4 +31,14 @@ WHITESPACE 1 \" \"\n IN_KW 2 \"in\"\n WHITESPACE 1 \" \"\n WHERE_KW 5 \"where\"\n+WHITESPACE 1 \" \"\n+FOR_KW 3 \"for\"\n+WHITESPACE 1 \" \"\n+LOOP_KW 4 \"loop\"\n+WHITESPACE 1 \" \"\n+WHILE_KW 5 \"while\"\n+WHITESPACE 1 \" \"\n+IF_KW 2 \"if\"\n+WHITESPACE 1 \" \"\n+MATCH_KW 5 \"match\"\n WHITESPACE 1 \"\\n\""}, {"sha": "c33113c6d7e0ddfeff9e6e9771347a3a41270b6e", "filename": "tests/data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -1,11 +1,11 @@\n FILE@[0; 21)\n   ERROR@[0; 3)\n   err: `expected item`\n-    IDENT@[0; 2) \"if\"\n+    IF_KW@[0; 2)\n     WHITESPACE@[2; 3)\n   ERROR@[3; 10)\n   err: `expected item`\n-    IDENT@[3; 8) \"match\"\n+    MATCH_KW@[3; 8)\n     WHITESPACE@[8; 10)\n   STRUCT_ITEM@[10; 21)\n     STRUCT_KW@[10; 16)"}, {"sha": "c6386fd73af49ca5f014ac4a0fbb46f597700506", "filename": "tests/data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -24,7 +24,7 @@ FILE@[0; 95)\n   err: `expected item`\n     L_CURLY@[20; 21)\n     WHITESPACE@[21; 26)\n-    IDENT@[26; 28) \"if\"\n+    IF_KW@[26; 28)\n     WHITESPACE@[28; 29)\n     TRUE_KW@[29; 33)\n     WHITESPACE@[33; 34)"}, {"sha": "a1b9f00a477347ca70655afd8f8f3269aeba2609", "filename": "tests/data/parser/ok/0020_type_param_bounds.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Fok%2F0020_type_param_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Fok%2F0020_type_param_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0020_type_param_bounds.rs?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -0,0 +1,9 @@\n+struct A<T>;\n+struct B<T:>;\n+struct C<T: 'a>;\n+struct D<T: 'a + >;\n+struct E<T: 'a + 'd >;\n+struct F<T: 'a + 'd + Clone>;\n+struct G<T: Clone + Copy>;\n+struct H<T: ::Foo + self::Bar + 'a>;\n+struct I<T:, U:,>;"}, {"sha": "6f65d150acf0995e5e1148730790602814e24641", "filename": "tests/data/parser/ok/0020_type_param_bounds.txt", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Fok%2F0020_type_param_bounds.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02/tests%2Fdata%2Fparser%2Fok%2F0020_type_param_bounds.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0020_type_param_bounds.txt?ref=3c6ccfe6474cf15e7c59c8b6c01d8a1b3604ba02", "patch": "@@ -0,0 +1,169 @@\n+FILE@[0; 200)\n+  STRUCT_ITEM@[0; 13)\n+    STRUCT_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    IDENT@[7; 8) \"A\"\n+    TYPE_PARAM_LIST@[8; 11)\n+      L_ANGLE@[8; 9)\n+      TYPE_PARAM@[9; 10)\n+        IDENT@[9; 10) \"T\"\n+      R_ANGLE@[10; 11)\n+    SEMI@[11; 12)\n+    WHITESPACE@[12; 13)\n+  STRUCT_ITEM@[13; 27)\n+    STRUCT_KW@[13; 19)\n+    WHITESPACE@[19; 20)\n+    IDENT@[20; 21) \"B\"\n+    TYPE_PARAM_LIST@[21; 25)\n+      L_ANGLE@[21; 22)\n+      TYPE_PARAM@[22; 24)\n+        IDENT@[22; 23) \"T\"\n+        COLON@[23; 24)\n+      R_ANGLE@[24; 25)\n+    SEMI@[25; 26)\n+    WHITESPACE@[26; 27)\n+  STRUCT_ITEM@[27; 44)\n+    STRUCT_KW@[27; 33)\n+    WHITESPACE@[33; 34)\n+    IDENT@[34; 35) \"C\"\n+    TYPE_PARAM_LIST@[35; 42)\n+      L_ANGLE@[35; 36)\n+      TYPE_PARAM@[36; 41)\n+        IDENT@[36; 37) \"T\"\n+        COLON@[37; 38)\n+        WHITESPACE@[38; 39)\n+        LIFETIME@[39; 41) \"'a\"\n+      R_ANGLE@[41; 42)\n+    SEMI@[42; 43)\n+    WHITESPACE@[43; 44)\n+  STRUCT_ITEM@[44; 64)\n+    STRUCT_KW@[44; 50)\n+    WHITESPACE@[50; 51)\n+    IDENT@[51; 52) \"D\"\n+    TYPE_PARAM_LIST@[52; 62)\n+      L_ANGLE@[52; 53)\n+      TYPE_PARAM@[53; 61)\n+        IDENT@[53; 54) \"T\"\n+        COLON@[54; 55)\n+        WHITESPACE@[55; 56)\n+        LIFETIME@[56; 58) \"'a\"\n+        WHITESPACE@[58; 59)\n+        PLUS@[59; 60)\n+        WHITESPACE@[60; 61)\n+      R_ANGLE@[61; 62)\n+    SEMI@[62; 63)\n+    WHITESPACE@[63; 64)\n+  STRUCT_ITEM@[64; 87)\n+    STRUCT_KW@[64; 70)\n+    WHITESPACE@[70; 71)\n+    IDENT@[71; 72) \"E\"\n+    TYPE_PARAM_LIST@[72; 85)\n+      L_ANGLE@[72; 73)\n+      TYPE_PARAM@[73; 84)\n+        IDENT@[73; 74) \"T\"\n+        COLON@[74; 75)\n+        WHITESPACE@[75; 76)\n+        LIFETIME@[76; 78) \"'a\"\n+        WHITESPACE@[78; 79)\n+        PLUS@[79; 80)\n+        WHITESPACE@[80; 81)\n+        LIFETIME@[81; 83) \"'d\"\n+        WHITESPACE@[83; 84)\n+      R_ANGLE@[84; 85)\n+    SEMI@[85; 86)\n+    WHITESPACE@[86; 87)\n+  STRUCT_ITEM@[87; 117)\n+    STRUCT_KW@[87; 93)\n+    WHITESPACE@[93; 94)\n+    IDENT@[94; 95) \"F\"\n+    TYPE_PARAM_LIST@[95; 115)\n+      L_ANGLE@[95; 96)\n+      TYPE_PARAM@[96; 114)\n+        IDENT@[96; 97) \"T\"\n+        COLON@[97; 98)\n+        WHITESPACE@[98; 99)\n+        LIFETIME@[99; 101) \"'a\"\n+        WHITESPACE@[101; 102)\n+        PLUS@[102; 103)\n+        WHITESPACE@[103; 104)\n+        LIFETIME@[104; 106) \"'d\"\n+        WHITESPACE@[106; 107)\n+        PLUS@[107; 108)\n+        PATH@[108; 114)\n+          PATH_SEGMENT@[108; 114)\n+            WHITESPACE@[108; 109)\n+            IDENT@[109; 114) \"Clone\"\n+      R_ANGLE@[114; 115)\n+    SEMI@[115; 116)\n+    WHITESPACE@[116; 117)\n+  STRUCT_ITEM@[117; 144)\n+    STRUCT_KW@[117; 123)\n+    WHITESPACE@[123; 124)\n+    IDENT@[124; 125) \"G\"\n+    TYPE_PARAM_LIST@[125; 142)\n+      L_ANGLE@[125; 126)\n+      TYPE_PARAM@[126; 141)\n+        IDENT@[126; 127) \"T\"\n+        COLON@[127; 128)\n+        PATH@[128; 135)\n+          PATH_SEGMENT@[128; 135)\n+            WHITESPACE@[128; 129)\n+            IDENT@[129; 134) \"Clone\"\n+            WHITESPACE@[134; 135)\n+        PLUS@[135; 136)\n+        PATH@[136; 141)\n+          PATH_SEGMENT@[136; 141)\n+            WHITESPACE@[136; 137)\n+            IDENT@[137; 141) \"Copy\"\n+      R_ANGLE@[141; 142)\n+    SEMI@[142; 143)\n+    WHITESPACE@[143; 144)\n+  STRUCT_ITEM@[144; 181)\n+    STRUCT_KW@[144; 150)\n+    WHITESPACE@[150; 151)\n+    IDENT@[151; 152) \"H\"\n+    TYPE_PARAM_LIST@[152; 179)\n+      L_ANGLE@[152; 153)\n+      TYPE_PARAM@[153; 178)\n+        IDENT@[153; 154) \"T\"\n+        COLON@[154; 155)\n+        PATH@[155; 162)\n+          PATH_SEGMENT@[155; 162)\n+            WHITESPACE@[155; 156)\n+            COLONCOLON@[156; 158)\n+            IDENT@[158; 161) \"Foo\"\n+            WHITESPACE@[161; 162)\n+        PLUS@[162; 163)\n+        PATH@[163; 174)\n+          PATH@[163; 168)\n+            PATH_SEGMENT@[163; 168)\n+              WHITESPACE@[163; 164)\n+              SELF_KW@[164; 168)\n+          COLONCOLON@[168; 170)\n+          PATH_SEGMENT@[170; 174)\n+            IDENT@[170; 173) \"Bar\"\n+            WHITESPACE@[173; 174)\n+        PLUS@[174; 175)\n+        WHITESPACE@[175; 176)\n+        LIFETIME@[176; 178) \"'a\"\n+      R_ANGLE@[178; 179)\n+    SEMI@[179; 180)\n+    WHITESPACE@[180; 181)\n+  STRUCT_ITEM@[181; 200)\n+    STRUCT_KW@[181; 187)\n+    WHITESPACE@[187; 188)\n+    IDENT@[188; 189) \"I\"\n+    TYPE_PARAM_LIST@[189; 198)\n+      L_ANGLE@[189; 190)\n+      TYPE_PARAM@[190; 192)\n+        IDENT@[190; 191) \"T\"\n+        COLON@[191; 192)\n+      COMMA@[192; 193)\n+      TYPE_PARAM@[193; 196)\n+        WHITESPACE@[193; 194)\n+        IDENT@[194; 195) \"U\"\n+        COLON@[195; 196)\n+      COMMA@[196; 197)\n+      R_ANGLE@[197; 198)\n+    SEMI@[198; 199)\n+    WHITESPACE@[199; 200)"}]}