{"sha": "dd5045ed630b7577296087f09f559bb9c08f68e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNTA0NWVkNjMwYjc1NzcyOTYwODdmMDlmNTU5YmI5YzA4ZjY4ZTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-23T15:48:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-23T15:48:01Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: gnzlbg <gnzlbg@users.noreply.github.com>", "tree": {"sha": "7c1b6095836d0a1dd273104306bf0731744c6b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1b6095836d0a1dd273104306bf0731744c6b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd5045ed630b7577296087f09f559bb9c08f68e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdNywxCRBK7hj4Ov3rIwAAdHIIAHIUxqJPJwy87RN9j+pnxPbk\nQT5W5Un96yZmYnJKfuFaHJ11TEjY+eFzLzpWN97Ku1FV5GnX/hIMvHDgjLlrqaRr\ncF48PKkU5wu2DtxphhT9D4JCxxVk5cHxc+A/Ty6dmAkikn7E2ApfdkCqRA8G9by0\n5svGnGrB1uz34b9empI7s+LAt6TjESgyE0x6eVtcswRb+Ipo6dFHxFlQ9JMAyxNU\nK6xdBDYDc/OlV7L2CyiBwWv+QNwWQ/wLYcn6zgxUQdFtcfH/jtSpq1YUpbiv8VMQ\nkwC73qGN4ASTv3ANXs0L7mn9iy8thIy1pRRsdg2PS6/P2AbuftY4802oQSg8Ac8=\n=g6Be\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c1b6095836d0a1dd273104306bf0731744c6b0b\nparent 91967816c3851b4b796ce774bde49a9f47681bca\nauthor Ralf Jung <post@ralfj.de> 1563896881 +0200\ncommitter GitHub <noreply@github.com> 1563896881 +0200\n\nApply suggestions from code review\n\nCo-Authored-By: gnzlbg <gnzlbg@users.noreply.github.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5045ed630b7577296087f09f559bb9c08f68e2", "html_url": "https://github.com/rust-lang/rust/commit/dd5045ed630b7577296087f09f559bb9c08f68e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd5045ed630b7577296087f09f559bb9c08f68e2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91967816c3851b4b796ce774bde49a9f47681bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/91967816c3851b4b796ce774bde49a9f47681bca", "html_url": "https://github.com/rust-lang/rust/commit/91967816c3851b4b796ce774bde49a9f47681bca"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "b79cfa3eead233591fce332ad6e4ab319e963223", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd5045ed630b7577296087f09f559bb9c08f68e2/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5045ed630b7577296087f09f559bb9c08f68e2/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=dd5045ed630b7577296087f09f559bb9c08f68e2", "patch": "@@ -363,12 +363,12 @@ mod prim_unit { }\n /// *[See also the `std::ptr` module](ptr/index.html).*\n ///\n /// Working with raw pointers in Rust is uncommon, typically limited to a few patterns.\n-/// Raw pointers can be unaligned or [`null`] when unused. However, when a raw pointer is\n+/// Raw pointers can be unaligned or [`null`]. However, when a raw pointer is\n /// dereferenced (using the `*` operator), it must be non-null and aligned.\n ///\n /// Storing through a raw pointer using `*ptr = data` calls `drop` on the old value, so\n /// [`write`] must be used if the type has drop glue and memory is not already\n-/// initialized---otherwise `drop` would be called on the uninitialized memory.\n+/// initialized - otherwise `drop` would be called on the uninitialized memory.\n ///\n /// Use the [`null`] and [`null_mut`] functions to create null pointers, and the\n /// [`is_null`] method of the `*const T` and `*mut T` types to check for null.\n@@ -898,7 +898,10 @@ mod prim_usize { }\n /// operators on a value, or by using a `ref` or `ref mut` pattern.\n ///\n /// For those familiar with pointers, a reference is just a pointer that is assumed to be\n-/// aligned, not null, and pointing to valid (initialized) memory.\n+/// aligned, not null, and pointing to memory containing a valid value of `T` - for example,\n+/// `&bool` can only point to an allocation containing the integer values `1` (`true`) or `0`\n+/// (`false`), but the behavior of creating a `&bool` that points to an allocation containing\n+/// the value `3` is undefined.\n /// In fact, `Option<&T>` has the same memory representation as a\n /// nullable but aligned pointer, and can be passed across FFI boundaries as such.\n ///"}]}