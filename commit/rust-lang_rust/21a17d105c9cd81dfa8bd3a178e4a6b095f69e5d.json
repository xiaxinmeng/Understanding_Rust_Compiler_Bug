{"sha": "21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYTE3ZDEwNWM5Y2Q4MWRmYThiZDNhMTc4ZTRhNmIwOTVmNjllNWQ=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-23T17:59:18Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:20Z"}, "message": "support in-place iteration for most adapters\n\n`Take` is not included since users probably call it with small constants\nand it doesn't make sense to hold onto huge allocations in that case", "tree": {"sha": "75540290319581550abbb71fc47c778fd1b5e0eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75540290319581550abbb71fc47c778fd1b5e0eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d", "html_url": "https://github.com/rust-lang/rust/commit/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "085eb20a61164067f5c71ec64dc23100006f91c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/085eb20a61164067f5c71ec64dc23100006f91c9", "html_url": "https://github.com/rust-lang/rust/commit/085eb20a61164067f5c71ec64dc23100006f91c9"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "e2613be4a46a10cac1fa9dcad29858ee0dd30f6b", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d", "patch": "@@ -3,6 +3,8 @@ use crate::iter::adapters::zip::try_get_unchecked;\n use crate::iter::TrustedRandomAccess;\n use crate::iter::{DoubleEndedIterator, ExactSizeIterator, FusedIterator, Iterator};\n use crate::ops::Try;\n+use crate::iter::adapters::SourceIter;\n+use super::InPlaceIterable;\n \n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n@@ -517,3 +519,24 @@ where\n         unchecked!(self).is_empty()\n     }\n }\n+\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I: FusedIterator> SourceIter for Fuse<I>\n+    where\n+        I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        match self.iter {\n+            Some(ref mut iter) => SourceIter::as_inner(iter),\n+            // SAFETY: the specialized iterator never sets `None`\n+            None => unsafe { intrinsics::unreachable() },\n+        }\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable> InPlaceIterable for Fuse<I> {}"}, {"sha": "a8414bf9137648262c284d3c8de494d71527d6da", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=21a17d105c9cd81dfa8bd3a178e4a6b095f69e5d", "patch": "@@ -1152,6 +1152,22 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator, P> FusedIterator for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P> where\n+    P: FnMut(&I::Item) -> bool,\n+    I: SourceIter<Source = S>\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, P> InPlaceIterable for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n+\n /// An iterator that uses `f` to both filter and map elements from `iter`.\n ///\n /// This `struct` is created by the [`filter_map`] method on [`Iterator`]. See its\n@@ -1278,6 +1294,23 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F> where F: FnMut(I::Item) -> Option<B> {}\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F> where\n+    F: FnMut(I::Item) -> Option<B>,\n+    I: SourceIter<Source = S>\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for FilterMap<I, F> where F: FnMut(I::Item) -> Option<B> {}\n+\n+\n /// An iterator that yields the current count and the element during iteration.\n ///\n /// This `struct` is created by the [`enumerate`] method on [`Iterator`]. See its\n@@ -1910,6 +1943,22 @@ where\n {\n }\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P> where\n+    P: FnMut(&I::Item) -> bool,\n+    I: SourceIter<Source = S>\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, F> InPlaceIterable for SkipWhile<I, F> where F: FnMut(&I::Item) -> bool {}\n+\n /// An iterator that only accepts elements while `predicate` returns `true`.\n ///\n /// This `struct` is created by the [`take_while`] method on [`Iterator`]. See its\n@@ -2101,6 +2150,23 @@ where\n     }\n }\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P> where\n+    P: FnMut(&I::Item) -> bool,\n+    I: SourceIter<Source = S>\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, F> InPlaceIterable for TakeWhile<I, F> where F: FnMut(&I::Item) -> bool {}\n+\n+\n /// An iterator that skips over `n` elements of `iter`.\n ///\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its\n@@ -2410,6 +2476,19 @@ where\n     }\n }\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I> where I: SourceIter<Source = S> {\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable> InPlaceIterable for Take<I> {}\n+\n #[stable(feature = \"double_ended_take_iterator\", since = \"1.38.0\")]\n impl<I> DoubleEndedIterator for Take<I>\n where\n@@ -2574,6 +2653,24 @@ where\n     }\n }\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n+    where I: SourceIter<Source = S>,\n+          F: FnMut(&mut St, I::Item) -> Option<B>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<St, F, B, I: InPlaceIterable> InPlaceIterable for Scan<I, St, F>\n+    where F: FnMut(&mut St, I::Item) -> Option<B>,\n+{}\n+\n /// An iterator that calls a function with a reference to each element before\n /// yielding it.\n ///\n@@ -2720,6 +2817,22 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator, F> FusedIterator for Inspect<I, F> where F: FnMut(&I::Item) {}\n \n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F> where\n+    F: FnMut(&I::Item),\n+    I: SourceIter<Source = S>\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    fn as_inner(&mut self) -> &mut S {\n+        SourceIter::as_inner(&mut self.iter)\n+    }\n+}\n+\n+#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, F> InPlaceIterable for Inspect<I, F> where F: FnMut(&I::Item)  {}\n+\n /// An iterator adapter that produces output as long as the underlying\n /// iterator produces `Result::Ok` values.\n ///"}]}