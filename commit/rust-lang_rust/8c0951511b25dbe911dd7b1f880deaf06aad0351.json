{"sha": "8c0951511b25dbe911dd7b1f880deaf06aad0351", "node_id": "C_kwDOAAsO6NoAKDhjMDk1MTUxMWIyNWRiZTkxMWRkN2IxZjg4MGRlYWYwNmFhZDAzNTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-29T17:58:09Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-29T17:58:09Z"}, "message": "rename `{max=>largest}_max_leb128_len`", "tree": {"sha": "9ffa79b880017bc825f456597bdd763df60ad8e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ffa79b880017bc825f456597bdd763df60ad8e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c0951511b25dbe911dd7b1f880deaf06aad0351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0951511b25dbe911dd7b1f880deaf06aad0351", "html_url": "https://github.com/rust-lang/rust/commit/8c0951511b25dbe911dd7b1f880deaf06aad0351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c0951511b25dbe911dd7b1f880deaf06aad0351/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "050cee48f83b39a0f532e4905d02f07716bf2ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/050cee48f83b39a0f532e4905d02f07716bf2ee3", "html_url": "https://github.com/rust-lang/rust/commit/050cee48f83b39a0f532e4905d02f07716bf2ee3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "7dad9aa01fafdaac8525b54a8d7724b70b4c4f06", "filename": "compiler/rustc_serialize/src/leb128.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c0951511b25dbe911dd7b1f880deaf06aad0351/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0951511b25dbe911dd7b1f880deaf06aad0351/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs?ref=8c0951511b25dbe911dd7b1f880deaf06aad0351", "patch": "@@ -1,11 +1,11 @@\n-/// Returns the longest LEB128 encoding for `T`, assuming `T` is an integer type\n+/// Returns the length of the longest LEB128 encoding for `T`, assuming `T` is an integer type\n pub const fn max_leb128_len<T>() -> usize {\n     // The longest LEB128 encoding for an integer uses 7 bits per byte.\n     (std::mem::size_of::<T>() * 8 + 6) / 7\n }\n \n-/// Returns the longest LEB128 encoding of all supported integer types.\n-pub const fn max_max_leb128_len() -> usize {\n+/// Returns the length of the longest LEB128 encoding of all supported integer types.\n+pub const fn largest_max_leb128_len() -> usize {\n     max_leb128_len::<u128>()\n }\n "}, {"sha": "0afeb86fceb241611867c67ee4820f4e810507ac", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c0951511b25dbe911dd7b1f880deaf06aad0351/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0951511b25dbe911dd7b1f880deaf06aad0351/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=8c0951511b25dbe911dd7b1f880deaf06aad0351", "patch": "@@ -1,4 +1,4 @@\n-use crate::leb128::{self, max_max_leb128_len};\n+use crate::leb128::{self, largest_max_leb128_len};\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::convert::TryInto;\n use std::fs::File;\n@@ -186,12 +186,12 @@ impl FileEncoder {\n     pub fn with_capacity<P: AsRef<Path>>(path: P, capacity: usize) -> io::Result<Self> {\n         // Require capacity at least as large as the largest LEB128 encoding\n         // here, so that we don't have to check or handle this on every write.\n-        assert!(capacity >= max_max_leb128_len());\n+        assert!(capacity >= largest_max_leb128_len());\n \n         // Require capacity small enough such that some capacity checks can be\n         // done using guaranteed non-overflowing add rather than sub, which\n         // shaves an instruction off those code paths (on x86 at least).\n-        assert!(capacity <= usize::MAX - max_max_leb128_len());\n+        assert!(capacity <= usize::MAX - largest_max_leb128_len());\n \n         // Create the file for reading and writing, because some encoders do both\n         // (e.g. the metadata encoder when -Zmeta-stats is enabled)"}]}