{"sha": "a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "node_id": "C_kwDOAAsO6NoAKGE2M2Y1ZGNlMjdjZDVhMzE1MDQ2ZWNlYmJhZmE4ZWUyZmVmMTBlMTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-22T16:28:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-22T17:02:47Z"}, "message": "Remove confusing 'while checking' note from opaque future type mismatches", "tree": {"sha": "cd63dcc0d472acf906ae4db6321f58c597ca5d22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd63dcc0d472acf906ae4db6321f58c597ca5d22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "html_url": "https://github.com/rust-lang/rust/commit/a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6809072304b147f9e98d55c87f42c0f3959679", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6809072304b147f9e98d55c87f42c0f3959679", "html_url": "https://github.com/rust-lang/rust/commit/8e6809072304b147f9e98d55c87f42c0f3959679"}], "stats": {"total": 271, "additions": 35, "deletions": 236}, "files": [{"sha": "1e84940b01949d94890bf1d92231971557732b66", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 46, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -60,7 +60,7 @@ use crate::traits::{\n \n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -1468,51 +1468,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 for (key, values) in types.iter() {\n                     let count = values.len();\n                     let kind = key.descr();\n-                    let mut returned_async_output_error = false;\n                     for &sp in values {\n-                        if sp.is_desugaring(DesugaringKind::Async) && !returned_async_output_error {\n-                            if [sp] != err.span.primary_spans() {\n-                                let mut span: MultiSpan = sp.into();\n-                                span.push_span_label(\n-                                    sp,\n-                                    format!(\n-                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n-                                        if count > 1 { \"one of the \" } else { \"\" },\n-                                        target,\n-                                        kind,\n-                                        pluralize!(count),\n-                                    ),\n-                                );\n-                                err.span_note(\n-                                    span,\n-                                    \"while checking the return type of the `async fn`\",\n-                                );\n-                            } else {\n-                                err.span_label(\n-                                    sp,\n-                                    format!(\n-                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n-                                        if count > 1 { \"one of the \" } else { \"\" },\n-                                        target,\n-                                        kind,\n-                                        pluralize!(count),\n-                                    ),\n-                                );\n-                                err.note(\"while checking the return type of the `async fn`\");\n-                            }\n-                            returned_async_output_error = true;\n-                        } else {\n-                            err.span_label(\n-                                sp,\n-                                format!(\n-                                    \"{}{} {}{}\",\n-                                    if count == 1 { \"the \" } else { \"one of the \" },\n-                                    target,\n-                                    kind,\n-                                    pluralize!(count),\n-                                ),\n-                            );\n-                        }\n+                        err.span_label(\n+                            sp,\n+                            format!(\n+                                \"{}{} {}{}\",\n+                                if count == 1 { \"the \" } else { \"one of the \" },\n+                                target,\n+                                kind,\n+                                pluralize!(count),\n+                            ),\n+                        );\n                     }\n                 }\n             }\n@@ -1535,7 +1501,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     //    |\n                     //    = note: expected unit type `()`\n                     //                 found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n-                    if !self.ignore_span.overlaps(span) {\n+                    //\n+                    // Also ignore opaque `Future`s that come from async fns.\n+                    if !self.ignore_span.overlaps(span)\n+                        && !span.is_desugaring(DesugaringKind::Async)\n+                    {\n                         self.types.entry(kind).or_default().insert(span);\n                     }\n                 }"}, {"sha": "8e2d42c8f138cff4bfb013fb22da8d3e96d44a58", "filename": "tests/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -6,11 +6,6 @@ LL |         take_u32(x)\n    |         |\n    |         arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/dont-suggest-missing-await.rs:7:24\n-   |\n-LL | async fn make_u32() -> u32 {\n-   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n note: function defined here"}, {"sha": "9fdb1ce47d7bae8db1a1a042e9dd5e378140f399", "filename": "tests/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -21,16 +21,6 @@ LL |     fun(one(), two());\n    |     |\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/generator-desc.rs:5:16\n-   |\n-LL | async fn one() {}\n-   |                ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/generator-desc.rs:6:16\n-   |\n-LL | async fn two() {}\n-   |                ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n               found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s"}, {"sha": "0cfb774756e6611c3ae7eb7fe82850081f8a56f1", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -54,9 +54,6 @@ async fn struct_() -> Struct {\n }\n \n async fn tuple() -> Tuple {\n-    //~^ NOTE checked the `Output` of this `async fn`, expected opaque type\n-    //~| NOTE while checking the return type of the `async fn`\n-    //~| NOTE in this expansion of desugaring of `async` block or function\n     Tuple(1i32)\n }\n "}, {"sha": "28a1a14aa8b040ec7090dcff51067612fe65f139", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -11,7 +11,7 @@ LL |     foo().await?;\n    |          ++++++\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/issue-61076.rs:65:5\n+  --> $DIR/issue-61076.rs:62:5\n    |\n LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n@@ -23,7 +23,7 @@ LL |     t.await?;\n    |      ++++++\n \n error[E0609]: no field `0` on type `impl Future<Output = Tuple>`\n-  --> $DIR/issue-61076.rs:74:26\n+  --> $DIR/issue-61076.rs:71:26\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -34,7 +34,7 @@ LL |     let _: i32 = tuple().await.0;\n    |                         ++++++\n \n error[E0609]: no field `a` on type `impl Future<Output = Struct>`\n-  --> $DIR/issue-61076.rs:78:28\n+  --> $DIR/issue-61076.rs:75:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -45,7 +45,7 @@ LL |     let _: i32 = struct_().await.a;\n    |                           ++++++\n \n error[E0599]: no method named `method` found for opaque type `impl Future<Output = Struct>` in the current scope\n-  --> $DIR/issue-61076.rs:82:15\n+  --> $DIR/issue-61076.rs:79:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future<Output = Struct>`\n@@ -56,19 +56,14 @@ LL |     struct_().await.method();\n    |               ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:91:9\n+  --> $DIR/issue-61076.rs:88:9\n    |\n LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-61076.rs:56:21\n-   |\n-LL | async fn tuple() -> Tuple {\n-   |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = Tuple>`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`"}, {"sha": "63156140b409ca2b8cbcacae7436626242c64e86", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -4,11 +4,6 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn\n LL |         StructAsync { callback }.await;\n    |                       ^^^^^^^^ expected struct `Pin`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98634.rs:24:21\n-   |\n-LL | async fn callback() {}\n-   |                     ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n@@ -23,11 +18,6 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn\n LL |         StructAsync { callback }.await;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98634.rs:24:21\n-   |\n-LL | async fn callback() {}\n-   |                     ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`\n@@ -42,11 +32,6 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn\n LL |         StructAsync { callback }.await;\n    |                                 ^^^^^^ expected struct `Pin`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98634.rs:24:21\n-   |\n-LL | async fn callback() {}\n-   |                     ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n note: required by a bound in `StructAsync`"}, {"sha": "2ec242c04a58f4908320efb0aca8dab75cc2f0e7", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -8,11 +8,6 @@ LL |     std::mem::size_of_val(foo());\n    |     |                     help: consider borrowing here: `&foo()`\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-102206.rs:3:16\n-   |\n-LL | async fn foo() {}\n-   |                ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected reference `&_`\n             found opaque type `impl Future<Output = ()>`\n note: function defined here"}, {"sha": "e47325cb4aeaec6fcf5f3291a4d93fa0c30c8b74", "filename": "tests/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -6,11 +6,6 @@ LL |         take_u32(x)\n    |         |\n    |         arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await-closure.rs:8:24\n-   |\n-LL | async fn make_u32() -> u32 {\n-   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n note: function defined here"}, {"sha": "dfafc810997ecbfc1e50cb60cb73ec18de3614f2", "filename": "tests/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -6,11 +6,6 @@ LL |     take_u32(x)\n    |     |\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:5:24\n-   |\n-LL | async fn make_u32() -> u32 {\n-   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future<Output = u32>`\n note: function defined here\n@@ -29,11 +24,6 @@ error[E0308]: mismatched types\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -60,11 +50,6 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n@@ -87,11 +72,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n@@ -108,11 +88,6 @@ LL |     let _x = match dummy() {\n LL |         () => {}\n    |         ^^ expected opaque type, found `()`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:18:18\n-   |\n-LL | async fn dummy() {}\n-   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n@@ -129,11 +104,6 @@ LL |     match dummy_result() {\n LL |         Ok(_) => {}\n    |         ^^^^^ expected opaque type, found enum `Result`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:57:28\n-   |\n-LL | async fn dummy_result() -> Result<(), ()> {\n-   |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`\n help: consider `await`ing on the `Future`\n@@ -150,11 +120,6 @@ LL |     match dummy_result() {\n LL |         Err(_) => {}\n    |         ^^^^^^ expected opaque type, found enum `Result`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/suggest-missing-await.rs:57:28\n-   |\n-LL | async fn dummy_result() -> Result<(), ()> {\n-   |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future<Output = Result<(), ()>>`\n                      found enum `Result<_, _>`\n help: consider `await`ing on the `Future`"}, {"sha": "3ec62020e6c89c41077a681f599a9856cc2cb05a", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -24,16 +24,6 @@ LL |     async fn owo(_: u8) {}\n    |                     expected `()`, found `u8`\n    |                     help: change the parameter type to match the trait: `()`\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/method-signature-matches.rs:20:25\n-   |\n-LL |     async fn owo(_: u8) {}\n-   |                         ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/method-signature-matches.rs:20:25\n-   |\n-LL |     async fn owo(_: u8) {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n note: type in trait\n   --> $DIR/method-signature-matches.rs:16:21\n    |"}, {"sha": "c191ff57152fdaca4f3c78a9fc7569acb0a92f5b", "filename": "tests/ui/impl-trait/issue-102605.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -6,11 +6,6 @@ LL |     convert_result(foo())\n    |     |\n    |     arguments to this function are incorrect\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-102605.rs:3:19\n-   |\n-LL | async fn foo() -> Result<(), String> {\n-   |                   ^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected enum `Result<(), _>`\n            found opaque type `impl Future<Output = Result<(), String>>`\n note: function defined here"}, {"sha": "db2a979cc50afd78e30e84e10cd7271f2f1115a3", "filename": "tests/ui/impl-trait/issue-99914.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -4,11 +4,6 @@ error[E0308]: mismatched types\n LL |     t.and_then(|t| -> _ { bar(t) });\n    |                           ^^^^^^ expected enum `Result`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-99914.rs:13:23\n-   |\n-LL | async fn bar(t: Okay) {}\n-   |                       ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected enum `Result<_, Error>`\n            found opaque type `impl Future<Output = ()>`\n help: try wrapping the expression in `Ok`"}, {"sha": "7be4312bfbacbdcf0ff2bf01bb10af78c303eb47", "filename": "tests/ui/suggestions/if-then-neeing-semi.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -15,18 +15,9 @@ fn extra_semicolon() {\n     };\n }\n \n-async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n+async fn async_dummy() {}\n+\n+async fn async_dummy2() {}\n \n async fn async_extra_semicolon_same() {\n     let _ = if true {"}, {"sha": "567deb405fccd98332c24019c511ffc642187a62", "filename": "tests/ui/suggestions/if-then-neeing-semi.stderr", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/if-then-neeing-semi.rs:37:9\n+  --> $DIR/if-then-neeing-semi.rs:28:9\n    |\n LL |       let _ = if true {\n    |  _____________-\n@@ -15,11 +15,6 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:18:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -33,7 +28,7 @@ LL +         async_dummy()\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/if-then-neeing-semi.rs:50:9\n+  --> $DIR/if-then-neeing-semi.rs:41:9\n    |\n LL |       let _ = if true {\n    |  _____________-\n@@ -49,11 +44,6 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:24:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -69,7 +59,7 @@ LL ~         Box::new(async_dummy2())\n    |\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/if-then-neeing-semi.rs:63:9\n+  --> $DIR/if-then-neeing-semi.rs:54:9\n    |\n LL |       let _ = if true {\n    |  _____________-\n@@ -85,18 +75,8 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:18:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/if-then-neeing-semi.rs:24:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:18:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:24:25>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:20:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "4af7cc9f8ec800c7a2b8b6fb50648acecf633df9", "filename": "tests/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -14,11 +14,6 @@ LL | |         _ => cx.answer_str(\"hi\"),\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/auxiliary/issue-81839.rs:6:49\n-   |\n-LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n-   |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = Test>`\n "}, {"sha": "3f863cb104e0bfa48d99d5c63e4e49a60fdac892", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -13,18 +13,9 @@ fn extra_semicolon() {\n     };\n }\n \n-async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE checked the `Output` of this `async fn`, found opaque type\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n-//~| NOTE while checking the return type of the `async fn`\n-//~| NOTE in this expansion of desugaring of `async` block or function\n+async fn async_dummy() {}\n+\n+async fn async_dummy2() {}\n \n async fn async_extra_semicolon_same() {\n     let _ = match true { //~ NOTE `match` arms have incompatible types"}, {"sha": "df18c7b0b23cceade1b2e6e8d4a47aeb0ff31ac4", "filename": "tests/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:35:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:26:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -15,11 +15,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -33,7 +28,7 @@ LL +             async_dummy()\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:48:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:39:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -49,11 +44,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n@@ -69,7 +59,7 @@ LL ~         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:59:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:50:18\n    |\n LL |       let _ = match true {\n    |  _____________-\n@@ -83,18 +73,8 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n-   |\n-LL | async fn async_dummy() {}\n-   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n-note: while checking the return type of the `async fn`\n-  --> $DIR/match-prev-arm-needing-semi.rs:22:25\n-   |\n-LL | async fn async_dummy2() {}\n-   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:22:25>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:18:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "570529322e60faeccc711821e46fc2f017a118db", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f5dce27cd5a315046ecebbafa8ee2fef10e12/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=a63f5dce27cd5a315046ecebbafa8ee2fef10e12", "patch": "@@ -4,11 +4,6 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {test}` to be a fn item\n LL |     Box::new(test) as AsyncFnPtr;\n    |     ^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n    |\n-note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98604.rs:5:17\n-   |\n-LL | async fn test() {}\n-   |                 ^ checked the `Output` of this `async fn`, found opaque type\n    = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n            found opaque type `impl Future<Output = ()>`\n    = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`"}]}