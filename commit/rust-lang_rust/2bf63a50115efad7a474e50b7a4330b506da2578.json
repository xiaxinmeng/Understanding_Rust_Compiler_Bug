{"sha": "2bf63a50115efad7a474e50b7a4330b506da2578", "node_id": "C_kwDOAAsO6NoAKDJiZjYzYTUwMTE1ZWZhZDdhNDc0ZTUwYjdhNDMzMGI1MDZkYTI1Nzg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-17T13:55:58Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T16:58:59Z"}, "message": "Add regression tests", "tree": {"sha": "006663b9d5e55abdc873f2f51e4798d9f813726f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006663b9d5e55abdc873f2f51e4798d9f813726f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf63a50115efad7a474e50b7a4330b506da2578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf63a50115efad7a474e50b7a4330b506da2578", "html_url": "https://github.com/rust-lang/rust/commit/2bf63a50115efad7a474e50b7a4330b506da2578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf63a50115efad7a474e50b7a4330b506da2578/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1163aa7e72bc69b76cb68177fa4f83a66a6034cc", "html_url": "https://github.com/rust-lang/rust/commit/1163aa7e72bc69b76cb68177fa4f83a66a6034cc"}], "stats": {"total": 494, "additions": 494, "deletions": 0}, "files": [{"sha": "a70166e03a7b1219622f010572fccba4643beb85", "filename": "src/test/ui/impl-trait/issues/issue-54895.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54895.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+trait Trait<'a> {\n+    type Out;\n+    fn call(&'a self) -> Self::Out;\n+}\n+\n+struct X(());\n+\n+impl<'a> Trait<'a> for X {\n+    type Out = ();\n+    fn call(&'a self) -> Self::Out {\n+        ()\n+    }\n+}\n+\n+fn f() -> impl for<'a> Trait<'a, Out = impl Sized + 'a> {\n+    X(())\n+}\n+\n+fn main() {\n+    let _ = f();\n+}"}, {"sha": "041bd0e3855ec29754b839a769f28696fe856e74", "filename": "src/test/ui/impl-trait/issues/issue-62742.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,32 @@\n+use std::marker::PhantomData;\n+\n+fn _alias_check() {\n+    WrongImpl::foo(0i32);\n+    //~^ ERROR the trait bound `RawImpl<_>: Raw<_>` is not satisfied\n+    WrongImpl::<()>::foo(0i32);\n+    //~^ ERROR the trait bound `RawImpl<()>: Raw<()>` is not satisfied\n+    //~| ERROR trait bounds were not satisfied\n+    CorrectImpl::foo(0i32);\n+}\n+\n+pub trait Raw<T: ?Sized> {\n+    type Value;\n+}\n+\n+pub type WrongImpl<T> = SafeImpl<T, RawImpl<T>>;\n+\n+pub type CorrectImpl<T> = SafeImpl<[T], RawImpl<T>>;\n+\n+pub struct RawImpl<T>(PhantomData<T>);\n+\n+impl<T> Raw<[T]> for RawImpl<T> {\n+    type Value = T;\n+}\n+\n+pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n+\n+impl<T: ?Sized, A: Raw<T>> SafeImpl<T, A> {\n+    pub fn foo(value: A::Value) {}\n+}\n+\n+fn main() {}"}, {"sha": "28068b7548ce59e4e04eb89e63a0db1df305f3e3", "filename": "src/test/ui/impl-trait/issues/issue-62742.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,54 @@\n+error[E0277]: the trait bound `RawImpl<_>: Raw<_>` is not satisfied\n+  --> $DIR/issue-62742.rs:4:5\n+   |\n+LL |     WrongImpl::foo(0i32);\n+   |     ^^^^^^^^^ the trait `Raw<_>` is not implemented for `RawImpl<_>`\n+   |\n+   = help: the following implementations were found:\n+             <RawImpl<T> as Raw<[T]>>\n+note: required by a bound in `SafeImpl`\n+  --> $DIR/issue-62742.rs:26:35\n+   |\n+LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n+   |                                   ^^^^^^ required by this bound in `SafeImpl`\n+\n+error[E0599]: the function or associated item `foo` exists for struct `SafeImpl<(), RawImpl<()>>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-62742.rs:6:22\n+   |\n+LL |     WrongImpl::<()>::foo(0i32);\n+   |                      ^^^ function or associated item cannot be called on `SafeImpl<(), RawImpl<()>>` due to unsatisfied trait bounds\n+...\n+LL | pub struct RawImpl<T>(PhantomData<T>);\n+   | -------------------------------------- doesn't satisfy `RawImpl<()>: Raw<()>`\n+...\n+LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n+   | --------------------------------------------------------------- function or associated item `foo` not found for this\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `RawImpl<()>: Raw<()>`\n+note: the following trait must be implemented\n+  --> $DIR/issue-62742.rs:12:1\n+   |\n+LL | / pub trait Raw<T: ?Sized> {\n+LL | |     type Value;\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `RawImpl<()>: Raw<()>` is not satisfied\n+  --> $DIR/issue-62742.rs:6:5\n+   |\n+LL |     WrongImpl::<()>::foo(0i32);\n+   |     ^^^^^^^^^^^^^^^ the trait `Raw<()>` is not implemented for `RawImpl<()>`\n+   |\n+   = help: the following implementations were found:\n+             <RawImpl<T> as Raw<[T]>>\n+note: required by a bound in `SafeImpl`\n+  --> $DIR/issue-62742.rs:26:35\n+   |\n+LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n+   |                                   ^^^^^^ required by this bound in `SafeImpl`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "17fbe046e3ac939f5e2051ade599f925c32265e1", "filename": "src/test/ui/impl-trait/issues/issue-67830.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.nll.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,20 @@\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-67830.rs:23:5\n+   |\n+LL |     Wrap(|a| Some(a).into_iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-67830.rs:23:5\n+   |\n+LL |     Wrap(|a| Some(a).into_iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a308d975b43959b828cb3f634331a7f4bcf8a7bf", "filename": "src/test/ui/impl-trait/issues/issue-67830.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,26 @@\n+trait MyFn<Arg> {\n+    type Output;\n+    fn call(&self, arg: Arg) -> Self::Output;\n+}\n+\n+struct Wrap<F>(F);\n+\n+impl<A, B, F> MyFn<A> for Wrap<F>\n+where\n+    F: Fn(A) -> B\n+{\n+    type Output = B;\n+\n+    fn call(&self, arg: A) -> Self::Output {\n+        (self.0)(arg)\n+    }\n+}\n+\n+\n+struct A;\n+fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    Wrap(|a| Some(a).into_iter())\n+}\n+\n+fn main() {}"}, {"sha": "74e2f99cd33f9b300f2aa960147e26b89f5e19b1", "filename": "src/test/ui/impl-trait/issues/issue-67830.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-67830.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,15 @@\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-67830.rs:21:66\n+   |\n+LL |   fn test() -> impl for<'a> MyFn<&'a A, Output=impl Iterator + 'a> {\n+   |  __________________________________________________________________^\n+LL | |\n+LL | |     Wrap(|a| Some(a).into_iter())\n+LL | | }\n+   | |_^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 A) -> std::option::IntoIter<&A>` must implement `FnOnce<(&'1 A,)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 A,)>`, for some specific lifetime `'2`\n+\n+error: aborting due to previous error\n+"}, {"sha": "654de0cd0253c4a77f51adf1a0fbba8f084630d4", "filename": "src/test/ui/impl-trait/issues/issue-74282.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,11 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Closure = impl Fn() -> u64;\n+struct Anonymous(Closure);\n+\n+fn main() {\n+    let y = || -> Closure { || 3 };\n+    Anonymous(|| { //~ ERROR mismatched types\n+        3 //~^ ERROR mismatched types\n+    })\n+}"}, {"sha": "6e02a6b2b87b4c71d6abb2010b1ebf2a97a56a23", "filename": "src/test/ui/impl-trait/issues/issue-74282.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-74282.rs:8:15\n+   |\n+LL |   type Closure = impl Fn() -> u64;\n+   |                  ---------------- the expected opaque type\n+...\n+LL |       Anonymous(|| {\n+   |  _______________^\n+LL | |         3\n+LL | |     })\n+   | |_____^ expected closure, found a different closure\n+   |\n+   = note: expected opaque type `Closure`\n+                  found closure `[closure@$DIR/issue-74282.rs:8:15: 10:6]`\n+   = note: no two closures, even if identical, have the same type\n+   = help: consider boxing your closure and/or using it as a trait object\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-74282.rs:8:5\n+   |\n+LL |   fn main() {\n+   |             - expected `()` because of default return type\n+LL |       let y = || -> Closure { || 3 };\n+LL | /     Anonymous(|| {\n+LL | |         3\n+LL | |     })\n+   | |      ^- help: consider using a semicolon here: `;`\n+   | |______|\n+   |        expected `()`, found struct `Anonymous`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d29710b6f54ca50944292a821ad935e19876ad99", "filename": "src/test/ui/impl-trait/issues/issue-77987.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-77987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-77987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-77987.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,21 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+trait Foo<T> {}\n+impl<T, U> Foo<T> for U {}\n+\n+type Scope = impl Foo<()>;\n+\n+#[allow(unused)]\n+fn infer_scope() -> Scope {\n+    ()\n+}\n+\n+#[allow(unused)]\n+fn ice() -> impl Foo<Scope>\n+{\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "cc9167b340ad72aca6a9cc01be0e6b18e8c22569", "filename": "src/test/ui/impl-trait/issues/issue-82139.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,19 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {\n+    type Associated;\n+    fn func() -> Self::Associated;\n+}\n+\n+trait Bound {}\n+pub struct Struct;\n+\n+impl Trait for Struct {\n+    type Associated = impl Bound;\n+\n+    fn func() -> Self::Associated {\n+        Some(42).map(|_| j) //~ ERROR cannot find value `j` in this scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0adcd4a7a2f5cdc25313d35ba420d4665190c1e8", "filename": "src/test/ui/impl-trait/issues/issue-82139.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `j` in this scope\n+  --> $DIR/issue-82139.rs:15:26\n+   |\n+LL |         Some(42).map(|_| j)\n+   |                          ^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "58aca77fdf19fa832b52a453d9dfa0317d02b45a", "filename": "src/test/ui/impl-trait/issues/issue-83919.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,31 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// edition:2021\n+\n+use std::future::Future;\n+\n+trait Foo {\n+    type T;\n+    type Fut2: Future<Output=Self::T>; // ICE got triggered with traits other than Future here\n+    type Fut: Future<Output=Self::Fut2>;\n+    fn get_fut(&self) -> Self::Fut;\n+}\n+\n+struct Implementor;\n+\n+impl Foo for Implementor {\n+    type T = u64;\n+    type Fut2 = impl Future<Output=u64>;\n+    type Fut = impl Future<Output=Self::Fut2>;\n+\n+    fn get_fut(&self) -> Self::Fut {\n+        async move {\n+            42 //~^ ERROR `{integer}` is not a future\n+            // 42 does not impl Future and rustc does actually point out the error,\n+            // but rustc used to panic.\n+            // Putting a valid Future here always worked fine.\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ebd0130be8d065122b88e96633308418d53ff06b", "filename": "src/test/ui/impl-trait/issues/issue-83919.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `{integer}` is not a future\n+  --> $DIR/issue-83919.rs:22:9\n+   |\n+LL | /         async move {\n+LL | |             42\n+LL | |             // 42 does not impl Future and rustc does actually point out the error,\n+LL | |             // but rustc used to panic.\n+LL | |             // Putting a valid Future here always worked fine.\n+LL | |         }\n+   | |_________^ `{integer}` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `{integer}`\n+   = note: {integer} must be a future or must implement `IntoFuture` to be awaited\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "49a34ccfa3b4baa655bb3dcfcc504c3bc0526c37", "filename": "src/test/ui/impl-trait/issues/issue-84073.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84073.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,33 @@\n+use std::marker::PhantomData;\n+\n+pub trait StatefulFuture<S> {}\n+pub struct Never<T>(PhantomData<T>);\n+impl<T> StatefulFuture<T> for Never<T> {}\n+\n+pub struct RaceBuilder<F, S> {\n+    future: F,\n+    _phantom: PhantomData<S>,\n+}\n+\n+impl<T, F> RaceBuilder<T, F>\n+where\n+    F: StatefulFuture<Option<T>>,\n+{\n+    pub fn when(self) {}\n+}\n+\n+pub struct Race<T, R> {\n+    race: R,\n+    _phantom: PhantomData<T>,\n+}\n+\n+impl<T, R> Race<T, R>\n+where\n+    R: Fn(RaceBuilder<T, Never<T>>),\n+{\n+    pub fn new(race: R) {}\n+}\n+\n+fn main() {\n+    Race::new(|race| race.when()); //~ ERROR type annotations needed\n+}"}, {"sha": "36047d23fedda6f182aec29649c3bcf9da3b3bc8", "filename": "src/test/ui/impl-trait/issues/issue-84073.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84073.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed for `RaceBuilder<T, Never<T>>`\n+  --> $DIR/issue-84073.rs:32:16\n+   |\n+LL |     Race::new(|race| race.when());\n+   |                ^^^^ consider giving this closure parameter the explicit type `RaceBuilder<T, Never<T>>`, where the type parameter `T` is specified\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "f4b0b3f33fcd3437691a9e72398f3f469e94df6d", "filename": "src/test/ui/impl-trait/issues/issue-86719.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,12 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Bar {\n+    type E;\n+}\n+impl<S> Bar for S {\n+    type E = impl ; //~ ERROR at least one trait must be specified\n+    fn foo() -> Self::E { //~ ERROR `foo` is not a member\n+        |_| true //~ ERROR type annotations needed\n+    }\n+}\n+fn main() {}"}, {"sha": "e2abf71c110b906b4a5bd89972c53be6ada271eb", "filename": "src/test/ui/impl-trait/issues/issue-86719.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,24 @@\n+error: at least one trait must be specified\n+  --> $DIR/issue-86719.rs:7:14\n+   |\n+LL |     type E = impl ;\n+   |              ^^^^\n+\n+error[E0407]: method `foo` is not a member of trait `Bar`\n+  --> $DIR/issue-86719.rs:8:5\n+   |\n+LL | /     fn foo() -> Self::E {\n+LL | |         |_| true\n+LL | |     }\n+   | |_____^ not a member of trait `Bar`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-86719.rs:9:10\n+   |\n+LL |         |_| true\n+   |          ^ consider giving this closure parameter a type\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0282, E0407.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "e8cef42f208ca78ac1418d3940a9861929f839dd", "filename": "src/test/ui/impl-trait/issues/issue-86800.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,48 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// edition:2021\n+\n+use std::future::Future;\n+\n+struct Connection {\n+}\n+\n+trait Transaction {\n+}\n+\n+struct TestTransaction<'conn> {\n+    conn: &'conn Connection\n+}\n+\n+impl<'conn> Transaction for TestTransaction<'conn> {\n+}\n+\n+struct Context {\n+}\n+\n+type TransactionResult<O> = Result<O, ()>;\n+\n+type TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResult<O>>;\n+//~^ ERROR unconstrained opaque type\n+\n+fn execute_transaction_fut<'f, F, O>(\n+    f: F,\n+) -> impl FnOnce(&mut dyn Transaction) -> TransactionFuture<O>\n+where\n+    F: FnOnce(&mut dyn Transaction) -> TransactionFuture<O> + 'f\n+{\n+    f\n+}\n+\n+impl Context {\n+    async fn do_transaction<O>(\n+        &self, f: impl FnOnce(&mut dyn Transaction) -> TransactionFuture<O>\n+    ) -> TransactionResult<O>\n+    {\n+        let mut conn = Connection {};\n+        let mut transaction = TestTransaction { conn: &mut conn };\n+        f(&mut transaction).await\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "787aecc5b84bf93a1d8d89e061daef8fb0252f19", "filename": "src/test/ui/impl-trait/issues/issue-86800.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained opaque type\n+  --> $DIR/issue-86800.rs:25:34\n+   |\n+LL | type TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResult<O>>;\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `TransactionFuture` must be used in combination with a concrete type within the same module\n+\n+error: aborting due to previous error\n+"}, {"sha": "f0f6d2bb61c71aa39068b3a964653a47e5c8d50b", "filename": "src/test/ui/impl-trait/issues/issue-87340.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,14 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait X {\n+    type I;\n+    fn f() -> Self::I;\n+}\n+\n+impl<T> X for () {\n+//~^ ERROR `T` is not constrained by the impl trait, self type, or predicates\n+    type I = impl Sized;\n+    fn f() -> Self::I {}\n+}\n+\n+fn main() {}"}, {"sha": "2ab1e6a031248b6eaa2dc89be47724dc6779e84f", "filename": "src/test/ui/impl-trait/issues/issue-87340.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.stderr?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-87340.rs:8:6\n+   |\n+LL | impl<T> X for () {\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "d685a6f120109e603a2ba472d68076867ac941a6", "filename": "src/test/ui/impl-trait/issues/issue-89312.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-89312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf63a50115efad7a474e50b7a4330b506da2578/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-89312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-89312.rs?ref=2bf63a50115efad7a474e50b7a4330b506da2578", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+trait T { type Item; }\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+fn filter_positive<'a>() -> Alias<'a> {\n+    &S\n+}\n+\n+fn with_positive(fun: impl Fn(Alias<'_>)) {\n+    fun(filter_positive());\n+}\n+\n+fn main() {\n+    with_positive(|_| ());\n+}"}]}