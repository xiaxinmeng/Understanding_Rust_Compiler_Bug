{"sha": "5b3a6669f75dda31d9f736abb0ef30429264069a", "node_id": "C_kwDOAAsO6NoAKDViM2E2NjY5Zjc1ZGRhMzFkOWY3MzZhYmIwZWYzMDQyOTI2NDA2OWE", "commit": {"author": {"name": "Eric Wu", "email": "eric.dianhao.wu@gmail.com", "date": "2022-12-16T04:29:28Z"}, "committer": {"name": "Eric Wu", "email": "eric.dianhao.wu@gmail.com", "date": "2022-12-16T04:53:28Z"}, "message": "fix manual_filter false positive\n\ndo explicit checks for the other branch being None", "tree": {"sha": "8667b0a300232cb7ba27ad742e588033b6dd1555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8667b0a300232cb7ba27ad742e588033b6dd1555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3a6669f75dda31d9f736abb0ef30429264069a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a6669f75dda31d9f736abb0ef30429264069a", "html_url": "https://github.com/rust-lang/rust/commit/5b3a6669f75dda31d9f736abb0ef30429264069a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3a6669f75dda31d9f736abb0ef30429264069a/comments", "author": {"login": "EricWu2003", "id": 41087951, "node_id": "MDQ6VXNlcjQxMDg3OTUx", "avatar_url": "https://avatars.githubusercontent.com/u/41087951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricWu2003", "html_url": "https://github.com/EricWu2003", "followers_url": "https://api.github.com/users/EricWu2003/followers", "following_url": "https://api.github.com/users/EricWu2003/following{/other_user}", "gists_url": "https://api.github.com/users/EricWu2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricWu2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricWu2003/subscriptions", "organizations_url": "https://api.github.com/users/EricWu2003/orgs", "repos_url": "https://api.github.com/users/EricWu2003/repos", "events_url": "https://api.github.com/users/EricWu2003/events{/privacy}", "received_events_url": "https://api.github.com/users/EricWu2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "EricWu2003", "id": 41087951, "node_id": "MDQ6VXNlcjQxMDg3OTUx", "avatar_url": "https://avatars.githubusercontent.com/u/41087951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricWu2003", "html_url": "https://github.com/EricWu2003", "followers_url": "https://api.github.com/users/EricWu2003/followers", "following_url": "https://api.github.com/users/EricWu2003/following{/other_user}", "gists_url": "https://api.github.com/users/EricWu2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricWu2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricWu2003/subscriptions", "organizations_url": "https://api.github.com/users/EricWu2003/orgs", "repos_url": "https://api.github.com/users/EricWu2003/repos", "events_url": "https://api.github.com/users/EricWu2003/events{/privacy}", "received_events_url": "https://api.github.com/users/EricWu2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3905f512302a976dac58c8549f808719edfbe4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3905f512302a976dac58c8549f808719edfbe4c1", "html_url": "https://github.com/rust-lang/rust/commit/3905f512302a976dac58c8549f808719edfbe4c1"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "f6bf0e7aa1ad9bcfb17c896b116bdab9df215cae", "filename": "clippy_lints/src/matches/manual_filter.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b3a6669f75dda31d9f736abb0ef30429264069a/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3a6669f75dda31d9f736abb0ef30429264069a/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs?ref=5b3a6669f75dda31d9f736abb0ef30429264069a", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::contains_unsafe_block;\n use clippy_utils::{is_res_lang_ctor, path_res, path_to_local_id};\n \n-use rustc_hir::LangItem::OptionSome;\n+use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_hir::{Arm, Expr, ExprKind, HirId, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_span::{sym, SyntaxContext};\n@@ -25,15 +25,13 @@ fn get_cond_expr<'tcx>(\n         if let Some(block_expr) = peels_blocks_incl_unsafe_opt(expr);\n         if let ExprKind::If(cond, then_expr, Some(else_expr)) = block_expr.kind;\n         if let PatKind::Binding(_,target, ..) = pat.kind;\n-        if let (then_visitor, else_visitor)\n-            = (is_some_expr(cx, target, ctxt, then_expr),\n-                is_some_expr(cx, target, ctxt, else_expr));\n-        if then_visitor != else_visitor; // check that one expr resolves to `Some(x)`, the other to `None`\n+        if is_some_expr(cx, target, ctxt, then_expr) && is_none_expr(cx, else_expr)\n+            || is_none_expr(cx, then_expr) && is_some_expr(cx, target, ctxt, else_expr); // check that one expr resolves to `Some(x)`, the other to `None`\n         then {\n             return Some(SomeExpr {\n                     expr: peels_blocks_incl_unsafe(cond.peel_drop_temps()),\n                     needs_unsafe_block: contains_unsafe_block(cx, expr),\n-                    needs_negated: !then_visitor // if the `then_expr` resolves to `None`, need to negate the cond\n+                    needs_negated: is_none_expr(cx, then_expr) // if the `then_expr` resolves to `None`, need to negate the cond\n                 })\n             }\n     };\n@@ -74,6 +72,13 @@ fn is_some_expr(cx: &LateContext<'_>, target: HirId, ctxt: SyntaxContext, expr:\n     false\n }\n \n+fn is_none_expr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(inner_expr) = peels_blocks_incl_unsafe_opt(expr) {\n+        return is_res_lang_ctor(cx, path_res(cx, inner_expr), OptionNone);\n+    };\n+    false\n+}\n+\n // given the closure: `|<pattern>| <expr>`\n // returns `|&<pattern>| <expr>`\n fn add_ampersand_if_copy(body_str: String, has_copy_trait: bool) -> String {"}, {"sha": "b986dd5e21306d4fadf13104f1b123be05242eb1", "filename": "tests/ui/manual_filter.fixed", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b3a6669f75dda31d9f736abb0ef30429264069a/tests%2Fui%2Fmanual_filter.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5b3a6669f75dda31d9f736abb0ef30429264069a/tests%2Fui%2Fmanual_filter.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter.fixed?ref=5b3a6669f75dda31d9f736abb0ef30429264069a", "patch": "@@ -116,4 +116,31 @@ fn main() {\n         },\n         None => None,\n     };\n+\n+    match Some(20) {\n+        // Don't Lint, because `Some(3*x)` is not `None`\n+        None => None,\n+        Some(x) => {\n+            if x > 0 {\n+                Some(3 * x)\n+            } else {\n+                Some(x)\n+            }\n+        },\n+    };\n+\n+    // Don't lint: https://github.com/rust-lang/rust-clippy/issues/10088\n+    let result = if let Some(a) = maybe_some() {\n+        if let Some(b) = maybe_some() {\n+            Some(a + b)\n+        } else {\n+            Some(a)\n+        }\n+    } else {\n+        None\n+    };\n+}\n+\n+fn maybe_some() -> Option<u32> {\n+    Some(0)\n }"}, {"sha": "1e786b9027cc709b6f2104701ba9cc1737f8fa10", "filename": "tests/ui/manual_filter.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b3a6669f75dda31d9f736abb0ef30429264069a/tests%2Fui%2Fmanual_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3a6669f75dda31d9f736abb0ef30429264069a/tests%2Fui%2Fmanual_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter.rs?ref=5b3a6669f75dda31d9f736abb0ef30429264069a", "patch": "@@ -240,4 +240,31 @@ fn main() {\n         },\n         None => None,\n     };\n+\n+    match Some(20) {\n+        // Don't Lint, because `Some(3*x)` is not `None`\n+        None => None,\n+        Some(x) => {\n+            if x > 0 {\n+                Some(3 * x)\n+            } else {\n+                Some(x)\n+            }\n+        },\n+    };\n+\n+    // Don't lint: https://github.com/rust-lang/rust-clippy/issues/10088\n+    let result = if let Some(a) = maybe_some() {\n+        if let Some(b) = maybe_some() {\n+            Some(a + b)\n+        } else {\n+            Some(a)\n+        }\n+    } else {\n+        None\n+    };\n+}\n+\n+fn maybe_some() -> Option<u32> {\n+    Some(0)\n }"}]}