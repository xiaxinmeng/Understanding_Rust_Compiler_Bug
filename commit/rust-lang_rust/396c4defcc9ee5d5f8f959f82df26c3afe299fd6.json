{"sha": "396c4defcc9ee5d5f8f959f82df26c3afe299fd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NmM0ZGVmY2M5ZWU1ZDVmOGY5NTlmODJkZjI2YzNhZmUyOTlmZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T22:30:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T22:30:25Z"}, "message": "Introduce --cfg argument for providing additional configuration. Issue #489", "tree": {"sha": "ad432b889e6b6c5ec9138362ee0aca218a5e6845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad432b889e6b6c5ec9138362ee0aca218a5e6845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/396c4defcc9ee5d5f8f959f82df26c3afe299fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/396c4defcc9ee5d5f8f959f82df26c3afe299fd6", "html_url": "https://github.com/rust-lang/rust/commit/396c4defcc9ee5d5f8f959f82df26c3afe299fd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/396c4defcc9ee5d5f8f959f82df26c3afe299fd6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34b61fb1522cab29f87adb79fa1be2a8984ff09", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34b61fb1522cab29f87adb79fa1be2a8984ff09", "html_url": "https://github.com/rust-lang/rust/commit/a34b61fb1522cab29f87adb79fa1be2a8984ff09"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "fb8d35f285e817d4694028e55640b9afa9ef7377", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/396c4defcc9ee5d5f8f959f82df26c3afe299fd6/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396c4defcc9ee5d5f8f959f82df26c3afe299fd6/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=396c4defcc9ee5d5f8f959f82df26c3afe299fd6", "patch": "@@ -57,6 +57,23 @@ fn default_configuration(session::session sess, str argv0, str input) ->\n          mk(\"build_input\", input)];\n }\n \n+fn build_configuration(session::session sess, str argv0,\n+                       str input) -> ast::crate_cfg {\n+    // Combine the configuration requested by the session (command line) with\n+    // some default configuration items\n+    ret sess.get_opts().cfg + default_configuration(sess, argv0, input);\n+}\n+\n+// Convert strings provided as --cfg [cfgspec] into a crate_cfg\n+fn parse_cfgspecs(&vec[str] cfgspecs) -> ast::crate_cfg {\n+    // FIXME: It would be nice to use the parser to parse all varieties of\n+    // meta_item here. At the moment we just support the meta_word variant.\n+    fn to_meta_word(&str cfgspec) -> @ast::meta_item {\n+        attr::mk_word_item(cfgspec)\n+    }\n+    ret vec::map(to_meta_word, cfgspecs);\n+}\n+\n fn parse_input(session::session sess, parser::parser p, str input) ->\n    @ast::crate {\n     ret if (str::ends_with(input, \".rc\")) {\n@@ -160,6 +177,7 @@ options:\n     --emit-llvm        produce an LLVM bitcode file\n     --save-temps       write intermediate files in addition to normal output\n     --stats            gather and report various compilation statistics\n+    --cfg [cfgspec]    configure the compilation environment\n     --time-passes      time the individual phases of the compiler\n     --time-llvm-passes time the individual phases of the LLVM backend\n     --sysroot <path>   override the system root (default: rustc's directory)\n@@ -257,6 +275,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n             case (none) { get_default_sysroot(binary) }\n             case (some(?s)) { s }\n         };\n+    auto cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let @session::options sopts =\n         @rec(shared=shared,\n              optimize=opt_level,\n@@ -269,7 +288,8 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n              time_llvm_passes=time_llvm_passes,\n              output_type=output_type,\n              library_search_paths=library_search_paths,\n-             sysroot=sysroot);\n+             sysroot=sysroot,\n+             cfg=cfg);\n     ret sopts;\n }\n \n@@ -302,7 +322,7 @@ fn main(vec[str] args) {\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n-         optflag(\"noverify\")];\n+         optflag(\"noverify\"), optmulti(\"cfg\")];\n     auto binary = vec::shift[str](args);\n     auto binary_dir = fs::dirname(binary);\n     auto match =\n@@ -341,7 +361,7 @@ fn main(vec[str] args) {\n     }\n     auto ifile = match.free.(0);\n     let str saved_out_filename = \"\";\n-    auto cfg = default_configuration(sess, binary, ifile);\n+    auto cfg = build_configuration(sess, binary, ifile);\n     auto pretty =\n         option::map[str,\n                     pp_mode](bind parse_pretty(sess, _),"}, {"sha": "ed34933d36b2aa8170eb0e3ccc63cd12275a2ffa", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/396c4defcc9ee5d5f8f959f82df26c3afe299fd6/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/396c4defcc9ee5d5f8f959f82df26c3afe299fd6/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=396c4defcc9ee5d5f8f959f82df26c3afe299fd6", "patch": "@@ -34,7 +34,10 @@ type options =\n         bool time_llvm_passes,\n         back::link::output_type output_type,\n         vec[str] library_search_paths,\n-        str sysroot);\n+        str sysroot,\n+        // The crate config requested for the session, which may be combined\n+        // with additional crate configurations during the compile process\n+        ast::crate_cfg cfg);\n \n type crate_metadata = rec(str name, vec[u8] data);\n "}]}