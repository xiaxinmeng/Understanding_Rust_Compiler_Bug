{"sha": "548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OGM0NmZlOWRmYTBlMTA4MmQ1YjhmNTYxZjc4OTU1ZTViN2JiNTY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T17:15:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-09T17:15:28Z"}, "message": "Merge pull request #1062 from bjorn3/global_asm\n\nImplement global_asm! using an external assembler", "tree": {"sha": "7702bc67fbc24f6aa656b4cb68477fee1f1f2c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7702bc67fbc24f6aa656b4cb68477fee1f1f2c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfB1CwCRBK7hj4Ov3rIwAAdHIIACvBtflRdyMtg/oS8fT5Gz/d\n9PiNw4jA/MFL7UXXJJIZjqZ/H55nR0PYUEpjH6eSAqKyGYJ3L1jTctUPU5Gbz3k+\nJjGzGGvJyU+8q2ZGW81x6MBpw+k7WDjp8bY0UanHZMCVXrvTrspFgG6wdYhGFg/w\n8Y4+QSEqXH+hyOuY+ID7O3NBGn/uFE/YUD8/w5bhUb5lnOc5wAeEaHFgz8YFqzlM\n4hFa/sYlbVSyl2O73L8LKkVRMb/oyXfuKXrz+qpDOH7pTM2eD7ew0qVJ/BztsP8O\nr7sbphKHWvfXebXvl8vzMTvKTN+/3Lggfy0p4ML6SgI4150+IMWW4DiuHE/kaAA=\n=xFAh\n-----END PGP SIGNATURE-----\n", "payload": "tree 7702bc67fbc24f6aa656b4cb68477fee1f1f2c09\nparent 1987a3b6c099e069368ac7caf30ea6d46595ca5f\nparent 8cf38181ad4506af85a5cd68b3d5a13c038f04ef\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1594314928 +0200\ncommitter GitHub <noreply@github.com> 1594314928 +0200\n\nMerge pull request #1062 from bjorn3/global_asm\n\nImplement global_asm! using an external assembler"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "html_url": "https://github.com/rust-lang/rust/commit/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1987a3b6c099e069368ac7caf30ea6d46595ca5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1987a3b6c099e069368ac7caf30ea6d46595ca5f", "html_url": "https://github.com/rust-lang/rust/commit/1987a3b6c099e069368ac7caf30ea6d46595ca5f"}, {"sha": "8cf38181ad4506af85a5cd68b3d5a13c038f04ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf38181ad4506af85a5cd68b3d5a13c038f04ef", "html_url": "https://github.com/rust-lang/rust/commit/8cf38181ad4506af85a5cd68b3d5a13c038f04ef"}], "stats": {"total": 271, "additions": 252, "deletions": 19}, "files": [{"sha": "94336154748abd95f7197fabbe1e782a610bc543", "filename": "example/mini_core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -562,6 +562,10 @@ pub macro line() { /* compiler built-in */ }\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro cfg() { /* compiler built-in */ }\n \n+#[rustc_builtin_macro]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro global_asm() { /* compiler built-in */ }\n+\n pub static A_STATIC: u8 = 42;\n \n #[lang = \"panic_location\"]"}, {"sha": "9c2ab5a5165cdfe61e841bece7f29d505fccc78d", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -284,6 +284,26 @@ fn main() {\n \n     #[cfg(not(jit))]\n     test_tls();\n+\n+    #[cfg(all(not(jit), target_os = \"linux\"))]\n+    unsafe {\n+        global_asm_test();\n+    }\n+}\n+\n+#[cfg(all(not(jit), target_os = \"linux\"))]\n+extern \"C\" {\n+    fn global_asm_test();\n+}\n+\n+#[cfg(all(not(jit), target_os = \"linux\"))]\n+global_asm! {\n+    \"\n+    .global global_asm_test\n+    global_asm_test:\n+    // comment that would normally be removed by LLVM\n+    ret\n+    \"\n }\n \n #[repr(C)]"}, {"sha": "6ae07a3bb7bfe2daa15cdc6393d74dc607ccb215", "filename": "src/archive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -220,8 +220,10 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         std::mem::drop(builder);\n \n         if self.update_symbols {\n+            let ranlib = crate::toolchain::get_toolchain_binary(self.config.sess, \"ranlib\");\n+\n             // Run ranlib to be able to link the archive\n-            let status = std::process::Command::new(\"ranlib\")\n+            let status = std::process::Command::new(ranlib)\n                 .arg(self.config.dst)\n                 .status()\n                 .expect(\"Couldn't run ranlib\");"}, {"sha": "48445c43a92eb2df9b754cca0c2ac9b7797d361f", "filename": "src/driver/aot.rs", "status": "modified", "additions": 98, "deletions": 3, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -1,3 +1,5 @@\n+use std::path::PathBuf;\n+\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::CodegenUnit;\n@@ -110,19 +112,33 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n \n     let module = new_module(tcx, cgu_name.as_str().to_string());\n \n+    let mut global_asm = Vec::new();\n     let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n-    super::codegen_mono_items(&mut cx, mono_items);\n+    super::codegen_mono_items(&mut cx, &mut global_asm, mono_items);\n     let (mut module, debug, mut unwind_context) = tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);\n \n-    emit_module(\n+    let global_asm = global_asm.into_iter().map(|hir_id| {\n+        let item = tcx.hir().expect_item(hir_id);\n+        if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n+            asm.as_str().to_string()\n+        } else {\n+            bug!(\"Expected GlobalAsm found {:?}\", item);\n+        }\n+    }).collect::<Vec<String>>().join(\"\\n\");\n+\n+    let codegen_result = emit_module(\n         tcx,\n         cgu.name().as_str().to_string(),\n         ModuleKind::Regular,\n         module,\n         debug,\n         unwind_context,\n-    )\n+    );\n+\n+    codegen_global_asm(tcx, &cgu.name().as_str(), &global_asm);\n+\n+    codegen_result\n }\n \n pub(super) fn run_aot(\n@@ -253,6 +269,85 @@ pub(super) fn run_aot(\n     }, work_products))\n }\n \n+fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n+    use std::io::Write;\n+    use std::process::{Command, Stdio};\n+\n+    if global_asm.is_empty() {\n+        return;\n+    }\n+\n+    if tcx.sess.target.target.options.is_like_osx || tcx.sess.target.target.options.is_like_windows {\n+        if global_asm.contains(\"__rust_probestack\") {\n+            return;\n+        }\n+\n+        // FIXME fix linker error on macOS\n+        tcx.sess.fatal(\"global_asm! is not yet supported on macOS and Windows\");\n+    }\n+\n+    let assembler = crate::toolchain::get_toolchain_binary(tcx.sess, \"as\");\n+    let linker = crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\");\n+\n+    // Remove all LLVM style comments\n+    let global_asm = global_asm.lines().map(|line| {\n+        if let Some(index) = line.find(\"//\") {\n+            &line[0..index]\n+        } else {\n+            line\n+        }\n+    }).collect::<Vec<_>>().join(\"\\n\");\n+\n+    let output_object_file = tcx\n+        .output_filenames(LOCAL_CRATE)\n+        .temp_path(OutputType::Object, Some(cgu_name));\n+\n+    // Assemble `global_asm`\n+    let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");\n+    let mut child = Command::new(assembler)\n+        .arg(\"-o\").arg(&global_asm_object_file)\n+        .stdin(Stdio::piped())\n+        .spawn()\n+        .expect(\"Failed to spawn `as`.\");\n+    child.stdin.take().unwrap().write_all(global_asm.as_bytes()).unwrap();\n+    let status = child.wait().expect(\"Failed to wait for `as`.\");\n+    if !status.success() {\n+        tcx.sess.fatal(&format!(\"Failed to assemble `{}`\", global_asm));\n+    }\n+\n+    // Link the global asm and main object file together\n+    let main_object_file = add_file_stem_postfix(output_object_file.clone(), \".main\");\n+    std::fs::rename(&output_object_file, &main_object_file).unwrap();\n+    let status = Command::new(linker)\n+        .arg(\"-r\") // Create a new object file\n+        .arg(\"-o\").arg(output_object_file)\n+        .arg(&main_object_file)\n+        .arg(&global_asm_object_file)\n+        .status()\n+        .unwrap();\n+    if !status.success() {\n+        tcx.sess.fatal(&format!(\n+            \"Failed to link `{}` and `{}` together\",\n+            main_object_file.display(),\n+            global_asm_object_file.display(),\n+        ));\n+    }\n+\n+    std::fs::remove_file(global_asm_object_file).unwrap();\n+    std::fs::remove_file(main_object_file).unwrap();\n+}\n+\n+fn add_file_stem_postfix(mut path: PathBuf, postfix: &str) -> PathBuf {\n+    let mut new_filename = path.file_stem().unwrap().to_owned();\n+    new_filename.push(postfix);\n+    if let Some(extension) = path.extension() {\n+        new_filename.push(\".\");\n+        new_filename.push(extension);\n+    }\n+    path.set_file_name(new_filename);\n+    path\n+}\n+\n // Adapted from https://github.com/rust-lang/rust/blob/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8/src/librustc_codegen_ssa/base.rs#L922-L953\n fn determine_cgu_reuse<'tcx>(tcx: TyCtxt<'tcx>, cgu: &CodegenUnit<'tcx>) -> CguReuse {\n     if !tcx.dep_graph.is_fully_enabled() {"}, {"sha": "138792084b2e4b7509a5d941c97228e535ba2df6", "filename": "src/driver/jit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -55,7 +55,12 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     let mut cx = crate::CodegenCx::new(tcx, jit_module, false);\n \n     let (mut jit_module, _debug, mut unwind_context) = super::time(tcx, \"codegen mono items\", || {\n-        super::codegen_mono_items(&mut cx, mono_items);\n+        let mut global_asm = Vec::new();\n+        super::codegen_mono_items(&mut cx, &mut global_asm, mono_items);\n+        for hir_id in global_asm {\n+            let item = tcx.hir().expect_item(hir_id);\n+            tcx.sess.span_err(item.span, \"Global asm is not supported in JIT mode\");\n+        }\n         tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n     });\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);"}, {"sha": "8872b6f1da400b45151a6ced29ccfbdeeb013221", "filename": "src/driver/mod.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -1,5 +1,6 @@\n use std::any::Any;\n \n+use rustc_hir::HirId;\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n@@ -31,6 +32,7 @@ pub(crate) fn codegen_crate(\n \n fn codegen_mono_items<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx, impl Backend + 'static>,\n+    global_asm: &mut Vec<HirId>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n@@ -49,12 +51,13 @@ fn codegen_mono_items<'tcx>(\n \n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-        trans_mono_item(cx, mono_item, linkage);\n+        trans_mono_item(cx, global_asm, mono_item, linkage);\n     }\n }\n \n fn trans_mono_item<'tcx, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'tcx, B>,\n+    global_asm: &mut Vec<HirId>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,\n ) {\n@@ -91,19 +94,7 @@ fn trans_mono_item<'tcx, B: Backend + 'static>(\n             crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n         }\n         MonoItem::GlobalAsm(hir_id) => {\n-            let item = tcx.hir().expect_item(hir_id);\n-            if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n-                // FIXME implement global asm using an external assembler\n-                if asm.as_str().contains(\"__rust_probestack\") {\n-                    return;\n-                } else {\n-                    tcx\n-                        .sess\n-                        .fatal(&format!(\"Unimplemented global asm mono item \\\"{}\\\"\", asm));\n-                }\n-            } else {\n-                bug!(\"Expected GlobalAsm found {:?}\", item);\n-            }\n+            global_asm.push(hir_id);\n         }\n     }\n }"}, {"sha": "fe1f79988bef500a0804bc5da22c78967d0caa2a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -64,6 +64,7 @@ mod optimize;\n mod pointer;\n mod pretty_clif;\n mod target_features_whitelist;\n+mod toolchain;\n mod trap;\n mod unsize;\n mod value_and_place;"}, {"sha": "2a31b8834384b97896e86ac11280478f9373b6ac", "filename": "src/toolchain.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548c46fe9dfa0e1082d5b8f561f78955e5b7bb56/src%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftoolchain.rs?ref=548c46fe9dfa0e1082d5b8f561f78955e5b7bb56", "patch": "@@ -0,0 +1,115 @@\n+use std::path::PathBuf;\n+\n+use rustc_middle::bug;\n+use rustc_session::Session;\n+use rustc_target::spec::LinkerFlavor;\n+\n+/// Tries to infer the path of a binary for the target toolchain from the linker name.\n+pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n+    let (mut linker, _linker_flavor) = linker_and_flavor(sess);\n+    let linker_file_name = linker.file_name().and_then(|name| name.to_str()).unwrap_or_else(|| {\n+        sess.fatal(\"couldn't extract file name from specified linker\")\n+    });\n+\n+    if linker_file_name == \"ld.lld\" {\n+        if tool != \"ld\" {\n+            linker.set_file_name(tool)\n+        }\n+    } else {\n+        let tool_file_name = linker_file_name\n+            .replace(\"ld\", tool)\n+            .replace(\"gcc\", tool)\n+            .replace(\"clang\", tool)\n+            .replace(\"cc\", tool);\n+\n+        linker.set_file_name(tool_file_name)\n+    }\n+\n+    linker\n+}\n+\n+// Adapted from https://github.com/rust-lang/rust/blob/5db778affee7c6600c8e7a177c48282dab3f6292/src/librustc_codegen_ssa/back/link.rs#L848-L931\n+fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n+    fn infer_from(\n+        sess: &Session,\n+        linker: Option<PathBuf>,\n+        flavor: Option<LinkerFlavor>,\n+    ) -> Option<(PathBuf, LinkerFlavor)> {\n+        match (linker, flavor) {\n+            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n+            // only the linker flavor is known; use the default linker for the selected flavor\n+            (None, Some(flavor)) => Some((\n+                PathBuf::from(match flavor {\n+                    LinkerFlavor::Em => {\n+                        if cfg!(windows) {\n+                            \"emcc.bat\"\n+                        } else {\n+                            \"emcc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Gcc => {\n+                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n+                            // On historical Solaris systems, \"cc\" may have\n+                            // been Sun Studio, which is not flag-compatible\n+                            // with \"gcc\".  This history casts a long shadow,\n+                            // and many modern illumos distributions today\n+                            // ship GCC as \"gcc\" without also making it\n+                            // available as \"cc\".\n+                            \"gcc\"\n+                        } else {\n+                            \"cc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Ld => \"ld\",\n+                    LinkerFlavor::Msvc => \"link.exe\",\n+                    LinkerFlavor::Lld(_) => \"lld\",\n+                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n+                }),\n+                flavor,\n+            )),\n+            (Some(linker), None) => {\n+                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n+                    sess.fatal(\"couldn't extract file stem from specified linker\")\n+                });\n+\n+                let flavor = if stem == \"emcc\" {\n+                    LinkerFlavor::Em\n+                } else if stem == \"gcc\"\n+                    || stem.ends_with(\"-gcc\")\n+                    || stem == \"clang\"\n+                    || stem.ends_with(\"-clang\")\n+                {\n+                    LinkerFlavor::Gcc\n+                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n+                    LinkerFlavor::Ld\n+                } else if stem == \"link\" || stem == \"lld-link\" {\n+                    LinkerFlavor::Msvc\n+                } else if stem == \"lld\" || stem == \"rust-lld\" {\n+                    LinkerFlavor::Lld(sess.target.target.options.lld_flavor)\n+                } else {\n+                    // fall back to the value in the target spec\n+                    sess.target.target.linker_flavor\n+                };\n+\n+                Some((linker, flavor))\n+            }\n+            (None, None) => None,\n+        }\n+    }\n+\n+    // linker and linker flavor specified via command line have precedence over what the target\n+    // specification specifies\n+    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n+        return ret;\n+    }\n+\n+    if let Some(ret) = infer_from(\n+        sess,\n+        sess.target.target.options.linker.clone().map(PathBuf::from),\n+        Some(sess.target.target.linker_flavor),\n+    ) {\n+        return ret;\n+    }\n+\n+    bug!(\"Not enough information provided to determine how to invoke the linker\");\n+}"}]}