{"sha": "e4728e494e50a3c07ff3a7d3f16369903ac70d49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NzI4ZTQ5NGU1MGEzYzA3ZmYzYTdkM2YxNjM2OTkwM2FjNzBkNDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-03T13:23:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:22:07Z"}, "message": "transition various normalization functions to the new methods\n\nIn particular:\n\n- `fully_normalize_monormophic_ty` => `normalize_erasing_regions`\n- `normalize_associated_type_in_env` => `normalize_erasing_regions`\n- `fully_normalize_associated_types_in` => `normalize_erasing_regions`\n- `erase_late_bound_regions_and_normalize` => `normalize_erasing_late_bound_regions`", "tree": {"sha": "8fe697ac66ce917226accd248851ccc1d0a74a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe697ac66ce917226accd248851ccc1d0a74a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4728e494e50a3c07ff3a7d3f16369903ac70d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4728e494e50a3c07ff3a7d3f16369903ac70d49", "html_url": "https://github.com/rust-lang/rust/commit/e4728e494e50a3c07ff3a7d3f16369903ac70d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4728e494e50a3c07ff3a7d3f16369903ac70d49/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211d9ad7db19fcb23f0200786595b8b170382609", "url": "https://api.github.com/repos/rust-lang/rust/commits/211d9ad7db19fcb23f0200786595b8b170382609", "html_url": "https://github.com/rust-lang/rust/commit/211d9ad7db19fcb23f0200786595b8b170382609"}], "stats": {"total": 374, "additions": 91, "deletions": 283}, "files": [{"sha": "8d7fef90b754ef676f8118e4845620ac3cd98940", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -635,7 +635,6 @@ define_dep_nodes!( <'tcx>\n     [] CodegenUnit(InternedString),\n     [] CompileCodegenUnit(InternedString),\n     [input] OutputFilenames,\n-    [anon] NormalizeTy,\n     [] NormalizeProjectionTy(CanonicalProjectionGoal<'tcx>),\n     [] NormalizeTyAfterErasingRegions(ParamEnvAnd<'tcx, Ty<'tcx>>),\n     [] DropckOutlives(CanonicalTyGoal<'tcx>),"}, {"sha": "217a157cb33ee25fc6a1b0e1737ac765ffc14157", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 135, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -21,7 +21,6 @@ use hir::def_id::DefId;\n use middle::free_region::RegionRelations;\n use middle::region;\n use middle::lang_items;\n-use mir::tcx::PlaceTy;\n use ty::subst::Substs;\n use ty::{TyVid, IntVid, FloatVid};\n use ty::{self, Ty, TyCtxt};\n@@ -35,7 +34,7 @@ use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n-use syntax_pos::{self, Span, DUMMY_SP};\n+use syntax_pos::{self, Span};\n use util::nodemap::FxHashMap;\n use arena::DroplessArena;\n \n@@ -493,140 +492,7 @@ pub struct CombinedSnapshot<'a, 'tcx:'a> {\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n }\n \n-/// Helper trait for shortening the lifetimes inside a\n-/// value for post-type-checking normalization.\n-///\n-/// This trait offers a normalization method where the inputs and\n-/// outputs both have the `'gcx` lifetime; the implementations\n-/// internally create inference contexts and/or lift as needed.\n-pub trait TransNormalize<'gcx>: TypeFoldable<'gcx> {\n-    fn trans_normalize<'a, 'tcx>(&self,\n-                                 infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                 param_env: ty::ParamEnv<'tcx>)\n-                                 -> Self;\n-}\n-\n-macro_rules! items { ($($item:item)+) => ($($item)+) }\n-macro_rules! impl_trans_normalize {\n-    ($lt_gcx:tt, $($ty:ty),+) => {\n-        items!($(impl<$lt_gcx> TransNormalize<$lt_gcx> for $ty {\n-            fn trans_normalize<'a, 'tcx>(&self,\n-                                         infcx: &InferCtxt<'a, $lt_gcx, 'tcx>,\n-                                         param_env: ty::ParamEnv<'tcx>)\n-                                         -> Self {\n-                infcx.normalize_projections_in(param_env, self)\n-            }\n-        })+);\n-    }\n-}\n-\n-impl_trans_normalize!('gcx,\n-    Ty<'gcx>,\n-    &'gcx ty::Const<'gcx>,\n-    &'gcx Substs<'gcx>,\n-    ty::FnSig<'gcx>,\n-    ty::PolyFnSig<'gcx>,\n-    ty::ClosureSubsts<'gcx>,\n-    ty::PolyTraitRef<'gcx>,\n-    ty::ExistentialTraitRef<'gcx>\n-);\n-\n-impl<'gcx> TransNormalize<'gcx> for PlaceTy<'gcx> {\n-    fn trans_normalize<'a, 'tcx>(&self,\n-                                 infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                 param_env: ty::ParamEnv<'tcx>)\n-                                 -> Self {\n-        match *self {\n-            PlaceTy::Ty { ty } => PlaceTy::Ty { ty: ty.trans_normalize(infcx, param_env) },\n-            PlaceTy::Downcast { adt_def, substs, variant_index } => {\n-                PlaceTy::Downcast {\n-                    adt_def,\n-                    substs: substs.trans_normalize(infcx, param_env),\n-                    variant_index,\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-// NOTE: Callable from trans only!\n-impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n-    /// Currently, higher-ranked type bounds inhibit normalization. Therefore,\n-    /// each time we erase them in translation, we need to normalize\n-    /// the contents.\n-    pub fn erase_late_bound_regions_and_normalize<T>(self, value: &ty::Binder<T>)\n-        -> T\n-        where T: TransNormalize<'tcx>\n-    {\n-        assert!(!value.needs_subst());\n-        let value = self.erase_late_bound_regions(value);\n-        self.fully_normalize_associated_types_in(&value)\n-    }\n-\n-    /// Fully normalizes any associated types in `value`, using an\n-    /// empty environment and `Reveal::All` mode (therefore, suitable\n-    /// only for monomorphized code during trans, basically).\n-    pub fn fully_normalize_associated_types_in<T>(self, value: &T) -> T\n-        where T: TransNormalize<'tcx>\n-    {\n-        debug!(\"fully_normalize_associated_types_in(t={:?})\", value);\n-\n-        let param_env = ty::ParamEnv::reveal_all();\n-        let value = self.erase_regions(value);\n-\n-        if !value.has_projections() {\n-            return value;\n-        }\n-\n-        self.infer_ctxt().enter(|infcx| {\n-            value.trans_normalize(&infcx, param_env)\n-        })\n-    }\n-\n-    /// Does a best-effort to normalize any associated types in\n-    /// `value`; this includes revealing specializable types, so this\n-    /// should be not be used during type-checking, but only during\n-    /// optimization and code generation.\n-    pub fn normalize_associated_type_in_env<T>(\n-        self, value: &T, env: ty::ParamEnv<'tcx>\n-    ) -> T\n-        where T: TransNormalize<'tcx>\n-    {\n-        debug!(\"normalize_associated_type_in_env(t={:?})\", value);\n-\n-        let value = self.erase_regions(value);\n-\n-        if !value.has_projections() {\n-            return value;\n-        }\n-\n-        self.infer_ctxt().enter(|infcx| {\n-            value.trans_normalize(&infcx, env.with_reveal_all())\n-       })\n-    }\n-}\n-\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    fn normalize_projections_in<T>(&self, param_env: ty::ParamEnv<'tcx>, value: &T) -> T::Lifted\n-        where T: TypeFoldable<'tcx> + ty::Lift<'gcx>\n-    {\n-        let mut selcx = traits::SelectionContext::new(self);\n-        let cause = traits::ObligationCause::dummy();\n-        let traits::Normalized { value: result, obligations } =\n-            traits::normalize(&mut selcx, param_env, cause, value);\n-\n-        debug!(\"normalize_projections_in: result={:?} obligations={:?}\",\n-                result, obligations);\n-\n-        let mut fulfill_cx = traits::FulfillmentContext::new();\n-\n-        for obligation in obligations {\n-            fulfill_cx.register_predicate_obligation(self, obligation);\n-        }\n-\n-        self.drain_fulfillment_cx_or_panic(DUMMY_SP, &mut fulfill_cx, &result)\n-    }\n-\n     /// Finishes processes any obligations that remain in the\n     /// fulfillment context, and then returns the result with all type\n     /// variables removed and regions erased. Because this is intended"}, {"sha": "a2a5aa246cf776ce876169554ef65ce9e1001380", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -770,7 +770,10 @@ fn vtable_methods<'a, 'tcx>(\n                 // the trait type may have higher-ranked lifetimes in it;\n                 // so erase them if they appear, so that we get the type\n                 // at some particular call site\n-                let substs = tcx.erase_late_bound_regions_and_normalize(&ty::Binder(substs));\n+                let substs = tcx.normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &ty::Binder(substs),\n+                );\n \n                 // It's possible that the method relies on where clauses that\n                 // do not hold for this particular set of type parameters."}, {"sha": "c97f6f199d2f54518433aedab677278f4ab9b2dc", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 5, "deletions": 75, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -14,14 +14,13 @@\n // general routines.\n \n use dep_graph::{DepKind, DepTrackingMapConfig};\n-use infer::TransNormalize;\n use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n use hir::def_id::DefId;\n use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, Vtable};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::{Subst, Substs};\n-use ty::fold::{TypeFoldable, TypeFolder};\n+use ty::fold::TypeFoldable;\n \n /// Attempts to resolve an obligation to a vtable.. The result is\n /// a shallow vtable resolution -- meaning that we do not\n@@ -93,12 +92,11 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                                        param_substs: &Substs<'tcx>,\n                                        value: &T)\n                                        -> T\n-        where T: TransNormalize<'tcx>\n+        where T: TypeFoldable<'tcx>\n     {\n         debug!(\"apply_param_substs(param_substs={:?}, value={:?})\", param_substs, value);\n         let substituted = value.subst(self, param_substs);\n-        let substituted = self.erase_regions(&substituted);\n-        AssociatedTypeNormalizer::new(self).fold(&substituted)\n+        self.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substituted)\n     }\n \n     pub fn trans_apply_param_substs_env<T>(\n@@ -108,7 +106,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         value: &T,\n     ) -> T\n     where\n-        T: TransNormalize<'tcx>,\n+        T: TypeFoldable<'tcx>,\n     {\n         debug!(\n             \"apply_param_substs_env(param_substs={:?}, value={:?}, param_env={:?})\",\n@@ -117,8 +115,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             param_env,\n         );\n         let substituted = value.subst(self, param_substs);\n-        let substituted = self.erase_regions(&substituted);\n-        AssociatedTypeNormalizerEnv::new(self, param_env).fold(&substituted)\n+        self.normalize_erasing_regions(param_env, substituted)\n     }\n \n     pub fn trans_impl_self_ty(&self, def_id: DefId, substs: &'tcx Substs<'tcx>)\n@@ -128,73 +125,6 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     }\n }\n \n-struct AssociatedTypeNormalizer<'a, 'gcx: 'a> {\n-    tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-}\n-\n-impl<'a, 'gcx> AssociatedTypeNormalizer<'a, 'gcx> {\n-    fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>) -> Self {\n-        AssociatedTypeNormalizer { tcx }\n-    }\n-\n-    fn fold<T:TypeFoldable<'gcx>>(&mut self, value: &T) -> T {\n-        if !value.has_projections() {\n-            value.clone()\n-        } else {\n-            value.fold_with(self)\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'gcx> {\n-    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'gcx> {\n-        self.tcx\n-    }\n-\n-    fn fold_ty(&mut self, ty: Ty<'gcx>) -> Ty<'gcx> {\n-        if !ty.has_projections() {\n-            ty\n-        } else {\n-            debug!(\"AssociatedTypeNormalizer: ty={:?}\", ty);\n-            self.tcx.fully_normalize_monormophic_ty(ty)\n-        }\n-    }\n-}\n-\n-struct AssociatedTypeNormalizerEnv<'a, 'gcx: 'a> {\n-    tcx: TyCtxt<'a, 'gcx, 'gcx>,\n-    param_env: ty::ParamEnv<'gcx>,\n-}\n-\n-impl<'a, 'gcx> AssociatedTypeNormalizerEnv<'a, 'gcx> {\n-    fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>, param_env: ty::ParamEnv<'gcx>) -> Self {\n-        Self { tcx, param_env }\n-    }\n-\n-    fn fold<T: TypeFoldable<'gcx>>(&mut self, value: &T) -> T {\n-        if !value.has_projections() {\n-            value.clone()\n-        } else {\n-            value.fold_with(self)\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizerEnv<'a, 'gcx> {\n-    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'gcx> {\n-        self.tcx\n-    }\n-\n-    fn fold_ty(&mut self, ty: Ty<'gcx>) -> Ty<'gcx> {\n-        if !ty.has_projections() {\n-            ty\n-        } else {\n-            debug!(\"AssociatedTypeNormalizerEnv: ty={:?}\", ty);\n-            self.tcx.normalize_associated_type_in_env(&ty, self.param_env)\n-        }\n-    }\n-}\n-\n // Implement DepTrackingMapConfig for `trait_cache`\n pub struct TraitSelectionCache<'tcx> {\n     data: PhantomData<&'tcx ()>"}, {"sha": "9a687028b582c3ed9c93c04fc9a3993e0d042086", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -2537,9 +2537,6 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.features().clone_closures\n     };\n-    providers.fully_normalize_monormophic_ty = |tcx, ty| {\n-        tcx.fully_normalize_associated_types_in(&ty)\n-    };\n     providers.features_query = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Lrc::new(tcx.sess.features_untracked().clone())"}, {"sha": "180fb9cabd3f5b4b18b4bab7d2c16442981ca1e6", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -352,7 +352,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n         closure_did, substs);\n \n     let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n+    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     assert_eq!(sig.inputs().len(), 1);\n     let substs = tcx.mk_substs([Kind::from(self_ty), sig.inputs()[0].into()].iter().cloned());\n "}, {"sha": "04353d2ece192dcdef6bd2da93021758d7dc67dd", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -1213,7 +1213,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     data_ptr.valid_range.start = 1;\n                 }\n \n-                let pointee = tcx.normalize_associated_type_in_env(&pointee, param_env);\n+                let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n                 if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {\n                     return Ok(tcx.intern_layout(LayoutDetails::scalar(self, data_ptr)));\n                 }\n@@ -1241,7 +1241,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             // Arrays and slices.\n             ty::TyArray(element, mut count) => {\n                 if count.has_projections() {\n-                    count = tcx.normalize_associated_type_in_env(&count, param_env);\n+                    count = tcx.normalize_erasing_regions(param_env, count);\n                     if count.has_projections() {\n                         return Err(LayoutError::Unknown(ty));\n                     }\n@@ -1686,7 +1686,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n             // Types with no meaningful known layout.\n             ty::TyProjection(_) | ty::TyAnon(..) => {\n-                let normalized = tcx.normalize_associated_type_in_env(&ty, param_env);\n+                let normalized = tcx.normalize_erasing_regions(param_env, ty);\n                 if ty == normalized {\n                     return Err(LayoutError::Unknown(ty));\n                 }\n@@ -1953,7 +1953,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n             }\n \n             ty::TyProjection(_) | ty::TyAnon(..) => {\n-                let normalized = tcx.normalize_associated_type_in_env(&ty, param_env);\n+                let normalized = tcx.normalize_erasing_regions(param_env, ty);\n                 if ty == normalized {\n                     Err(err)\n                 } else {\n@@ -2059,7 +2059,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n     /// executes in \"reveal all\" mode.\n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n         let param_env = self.param_env.with_reveal_all();\n-        let ty = self.tcx.normalize_associated_type_in_env(&ty, param_env);\n+        let ty = self.tcx.normalize_erasing_regions(param_env, ty);\n         let details = self.tcx.layout_raw(param_env.and(ty))?;\n         let layout = TyLayout {\n             ty,\n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx\n     /// executes in \"reveal all\" mode.\n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n         let param_env = self.param_env.with_reveal_all();\n-        let ty = self.tcx.normalize_associated_type_in_env(&ty, param_env);\n+        let ty = self.tcx.normalize_erasing_regions(param_env, ty);\n         let details = self.tcx.layout_raw(param_env.and(ty))?;\n         let layout = TyLayout {\n             ty,"}, {"sha": "dbfe7770bbde03c2158cf75111675ae6eec86265", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -610,12 +610,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::has_copy_closures<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::fully_normalize_monormophic_ty<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: Ty) -> String {\n-        format!(\"normalizing types\")\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up enabled feature gates\")"}, {"sha": "7d726d2e3cd5dfc989411085b788fd45670c486d", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -384,7 +384,6 @@ define_maps! { <'tcx>\n     // Normally you would just use `tcx.erase_regions(&value)`,\n     // however, which uses this query as a kind of cache.\n     [] fn erase_regions_ty: erase_regions_ty(Ty<'tcx>) -> Ty<'tcx>,\n-    [] fn fully_normalize_monormophic_ty: normalize_ty_node(Ty<'tcx>) -> Ty<'tcx>,\n \n     /// Do not call this query directly: invoke `normalize` instead.\n     [] fn normalize_projection_ty: NormalizeProjectionTy(\n@@ -565,10 +564,6 @@ fn vtable_methods_node<'tcx>(trait_ref: ty::PolyTraitRef<'tcx>) -> DepConstructo\n     DepConstructor::VtableMethods{ trait_ref }\n }\n \n-fn normalize_ty_node<'tcx>(_: Ty<'tcx>) -> DepConstructor<'tcx> {\n-    DepConstructor::NormalizeTy\n-}\n-\n fn substitute_normalize_and_test_predicates_node<'tcx>(key: (DefId, &'tcx Substs<'tcx>))\n                                             -> DepConstructor<'tcx> {\n     DepConstructor::SubstituteNormalizeAndTestPredicates { key }"}, {"sha": "bc7186f781a82498053208d8ca352be178276306", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -774,7 +774,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::EraseRegionsTy |\n         DepKind::NormalizeProjectionTy |\n         DepKind::NormalizeTyAfterErasingRegions |\n-        DepKind::NormalizeTy |\n         DepKind::DropckOutlives |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |"}, {"sha": "445fe0cc40197dfef59c8278b0c4496e39756990", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -12,7 +12,7 @@\n \n use rustc::hir::map as hir_map;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, AdtKind, Ty, TyCtxt};\n+use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, LayoutOf};\n use util::nodemap::FxHashSet;\n use lint::{LateContext, LintContext, LintArray};\n@@ -509,8 +509,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // make sure the fields are actually safe.\n                         let mut all_phantom = true;\n                         for field in &def.non_enum_variant().fields {\n-                            let field_ty = cx.fully_normalize_associated_types_in(\n-                                &field.ty(cx, substs)\n+                            let field_ty = cx.normalize_erasing_regions(\n+                                ParamEnv::reveal_all(),\n+                                field.ty(cx, substs),\n                             );\n                             // repr(transparent) types are allowed to have arbitrary ZSTs, not just\n                             // PhantomData -- skip checking all ZST fields\n@@ -556,8 +557,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n                         let mut all_phantom = true;\n                         for field in &def.non_enum_variant().fields {\n-                            let field_ty = cx.fully_normalize_associated_types_in(\n-                                &field.ty(cx, substs)\n+                            let field_ty = cx.normalize_erasing_regions(\n+                                ParamEnv::reveal_all(),\n+                                field.ty(cx, substs),\n                             );\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n@@ -596,8 +598,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         // Check the contained variants.\n                         for variant in &def.variants {\n                             for field in &variant.fields {\n-                                let arg = cx.fully_normalize_associated_types_in(\n-                                    &field.ty(cx, substs)\n+                                let arg = cx.normalize_erasing_regions(\n+                                    ParamEnv::reveal_all(),\n+                                    field.ty(cx, substs),\n                                 );\n                                 let r = self.check_type_for_ffi(cache, arg);\n                                 match r {\n@@ -716,7 +719,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = self.cx.tcx.fully_normalize_associated_types_in(&ty);\n+        let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}"}, {"sha": "8da7c497973e7e7599ef62e1ef2b7b58c325fa41", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -732,7 +732,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 for (index, field) in def.all_fields().enumerate() {\n                     let gcx = self.tcx.global_tcx();\n                     let field_ty = field.ty(gcx, substs);\n-                    let field_ty = gcx.normalize_associated_type_in_env(&field_ty, self.param_env);\n+                    let field_ty = gcx.normalize_erasing_regions(self.param_env, field_ty);\n                     let place = drop_place.clone().field(Field::new(index), field_ty);\n \n                     self.visit_terminator_drop(loc, term, flow_state, &place, field_ty, span);"}, {"sha": "abe45267a1f9e1482596d4876c55162f1eb87663", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -285,10 +285,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     pub fn monomorphize(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n         // miri doesn't care about lifetimes, and will choke on some crazy ones\n         // let's simply get rid of them\n-        let without_lifetimes = self.tcx.erase_regions(&ty);\n-        let substituted = without_lifetimes.subst(*self.tcx, substs);\n-        let substituted = self.tcx.fully_normalize_monormophic_ty(&substituted);\n-        substituted\n+        let substituted = ty.subst(*self.tcx, substs);\n+        self.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substituted)\n     }\n \n     /// Return the size and aligment of the value at the given type."}, {"sha": "a729e3a5dda822e6de273b363b33d986c4b99c30", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -75,8 +75,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                         match instance_ty.sty {\n                             ty::TyFnDef(..) => {\n                                 let real_sig = instance_ty.fn_sig(*self.tcx);\n-                                let sig = self.tcx.erase_late_bound_regions_and_normalize(&sig);\n-                                let real_sig = self.tcx.erase_late_bound_regions_and_normalize(&real_sig);\n+                                let sig = self.tcx.normalize_erasing_late_bound_regions(\n+                                    ty::ParamEnv::reveal_all(),\n+                                    &sig,\n+                                );\n+                                let real_sig = self.tcx.normalize_erasing_late_bound_regions(\n+                                    ty::ParamEnv::reveal_all(),\n+                                    &real_sig,\n+                                );\n                                 if !self.check_sig_compat(sig, real_sig)? {\n                                     return err!(FunctionPointerTyMismatch(real_sig, sig));\n                                 }\n@@ -95,7 +101,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     }\n                 };\n                 let args = self.operands_to_args(args)?;\n-                let sig = self.tcx.erase_late_bound_regions_and_normalize(&sig);\n+                let sig = self.tcx.normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &sig,\n+                );\n                 self.eval_fn_call(\n                     fn_def,\n                     destination,"}, {"sha": "10e2a84038de120456a7768076e5cd73d97b819a", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -347,7 +347,10 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n                 output.push_str(\"fn(\");\n \n-                let sig = self.tcx.erase_late_bound_regions_and_normalize(&sig);\n+                let sig = self.tcx.normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &sig,\n+                );\n \n                 if !sig.inputs().is_empty() {\n                     for &parameter_type in sig.inputs() {"}, {"sha": "5c38735d9203460f265bb46fadda1581e0d1e7dd", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -88,7 +88,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n         closure_did, substs);\n \n     let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n+    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     assert_eq!(sig.inputs().len(), 1);\n     let substs = tcx.mk_substs([\n         Kind::from(self_ty),"}, {"sha": "62af09cc491096922fc5c8e3280b7b9c8ca305f6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -832,14 +832,11 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n     let tcx = infcx.tcx;\n     let gcx = tcx.global_tcx();\n     let def_id = tcx.hir.local_def_id(ctor_id);\n-    let sig = gcx.fn_sig(def_id).no_late_bound_regions()\n-        .expect(\"LBR in ADT constructor signature\");\n-    let sig = gcx.erase_regions(&sig);\n     let param_env = gcx.param_env(def_id);\n \n-    // Normalize the sig now that we have liberated the late-bound\n-    // regions.\n-    let sig = gcx.normalize_associated_type_in_env(&sig, param_env);\n+    // Normalize the sig.\n+    let sig = gcx.fn_sig(def_id).no_late_bound_regions().expect(\"LBR in ADT constructor signature\");\n+    let sig = gcx.normalize_erasing_regions(param_env, sig);\n \n     let (adt_def, substs) = match sig.output().sty {\n         ty::TyAdt(adt_def, substs) => (adt_def, substs),"}, {"sha": "3f5208dd2d4b8c67f1cfc5184e788528aa527834", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -206,11 +206,10 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             let field = Field::new(i);\n             let subpath = self.elaborator.field_subpath(variant_path, field);\n \n-            let field_ty =\n-                self.tcx().normalize_associated_type_in_env(\n-                    &f.ty(self.tcx(), substs),\n-                    self.elaborator.param_env()\n-                );\n+            let field_ty = self.tcx().normalize_erasing_regions(\n+                self.elaborator.param_env(),\n+                f.ty(self.tcx(), substs),\n+            );\n             (base_place.clone().field(field, field_ty), subpath)\n         }).collect()\n     }"}, {"sha": "c1dc8c6684a17ca8216b2e7fda5691b8f9edce9c", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -650,7 +650,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n                        -> Self {\n         let fn_ty = instance.ty(cx.tcx);\n         let sig = ty_fn_sig(cx, fn_ty);\n-        let sig = cx.tcx.erase_late_bound_regions_and_normalize(&sig);\n+        let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         FnType::new(cx, sig, &[])\n     }\n "}, {"sha": "4da082e9d50f1088440b1654153d735e9a4d2176", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -462,7 +462,7 @@ pub fn trans_instance<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, instance: Instance<'tc\n \n     let fn_ty = instance.ty(cx.tcx);\n     let sig = common::ty_fn_sig(cx, fn_ty);\n-    let sig = cx.tcx.erase_late_bound_regions_and_normalize(&sig);\n+    let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n     let lldecl = match cx.instances.borrow().get(&instance) {\n         Some(&val) => val,"}, {"sha": "20cc57522b5d768d2b3e88037b442793f3c048f8", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -30,7 +30,7 @@ use rustc::ty::util::TypeIdHasher;\n use rustc::ich::Fingerprint;\n use rustc::ty::Instance;\n use common::CodegenCx;\n-use rustc::ty::{self, AdtKind, Ty, TyCtxt};\n+use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n use rustc::session::config;\n use rustc::util::nodemap::FxHashMap;\n@@ -353,7 +353,10 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                       span: Span)\n                                       -> MetadataCreationResult\n {\n-    let signature = cx.tcx.erase_late_bound_regions_and_normalize(&signature);\n+    let signature = cx.tcx.normalize_erasing_late_bound_regions(\n+        ty::ParamEnv::reveal_all(),\n+        &signature,\n+    );\n \n     let mut signature_metadata: Vec<DIType> = Vec::with_capacity(signature.inputs().len() + 1);\n \n@@ -589,7 +592,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         ty::TyGenerator(def_id, substs, _) => {\n             let upvar_tys : Vec<_> = substs.field_tys(def_id, cx.tcx).map(|t| {\n-                cx.tcx.fully_normalize_associated_types_in(&t)\n+                cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n             }).collect();\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "683e1835968f802992f84c5fe095db660f10ca1e", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -30,7 +30,7 @@ use abi::Abi;\n use common::CodegenCx;\n use builder::Builder;\n use monomorphize::Instance;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, ParamEnv, Ty};\n use rustc::mir;\n use rustc::session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n@@ -378,7 +378,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            let actual_type = cx.tcx.fully_normalize_associated_types_in(&actual_type);\n+            let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), actual_type);\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n                                                                actual_type,\n@@ -391,7 +391,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n             let names = get_type_parameter_names(cx, generics);\n             substs.types().zip(names).map(|(ty, name)| {\n-                let actual_type = cx.tcx.fully_normalize_associated_types_in(&ty);\n+                let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 unsafe {"}, {"sha": "211de95c96ede4376fc96241d25b9468eea49f5d", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -117,8 +117,10 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         },\n         ty::TyDynamic(ref trait_data, ..) => {\n             if let Some(principal) = trait_data.principal() {\n-                let principal = cx.tcx.erase_late_bound_regions_and_normalize(\n-                    &principal);\n+                let principal = cx.tcx.normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &principal,\n+                );\n                 push_item_name(cx, principal.def_id, false, output);\n                 push_type_params(cx, principal.substs, output);\n             }\n@@ -138,7 +140,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n             output.push_str(\"fn(\");\n \n-            let sig = cx.tcx.erase_late_bound_regions_and_normalize(&sig);\n+            let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n             if !sig.inputs().is_empty() {\n                 for &parameter_type in sig.inputs() {\n                     push_debuginfo_type_name(cx, parameter_type, true, output);"}, {"sha": "c2010feb1b63885f2a5df185eec6e8b0d57a5c7c", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -22,7 +22,7 @@\n \n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n-use rustc::ty::Ty;\n+use rustc::ty::{self, Ty};\n use rustc::session::config::Sanitizer;\n use rustc_back::PanicStrategy;\n use abi::{Abi, FnType};\n@@ -127,7 +127,7 @@ pub fn declare_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, name: &str,\n                             fn_type: Ty<'tcx>) -> ValueRef {\n     debug!(\"declare_rust_fn(name={:?}, fn_type={:?})\", name, fn_type);\n     let sig = common::ty_fn_sig(cx, fn_type);\n-    let sig = cx.tcx.erase_late_bound_regions_and_normalize(&sig);\n+    let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n     let fty = FnType::new(cx, sig, &[]);"}, {"sha": "4cef7470c62d738ab181381f61d2182eb3a59ebe", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -100,7 +100,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n     };\n \n     let sig = callee_ty.fn_sig(tcx);\n-    let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n+    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     let arg_tys = sig.inputs();\n     let ret_ty = sig.output();\n     let name = &*tcx.item_name(def_id);\n@@ -1035,7 +1035,10 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n \n \n     let tcx = bx.tcx();\n-    let sig = tcx.erase_late_bound_regions_and_normalize(&callee_ty.fn_sig(tcx));\n+    let sig = tcx.normalize_erasing_late_bound_regions(\n+        ty::ParamEnv::reveal_all(),\n+        &callee_ty.fn_sig(tcx),\n+    );\n     let arg_tys = sig.inputs();\n \n     // every intrinsic takes a SIMD vector as its first argument"}, {"sha": "96c5bb3b91d2e72cd3b4ec82a374f2229c03a347", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -281,7 +281,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     ty::TyDynamic(..) => {\n                         let fn_ty = drop_fn.ty(bx.cx.tcx);\n                         let sig = common::ty_fn_sig(bx.cx, fn_ty);\n-                        let sig = bx.tcx().erase_late_bound_regions_and_normalize(&sig);\n+                        let sig = bx.tcx().normalize_erasing_late_bound_regions(\n+                            ty::ParamEnv::reveal_all(),\n+                            &sig,\n+                        );\n                         let fn_ty = FnType::new_vtable(bx.cx, sig, &[]);\n                         args = &args[..1];\n                         (meth::DESTRUCTOR.get_fn(&bx, place.llextra, &fn_ty), fn_ty)\n@@ -430,7 +433,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 };\n                 let def = instance.map(|i| i.def);\n                 let sig = callee.layout.ty.fn_sig(bx.tcx());\n-                let sig = bx.tcx().erase_late_bound_regions_and_normalize(&sig);\n+                let sig = bx.tcx().normalize_erasing_late_bound_regions(\n+                    ty::ParamEnv::reveal_all(),\n+                    &sig,\n+                );\n                 let abi = sig.abi;\n \n                 // Handle intrinsics old trans wants Expr's for, ourselves."}, {"sha": "a92a59edfde1f07a9bed1fc6d5b1366aec16a258", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -16,7 +16,6 @@ use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n-use rustc::infer::TransNormalize;\n use rustc::session::config::FullDebugInfo;\n use base;\n use builder::Builder;\n@@ -108,7 +107,7 @@ pub struct FunctionCx<'a, 'tcx:'a> {\n \n impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n-        where T: TransNormalize<'tcx>\n+        where T: TypeFoldable<'tcx>\n     {\n         self.cx.tcx.trans_apply_param_substs(self.param_substs, value)\n     }"}, {"sha": "f37114ee4acd1a16f4f4254273e7c7a29db7f0df", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4728e494e50a3c07ff3a7d3f16369903ac70d49/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=e4728e494e50a3c07ff3a7d3f16369903ac70d49", "patch": "@@ -258,7 +258,10 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                     cx.layout_of(self.ty.boxed_ty()).llvm_type(cx).ptr_to()\n                 }\n                 ty::TyFnPtr(sig) => {\n-                    let sig = cx.tcx.erase_late_bound_regions_and_normalize(&sig);\n+                    let sig = cx.tcx.normalize_erasing_late_bound_regions(\n+                        ty::ParamEnv::reveal_all(),\n+                        &sig,\n+                    );\n                     FnType::new(cx, sig, &[]).llvm_type(cx).ptr_to()\n                 }\n                 _ => self.scalar_llvm_type_at(cx, scalar, Size::from_bytes(0))"}]}