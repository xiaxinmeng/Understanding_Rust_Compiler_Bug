{"sha": "de35c4293d030208f4026883e9d296c8cc5607cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzVjNDI5M2QwMzAyMDhmNDAyNjg4M2U5ZDI5NmM4Y2M1NjA3Y2M=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-29T20:17:38Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T02:20:33Z"}, "message": "Remove `ops::non_const`\n\nThis helper function was meant to reduce code duplication between\nconst-checking pre- and post-drop-elaboration. Most of the functionality\nis only relevant for the pre-drop-elaboration pass.", "tree": {"sha": "3760056f741f957a78a4d9e47967ee03ad9a1efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3760056f741f957a78a4d9e47967ee03ad9a1efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de35c4293d030208f4026883e9d296c8cc5607cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de35c4293d030208f4026883e9d296c8cc5607cc", "html_url": "https://github.com/rust-lang/rust/commit/de35c4293d030208f4026883e9d296c8cc5607cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de35c4293d030208f4026883e9d296c8cc5607cc/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5093995256721564510594216d55588278fa5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5093995256721564510594216d55588278fa5f", "html_url": "https://github.com/rust-lang/rust/commit/ce5093995256721564510594216d55588278fa5f"}], "stats": {"total": 113, "additions": 55, "deletions": 58}, "files": [{"sha": "3aa9aca97c2f3498a49b6dd5b2d308767593fd0e", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/de35c4293d030208f4026883e9d296c8cc5607cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de35c4293d030208f4026883e9d296c8cc5607cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=de35c4293d030208f4026883e9d296c8cc5607cc", "patch": "@@ -1,6 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::config::nightly_options;\n@@ -10,56 +10,6 @@ use rustc_span::{Span, Symbol};\n \n use super::ConstCx;\n \n-/// Emits an error and returns `true` if `op` is not allowed in the given const context.\n-pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) -> bool {\n-    debug!(\"illegal_op: op={:?}\", op);\n-\n-    let gate = match op.status_in_item(ccx) {\n-        Status::Allowed => return false,\n-\n-        Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => {\n-            let unstable_in_stable = ccx.is_const_stable_const_fn()\n-                && !super::allow_internal_unstable(ccx.tcx, ccx.def_id.to_def_id(), gate);\n-\n-            if unstable_in_stable {\n-                ccx.tcx.sess\n-                    .struct_span_err(\n-                        span,\n-                        &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n-                    )\n-                    .span_suggestion(\n-                        ccx.body.span,\n-                        \"if it is not part of the public API, make this function unstably const\",\n-                        concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n-                        Applicability::HasPlaceholders,\n-                    )\n-                    .span_suggestion(\n-                        ccx.body.span,\n-                        \"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\",\n-                        format!(\"#[allow_internal_unstable({})]\", gate),\n-                        Applicability:: MaybeIncorrect,\n-                    )\n-                    .emit();\n-            }\n-\n-            return unstable_in_stable;\n-        }\n-\n-        Status::Unstable(gate) => Some(gate),\n-        Status::Forbidden => None,\n-    };\n-\n-    if ccx.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-        ccx.tcx.sess.miri_unleashed_feature(span, gate);\n-        return false;\n-    }\n-\n-    let mut err = op.build_error(ccx, span);\n-    assert!(err.is_error());\n-    err.emit();\n-    true\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum Status {\n     Allowed,"}, {"sha": "9b2568d5abb050a09558696cf808e6488f7428b6", "filename": "compiler/rustc_mir/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de35c4293d030208f4026883e9d296c8cc5607cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de35c4293d030208f4026883e9d296c8cc5607cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=de35c4293d030208f4026883e9d296c8cc5607cc", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::{self, BasicBlock, Location};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n-use super::ops;\n+use super::ops::{self, NonConstOp};\n use super::qualifs::{NeedsDrop, Qualif};\n use super::validation::Qualifs;\n use super::ConstCx;\n@@ -56,7 +56,7 @@ impl std::ops::Deref for CheckLiveDrops<'mir, 'tcx> {\n \n impl CheckLiveDrops<'mir, 'tcx> {\n     fn check_live_drop(&self, span: Span) {\n-        ops::non_const(self.ccx, ops::LiveDrop { dropped_at: None }, span);\n+        ops::LiveDrop { dropped_at: None }.build_error(self.ccx, span).emit();\n     }\n }\n "}, {"sha": "4266dfb496565b8eb1fa764dc79d7b05078b7ac5", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/de35c4293d030208f4026883e9d296c8cc5607cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de35c4293d030208f4026883e9d296c8cc5607cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=de35c4293d030208f4026883e9d296c8cc5607cc", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -11,13 +11,13 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt, TypeAndMut,\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n \n use std::ops::Deref;\n \n-use super::ops::{self, NonConstOp};\n+use super::ops::{self, NonConstOp, Status};\n use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, Qualif};\n@@ -277,8 +277,33 @@ impl Validator<'mir, 'tcx> {\n             return;\n         }\n \n-        let err_emitted = ops::non_const(self.ccx, op, span);\n-        if err_emitted && O::STOPS_CONST_CHECKING {\n+        let gate = match op.status_in_item(self.ccx) {\n+            Status::Allowed => return,\n+\n+            Status::Unstable(gate) if self.tcx.features().enabled(gate) => {\n+                let unstable_in_stable = self.ccx.is_const_stable_const_fn()\n+                    && !super::allow_internal_unstable(self.tcx, self.def_id.to_def_id(), gate);\n+                if unstable_in_stable {\n+                    emit_unstable_in_stable_error(self.ccx, span, gate);\n+                }\n+\n+                return;\n+            }\n+\n+            Status::Unstable(gate) => Some(gate),\n+            Status::Forbidden => None,\n+        };\n+\n+        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+            self.tcx.sess.miri_unleashed_feature(span, gate);\n+            return;\n+        }\n+\n+        let mut err = op.build_error(self.ccx, span);\n+        assert!(err.is_error());\n+        err.emit();\n+\n+        if O::STOPS_CONST_CHECKING {\n             self.const_checking_stopped = true;\n         }\n     }\n@@ -892,3 +917,25 @@ fn is_async_fn(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n         .fn_sig_by_hir_id(hir_id)\n         .map_or(false, |sig| sig.header.asyncness == hir::IsAsync::Async)\n }\n+\n+fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n+    ccx.tcx\n+        .sess\n+        .struct_span_err(\n+            span,\n+            &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n+        )\n+        .span_suggestion(\n+            ccx.body.span,\n+            \"if it is not part of the public API, make this function unstably const\",\n+            concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n+            Applicability::HasPlaceholders,\n+        )\n+        .span_suggestion(\n+            ccx.body.span,\n+            \"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\",\n+            format!(\"#[allow_internal_unstable({})]\", gate),\n+            Applicability::MaybeIncorrect,\n+        )\n+        .emit();\n+}"}]}