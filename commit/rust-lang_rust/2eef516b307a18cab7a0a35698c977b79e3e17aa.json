{"sha": "2eef516b307a18cab7a0a35698c977b79e3e17aa", "node_id": "C_kwDOAAsO6NoAKDJlZWY1MTZiMzA3YTE4Y2FiN2EwYTM1Njk4Yzk3N2I3OWUzZTE3YWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T23:00:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-18T23:00:30Z"}, "message": "Rollup merge of #107023 - scottmcm:stop-shouting, r=Nilstrieb\n\nStop using `BREAK` & `CONTINUE` in compiler\n\nSwitching them to `Break(())` and `Continue(())` instead.\n\nEntirely search-and-replace, though there's one spot where rustfmt insisted on a reformatting too.\n\nlibs-api would like to remove these constants (https://github.com/rust-lang/rust/pull/102697#issuecomment-1385705202), so stop using them in compiler to make the removal PR later smaller.", "tree": {"sha": "37419eb0ae3e64a008bddfae777a32b0d7075ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37419eb0ae3e64a008bddfae777a32b0d7075ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eef516b307a18cab7a0a35698c977b79e3e17aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjyHoOCRBK7hj4Ov3rIwAA6E0IAFHkXQlcES4xsCRfTApJitGQ\nWyxuA0peBli9v6/MNXp/V4SLE5WFXrGdFqE/1JvigWjHxdzgoqXdhkWKLkWIi4P6\nQJH5Zf8x5hOAnJoQNugJtDC6hc+5/1UmioB3WGmol3lNzKsWQG5HSMCMqRc0jlLQ\ndj9Hzf2IWmKTSPQSPTnhTEC6O89zsSo7PVI5+jxbNSFCdn8NEWmZHdLAMpFiKYk/\n4QH6Ce/UrLchDw2RFO0Z+PsYlb8tfUpcevzh0M+ElkAypkZRzYptE9dRhU9pJYxW\nUFGpGTm0VapDURhv0OBNrZGKWMNj5Vo6QnIP8gXYLU//V8TvPAR/Z+f7J/wRRfw=\n=sjwO\n-----END PGP SIGNATURE-----\n", "payload": "tree 37419eb0ae3e64a008bddfae777a32b0d7075ed5\nparent cf5068bd623a68cf8d190159574839c35197cb06\nparent 7d57685682778900cb3b8d57605a143d402b8d0c\nauthor Michael Goulet <michael@errs.io> 1674082830 -0500\ncommitter GitHub <noreply@github.com> 1674082830 -0500\n\nRollup merge of #107023 - scottmcm:stop-shouting, r=Nilstrieb\n\nStop using `BREAK` & `CONTINUE` in compiler\n\nSwitching them to `Break(())` and `Continue(())` instead.\n\nEntirely search-and-replace, though there's one spot where rustfmt insisted on a reformatting too.\n\nlibs-api would like to remove these constants (https://github.com/rust-lang/rust/pull/102697#issuecomment-1385705202), so stop using them in compiler to make the removal PR later smaller.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eef516b307a18cab7a0a35698c977b79e3e17aa", "html_url": "https://github.com/rust-lang/rust/commit/2eef516b307a18cab7a0a35698c977b79e3e17aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eef516b307a18cab7a0a35698c977b79e3e17aa/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf5068bd623a68cf8d190159574839c35197cb06", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5068bd623a68cf8d190159574839c35197cb06", "html_url": "https://github.com/rust-lang/rust/commit/cf5068bd623a68cf8d190159574839c35197cb06"}, {"sha": "7d57685682778900cb3b8d57605a143d402b8d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d57685682778900cb3b8d57605a143d402b8d0c", "html_url": "https://github.com/rust-lang/rust/commit/7d57685682778900cb3b8d57605a143d402b8d0c"}], "stats": {"total": 224, "additions": 111, "deletions": 113}, "files": [{"sha": "ca6b01d8a8a7a13483b2acf015384be90d7e9bcd", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -225,7 +225,7 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n     /// `align_offset(ptr, target_align)` needs special handling in const eval, because the pointer\n     /// may not have an address.\n     ///\n-    /// If `ptr` does have a known address, then we return `CONTINUE` and the function call should\n+    /// If `ptr` does have a known address, then we return `Continue(())` and the function call should\n     /// proceed as normal.\n     ///\n     /// If `ptr` doesn't have an address, but its underlying allocation's alignment is at most\n@@ -273,18 +273,18 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n                         ret,\n                         StackPopUnwind::NotAllowed,\n                     )?;\n-                    Ok(ControlFlow::BREAK)\n+                    Ok(ControlFlow::Break(()))\n                 } else {\n                     // Not alignable in const, return `usize::MAX`.\n                     let usize_max = Scalar::from_machine_usize(self.machine_usize_max(), self);\n                     self.write_scalar(usize_max, dest)?;\n                     self.return_to_block(ret)?;\n-                    Ok(ControlFlow::BREAK)\n+                    Ok(ControlFlow::Break(()))\n                 }\n             }\n             Err(_addr) => {\n                 // The pointer has an address, continue with function call.\n-                Ok(ControlFlow::CONTINUE)\n+                Ok(ControlFlow::Continue(()))\n             }\n         }\n     }"}, {"sha": "cabc65e2c077e674d356938d939341dbb8bafb54", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -26,7 +26,7 @@ where\n \n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if !ty.needs_subst() {\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n \n             match *ty.kind() {\n@@ -48,7 +48,7 @@ where\n                             return subst.visit_with(self);\n                         }\n                     }\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n                 _ => ty.super_visit_with(self),\n             }"}, {"sha": "57b91df2d0708f8f06e35438518c51b6f148df6c", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -6,7 +6,6 @@ Rust MIR: a lowered representation of Rust.\n \n #![feature(assert_matches)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n #![feature(let_chains)]"}, {"sha": "8a9af300c066ef2ba1cfed4e9ef73e8606c77f9a", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -317,12 +317,12 @@ where\n         _node: G::Node,\n         _prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     /// Called after all nodes reachable from this one have been examined.\n     fn node_settled(&mut self, _node: G::Node) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     /// Behave as if no edges exist from `source` to `target`.\n@@ -346,8 +346,8 @@ where\n         prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n         match prior_status {\n-            Some(NodeStatus::Visited) => ControlFlow::BREAK,\n-            _ => ControlFlow::CONTINUE,\n+            Some(NodeStatus::Visited) => ControlFlow::Break(()),\n+            _ => ControlFlow::Continue(()),\n         }\n     }\n }"}, {"sha": "954e84c303b83d031cc4b2be76c56b4e90e1cea1", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -11,7 +11,6 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(cell_leak)]\n-#![feature(control_flow_enum)]\n #![feature(extend_one)]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]"}, {"sha": "d5e4b4cb9e7281b3490a288da82c7128f1869668", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -267,7 +267,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(?t, \"root_visit_ty\");\n             if t == self.opaque_identity_ty {\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             } else {\n                 t.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n                     tcx: self.tcx,\n@@ -282,7 +282,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n                 if self.references_parent_regions {\n                     ControlFlow::Break(t)\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }\n@@ -1439,7 +1439,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n                                 self.0.push(def);\n-                                ControlFlow::CONTINUE\n+                                ControlFlow::Continue(())\n                             }\n                             _ => t.super_visit_with(self),\n                         }"}, {"sha": "8739228e207b07e0eb1daa71c41e7e85c4dbf948", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -1428,7 +1428,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                 }\n \n                 fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    ControlFlow::BREAK\n+                    ControlFlow::Break(())\n                 }\n \n                 fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "0d070f3d118e034a0d0ce7e5119808c96444c03a", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -416,13 +416,13 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n             if t != self.self_ty_root {\n                 for impl_def_id in tcx.non_blanket_impls_for_ty(self.trait_def_id, t) {\n                     match tcx.impl_polarity(impl_def_id) {\n-                        ImplPolarity::Negative => return ControlFlow::BREAK,\n+                        ImplPolarity::Negative => return ControlFlow::Break(()),\n                         ImplPolarity::Reservation => {}\n                         // FIXME(@lcnr): That's probably not good enough, idk\n                         //\n                         // We might just want to take the rustdoc code and somehow avoid\n                         // explicit impls for `Self`.\n-                        ImplPolarity::Positive => return ControlFlow::CONTINUE,\n+                        ImplPolarity::Positive => return ControlFlow::Continue(()),\n                     }\n                 }\n             }\n@@ -440,7 +440,7 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n                         }\n                     }\n \n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n                 _ => t.super_visit_with(self),\n             }"}, {"sha": "56cc1d8fadc00e7ac6e9611c18dd0f5bcdf3039a", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         match *t.kind() {\n             ty::Alias(ty::Projection, ..) if !self.include_nonconstraining => {\n                 // projections are not injective\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n             ty::Param(data) => {\n                 self.parameters.push(Parameter::from(data));\n@@ -76,7 +76,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n         if let ty::ReEarlyBound(data) = *r {\n             self.parameters.push(Parameter::from(data));\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "079070be27983a8c72f5d04120ffff76e660ed81", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -92,7 +92,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n                         a.visit_with(self)?;\n                     }\n                 }\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             } else {\n                 substs.visit_with(self)\n             }"}, {"sha": "12a2abfa76a921d5402860d134f10c68ad8805ce", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -236,7 +236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         if t == self.expected_ty {\n-                            ControlFlow::BREAK\n+                            ControlFlow::Break(())\n                         } else {\n                             t.super_visit_with(self)\n                         }"}, {"sha": "49ad3ce50b8f560c181efa193756865e77d1f91e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -543,7 +543,7 @@ impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n                 if let Some(def_id) = preds.principal_def_id() {\n                     self.0.insert(def_id);\n                 }\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => t.super_visit_with(self),\n         }"}, {"sha": "f235cb5ab4503429be84df40c85338cf0f1b4b69", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -849,7 +849,7 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n         t.super_visit_with(self);\n         self.target_index.shift_out(1);\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -863,7 +863,7 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n             _ => {}\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "e22ba9785e1fdc7b2bfe009953bda56f8e521426", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -440,24 +440,24 @@ where\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self);\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *r {\n             // ignore bound regions, keep visiting\n-            ty::ReLateBound(_, _) => ControlFlow::CONTINUE,\n+            ty::ReLateBound(_, _) => ControlFlow::Continue(()),\n             _ => {\n                 (self.op)(r);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n         }\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // We're only interested in types involving regions\n         if !ty.flags().intersects(ty::TypeFlags::HAS_FREE_REGIONS) {\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         match ty.kind() {\n@@ -507,7 +507,7 @@ where\n             }\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "65b90aa3d79d3e285365339e8ec6812c000e09b6", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n         } else if !t.has_non_region_infer() {\n             // All const/type variables in inference types must already be resolved,\n             // no need to visit the contents.\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             // Otherwise, keep visiting.\n             t.super_visit_with(self)\n@@ -178,7 +178,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n         } else if !ct.has_non_region_infer() {\n             // All const/type variables in inference types must already be resolved,\n             // no need to visit the contents.\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             // Otherwise, keep visiting.\n             ct.super_visit_with(self)"}, {"sha": "be47a3e238c1c16ba4fcb46616264e75637718f0", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -1147,7 +1147,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !ty.has_opaque_types() {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n \n                 if let ty::Alias(ty::Opaque, ..) = ty.kind() {"}, {"sha": "1f95661ce9d5f54bb770a764c902a835bec7afe1", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -26,7 +26,7 @@ pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2:\n                 __visitor: &mut __V\n             ) -> ::std::ops::ControlFlow<__V::BreakTy> {\n                 match *self { #body_visit }\n-                ::std::ops::ControlFlow::CONTINUE\n+                ::std::ops::ControlFlow::Continue(())\n             }\n         },\n     )"}, {"sha": "250f3d0797eb52cdb2c503ab914967d26235a956", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -93,7 +93,7 @@ macro_rules! TrivialTypeTraversalImpls {\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>\n                 {\n-                    ::std::ops::ControlFlow::CONTINUE\n+                    ::std::ops::ControlFlow::Continue(())\n                 }\n             }\n         )+\n@@ -219,7 +219,7 @@ macro_rules! EnumTypeTraversalImpl {\n                         $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n-                        ::std::ops::ControlFlow::CONTINUE\n+                        ::std::ops::ControlFlow::Continue(())\n                     }\n                     $($output)*\n                 )\n@@ -237,7 +237,7 @@ macro_rules! EnumTypeTraversalImpl {\n                         $($crate::ty::visit::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n-                        ::std::ops::ControlFlow::CONTINUE\n+                        ::std::ops::ControlFlow::Continue(())\n                     }\n                     $($output)*\n                 )\n@@ -251,7 +251,7 @@ macro_rules! EnumTypeTraversalImpl {\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n-                    $variant => { ::std::ops::ControlFlow::CONTINUE }\n+                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n                     $($output)*\n                 )\n         )"}, {"sha": "d44c6809bd8305da53c92e7b9c0878475781bec4", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -4,6 +4,6 @@ use super::*;\n \n impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "5576e53e6a74d312bb1e854a7623bee376075aed", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -2468,7 +2468,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                 if not_previously_inserted {\n                     ty.super_visit_with(self)\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }"}, {"sha": "7d4d35b7fdf940fd23ae8924f2db2e9a9b9a376e", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -367,7 +367,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n \n impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -714,7 +714,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             | ty::Placeholder(..)\n             | ty::Param(..)\n             | ty::Never\n-            | ty::Foreign(..) => ControlFlow::CONTINUE,\n+            | ty::Foreign(..) => ControlFlow::Continue(()),\n         }\n     }\n }\n@@ -742,7 +742,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -844,7 +844,7 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n \n impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "a128e9025fd690035d5a3deba64d4adb0e4f7641", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -2011,7 +2011,7 @@ impl<'tcx> Ty<'tcx> {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if self.0 == t { ControlFlow::BREAK } else { t.super_visit_with(self) }\n+                if self.0 == t { ControlFlow::Break(()) } else { t.super_visit_with(self) }\n             }\n         }\n "}, {"sha": "bee3cc4d7cb9bf985a2b3b1583a472a135d51255", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -294,13 +294,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n-                        ControlFlow::CONTINUE\n+                        ControlFlow::Continue(())\n                     }\n                     _ => {\n                         if (self.callback)(r) {\n-                            ControlFlow::BREAK\n+                            ControlFlow::Break(())\n                         } else {\n-                            ControlFlow::CONTINUE\n+                            ControlFlow::Continue(())\n                         }\n                     }\n                 }\n@@ -311,7 +311,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }\n@@ -394,7 +394,7 @@ impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n         if t.outer_exclusive_binder() < self.binder_index\n             || !self.visited.insert((self.binder_index, t))\n         {\n-            return ControlFlow::BREAK;\n+            return ControlFlow::Break(());\n         }\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n@@ -512,7 +512,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         if t.outer_exclusive_binder() > self.outer_index {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -524,7 +524,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         if r.bound_at_or_above_binder(self.outer_index) {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -547,7 +547,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         if predicate.outer_exclusive_binder() > self.outer_index {\n             ControlFlow::Break(FoundEscapingVars)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }\n@@ -575,7 +575,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -585,7 +585,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -596,7 +596,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n \n@@ -605,7 +605,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         if predicate.flags().intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }\n@@ -653,7 +653,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // in the normalized form\n         if self.just_constrained {\n             if let ty::Alias(..) = t.kind() {\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n         }\n \n@@ -666,7 +666,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // in the normalized form\n         if self.just_constrained {\n             if let ty::ConstKind::Unevaluated(..) = c.kind() {\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n         }\n \n@@ -679,7 +679,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n                 self.regions.insert(br.kind);\n             }\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -726,6 +726,6 @@ impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n             );\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "a428180a4fa8295bb5bac16f0030fd5de8c31406", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -5,7 +5,6 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(min_specialization)]"}, {"sha": "f67f24b43c4d77f680053a394e8885760a69aaf3", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -118,7 +118,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             // A diverging InlineAsm is treated as non-recursing\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if destination.is_some() {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 } else {\n                     ControlFlow::Break(NonRecursive)\n                 }\n@@ -132,7 +132,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }\n-            | TerminatorKind::SwitchInt { .. } => ControlFlow::CONTINUE,\n+            | TerminatorKind::SwitchInt { .. } => ControlFlow::Continue(()),\n         }\n     }\n \n@@ -145,7 +145,7 @@ impl<'mir, 'tcx> TriColorVisitor<BasicBlocks<'tcx>> for Search<'mir, 'tcx> {\n             }\n         }\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {"}, {"sha": "f88155e4fc7928a89b6f7cd8faa9d90cf655d391", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -1,5 +1,4 @@\n #![feature(array_windows)]\n-#![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "cf13d4584a12429d5f05e07bf28119221e8c46b5", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -300,20 +300,20 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         match c.kind() {\n             ty::ConstKind::Param(param) => {\n                 debug!(?param);\n                 self.unused_parameters.mark_used(param.index);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs })\n                 if matches!(self.tcx.def_kind(def.did), DefKind::AnonConst) =>\n             {\n                 self.visit_child_body(def.did, substs);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => c.super_visit_with(self),\n         }\n@@ -322,26 +322,26 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !ty.has_non_region_param() {\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         match *ty.kind() {\n             ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n                 debug!(?def_id);\n                 // Avoid cycle errors with generators.\n                 if def_id == self.def_id {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n \n                 // Consider any generic parameters used by any closures/generators as used in the\n                 // parent.\n                 self.visit_child_body(def_id, substs);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             ty::Param(param) => {\n                 debug!(?param);\n                 self.unused_parameters.mark_used(param.index);\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => ty.super_visit_with(self),\n         }"}, {"sha": "9a5d3cceb914e48643012dd998844f8dc9c20234", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_defaults)]\n-#![feature(control_flow_enum)]\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![feature(let_chains)]\n@@ -112,7 +111,11 @@ where\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {\n         let TraitRef { def_id, substs, .. } = trait_ref;\n         self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path())?;\n-        if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n+        if self.def_id_visitor.shallow() {\n+            ControlFlow::Continue(())\n+        } else {\n+            substs.visit_with(self)\n+        }\n     }\n \n     fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n@@ -131,7 +134,7 @@ where\n             };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))\n         }\n@@ -155,7 +158,7 @@ where\n                 ty,\n                 _region,\n             ))) => ty.visit_with(self),\n-            ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..)) => ControlFlow::CONTINUE,\n+            ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..)) => ControlFlow::Continue(()),\n             ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n             ty::PredicateKind::WellFormed(arg) => arg.visit_with(self),\n             _ => bug!(\"unexpected predicate: {:?}\", predicate),\n@@ -189,7 +192,7 @@ where\n             | ty::Generator(def_id, ..) => {\n                 self.def_id_visitor.visit_def_id(def_id, \"type\", &ty)?;\n                 if self.def_id_visitor.shallow() {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n                 // Default type visitor doesn't visit signatures of fn types.\n                 // Something like `fn() -> Priv {my_func}` is considered a private type even if\n@@ -214,7 +217,7 @@ where\n                     // as visible/reachable even if both `Type` and `Trait` are private.\n                     // Ideally, associated types should be substituted in the same way as\n                     // free type aliases, but this isn't done yet.\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 }\n                 // This will also visit substs if necessary, so we don't need to recurse.\n                 return self.visit_projection_ty(proj);\n@@ -274,7 +277,7 @@ where\n         }\n \n         if self.def_id_visitor.shallow() {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             ty.super_visit_with(self)\n         }\n@@ -319,7 +322,7 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n         if let Some(def_id) = def_id.as_local() {\n             self.min = VL::new_min(self, def_id);\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -881,7 +884,7 @@ impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx>\n                 self.ev.update(def_id, self.level);\n             }\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -1368,9 +1371,9 @@ impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         descr: &dyn fmt::Display,\n     ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(())\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }\n@@ -1865,9 +1868,9 @@ impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n         descr: &dyn fmt::Display,\n     ) -> ControlFlow<Self::BreakTy> {\n         if self.check_def_id(def_id, kind, descr) {\n-            ControlFlow::BREAK\n+            ControlFlow::Break(())\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }"}, {"sha": "5f649852d0bbd8e49e44e1eea14c94df736f6197", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -614,12 +614,12 @@ impl<'tcx> OrphanChecker<'tcx> {\n \n     fn found_non_local_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<OrphanCheckEarlyExit<'tcx>> {\n         self.non_local_tys.push((t, self.in_self_ty));\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn found_param_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<OrphanCheckEarlyExit<'tcx>> {\n         if self.search_first_local_ty {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         } else {\n             ControlFlow::Break(OrphanCheckEarlyExit::ParamTy(t))\n         }\n@@ -641,7 +641,7 @@ enum OrphanCheckEarlyExit<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n     type BreakTy = OrphanCheckEarlyExit<'tcx>;\n     fn visit_region(&mut self, _r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -756,6 +756,6 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n     /// parameters, allowing uncovered const parameters in impls seems more useful\n     /// than allowing `impl<T> Trait<local_fn_ptr, T> for i32` to compile.\n     fn visit_const(&mut self, _c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "f779d9dd8d93560302988bd9d03d981eda133ae8", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -198,7 +198,7 @@ fn satisfied_from_param_env<'tcx>(\n                 // If we start allowing directly writing `ConstKind::Expr` without an intermediate anon const\n                 // this will be incorrect. It might be worth investigating making `predicates_of` elaborate\n                 // all of the `ConstEvaluatable` bounds rather than having a visitor here.\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n         }\n     }"}, {"sha": "434f75de02bff09c80af42b75f6efefeb0fedd0f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -2932,7 +2932,7 @@ impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n         if matches!(ty.kind(), ty::Infer(ty::FloatVar(_) | ty::IntVar(_))) {\n             ControlFlow::Break(())\n         } else {\n-            ControlFlow::CONTINUE\n+            ControlFlow::Continue(())\n         }\n     }\n }"}, {"sha": "f036a311d464ccc648a2989e34a0bd2824892ebc", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -493,7 +493,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 && let param_def_id = self.generics.type_param(param, self.tcx).def_id\n                 && self.tcx.parent(param_def_id) == self.trait_item_def_id\n             {\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(());\n             }\n             t.super_visit_with(self)\n         }\n@@ -502,7 +502,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 && let param_def_id = self.generics.region_param(&param, self.tcx).def_id\n                 && self.tcx.parent(param_def_id) == self.trait_item_def_id\n             {\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(());\n             }\n             r.super_visit_with(self)\n         }\n@@ -511,7 +511,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 && let param_def_id = self.generics.const_param(&param, self.tcx).def_id\n                 && self.tcx.parent(param_def_id) == self.trait_item_def_id\n             {\n-                return ControlFlow::BREAK;\n+                return ControlFlow::Break(());\n             }\n             ct.super_visit_with(self)\n         }"}, {"sha": "c9121212cd8f16b9b115ab1ac703b7895d793790", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -783,16 +783,16 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n             match t.kind() {\n                 ty::Param(_) => {\n                     if t == self.tcx.types.self_param {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n-                        ControlFlow::CONTINUE\n+                        ControlFlow::Continue(())\n                     }\n                 }\n                 ty::Alias(ty::Projection, ref data)\n                     if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n                 {\n                     // We'll deny these later in their own pass\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n                 ty::Alias(ty::Projection, ref data) => {\n                     // This is a projected type `<Foo as SomeTrait>::X`.\n@@ -820,7 +820,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n                         .contains(&data.trait_ref(self.tcx).def_id);\n \n                     if is_supertrait_of_current_trait {\n-                        ControlFlow::CONTINUE // do not walk contained types, do not report error, do collect $200\n+                        ControlFlow::Continue(()) // do not walk contained types, do not report error, do collect $200\n                     } else {\n                         t.super_visit_with(self) // DO walk contained types, POSSIBLY reporting an error\n                     }"}, {"sha": "1531c50760d5345d6aca5631b6da70f2c9b10d18", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n                 .escaping\n                 .max(t.outer_exclusive_binder().as_usize() - self.outer_index.as_usize());\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     #[inline]\n@@ -145,15 +145,15 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n             }\n             _ => {}\n         }\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match ct.kind() {\n             ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n                 self.escaping =\n                     self.escaping.max(debruijn.as_usize() - self.outer_index.as_usize());\n-                ControlFlow::CONTINUE\n+                ControlFlow::Continue(())\n             }\n             _ => ct.super_visit_with(self),\n         }"}, {"sha": "f398fb06c187a0bb52ce0367e20244bc89cebe48", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -107,25 +107,25 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             ty::FnDef(..) => {\n                 // Types of formals and return in `fn(_) -> _` are also irrelevant;\n                 // so we do not recur into them via `super_visit_with`\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n             ty::Array(_, n)\n                 if { n.try_eval_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Str | ty::Never => {\n                 // These primitive types are always structural match.\n                 //\n                 // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n \n             ty::FnPtr(..) => {\n                 if !self.adt_const_param {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n@@ -147,15 +147,15 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                     // Even though `NonStructural` does not implement `PartialEq`,\n                     // structural equality on `T` does not recur into the raw\n                     // pointer. Therefore, one can still use `C` in a pattern.\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n             }\n \n             ty::Float(_) => {\n                 if !self.adt_const_param {\n-                    return ControlFlow::CONTINUE;\n+                    return ControlFlow::Continue(());\n                 } else {\n                     return ControlFlow::Break(ty);\n                 }\n@@ -172,13 +172,13 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                 self.tcx.sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n-                return ControlFlow::CONTINUE;\n+                return ControlFlow::Continue(());\n             }\n         };\n \n         if !self.seen.insert(adt_def.did()) {\n             debug!(\"Search already seen adt_def: {:?}\", adt_def);\n-            return ControlFlow::CONTINUE;\n+            return ControlFlow::Continue(());\n         }\n \n         if !self.type_marked_structural(ty) {"}, {"sha": "b3b9a67b26e3d23fcfa2ab9153847dc787145560", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -1,4 +1,4 @@\n-#![feature(alloc_layout_extra, control_flow_enum, decl_macro, iterator_try_reduce, never_type)]\n+#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type)]\n #![allow(dead_code, unused_variables)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "0853de601b04072100213a4f2b9d114242abd44f", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eef516b307a18cab7a0a35698c977b79e3e17aa/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=2eef516b307a18cab7a0a35698c977b79e3e17aa", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(let_chains)]\n-#![feature(control_flow_enum)]\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}]}