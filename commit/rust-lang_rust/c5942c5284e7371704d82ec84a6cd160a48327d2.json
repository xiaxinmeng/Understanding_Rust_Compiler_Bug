{"sha": "c5942c5284e7371704d82ec84a6cd160a48327d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTQyYzUyODRlNzM3MTcwNGQ4MmVjODRhNmNkMTYwYTQ4MzI3ZDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-10T10:59:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-10T10:59:49Z"}, "message": "Merge #9835\n\n9835: feat: Generate default trait fn impl when generating `Hash`. r=Veykril a=yoshuawuyts\n\nImplements a default trait function body when generating the `Hash` trait for a type. Thanks!\r\n\r\nr? `@Veykril` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "8815be70efae6604b1623168e77db95e1c5910a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8815be70efae6604b1623168e77db95e1c5910a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5942c5284e7371704d82ec84a6cd160a48327d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhElwlCRBK7hj4Ov3rIwAA8+0IAFCLAJCFn6N1xDM38dyu95d7\nC9m9RIu27E/1hqsJvppSRv1e4N1hpbfm8S5+MYn8PpW1P13VthZVh4IKubC3HRT5\nFuaEzKHkUD3rlj8dScBlZkP7s19JEQ9MvMeO5HjsmZdBs+/keo3cosg6rzVbUb+p\n7A54QzJV2l1IaGM+JaVqMhFj8B+1fA2h/5/juMBqOylPOrB+X98r0mZFLB9tKIe+\nRPoKcEpY0edKox4qr+5BP53UB7FSED02g1GJ/tgnEEOVMpQMFvI2mveVUX5msArj\n9PqA4N+gsWD5/JxFLKpbQy8v3az0v0/foVbms3QyUCqwNkj31FoGuYWAyX25YsU=\n=43Bg\n-----END PGP SIGNATURE-----\n", "payload": "tree 8815be70efae6604b1623168e77db95e1c5910a7\nparent e65254547298588e2c9304b65366b6e8139e4243\nparent 4b5139e8a5e3ccc0bc960fa2322f61b0e905f235\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628593189 +0000\ncommitter GitHub <noreply@github.com> 1628593189 +0000\n\nMerge #9835\n\n9835: feat: Generate default trait fn impl when generating `Hash`. r=Veykril a=yoshuawuyts\n\nImplements a default trait function body when generating the `Hash` trait for a type. Thanks!\r\n\r\nr? `@Veykril` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5942c5284e7371704d82ec84a6cd160a48327d2", "html_url": "https://github.com/rust-lang/rust/commit/c5942c5284e7371704d82ec84a6cd160a48327d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5942c5284e7371704d82ec84a6cd160a48327d2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65254547298588e2c9304b65366b6e8139e4243", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65254547298588e2c9304b65366b6e8139e4243", "html_url": "https://github.com/rust-lang/rust/commit/e65254547298588e2c9304b65366b6e8139e4243"}, {"sha": "4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235", "html_url": "https://github.com/rust-lang/rust/commit/4b5139e8a5e3ccc0bc960fa2322f61b0e905f235"}], "stats": {"total": 153, "additions": 151, "deletions": 2}, "files": [{"sha": "3a17035ae853e852a93a7e919080650f32ade0d7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c5942c5284e7371704d82ec84a6cd160a48327d2", "patch": "@@ -2732,8 +2732,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 252..434,\n-                                    focus_range: 291..297,\n+                                    full_range: 253..435,\n+                                    focus_range: 292..298,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "bd0b2028a1a00d1dcf78b96f6025cb801f9ed67e", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=c5942c5284e7371704d82ec84a6cd160a48327d2", "patch": "@@ -366,6 +366,83 @@ impl Default for Foo {\n         Self {  }\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_hash_record_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: hash\n+#[derive(Has$0h)]\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    bin: usize,\n+    bar: usize,\n+}\n+\n+impl core::hash::Hash for Foo {\n+    $0fn hash<H: core::hash::Hasher>(&self, state: &mut H) {\n+        self.bin.hash(state);\n+        self.bar.hash(state);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_hash_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: hash\n+#[derive(Has$0h)]\n+struct Foo(usize, usize);\n+\"#,\n+            r#\"\n+struct Foo(usize, usize);\n+\n+impl core::hash::Hash for Foo {\n+    $0fn hash<H: core::hash::Hasher>(&self, state: &mut H) {\n+        self.0.hash(state);\n+        self.1.hash(state);\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_hash_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: hash\n+#[derive(Has$0h)]\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+impl core::hash::Hash for Foo {\n+    $0fn hash<H: core::hash::Hasher>(&self, state: &mut H) {\n+        core::mem::discriminant(self).hash(state);\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "9ed8cbdbc735d318c763092f87499e9dd92f2ea5", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=c5942c5284e7371704d82ec84a6cd160a48327d2", "patch": "@@ -18,6 +18,7 @@ pub(crate) fn gen_trait_fn_body(\n     match trait_path.segment()?.name_ref()?.text().as_str() {\n         \"Debug\" => gen_debug_impl(adt, func),\n         \"Default\" => gen_default_impl(adt, func),\n+        \"Hash\" => gen_hash_impl(adt, func),\n         _ => None,\n     }\n }\n@@ -151,3 +152,63 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         }\n     }\n }\n+\n+/// Generate a `Hash` impl based on the fields and members of the target type.\n+fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    fn gen_hash_call(target: ast::Expr) -> ast::Stmt {\n+        let method = make::name_ref(\"hash\");\n+        let arg = make::expr_path(make::ext::ident_path(\"state\"));\n+        let expr = make::expr_method_call(target, method, make::arg_list(Some(arg)));\n+        let stmt = make::expr_stmt(expr);\n+        stmt.into()\n+    }\n+\n+    let body = match adt {\n+        // `Hash` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => return None,\n+\n+        // => std::mem::discriminant(self).hash(state);\n+        ast::Adt::Enum(_) => {\n+            let root = make::ext::ident_path(\"core\");\n+            let submodule = make::ext::ident_path(\"mem\");\n+            let fn_name = make::ext::ident_path(\"discriminant\");\n+            let fn_name = make::path_concat(submodule, fn_name);\n+            let fn_name = make::expr_path(make::path_concat(root, fn_name));\n+\n+            let arg = make::expr_path(make::ext::ident_path(\"self\"));\n+            let fn_call = make::expr_call(fn_name, make::arg_list(Some(arg)));\n+            let stmt = gen_hash_call(fn_call);\n+\n+            make::block_expr(Some(stmt), None).indent(ast::edit::IndentLevel(1))\n+        }\n+        ast::Adt::Struct(strukt) => match strukt.field_list() {\n+            // => self.<field>.hash(state);*\n+            Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                let mut stmts = vec![];\n+                for field in field_list.fields() {\n+                    let base = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let target = make::expr_field(base, &field.name()?.to_string());\n+                    stmts.push(gen_hash_call(target));\n+                }\n+                make::block_expr(stmts, None).indent(ast::edit::IndentLevel(1))\n+            }\n+\n+            // => self.<field_index>.hash(state);*\n+            Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                let mut stmts = vec![];\n+                for (i, _) in field_list.fields().enumerate() {\n+                    let base = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let target = make::expr_field(base, &format!(\"{}\", i));\n+                    stmts.push(gen_hash_call(target));\n+                }\n+                make::block_expr(stmts, None).indent(ast::edit::IndentLevel(1))\n+            }\n+\n+            // No fields in the body means there's nothing to hash.\n+            None => return None,\n+        },\n+    };\n+\n+    ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+    Some(())\n+}"}, {"sha": "fcc1a169202e4fbd1cfb1e5b7fa2abceecbae038", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5942c5284e7371704d82ec84a6cd160a48327d2/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=c5942c5284e7371704d82ec84a6cd160a48327d2", "patch": "@@ -25,6 +25,7 @@\n //!     iterator: option\n //!     iterators: iterator, fn\n //!     default: sized\n+//!     hash:\n //!     clone: sized\n //!     copy: clone\n //!     from: sized\n@@ -87,6 +88,16 @@ pub mod default {\n }\n // endregion:default\n \n+// region:hash\n+pub mod hash {\n+    pub trait Hasher {}\n+\n+    pub trait Hash {\n+        fn hash<H: Hasher>(&self, state: &mut H);\n+    }\n+}\n+// endregion:hash\n+\n // region:clone\n pub mod clone {\n     #[lang = \"clone\"]"}]}