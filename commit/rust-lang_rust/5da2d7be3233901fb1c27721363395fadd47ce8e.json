{"sha": "5da2d7be3233901fb1c27721363395fadd47ce8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTJkN2JlMzIzMzkwMWZiMWMyNzcyMTM2MzM5NWZhZGQ0N2NlOGU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-10T19:54:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-10T19:54:02Z"}, "message": "Merge pull request #2258 from topecongiro/issue-819\n\nFormat macro in pattern position", "tree": {"sha": "6a8c420903f5de25ac9ee96aa8049b53d2edc01b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8c420903f5de25ac9ee96aa8049b53d2edc01b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da2d7be3233901fb1c27721363395fadd47ce8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaLZDaCRBK7hj4Ov3rIwAAdHIIAIYMph0+LMq+LtWy/2gXUxJG\nBQ/mc7CTMHb5jmGImFbHiMMJ4BNcHeFhkjx1O4znH6WI8pkI1LHAfAS0KZxiuQP2\n0l/ySx0Lb3MahD9WDsQMvf+cVq/e2VzREDkNaPQouqnR5LO99Y9vL9ETvSfU8GE/\nb27VOrHODc0imebESHNiW2mootetRrTR/BrLZgSupxHtEnYkS4YBwlRtpR8DqDAu\n3T0ByzuQmIXrxtGIdfEqM45j//QHDOBi37QKbBNCHQFeONbRwnHY7hAXDR2HWwRv\n3Dn3Yln9LRkPQ6pJmxqkCtkeCwxhYeQW+kTewOHIlE9EPD6fTe1dbEA3oCqg4UQ=\n=/soW\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a8c420903f5de25ac9ee96aa8049b53d2edc01b\nparent d2b006d6b4fb7e7a58024e23af785629b8bf135f\nparent 5624175574990ba448557473ccf3ae04c15835b1\nauthor Nick Cameron <nrc@ncameron.org> 1512935642 +1300\ncommitter GitHub <noreply@github.com> 1512935642 +1300\n\nMerge pull request #2258 from topecongiro/issue-819\n\nFormat macro in pattern position "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da2d7be3233901fb1c27721363395fadd47ce8e", "html_url": "https://github.com/rust-lang/rust/commit/5da2d7be3233901fb1c27721363395fadd47ce8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da2d7be3233901fb1c27721363395fadd47ce8e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b006d6b4fb7e7a58024e23af785629b8bf135f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b006d6b4fb7e7a58024e23af785629b8bf135f", "html_url": "https://github.com/rust-lang/rust/commit/d2b006d6b4fb7e7a58024e23af785629b8bf135f"}, {"sha": "5624175574990ba448557473ccf3ae04c15835b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5624175574990ba448557473ccf3ae04c15835b1", "html_url": "https://github.com/rust-lang/rust/commit/5624175574990ba448557473ccf3ae04c15835b1"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "71be3b65224c53015e14cf87a70ae80fb6ba15e0", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da2d7be3233901fb1c27721363395fadd47ce8e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da2d7be3233901fb1c27721363395fadd47ce8e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=5da2d7be3233901fb1c27721363395fadd47ce8e", "patch": "@@ -50,6 +50,7 @@ pub enum MacroPosition {\n     Item,\n     Statement,\n     Expression,\n+    Pat,\n }\n \n impl MacroStyle {"}, {"sha": "700fbd0da218c82dbe5e0496dea25719fdcf5abb", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da2d7be3233901fb1c27721363395fadd47ce8e/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da2d7be3233901fb1c27721363395fadd47ce8e/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=5da2d7be3233901fb1c27721363395fadd47ce8e", "patch": "@@ -19,6 +19,7 @@ use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_una\n            wrap_struct_field, PairParts};\n use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n             struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorPlace, SeparatorTactic};\n+use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use types::{rewrite_path, PathContext};\n@@ -121,8 +122,7 @@ impl Rewrite for Pat {\n             PatKind::Struct(ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n-            // FIXME(#819) format pattern macros.\n-            PatKind::Mac(..) => Some(context.snippet(self.span).to_owned()),\n+            PatKind::Mac(ref mac) => rewrite_macro(mac, None, context, shape, MacroPosition::Pat),\n         }\n     }\n }"}, {"sha": "db3c04f0d9b510deaa86d2ae2b0c606254c89f45", "filename": "tests/source/macros.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5da2d7be3233901fb1c27721363395fadd47ce8e/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da2d7be3233901fb1c27721363395fadd47ce8e/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=5da2d7be3233901fb1c27721363395fadd47ce8e", "patch": "@@ -284,3 +284,19 @@ impl Foo {\n     /// foo\n     pub fn foo(&self) -> Bar<foo!(   )> {}\n }\n+\n+// #819\n+fn macro_in_pattern_position () {\n+    let x = match y {\n+        foo!(  ) => (),\n+        bar!(            a, b,\n+                         c) => (),\n+        bar!(a\n+             , b\n+             , c\n+             ,) => (),\n+        baz!( 1 + 2 + 3, quux.kaas(  )\n+        ) => (),\n+        quux!(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB) => (),\n+    };\n+}"}, {"sha": "6897d4c8796e98f8df7baaacdc3efccd7adc2c7c", "filename": "tests/target/macros.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5da2d7be3233901fb1c27721363395fadd47ce8e/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da2d7be3233901fb1c27721363395fadd47ce8e/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=5da2d7be3233901fb1c27721363395fadd47ce8e", "patch": "@@ -808,3 +808,17 @@ impl Foo {\n     /// foo\n     pub fn foo(&self) -> Bar<foo!()> {}\n }\n+\n+// #819\n+fn macro_in_pattern_position() {\n+    let x = match y {\n+        foo!() => (),\n+        bar!(a, b, c) => (),\n+        bar!(a, b, c,) => (),\n+        baz!(1 + 2 + 3, quux.kaas()) => (),\n+        quux!(\n+            AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n+            BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n+        ) => (),\n+    };\n+}"}]}