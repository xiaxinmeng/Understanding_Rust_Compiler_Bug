{"sha": "8c28284e51cbfc141939dde5dc3998383d0082e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMjgyODRlNTFjYmZjMTQxOTM5ZGRlNWRjMzk5ODM4M2QwMDgyZTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T00:27:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T00:27:50Z"}, "message": "When generating WF criteria, do not visit the same type more than\nonce. Fixes an infinite stack overflow (#23003).", "tree": {"sha": "9a38f20e832c54f0240cb0460e38f07c011936c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a38f20e832c54f0240cb0460e38f07c011936c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c28284e51cbfc141939dde5dc3998383d0082e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c28284e51cbfc141939dde5dc3998383d0082e5", "html_url": "https://github.com/rust-lang/rust/commit/8c28284e51cbfc141939dde5dc3998383d0082e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c28284e51cbfc141939dde5dc3998383d0082e5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f0942a49b77f81d0bedb3d8b5fb615ef521bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f0942a49b77f81d0bedb3d8b5fb615ef521bb3", "html_url": "https://github.com/rust-lang/rust/commit/14f0942a49b77f81d0bedb3d8b5fb615ef521bb3"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "6b4a7761d0a9b836bf913d611d03aea86f7b3bac", "filename": "src/librustc_typeck/check/implicator.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c28284e51cbfc141939dde5dc3998383d0082e5/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c28284e51cbfc141939dde5dc3998383d0082e5/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fimplicator.rs?ref=8c28284e51cbfc141939dde5dc3998383d0082e5", "patch": "@@ -22,6 +22,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n \n use util::common::ErrorReported;\n+use util::nodemap::FnvHashSet;\n use util::ppaux::Repr;\n \n // Helper functions related to manipulating region types.\n@@ -40,6 +41,7 @@ struct Implicator<'a, 'tcx: 'a> {\n     stack: Vec<(ty::Region, Option<Ty<'tcx>>)>,\n     span: Span,\n     out: Vec<Implication<'tcx>>,\n+    visited: FnvHashSet<Ty<'tcx>>,\n }\n \n /// This routine computes the well-formedness constraints that must hold for the type `ty` to\n@@ -65,7 +67,8 @@ pub fn implications<'a,'tcx>(\n                               body_id: body_id,\n                               span: span,\n                               stack: stack,\n-                              out: Vec::new() };\n+                              out: Vec::new(),\n+                              visited: FnvHashSet() };\n     wf.accumulate_from_ty(ty);\n     debug!(\"implications: out={}\", wf.out.repr(closure_typer.tcx()));\n     wf.out\n@@ -80,6 +83,12 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n         debug!(\"accumulate_from_ty(ty={})\",\n                ty.repr(self.tcx()));\n \n+        // When expanding out associated types, we can visit a cyclic\n+        // set of types. Issue #23003.\n+        if !self.visited.insert(ty) {\n+            return;\n+        }\n+\n         match ty.sty {\n             ty::ty_bool |\n             ty::ty_char |"}, {"sha": "ea41775f310d3ef74c4b3438028c07e222c6553f", "filename": "src/test/compile-fail/traits-issue-23003-overflow.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8c28284e51cbfc141939dde5dc3998383d0082e5/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c28284e51cbfc141939dde5dc3998383d0082e5/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs?ref=8c28284e51cbfc141939dde5dc3998383d0082e5", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A variant of traits-issue-23003 in which an infinite series of\n+// types are required. This currently creates an overflow. This test\n+// is included to ensure that some controlled failure, at least,\n+// results -- but it might be that we should adjust the rules somewhat\n+// to make this legal. -nmatsakis\n+\n+use std::marker::PhantomData;\n+\n+trait Async {\n+    type Cancel;\n+}\n+\n+struct Receipt<A:Async> {\n+    marker: PhantomData<A>,\n+}\n+\n+struct Complete<B> {\n+    core: Option<B>,\n+}\n+\n+impl<B> Async for Complete<B> {\n+    type Cancel = Receipt<Complete<Option<B>>>;\n+}\n+\n+fn foo(r: Receipt<Complete<()>>) { }\n+//~^ ERROR overflow\n+\n+fn main() { }"}, {"sha": "37b13d319aaf7a78a80a01569cd54bacfca3badd", "filename": "src/test/run-pass/traits-issue-23003.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8c28284e51cbfc141939dde5dc3998383d0082e5/src%2Ftest%2Frun-pass%2Ftraits-issue-23003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c28284e51cbfc141939dde5dc3998383d0082e5/src%2Ftest%2Frun-pass%2Ftraits-issue-23003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-issue-23003.rs?ref=8c28284e51cbfc141939dde5dc3998383d0082e5", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test stack overflow triggered by evaluating the implications. To be\n+// WF, the type `Receipt<Complete>` would require that `<Complete as\n+// Async>::Cancel` be WF. This normalizes to `Receipt<Complete>`\n+// again, leading to an infinite cycle. Issue #23003.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+use std::marker::PhantomData;\n+\n+trait Async {\n+    type Cancel;\n+}\n+\n+struct Receipt<A:Async> {\n+    marker: PhantomData<A>,\n+}\n+\n+struct Complete {\n+    core: Option<()>,\n+}\n+\n+impl Async for Complete {\n+    type Cancel = Receipt<Complete>;\n+}\n+\n+fn foo(r: Receipt<Complete>) { }\n+\n+fn main() { }"}]}