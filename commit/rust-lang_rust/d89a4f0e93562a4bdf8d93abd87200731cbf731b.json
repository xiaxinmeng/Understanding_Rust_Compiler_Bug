{"sha": "d89a4f0e93562a4bdf8d93abd87200731cbf731b", "node_id": "C_kwDOAAsO6NoAKGQ4OWE0ZjBlOTM1NjJhNGJkZjhkOTNhYmQ4NzIwMDczMWNiZjczMWI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-03T00:40:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-03T00:40:30Z"}, "message": "Merge #11173\n\n11173: Allow adding partially resolved types r=Veykril a=SomeoneToIgnore\n\nSometimes when writing something like `let foo = Arc::new(Mutex::new(CrazyGenerics::new(HashMap::new())))`, I want/have to specify an explicit type for the expression.\r\nUsing turbofish isn't very readable and not always appreciated by guidelines, so `let foo: T` has to be filled.\r\n\r\nTo ease that, the PR enables the `add_explicit_type` assist on types that contain unknown types and some generics.\r\nFully unresolved types, arrays with unknown types and other known cases behave the same.\r\n\r\n`_` placeholder was chosen to replace an unknown type:\r\n\r\n```rust\r\nlet foo = HashMap::new();\r\n// after assist usage, turns into\r\nlet foo: HashMap<_, _> = HashMap::new();\r\n```\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "87da0ad2c8d2b69da70acaafbf846a6243b17e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87da0ad2c8d2b69da70acaafbf846a6243b17e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d89a4f0e93562a4bdf8d93abd87200731cbf731b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0kX+CRBK7hj4Ov3rIwAAEkAIAKLlfRhaSTzFBCD1wWbyuLFt\n5MuISkERWno5WLGBO0drzrBLg2lh3rOxgh/Ntm3b8Xvz317iOKroSiQddSSY5Lth\n15zkDgIH1+qpI8fCAxXNsy0OJWOCIC1ErE8YwWeb4eJGOEOI+EPJZwYgQRfDt41z\n8rPRrAYhiXIMMBPcWA2ERyJNJ22uRTyGuE07imf734DDJRbs3fmE5O5h/si7cuAq\n+DWZ7uD3OUedopyXqh3EUVKZgHWYkZEcQ53nUjhz1Xi1baJW1b3GqqIgIFkGLC9o\neYp3zWvS5FcGvCEBkdR+aYv1f/l9zR3+ZB7riNoqNP0YYyxjGpNZI5bjFn5HJzY=\n=OqNu\n-----END PGP SIGNATURE-----\n", "payload": "tree 87da0ad2c8d2b69da70acaafbf846a6243b17e06\nparent df3d3d8a74e9c4780cec9f6a2bd687406dade8af\nparent 03291db8013b3ad75b610669538c0c8cf6639d14\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641170430 +0000\ncommitter GitHub <noreply@github.com> 1641170430 +0000\n\nMerge #11173\n\n11173: Allow adding partially resolved types r=Veykril a=SomeoneToIgnore\n\nSometimes when writing something like `let foo = Arc::new(Mutex::new(CrazyGenerics::new(HashMap::new())))`, I want/have to specify an explicit type for the expression.\r\nUsing turbofish isn't very readable and not always appreciated by guidelines, so `let foo: T` has to be filled.\r\n\r\nTo ease that, the PR enables the `add_explicit_type` assist on types that contain unknown types and some generics.\r\nFully unresolved types, arrays with unknown types and other known cases behave the same.\r\n\r\n`_` placeholder was chosen to replace an unknown type:\r\n\r\n```rust\r\nlet foo = HashMap::new();\r\n// after assist usage, turns into\r\nlet foo: HashMap<_, _> = HashMap::new();\r\n```\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d89a4f0e93562a4bdf8d93abd87200731cbf731b", "html_url": "https://github.com/rust-lang/rust/commit/d89a4f0e93562a4bdf8d93abd87200731cbf731b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d89a4f0e93562a4bdf8d93abd87200731cbf731b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3d3d8a74e9c4780cec9f6a2bd687406dade8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3d3d8a74e9c4780cec9f6a2bd687406dade8af", "html_url": "https://github.com/rust-lang/rust/commit/df3d3d8a74e9c4780cec9f6a2bd687406dade8af"}, {"sha": "03291db8013b3ad75b610669538c0c8cf6639d14", "url": "https://api.github.com/repos/rust-lang/rust/commits/03291db8013b3ad75b610669538c0c8cf6639d14", "html_url": "https://github.com/rust-lang/rust/commit/03291db8013b3ad75b610669538c0c8cf6639d14"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "95d1550afc33cd366b836411b47e7a6ca1618985", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d89a4f0e93562a4bdf8d93abd87200731cbf731b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89a4f0e93562a4bdf8d93abd87200731cbf731b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=d89a4f0e93562a4bdf8d93abd87200731cbf731b", "patch": "@@ -567,7 +567,27 @@ impl HirDisplay for Ty {\n                     };\n                     if !parameters_to_write.is_empty() {\n                         write!(f, \"<\")?;\n-                        f.write_joined(parameters_to_write, \", \")?;\n+\n+                        if f.display_target.is_source_code() {\n+                            let mut first = true;\n+                            for generic_arg in parameters_to_write {\n+                                if !first {\n+                                    write!(f, \", \")?;\n+                                }\n+                                first = false;\n+\n+                                if generic_arg.ty(Interner).map(|ty| ty.kind(Interner))\n+                                    == Some(&TyKind::Error)\n+                                {\n+                                    write!(f, \"_\")?;\n+                                } else {\n+                                    generic_arg.hir_fmt(f)?;\n+                                }\n+                            }\n+                        } else {\n+                            f.write_joined(parameters_to_write, \", \")?;\n+                        }\n+\n                         write!(f, \">\")?;\n                     }\n                 }"}, {"sha": "d7e1be900ffb0c9658ad93170dccfd5b767a7616", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d89a4f0e93562a4bdf8d93abd87200731cbf731b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89a4f0e93562a4bdf8d93abd87200731cbf731b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=d89a4f0e93562a4bdf8d93abd87200731cbf731b", "patch": "@@ -60,8 +60,8 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n     .adjusted();\n \n-    // Unresolved or unnameable types can't be annotated\n-    if ty.contains_unknown() || ty.is_closure() {\n+    // Fully unresolved or unnameable types can't be annotated\n+    if (ty.contains_unknown() && ty.type_arguments().count() == 0) || ty.is_closure() {\n         cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;\n     }\n@@ -139,11 +139,34 @@ fn f() {\n     }\n \n     #[test]\n-    fn add_explicit_type_not_applicable_unresolved() {\n+    fn add_explicit_type_not_applicable_for_fully_unresolved() {\n         cov_mark::check!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         check_assist_not_applicable(add_explicit_type, r#\"fn f() { let a$0 = None; }\"#);\n     }\n \n+    #[test]\n+    fn add_explicit_type_applicable_for_partially_unresolved() {\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+        struct Vec<T, V> { t: T, v: V }\n+        impl<T> Vec<T, Vec<ZZZ, i32>> {\n+            fn new() -> Self {\n+                panic!()\n+            }\n+        }\n+        fn f() { let a$0 = Vec::new(); }\"#,\n+            r#\"\n+        struct Vec<T, V> { t: T, v: V }\n+        impl<T> Vec<T, Vec<ZZZ, i32>> {\n+            fn new() -> Self {\n+                panic!()\n+            }\n+        }\n+        fn f() { let a: Vec<_, Vec<_, i32>> = Vec::new(); }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_explicit_type_not_applicable_closure_expr() {\n         check_assist_not_applicable(add_explicit_type, r#\"fn f() { let a$0 = || {}; }\"#);"}]}