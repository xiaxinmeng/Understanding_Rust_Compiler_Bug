{"sha": "10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzU1ZDdhN2QxYmE4N2Q0OTE0OWU1ZmNkYzVkMzk1NTkzMmFmZTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-28T01:57:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:06Z"}, "message": "core::rt Wire up logging to newsched tasks", "tree": {"sha": "880aee8c5acbf1c75cf28b59de580836a9a3a717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/880aee8c5acbf1c75cf28b59de580836a9a3a717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "html_url": "https://github.com/rust-lang/rust/commit/10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6719ee0b4977c949a34b7a2250ed7274cf442e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6719ee0b4977c949a34b7a2250ed7274cf442e", "html_url": "https://github.com/rust-lang/rust/commit/ad6719ee0b4977c949a34b7a2250ed7274cf442e"}], "stats": {"total": 142, "additions": 117, "deletions": 25}, "files": [{"sha": "073a6dcf4d259fd6bdfc3f46f0b1e0e32dea6382", "filename": "src/libcore/core.rc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "patch": "@@ -246,8 +246,11 @@ mod unicode;\n #[path = \"num/cmath.rs\"]\n mod cmath;\n mod stackwalk;\n+\n+// XXX: This shouldn't be pub, and it should be reexported under 'unstable'\n+// but name resolution doesn't work without it being pub.\n #[path = \"rt/mod.rs\"]\n-mod rt;\n+pub mod rt;\n \n // A curious inner-module that's not exported that contains the binding\n // 'core' so that macro-expanded references to core::error and such"}, {"sha": "4ecd72ebd0c00e706b62a4f8d4d90c09abe3aa25", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "patch": "@@ -10,17 +10,15 @@\n \n //! Logging\n \n-pub mod rustrt {\n-    use libc;\n-\n-    pub extern {\n-        unsafe fn rust_log_console_on();\n-        unsafe fn rust_log_console_off();\n-        unsafe fn rust_log_str(level: u32,\n-                               string: *libc::c_char,\n-                               size: libc::size_t);\n-    }\n-}\n+use option::*;\n+use either::*;\n+use rt;\n+use rt::logging::{Logger, StdErrLogger};\n+use io;\n+use libc;\n+use repr;\n+use vec;\n+use cast;\n \n /// Turns on logging to stdout globally\n pub fn console_on() {\n@@ -45,17 +43,51 @@ pub fn console_off() {\n #[cfg(not(test))]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n-    use cast::transmute;\n-    use io;\n-    use libc;\n-    use repr;\n-    use vec;\n \n     let bytes = do io::with_bytes_writer |writer| {\n         repr::write_repr(writer, object);\n     };\n+\n+    match rt::context() {\n+        rt::OldTaskContext => {\n+            unsafe {\n+                let len = bytes.len() as libc::size_t;\n+                rustrt::rust_log_str(level, cast::transmute(vec::raw::to_ptr(bytes)), len);\n+            }\n+        }\n+        _ => {\n+            // XXX: Bad allocation\n+            let msg = bytes.to_str();\n+            newsched_log_str(msg);\n+        }\n+    }\n+}\n+\n+fn newsched_log_str(msg: ~str) {\n+    \n     unsafe {\n-        let len = bytes.len() as libc::size_t;\n-        rustrt::rust_log_str(level, transmute(vec::raw::to_ptr(bytes)), len);\n+        match rt::local_services::unsafe_try_borrow_local_services() {\n+            Some(local) => {\n+                // Use the available logger\n+                (*local).logger.log(Left(msg));\n+            }\n+            None => {\n+                // There is no logger anywhere, just write to stderr\n+                let mut logger = StdErrLogger;\n+                logger.log(Left(msg));\n+            }\n+        }\n+    }\n+}\n+\n+pub mod rustrt {\n+    use libc;\n+\n+    pub extern {\n+        unsafe fn rust_log_console_on();\n+        unsafe fn rust_log_console_off();\n+        unsafe fn rust_log_str(level: u32,\n+                               string: *libc::c_char,\n+                               size: libc::size_t);\n     }\n }"}, {"sha": "c4f0384f71ed6098910a4443aff2092174b3309b", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "patch": "@@ -11,7 +11,7 @@\n #[macro_escape];\n \n // Some basic logging\n-macro_rules! rtdebug_ (\n+macro_rules! rtdebug (\n     ($( $arg:expr),+) => ( {\n         dumb_println(fmt!( $($arg),+ ));\n \n@@ -26,7 +26,7 @@ macro_rules! rtdebug_ (\n )\n \n // An alternate version with no output, for turning off logging\n-macro_rules! rtdebug (\n+macro_rules! rtdebug_ (\n     ($( $arg:expr),+) => ( $(let _ = $arg)*; )\n )\n "}, {"sha": "b8bf6e067801f4529cc66ad9d96315858420bbfd", "filename": "src/libcore/rt/local_services.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "patch": "@@ -23,19 +23,19 @@ use libc::{c_void, uintptr_t};\n use cast::transmute;\n use super::sched::local_sched;\n use super::local_heap::LocalHeap;\n+use rt::logging::{Logger, StdErrLogger};\n \n pub struct LocalServices {\n     heap: LocalHeap,\n     gc: GarbageCollector,\n     storage: LocalStorage,\n-    logger: Logger,\n+    logger: StdErrLogger,\n     unwinder: Option<Unwinder>,\n     destroyed: bool\n }\n \n pub struct GarbageCollector;\n pub struct LocalStorage(*c_void, Option<~fn(*c_void)>);\n-pub struct Logger;\n \n pub struct Unwinder {\n     unwinding: bool,\n@@ -47,7 +47,7 @@ impl LocalServices {\n             heap: LocalHeap::new(),\n             gc: GarbageCollector,\n             storage: LocalStorage(ptr::null(), None),\n-            logger: Logger,\n+            logger: StdErrLogger,\n             unwinder: Some(Unwinder { unwinding: false }),\n             destroyed: false\n         }\n@@ -58,7 +58,7 @@ impl LocalServices {\n             heap: LocalHeap::new(),\n             gc: GarbageCollector,\n             storage: LocalStorage(ptr::null(), None),\n-            logger: Logger,\n+            logger: StdErrLogger,\n             unwinder: None,\n             destroyed: false\n         }\n@@ -184,6 +184,14 @@ pub unsafe fn unsafe_borrow_local_services() -> *mut LocalServices {\n     }\n }\n \n+pub unsafe fn unsafe_try_borrow_local_services() -> Option<*mut LocalServices> {\n+    if local_sched::exists() {\n+        Some(unsafe_borrow_local_services())\n+    } else {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use rt::test::*;\n@@ -231,4 +239,12 @@ mod test {\n             let _ = r.next();\n         }\n     }\n+\n+    #[test]\n+    fn logging() {\n+        do run_in_newsched_task() {\n+            info!(\"here i am. logging in a newsched task\");\n+        }\n+    }\n }\n+"}, {"sha": "4ed09fd829f22f186d04e5c0a3e6705f24842fc1", "filename": "src/libcore/rt/logging.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flogging.rs?ref=10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use either::*;\n+\n+pub trait Logger {\n+    fn log(&mut self, msg: Either<~str, &'static str>);\n+}\n+\n+pub struct StdErrLogger;\n+\n+impl Logger for StdErrLogger {\n+    fn log(&mut self, msg: Either<~str, &'static str>) {\n+        use io::{Writer, WriterUtil};\n+\n+        let s: &str = match msg {\n+            Left(ref s) => {\n+                let s: &str = *s;\n+                s\n+            }\n+            Right(ref s) => {\n+                let s: &str = *s;\n+                s\n+            }\n+        };\n+        let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n+        dbg.write_str(s);\n+        dbg.write_str(\"\\n\");\n+        dbg.flush();\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "c7cdb277247cbb21bc21fd8a0f5e37ba2ed458fd", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10355d7a7d1ba87d49149e5fcdc5d3955932afe2/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=10355d7a7d1ba87d49149e5fcdc5d3955932afe2", "patch": "@@ -58,6 +58,9 @@ pub mod env;\n /// The local, managed heap\n mod local_heap;\n \n+/// The Logger trait and implementations\n+pub mod logging;\n+\n /// Tools for testing the runtime\n #[cfg(test)]\n pub mod test;"}]}