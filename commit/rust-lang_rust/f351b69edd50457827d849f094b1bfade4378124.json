{"sha": "f351b69edd50457827d849f094b1bfade4378124", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTFiNjllZGQ1MDQ1NzgyN2Q4NDlmMDk0YjFiZmFkZTQzNzgxMjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-30T17:36:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-30T17:36:38Z"}, "message": "Revert \"Build compiler-rt/builtins with MSVC\"\n\nThis reverts commit b09e8f51a26f9421d27fea4e1324b6ee24a26722.", "tree": {"sha": "9db48252b7efe0ea788cc6dfb4e516717bdfeea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db48252b7efe0ea788cc6dfb4e516717bdfeea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f351b69edd50457827d849f094b1bfade4378124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f351b69edd50457827d849f094b1bfade4378124", "html_url": "https://github.com/rust-lang/rust/commit/f351b69edd50457827d849f094b1bfade4378124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f351b69edd50457827d849f094b1bfade4378124/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9936731654d82f16e839148b4f41acb624b947", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9936731654d82f16e839148b4f41acb624b947", "html_url": "https://github.com/rust-lang/rust/commit/9e9936731654d82f16e839148b4f41acb624b947"}], "stats": {"total": 85, "additions": 34, "deletions": 51}, "files": [{"sha": "60d366100f8c207b38132e07cbebac40dcb9bdb4", "filename": "configure", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f351b69edd50457827d849f094b1bfade4378124/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f351b69edd50457827d849f094b1bfade4378124/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f351b69edd50457827d849f094b1bfade4378124", "patch": "@@ -1498,9 +1498,25 @@ do\n         done\n     fi\n \n-    # We need the generator later on for compiler-rt even if LLVM's not built\n-    if [ ${is_msvc} -ne 0 ]\n+    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n     then\n+        msg \"configuring LLVM for $t with cmake\"\n+\n+        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n+        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n+        fi\n+        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n+        then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n+        fi\n+\n+        msg \"configuring LLVM with:\"\n+        msg \"$CMAKE_ARGS\"\n         case \"$CFG_MSVC_ROOT\" in\n             *14.0*)\n                 generator=\"Visual Studio 14 2015\"\n@@ -1522,32 +1538,8 @@ do\n                 err \"can only build LLVM for x86 platforms\"\n                 ;;\n         esac\n-        CFG_CMAKE_GENERATOR=$generator\n-        putvar CFG_CMAKE_GENERATOR\n-    fi\n-\n-    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n-    then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n-        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-        fi\n-        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-        then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-        fi\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n-\n         (cd $LLVM_BUILD_DIR && \"$CFG_CMAKE\" $CFG_LLVM_SRC_DIR \\\n-                                            -G \"$CFG_CMAKE_GENERATOR\" \\\n+                                            -G \"$generator\" \\\n                                             $CMAKE_ARGS)\n         need_ok \"LLVM cmake configure failed\"\n     fi"}, {"sha": "1f60aaed4730b979c82ee199e0e1707bb86d978d", "filename": "mk/rt.mk", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f351b69edd50457827d849f094b1bfade4378124/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f351b69edd50457827d849f094b1bfade4378124/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=f351b69edd50457827d849f094b1bfade4378124", "patch": "@@ -216,31 +216,22 @@ COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n-\t@$$(call E, cmake: compiler-rt)\n-\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; $$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n-\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$(1)) \\\n-\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n-\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n-\t\t--target lib/builtins/builtins \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-- //v:m //nologo\n-\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/lib/windows/$$(LLVM_BUILD_CONFIG_MODE)/clang_rt.builtins-$$(HOST_$(1)).lib $$@\n-else\n+# Note that on MSVC-targeting builds we hardwire CC/AR to gcc/ar even though\n+# we're targeting MSVC. This is because although compiler-rt has a CMake build\n+# config I can't actually figure out how to use it, so I'm not sure how to use\n+# cl.exe to build the objects. Additionally, the compiler-rt library when built\n+# with gcc has the same ABI as cl.exe, so they're largely compatible\n COMPRT_CC_$(1) := $$(CC_$(1))\n COMPRT_AR_$(1) := $$(AR_$(1))\n-# We chomp -Werror here because GCC warns about the type signature of\n-# builtins not matching its own and the build fails. It's a bit hacky,\n-# but what can we do, we're building libclang-rt using GCC ......\n-COMPRT_CFLAGS_$(1) := $$(subst -Werror,,$$(CFG_GCCISH_CFLAGS_$(1))) -std=c99\n-\n-# FreeBSD Clang's packaging is problematic; it doesn't copy unwind.h to\n-# the standard include directory. This should really be in our changes to\n-# compiler-rt, but we override the CFLAGS here so there isn't much choice\n-ifeq ($$(findstring freebsd,$(1)),freebsd)\n-\tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1))\n+ifeq ($$(findstring msvc,$(1)),msvc)\n+COMPRT_CC_$(1) := gcc\n+COMPRT_AR_$(1) := ar\n+ifeq ($$(findstring i686,$(1)),i686)\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m32\n+else\n+COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m64\n+endif\n endif\n \n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n@@ -255,7 +246,7 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tTargetTriple=$(1) \\\n \t\ttriple-builtins\n \t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n-endif\n+\n ################################################################################\n # libbacktrace\n #"}]}