{"sha": "2430ede36e1fba9044b82de9d09e6a71584f1db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MzBlZGUzNmUxZmJhOTA0NGI4MmRlOWQwOWU2YTcxNTg0ZjFkYjg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-04T17:28:57Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-04T18:23:35Z"}, "message": "rustdoc: Print a warning if the diff when comparing to old nightlies is empty\n\nThis avoids confusing situations where it's unclear whether there's a\nbug in the diff tool or not:\n\n```\n26: @has check failed\n        `XPATH PATTERN` did not match\n        // @has - '//code/a[@href=\"{{channel}}/std/primitive.i32.html\"]' 'i32'\n\nEncountered 6 errors\n\n------------------------------------------\n\ninfo: generating a diff against nightly rustdoc\n\nfailures:\n    [rustdoc] rustdoc/primitive-reexport.rs\n```", "tree": {"sha": "010f6a1692d2b636c61a68a991515fe037dff30e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/010f6a1692d2b636c61a68a991515fe037dff30e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2430ede36e1fba9044b82de9d09e6a71584f1db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2430ede36e1fba9044b82de9d09e6a71584f1db8", "html_url": "https://github.com/rust-lang/rust/commit/2430ede36e1fba9044b82de9d09e6a71584f1db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2430ede36e1fba9044b82de9d09e6a71584f1db8/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c2ab57a43737867982fafc8cfacd9b069fee96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c2ab57a43737867982fafc8cfacd9b069fee96", "html_url": "https://github.com/rust-lang/rust/commit/c4c2ab57a43737867982fafc8cfacd9b069fee96"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "79520705cb114ff260a453c4c624f8c495cb1f88", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2430ede36e1fba9044b82de9d09e6a71584f1db8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2430ede36e1fba9044b82de9d09e6a71584f1db8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2430ede36e1fba9044b82de9d09e6a71584f1db8", "patch": "@@ -2487,6 +2487,7 @@ impl<'test> TestCx<'test> {\n \n         {\n             let mut diff_output = File::create(&diff_filename).unwrap();\n+            let mut wrote_data = false;\n             for entry in walkdir::WalkDir::new(out_dir) {\n                 let entry = entry.expect(\"failed to read file\");\n                 let extension = entry.path().extension().and_then(|p| p.to_str());\n@@ -2499,17 +2500,28 @@ impl<'test> TestCx<'test> {\n                         if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n                     let actual_path = entry.path();\n                     let actual = std::fs::read(&actual_path).unwrap();\n-                    diff_output\n-                        .write_all(&unified_diff::diff(\n-                            &expected,\n-                            &expected_path.to_string_lossy(),\n-                            &actual,\n-                            &actual_path.to_string_lossy(),\n-                            3,\n-                        ))\n-                        .unwrap();\n+                    let diff = unified_diff::diff(\n+                        &expected,\n+                        &expected_path.to_string_lossy(),\n+                        &actual,\n+                        &actual_path.to_string_lossy(),\n+                        3,\n+                    );\n+                    wrote_data |= !diff.is_empty();\n+                    diff_output.write_all(&diff).unwrap();\n                 }\n             }\n+\n+            if !wrote_data {\n+                println!(\"note: diff is identical to nightly rustdoc\");\n+                assert!(diff_output.metadata().unwrap().len() == 0);\n+                return;\n+            } else if self.config.verbose {\n+                eprintln!(\"printing diff:\");\n+                let mut buf = Vec::new();\n+                diff_output.read_to_end(&mut buf).unwrap();\n+                std::io::stderr().lock().write_all(&mut buf).unwrap();\n+            }\n         }\n \n         match self.config.color {"}]}