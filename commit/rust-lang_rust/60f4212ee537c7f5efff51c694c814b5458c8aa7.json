{"sha": "60f4212ee537c7f5efff51c694c814b5458c8aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjQyMTJlZTUzN2M3ZjVlZmZmNTFjNjk0YzgxNGI1NDU4YzhhYTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T03:49:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-01T03:49:24Z"}, "message": "Rollup merge of #66726 - CAD97:miri-recursion-limit, r=RalfJung\n\nUse recursion_limit for const eval stack limit\n\ncc https://github.com/rust-lang/miri/issues/643 @orium @RalfJung\n\nI'm really not certain how exactly to handle this change, but it looks like it's that simple.\n\nReuse `recursion_limit` (\"The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization\") which is configurable by the user for the const evaluation stack frame limit.\n\nThe other option is to make `const_eval_stack_frame_limit` configurable in the same way as `recursion_limit` (but I'm not sure how to do that and it'd be a bigger change).\n\nFixes https://github.com/rust-lang/miri/issues/643.", "tree": {"sha": "0aa7ab4c9c6360843bb8efe44bb1dc46376ac82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aa7ab4c9c6360843bb8efe44bb1dc46376ac82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f4212ee537c7f5efff51c694c814b5458c8aa7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4zhECRBK7hj4Ov3rIwAAdHIIABFtxe6dQxJ0XhrAc/kGZeXG\n3d6ci39k/tga9dG6D0SivA0psWmy4Nc2liBK203DCkdBNF21RjD/1tE+5200VanO\n5ibJzFiElmdmxU09pgL8NVNY3u6HeleUCe1oBL1Cr3Q1bHIgreaIePziwsZqeTR4\n6hObx3To6/OabTIEuOclLexamlPjegs76EALYBGHTxqv9InaaYnqOnTSEvM60ifN\n/LNql2mC4ddngmjUa45xwYVK754NMrFFoy9pY/lFQSJYYP1d6pJHUh+VFGsnKRBi\n1skVncr9jQmiVHEJcs78NVxDzRWtgMCju5bzpnRlwqnlwtmBetsR5SkLRgFUCYg=\n=KX46\n-----END PGP SIGNATURE-----\n", "payload": "tree 0aa7ab4c9c6360843bb8efe44bb1dc46376ac82e\nparent 99f9fa36951b25eba43e822bd5a58508d5f22d28\nparent 52426ab42dffadfcaec7d1eb4afa4d63cca11593\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575172164 +0100\ncommitter GitHub <noreply@github.com> 1575172164 +0100\n\nRollup merge of #66726 - CAD97:miri-recursion-limit, r=RalfJung\n\nUse recursion_limit for const eval stack limit\n\ncc https://github.com/rust-lang/miri/issues/643 @orium @RalfJung\n\nI'm really not certain how exactly to handle this change, but it looks like it's that simple.\n\nReuse `recursion_limit` (\"The maximum recursion limit for potentially infinitely recursive operations such as auto-dereference and monomorphization\") which is configurable by the user for the const evaluation stack frame limit.\n\nThe other option is to make `const_eval_stack_frame_limit` configurable in the same way as `recursion_limit` (but I'm not sure how to do that and it'd be a bigger change).\n\nFixes https://github.com/rust-lang/miri/issues/643.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f4212ee537c7f5efff51c694c814b5458c8aa7", "html_url": "https://github.com/rust-lang/rust/commit/60f4212ee537c7f5efff51c694c814b5458c8aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f4212ee537c7f5efff51c694c814b5458c8aa7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f9fa36951b25eba43e822bd5a58508d5f22d28", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f9fa36951b25eba43e822bd5a58508d5f22d28", "html_url": "https://github.com/rust-lang/rust/commit/99f9fa36951b25eba43e822bd5a58508d5f22d28"}, {"sha": "52426ab42dffadfcaec7d1eb4afa4d63cca11593", "url": "https://api.github.com/repos/rust-lang/rust/commits/52426ab42dffadfcaec7d1eb4afa4d63cca11593", "html_url": "https://github.com/rust-lang/rust/commit/52426ab42dffadfcaec7d1eb4afa4d63cca11593"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "74ba83d0ee4d41f18e4ca350f54256d1c6dfad82", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f4212ee537c7f5efff51c694c814b5458c8aa7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f4212ee537c7f5efff51c694c814b5458c8aa7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=60f4212ee537c7f5efff51c694c814b5458c8aa7", "patch": "@@ -94,9 +94,6 @@ pub struct Session {\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: Once<usize>,\n \n-    /// The maximum number of stackframes allowed in const eval.\n-    pub const_eval_stack_frame_limit: usize,\n-\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n@@ -1158,7 +1155,6 @@ fn build_session_(\n         features: Once::new(),\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n-        const_eval_stack_frame_limit: 100,\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,"}, {"sha": "228e5cad4e367091f1ec8f6026762fbfb36bf158", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60f4212ee537c7f5efff51c694c814b5458c8aa7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f4212ee537c7f5efff51c694c814b5458c8aa7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=60f4212ee537c7f5efff51c694c814b5458c8aa7", "patch": "@@ -548,7 +548,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n \n-        if self.stack.len() > self.tcx.sess.const_eval_stack_frame_limit {\n+        if self.stack.len() > *self.tcx.sess.recursion_limit.get() {\n             throw_exhaust!(StackFrameLimitReached)\n         } else {\n             Ok(())"}]}