{"sha": "3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWFmOTA1NmQ4YjJiZjdiOTBhNjU3NTAzY2QwM2Y4YzBjMmI1Mzg=", "commit": {"author": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2019-10-22T00:29:40Z"}, "committer": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2019-10-22T00:29:40Z"}, "message": "Code cleanups following up on #65576.\n\nThis makes a few code cleanups to follow up on the review comments in\nhttps://github.com/rust-lang/rust/pull/65576.", "tree": {"sha": "d63c5298294e80446557577d0e9ea485635cc151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63c5298294e80446557577d0e9ea485635cc151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "html_url": "https://github.com/rust-lang/rust/commit/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "html_url": "https://github.com/rust-lang/rust/commit/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "e8ffe868231a6a87e4d2618b7e5cfd2f556d168a", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1af9056d8b2bf7b90a657503cd03f8c0c2b538/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=3f1af9056d8b2bf7b90a657503cd03f8c0c2b538", "patch": "@@ -406,6 +406,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n+        // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,\n+        // depending on whether the target needs `argc` and `argv` to be passed in.\n         let llfty = if cx.sess().target.target.options.main_needs_argc_argv {\n             cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n         } else {\n@@ -440,19 +442,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n \n-        let (arg_argc, arg_argv) = if cx.sess().target.target.options.main_needs_argc_argv {\n-            // Params from native main() used as args for rust start function\n-            let param_argc = bx.get_param(0);\n-            let param_argv = bx.get_param(1);\n-            let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n-            let arg_argv = param_argv;\n-            (arg_argc, arg_argv)\n-        } else {\n-            // The Rust start function doesn't need argc and argv, so just pass zeros.\n-            let arg_argc = bx.const_int(cx.type_int(), 0);\n-            let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n-            (arg_argc, arg_argv)\n-        };\n+        let (arg_argc, arg_argv) = get_argc_argv(cx, &mut bx);\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n@@ -477,6 +467,27 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n     }\n }\n \n+/// Obtain the `argc` and `argv` values to pass to the rust start function.\n+fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    cx: &'a Bx::CodegenCx,\n+    bx: &mut Bx\n+) -> (Bx::Value, Bx::Value)\n+{\n+    if cx.sess().target.target.options.main_needs_argc_argv {\n+        // Params from native `main()` used as args for rust start function\n+        let param_argc = bx.get_param(0);\n+        let param_argv = bx.get_param(1);\n+        let arg_argc = bx.intcast(param_argc, cx.type_isize(), true);\n+        let arg_argv = param_argv;\n+        (arg_argc, arg_argv)\n+    } else {\n+        // The Rust start function doesn't need `argc` and `argv`, so just pass zeros.\n+        let arg_argc = bx.const_int(cx.type_int(), 0);\n+        let arg_argv = bx.const_null(cx.type_ptr_to(cx.type_i8p()));\n+        (arg_argc, arg_argv)\n+    }\n+}\n+\n pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n \n pub fn codegen_crate<B: ExtraBackendMethods>("}]}