{"sha": "1d737fb032b762e69e8d809c0e042d45e08b457d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNzM3ZmIwMzJiNzYyZTY5ZThkODA5YzBlMDQyZDQ1ZTA4YjQ1N2Q=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T21:41:26Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T22:45:18Z"}, "message": "Use `MaybeBorrowedLocals` for generator analyses\n\nIt should have the same semantics as `HaveBeenBorrowedLocals`", "tree": {"sha": "dc922aaf40eac547941cbbf15c20b7627c964b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc922aaf40eac547941cbbf15c20b7627c964b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d737fb032b762e69e8d809c0e042d45e08b457d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d737fb032b762e69e8d809c0e042d45e08b457d", "html_url": "https://github.com/rust-lang/rust/commit/1d737fb032b762e69e8d809c0e042d45e08b457d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d737fb032b762e69e8d809c0e042d45e08b457d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9972502bafab062b06ef04c02c653f1b868937bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9972502bafab062b06ef04c02c653f1b868937bd", "html_url": "https://github.com/rust-lang/rust/commit/9972502bafab062b06ef04c02c653f1b868937bd"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "7508d71945e5f30de4bf7ad47e80f35333cbf08d", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1d737fb032b762e69e8d809c0e042d45e08b457d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d737fb032b762e69e8d809c0e042d45e08b457d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=1d737fb032b762e69e8d809c0e042d45e08b457d", "patch": "@@ -1,8 +1,8 @@\n pub use super::*;\n \n+use crate::dataflow::generic::{Results, ResultsRefCursor};\n use crate::dataflow::BitDenotation;\n-use crate::dataflow::HaveBeenBorrowedLocals;\n-use crate::dataflow::{DataflowResults, DataflowResultsCursor, DataflowResultsRefCursor};\n+use crate::dataflow::MaybeBorrowedLocals;\n use rustc::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use std::cell::RefCell;\n@@ -69,22 +69,23 @@ impl<'a, 'tcx> BottomValue for MaybeStorageLive<'a, 'tcx> {\n     const BOTTOM_VALUE: bool = false;\n }\n \n+type BorrowedLocalsResults<'a, 'tcx> = ResultsRefCursor<'a, 'a, 'tcx, MaybeBorrowedLocals>;\n+\n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n pub struct RequiresStorage<'mir, 'tcx> {\n     body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n-    borrowed_locals:\n-        RefCell<DataflowResultsRefCursor<'mir, 'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n+    borrowed_locals: RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n }\n \n impl<'mir, 'tcx: 'mir> RequiresStorage<'mir, 'tcx> {\n     pub fn new(\n         body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n-        borrowed_locals: &'mir DataflowResults<'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>,\n+        borrowed_locals: &'mir Results<'tcx, MaybeBorrowedLocals>,\n     ) -> Self {\n         RequiresStorage {\n             body,\n-            borrowed_locals: RefCell::new(DataflowResultsCursor::new(borrowed_locals, *body)),\n+            borrowed_locals: RefCell::new(ResultsRefCursor::new(*body, borrowed_locals)),\n         }\n     }\n \n@@ -111,11 +112,12 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n     }\n \n     fn before_statement_effect(&self, sets: &mut GenKillSet<Self::Idx>, loc: Location) {\n-        // If we borrow or assign to a place then it needs storage for that\n-        // statement.\n-        self.check_for_borrow(sets, loc);\n-\n         let stmt = &self.body[loc.block].statements[loc.statement_index];\n+\n+        // If a place is borrowed in a statement, it needs storage for that statement.\n+        self.borrowed_locals.borrow().analysis().statement_effect(sets, stmt, loc);\n+\n+        // If a place is assigned to in a statement, it needs storage for that statement.\n         match stmt.kind {\n             StatementKind::StorageDead(l) => sets.kill(l),\n             StatementKind::Assign(box (ref place, _))\n@@ -138,12 +140,13 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n     }\n \n     fn before_terminator_effect(&self, sets: &mut GenKillSet<Local>, loc: Location) {\n-        self.check_for_borrow(sets, loc);\n+        let terminator = self.body[loc.block].terminator();\n \n-        if let TerminatorKind::Call { destination: Some((Place { local, .. }, _)), .. } =\n-            self.body[loc.block].terminator().kind\n-        {\n-            sets.gen(local);\n+        // If a place is borrowed in a terminator, it needs storage for that terminator.\n+        self.borrowed_locals.borrow().analysis().terminator_effect(sets, terminator, loc);\n+\n+        if let TerminatorKind::Call { destination: Some((place, _)), .. } = terminator.kind {\n+            sets.gen(place.local);\n         }\n     }\n \n@@ -179,14 +182,6 @@ impl<'mir, 'tcx> RequiresStorage<'mir, 'tcx> {\n         let mut visitor = MoveVisitor { sets, borrowed_locals: &self.borrowed_locals };\n         visitor.visit_location(self.body, loc);\n     }\n-\n-    /// Gen locals that are newly borrowed. This includes borrowing any part of\n-    /// a local (we rely on this behavior of `HaveBeenBorrowedLocals`).\n-    fn check_for_borrow(&self, sets: &mut GenKillSet<Local>, loc: Location) {\n-        let mut borrowed_locals = self.borrowed_locals.borrow_mut();\n-        borrowed_locals.seek(loc);\n-        borrowed_locals.each_gen_bit(|l| sets.gen(l));\n-    }\n }\n \n impl<'mir, 'tcx> BottomValue for RequiresStorage<'mir, 'tcx> {\n@@ -195,16 +190,15 @@ impl<'mir, 'tcx> BottomValue for RequiresStorage<'mir, 'tcx> {\n }\n \n struct MoveVisitor<'a, 'mir, 'tcx> {\n-    borrowed_locals:\n-        &'a RefCell<DataflowResultsRefCursor<'mir, 'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n+    borrowed_locals: &'a RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n     sets: &'a mut GenKillSet<Local>,\n }\n \n impl<'a, 'mir: 'a, 'tcx> Visitor<'tcx> for MoveVisitor<'a, 'mir, 'tcx> {\n     fn visit_local(&mut self, local: &Local, context: PlaceContext, loc: Location) {\n         if PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) == context {\n             let mut borrowed_locals = self.borrowed_locals.borrow_mut();\n-            borrowed_locals.seek(loc);\n+            borrowed_locals.seek_before(loc);\n             if !borrowed_locals.contains(*local) {\n                 self.sets.kill(*local);\n             }"}, {"sha": "cd00274afcc00b39f22eabb5ba2c46a5b5c8f8b1", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d737fb032b762e69e8d809c0e042d45e08b457d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d737fb032b762e69e8d809c0e042d45e08b457d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=1d737fb032b762e69e8d809c0e042d45e08b457d", "patch": "@@ -49,9 +49,10 @@\n //! For generators with state 1 (returned) and state 2 (poisoned) it does nothing.\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n+use crate::dataflow::generic::{Analysis, ResultsCursor};\n use crate::dataflow::{do_dataflow, DataflowResultsCursor, DebugFormatted};\n use crate::dataflow::{DataflowResults, DataflowResultsConsumer, FlowAtLocation};\n-use crate::dataflow::{HaveBeenBorrowedLocals, MaybeStorageLive, RequiresStorage};\n+use crate::dataflow::{MaybeBorrowedLocals, MaybeStorageLive, RequiresStorage};\n use crate::transform::no_landing_pads::no_landing_pads;\n use crate::transform::simplify;\n use crate::transform::{MirPass, MirSource};\n@@ -471,17 +472,10 @@ fn locals_live_across_suspend_points(\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n-    let borrowed_locals_analysis = HaveBeenBorrowedLocals::new(body_ref);\n-    let borrowed_locals_results = do_dataflow(\n-        tcx,\n-        body_ref,\n-        def_id,\n-        &[],\n-        &dead_unwinds,\n-        borrowed_locals_analysis,\n-        |bd, p| DebugFormatted::new(&bd.body().local_decls[p]),\n-    );\n-    let mut borrowed_locals_cursor = DataflowResultsCursor::new(&borrowed_locals_results, body_ref);\n+    let borrowed_locals_results =\n+        MaybeBorrowedLocals::new().into_engine(tcx, body_ref, def_id).iterate_to_fixpoint();\n+\n+    let mut borrowed_locals_cursor = ResultsCursor::new(body_ref, &borrowed_locals_results);\n \n     // Calculate the MIR locals that we actually need to keep storage around\n     // for.\n@@ -521,7 +515,7 @@ fn locals_live_across_suspend_points(\n                 // If a borrow is converted to a raw reference, we must also assume that it lives\n                 // forever. Note that the final liveness is still bounded by the storage liveness\n                 // of the local, which happens using the `intersect` operation below.\n-                borrowed_locals_cursor.seek(loc);\n+                borrowed_locals_cursor.seek_before(loc);\n                 liveness.outs[block].union(borrowed_locals_cursor.get());\n             }\n "}]}