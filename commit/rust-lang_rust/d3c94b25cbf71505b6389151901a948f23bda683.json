{"sha": "d3c94b25cbf71505b6389151901a948f23bda683", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYzk0YjI1Y2JmNzE1MDViNjM4OTE1MTkwMWE5NDhmMjNiZGE2ODM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-06-10T22:31:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-08T09:36:45Z"}, "message": "Don't generate Def::Err if it's not stored in def_map immediately", "tree": {"sha": "48cad017a84ec01b7e2d3f6b181874e37bc8e231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48cad017a84ec01b7e2d3f6b181874e37bc8e231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c94b25cbf71505b6389151901a948f23bda683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c94b25cbf71505b6389151901a948f23bda683", "html_url": "https://github.com/rust-lang/rust/commit/d3c94b25cbf71505b6389151901a948f23bda683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c94b25cbf71505b6389151901a948f23bda683/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4e2a5b2d410318051a38e6b7da10b45975d022", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4e2a5b2d410318051a38e6b7da10b45975d022", "html_url": "https://github.com/rust-lang/rust/commit/9b4e2a5b2d410318051a38e6b7da10b45975d022"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "576f96f12dfeae61995b25d8c3081e5313d1fcf1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3c94b25cbf71505b6389151901a948f23bda683/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c94b25cbf71505b6389151901a948f23bda683/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d3c94b25cbf71505b6389151901a948f23bda683", "patch": "@@ -2309,7 +2309,7 @@ impl<'a> Resolver<'a> {\n                                 );\n                                 err_path_resolution()\n                             }\n-                            Def::Local(..) | Def::Upvar(..) | Def::Fn(..) | Def::Err => {\n+                            Def::Local(..) | Def::Upvar(..) | Def::Fn(..) => {\n                                 // These entities are explicitly allowed\n                                 // to be shadowed by fresh bindings.\n                                 self.fresh_binding(ident, pat.id, outer_pat_id,\n@@ -2331,7 +2331,7 @@ impl<'a> Resolver<'a> {\n                 PatKind::TupleStruct(ref path, _, _) => {\n                     self.resolve_pattern_path(pat.id, None, path, ValueNS, |def| {\n                         match def {\n-                            Def::Struct(..) | Def::Variant(..) | Def::Err => true,\n+                            Def::Struct(..) | Def::Variant(..) => true,\n                             _ => false,\n                         }\n                     }, \"variant or struct\");\n@@ -2341,7 +2341,7 @@ impl<'a> Resolver<'a> {\n                     self.resolve_pattern_path(pat.id, qself.as_ref(), path, ValueNS, |def| {\n                         match def {\n                             Def::Struct(..) | Def::Variant(..) |\n-                            Def::Const(..) | Def::AssociatedConst(..) | Def::Err => true,\n+                            Def::Const(..) | Def::AssociatedConst(..) => true,\n                             _ => false,\n                         }\n                     }, \"variant, struct or constant\");\n@@ -2351,7 +2351,7 @@ impl<'a> Resolver<'a> {\n                     self.resolve_pattern_path(pat.id, None, path, TypeNS, |def| {\n                         match def {\n                             Def::Struct(..) | Def::Variant(..) |\n-                            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::Err => true,\n+                            Def::TyAlias(..) | Def::AssociatedTy(..) => true,\n                             _ => false,\n                         }\n                     }, \"variant, struct or type alias\");\n@@ -2482,7 +2482,7 @@ impl<'a> Resolver<'a> {\n                           record_used: bool)\n                           -> Option<LocalDef> {\n         if identifier.name == keywords::Invalid.name() {\n-            return Some(LocalDef::from_def(Def::Err));\n+            return None;\n         }\n \n         self.resolve_ident_in_lexical_scope(identifier, namespace, record_used)"}]}