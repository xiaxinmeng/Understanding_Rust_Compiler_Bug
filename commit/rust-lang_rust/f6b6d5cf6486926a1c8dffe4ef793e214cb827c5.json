{"sha": "f6b6d5cf6486926a1c8dffe4ef793e214cb827c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YjZkNWNmNjQ4NjkyNmExYzhkZmZlNGVmNzkzZTIxNGNiODI3YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T04:12:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-02T04:12:48Z"}, "message": "Auto merge of #79870 - sharnoff:smart-pointer-Any-type_id, r=shepmaster\n\nAdd docs note about `Any::type_id` on smart pointers\n\nFixes #79868.\n\nThere's an issue I've run into a couple times while using values of type `Box<dyn Any>` - essentially, calling `value.type_id()` doesn't dereference to the trait object, but uses the implementation of `Any` for `Box<dyn Any>`, giving us the `TypeId` of the container instead of the object inside it.\n\nI couldn't find any notes about this in the documentation and - while it could be inferred from existing knowledge of Rust and the blanket implemenation of `Any` - I think it'd be nice to have a note about it in the documentation for the `any` module.\n\nAnyways, here's a first draft of a section about it. I'm happy to revise wording :)", "tree": {"sha": "e046cd9eda96bcb84bc477dfc2e676ca0b04079d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e046cd9eda96bcb84bc477dfc2e676ca0b04079d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b6d5cf6486926a1c8dffe4ef793e214cb827c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b6d5cf6486926a1c8dffe4ef793e214cb827c5", "html_url": "https://github.com/rust-lang/rust/commit/f6b6d5cf6486926a1c8dffe4ef793e214cb827c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b6d5cf6486926a1c8dffe4ef793e214cb827c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0876f59b975a67ce79b0d83750f0d153f119b790", "url": "https://api.github.com/repos/rust-lang/rust/commits/0876f59b975a67ce79b0d83750f0d153f119b790", "html_url": "https://github.com/rust-lang/rust/commit/0876f59b975a67ce79b0d83750f0d153f119b790"}, {"sha": "72a7f736106187fb09474130921dfa4bcc1ceac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a7f736106187fb09474130921dfa4bcc1ceac2", "html_url": "https://github.com/rust-lang/rust/commit/72a7f736106187fb09474130921dfa4bcc1ceac2"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "eef8f2046d33e543a4b12d685c78dbf3bbc31678", "filename": "library/core/src/any.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6b6d5cf6486926a1c8dffe4ef793e214cb827c5/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b6d5cf6486926a1c8dffe4ef793e214cb827c5/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=f6b6d5cf6486926a1c8dffe4ef793e214cb827c5", "patch": "@@ -14,6 +14,29 @@\n //!\n //! [`Box`]: ../../std/boxed/struct.Box.html\n //!\n+//! # Smart pointers and `dyn Any`\n+//!\n+//! One piece of behavior to keep in mind when using `Any` as a trait object,\n+//! especially with types like `Box<dyn Any>` or `Arc<dyn Any>`, is that simply\n+//! calling `.type_id()` on the value will produce the `TypeId` of the\n+//! *container*, not the underlying trait object. This can be avoided by\n+//! converting the smart pointer into a `&dyn Any` instead, which will return\n+//! the object's `TypeId`. For example:\n+//!\n+//! ```\n+//! use std::any::{Any, TypeId};\n+//!\n+//! let boxed: Box<dyn Any> = Box::new(3_i32);\n+//!\n+//! // You're more likely to want this:\n+//! let actual_id = (&*boxed).type_id();\n+//! // ... than this:\n+//! let boxed_id = boxed.type_id();\n+//!\n+//! assert_eq!(actual_id, TypeId::of::<i32>());\n+//! assert_eq!(boxed_id, TypeId::of::<Box<dyn Any>>());\n+//! ```\n+//!\n //! # Examples\n //!\n //! Consider a situation where we want to log out a value passed to a function."}]}