{"sha": "691d1c1e12602c57237e9ccddac406ebd0c54082", "node_id": "C_kwDOAAsO6NoAKDY5MWQxYzFlMTI2MDJjNTcyMzdlOWNjZGRhYzQwNmViZDBjNTQwODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T05:26:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T05:26:14Z"}, "message": "Auto merge of #95065 - matthiaskrgr:rollup-75i6oz5, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #95013 (Update browser-ui-test version to 0.8.2)\n - #95039 (Make negative coherence work when there's impl negative on super predicates)\n - #95047 (Refactor: remove an unnecessary pattern for ignoring all parts)\n - #95048 (update Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "058231f5b253bd4aed04b991c28bf3300ce962b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/058231f5b253bd4aed04b991c28bf3300ce962b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/691d1c1e12602c57237e9ccddac406ebd0c54082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/691d1c1e12602c57237e9ccddac406ebd0c54082", "html_url": "https://github.com/rust-lang/rust/commit/691d1c1e12602c57237e9ccddac406ebd0c54082", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/691d1c1e12602c57237e9ccddac406ebd0c54082/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f3a4ecb48ead838638e902f2fa4e5f3059779b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f3a4ecb48ead838638e902f2fa4e5f3059779b", "html_url": "https://github.com/rust-lang/rust/commit/d6f3a4ecb48ead838638e902f2fa4e5f3059779b"}, {"sha": "d3dc65be66d5abac5f017ce673d5aa600e46e55e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3dc65be66d5abac5f017ce673d5aa600e46e55e", "html_url": "https://github.com/rust-lang/rust/commit/d3dc65be66d5abac5f017ce673d5aa600e46e55e"}], "stats": {"total": 149, "additions": 101, "deletions": 48}, "files": [{"sha": "83ab761aa55a4a4b9f733ac569631313ae440afe", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -748,6 +748,13 @@ pub struct TraitPredicate<'tcx> {\n \n     pub constness: BoundConstness,\n \n+    /// If polarity is Positive: we are proving that the trait is implemented.\n+    ///\n+    /// If polarity is Negative: we are proving that a negative impl of this trait\n+    /// exists. (Note that coherence also checks whether negative impls of supertraits\n+    /// exist via a series of predicates.)\n+    ///\n+    /// If polarity is Reserved: that's a bug.\n     pub polarity: ImplPolarity,\n }\n "}, {"sha": "d5b1aa00e52de29a921fcd7f97ffdb9267d27dc9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -1129,7 +1129,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n \n         for param in &generics.params {\n-            if let GenericParamKind::Lifetime { .. } = param.kind {\n+            if let GenericParamKind::Lifetime = param.kind {\n                 continue;\n             }\n "}, {"sha": "94a4001bbb91ac143d5c1da88b00b6766e81e2c2", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 58, "deletions": 32, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -17,8 +17,8 @@ use crate::traits::{\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::CRATE_HIR_ID;\n-use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_infer::traits::TraitEngine;\n+use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::traits::{util, TraitEngine};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, TreatParams};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -353,49 +353,75 @@ fn negative_impl<'cx, 'tcx>(\n     })\n }\n \n+/// Try to prove that a negative impl exist for the given obligation and their super predicates.\n+#[instrument(level = \"debug\", skip(selcx))]\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     region_context: DefId,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n     let infcx = &selcx.infcx().fork();\n+\n+    if resolve_negative_obligation(infcx, param_env, region_context, o) {\n+        return true;\n+    }\n+\n+    // Try to prove a negative obligation exist for super predicates\n+    for o in util::elaborate_predicates(infcx.tcx, iter::once(o.predicate)) {\n+        if resolve_negative_obligation(infcx, param_env, region_context, &o) {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n+#[instrument(level = \"debug\", skip(infcx))]\n+fn resolve_negative_obligation<'cx, 'tcx>(\n+    infcx: &InferCtxt<'cx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    region_context: DefId,\n+    o: &PredicateObligation<'tcx>,\n+) -> bool {\n     let tcx = infcx.tcx;\n-    o.flip_polarity(tcx)\n-        .map(|o| {\n-            let mut fulfillment_cx = FulfillmentContext::new();\n-            fulfillment_cx.register_predicate_obligation(infcx, o);\n-\n-            let errors = fulfillment_cx.select_all_or_error(infcx);\n-            if !errors.is_empty() {\n-                return false;\n-            }\n \n-            let mut outlives_env = OutlivesEnvironment::new(param_env);\n-            // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n+    let Some(o) = o.flip_polarity(tcx) else {\n+        return false;\n+    };\n \n-            // \"Save\" the accumulated implied bounds into the outlives environment\n-            // (due to the FIXME above, there aren't any, but this step is still needed).\n-            // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n-            // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n-            // function bodies with closures).\n-            outlives_env.save_implied_bounds(CRATE_HIR_ID);\n+    let mut fulfillment_cx = FulfillmentContext::new();\n+    fulfillment_cx.register_predicate_obligation(infcx, o);\n \n-            infcx.process_registered_region_obligations(\n-                outlives_env.region_bound_pairs_map(),\n-                Some(tcx.lifetimes.re_root_empty),\n-                param_env,\n-            );\n+    let errors = fulfillment_cx.select_all_or_error(infcx);\n \n-            let errors =\n-                infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n-            if !errors.is_empty() {\n-                return false;\n-            }\n+    if !errors.is_empty() {\n+        return false;\n+    }\n \n-            true\n-        })\n-        .unwrap_or(false)\n+    let mut outlives_env = OutlivesEnvironment::new(param_env);\n+    // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n+\n+    // \"Save\" the accumulated implied bounds into the outlives environment\n+    // (due to the FIXME above, there aren't any, but this step is still needed).\n+    // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n+    // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n+    // function bodies with closures).\n+    outlives_env.save_implied_bounds(CRATE_HIR_ID);\n+\n+    infcx.process_registered_region_obligations(\n+        outlives_env.region_bound_pairs_map(),\n+        Some(tcx.lifetimes.re_root_empty),\n+        param_env,\n+    );\n+\n+    let errors = infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+\n+    if !errors.is_empty() {\n+        return false;\n+    }\n+\n+    true\n }\n \n pub fn trait_ref_is_knowable<'tcx>("}, {"sha": "d78fc6d208330ce6e017d5aa730df7ee9c5e3021", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.8.1 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.8.3 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "c046a6c8a26f3f2430d4fb310ef9c8a7014048b2", "filename": "src/ci/scripts/should-skip-this.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -25,6 +25,7 @@ if [[ -n \"${CI_ONLY_WHEN_SUBMODULES_CHANGED-}\" ]]; then\n     elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n              src/test/rustdoc-gui \\\n              src/librustdoc \\\n+             src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile \\\n              src/tools/rustdoc-gui); then\n         # There was a change in either rustdoc or in its GUI tests.\n         echo \"Rustdoc was updated\""}, {"sha": "1ea0ddc7430e1c3bf5db8b2d6fc212bab2b8a92c", "filename": "src/test/ui/coherence/coherence-overlap-double-negative.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-double-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-double-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-double-negative.rs?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n+\n+trait A {}\n+trait B: A {}\n+\n+impl !A for u32 {}\n+impl !B for u32 {}\n+\n+fn main() {}"}, {"sha": "48dffc921a31bb0fa2015996673ca62b1369e1d9", "filename": "src/test/ui/coherence/coherence-overlap-negate-alias-strict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.rs?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n #![feature(negative_impls)]\n #![feature(rustc_attrs)]\n #![feature(trait_alias)]\n@@ -13,7 +15,5 @@ impl !A for u32 {}\n trait C {}\n impl<T: AB> C for T {}\n impl C for u32 {}\n-//~^ ERROR: conflicting implementations of trait `C` for type `u32` [E0119]\n-// FIXME this should work, we should implement an `assemble_neg_candidates` fn\n \n fn main() {}"}, {"sha": "30d837a5c5019d28dd3af83857354089f5be01d2", "filename": "src/test/ui/coherence/coherence-overlap-negate-alias-strict.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6f3a4ecb48ead838638e902f2fa4e5f3059779b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6f3a4ecb48ead838638e902f2fa4e5f3059779b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-alias-strict.stderr?ref=d6f3a4ecb48ead838638e902f2fa4e5f3059779b", "patch": "@@ -1,11 +0,0 @@\n-error[E0119]: conflicting implementations of trait `C` for type `u32`\n-  --> $DIR/coherence-overlap-negate-alias-strict.rs:15:1\n-   |\n-LL | impl<T: AB> C for T {}\n-   | ------------------- first implementation here\n-LL | impl C for u32 {}\n-   | ^^^^^^^^^^^^^^ conflicting implementation for `u32`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "d296a094a37046920af49bcff1d06b794d44da33", "filename": "src/test/ui/coherence/coherence-overlap-super-negative.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-super-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/691d1c1e12602c57237e9ccddac406ebd0c54082/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-super-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-super-negative.rs?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(with_negative_coherence)]\n+\n+trait Trait1: Trait2 {}\n+trait Trait2 {}\n+\n+struct MyType {}\n+impl !Trait2 for MyType {}\n+\n+#[rustc_strict_coherence]\n+trait Foo {}\n+impl<T: Trait1> Foo for T {}\n+impl Foo for MyType {}\n+\n+fn main() {}"}, {"sha": "8e818ffa1b85f4e740c4096fd38c62b2b73f4d83", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=691d1c1e12602c57237e9ccddac406ebd0c54082", "patch": "@@ -1 +1 @@\n-Subproject commit 7bc0c986217629e6c831edcb133532023a5aec63\n+Subproject commit 8e818ffa1b85f4e740c4096fd38c62b2b73f4d83"}]}