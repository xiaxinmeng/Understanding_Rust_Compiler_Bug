{"sha": "20c27dbdbe3116be205d66af88e6f5ac88b862d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzI3ZGJkYmUzMTE2YmUyMDVkNjZhZjg4ZTZmNWFjODhiODYyZDM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-18T23:06:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-18T23:06:26Z"}, "message": "Collect inherent impls in unnamed consts", "tree": {"sha": "9f01d4563413e95e0b743b991f2a6ff522db889d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f01d4563413e95e0b743b991f2a6ff522db889d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c27dbdbe3116be205d66af88e6f5ac88b862d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c27dbdbe3116be205d66af88e6f5ac88b862d3", "html_url": "https://github.com/rust-lang/rust/commit/20c27dbdbe3116be205d66af88e6f5ac88b862d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c27dbdbe3116be205d66af88e6f5ac88b862d3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b777d46ae61fce3c3a891eeda5b5d7c91fda3871", "url": "https://api.github.com/repos/rust-lang/rust/commits/b777d46ae61fce3c3a891eeda5b5d7c91fda3871", "html_url": "https://github.com/rust-lang/rust/commit/b777d46ae61fce3c3a891eeda5b5d7c91fda3871"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "48bbcfd9ffada0e2cfeb6605a7dc7008ef09903c", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/20c27dbdbe3116be205d66af88e6f5ac88b862d3/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c27dbdbe3116be205d66af88e6f5ac88b862d3/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=20c27dbdbe3116be205d66af88e6f5ac88b862d3", "patch": "@@ -246,29 +246,39 @@ pub struct InherentImpls {\n \n impl InherentImpls {\n     pub(crate) fn inherent_impls_in_crate_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n-        let mut map: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+        let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n-        for (_module_id, module_data) in crate_def_map.modules() {\n-            for impl_id in module_data.scope.impls() {\n-                let data = db.impl_data(impl_id);\n-                if data.target_trait.is_some() {\n-                    continue;\n+        collect_def_map(db, &crate_def_map, &mut impls);\n+\n+        return Arc::new(impls);\n+\n+        fn collect_def_map(db: &dyn HirDatabase, def_map: &DefMap, impls: &mut InherentImpls) {\n+            for (_module_id, module_data) in def_map.modules() {\n+                for impl_id in module_data.scope.impls() {\n+                    let data = db.impl_data(impl_id);\n+                    if data.target_trait.is_some() {\n+                        continue;\n+                    }\n+\n+                    let self_ty = db.impl_self_ty(impl_id);\n+                    let fp = TyFingerprint::for_inherent_impl(self_ty.skip_binders());\n+                    if let Some(fp) = fp {\n+                        impls.map.entry(fp).or_default().push(impl_id);\n+                    }\n+                    // `fp` should only be `None` in error cases (either erroneous code or incomplete name resolution)\n                 }\n \n-                let self_ty = db.impl_self_ty(impl_id);\n-                let fp = TyFingerprint::for_inherent_impl(self_ty.skip_binders());\n-                if let Some(fp) = fp {\n-                    map.entry(fp).or_default().push(impl_id);\n+                // To better support custom derives, collect impls in all unnamed const items.\n+                // const _: () = { ... };\n+                for konst in module_data.scope.unnamed_consts() {\n+                    let body = db.body(konst.into());\n+                    for (_, block_def_map) in body.blocks(db.upcast()) {\n+                        collect_def_map(db, &block_def_map, impls);\n+                    }\n                 }\n-                // `fp` should only be `None` in error cases (either erroneous code or incomplete name resolution)\n             }\n         }\n-\n-        // NOTE: We're not collecting inherent impls from unnamed consts here, we intentionally only\n-        // support trait impls there.\n-\n-        Arc::new(Self { map })\n     }\n \n     pub fn for_self_ty(&self, self_ty: &Ty) -> &[ImplId] {"}, {"sha": "a4c132bc5f206143e0c85543f6346a184fd89887", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/20c27dbdbe3116be205d66af88e6f5ac88b862d3/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c27dbdbe3116be205d66af88e6f5ac88b862d3/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=20c27dbdbe3116be205d66af88e6f5ac88b862d3", "patch": "@@ -1294,7 +1294,7 @@ mod b {\n }\n \n #[test]\n-fn impl_in_unnamed_const() {\n+fn trait_impl_in_unnamed_const() {\n     check_types(\n         r#\"\n struct S;\n@@ -1314,3 +1314,38 @@ fn f() {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn inherent_impl_in_unnamed_const() {\n+    check_types(\n+        r#\"\n+struct S;\n+\n+const _: () = {\n+    impl S {\n+        fn method(&self) -> u16 { 0 }\n+\n+        pub(super) fn super_method(&self) -> u16 { 0 }\n+\n+        pub(crate) fn crate_method(&self) -> u16 { 0 }\n+\n+        pub fn pub_method(&self) -> u16 { 0 }\n+    }\n+};\n+\n+fn f() {\n+    S.method();\n+  //^^^^^^^^^^ u16\n+\n+    S.super_method();\n+  //^^^^^^^^^^^^^^^^ u16\n+\n+    S.crate_method();\n+  //^^^^^^^^^^^^^^^^ u16\n+\n+    S.pub_method();\n+  //^^^^^^^^^^^^^^ u16\n+}\n+    \"#,\n+    );\n+}"}]}