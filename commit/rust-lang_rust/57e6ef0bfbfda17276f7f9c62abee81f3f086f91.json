{"sha": "57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "node_id": "C_kwDOAAsO6NoAKDU3ZTZlZjBiZmJmZGExNzI3NmY3ZjljNjJhYmVlODFmM2YwODZmOTE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-12T16:22:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-12T16:22:37Z"}, "message": "tighten up invariants", "tree": {"sha": "6b6ea0252946cd3175dca4472d1ee76942e05be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b6ea0252946cd3175dca4472d1ee76942e05be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "html_url": "https://github.com/rust-lang/rust/commit/57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d4737fb9845e09bd860860a6a687bd7edd3bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d4737fb9845e09bd860860a6a687bd7edd3bcd", "html_url": "https://github.com/rust-lang/rust/commit/18d4737fb9845e09bd860860a6a687bd7edd3bcd"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "644689f432a2adb8e4da8a5ea1c90be2c7bc4275", "filename": "crates/mbe/src/to_parser_tokens.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/crates%2Fmbe%2Fsrc%2Fto_parser_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/crates%2Fmbe%2Fsrc%2Fto_parser_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fto_parser_tokens.rs?ref=57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "patch": "@@ -62,7 +62,9 @@ pub(crate) fn to_parser_tokens(buffer: &TokenBuffer) -> parser::Tokens {\n                         let kind = SyntaxKind::from_char(punct.char)\n                             .unwrap_or_else(|| panic!(\"{:#?} is not a valid punct\", punct));\n                         res.push(kind);\n-                        res.was_joint(punct.spacing == tt::Spacing::Joint);\n+                        if punct.spacing == tt::Spacing::Joint {\n+                            res.was_joint();\n+                        }\n                     }\n                 }\n                 cursor.bump()"}, {"sha": "1128cfe99d6009d7d6b08caa680bcae54525adb9", "filename": "crates/parser/src/tokens.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/crates%2Fparser%2Fsrc%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/crates%2Fparser%2Fsrc%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftokens.rs?ref=57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "patch": "@@ -51,11 +51,8 @@ impl Tokens {\n     /// tokens.push(curr_joint)\n     /// ```\n     #[inline]\n-    pub fn was_joint(&mut self, yes: bool) {\n-        let idx = self.len();\n-        if yes && idx > 0 {\n-            self.set_joint(idx - 1);\n-        }\n+    pub fn was_joint(&mut self) {\n+        self.set_joint(self.len() - 1);\n     }\n     #[inline]\n     pub fn push_ident(&mut self, contextual_kw: SyntaxKind) {"}, {"sha": "865e146482caf528553b21f298a174744d5620fa", "filename": "crates/syntax/src/parsing.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e6ef0bfbfda17276f7f9c62abee81f3f086f91/crates%2Fsyntax%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing.rs?ref=57e6ef0bfbfda17276f7f9c62abee81f3f086f91", "patch": "@@ -58,18 +58,22 @@ pub(crate) fn parse_text_as<T: AstNode>(\n pub(crate) fn to_parser_tokens(text: &str, lexer_tokens: &[lexer::Token]) -> ::parser::Tokens {\n     let mut off = 0;\n     let mut res = parser::Tokens::default();\n-    let mut was_joint = true;\n+    let mut was_joint = false;\n     for t in lexer_tokens {\n         if t.kind.is_trivia() {\n             was_joint = false;\n-        } else if t.kind == SyntaxKind::IDENT {\n-            let token_text = &text[off..][..usize::from(t.len)];\n-            let contextual_kw =\n-                SyntaxKind::from_contextual_keyword(token_text).unwrap_or(SyntaxKind::IDENT);\n-            res.push_ident(contextual_kw);\n         } else {\n-            res.was_joint(was_joint);\n-            res.push(t.kind);\n+            if t.kind == SyntaxKind::IDENT {\n+                let token_text = &text[off..][..usize::from(t.len)];\n+                let contextual_kw =\n+                    SyntaxKind::from_contextual_keyword(token_text).unwrap_or(SyntaxKind::IDENT);\n+                res.push_ident(contextual_kw);\n+            } else {\n+                if was_joint {\n+                    res.was_joint();\n+                }\n+                res.push(t.kind);\n+            }\n             was_joint = true;\n         }\n         off += usize::from(t.len);"}]}