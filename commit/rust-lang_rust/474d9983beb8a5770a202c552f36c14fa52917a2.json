{"sha": "474d9983beb8a5770a202c552f36c14fa52917a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NGQ5OTgzYmViOGE1NzcwYTIwMmM1NTJmMzZjMTRmYTUyOTE3YTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-21T00:28:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-21T00:28:06Z"}, "message": "rustllvm: Use target alignment for atomic load/store", "tree": {"sha": "f794f14ce03c53a813dfeefcdfa6c80b40a7d62b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f794f14ce03c53a813dfeefcdfa6c80b40a7d62b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/474d9983beb8a5770a202c552f36c14fa52917a2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/474d9983beb8a5770a202c552f36c14fa52917a2", "html_url": "https://github.com/rust-lang/rust/commit/474d9983beb8a5770a202c552f36c14fa52917a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/474d9983beb8a5770a202c552f36c14fa52917a2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26babaafcdbcfdf2e842d84dbeabbed0dae6efef", "url": "https://api.github.com/repos/rust-lang/rust/commits/26babaafcdbcfdf2e842d84dbeabbed0dae6efef", "html_url": "https://github.com/rust-lang/rust/commit/26babaafcdbcfdf2e842d84dbeabbed0dae6efef"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "160f375897b825c424d08a567310d20387aadbf6", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/474d9983beb8a5770a202c552f36c14fa52917a2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474d9983beb8a5770a202c552f36c14fa52917a2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=474d9983beb8a5770a202c552f36c14fa52917a2", "patch": "@@ -1571,13 +1571,15 @@ pub mod llvm {\n         pub unsafe fn LLVMBuildAtomicLoad(B: BuilderRef,\n                                           PointerVal: ValueRef,\n                                           Name: *c_char,\n-                                          Order: AtomicOrdering)\n+                                          Order: AtomicOrdering,\n+                                          Alignment: c_uint)\n                                        -> ValueRef;\n \n         pub unsafe fn LLVMBuildAtomicStore(B: BuilderRef,\n                                            Val: ValueRef,\n                                            Ptr: ValueRef,\n-                                           Order: AtomicOrdering)\n+                                           Order: AtomicOrdering,\n+                                           Alignment: c_uint)\n                                         -> ValueRef;\n \n         pub unsafe fn LLVMBuildAtomicCmpXchg(B: BuilderRef,"}, {"sha": "cd914e1072b316fec7b8facf9792bf1e1f522259", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/474d9983beb8a5770a202c552f36c14fa52917a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474d9983beb8a5770a202c552f36c14fa52917a2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=474d9983beb8a5770a202c552f36c14fa52917a2", "patch": "@@ -14,6 +14,7 @@ use lib::llvm::{Opcode, IntPredicate, RealPredicate, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n use lib;\n use middle::trans::common::*;\n+use middle::trans::machine::llalign_of_min;\n use syntax::codemap::span;\n \n use core::hashmap::HashMap;\n@@ -544,7 +545,8 @@ pub fn AtomicLoad(cx: block, PointerVal: ValueRef, order: AtomicOrdering) -> Val\n             return llvm::LLVMGetUndef(ccx.int_type);\n         }\n         count_insn(cx, \"load.atomic\");\n-        return llvm::LLVMBuildAtomicLoad(B(cx), PointerVal, noname(), order);\n+        let align = llalign_of_min(*ccx, ccx.int_type);\n+        return llvm::LLVMBuildAtomicLoad(B(cx), PointerVal, noname(), order, align as c_uint);\n     }\n }\n \n@@ -558,7 +560,6 @@ pub fn LoadRangeAssert(cx: block, PointerVal: ValueRef, lo: c_ulonglong,\n         let min = llvm::LLVMConstInt(t, lo, signed);\n         let max = llvm::LLVMConstInt(t, hi, signed);\n \n-\n         do vec::as_imm_buf([min, max]) |ptr, len| {\n             llvm::LLVMSetMetadata(value, lib::llvm::MD_range as c_uint,\n                                   llvm::LLVMMDNode(ptr, len as c_uint));\n@@ -586,7 +587,8 @@ pub fn AtomicStore(cx: block, Val: ValueRef, Ptr: ValueRef, order: AtomicOrderin\n                val_str(cx.ccx().tn, Val),\n                val_str(cx.ccx().tn, Ptr));\n         count_insn(cx, \"store.atomic\");\n-        llvm::LLVMBuildAtomicStore(B(cx), Val, Ptr, order);\n+        let align = llalign_of_min(cx.ccx(), cx.ccx().int_type);\n+        llvm::LLVMBuildAtomicStore(B(cx), Val, Ptr, order, align as c_uint);\n     }\n }\n "}, {"sha": "cff448b6a1a34807d06e7c06dcadfca2978f4dfe", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/474d9983beb8a5770a202c552f36c14fa52917a2/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/474d9983beb8a5770a202c552f36c14fa52917a2/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=474d9983beb8a5770a202c552f36c14fa52917a2", "patch": "@@ -548,22 +548,24 @@ extern \"C\" LLVMTypeRef LLVMMetadataType(void) {\n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n                                             const char* Name,\n-                                            AtomicOrdering order) {\n+                                            AtomicOrdering order,\n+                                            unsigned alignment) {\n     LoadInst* li = new LoadInst(unwrap(source),0);\n     li->setVolatile(true);\n     li->setAtomic(order);\n-    li->setAlignment(sizeof(intptr_t));\n+    li->setAlignment(alignment);\n     return wrap(unwrap(B)->Insert(li, Name));\n }\n \n extern \"C\" LLVMValueRef LLVMBuildAtomicStore(LLVMBuilderRef B,\n-                                            LLVMValueRef val,\n-                                            LLVMValueRef target,\n-                                            AtomicOrdering order) {\n+                                             LLVMValueRef val,\n+                                             LLVMValueRef target,\n+                                             AtomicOrdering order,\n+                                             unsigned alignment) {\n     StoreInst* si = new StoreInst(unwrap(val),unwrap(target));\n     si->setVolatile(true);\n     si->setAtomic(order);\n-    si->setAlignment(sizeof(intptr_t));\n+    si->setAlignment(alignment);\n     return wrap(unwrap(B)->Insert(si));\n }\n "}]}