{"sha": "484da378452ed123919ee6d4d5a7e4e98c5d4060", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NGRhMzc4NDUyZWQxMjM5MTllZTZkNGQ1YTdlNGU5OGM1ZDQwNjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-23T11:47:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-23T11:47:14Z"}, "message": "rename HashesMap to IncrementalHashesMap", "tree": {"sha": "5a2f76fe16afbd6302500bddd0c47c91f824bde8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a2f76fe16afbd6302500bddd0c47c91f824bde8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/484da378452ed123919ee6d4d5a7e4e98c5d4060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/484da378452ed123919ee6d4d5a7e4e98c5d4060", "html_url": "https://github.com/rust-lang/rust/commit/484da378452ed123919ee6d4d5a7e4e98c5d4060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/484da378452ed123919ee6d4d5a7e4e98c5d4060/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226e1e5ded651f18a9fef8e5865a6f4f0db0d051", "url": "https://api.github.com/repos/rust-lang/rust/commits/226e1e5ded651f18a9fef8e5865a6f4f0db0d051", "html_url": "https://github.com/rust-lang/rust/commit/226e1e5ded651f18a9fef8e5865a6f4f0db0d051"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "b99a3b4ba2eeef5d5d09a405b3634b2ed8a84021", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -26,7 +26,7 @@ use rustc::util::common::time;\n use rustc::util::nodemap::NodeSet;\n use rustc_back::sha2::{Sha256, Digest};\n use rustc_borrowck as borrowck;\n-use rustc_incremental::{self, HashesMap};\n+use rustc_incremental::{self, IncrementalHashesMap};\n use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::macro_import;\n use rustc_metadata::creader::read_local_crates;\n@@ -172,7 +172,7 @@ pub fn compile_input(sess: &Session,\n                                     resolutions,\n                                     &arenas,\n                                     &crate_name,\n-                                    |tcx, mir_map, analysis, hashes_map, result| {\n+                                    |tcx, mir_map, analysis, incremental_hashes_map, result| {\n             {\n                 // Eventually, we will want to track plugins.\n                 let _ignore = tcx.dep_graph.in_ignore();\n@@ -203,7 +203,7 @@ pub fn compile_input(sess: &Session,\n             let trans = phase_4_translate_to_llvm(tcx,\n                                                   mir_map.unwrap(),\n                                                   analysis,\n-                                                  &hashes_map);\n+                                                  &incremental_hashes_map);\n \n             if log_enabled!(::log::INFO) {\n                 println!(\"Post-trans\");\n@@ -798,7 +798,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     where F: for<'a> FnOnce(TyCtxt<'a, 'tcx, 'tcx>,\n                             Option<MirMap<'tcx>>,\n                             ty::CrateAnalysis,\n-                            HashesMap,\n+                            IncrementalHashesMap,\n                             CompileResult) -> R\n {\n     macro_rules! try_with_f {\n@@ -862,16 +862,16 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                              index,\n                              name,\n                              |tcx| {\n-        let hashes_map =\n+        let incremental_hashes_map =\n             time(time_passes,\n-                 \"compute_hashes_map\",\n-                 || rustc_incremental::compute_hashes_map(tcx));\n+                 \"compute_incremental_hashes_map\",\n+                 || rustc_incremental::compute_incremental_hashes_map(tcx));\n         time(time_passes,\n              \"load_dep_graph\",\n-             || rustc_incremental::load_dep_graph(tcx, &hashes_map));\n+             || rustc_incremental::load_dep_graph(tcx, &incremental_hashes_map));\n \n         // passes are timed inside typeck\n-        try_with_f!(typeck::check_crate(tcx), (tcx, None, analysis, hashes_map));\n+        try_with_f!(typeck::check_crate(tcx), (tcx, None, analysis, incremental_hashes_map));\n \n         time(time_passes,\n              \"const checking\",\n@@ -941,7 +941,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         // lint warnings and so on -- kindck used to do this abort, but\n         // kindck is gone now). -nmatsakis\n         if sess.err_count() > 0 {\n-            return Ok(f(tcx, Some(mir_map), analysis, hashes_map, Err(sess.err_count())));\n+            return Ok(f(tcx, Some(mir_map), analysis, incremental_hashes_map, Err(sess.err_count())));\n         }\n \n         analysis.reachable =\n@@ -969,18 +969,18 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         // The above three passes generate errors w/o aborting\n         if sess.err_count() > 0 {\n-            return Ok(f(tcx, Some(mir_map), analysis, hashes_map, Err(sess.err_count())));\n+            return Ok(f(tcx, Some(mir_map), analysis, incremental_hashes_map, Err(sess.err_count())));\n         }\n \n-        Ok(f(tcx, Some(mir_map), analysis, hashes_map, Ok(())))\n+        Ok(f(tcx, Some(mir_map), analysis, incremental_hashes_map, Ok(())))\n     })\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            mut mir_map: MirMap<'tcx>,\n                                            analysis: ty::CrateAnalysis,\n-                                           hashes_map: &HashesMap)\n+                                           incremental_hashes_map: &IncrementalHashesMap)\n                                            -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n@@ -1014,15 +1014,15 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let translation =\n         time(time_passes,\n              \"translation\",\n-             move || trans::trans_crate(tcx, &mir_map, analysis, &hashes_map));\n+             move || trans::trans_crate(tcx, &mir_map, analysis, &incremental_hashes_map));\n \n     time(time_passes,\n          \"assert dep graph\",\n          move || rustc_incremental::assert_dep_graph(tcx));\n \n     time(time_passes,\n          \"serialize dep graph\",\n-         move || rustc_incremental::save_dep_graph(tcx, &hashes_map));\n+         move || rustc_incremental::save_dep_graph(tcx, &incremental_hashes_map));\n \n     translation\n }"}, {"sha": "d41d718be63143f186ffb204cdbfd62599d01f0e", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -41,9 +41,10 @@ use self::svh_visitor::StrictVersionHashVisitor;\n \n mod svh_visitor;\n \n-pub type HashesMap = FnvHashMap<DepNode<DefId>, u64>;\n+pub type IncrementalHashesMap = FnvHashMap<DepNode<DefId>, u64>;\n \n-pub fn compute_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> HashesMap {\n+pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                                                    -> IncrementalHashesMap {\n     let _ignore = tcx.dep_graph.in_ignore();\n     let krate = tcx.map.krate();\n     let mut visitor = HashItemsVisitor { tcx: tcx, hashes: FnvHashMap() };\n@@ -55,7 +56,7 @@ pub fn compute_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> HashesMa\n \n struct HashItemsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    hashes: HashesMap,\n+    hashes: IncrementalHashesMap,\n }\n \n impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {"}, {"sha": "d31d97b22cf4f80444a1cc1a96885cb835a5519c", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -38,8 +38,8 @@ mod calculate_svh;\n mod persist;\n \n pub use assert_dep_graph::assert_dep_graph;\n-pub use calculate_svh::compute_hashes_map;\n-pub use calculate_svh::HashesMap;\n+pub use calculate_svh::compute_incremental_hashes_map;\n+pub use calculate_svh::IncrementalHashesMap;\n pub use persist::load_dep_graph;\n pub use persist::save_dep_graph;\n pub use persist::save_trans_partition;"}, {"sha": "12dacf273b962baaca87e3b12af1c87998c7e07b", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -20,22 +20,24 @@ use std::io::{ErrorKind, Read};\n use std::fs::File;\n use syntax::ast;\n \n-use HashesMap;\n+use IncrementalHashesMap;\n use super::data::*;\n use super::util::*;\n \n pub struct HashContext<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    hashes_map: &'a HashesMap,\n+    incremental_hashes_map: &'a IncrementalHashesMap,\n     item_metadata_hashes: FnvHashMap<DefId, u64>,\n     crate_hashes: FnvHashMap<ast::CrateNum, Svh>,\n }\n \n impl<'a, 'tcx> HashContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, hashes_map: &'a HashesMap) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+               incremental_hashes_map: &'a IncrementalHashesMap)\n+               -> Self {\n         HashContext {\n             tcx: tcx,\n-            hashes_map: hashes_map,\n+            incremental_hashes_map: incremental_hashes_map,\n             item_metadata_hashes: FnvHashMap(),\n             crate_hashes: FnvHashMap(),\n         }\n@@ -63,7 +65,7 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n                         def_id,\n                         self.tcx.item_path_str(def_id));\n \n-                Some((def_id, self.hashes_map[dep_node]))\n+                Some((def_id, self.incremental_hashes_map[dep_node]))\n             }\n \n             // MetaData from other crates is an *input* to us."}, {"sha": "7449205c536fa6e2610096fd008c0bc31fa19976", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -22,7 +22,7 @@ use std::io::Read;\n use std::fs::{self, File};\n use std::path::{Path};\n \n-use HashesMap;\n+use IncrementalHashesMap;\n use super::data::*;\n use super::directory::*;\n use super::dirty_clean;\n@@ -40,17 +40,17 @@ type CleanEdges = Vec<(DepNode<DefId>, DepNode<DefId>)>;\n /// actually it doesn't matter all that much.) See `README.md` for\n /// more general overview.\n pub fn load_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                hashes: &HashesMap) {\n+                                incremental_hashes_map: &IncrementalHashesMap) {\n     if tcx.sess.opts.incremental.is_none() {\n         return;\n     }\n \n     let _ignore = tcx.dep_graph.in_ignore();\n-    load_dep_graph_if_exists(tcx, hashes);\n+    load_dep_graph_if_exists(tcx, incremental_hashes_map);\n }\n \n fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                      hashes: &HashesMap) {\n+                                      incremental_hashes_map: &IncrementalHashesMap) {\n     let dep_graph_path = dep_graph_path(tcx).unwrap();\n     let dep_graph_data = match load_data(tcx.sess, &dep_graph_path) {\n         Some(p) => p,\n@@ -63,7 +63,7 @@ fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         None => return // no file\n     };\n \n-    match decode_dep_graph(tcx, hashes, &dep_graph_data, &work_products_data) {\n+    match decode_dep_graph(tcx, incremental_hashes_map, &dep_graph_data, &work_products_data) {\n         Ok(dirty_nodes) => dirty_nodes,\n         Err(err) => {\n             tcx.sess.warn(\n@@ -100,7 +100,7 @@ fn load_data(sess: &Session, path: &Path) -> Option<Vec<u8>> {\n /// Decode the dep graph and load the edges/nodes that are still clean\n /// into `tcx.dep_graph`.\n pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  hashes: &HashesMap,\n+                                  incremental_hashes_map: &IncrementalHashesMap,\n                                   dep_graph_data: &[u8],\n                                   work_products_data: &[u8])\n                                   -> Result<(), Error>\n@@ -137,7 +137,10 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // reason for this is that this way we can include nodes that have\n     // been removed (which no longer have a `DefId` in the current\n     // compilation).\n-    let dirty_raw_source_nodes = dirty_nodes(tcx, hashes, &serialized_dep_graph.hashes, &retraced);\n+    let dirty_raw_source_nodes = dirty_nodes(tcx,\n+                                             incremental_hashes_map,\n+                                             &serialized_dep_graph.hashes,\n+                                             &retraced);\n \n     // Create a list of (raw-source-node ->\n     // retracted-target-node) edges. In the process of retracing the\n@@ -210,11 +213,11 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// Computes which of the original set of def-ids are dirty. Stored in\n /// a bit vector where the index is the DefPathIndex.\n fn dirty_nodes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         hashes: &HashesMap,\n+                         incremental_hashes_map: &IncrementalHashesMap,\n                          serialized_hashes: &[SerializedHash],\n                          retraced: &RetracedDefIdDirectory)\n                          -> DirtyNodes {\n-    let mut hcx = HashContext::new(tcx, hashes);\n+    let mut hcx = HashContext::new(tcx, incremental_hashes_map);\n     let mut dirty_nodes = FnvHashSet();\n \n     for hash in serialized_hashes {"}, {"sha": "74ee876d0bbc55db58e04c80c806c6c9e7710bf9", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -21,21 +21,22 @@ use std::io::{self, Cursor, Write};\n use std::fs::{self, File};\n use std::path::PathBuf;\n \n-use HashesMap;\n+use IncrementalHashesMap;\n use super::data::*;\n use super::directory::*;\n use super::hash::*;\n use super::preds::*;\n use super::util::*;\n \n-pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hashes_map: &HashesMap) {\n+pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                incremental_hashes_map: &IncrementalHashesMap) {\n     debug!(\"save_dep_graph()\");\n     let _ignore = tcx.dep_graph.in_ignore();\n     let sess = tcx.sess;\n     if sess.opts.incremental.is_none() {\n         return;\n     }\n-    let mut hcx = HashContext::new(tcx, hashes_map);\n+    let mut hcx = HashContext::new(tcx, incremental_hashes_map);\n     let mut builder = DefIdDirectoryBuilder::new(tcx);\n     let query = tcx.dep_graph.query();\n     let preds = Predecessors::new(&query, &mut hcx);"}, {"sha": "9f401b13d6f97651d4c419b78dcd5ba833a44d3d", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -28,7 +28,7 @@ use util::fs::fix_windows_verbatim_for_gcc;\n use rustc::dep_graph::DepNode;\n use rustc::hir::svh::Svh;\n use rustc_back::tempdir::TempDir;\n-use rustc_incremental::HashesMap;\n+use rustc_incremental::IncrementalHashesMap;\n \n use std::ascii;\n use std::char;\n@@ -125,12 +125,12 @@ pub fn find_crate_name(sess: Option<&Session>,\n \n }\n \n-pub fn build_link_meta(hashes_map: &HashesMap,\n+pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap,\n                        name: &str)\n                        -> LinkMeta {\n     let r = LinkMeta {\n         crate_name: name.to_owned(),\n-        crate_hash: Svh::new(hashes_map[&DepNode::Krate]),\n+        crate_hash: Svh::new(incremental_hashes_map[&DepNode::Krate]),\n     };\n     info!(\"{:?}\", r);\n     return r;"}, {"sha": "cab353cd262091a0bd2128851808813077d77695", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484da378452ed123919ee6d4d5a7e4e98c5d4060/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=484da378452ed123919ee6d4d5a7e4e98c5d4060", "patch": "@@ -48,7 +48,7 @@ use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n use rustc::mir::mir_map::MirMap;\n use rustc_data_structures::graph::OUTGOING;\n-use rustc_incremental::HashesMap;\n+use rustc_incremental::IncrementalHashesMap;\n use session::config::{self, NoDebugInfo, FullDebugInfo};\n use session::Session;\n use _match;\n@@ -2483,7 +2483,7 @@ pub fn filter_reachable_ids(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              mir_map: &MirMap<'tcx>,\n                              analysis: ty::CrateAnalysis,\n-                             hashes_map: &HashesMap)\n+                             incremental_hashes_map: &IncrementalHashesMap)\n                              -> CrateTranslation {\n     let _task = tcx.dep_graph.in_task(DepNode::TransCrate);\n \n@@ -2508,7 +2508,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.sess.opts.debug_assertions\n     };\n \n-    let link_meta = link::build_link_meta(hashes_map, name);\n+    let link_meta = link::build_link_meta(incremental_hashes_map, name);\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              &mir_map,"}]}