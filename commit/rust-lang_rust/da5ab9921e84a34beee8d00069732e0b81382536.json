{"sha": "da5ab9921e84a34beee8d00069732e0b81382536", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNWFiOTkyMWU4NGEzNGJlZWU4ZDAwMDY5NzMyZTBiODEzODI1MzY=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-07-08T12:29:41Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-07-08T12:29:41Z"}, "message": "Report memory use in time-passes on Windows\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "5d2ce124354955d20f9f7190d1a81bf137a8023f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d2ce124354955d20f9f7190d1a81bf137a8023f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5ab9921e84a34beee8d00069732e0b81382536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5ab9921e84a34beee8d00069732e0b81382536", "html_url": "https://github.com/rust-lang/rust/commit/da5ab9921e84a34beee8d00069732e0b81382536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5ab9921e84a34beee8d00069732e0b81382536/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8e175c4e39537b16beb40c704a17fcf9796852", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8e175c4e39537b16beb40c704a17fcf9796852", "html_url": "https://github.com/rust-lang/rust/commit/fd8e175c4e39537b16beb40c704a17fcf9796852"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "77575cd6b24c9112eadf13fcd8cc3646c8eeaabc", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/da5ab9921e84a34beee8d00069732e0b81382536/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5ab9921e84a34beee8d00069732e0b81382536/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=da5ab9921e84a34beee8d00069732e0b81382536", "patch": "@@ -76,19 +76,54 @@ pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where\n }\n \n // Memory reporting\n+#[cfg(unix)]\n fn get_resident() -> Option<usize> {\n-    if cfg!(unix) {\n-        get_proc_self_statm_field(1)\n-    } else {\n-        None\n-    }\n+    get_proc_self_statm_field(1)\n+}\n+\n+#[cfg(windows)]\n+fn get_resident() -> Option<usize> {\n+    get_working_set_size()\n }\n \n // Like std::macros::try!, but for Option<>.\n macro_rules! option_try(\n     ($e:expr) => (match $e { Some(e) => e, None => return None })\n );\n \n+#[cfg(windows)]\n+fn get_working_set_size() -> Option<usize> {\n+    use libc::{BOOL, DWORD, HANDLE, SIZE_T, GetCurrentProcess};\n+    use std::mem;\n+    #[repr(C)] #[allow(non_snake_case)]\n+    struct PROCESS_MEMORY_COUNTERS {\n+        cb: DWORD,\n+        PageFaultCount: DWORD,\n+        PeakWorkingSetSize: SIZE_T,\n+        WorkingSetSize: SIZE_T,\n+        QuotaPeakPagedPoolUsage: SIZE_T,\n+        QuotaPagedPoolUsage: SIZE_T,\n+        QuotaPeakNonPagedPoolUsage: SIZE_T,\n+        QuotaNonPagedPoolUsage: SIZE_T,\n+        PagefileUsage: SIZE_T,\n+        PeakPagefileUsage: SIZE_T,\n+    }\n+    type PPROCESS_MEMORY_COUNTERS = *mut PROCESS_MEMORY_COUNTERS;\n+    #[link(name = \"psapi\")]\n+    extern \"system\" {\n+        fn GetProcessMemoryInfo(Process: HANDLE,\n+                                ppsmemCounters: PPROCESS_MEMORY_COUNTERS,\n+                                cb: DWORD) -> BOOL;\n+    }\n+    let mut pmc: PROCESS_MEMORY_COUNTERS = unsafe { mem::zeroed() };\n+    pmc.cb = mem::size_of_val(&pmc) as DWORD;\n+    match unsafe { GetProcessMemoryInfo(GetCurrentProcess(), &mut pmc, pmc.cb) } {\n+        0 => None,\n+        _ => Some(pmc.WorkingSetSize as usize),\n+    }\n+}\n+\n+#[cfg_attr(windows, allow(dead_code))]\n fn get_proc_self_statm_field(field: usize) -> Option<usize> {\n     use std::fs::File;\n     use std::io::Read;"}]}