{"sha": "3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWY0ZTdhNzQ1ZjAwZTlkNzE1NGYzMjViMTdiNDMxYTA0ZTEzYTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-25T01:01:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:53:09Z"}, "message": "Convert the task-comm parts of compiletest to istrs. Issue #855\n\nThis reduces the amount of voodoo in compiletest considerably.", "tree": {"sha": "bde6dd3ea701ca058a5605e0274441acfbe63060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde6dd3ea701ca058a5605e0274441acfbe63060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "html_url": "https://github.com/rust-lang/rust/commit/3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2eafd268b982cd9a494dad783f8e3c68b9b4826", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2eafd268b982cd9a494dad783f8e3c68b9b4826", "html_url": "https://github.com/rust-lang/rust/commit/c2eafd268b982cd9a494dad783f8e3c68b9b4826"}], "stats": {"total": 169, "additions": 108, "deletions": 61}, "files": [{"sha": "c43db38247d68179093f845e88ee18ffbdd559e6", "filename": "src/test/compiletest/common.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcommon.rs?ref=3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "patch": "@@ -16,17 +16,17 @@ type config =\n     // for running under valgrind\n     // Flags to pass to the compiler\n     // Explain what's going on\n-    {compile_lib_path: str,\n-     run_lib_path: str,\n-     rustc_path: str,\n-     src_base: str,\n-     build_base: str,\n-     stage_id: str,\n+    {compile_lib_path: istr,\n+     run_lib_path: istr,\n+     rustc_path: istr,\n+     src_base: istr,\n+     build_base: istr,\n+     stage_id: istr,\n      mode: mode,\n      run_ignored: bool,\n-     filter: option::t<str>,\n-     runtool: option::t<str>,\n-     rustcflags: option::t<str>,\n+     filter: option::t<istr>,\n+     runtool: option::t<istr>,\n+     rustcflags: option::t<istr>,\n      verbose: bool};\n \n type cx = {config: config, procsrv: procsrv::handle};"}, {"sha": "a3d70cabc053fc21638010547f7cedf54f48a23d", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 74, "deletions": 36, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "patch": "@@ -46,32 +46,41 @@ fn parse_config(args: &[str]) -> config {\n           getopts::failure(f) { fail getopts::fail_str(f) }\n         };\n \n-    ret {compile_lib_path: getopts::opt_str(match, \"compile-lib-path\"),\n-         run_lib_path: getopts::opt_str(match, \"run-lib-path\"),\n-         rustc_path: getopts::opt_str(match, \"rustc-path\"),\n-         src_base: getopts::opt_str(match, \"src-base\"),\n-         build_base: getopts::opt_str(match, \"build-base\"),\n-         stage_id: getopts::opt_str(match, \"stage-id\"),\n+    let cnv = istr::from_estr;\n+    let cnvo = fn(o: &option::t<str>) -> option::t<istr> {\n+        alt o {\n+          option::some(s) { option::some(istr::from_estr(s)) }\n+          option::none. { option::none }\n+        }\n+    };\n+\n+    ret {compile_lib_path: cnv(getopts::opt_str(match, \"compile-lib-path\")),\n+         run_lib_path: cnv(getopts::opt_str(match, \"run-lib-path\")),\n+         rustc_path: cnv(getopts::opt_str(match, \"rustc-path\")),\n+         src_base: cnv(getopts::opt_str(match, \"src-base\")),\n+         build_base: cnv(getopts::opt_str(match, \"build-base\")),\n+         stage_id: cnv(getopts::opt_str(match, \"stage-id\")),\n          mode: str_mode(getopts::opt_str(match, \"mode\")),\n          run_ignored: getopts::opt_present(match, \"ignored\"),\n          filter:\n              if vec::len(match.free) > 0u {\n-                 option::some(match.free[0])\n+                 option::some(cnv(match.free[0]))\n              } else { option::none },\n-         runtool: getopts::opt_maybe_str(match, \"runtool\"),\n-         rustcflags: getopts::opt_maybe_str(match, \"rustcflags\"),\n+         runtool: cnvo(getopts::opt_maybe_str(match, \"runtool\")),\n+         rustcflags: cnvo(getopts::opt_maybe_str(match, \"rustcflags\")),\n          verbose: getopts::opt_present(match, \"verbose\")};\n }\n \n fn log_config(config: &config) {\n     let c = config;\n     logv(c, #fmt[\"configuration:\"]);\n-    logv(c, #fmt[\"compile_lib_path: %s\", config.compile_lib_path]);\n-    logv(c, #fmt[\"run_lib_path: %s\", config.run_lib_path]);\n-    logv(c, #fmt[\"rustc_path: %s\", config.rustc_path]);\n-    logv(c, #fmt[\"src_base: %s\", config.src_base]);\n-    logv(c, #fmt[\"build_base: %s\", config.build_base]);\n-    logv(c, #fmt[\"stage_id: %s\", config.stage_id]);\n+    logv(c, #fmt[\"compile_lib_path: %s\",\n+                 istr::to_estr(config.compile_lib_path)]);\n+    logv(c, #fmt[\"run_lib_path: %s\", istr::to_estr(config.run_lib_path)]);\n+    logv(c, #fmt[\"rustc_path: %s\", istr::to_estr(config.rustc_path)]);\n+    logv(c, #fmt[\"src_base: %s\", istr::to_estr(config.src_base)]);\n+    logv(c, #fmt[\"build_base: %s\", istr::to_estr(config.build_base)]);\n+    logv(c, #fmt[\"stage_id: %s\", istr::to_estr(config.stage_id)]);\n     logv(c, #fmt[\"mode: %s\", mode_str(config.mode)]);\n     logv(c, #fmt[\"run_ignored: %b\", config.run_ignored]);\n     logv(c, #fmt[\"filter: %s\", opt_str(config.filter)]);\n@@ -81,12 +90,15 @@ fn log_config(config: &config) {\n     logv(c, #fmt[\"\\n\"]);\n }\n \n-fn opt_str(maybestr: option::t<str>) -> str {\n-    alt maybestr { option::some(s) { s } option::none. { \"(none)\" } }\n+fn opt_str(maybestr: option::t<istr>) -> str {\n+    alt maybestr {\n+      option::some(s) { istr::to_estr(s) }\n+      option::none. { \"(none)\" }\n+    }\n }\n \n-fn str_opt(maybestr: str) -> option::t<str> {\n-    if maybestr != \"(none)\" { option::some(maybestr) } else { option::none }\n+fn str_opt(maybestr: &istr) -> option::t<istr> {\n+    if maybestr != ~\"(none)\" { option::some(maybestr) } else { option::none }\n }\n \n fn str_mode(s: str) -> mode {\n@@ -117,17 +129,23 @@ fn run_tests(config: &config) {\n }\n \n fn test_opts(config: &config) -> test::test_opts {\n-    {filter: config.filter, run_ignored: config.run_ignored}\n+    {\n+        filter: alt config.filter {\n+          option::some(s) { option::some(istr::to_estr(s)) }\n+          option::none. { option::none }\n+        },\n+        run_ignored: config.run_ignored\n+    }\n }\n \n type tests_and_conv_fn =\n     {tests: [test::test_desc], to_task: fn(&fn()) -> test::joinable};\n \n fn make_tests(cx: &cx) -> tests_and_conv_fn {\n-    log #fmt[\"making tests from %s\", cx.config.src_base];\n+    log #fmt[\"making tests from %s\", istr::to_estr(cx.config.src_base)];\n     let configport = port::<[u8]>();\n     let tests = [];\n-    for file: istr in fs::list_dir(istr::from_estr(cx.config.src_base)) {\n+    for file: istr in fs::list_dir(cx.config.src_base) {\n         let file = istr::to_estr(file);\n         log #fmt[\"inspecting file %s\", file];\n         if is_test(cx.config, file) {\n@@ -212,23 +230,43 @@ fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: &fn()) ->\n    test::joinable {\n     testfn();\n     let testfile = recv(configport);\n+\n+    let compile_lib_path = cx.config.compile_lib_path;\n+    let run_lib_path = cx.config.run_lib_path;\n+    let rustc_path = cx.config.rustc_path;\n+    let src_base = cx.config.src_base;\n+    let build_base = cx.config.build_base;\n+    let stage_id = cx.config.stage_id;\n+    let mode = istr::from_estr(mode_str(cx.config.mode));\n+    let run_ignored = cx.config.run_ignored;\n+    let filter = istr::from_estr(opt_str(cx.config.filter));\n+    let runtool = istr::from_estr(opt_str(cx.config.runtool));\n+    let rustcflags = istr::from_estr(opt_str(cx.config.rustcflags));\n+    let verbose = cx.config.verbose;\n+    let chan = cx.procsrv.chan;\n+\n     let testthunk =\n-        bind run_test_task(cx.config.compile_lib_path, cx.config.run_lib_path,\n-                           cx.config.rustc_path, cx.config.src_base,\n-                           cx.config.build_base, cx.config.stage_id,\n-                           mode_str(cx.config.mode), cx.config.run_ignored,\n-                           opt_str(cx.config.filter),\n-                           opt_str(cx.config.runtool),\n-                           opt_str(cx.config.rustcflags), cx.config.verbose,\n-                           cx.procsrv.chan, testfile);\n+        bind run_test_task(compile_lib_path, run_lib_path,\n+                           rustc_path, src_base,\n+                           build_base, stage_id,\n+                           mode,\n+                           run_ignored,\n+                           filter,\n+                           runtool,\n+                           rustcflags,\n+                           verbose,\n+                           chan,\n+                           testfile);\n     ret task::spawn_joinable(testthunk);\n }\n \n-fn run_test_task(compile_lib_path: str, run_lib_path: str, rustc_path: str,\n-                 src_base: str, build_base: str, stage_id: str, mode: str,\n-                 run_ignored: bool, opt_filter: str, opt_runtool: str,\n-                 opt_rustcflags: str, verbose: bool,\n-                 procsrv_chan: procsrv::reqchan, testfile: -[u8]) {\n+fn run_test_task(compile_lib_path: -istr, run_lib_path: -istr,\n+                 rustc_path: -istr,\n+                 src_base: -istr, build_base: -istr, stage_id: -istr,\n+                 mode: -istr,\n+                 run_ignored: -bool, opt_filter: -istr, opt_runtool: -istr,\n+                 opt_rustcflags: -istr, verbose: -bool,\n+                 procsrv_chan: -procsrv::reqchan, testfile: -[u8]) {\n \n     test::configure_test_task();\n \n@@ -239,7 +277,7 @@ fn run_test_task(compile_lib_path: str, run_lib_path: str, rustc_path: str,\n          src_base: src_base,\n          build_base: build_base,\n          stage_id: stage_id,\n-         mode: str_mode(mode),\n+         mode: str_mode(istr::to_estr(mode)),\n          run_ignored: run_ignored,\n          filter: str_opt(opt_filter),\n          runtool: str_opt(opt_runtool),"}, {"sha": "61cd178a62ee463fa0df1d40755438adaa49b8f0", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "patch": "@@ -60,7 +60,8 @@ fn is_test_ignored(config: &config, testfile: &str) -> bool {\n     for each ln: str in iter_header(testfile) {\n         // FIXME: Can't return or break from iterator\n         found = found\n-            || parse_name_directive(ln, \"xfail-\" + config.stage_id);\n+            || parse_name_directive(ln, \"xfail-\"\n+                                    + istr::to_estr(config.stage_id));\n         if (config.mode == common::mode_pretty) {\n             found = found\n                 || parse_name_directive(ln, \"xfail-pretty\");"}, {"sha": "ac8832561575c82015a3f10fad832bf22a62a273", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5f4e7a745f00e9d7154f325b17b431a04e13a3/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=3a5f4e7a745f00e9d7154f325b17b431a04e13a3", "patch": "@@ -139,7 +139,7 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n     }\n \n     fn make_pp_args(config: &config, _testfile: &str) -> procargs {\n-        let prog = config.rustc_path;\n+        let prog = istr::to_estr(config.rustc_path);\n         let args = [\"-\", \"--pretty\", \"normal\"];\n         ret {prog: prog, args: args};\n     }\n@@ -170,7 +170,7 @@ actual:\\n\\\n     }\n \n     fn make_typecheck_args(config: &config, _testfile: &str) -> procargs {\n-        let prog = config.rustc_path;\n+        let prog = istr::to_estr(config.rustc_path);\n         let args = [\"-\", \"--no-trans\", \"--lib\"];\n         ret {prog: prog, args: args};\n     }\n@@ -230,7 +230,7 @@ fn exec_compiled_test(cx: &cx, props: &test_props, testfile: &str) ->\n }\n \n fn compose_and_run(cx: &cx, testfile: &str,\n-                   make_args: fn(&config, &str) -> procargs, lib_path: &str,\n+                   make_args: fn(&config, &str) -> procargs, lib_path: &istr,\n                    input: option::t<str>) -> procres {\n     let procargs = make_args(cx.config, testfile);\n     ret program_output(cx, testfile, lib_path, procargs.prog, procargs.args,\n@@ -239,9 +239,13 @@ fn compose_and_run(cx: &cx, testfile: &str,\n \n fn make_compile_args(config: &config, props: &test_props, testfile: &str) ->\n    procargs {\n-    let prog = config.rustc_path;\n+    let prog = istr::to_estr(config.rustc_path);\n     let args = [testfile, \"-o\", make_exe_name(config, testfile)];\n-    args += split_maybe_args(config.rustcflags);\n+    let rustcflags = alt config.rustcflags {\n+      option::some(s) { option::some(istr::to_estr(s)) }\n+      option::none. { option::none }\n+    };\n+    args += split_maybe_args(rustcflags);\n     args += split_maybe_args(props.compile_flags);\n     ret {prog: prog, args: args};\n }\n@@ -252,13 +256,15 @@ fn make_exe_name(config: &config, testfile: &str) -> str {\n \n fn make_run_args(config: &config, props: &test_props, testfile: &str) ->\n    procargs {\n-    let toolargs =\n-        if !props.no_valgrind {\n-\n-            // If we've got another tool to run under (valgrind),\n-            // then split apart its command\n-            split_maybe_args(config.runtool)\n-        } else { [] };\n+    let toolargs = if !props.no_valgrind {\n+        // If we've got another tool to run under (valgrind),\n+        // then split apart its command\n+        let runtool = alt config.runtool {\n+          option::some(s) { option::some(istr::to_estr(s)) }\n+          option::none. { option::none }\n+        };\n+        split_maybe_args(runtool)\n+    } else { [] };\n \n     let args = toolargs + [make_exe_name(config, testfile)];\n     ret {prog: args[0], args: vec::slice(args, 1u, vec::len(args))};\n@@ -284,8 +290,9 @@ fn split_maybe_args(argstr: &option::t<str>) -> [str] {\n     }\n }\n \n-fn program_output(cx: &cx, testfile: &str, lib_path: &str, prog: &str,\n+fn program_output(cx: &cx, testfile: &str, lib_path: &istr, prog: &str,\n                   args: &[str], input: option::t<str>) -> procres {\n+    let lib_path = istr::to_estr(lib_path);\n     let cmdline =\n         {\n             let cmdline = make_cmdline(lib_path, prog, args);\n@@ -337,15 +344,16 @@ fn make_out_name(config: &config, testfile: &str, extension: &str) -> str {\n }\n \n fn output_base_name(config: &config, testfile: &str) -> str {\n-    let base = config.build_base;\n+    let base = istr::to_estr(config.build_base);\n     let filename =\n         {\n             let parts = istr::split(fs::basename(istr::from_estr(testfile)),\n                                     '.' as u8);\n             parts = vec::slice(parts, 0u, vec::len(parts) - 1u);\n             istr::connect(parts, ~\".\")\n         };\n-    #fmt[\"%s%s.%s\", base, istr::to_estr(filename), config.stage_id]\n+    #fmt[\"%s%s.%s\", base, istr::to_estr(filename),\n+         istr::to_estr(config.stage_id)]\n }\n \n fn maybe_dump_to_stdout(config: &config, out: &str, err: &str) {"}]}