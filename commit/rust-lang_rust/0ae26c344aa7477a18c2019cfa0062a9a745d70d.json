{"sha": "0ae26c344aa7477a18c2019cfa0062a9a745d70d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZTI2YzM0NGFhNzQ3N2ExOGMyMDE5Y2ZhMDA2MmE5YTc0NWQ3MGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-09T19:44:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-09T19:44:50Z"}, "message": "Drop ErrorBuilder nonsense", "tree": {"sha": "6a3659da778ee7c07f7a487694b09070c0451f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3659da778ee7c07f7a487694b09070c0451f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae26c344aa7477a18c2019cfa0062a9a745d70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae26c344aa7477a18c2019cfa0062a9a745d70d", "html_url": "https://github.com/rust-lang/rust/commit/0ae26c344aa7477a18c2019cfa0062a9a745d70d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae26c344aa7477a18c2019cfa0062a9a745d70d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351107d0b143e2c3497bd0f424f0d76bc51df0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/351107d0b143e2c3497bd0f424f0d76bc51df0c0", "html_url": "https://github.com/rust-lang/rust/commit/351107d0b143e2c3497bd0f424f0d76bc51df0c0"}], "stats": {"total": 122, "additions": 52, "deletions": 70}, "files": [{"sha": "f4a313b7aa941e8dc852df73103b61edd24492e2", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -25,7 +25,7 @@ mod parser;\n pub mod syntax_kinds;\n pub use text::{TextRange, TextUnit};\n pub use tree::{File, Node, SyntaxKind, Token};\n-pub(crate) use tree::{FileBuilder, Sink};\n+pub(crate) use tree::{FileBuilder, Sink, ErrorMsg};\n pub use lexer::{next_token, tokenize};\n pub use parser::parse;\n "}, {"sha": "546dbcf62c9ac938b15ea095197bdb08893e3fdf", "filename": "src/parser/event.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -1,4 +1,4 @@\n-use {File, FileBuilder, Sink, SyntaxKind, TextUnit, Token};\n+use {File, FileBuilder, ErrorMsg, Sink, SyntaxKind, TextUnit, Token};\n use syntax_kinds::TOMBSTONE;\n use super::is_insignificant;\n \n@@ -140,7 +140,9 @@ pub(super) fn to_file(text: String, tokens: &[Token], events: Vec<Event>) -> Fil\n                 }\n                 builder.leaf(kind, len);\n             }\n-            &Event::Error { ref message } => builder.error().message(message.clone()).emit(),\n+            &Event::Error { ref message } => builder.error(ErrorMsg {\n+                message: message.clone()\n+            })\n         }\n     }\n     builder.finish()"}, {"sha": "92dfb99efb6d719de73483a4b7bf841acbf461b6", "filename": "src/parser/grammar/attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fattributes.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -37,15 +37,15 @@ fn meta_item(p: &mut Parser) {\n             EQ => {\n                 p.bump();\n                 if !expressions::literal(p) {\n-                    p.error().message(\"expected literal\").emit();\n+                    p.error(\"expected literal\");\n                 }\n             }\n             L_PAREN => meta_item_arg_list(p),\n             _ => (),\n         }\n         meta_item.complete(p, META_ITEM);\n     } else {\n-        p.error().message(\"expected attribute value\").emit()\n+        p.error(\"expected attribute value\");\n     }\n }\n \n@@ -60,12 +60,12 @@ fn meta_item_arg_list(p: &mut Parser) {\n                 let message = \"expected attribute\";\n \n                 if items::ITEM_FIRST.contains(c) {\n-                    p.error().message(message).emit();\n+                    p.error(message);\n                     return;\n                 }\n \n                 let err = p.start();\n-                p.error().message(message).emit();\n+                p.error(message);\n                 p.bump();\n                 err.complete(p, ERROR);\n                 continue;"}, {"sha": "3704cb16fe912cfa4ab1bbb46134f12106b929b2", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -15,6 +15,6 @@ pub(super) fn literal(p: &mut Parser) -> bool {\n \n pub(super) fn expr(p: &mut Parser) {\n     if !literal(p) {\n-        p.error().message(\"expected expression\").emit();\n+        p.error(\"expected expression\");\n     }\n }"}, {"sha": "b73628ec0c79bfadd9f98d71cb17cb8d92f4a232", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -51,7 +51,7 @@ fn item(p: &mut Parser) {\n                 // extern struct Foo;\n                 _ => {\n                     item.abandon(p);\n-                    p.error().message(\"expected `fn` or `{`\").emit();\n+                    p.error(\"expected `fn` or `{`\");\n                     return;\n                 }\n             }\n@@ -121,7 +121,7 @@ fn item(p: &mut Parser) {\n                     abi(p);\n                     if !p.at(FN_KW) {\n                         item.abandon(p);\n-                        p.error().message(\"expected function\").emit();\n+                        p.error(\"expected function\");\n                         return;\n                     }\n                     fn_item(p);\n@@ -144,7 +144,7 @@ fn item(p: &mut Parser) {\n                     if t == L_CURLY {\n                         error_block(p, message);\n                     } else {\n-                        p.error().message(message).emit();\n+                        p.error(message);\n                     }\n                     return;\n                 }\n@@ -234,7 +234,7 @@ fn fn_item(p: &mut Parser) {\n     if p.at(L_PAREN) {\n         fn_value_parameters(p);\n     } else {\n-        p.error().message(\"expected function arguments\").emit();\n+        p.error(\"expected function arguments\");\n     }\n \n     if p.at(L_CURLY) {"}, {"sha": "640b940e44e845e5c5baa7d07d295187bd6728f2", "filename": "src/parser/grammar/items/structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -19,7 +19,7 @@ pub(super) fn struct_item(p: &mut Parser) {\n                 L_CURLY => named_fields(p),\n                 _ => {\n                     //TODO: special case `(` error message\n-                    p.error().message(\"expected `;` or `{`\").emit();\n+                    p.error(\"expected `;` or `{`\");\n                     return;\n                 }\n             }\n@@ -34,7 +34,7 @@ pub(super) fn struct_item(p: &mut Parser) {\n             p.expect(SEMI);\n         }\n         _ => {\n-            p.error().message(\"expected `;`, `{`, or `(`\").emit();\n+            p.error(\"expected `;`, `{`, or `(`\");\n             return;\n         }\n     }"}, {"sha": "a3f7f0da88686588c994cb8a2b685f24a6bad600", "filename": "src/parser/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fuse_item.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -37,7 +37,7 @@ fn use_tree(p: &mut Parser) {\n                         L_CURLY => nested_trees(p),\n                         _ => {\n                             // is this unreachable?\n-                            p.error().message(\"expected `{` or `*`\").emit();\n+                            p.error(\"expected `{` or `*`\");\n                         }\n                     }\n                 }"}, {"sha": "b949583ffa10c399487014cef4cc6ec4e3e73a23", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -53,7 +53,7 @@ fn alias(p: &mut Parser) -> bool {\n fn error_block(p: &mut Parser, message: &str) {\n     assert!(p.at(L_CURLY));\n     let err = p.start();\n-    p.error().message(message).emit();\n+    p.error(message);\n     p.bump();\n     let mut level: u32 = 1;\n     while level > 0 && !p.at(EOF) {\n@@ -74,7 +74,7 @@ impl<'p> Parser<'p> {\n \n     fn err_and_bump(&mut self, message: &str) {\n         let err = self.start();\n-        self.error().message(message).emit();\n+        self.error(message);\n         self.bump();\n         err.complete(self, ERROR);\n     }\n@@ -84,7 +84,7 @@ impl<'p> Parser<'p> {\n             self.bump();\n             true\n         } else {\n-            self.error().message(format!(\"expected {:?}\", kind)).emit();\n+            self.error(format!(\"expected {:?}\", kind));\n             false\n         }\n     }"}, {"sha": "1aa30f28b6e1fba4a0f12d228da4081000816cbd", "filename": "src/parser/grammar/paths.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpaths.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -43,7 +43,9 @@ fn path_segment(p: &mut Parser, first: bool) {\n     }\n     match p.current() {\n         IDENT | SELF_KW | SUPER_KW => p.bump(),\n-        _ => p.error().message(\"expected identifier\").emit(),\n+        _ => {\n+            p.error(\"expected identifier\");\n+        },\n     };\n     segment.complete(p, PATH_SEGMENT);\n }"}, {"sha": "0697014837a5c3701800724605097fe8fc25e78a", "filename": "src/parser/parser.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Fparser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fparser.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -27,9 +27,9 @@ impl Marker {\n         if idx == p.events.len() - 1 {\n             match p.events.pop() {\n                 Some(Event::Start {\n-                    kind: TOMBSTONE,\n-                    forward_parent: None,\n-                }) => (),\n+                         kind: TOMBSTONE,\n+                         forward_parent: None,\n+                     }) => (),\n                 _ => unreachable!(),\n             }\n         }\n@@ -129,8 +129,8 @@ impl<'t> Parser<'t> {\n         m\n     }\n \n-    pub(crate) fn error<'p>(&'p mut self) -> ErrorBuilder<'p, 't> {\n-        ErrorBuilder::new(self)\n+    pub(crate) fn error<'p, T: Into<String>>(&'p mut self, msg: T) -> ErrorBuilder<'p, 't> {\n+        ErrorBuilder::new(self, msg.into())\n     }\n \n     pub(crate) fn bump(&mut self) {\n@@ -175,25 +175,22 @@ impl<'t> Parser<'t> {\n }\n \n pub(crate) struct ErrorBuilder<'p, 't: 'p> {\n-    message: Option<String>,\n+    message: String,\n     parser: &'p mut Parser<'t>,\n }\n \n+impl<'p, 't: 'p> Drop for ErrorBuilder<'p, 't> {\n+    fn drop(&mut self) {\n+        let message = ::std::mem::replace(&mut self.message, String::new());\n+        self.parser.event(Event::Error { message });\n+    }\n+}\n+\n impl<'t, 'p> ErrorBuilder<'p, 't> {\n-    fn new(parser: &'p mut Parser<'t>) -> Self {\n+    fn new(parser: &'p mut Parser<'t>, message: String) -> Self {\n         ErrorBuilder {\n-            message: None,\n+            message,\n             parser,\n         }\n     }\n-\n-    pub fn message<M: Into<String>>(mut self, m: M) -> Self {\n-        self.message = Some(m.into());\n-        self\n-    }\n-\n-    pub fn emit(self) {\n-        let message = self.message.expect(\"Error message not set\");\n-        self.parser.event(Event::Error { message });\n-    }\n }"}, {"sha": "81702b83e17785d339364340f22b80a8cd86a008", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -14,15 +14,16 @@ pub(crate) trait Sink {\n     fn leaf(&mut self, kind: SyntaxKind, len: TextUnit);\n     fn start_internal(&mut self, kind: SyntaxKind);\n     fn finish_internal(&mut self);\n-    fn error(&mut self) -> ErrorBuilder;\n+    fn error(&mut self, err: ErrorMsg);\n }\n \n #[derive(Debug)]\n pub(crate) struct FileBuilder {\n     text: String,\n     nodes: Vec<NodeData>,\n     errors: Vec<SyntaxErrorData>,\n-    in_progress: Vec<(NodeIdx, Option<NodeIdx>)>, // (parent, last_child)\n+    in_progress: Vec<(NodeIdx, Option<NodeIdx>)>,\n+    // (parent, last_child)\n     pos: TextUnit,\n }\n \n@@ -65,8 +66,13 @@ impl Sink for FileBuilder {\n         }\n     }\n \n-    fn error(&mut self) -> ErrorBuilder {\n-        ErrorBuilder::new(self)\n+    fn error(&mut self, err: ErrorMsg) {\n+        let &(node, after_child) = self.in_progress.last().unwrap();\n+        self.errors.push(SyntaxErrorData {\n+            node,\n+            message: err.message,\n+            after_child,\n+        })\n     }\n }\n \n@@ -149,32 +155,7 @@ fn grow(left: &mut TextRange, right: TextRange) {\n     *left = TextRange::from_to(left.start(), right.end())\n }\n \n-#[derive(Debug)]\n-pub struct ErrorBuilder<'f> {\n-    message: Option<String>,\n-    builder: &'f mut FileBuilder,\n-}\n-\n-impl<'f> ErrorBuilder<'f> {\n-    fn new(builder: &'f mut FileBuilder) -> Self {\n-        ErrorBuilder {\n-            message: None,\n-            builder,\n-        }\n-    }\n-\n-    pub fn message<M: Into<String>>(mut self, m: M) -> Self {\n-        self.message = Some(m.into());\n-        self\n-    }\n-\n-    pub fn emit(self) {\n-        let message = self.message.expect(\"Error message not set\");\n-        let &(node, after_child) = self.builder.in_progress.last().unwrap();\n-        self.builder.errors.push(SyntaxErrorData {\n-            node,\n-            message,\n-            after_child,\n-        })\n-    }\n+#[derive(Default)]\n+pub(crate) struct ErrorMsg {\n+    pub(crate) message: String\n }"}, {"sha": "b7ed59793eddc9efa70913cce61c7b8d68099611", "filename": "src/tree/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae26c344aa7477a18c2019cfa0062a9a745d70d/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=0ae26c344aa7477a18c2019cfa0062a9a745d70d", "patch": "@@ -4,7 +4,7 @@ use std::fmt;\n use std::cmp;\n \n mod file_builder;\n-pub(crate) use self::file_builder::{FileBuilder, Sink};\n+pub(crate) use self::file_builder::{FileBuilder, Sink, ErrorMsg};\n \n pub use syntax_kinds::SyntaxKind;\n "}]}