{"sha": "6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkN2U1ZGYzZDkyZmNiNWY2N2E3OTBkZmM1NmFjZWMyYTMzMTcwZDM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-27T16:13:51Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-27T16:13:51Z"}, "message": "Some tests illustrating where the revised lint does and does not apply.", "tree": {"sha": "d18f821263000439c4832f6debcdc0037211aa25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d18f821263000439c4832f6debcdc0037211aa25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "html_url": "https://github.com/rust-lang/rust/commit/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6046f4a673abc39cec5405f51a17e614d5839f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/6046f4a673abc39cec5405f51a17e614d5839f26", "html_url": "https://github.com/rust-lang/rust/commit/6046f4a673abc39cec5405f51a17e614d5839f26"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "153d73c9ea50131bef870cf7d1540378b6859f67", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.fixed", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed?ref=6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "patch": "@@ -0,0 +1,81 @@\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is not\n+// entirely acceptable as an identifier. We currently do not attempt\n+// to detect or fix uses of `dyn` under a macro. Since we are testing\n+// this file via `rustfix`, we want the rustfix output to be\n+// compilable; so the macros here carefully use `dyn` \"correctly.\"\n+\n+// run-rustfix\n+\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod r#dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        pub struct r#dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+}\n+use outer_mod::r#dyn::r#dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+fn main() {\n+    match r#dyn { r#dyn => {} }\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    macro_defn::r#dyn();\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+    macro_defn::boxed();\n+}\n+\n+mod macro_defn {\n+    use super::Trait;\n+\n+    macro_rules! r#dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+        // Note that we do not lint nor fix occurrences under macros\n+        ($dyn:ident) => { Box<dyn Trait> }\n+    }\n+\n+    pub fn r#dyn() -> ::outer_mod::r#dyn::r#dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        ::outer_mod::r#dyn::r#dyn\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+\n+\n+\n+    pub fn boxed() -> r#dyn!(\n+        //~^ ERROR `dyn` is a keyword\n+        //~| WARN was previously accepted\n+\n+            // Note that we do not lint nor fix occurrences under macros\n+            dyn\n+    )\n+    {\n+        Box::new(10)\n+    }\n+}\n+\n+pub trait Trait { }\n+\n+impl Trait for u32 { }"}, {"sha": "98ad3a78c13ff32fffe52f59c44fe98550750c2b", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs?ref=6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "patch": "@@ -0,0 +1,81 @@\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is not\n+// entirely acceptable as an identifier. We currently do not attempt\n+// to detect or fix uses of `dyn` under a macro. Since we are testing\n+// this file via `rustfix`, we want the rustfix output to be\n+// compilable; so the macros here carefully use `dyn` \"correctly.\"\n+\n+// run-rustfix\n+\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        pub struct dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+}\n+use outer_mod::dyn::dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+fn main() {\n+    match dyn { dyn => {} }\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    macro_defn::dyn();\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+    macro_defn::boxed();\n+}\n+\n+mod macro_defn {\n+    use super::Trait;\n+\n+    macro_rules! dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+        // Note that we do not lint nor fix occurrences under macros\n+        ($dyn:ident) => { Box<dyn Trait> }\n+    }\n+\n+    pub fn dyn() -> ::outer_mod::dyn::dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        ::outer_mod::dyn::dyn\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+\n+\n+\n+    pub fn boxed() -> dyn!(\n+        //~^ ERROR `dyn` is a keyword\n+        //~| WARN was previously accepted\n+\n+            // Note that we do not lint nor fix occurrences under macros\n+            dyn\n+    )\n+    {\n+        Box::new(10)\n+    }\n+}\n+\n+pub trait Trait { }\n+\n+impl Trait for u32 { }"}, {"sha": "361727733bc57243be5ff7b2b3c73747d6fb0490", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "patch": "@@ -0,0 +1,133 @@\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:13:13\n+   |\n+LL |     pub mod dyn {\n+   |             ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+note: lint level defined here\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:10:9\n+   |\n+LL | #![deny(keyword_idents)]\n+   |         ^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:16:20\n+   |\n+LL |         pub struct dyn;\n+   |                    ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:21:16\n+   |\n+LL | use outer_mod::dyn::dyn;\n+   |                ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:21:21\n+   |\n+LL | use outer_mod::dyn::dyn;\n+   |                     ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:28:11\n+   |\n+LL |     match dyn { dyn => {} }\n+   |           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:28:17\n+   |\n+LL |     match dyn { dyn => {} }\n+   |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:33:17\n+   |\n+LL |     macro_defn::dyn();\n+   |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:43:18\n+   |\n+LL |     macro_rules! dyn {\n+   |                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:12\n+   |\n+LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n+   |            ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:34\n+   |\n+LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n+   |                                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:39\n+   |\n+LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n+   |                                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:58:22\n+   |\n+LL |         ::outer_mod::dyn::dyn\n+   |                      ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:58:27\n+   |\n+LL |         ::outer_mod::dyn::dyn\n+   |                           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:67:23\n+   |\n+LL |     pub fn boxed() -> dyn!(\n+   |                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "a4ed970bc287f226b4f36db095de13f1b2d1ba82", "filename": "src/test/ui/dyn-keyword/dyn-2015-idents-in-macros-unlinted.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs?ref=6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "patch": "@@ -0,0 +1,24 @@\n+// compile-pass\n+\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is\n+// not entirely acceptable as an identifier.\n+//\n+// We currently do not attempt to detect or fix uses of `dyn` as an\n+// identifier under a macro.\n+\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod r#dyn {\n+        pub struct r#dyn;\n+    }\n+}\n+\n+macro_rules! defn_has_dyn_idents {\n+    ($arg:ident) => { ::outer_mod::dyn::dyn }\n+}\n+\n+fn main() {\n+    defn_has_dyn_idents!(dyn);\n+}"}, {"sha": "8cef5c2b349471d9a72247666ad5e8d002678575", "filename": "src/test/ui/dyn-keyword/dyn-2015-no-warnings-without-lints.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7e5df3d92fcb5f67a790dfc56acec2a33170d3/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs?ref=6d7e5df3d92fcb5f67a790dfc56acec2a33170d3", "patch": "@@ -0,0 +1,27 @@\n+// Under the 2015 edition without the keyword_idents lint, `dyn` is\n+// entirely acceptable as an identifier.\n+\n+// compile-pass\n+\n+#![allow(non_camel_case_types)]\n+\n+mod outer_mod {\n+    pub mod dyn {\n+        pub struct dyn;\n+    }\n+}\n+use outer_mod::dyn::dyn;\n+\n+fn main() {\n+    match dyn { dyn => {} }\n+    macro_defn::dyn();\n+}\n+mod macro_defn {\n+    macro_rules! dyn {\n+        () => { ::outer_mod::dyn::dyn }\n+    }\n+\n+    pub fn dyn() -> ::outer_mod::dyn::dyn {\n+        dyn!()\n+    }\n+}"}]}