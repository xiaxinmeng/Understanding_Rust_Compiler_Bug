{"sha": "3ddc27025229c01bd1aeab9da3ebe34e3046da58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZGMyNzAyNTIyOWMwMWJkMWFlYWI5ZGEzZWJlMzRlMzA0NmRhNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T12:19:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T12:19:11Z"}, "message": "Auto merge of #39224 - GuillaumeGomez:os_string_urls, r=frewsxcv\n\nAdd missing urls for OsStr and OsString\n\nr? @frewsxcv", "tree": {"sha": "46b387e725b989ffbbf82b66d5139fc337985c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b387e725b989ffbbf82b66d5139fc337985c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ddc27025229c01bd1aeab9da3ebe34e3046da58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc27025229c01bd1aeab9da3ebe34e3046da58", "html_url": "https://github.com/rust-lang/rust/commit/3ddc27025229c01bd1aeab9da3ebe34e3046da58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc27025229c01bd1aeab9da3ebe34e3046da58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c3128c3933fe2c39c46eb542a53705783af9a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c3128c3933fe2c39c46eb542a53705783af9a1", "html_url": "https://github.com/rust-lang/rust/commit/98c3128c3933fe2c39c46eb542a53705783af9a1"}, {"sha": "27123d1a2a4e91ff5b163b5eb0c0b8e2b10dea57", "url": "https://api.github.com/repos/rust-lang/rust/commits/27123d1a2a4e91ff5b163b5eb0c0b8e2b10dea57", "html_url": "https://github.com/rust-lang/rust/commit/27123d1a2a4e91ff5b163b5eb0c0b8e2b10dea57"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "273b717f4678bceea3ac5f2bac3b91a740cb61c6", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3ddc27025229c01bd1aeab9da3ebe34e3046da58/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ddc27025229c01bd1aeab9da3ebe34e3046da58/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=3ddc27025229c01bd1aeab9da3ebe34e3046da58", "patch": "@@ -31,16 +31,20 @@ use sys_common::{AsInner, IntoInner, FromInner};\n ///\n /// * In Rust, strings are always valid UTF-8, but may contain zeros.\n ///\n-/// `OsString` and `OsStr` bridge this gap by simultaneously representing Rust\n+/// `OsString` and [`OsStr`] bridge this gap by simultaneously representing Rust\n /// and platform-native string values, and in particular allowing a Rust string\n /// to be converted into an \"OS\" string with no cost.\n+///\n+/// [`OsStr`]: struct.OsStr.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n     inner: Buf\n }\n \n-/// Slices into OS strings (see `OsString`).\n+/// Slices into OS strings (see [`OsString`]).\n+///\n+/// [`OsString`]: struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsStr {\n     inner: Slice\n@@ -61,7 +65,9 @@ impl OsString {\n         OsString { inner: Buf::from_string(String::new()) }\n     }\n \n-    /// Converts to an `OsStr` slice.\n+    /// Converts to an [`OsStr`] slice.\n+    ///\n+    /// [`OsStr`]: struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -77,10 +83,12 @@ impl OsString {\n         self\n     }\n \n-    /// Converts the `OsString` into a `String` if it contains valid Unicode data.\n+    /// Converts the `OsString` into a [`String`] if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `OsString` is returned.\n     ///\n+    /// [`String`]: ../../std/string/struct.String.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -95,7 +103,9 @@ impl OsString {\n         self.inner.into_string().map_err(|buf| OsString { inner: buf} )\n     }\n \n-    /// Extends the string with the given `&OsStr` slice.\n+    /// Extends the string with the given [`&OsStr`] slice.\n+    ///\n+    /// [`&OsStr`]: struct.OsStr.html\n     ///\n     /// # Examples\n     ///\n@@ -329,10 +339,12 @@ impl OsStr {\n         unsafe { mem::transmute(inner) }\n     }\n \n-    /// Yields a `&str` slice if the `OsStr` is valid Unicode.\n+    /// Yields a [`&str`] slice if the `OsStr` is valid Unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n     ///\n+    /// [`&str`]: ../../std/primitive.str.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -346,10 +358,13 @@ impl OsStr {\n         self.inner.to_str()\n     }\n \n-    /// Converts an `OsStr` to a `Cow<str>`.\n+    /// Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n     ///\n+    /// [`Cow`]: ../../std/borrow/enum.Cow.html\n+    /// [`str`]: ../../std/primitive.str.html\n+    ///\n     /// # Examples\n     ///\n     /// Calling `to_string_lossy` on an `OsStr` with valid unicode:\n@@ -368,7 +383,9 @@ impl OsStr {\n         self.inner.to_string_lossy()\n     }\n \n-    /// Copies the slice into an owned `OsString`.\n+    /// Copies the slice into an owned [`OsString`].\n+    ///\n+    /// [`OsString`]: struct.OsString.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }\n@@ -397,10 +414,12 @@ impl OsStr {\n     /// Note that this does **not** return the number of bytes in this string\n     /// as, for example, OS strings on Windows are encoded as a list of `u16`\n     /// rather than a list of bytes. This number is simply useful for passing to\n-    /// other methods like `OsString::with_capacity` to avoid reallocations.\n+    /// other methods like [`OsString::with_capacity`] to avoid reallocations.\n     ///\n     /// See `OsStr` introduction for more information about encoding.\n     ///\n+    /// [`OsString::with_capacity`]: struct.OsString.html#method.with_capacity\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}