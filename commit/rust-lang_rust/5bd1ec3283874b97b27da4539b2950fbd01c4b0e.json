{"sha": "5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "node_id": "C_kwDOAAsO6NoAKDViZDFlYzMyODM4NzRiOTdiMjdkYTQ1MzliMjk1MGZiZDAxYzRiMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T20:50:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T20:50:38Z"}, "message": "Auto merge of #83706 - a1phyr:fix_vec_layout_calculation, r=JohnTitor\n\nFix a layout possible miscalculation in `alloc::RawVec`\n\nA layout miscalculation could happen in `RawVec` when used with a type whose size isn't a multiple of its alignment. I don't know if such type can exist in Rust, but the Layout API provides ways to manipulate such types. Anyway, it is better to calculate memory size in a consistent way.", "tree": {"sha": "5642d3a3c816dfd39caf9fdd11d3274a8bbe4ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5642d3a3c816dfd39caf9fdd11d3274a8bbe4ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "html_url": "https://github.com/rust-lang/rust/commit/5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68369a041cea809a87e5bd80701da90e0e0a4799", "url": "https://api.github.com/repos/rust-lang/rust/commits/68369a041cea809a87e5bd80701da90e0e0a4799", "html_url": "https://github.com/rust-lang/rust/commit/68369a041cea809a87e5bd80701da90e0e0a4799"}, {"sha": "5376317c7f39c41250f354d6c35858bd383d1970", "url": "https://api.github.com/repos/rust-lang/rust/commits/5376317c7f39c41250f354d6c35858bd383d1970", "html_url": "https://github.com/rust-lang/rust/commit/5376317c7f39c41250f354d6c35858bd383d1970"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "0ce2beb63d681ec3965d8dd76f1cd95777a4acb1", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "patch": "@@ -244,9 +244,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n             // We have an allocated chunk of memory, so we can bypass runtime\n             // checks to get our current layout.\n             unsafe {\n-                let align = mem::align_of::<T>();\n-                let size = mem::size_of::<T>() * self.cap;\n-                let layout = Layout::from_size_align_unchecked(size, align);\n+                let layout = Layout::array::<T>(self.cap).unwrap_unchecked();\n                 Some((self.ptr.cast().into(), layout))\n             }\n         }\n@@ -427,10 +425,11 @@ impl<T, A: Allocator> RawVec<T, A> {\n         assert!(cap <= self.capacity(), \"Tried to shrink to a larger capacity\");\n \n         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };\n-        let new_size = cap * mem::size_of::<T>();\n \n         let ptr = unsafe {\n-            let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n+            // `Layout::array` cannot overflow here because it would have\n+            // overflowed earlier when capacity was larger.\n+            let new_layout = Layout::array::<T>(cap).unwrap_unchecked();\n             self.alloc\n                 .shrink(ptr, layout, new_layout)\n                 .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?"}, {"sha": "b988035f75e4c4072669397cea37bb240e911b0b", "filename": "src/test/ui/sanitize/hwaddress.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs?ref=5bd1ec3283874b97b27da4539b2950fbd01c4b0e", "patch": "@@ -1,6 +1,9 @@\n // needs-sanitizer-support\n // needs-sanitizer-hwaddress\n //\n+// FIXME(#83706): this test triggers errors on aarch64-gnu\n+// ignore-aarch64-unknown-linux-gnu\n+//\n // FIXME(#83989): codegen-units=1 triggers linker errors on aarch64-gnu\n // compile-flags: -Z sanitizer=hwaddress -O -g -C codegen-units=16\n //"}]}