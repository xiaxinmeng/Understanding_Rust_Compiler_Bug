{"sha": "c05a1a6e37156b956380d57049a72cfe6f21095d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNWExYTZlMzcxNTZiOTU2MzgwZDU3MDQ5YTcyY2ZlNmYyMTA5NWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-18T15:11:18Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-18T15:11:18Z"}, "message": "Store an `AstId` for procedural macros", "tree": {"sha": "cecbf9cb7ee8b6706d2d70aeb04bbf67a6c43ac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cecbf9cb7ee8b6706d2d70aeb04bbf67a6c43ac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c05a1a6e37156b956380d57049a72cfe6f21095d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c05a1a6e37156b956380d57049a72cfe6f21095d", "html_url": "https://github.com/rust-lang/rust/commit/c05a1a6e37156b956380d57049a72cfe6f21095d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c05a1a6e37156b956380d57049a72cfe6f21095d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e", "html_url": "https://github.com/rust-lang/rust/commit/3ab9b39dd47d99ffd97f485c27f38b8944e12a3e"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "d57fad9ed300db5bfc623b23f666d536a5fa9e08", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -6,7 +6,7 @@ use hir_def::{\n     src::{HasChildSource, HasSource as _},\n     Lookup, VariantId,\n };\n-use hir_expand::InFile;\n+use hir_expand::{InFile, MacroDefKind};\n use syntax::ast;\n \n use crate::{\n@@ -111,10 +111,17 @@ impl HasSource for TypeAlias {\n     }\n }\n impl HasSource for MacroDef {\n-    type Ast = ast::Macro;\n+    type Ast = Either<ast::Macro, ast::Fn>;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>> {\n-        let ast_id = self.id.ast_id()?;\n-        Some(InFile { file_id: ast_id.file_id, value: ast_id.to_node(db.upcast()) })\n+        Some(match &self.id.kind {\n+            MacroDefKind::Declarative(id)\n+            | MacroDefKind::BuiltIn(_, id)\n+            | MacroDefKind::BuiltInDerive(_, id)\n+            | MacroDefKind::BuiltInEager(_, id) => {\n+                id.with_value(Either::Left(id.to_node(db.upcast())))\n+            }\n+            MacroDefKind::ProcMacro(_, id) => id.map(|_| Either::Right(id.to_node(db.upcast()))),\n+        })\n     }\n }\n impl HasSource for Impl {"}, {"sha": "95cfde61c0878d24e4257b283762e925c9ae6e93", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -1144,12 +1144,15 @@ impl MacroDef {\n \n     /// XXX: this parses the file\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n-        self.source(db)?.value.name().map(|it| it.as_name())\n+        match self.source(db)?.value {\n+            Either::Left(it) => it.name().map(|it| it.as_name()),\n+            Either::Right(it) => it.name().map(|it| it.as_name()),\n+        }\n     }\n \n     /// Indicate it is a proc-macro\n     pub fn is_proc_macro(&self) -> bool {\n-        matches!(self.id.kind, MacroDefKind::ProcMacro(_))\n+        matches!(self.id.kind, MacroDefKind::ProcMacro(..))\n     }\n \n     /// Indicate it is a derive macro"}, {"sha": "f3ebe7c7275e31c5b63077dd8062550f52d14289", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -252,7 +252,7 @@ impl ItemScope {\n             .for_each(|vis| *vis = Visibility::Module(this_module));\n \n         for (mac, vis) in self.macros.values_mut() {\n-            if let MacroDefKind::ProcMacro(_) = mac.kind {\n+            if let MacroDefKind::ProcMacro(..) = mac.kind {\n                 // FIXME: Technically this is insufficient since reexports of proc macros are also\n                 // forbidden. Practically nobody does that.\n                 continue;"}, {"sha": "696370adaf6211ce20a6f53aa0ad1c419bf0e053", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -353,17 +353,17 @@ impl DefCollector<'_> {\n     /// use a dummy expander that always errors. This comes with the drawback of macros potentially\n     /// going out of sync with what the build system sees (since we resolve using VFS state, but\n     /// Cargo builds only on-disk files). We could and probably should add diagnostics for that.\n-    fn resolve_proc_macro(&mut self, name: &Name) {\n+    fn resolve_proc_macro(&mut self, name: &Name, ast_id: AstId<ast::Fn>) {\n         self.exports_proc_macros = true;\n         let macro_def = match self.proc_macros.iter().find(|(n, _)| n == name) {\n             Some((_, expander)) => MacroDefId {\n                 krate: self.def_map.krate,\n-                kind: MacroDefKind::ProcMacro(*expander),\n+                kind: MacroDefKind::ProcMacro(*expander, ast_id),\n                 local_inner: false,\n             },\n             None => MacroDefId {\n                 krate: self.def_map.krate,\n-                kind: MacroDefKind::ProcMacro(ProcMacroExpander::dummy(self.def_map.krate)),\n+                kind: MacroDefKind::ProcMacro(ProcMacroExpander::dummy(self.def_map.krate), ast_id),\n                 local_inner: false,\n             },\n         };\n@@ -1116,7 +1116,8 @@ impl ModCollector<'_, '_> {\n                 ModItem::Function(id) => {\n                     let func = &self.item_tree[id];\n \n-                    self.collect_proc_macro_def(&func.name, &attrs);\n+                    let ast_id = InFile::new(self.file_id, func.ast_id);\n+                    self.collect_proc_macro_def(&func.name, ast_id, &attrs);\n \n                     def = Some(DefData {\n                         id: FunctionLoc {\n@@ -1383,7 +1384,7 @@ impl ModCollector<'_, '_> {\n     }\n \n     /// If `attrs` registers a procedural macro, collects its definition.\n-    fn collect_proc_macro_def(&mut self, func_name: &Name, attrs: &Attrs) {\n+    fn collect_proc_macro_def(&mut self, func_name: &Name, ast_id: AstId<ast::Fn>, attrs: &Attrs) {\n         // FIXME: this should only be done in the root module of `proc-macro` crates, not everywhere\n         // FIXME: distinguish the type of macro\n         let macro_name = if attrs.by_key(\"proc_macro\").exists()\n@@ -1404,7 +1405,7 @@ impl ModCollector<'_, '_> {\n             }\n         };\n \n-        self.def_collector.resolve_proc_macro(&macro_name);\n+        self.def_collector.resolve_proc_macro(&macro_name, ast_id);\n     }\n \n     fn collect_macro_rules(&mut self, id: FileItemTreeId<MacroRules>) {"}, {"sha": "2748e25cf3b20eccade0cd92df96f15ead45a505", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -157,7 +157,7 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander,\n             Some(Arc::new((TokenExpander::BuiltinDerive(expander), mbe::TokenMap::default())))\n         }\n         MacroDefKind::BuiltInEager(..) => None,\n-        MacroDefKind::ProcMacro(expander) => {\n+        MacroDefKind::ProcMacro(expander, ..) => {\n             Some(Arc::new((TokenExpander::ProcMacro(expander), mbe::TokenMap::default())))\n         }\n     }\n@@ -269,7 +269,7 @@ fn expand_proc_macro(\n     };\n \n     let expander = match loc.def.kind {\n-        MacroDefKind::ProcMacro(expander) => expander,\n+        MacroDefKind::ProcMacro(expander, ..) => expander,\n         _ => unreachable!(),\n     };\n "}, {"sha": "04f374a29f5dd8c73931761c0b9fee491fb939af", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -209,7 +209,7 @@ fn eager_macro_recur(\n             MacroDefKind::Declarative(_)\n             | MacroDefKind::BuiltIn(..)\n             | MacroDefKind::BuiltInDerive(..)\n-            | MacroDefKind::ProcMacro(_) => {\n+            | MacroDefKind::ProcMacro(..) => {\n                 let res = lazy_expand(db, &def, curr.with_value(child.clone()), krate);\n                 let val = diagnostic_sink.expand_result_option(res)?;\n "}, {"sha": "20cda1683ac01632a6992c467f9a604b0aaefb49", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -182,7 +182,7 @@ impl HygieneFrame {\n                         MacroDefKind::BuiltIn(..) => (info, Some(loc.def.krate), false),\n                         MacroDefKind::BuiltInDerive(..) => (info, None, false),\n                         MacroDefKind::BuiltInEager(..) => (info, None, false),\n-                        MacroDefKind::ProcMacro(_) => (info, None, false),\n+                        MacroDefKind::ProcMacro(..) => (info, None, false),\n                     }\n                 }\n             },"}, {"sha": "0a379651f027c3867d3b2793766631593e22379c", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -245,7 +245,7 @@ impl MacroDefId {\n             MacroDefKind::BuiltIn(_, id) => id,\n             MacroDefKind::BuiltInDerive(_, id) => id,\n             MacroDefKind::BuiltInEager(_, id) => id,\n-            MacroDefKind::ProcMacro(_) => return None,\n+            MacroDefKind::ProcMacro(..) => return None,\n         };\n         Some(*id)\n     }\n@@ -258,7 +258,7 @@ pub enum MacroDefKind {\n     // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n     BuiltInDerive(BuiltinDeriveExpander, AstId<ast::Macro>),\n     BuiltInEager(EagerExpander, AstId<ast::Macro>),\n-    ProcMacro(ProcMacroExpander),\n+    ProcMacro(ProcMacroExpander, AstId<ast::Fn>),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "364be260c6610b21b3729b5a6f6cb7cb6e564664", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -339,10 +339,14 @@ impl TryToNav for hir::Field {\n impl TryToNav for hir::MacroDef {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n-        log::debug!(\"nav target {:#?}\", src.value.syntax());\n+        let name_owner: &dyn ast::NameOwner = match &src.value {\n+            Either::Left(it) => it,\n+            Either::Right(it) => it,\n+        };\n+        log::debug!(\"nav target {:#?}\", name_owner.syntax());\n         let mut res = NavigationTarget::from_named(\n             db,\n-            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n+            src.as_ref().with_value(name_owner),\n             SymbolKind::Macro,\n         );\n         res.docs = self.docs(db);"}, {"sha": "a3fb17c0a60006d3c85855f0e5628ccdc7b8d056", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -331,10 +331,16 @@ fn hover_for_definition(\n ) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     return match def {\n-        Definition::Macro(it) => {\n-            let label = macro_label(&it.source(db)?.value);\n-            from_def_source_labeled(db, it, Some(label), mod_path)\n-        }\n+        Definition::Macro(it) => match &it.source(db)?.value {\n+            Either::Left(mac) => {\n+                let label = macro_label(&mac);\n+                from_def_source_labeled(db, it, Some(label), mod_path)\n+            }\n+            Either::Right(_) => {\n+                // FIXME\n+                None\n+            }\n+        },\n         Definition::Field(def) => from_hir_fmt(db, def, mod_path),\n         Definition::ModuleDef(it) => match it {\n             ModuleDef::Module(it) => from_hir_fmt(db, it, mod_path),"}, {"sha": "7578ad50b4c1cac4b5510f4490d280f90da0123b", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05a1a6e37156b956380d57049a72cfe6f21095d/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=c05a1a6e37156b956380d57049a72cfe6f21095d", "patch": "@@ -91,7 +91,7 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn detail(&self) -> Option<String> {\n-        let ast_node = self.macro_.source(self.ctx.db())?.value;\n+        let ast_node = self.macro_.source(self.ctx.db())?.value.left()?;\n         Some(macro_label(&ast_node))\n     }\n }"}]}