{"sha": "824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNGI5ZTdkYmYyNDQ4ZDBlZDFhN2YzZTFhMDMwNWVlNWM4ZjMxZWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-26T19:40:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-06T20:12:57Z"}, "message": "convert FnCtxt methods from @mut self to &self", "tree": {"sha": "e298cb84c9c505393fc0a3227bbd295085d09fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e298cb84c9c505393fc0a3227bbd295085d09fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "html_url": "https://github.com/rust-lang/rust/commit/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4077d7b8b7b2e208b18c9245db0544c8c114dcec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4077d7b8b7b2e208b18c9245db0544c8c114dcec", "html_url": "https://github.com/rust-lang/rust/commit/4077d7b8b7b2e208b18c9245db0544c8c114dcec"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "45c0992cc9b44bae5d65497d299c5066cdd6ff9d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=824b9e7dbf2448d0ed1a7f3e1a0305ee5c8f31ec", "patch": "@@ -649,9 +649,10 @@ impl AstConv for FnCtxt {\n \n pub impl FnCtxt {\n     fn infcx(&self) -> @mut infer::InferCtxt { self.inh.infcx }\n-    fn search_in_scope_regions(&self,\n-                               br: ty::bound_region)\n-                            -> Result<ty::Region, ~str> {\n+    fn search_in_scope_regions(\n+        &self,\n+        br: ty::bound_region) -> Result<ty::Region, ~str>\n+    {\n         let in_scope_regions = self.in_scope_regions;\n         match in_scope_regions.find(br) {\n             Some(r) => result::Ok(r),\n@@ -683,9 +684,9 @@ impl region_scope for FnCtxt {\n }\n \n pub impl FnCtxt {\n-    fn tag(@mut self) -> ~str { fmt!(\"%x\", ptr::addr_of(&(*self)) as uint) }\n+    fn tag(&self) -> ~str { fmt!(\"%x\", ptr::addr_of(&(*self)) as uint) }\n \n-    fn local_ty(@mut self, span: span, nid: ast::node_id) -> ty::t {\n+    fn local_ty(&self, span: span, nid: ast::node_id) -> ty::t {\n         match self.inh.locals.find(&nid) {\n             Some(t) => t,\n             None => {\n@@ -696,7 +697,7 @@ pub impl FnCtxt {\n         }\n     }\n \n-    fn expr_to_str(@mut self, expr: @ast::expr) -> ~str {\n+    fn expr_to_str(&self, expr: @ast::expr) -> ~str {\n         fmt!(\"expr(%?:%s)\", expr.id,\n              pprust::expr_to_str(expr, self.tcx().sess.intr()))\n     }\n@@ -706,13 +707,13 @@ pub impl FnCtxt {\n     }\n \n     #[inline(always)]\n-    fn write_ty(@mut self, node_id: ast::node_id, ty: ty::t) {\n+    fn write_ty(&self, node_id: ast::node_id, ty: ty::t) {\n         debug!(\"write_ty(%d, %s) in fcx %s\",\n                node_id, ppaux::ty_to_str(self.tcx(), ty), self.tag());\n         self.inh.node_types.insert(node_id, ty);\n     }\n \n-    fn write_substs(@mut self, node_id: ast::node_id, +substs: ty::substs) {\n+    fn write_substs(&self, node_id: ast::node_id, +substs: ty::substs) {\n         if !ty::substs_is_noop(&substs) {\n             debug!(\"write_substs(%d, %s) in fcx %s\",\n                    node_id,\n@@ -722,7 +723,7 @@ pub impl FnCtxt {\n         }\n     }\n \n-    fn write_ty_substs(@mut self,\n+    fn write_ty_substs(&self,\n                        node_id: ast::node_id,\n                        ty: ty::t,\n                        +substs: ty::substs) {\n@@ -731,7 +732,7 @@ pub impl FnCtxt {\n         self.write_substs(node_id, substs);\n     }\n \n-    fn write_autoderef_adjustment(@mut self,\n+    fn write_autoderef_adjustment(&self,\n                                   node_id: ast::node_id,\n                                   derefs: uint) {\n         if derefs == 0 { return; }\n@@ -743,33 +744,33 @@ pub impl FnCtxt {\n         );\n     }\n \n-    fn write_adjustment(@mut self,\n+    fn write_adjustment(&self,\n                         node_id: ast::node_id,\n                         adj: @ty::AutoAdjustment) {\n         debug!(\"write_adjustment(node_id=%?, adj=%?)\", node_id, adj);\n         self.inh.adjustments.insert(node_id, adj);\n     }\n \n-    fn write_nil(@mut self, node_id: ast::node_id) {\n+    fn write_nil(&self, node_id: ast::node_id) {\n         self.write_ty(node_id, ty::mk_nil(self.tcx()));\n     }\n-    fn write_bot(@mut self, node_id: ast::node_id) {\n+    fn write_bot(&self, node_id: ast::node_id) {\n         self.write_ty(node_id, ty::mk_bot(self.tcx()));\n     }\n \n-    fn to_ty(@mut self, ast_t: @ast::Ty) -> ty::t {\n+    fn to_ty(&self, ast_t: @ast::Ty) -> ty::t {\n         ast_ty_to_ty(self, self, ast_t)\n     }\n \n-    fn expr_to_str(@mut self, expr: @ast::expr) -> ~str {\n+    fn expr_to_str(&self, expr: @ast::expr) -> ~str {\n         expr_repr(self.tcx(), expr)\n     }\n \n-    fn pat_to_str(@mut self, pat: @ast::pat) -> ~str {\n+    fn pat_to_str(&self, pat: @ast::pat) -> ~str {\n         pat_repr(self.tcx(), pat)\n     }\n \n-    fn expr_ty(@mut self, ex: @ast::expr) -> ty::t {\n+    fn expr_ty(&self, ex: @ast::expr) -> ty::t {\n         match self.inh.node_types.find(&ex.id) {\n             Some(t) => t,\n             None => {\n@@ -779,7 +780,7 @@ pub impl FnCtxt {\n             }\n         }\n     }\n-    fn node_ty(@mut self, id: ast::node_id) -> ty::t {\n+    fn node_ty(&self, id: ast::node_id) -> ty::t {\n         match self.inh.node_types.find(&id) {\n             Some(t) => t,\n             None => {\n@@ -792,7 +793,7 @@ pub impl FnCtxt {\n             }\n         }\n     }\n-    fn node_ty_substs(@mut self, id: ast::node_id) -> ty::substs {\n+    fn node_ty_substs(&self, id: ast::node_id) -> ty::substs {\n         match self.inh.node_type_substs.find(&id) {\n             Some(ref ts) => (/*bad*/copy *ts),\n             None => {\n@@ -805,12 +806,12 @@ pub impl FnCtxt {\n             }\n         }\n     }\n-    fn opt_node_ty_substs(@mut self, id: ast::node_id) -> Option<ty::substs> {\n+    fn opt_node_ty_substs(&self, id: ast::node_id) -> Option<ty::substs> {\n         self.inh.node_type_substs.find(&id)\n     }\n \n \n-    fn mk_subty(@mut self,\n+    fn mk_subty(&self,\n                 a_is_expected: bool,\n                 span: span,\n                 sub: ty::t,\n@@ -819,14 +820,14 @@ pub impl FnCtxt {\n         infer::mk_subty(self.infcx(), a_is_expected, span, sub, sup)\n     }\n \n-    fn can_mk_subty(@mut self,\n+    fn can_mk_subty(&self,\n                     sub: ty::t,\n                     sup: ty::t)\n                  -> Result<(), ty::type_err> {\n         infer::can_mk_subty(self.infcx(), sub, sup)\n     }\n \n-    fn mk_assignty(@mut self, expr: @ast::expr, sub: ty::t, sup: ty::t)\n+    fn mk_assignty(&self, expr: @ast::expr, sub: ty::t, sup: ty::t)\n                 -> Result<(), ty::type_err> {\n         match infer::mk_coercety(self.infcx(), false, expr.span, sub, sup) {\n             Ok(None) => result::Ok(()),\n@@ -838,14 +839,14 @@ pub impl FnCtxt {\n         }\n     }\n \n-    fn can_mk_assignty(@mut self,\n+    fn can_mk_assignty(&self,\n                        sub: ty::t,\n                        sup: ty::t)\n                     -> Result<(), ty::type_err> {\n         infer::can_mk_coercety(self.infcx(), sub, sup)\n     }\n \n-    fn mk_eqty(@mut self,\n+    fn mk_eqty(&self,\n                a_is_expected: bool,\n                span: span,\n                sub: ty::t,\n@@ -854,7 +855,7 @@ pub impl FnCtxt {\n         infer::mk_eqty(self.infcx(), a_is_expected, span, sub, sup)\n     }\n \n-    fn mk_subr(@mut self,\n+    fn mk_subr(&self,\n                a_is_expected: bool,\n                span: span,\n                sub: ty::Region,\n@@ -863,7 +864,7 @@ pub impl FnCtxt {\n         infer::mk_subr(self.infcx(), a_is_expected, span, sub, sup)\n     }\n \n-    fn require_unsafe(@mut self, sp: span, op: ~str) {\n+    fn require_unsafe(&self, sp: span, op: ~str) {\n         match self.purity {\n           ast::unsafe_fn => {/*ok*/}\n           _ => {\n@@ -873,15 +874,16 @@ pub impl FnCtxt {\n           }\n         }\n     }\n-    fn with_region_lb<R>(@mut self, lb: ast::node_id, f: fn() -> R) -> R {\n+\n+    fn with_region_lb<R>(@mut self, lb: ast::node_id, f: &fn() -> R) -> R {\n         let old_region_lb = self.region_lb;\n         self.region_lb = lb;\n         let v = f();\n         self.region_lb = old_region_lb;\n         v\n     }\n \n-    fn region_var_if_parameterized(@mut self,\n+    fn region_var_if_parameterized(&self,\n                                    rp: Option<ty::region_variance>,\n                                    span: span,\n                                    lower_bound: ty::Region)\n@@ -890,15 +892,15 @@ pub impl FnCtxt {\n             |_rp| self.infcx().next_region_var_with_lb(span, lower_bound))\n     }\n \n-    fn type_error_message(@mut self,\n+    fn type_error_message(&self,\n                           sp: span,\n                           mk_msg: &fn(~str) -> ~str,\n                           actual_ty: ty::t,\n                           err: Option<&ty::type_err>) {\n         self.infcx().type_error_message(sp, mk_msg, actual_ty, err);\n     }\n \n-    fn report_mismatched_return_types(@mut self,\n+    fn report_mismatched_return_types(&self,\n                                       sp: span,\n                                       e: ty::t,\n                                       a: ty::t,\n@@ -919,12 +921,12 @@ pub impl FnCtxt {\n         }\n     }\n \n-    fn report_mismatched_types(@mut self,\n+    fn report_mismatched_types(&self,\n                                sp: span,\n                                e: ty::t,\n                                a: ty::t,\n                                err: &ty::type_err) {\n-            self.infcx().report_mismatched_types(sp, e, a, err)\n+        self.infcx().report_mismatched_types(sp, e, a, err)\n     }\n }\n "}]}