{"sha": "087cbb55d06d833033e463b9c3a4237c04264319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2NiYjU1ZDA2ZDgzMzAzM2U0NjNiOWMzYTQyMzdjMDQyNjQzMTk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-23T18:28:20Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-23T19:10:19Z"}, "message": "Remove <- operator from the compiler\n\nYield an obsolete syntax error on things like \"let foo <- bar;\"\nand \"foo <- bar;\" r=brson\n\nProgress on #3466", "tree": {"sha": "3f7f21846979bbd2a3d19930e58aee3699d97c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f7f21846979bbd2a3d19930e58aee3699d97c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087cbb55d06d833033e463b9c3a4237c04264319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087cbb55d06d833033e463b9c3a4237c04264319", "html_url": "https://github.com/rust-lang/rust/commit/087cbb55d06d833033e463b9c3a4237c04264319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087cbb55d06d833033e463b9c3a4237c04264319/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c8d1fecd55098e87cdb9c027c2675a22df370f", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c8d1fecd55098e87cdb9c027c2675a22df370f", "html_url": "https://github.com/rust-lang/rust/commit/48c8d1fecd55098e87cdb9c027c2675a22df370f"}], "stats": {"total": 185, "additions": 53, "deletions": 132}, "files": [{"sha": "8aef8a0caee929499a948da47173c99f713d8f0b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -640,40 +640,12 @@ enum stmt_ {\n     stmt_semi(@expr, node_id),\n }\n \n-#[auto_serialize]\n-#[auto_deserialize]\n-enum init_op { init_assign, init_move, }\n-\n-impl init_op : cmp::Eq {\n-    pure fn eq(other: &init_op) -> bool {\n-        match self {\n-            init_assign => {\n-                match (*other) {\n-                    init_assign => true,\n-                    _ => false\n-                }\n-            }\n-            init_move => {\n-                match (*other) {\n-                    init_move => true,\n-                    _ => false\n-                }\n-            }\n-        }\n-    }\n-    pure fn ne(other: &init_op) -> bool { !self.eq(other) }\n-}\n-\n-#[auto_serialize]\n-#[auto_deserialize]\n-type initializer = {op: init_op, expr: @expr};\n-\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n #[auto_serialize]\n #[auto_deserialize]\n type local_ =  {is_mutbl: bool, ty: @Ty, pat: @pat,\n-                init: Option<initializer>, id: node_id};\n+                init: Option<@expr>, id: node_id};\n \n type local = spanned<local_>;\n \n@@ -749,7 +721,6 @@ enum expr_ {\n     expr_block(blk),\n \n     expr_copy(@expr),\n-    expr_move(@expr, @expr),\n     expr_unary_move(@expr),\n     expr_assign(@expr, @expr),\n     expr_swap(@expr, @expr),"}, {"sha": "2fd1d8ec928d51684162ebb3539c295200db9340", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -460,9 +460,6 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n                                  ..**cap_item})})))\n           }\n           expr_block(blk) => expr_block(fld.fold_block(blk)),\n-          expr_move(el, er) => {\n-            expr_move(fld.fold_expr(el), fld.fold_expr(er))\n-          }\n           expr_copy(e) => expr_copy(fld.fold_expr(e)),\n           expr_unary_move(e) => expr_unary_move(fld.fold_expr(e)),\n           expr_assign(el, er) => {\n@@ -610,14 +607,7 @@ fn noop_fold_local(l: local_, fld: ast_fold) -> local_ {\n     return {is_mutbl: l.is_mutbl,\n          ty: fld.fold_ty(l.ty),\n          pat: fld.fold_pat(l.pat),\n-         init:\n-             match l.init {\n-               option::None::<initializer> => l.init,\n-               option::Some::<initializer>(init) => {\n-                 option::Some::<initializer>({op: init.op,\n-                                              expr: fld.fold_expr(init.expr)})\n-               }\n-             },\n+         init: l.init.map(|e| fld.fold_expr(*e)),\n          id: fld.new_id(l.id)};\n }\n "}, {"sha": "ff3abb5379e0a9afa7d4ed19ee208bb776a5a662", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -43,7 +43,6 @@ fn need_parens(expr: @ast::expr, outer_prec: uint) -> bool {\n       ast::expr_cast(_, _) => parse::prec::as_prec < outer_prec,\n       // This may be too conservative in some cases\n       ast::expr_assign(_, _) => true,\n-      ast::expr_move(_, _) => true,\n       ast::expr_swap(_, _) => true,\n       ast::expr_assign_op(_, _, _) => true,\n       ast::expr_ret(_) => true,\n@@ -61,8 +60,7 @@ fn ends_in_lit_int(ex: @ast::expr) -> bool {\n         _ => false\n       },\n       ast::expr_binary(_, _, sub) | ast::expr_unary(_, sub) |\n-      ast::expr_move(_, sub) | ast::expr_copy(sub) |\n-      ast::expr_assign(_, sub) |\n+      ast::expr_copy(sub) | ast::expr_assign(_, sub) |\n       ast::expr_assign_op(_, _, sub) | ast::expr_swap(_, sub) |\n       ast::expr_log(_, _, sub) | ast::expr_assert(sub) => {\n         ends_in_lit_int(sub)"}, {"sha": "1344c9b11ea528a5611bf1696a993b6620015ad2", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -25,6 +25,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteModeInFnType,\n     ObsoleteByMutRefMode,\n     ObsoleteFixedLengthVec,\n+    ObsoleteMoveInit,\n+    ObsoleteBinaryMove\n }\n \n impl ObsoleteSyntax : cmp::Eq {\n@@ -104,6 +106,14 @@ impl Parser : ObsoleteReporter {\n                 \"fixed-length vector\",\n                 \"Fixed-length types are now written `[T * N]`, and instances \\\n                  are type-inferred\"\n+            ),\n+            ObsoleteMoveInit => (\n+                \"initializer-by-move\",\n+                \"Write `let foo = move bar` instead\"\n+            ),\n+            ObsoleteBinaryMove => (\n+                \"binary move\",\n+                \"Write `foo = move bar` instead\"\n             )\n         };\n "}, {"sha": "6e16e4eec1ab74151c82a5a5046870d2e8d37200", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -20,7 +20,8 @@ use obsolete::{\n     ObsoleteLowerCaseKindBounds, ObsoleteLet,\n     ObsoleteFieldTerminator, ObsoleteStructCtor,\n     ObsoleteWith, ObsoleteClassMethod, ObsoleteClassTraits,\n-    ObsoleteModeInFnType, ObsoleteByMutRefMode\n+    ObsoleteModeInFnType, ObsoleteByMutRefMode,\n+    ObsoleteMoveInit, ObsoleteBinaryMove,\n };\n use ast::{_mod, add, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n@@ -35,11 +36,11 @@ use ast::{_mod, add, arg, arm, attribute,\n              expr_call, expr_cast, expr_copy, expr_do_body, expr_fail,\n              expr_field, expr_fn, expr_fn_block, expr_if, expr_index,\n              expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac,\n-             expr_move, expr_path, expr_rec, expr_repeat, expr_ret, expr_swap,\n+             expr_path, expr_rec, expr_repeat, expr_ret, expr_swap,\n              expr_struct, expr_tup, expr_unary, expr_unary_move, expr_vec,\n              expr_vstore, expr_while, extern_fn, field, fn_decl, foreign_item,\n              foreign_item_const, foreign_item_fn, foreign_mod, ident,\n-             impure_fn, infer, inherited, init_assign, init_move, initializer,\n+             impure_fn, infer, inherited,\n              item, item_, item_class, item_const, item_enum, item_fn,\n              item_foreign_mod, item_impl, item_mac, item_mod, item_trait,\n              item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n@@ -1473,9 +1474,13 @@ impl Parser {\n                                 expr_assign_op(aop, lhs, rhs));\n           }\n           token::LARROW => {\n-            self.bump();\n-            let rhs = self.parse_expr();\n-            return self.mk_expr(lo, rhs.span.hi, expr_move(lhs, rhs));\n+              self.obsolete(copy self.span, ObsoleteBinaryMove);\n+              // Bogus value (but it's an error)\n+              self.bump(); // <-\n+              self.bump(); // rhs\n+              self.bump(); // ;\n+              return self.mk_expr(lo, self.span.hi,\n+                                  expr_break(None));\n           }\n           token::DARROW => {\n             self.bump();\n@@ -1745,23 +1750,18 @@ impl Parser {\n         return e;\n     }\n \n-    fn parse_initializer() -> Option<initializer> {\n+    fn parse_initializer() -> Option<@expr> {\n         match self.token {\n           token::EQ => {\n             self.bump();\n-            return Some({op: init_assign, expr: self.parse_expr()});\n+            return Some(self.parse_expr());\n           }\n           token::LARROW => {\n-            self.bump();\n-            return Some({op: init_move, expr: self.parse_expr()});\n+              self.obsolete(copy self.span, ObsoleteMoveInit);\n+              self.bump();\n+              self.bump();\n+              return None;\n           }\n-          // Now that the the channel is the first argument to receive,\n-          // combining it with an initializer doesn't really make sense.\n-          // case (token::RECV) {\n-          //     self.bump();\n-          //     return Some(rec(op = init_recv,\n-          //                  expr = self.parse_expr()));\n-          // }\n           _ => {\n             return None;\n           }"}, {"sha": "4a5e85c9eb690805f30b08eca973811ce586183c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -1310,18 +1310,13 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         print_block(s, blk);\n       }\n       ast::expr_copy(e) => { word_space(s, ~\"copy\"); print_expr(s, e); }\n+        // shouldn't parenthesize unless it's needed\n       ast::expr_unary_move(e) => {\n           popen(s);\n           word_space(s, ~\"move\");\n           print_expr(s, e);\n           pclose(s);\n       }\n-      ast::expr_move(lhs, rhs) => {\n-        print_expr(s, lhs);\n-        space(s.s);\n-        word_space(s, ~\"<-\");\n-        print_expr(s, rhs);\n-      }\n       ast::expr_assign(lhs, rhs) => {\n         print_expr(s, lhs);\n         space(s.s);\n@@ -1416,8 +1411,7 @@ fn print_expr_parens_if_not_bot(s: ps, ex: @ast::expr) {\n     let parens = match ex.node {\n       ast::expr_fail(_) | ast::expr_ret(_) |\n       ast::expr_binary(_, _, _) | ast::expr_unary(_, _) |\n-      ast::expr_move(_, _) | ast::expr_copy(_) |\n-      ast::expr_assign(_, _) |\n+      ast::expr_copy(_) | ast::expr_assign(_, _) |\n       ast::expr_assign_op(_, _, _) | ast::expr_swap(_, _) |\n       ast::expr_log(_, _, _) | ast::expr_assert(_) |\n       ast::expr_call(_, _, true) |\n@@ -1458,11 +1452,8 @@ fn print_decl(s: ps, decl: @ast::decl) {\n             match loc.node.init {\n               Some(init) => {\n                 nbsp(s);\n-                match init.op {\n-                  ast::init_assign => word_space(s, ~\"=\"),\n-                  ast::init_move => word_space(s, ~\"<-\")\n-                }\n-                print_expr(s, init.expr);\n+                word_space(s, ~\"=\");\n+                print_expr(s, init);\n               }\n               _ => ()\n             }"}, {"sha": "e4eabfabf2f2e1f5982eec6fef6e9e516d4694a1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -116,7 +116,7 @@ fn visit_local<E>(loc: @local, e: E, v: vt<E>) {\n     v.visit_ty(loc.node.ty, e, v);\n     match loc.node.init {\n       None => (),\n-      Some(i) => v.visit_expr(i.expr, e, v)\n+      Some(ex) => v.visit_expr(ex, e, v)\n     }\n }\n \n@@ -442,7 +442,6 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_assign(a, b) => { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n       expr_copy(a) => v.visit_expr(a, e, v),\n       expr_unary_move(a) => v.visit_expr(a, e, v),\n-      expr_move(a, b) => { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n       expr_swap(a, b) => { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n       expr_assign_op(_, a, b) => {\n         v.visit_expr(b, e, v);"}, {"sha": "efde19856771b1ef4e707ee7dbcf67fa32b36715", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -583,12 +583,6 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n fn check_loans_in_local(local: @ast::local,\n                         &&self: check_loan_ctxt,\n                         vt: visit::vt<check_loan_ctxt>) {\n-    match local.node.init {\n-      Some({op: ast::init_move, expr: expr}) => {\n-        self.check_move_out(expr);\n-      }\n-      Some({op: ast::init_assign, _}) | None => {}\n-    }\n     visit::visit_local(local, self, vt);\n }\n \n@@ -609,10 +603,6 @@ fn check_loans_in_expr(expr: @ast::expr,\n         self.check_assignment(at_swap, l);\n         self.check_assignment(at_swap, r);\n       }\n-      ast::expr_move(dest, src) => {\n-        self.check_assignment(at_straight_up, dest);\n-        self.check_move_out(src);\n-      }\n       ast::expr_unary_move(src) => {\n         self.check_move_out(src);\n       }"}, {"sha": "f8eee89f18a97ff31acf93b1cc9dccacd5e1cc8e", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -374,7 +374,7 @@ fn check_stmt(stmt: @stmt, cx: ctx, v: visit::vt<ctx>) {\n       stmt_decl(@{node: decl_local(locals), _}, _) => {\n         for locals.each |local| {\n             match local.node.init {\n-              Some({op: init_assign, expr}) =>\n+              Some(expr) =>\n                   maybe_copy(cx, expr, Some((\"initializer statement \\\n                               takes its right-hand side by copy\", \"\"))),\n               _ => {}"}, {"sha": "c438474130f26e89852a221294b6420959ec0518", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -552,7 +552,7 @@ fn visit_expr(expr: @expr, &&self: @IrMaps, vt: vt<@IrMaps>) {\n       expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n       expr_unary(*) | expr_fail(*) |\n       expr_break(_) | expr_again(_) | expr_lit(_) | expr_ret(*) |\n-      expr_block(*) | expr_move(*) | expr_unary_move(*) | expr_assign(*) |\n+      expr_block(*) | expr_unary_move(*) | expr_assign(*) |\n       expr_swap(*) | expr_assign_op(*) | expr_mac(*) | expr_struct(*) |\n       expr_repeat(*) => {\n           visit::visit_expr(expr, self, vt);\n@@ -1004,8 +1004,7 @@ impl Liveness {\n         // initialization, which is mildly more complex than checking\n         // once at the func header but otherwise equivalent.\n \n-        let opt_init = local.node.init.map(|i| i.expr );\n-        let succ = self.propagate_through_opt_expr(opt_init, succ);\n+        let succ = self.propagate_through_opt_expr(local.node.init, succ);\n         self.define_bindings_in_pat(local.node.pat, succ)\n     }\n \n@@ -1157,7 +1156,7 @@ impl Liveness {\n               }\n           }\n \n-          expr_move(l, r) | expr_assign(l, r) => {\n+          expr_assign(l, r) => {\n             // see comment on lvalues in\n             // propagate_through_lvalue_components()\n             let succ = self.write_lvalue(l, succ, ACC_WRITE);\n@@ -1436,14 +1435,9 @@ impl Liveness {\n \n fn check_local(local: @local, &&self: @Liveness, vt: vt<@Liveness>) {\n     match local.node.init {\n-      Some({op: op, expr: expr}) => {\n+      Some(_) => {\n \n         // Initializer:\n-\n-        match op {\n-          init_move => self.check_move_from_expr(expr, vt),\n-          init_assign => ()\n-        }\n         self.warn_about_unused_or_dead_vars_in_pat(local.node.pat);\n         if !local.node.is_mutbl {\n             self.check_for_reassignments_in_pat(local.node.pat);\n@@ -1511,13 +1505,6 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n-      expr_move(l, r) => {\n-        self.check_lvalue(l, vt);\n-        self.check_move_from_expr(r, vt);\n-\n-        visit::visit_expr(expr, self, vt);\n-      }\n-\n       expr_unary_move(r) => {\n         self.check_move_from_expr(r, vt);\n "}, {"sha": "e82892f3d1c337324d1a0d89443ca1972dd42b0c", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -482,7 +482,7 @@ impl &mem_categorization_ctxt {\n           }\n \n           ast::expr_addr_of(*) | ast::expr_call(*) |\n-          ast::expr_swap(*) | ast::expr_move(*) | ast::expr_assign(*) |\n+          ast::expr_swap(*) | ast::expr_assign(*) |\n           ast::expr_assign_op(*) | ast::expr_fn(*) | ast::expr_fn_block(*) |\n           ast::expr_assert(*) | ast::expr_ret(*) |\n           ast::expr_loop_body(*) | ast::expr_do_body(*) | ast::expr_unary(*) |"}, {"sha": "efddd6f44711e97b8651186606142fe355b5abd5", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -3982,7 +3982,7 @@ impl Resolver {\n                 // Nothing to do.\n             }\n             Some(initializer) => {\n-                self.resolve_expr(initializer.expr, visitor);\n+                self.resolve_expr(initializer, visitor);\n             }\n         }\n "}, {"sha": "ae69904e219b85e51297f881c10d6f5bf9734af6", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -960,7 +960,7 @@ fn init_local(bcx: block, local: @ast::local) -> block {\n         // Handle let _ = e; just like e;\n         match local.node.init {\n             Some(init) => {\n-              return expr::trans_into(bcx, init.expr, expr::Ignore);\n+              return expr::trans_into(bcx, init, expr::Ignore);\n             }\n             None => { return bcx; }\n         }\n@@ -977,12 +977,7 @@ fn init_local(bcx: block, local: @ast::local) -> block {\n     let mut bcx = bcx;\n     match local.node.init {\n         Some(init) => {\n-            if init.op == ast::init_assign || !bcx.expr_is_lval(init.expr) {\n-                bcx = expr::trans_into(bcx, init.expr, expr::SaveIn(llptr));\n-            } else { // This is a move from an lval, perform an actual move\n-                let init_datumblock = expr::trans_to_datum(bcx, init.expr);\n-                bcx = init_datumblock.move_to(datum::INIT, llptr);\n-            }\n+            bcx = expr::trans_into(bcx, init, expr::SaveIn(llptr));\n         }\n         _ => {\n             zero_mem(bcx, llptr, ty);"}, {"sha": "a64aac3426a6d632f24bdba418e334b0d6f8e47f", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -438,11 +438,6 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n             let dst_datum = unpack_datum!(bcx, trans_lvalue(bcx, dst));\n             return src_datum.store_to_datum(bcx, DROP_EXISTING, dst_datum);\n         }\n-        ast::expr_move(dst, src) => {\n-            let src_datum = unpack_datum!(bcx, trans_to_datum(bcx, src));\n-            let dst_datum = unpack_datum!(bcx, trans_lvalue(bcx, dst));\n-            return src_datum.move_to_datum(bcx, DROP_EXISTING, dst_datum);\n-        }\n         ast::expr_swap(dst, src) => {\n             let dst_datum = unpack_datum!(bcx, trans_lvalue(bcx, dst));\n             let src_datum = unpack_datum!(bcx, trans_lvalue(bcx, src));"}, {"sha": "78fbb7f47bed2bbdb345e5cf691bcba2e37d96e1", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -180,8 +180,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       expr_rec(_, _) | expr_struct(*) | expr_tup(_) |\n       expr_unary(box(_), _) | expr_unary(uniq(_), _) |\n       expr_binary(add, _, _) |\n-      expr_copy(_) | expr_move(_, _) | expr_unary_move(_) |\n-      expr_repeat(*) => {\n+      expr_copy(_) | expr_unary_move(_) | expr_repeat(*) => {\n         node_type_needs(cx, use_repr, e.id);\n       }\n       expr_cast(base, _) => {"}, {"sha": "68d82e4b74beefd92268cb7a1bdf526d5b1d504d", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -3018,7 +3018,6 @@ fn expr_kind(tcx: ctxt,\n         ast::expr_while(*) |\n         ast::expr_loop(*) |\n         ast::expr_assign(*) |\n-        ast::expr_move(*) |\n         ast::expr_swap(*) |\n         ast::expr_assign_op(*) => {\n             RvalueStmtExpr"}, {"sha": "e95d92efc9367195b0c5e1188720d589fdfebc6c", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -755,7 +755,7 @@ impl @fn_ctxt {\n     fn with_region_lb<R>(lb: ast::node_id, f: fn() -> R) -> R {\n         let old_region_lb = self.region_lb;\n         self.region_lb = lb;\n-        let v <- f();\n+        let v = f();\n         self.region_lb = old_region_lb;\n         move v\n     }\n@@ -1776,9 +1776,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         bot = check_expr(fcx, a, expected);\n         fcx.write_ty(id, fcx.expr_ty(a));\n       }\n-      ast::expr_move(lhs, rhs) => {\n-        bot = check_assignment(fcx, expr.span, lhs, rhs, id);\n-      }\n       ast::expr_assign(lhs, rhs) => {\n         bot = check_assignment(fcx, expr.span, lhs, rhs, id);\n       }\n@@ -2112,9 +2109,9 @@ fn require_integral(fcx: @fn_ctxt, sp: span, t: ty::t) {\n }\n \n fn check_decl_initializer(fcx: @fn_ctxt, nid: ast::node_id,\n-                          init: ast::initializer) -> bool {\n-    let lty = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, init.expr.span, nid));\n-    return check_expr_with(fcx, init.expr, lty);\n+                          init: @ast::expr) -> bool {\n+    let lty = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, init.span, nid));\n+    return check_expr_with(fcx, init, lty);\n }\n \n fn check_decl_local(fcx: @fn_ctxt, local: @ast::local) -> bool {\n@@ -2128,7 +2125,7 @@ fn check_decl_local(fcx: @fn_ctxt, local: @ast::local) -> bool {\n     match local.node.init {\n         Some(init) => {\n             bot = check_decl_initializer(fcx, local.node.id, init);\n-            is_lvalue = ty::expr_is_lval(tcx, fcx.ccx.method_map, init.expr);\n+            is_lvalue = ty::expr_is_lval(tcx, fcx.ccx.method_map, init);\n         }\n         _ => {\n             is_lvalue = true;"}, {"sha": "a38b805c7b4f1e3b1ed71310ca31418b34dad9b5", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -147,7 +147,7 @@ fn visit_local(l: @ast::local, &&rcx: @rcx, v: rvt) {\n \n     v.visit_ty(l.node.ty, rcx, v);\n     for l.node.init.each |i| {\n-        v.visit_expr(i.expr, rcx, v);\n+        v.visit_expr(*i, rcx, v);\n     }\n }\n "}, {"sha": "36a63e3a106b524770d028f42dabacee60ba3dff", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087cbb55d06d833033e463b9c3a4237c04264319/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=087cbb55d06d833033e463b9c3a4237c04264319", "patch": "@@ -8,7 +8,7 @@ fn indent<R>(op: fn() -> R) -> R {\n     // Use in conjunction with the log post-processor like `src/etc/indenter`\n     // to make debug output more readable.\n     debug!(\">>\");\n-    let r <- op();\n+    let r = op();\n     debug!(\"<< (Result = %?)\", r);\n     move r\n }\n@@ -75,7 +75,7 @@ fn block_query(b: ast::blk, p: fn@(@ast::expr) -> bool) -> bool {\n \n fn local_rhs_span(l: @ast::local, def: span) -> span {\n     match l.node.init {\n-      Some(i) => return i.expr.span,\n+      Some(i) => return i.span,\n       _ => return def\n     }\n }"}]}