{"sha": "19ae2b940c03750adb3594ff4699c72af452c149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YWUyYjk0MGMwMzc1MGFkYjM1OTRmZjQ2OTljNzJhZjQ1MmMxNDk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-01T12:30:04Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T11:33:16Z"}, "message": "Shrink some internal enums", "tree": {"sha": "6018fe734100f0c0dca63382aaa391fe7964011c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6018fe734100f0c0dca63382aaa391fe7964011c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ae2b940c03750adb3594ff4699c72af452c149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ae2b940c03750adb3594ff4699c72af452c149", "html_url": "https://github.com/rust-lang/rust/commit/19ae2b940c03750adb3594ff4699c72af452c149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ae2b940c03750adb3594ff4699c72af452c149/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc8779b1e040a29ad5088bdc72058765678869b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc8779b1e040a29ad5088bdc72058765678869b", "html_url": "https://github.com/rust-lang/rust/commit/6fc8779b1e040a29ad5088bdc72058765678869b"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "b8ccec4fec72d86b4093bbaaab676dda75a73d77", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=19ae2b940c03750adb3594ff4699c72af452c149", "patch": "@@ -1939,7 +1939,7 @@ pub enum ProjectionElem<'tcx, V, T> {\n     /// \"Downcast\" to a variant of an ADT. Currently, we only introduce\n     /// this for ADTs with more than one variant. It may be better to\n     /// just introduce it always, or always for enums.\n-    Downcast(&'tcx AdtDef, usize),\n+    Downcast(&'tcx AdtDef, u32),\n }\n \n /// Alias for projections as they appear in places, where the base is a place\n@@ -1950,6 +1950,11 @@ pub type PlaceProjection<'tcx> = Projection<'tcx, Place<'tcx>, Local, Ty<'tcx>>;\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n+// at least on 64 bit systems, `PlaceElem` should not be larger than two pointers\n+static_assert!(PROJECTION_ELEM_IS_2_PTRS_LARGE:\n+    mem::size_of::<PlaceElem<'_>>() <= 16\n+);\n+\n /// Alias for projections as they appear in `UserTypeProjection`, where we\n /// need neither the `V` parameter for `Index` nor the `T` for `Field`.\n pub type ProjectionKind<'tcx> = ProjectionElem<'tcx, (), ()>;\n@@ -1970,7 +1975,7 @@ impl<'tcx> Place<'tcx> {\n     }\n \n     pub fn downcast(self, adt_def: &'tcx AdtDef, variant_index: usize) -> Place<'tcx> {\n-        self.elem(ProjectionElem::Downcast(adt_def, variant_index))\n+        self.elem(ProjectionElem::Downcast(adt_def, variant_index as u32))\n     }\n \n     pub fn index(self, index: Local) -> Place<'tcx> {\n@@ -2021,7 +2026,7 @@ impl<'tcx> Debug for Place<'tcx> {\n             Promoted(ref promoted) => write!(fmt, \"({:?}: {:?})\", promoted.0, promoted.1),\n             Projection(ref data) => match data.elem {\n                 ProjectionElem::Downcast(ref adt_def, index) => {\n-                    write!(fmt, \"({:?} as {})\", data.base, adt_def.variants[index].name)\n+                    write!(fmt, \"({:?} as {})\", data.base, adt_def.variants[index as usize].name)\n                 }\n                 ProjectionElem::Deref => write!(fmt, \"(*{:?})\", data.base),\n                 ProjectionElem::Field(field, ty) => {"}, {"sha": "c9a396ff8c591d8e4c2c32cc840d2ae0b8361c79", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=19ae2b940c03750adb3594ff4699c72af452c149", "patch": "@@ -27,9 +27,13 @@ pub enum PlaceTy<'tcx> {\n     /// Downcast to a particular variant of an enum.\n     Downcast { adt_def: &'tcx AdtDef,\n                substs: &'tcx Substs<'tcx>,\n-               variant_index: usize },\n+               variant_index: u32 },\n }\n \n+static_assert!(PLACE_TY_IS_3_PTRS_LARGE:\n+    mem::size_of::<PlaceTy<'_>>() <= 24\n+);\n+\n impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {\n         PlaceTy::Ty { ty }\n@@ -58,7 +62,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n             (PlaceTy::Ty {\n                 ty: &ty::TyS { sty: ty::TyKind::Adt(adt_def, substs), .. } }, variant_index) |\n             (PlaceTy::Downcast { adt_def, substs, variant_index }, _) => {\n-                let variant_def = &adt_def.variants[variant_index];\n+                let variant_def = &adt_def.variants[variant_index as usize];\n                 let field_def = &variant_def.fields[f.index()];\n                 field_def.ty(tcx, substs)\n             }\n@@ -134,7 +138,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                 match self.to_ty(tcx).sty {\n                     ty::Adt(adt_def, substs) => {\n                         assert!(adt_def.is_enum());\n-                        assert!(index < adt_def.variants.len());\n+                        assert!(index < adt_def.variants.len() as u32);\n                         assert_eq!(adt_def, adt_def1);\n                         PlaceTy::Downcast { adt_def,\n                                             substs,"}, {"sha": "0ba28811a90a4c2482586cc4e2921d11c5b5f512", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=19ae2b940c03750adb3594ff4699c72af452c149", "patch": "@@ -1801,6 +1801,7 @@ pub struct FieldDef {\n /// table.\n pub struct AdtDef {\n     pub did: DefId,\n+    // TODO: make this an IndexVec\n     pub variants: Vec<VariantDef>,\n     flags: AdtFlags,\n     pub repr: ReprOptions,"}, {"sha": "17a5f0999e7bf10ed22e3f9aad611352c1647b2c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ae2b940c03750adb3594ff4699c72af452c149/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=19ae2b940c03750adb3594ff4699c72af452c149", "patch": "@@ -33,6 +33,7 @@ CloneTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n+    u32,\n     u64,\n     ::middle::region::Scope,\n     ::syntax::ast::FloatTy,"}]}