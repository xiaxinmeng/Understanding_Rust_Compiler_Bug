{"sha": "df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzY4YzVjOGZjYjM2MWM0ZGM5NGI0Yzc3NmQ2YTc4YzEyODYyZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T07:11:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T07:11:22Z"}, "message": "Auto merge of #71162 - Centril:rollup-jzg6ykc, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #70891 (unit rvalue, use constant `()` instead of tuple)\n - #71030 (rustc_target: Refactor target specifications related to Windows and UEFI)\n - #71100 (Miri: expand frame hooks)\n - #71116 (Entirely remove `DUMMY_HIR_ID`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1c90717e2a9fde66e583b7411ffe5f213a927263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c90717e2a9fde66e583b7411ffe5f213a927263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "html_url": "https://github.com/rust-lang/rust/commit/df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351eefe93a96f98d37182701590493b6710175c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/351eefe93a96f98d37182701590493b6710175c3", "html_url": "https://github.com/rust-lang/rust/commit/351eefe93a96f98d37182701590493b6710175c3"}, {"sha": "7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d", "html_url": "https://github.com/rust-lang/rust/commit/7341cad3f312df5d735f2a8c3f3eb4480ed3a95d"}], "stats": {"total": 1818, "additions": 1255, "deletions": 563}, "files": [{"sha": "c2c7de9d21b28875f2bd5ad7532156b14348a204", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -168,7 +168,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     current_hir_id_owner: Vec<(LocalDefId, u32)>,\n     item_local_id_counters: NodeMap<u32>,\n-    node_id_to_hir_id: IndexVec<NodeId, hir::HirId>,\n+    node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n@@ -522,15 +522,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         self.lower_node_id(CRATE_NODE_ID);\n-        debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == hir::CRATE_HIR_ID);\n+        debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == Some(hir::CRATE_HIR_ID));\n \n         visit::walk_crate(&mut MiscCollector { lctx: &mut self, hir_id_owner: None }, c);\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);\n         let attrs = self.lower_attrs(&c.attrs);\n         let body_ids = body_ids(&self.bodies);\n-        let proc_macros = c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id]).collect();\n+        let proc_macros =\n+            c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n@@ -571,26 +572,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         ast_node_id: NodeId,\n         alloc_hir_id: impl FnOnce(&mut Self) -> hir::HirId,\n     ) -> hir::HirId {\n-        if ast_node_id == DUMMY_NODE_ID {\n-            return hir::DUMMY_HIR_ID;\n-        }\n+        assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n         let min_size = ast_node_id.as_usize() + 1;\n \n         if min_size > self.node_id_to_hir_id.len() {\n-            self.node_id_to_hir_id.resize(min_size, hir::DUMMY_HIR_ID);\n+            self.node_id_to_hir_id.resize(min_size, None);\n         }\n \n-        let existing_hir_id = self.node_id_to_hir_id[ast_node_id];\n-\n-        if existing_hir_id == hir::DUMMY_HIR_ID {\n+        if let Some(existing_hir_id) = self.node_id_to_hir_id[ast_node_id] {\n+            existing_hir_id\n+        } else {\n             // Generate a new `HirId`.\n             let hir_id = alloc_hir_id(self);\n-            self.node_id_to_hir_id[ast_node_id] = hir_id;\n+            self.node_id_to_hir_id[ast_node_id] = Some(hir_id);\n \n             hir_id\n-        } else {\n-            existing_hir_id\n         }\n     }\n "}, {"sha": "d58d9b91c73ac86b8a015255f30863efaef0b265", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -12,7 +12,7 @@ use rustc_session::search_paths::PathKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -182,7 +182,9 @@ fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n     // To comply with the Windows App Certification Kit,\n     // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n     let t = &sess.target.target;\n-    if flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n+    if (flavor == LinkerFlavor::Msvc || flavor == LinkerFlavor::Lld(LldFlavor::Link))\n+        && t.target_vendor == \"uwp\"\n+    {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n             if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {\n@@ -1530,13 +1532,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.debuginfo();\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    // We want to, by default, prevent the compiler from accidentally leaking in\n-    // any system libraries, so we may explicitly ask linkers to not link to any\n-    // libraries by default. Note that this does not happen for windows because\n-    // windows pulls in some large number of libraries and I couldn't quite\n-    // figure out which subset we wanted.\n-    //\n-    // This is all naturally configurable via the standard methods as well.\n+    // We want to prevent the compiler from accidentally leaking in any system libraries,\n+    // so by default we tell linkers not to link to any default libraries.\n     if !sess.opts.cg.default_linker_libraries.unwrap_or(false)\n         && sess.target.target.options.no_default_libraries\n     {"}, {"sha": "d8c5ddf586f453af016f1319095a882198a9a1a9", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -631,15 +631,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n     }\n \n     fn no_default_libraries(&mut self) {\n-        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n-        // as there's been trouble in the past of linking the C++ standard\n-        // library required by LLVM. This likely needs to happen one day, but\n-        // in general Windows is also a more controlled environment than\n-        // Unix, so it's not necessarily as critical that this be implemented.\n-        //\n-        // Note that there are also some licensing worries about statically\n-        // linking some libraries which require a specific agreement, so it may\n-        // not ever be possible for us to pass this flag.\n+        self.cmd.arg(\"/NODEFAULTLIB\");\n     }\n \n     fn include_path(&mut self, path: &Path) {"}, {"sha": "1ac23677d473917f4074aa5ac874be80dc53ccbe", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -7,7 +7,6 @@\n pub use crate::def_id::DefPathHash;\n use crate::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir;\n-use crate::hir_id::DUMMY_HIR_ID;\n \n use rustc_ast::ast;\n use rustc_ast::crate_disambiguator::CrateDisambiguator;\n@@ -87,7 +86,7 @@ pub struct Definitions {\n     node_id_to_def_id: FxHashMap<ast::NodeId, LocalDefId>,\n     def_id_to_node_id: IndexVec<LocalDefId, ast::NodeId>,\n \n-    pub(super) node_id_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n+    pub(super) node_id_to_hir_id: IndexVec<ast::NodeId, Option<hir::HirId>>,\n     /// The reverse mapping of `node_id_to_hir_id`.\n     pub(super) hir_id_to_node_id: FxHashMap<hir::HirId, ast::NodeId>,\n \n@@ -345,8 +344,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: DefId) -> Option<hir::HirId> {\n         if let Some(def_id) = def_id.as_local() {\n-            let hir_id = self.local_def_id_to_hir_id(def_id);\n-            if hir_id != DUMMY_HIR_ID { Some(hir_id) } else { None }\n+            Some(self.local_def_id_to_hir_id(def_id))\n         } else {\n             None\n         }\n@@ -359,11 +357,22 @@ impl Definitions {\n \n     #[inline]\n     pub fn node_id_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n+        self.node_id_to_hir_id[node_id].unwrap()\n+    }\n+\n+    #[inline]\n+    pub fn opt_node_id_to_hir_id(&self, node_id: ast::NodeId) -> Option<hir::HirId> {\n         self.node_id_to_hir_id[node_id]\n     }\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, id: LocalDefId) -> hir::HirId {\n+        let node_id = self.def_id_to_node_id[id];\n+        self.node_id_to_hir_id[node_id].unwrap()\n+    }\n+\n+    #[inline]\n+    pub fn opt_local_def_id_to_hir_id(&self, id: LocalDefId) -> Option<hir::HirId> {\n         let node_id = self.def_id_to_node_id[id];\n         self.node_id_to_hir_id[node_id]\n     }\n@@ -470,7 +479,10 @@ impl Definitions {\n \n     /// Initializes the `ast::NodeId` to `HirId` mapping once it has been generated during\n     /// AST to HIR lowering.\n-    pub fn init_node_id_to_hir_id_mapping(&mut self, mapping: IndexVec<ast::NodeId, hir::HirId>) {\n+    pub fn init_node_id_to_hir_id_mapping(\n+        &mut self,\n+        mapping: IndexVec<ast::NodeId, Option<hir::HirId>>,\n+    ) {\n         assert!(\n             self.node_id_to_hir_id.is_empty(),\n             \"trying to initialize `NodeId` -> `HirId` mapping twice\"\n@@ -481,7 +493,7 @@ impl Definitions {\n         self.hir_id_to_node_id = self\n             .node_id_to_hir_id\n             .iter_enumerated()\n-            .map(|(node_id, &hir_id)| (hir_id, node_id))\n+            .filter_map(|(node_id, &hir_id)| hir_id.map(|hir_id| (hir_id, node_id)))\n             .collect();\n     }\n "}, {"sha": "d782c3dd70a2c53c139020cc4f5dc0f9c1c72b6e", "filename": "src/librustc_hir/hir_id.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_hir%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_hir%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir_id.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -45,7 +45,4 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     local_id: ItemLocalId::from_u32(0),\n };\n \n-pub const DUMMY_HIR_ID: HirId =\n-    HirId { owner: LocalDefId { local_def_index: CRATE_DEF_INDEX }, local_id: DUMMY_ITEM_LOCAL_ID };\n-\n pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "2906da437abac1c10b4ae6841ef9a6223c9c57a0", "filename": "src/librustc_middle/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -250,23 +250,16 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node),\n                 };\n \n-                let forgot_str = if hir_id == hir::DUMMY_HIR_ID {\n-                    format!(\"\\nMaybe you forgot to lower the node id {:?}?\", node_id)\n-                } else {\n-                    String::new()\n-                };\n-\n                 span_bug!(\n                     span,\n                     \"inconsistent DepNode at `{:?}` for `{}`: \\\n-                     current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}){}\",\n+                     current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n                     self.source_map.span_to_string(span),\n                     node_str,\n                     self.definitions.def_path(self.current_dep_node_owner).to_string_no_crate(),\n                     self.current_dep_node_owner,\n                     self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n                     hir_id.owner,\n-                    forgot_str,\n                 )\n             }\n         }"}, {"sha": "ead8529fad8becd82c0163e1199e3913a93b8c04", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -214,11 +214,21 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.node_id_to_hir_id(node_id)\n     }\n \n+    #[inline]\n+    pub fn opt_node_id_to_hir_id(&self, node_id: NodeId) -> Option<HirId> {\n+        self.tcx.definitions.opt_node_id_to_hir_id(node_id)\n+    }\n+\n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.local_def_id_to_hir_id(def_id)\n     }\n \n+    #[inline]\n+    pub fn opt_local_def_id_to_hir_id(&self, def_id: LocalDefId) -> Option<HirId> {\n+        self.tcx.definitions.opt_local_def_id_to_hir_id(def_id)\n+    }\n+\n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n         let node = self.find(hir_id)?;\n "}, {"sha": "1dd14b7c4ffdaced3d5aa013a06d8a867af5a74d", "filename": "src/librustc_middle/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -215,7 +215,6 @@ fn late_report_deprecation(\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n-    def_id: DefId,\n     hir_id: HirId,\n ) {\n     if span.in_derive_expansion() {\n@@ -229,9 +228,6 @@ fn late_report_deprecation(\n         }\n         diag.emit()\n     });\n-    if hir_id == hir::DUMMY_HIR_ID {\n-        span_bug!(span, \"emitted a {} lint with dummy HIR id: {:?}\", lint.name, def_id);\n-    }\n }\n \n /// Result of `TyCtxt::eval_stability`.\n@@ -296,7 +292,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if !skip {\n                     let (message, lint) =\n                         deprecation_message(&depr_entry.attr, &self.def_path_str(def_id));\n-                    late_report_deprecation(self, &message, None, lint, span, def_id, id);\n+                    late_report_deprecation(self, &message, None, lint, span, id);\n                 }\n             };\n         }\n@@ -319,15 +315,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 if let Some(depr) = &stability.rustc_depr {\n                     let (message, lint) =\n                         rustc_deprecation_message(depr, &self.def_path_str(def_id));\n-                    late_report_deprecation(\n-                        self,\n-                        &message,\n-                        depr.suggestion,\n-                        lint,\n-                        span,\n-                        def_id,\n-                        id,\n-                    );\n+                    late_report_deprecation(self, &message, depr.suggestion, lint, span, id);\n                 }\n             }\n         }"}, {"sha": "a49dc105498ed29c99d575fc384365fc64a58fc4", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1126,13 +1126,16 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n-            let hir_id = definitions.node_id_to_hir_id(k);\n-            let map = trait_map.entry(hir_id.owner).or_default();\n-            let v = v\n-                .into_iter()\n-                .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n-                .collect();\n-            map.insert(hir_id.local_id, StableVec::new(v));\n+            // FIXME(#71104) Should really be using just `node_id_to_hir_id` but\n+            // some `NodeId` do not seem to have a corresponding HirId.\n+            if let Some(hir_id) = definitions.opt_node_id_to_hir_id(k) {\n+                let map = trait_map.entry(hir_id.owner).or_default();\n+                let v = v\n+                    .into_iter()\n+                    .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n+                    .collect();\n+                map.insert(hir_id.local_id, StableVec::new(v));\n+            }\n         }\n \n         GlobalCtxt {"}, {"sha": "3f0774767fd7a4ede2666ff6c41cd1c4bc2226bb", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,7 @@\n use super::{error_to_const_error, CompileTimeEvalContext, CompileTimeInterpreter, MemoryExtra};\n use crate::interpret::eval_nullary_intrinsic;\n use crate::interpret::{\n-    intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, ImmTy, Immediate, InternKind,\n+    intern_const_alloc_recursive, Allocation, ConstValue, GlobalId, Immediate, InternKind,\n     InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RawConst, RefTracking, Scalar,\n     ScalarMaybeUndef, StackPopCleanup,\n };\n@@ -147,25 +147,28 @@ pub(super) fn op_to_const<'tcx>(\n     match immediate {\n         Ok(mplace) => to_const_value(mplace),\n         // see comment on `let try_as_immediate` above\n-        Err(ImmTy { imm: Immediate::Scalar(x), .. }) => match x {\n-            ScalarMaybeUndef::Scalar(s) => ConstValue::Scalar(s),\n-            ScalarMaybeUndef::Undef => to_const_value(op.assert_mem_place(ecx)),\n+        Err(imm) => match *imm {\n+            Immediate::Scalar(x) => match x {\n+                ScalarMaybeUndef::Scalar(s) => ConstValue::Scalar(s),\n+                ScalarMaybeUndef::Undef => to_const_value(op.assert_mem_place(ecx)),\n+            },\n+            Immediate::ScalarPair(a, b) => {\n+                let (data, start) = match a.not_undef().unwrap() {\n+                    Scalar::Ptr(ptr) => {\n+                        (ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id), ptr.offset.bytes())\n+                    }\n+                    Scalar::Raw { .. } => (\n+                        ecx.tcx\n+                            .intern_const_alloc(Allocation::from_byte_aligned_bytes(b\"\" as &[u8])),\n+                        0,\n+                    ),\n+                };\n+                let len = b.to_machine_usize(&ecx.tcx.tcx).unwrap();\n+                let start = start.try_into().unwrap();\n+                let len: usize = len.try_into().unwrap();\n+                ConstValue::Slice { data, start, end: start + len }\n+            }\n         },\n-        Err(ImmTy { imm: Immediate::ScalarPair(a, b), .. }) => {\n-            let (data, start) = match a.not_undef().unwrap() {\n-                Scalar::Ptr(ptr) => {\n-                    (ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id), ptr.offset.bytes())\n-                }\n-                Scalar::Raw { .. } => (\n-                    ecx.tcx.intern_const_alloc(Allocation::from_byte_aligned_bytes(b\"\" as &[u8])),\n-                    0,\n-                ),\n-            };\n-            let len = b.to_machine_usize(&ecx.tcx.tcx).unwrap();\n-            let start = start.try_into().unwrap();\n-            let len: usize = len.try_into().unwrap();\n-            ConstValue::Slice { data, start, end: start + len }\n-        }\n     }\n }\n "}, {"sha": "e53ca6b31bb67f276471af7be9a54d459602593c", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -13,8 +13,8 @@ use rustc_middle::mir::AssertMessage;\n use rustc_span::symbol::Symbol;\n \n use crate::interpret::{\n-    self, AllocId, Allocation, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind, OpTy,\n-    PlaceTy, Pointer, Scalar,\n+    self, AllocId, Allocation, Frame, GlobalId, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n+    OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n@@ -342,8 +342,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n     }\n \n     #[inline(always)]\n-    fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        Ok(())\n+    fn init_frame_extra(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n+        Ok(frame)\n     }\n \n     fn before_access_global("}, {"sha": "f111eecb9450e33625f58147a24f01839b362a98", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -159,6 +159,21 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n     }\n }\n \n+impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n+    pub fn with_extra<Extra>(self, extra: Extra) -> Frame<'mir, 'tcx, Tag, Extra> {\n+        Frame {\n+            body: self.body,\n+            instance: self.instance,\n+            return_to_block: self.return_to_block,\n+            return_place: self.return_place,\n+            locals: self.locals,\n+            block: self.block,\n+            stmt: self.stmt,\n+            extra,\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n     /// Return the `SourceInfo` of the current instruction.\n     pub fn current_source_info(&self) -> Option<mir::SourceInfo> {\n@@ -586,8 +601,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ::log_settings::settings().indentation += 1;\n \n         // first push a stack frame so we have access to the local substs\n-        let extra = M::stack_push(self)?;\n-        self.stack.push(Frame {\n+        let pre_frame = Frame {\n             body,\n             block: Some(mir::START_BLOCK),\n             return_to_block,\n@@ -597,8 +611,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             locals: IndexVec::new(),\n             instance,\n             stmt: 0,\n-            extra,\n-        });\n+            extra: (),\n+        };\n+        let frame = M::init_frame_extra(self, pre_frame)?;\n+        self.stack.push(frame);\n \n         // don't allocate at all for trivial constants\n         if body.local_decls.len() > 1 {\n@@ -630,6 +646,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.frame_mut().locals = locals;\n         }\n \n+        M::after_stack_push(self)?;\n         info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n \n         if self.stack.len() > *self.tcx.sess.recursion_limit.get() {\n@@ -725,16 +742,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n \n         // Cleanup: deallocate all locals that are backed by an allocation.\n-        for local in frame.locals {\n+        for local in &frame.locals {\n             self.deallocate_local(local.value)?;\n         }\n \n-        if M::stack_pop(self, frame.extra, unwinding)? == StackPopJump::NoJump {\n+        let return_place = frame.return_place;\n+        if M::after_stack_pop(self, frame, unwinding)? == StackPopJump::NoJump {\n             // The hook already did everything.\n             // We want to skip the `info!` below, hence early return.\n             return Ok(());\n         }\n-        // Normal return.\n+        // Normal return, figure out where to jump.\n         if unwinding {\n             // Follow the unwind edge.\n             let unwind = next_block.expect(\"Encountered StackPopCleanup::None when unwinding!\");\n@@ -743,7 +761,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Follow the normal return edge.\n             // Validate the return value. Do this after deallocating so that we catch dangling\n             // references.\n-            if let Some(return_place) = frame.return_place {\n+            if let Some(return_place) = return_place {\n                 if M::enforce_validity(self) {\n                     // Data got changed, better make sure it matches the type!\n                     // It is still possible that the return place held invalid data while"}, {"sha": "8bf8d904cb29eb8c3a1ce3f6489b50cd145dd15d", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -279,13 +279,21 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         Ok(())\n     }\n \n-    /// Called immediately before a new stack frame got pushed.\n-    fn stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, Self::FrameExtra>;\n+    /// Called immediately before a new stack frame gets pushed.\n+    fn init_frame_extra(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx, Self::PointerTag>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>>;\n+\n+    /// Called immediately after a stack frame got pushed and its locals got initialized.\n+    fn after_stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n \n-    /// Called immediately after a stack frame gets popped\n-    fn stack_pop(\n+    /// Called immediately after a stack frame got popped, but before jumping back to the caller.\n+    fn after_stack_pop(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _extra: Self::FrameExtra,\n+        _frame: Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>,\n         _unwinding: bool,\n     ) -> InterpResult<'tcx, StackPopJump> {\n         // By default, we do not support unwinding from panics"}, {"sha": "893f4c1db7e0aa20b24c9d82228d2e582d40e4cb", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -87,7 +87,7 @@ impl<'tcx, Tag> Immediate<Tag> {\n // as input for binary and cast operations.\n #[derive(Copy, Clone, Debug)]\n pub struct ImmTy<'tcx, Tag = ()> {\n-    pub(crate) imm: Immediate<Tag>,\n+    imm: Immediate<Tag>,\n     pub layout: TyAndLayout<'tcx>,\n }\n \n@@ -183,6 +183,11 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n         ImmTy { imm: val.into(), layout }\n     }\n \n+    #[inline]\n+    pub fn from_immediate(imm: Immediate<Tag>, layout: TyAndLayout<'tcx>) -> Self {\n+        ImmTy { imm, layout }\n+    }\n+\n     #[inline]\n     pub fn try_from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Option<Self> {\n         Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))\n@@ -424,7 +429,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(OpTy { op, layout })\n     }\n \n-    /// Every place can be read from, so we can turn them into an operand\n+    /// Every place can be read from, so we can turn them into an operand.\n+    /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this\n+    /// will never actually read from memory.\n     #[inline(always)]\n     pub fn place_to_op(\n         &self,"}, {"sha": "9ac4b3551fc4307c0ea01da5f11d5929ca4ff1d8", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -247,7 +247,7 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n             Operand::Immediate(_) if self.layout.is_zst() => {\n                 Ok(MPlaceTy::dangling(self.layout, cx))\n             }\n-            Operand::Immediate(imm) => Err(ImmTy { imm, layout: self.layout }),\n+            Operand::Immediate(imm) => Err(ImmTy::from_immediate(imm, self.layout)),\n         }\n     }\n "}, {"sha": "49fee1bddcb6db1b06cdc8343938ff2896ea8373", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -407,7 +407,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let this_receiver_ptr = self.layout_of(receiver_ptr_ty)?.field(self, 0)?;\n                 // Adjust receiver argument.\n                 args[0] =\n-                    OpTy::from(ImmTy { layout: this_receiver_ptr, imm: receiver_place.ptr.into() });\n+                    OpTy::from(ImmTy::from_immediate(receiver_place.ptr.into(), this_receiver_ptr));\n                 trace!(\"Patched self operand to {:#?}\", args[0]);\n                 // recurse with concrete function\n                 self.eval_fn_call(drop_fn, caller_abi, &args, ret, unwind)\n@@ -436,10 +436,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             _ => (instance, place),\n         };\n \n-        let arg = ImmTy {\n-            imm: place.to_ref(),\n-            layout: self.layout_of(self.tcx.mk_mut_ptr(place.layout.ty))?,\n-        };\n+        let arg = ImmTy::from_immediate(\n+            place.to_ref(),\n+            self.layout_of(self.tcx.mk_mut_ptr(place.layout.ty))?,\n+        );\n \n         let ty = self.tcx.mk_unit(); // return type is ()\n         let dest = MPlaceTy::dangling(self.layout_of(ty)?, self);"}, {"sha": "80c12a30135ff6509fc2aa2af41ed908b672dcf7", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -290,8 +290,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     #[inline(always)]\n-    fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        Ok(())\n+    fn init_frame_extra(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        frame: Frame<'mir, 'tcx>,\n+    ) -> InterpResult<'tcx, Frame<'mir, 'tcx>> {\n+        Ok(frame)\n     }\n }\n "}, {"sha": "71c2e3bf06095693207f4879f2636ac94d1dc7a1", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -835,7 +835,11 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     if self.keep_original {\n                         rhs.clone()\n                     } else {\n-                        let unit = Rvalue::Aggregate(box AggregateKind::Tuple, vec![]);\n+                        let unit = Rvalue::Use(Operand::Constant(box Constant {\n+                            span: statement.source_info.span,\n+                            user_ty: None,\n+                            literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit),\n+                        }));\n                         mem::replace(rhs, unit)\n                     },\n                     statement.source_info,"}, {"sha": "4e8d5e04a63505d0269815e608e41acfe01ee466", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             if destination_ty.is_unit() {\n                 // We only want to assign an implicit `()` as the return value of the block if the\n                 // block does not diverge. (Otherwise, we may try to assign a unit to a `!`-type.)\n-                this.cfg.push_assign_unit(block, source_info, destination);\n+                this.cfg.push_assign_unit(block, source_info, destination, this.hir.tcx());\n             }\n         }\n         // Finally, we pop all the let scopes before exiting out from the scope of block"}, {"sha": "42e2b242d7726688f1a8f9a0ffcb19fc14ec9543", "filename": "src/librustc_mir_build/build/cfg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -2,6 +2,7 @@\n \n use crate::build::CFG;\n use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n \n impl<'tcx> CFG<'tcx> {\n     crate fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -58,12 +59,17 @@ impl<'tcx> CFG<'tcx> {\n         block: BasicBlock,\n         source_info: SourceInfo,\n         place: Place<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n     ) {\n         self.push_assign(\n             block,\n             source_info,\n             place,\n-            Rvalue::Aggregate(box AggregateKind::Tuple, vec![]),\n+            Rvalue::Use(Operand::Constant(box Constant {\n+                span: source_info.span,\n+                user_ty: None,\n+                literal: ty::Const::zero_sized(tcx, tcx.types.unit),\n+            })),\n         );\n     }\n "}, {"sha": "b6f46aab4161268adc99f681dd260b4d6e22b3f3", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -225,7 +225,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n-                block.and(this.unit_rvalue())\n+                block.and(Rvalue::Use(Operand::Constant(box Constant {\n+                    span: expr_span,\n+                    user_ty: None,\n+                    literal: ty::Const::zero_sized(this.hir.tcx(), this.hir.tcx().types.unit),\n+                })))\n             }\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }"}, {"sha": "cd5bb738aedf8eb27e044187794a97eb7c8fd6da", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr, None));\n-                this.cfg.push_assign_unit(block, source_info, destination);\n+                this.cfg.push_assign_unit(block, source_info, destination, this.hir.tcx());\n                 block.unit()\n             }\n "}, {"sha": "578b862b905433e4395a8400496ee452d85fc4e4", "filename": "src/librustc_mir_build/build/misc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -32,10 +32,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         Operand::Constant(constant)\n     }\n \n-    crate fn unit_rvalue(&mut self) -> Rvalue<'tcx> {\n-        Rvalue::Aggregate(box AggregateKind::Tuple, vec![])\n-    }\n-\n     // Returns a zero literal operand for the appropriate type, works for\n     // bool, char and integers.\n     crate fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {"}, {"sha": "d88cbf945130569c12764693fca0e80f93f58422", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 unpack!(block = self.into(destination, block, value));\n                 self.block_context.pop();\n             } else {\n-                self.cfg.push_assign_unit(block, source_info, destination)\n+                self.cfg.push_assign_unit(block, source_info, destination, self.hir.tcx())\n             }\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");"}, {"sha": "1e31b7c74b6f054f8e840770820ec4311c1441f5", "filename": "src/librustc_passes/hir_id_validator.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_passes%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_passes%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_id_validator.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -143,16 +143,6 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     fn visit_id(&mut self, hir_id: HirId) {\n         let owner = self.owner.expect(\"no owner\");\n \n-        if hir_id == hir::DUMMY_HIR_ID {\n-            self.error(|| {\n-                format!(\n-                    \"HirIdValidator: HirId {:?} is invalid\",\n-                    self.hir_map.node_to_string(hir_id)\n-                )\n-            });\n-            return;\n-        }\n-\n         if owner != hir_id.owner {\n             self.error(|| {\n                 format!("}, {"sha": "51e1588c71c4215e01e094f5267637ab90e8b998", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -928,7 +928,12 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n         let macro_module_def_id =\n             ty::DefIdTree::parent(self.tcx, self.tcx.hir().local_def_id(md.hir_id)).unwrap();\n-        let mut module_id = match self.tcx.hir().as_local_hir_id(macro_module_def_id) {\n+        // FIXME(#71104) Should really be using just `as_local_hir_id` but\n+        // some `DefId` do not seem to have a corresponding HirId.\n+        let hir_id = macro_module_def_id\n+            .as_local()\n+            .and_then(|def_id| self.tcx.hir().opt_local_def_id_to_hir_id(def_id));\n+        let mut module_id = match hir_id {\n             Some(module_id) if self.tcx.hir().is_hir_id_module(module_id) => module_id,\n             // `module_id` doesn't correspond to a `mod`, return early (#63164, #65252).\n             _ => return,"}, {"sha": "5bfb5aa2440b731e6ec4bcee67371944266ca781", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -2704,14 +2704,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n-        if lifetime_ref.hir_id == hir::DUMMY_HIR_ID {\n-            span_bug!(\n-                lifetime_ref.span,\n-                \"lifetime reference not renumbered, \\\n-                 probably a bug in rustc_ast::fold\"\n-            );\n-        }\n-\n         debug!(\n             \"insert_lifetime: {} resolved to {:?} span={:?}\",\n             self.tcx.hir().node_to_string(lifetime_ref.hir_id),"}, {"sha": "ba2541bc6c3d905f81935caf19aceb3308f20d06", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -225,11 +225,14 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             collector.visit_pat(&arg.pat);\n \n             for (id, ident, ..) in collector.collected_idents {\n-                let hir_id = self.tcx.hir().node_id_to_hir_id(id);\n-                let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n-                    Some(s) => s.to_string(),\n-                    None => continue,\n-                };\n+                // FIXME(#71104) Should really be using just `node_id_to_hir_id` but\n+                // some `NodeId` do not seem to have a corresponding HirId.\n+                let hir_id = self.tcx.hir().opt_node_id_to_hir_id(id);\n+                let typ =\n+                    match hir_id.and_then(|hir_id| self.save_ctxt.tables.node_type_opt(hir_id)) {\n+                        Some(s) => s.to_string(),\n+                        None => continue,\n+                    };\n                 if !self.span.filter_generated(ident.span) {\n                     let id = id_from_node_id(id, &self.save_ctxt);\n                     let span = self.span_from_span(ident.span);"}, {"sha": "ebe901e4f274d1bdac78fd21a9105926d529fd6c", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,6 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "8652d1051ad05094f2562bdf5cd7f645902a225a", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,6 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "b7fcda63db00b9bffd93d91ba3a202772fca4da2", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,6 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "340090fd43b7c9ff29d0be1f9c700e752a817a45", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,6 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n-use std::default::Default;\n \n pub fn target() -> TargetResult {\n     Ok(Target {"}, {"sha": "c7062e1ca5196fa8ebe0e012f562e71bf90d4bc0", "filename": "src/librustc_target/spec/dragonfly_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "d2a087ab62f9feb67686fe5743b8d2eb94b648ae", "filename": "src/librustc_target/spec/freebsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "4060b126cddb78ee07b8118e5bde2ef00f26dd32", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "3d7ae6c302d9c56d09437c33417cc6efdad3c089", "filename": "src/librustc_target/spec/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "b9f94023e7a791b9c03dcf124036c6be8e9c028f", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "1f9b195e2e6980049e7b65ddfd6eacae684a14c7", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "d12afe5a40bcc8882bb09cae3db63a8a684da149", "filename": "src/librustc_target/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_base::opts();\n+    let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.eliminate_frame_pointer = false; // Required for backtraces"}, {"sha": "9d0922b8ce5a957014bbc3fd02fd666c10a177ff", "filename": "src/librustc_target/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,18 +1,24 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n-    // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/LARGEADDRESSAWARE\".to_string());\n-\n-    // Ensure the linker will only produce an image if it can also produce a table of\n-    // the image's safe exception handlers.\n-    // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/SAFESEH\".to_string());\n+    let pre_link_args_msvc = vec![\n+        // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n+        // space available to x86 Windows binaries on x86_64.\n+        \"/LARGEADDRESSAWARE\".to_string(),\n+        // Ensure the linker will only produce an image if it can also produce a table of\n+        // the image's safe exception handlers.\n+        // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n+        \"/SAFESEH\".to_string(),\n+    ];\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n     Ok(Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),"}, {"sha": "221d5f0785cd2e421ac1a17ae35f1b071128c974", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -8,7 +8,7 @@\n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::uefi_base::opts();\n+    let mut base = super::uefi_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n \n@@ -23,11 +23,6 @@ pub fn target() -> TargetResult {\n     // arguments, thus giving you access to full MMX/SSE acceleration.\n     base.features = \"-mmx,-sse,+soft-float\".to_string();\n \n-    // UEFI mirrors the calling-conventions used on windows. In case of i686 this means small\n-    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n-    // by the UEFI specifications forbid any ABI to return structures.\n-    base.abi_return_struct_as_int = true;\n-\n     // Use -GNU here, because of the reason below:\n     // Background and Problem:\n     //   If we use i686-unknown-windows, the LLVM IA32 MSVC generates compiler intrinsic"}, {"sha": "4e582fb8c63ab61af0885a4d5ee9943a4d4dbb9b", "filename": "src/librustc_target/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_uwp_base::opts();\n+    let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n     base.eliminate_frame_pointer = false; // Required for backtraces"}, {"sha": "5caad10161d8ebd3f566abbb2151c7cda21e7eb6", "filename": "src/librustc_target/spec/l4re_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n //use std::process::Command;\n \n // Use GCC to locate code for crt* libraries from the host, not from L4Re. Note"}, {"sha": "52892fc35924edd17ab955f5f2010493e00fdcdd", "filename": "src/librustc_target/spec/linux_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "4a900d1b02cbfc47050a02230305df1c0530a1f3", "filename": "src/librustc_target/spec/linux_kernel_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();"}, {"sha": "6ff812754aa7d391f81f74c59c72afcc54c26f79", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -37,7 +37,6 @@\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use rustc_serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n-use std::default::Default;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{fmt, io};\n@@ -60,18 +59,19 @@ mod l4re_base;\n mod linux_base;\n mod linux_kernel_base;\n mod linux_musl_base;\n+mod msvc_base;\n mod netbsd_base;\n mod openbsd_base;\n mod redox_base;\n mod riscv_base;\n mod solaris_base;\n mod thumb_base;\n-mod uefi_base;\n+mod uefi_msvc_base;\n mod vxworks_base;\n mod wasm32_base;\n-mod windows_base;\n+mod windows_gnu_base;\n mod windows_msvc_base;\n-mod windows_uwp_base;\n+mod windows_uwp_gnu_base;\n mod windows_uwp_msvc_base;\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -309,23 +309,14 @@ macro_rules! supported_targets {\n         }\n \n         #[cfg(test)]\n-        mod test_json_encode_decode {\n-            use rustc_serialize::json::ToJson;\n-            use super::Target;\n-            $(use super::$module;)+\n+        mod tests {\n+            mod tests_impl;\n \n+            // Cannot put this into a separate file without duplication, make an exception.\n             $(\n-                #[test] // `#[test]` - this is hard to put into a separate file, make an exception\n+                #[test] // `#[test]`\n                 fn $module() {\n-                    // Grab the TargetResult struct. If we successfully retrieved\n-                    // a Target, then the test JSON encoding/decoding can run for this\n-                    // Target on this testing platform (i.e., checking the iOS targets\n-                    // only on a Mac test platform).\n-                    let _ = $module::target().map(|original| {\n-                        let as_json = original.to_json();\n-                        let parsed = Target::from_json(as_json).unwrap();\n-                        assert_eq!(original, parsed);\n-                    });\n+                    tests_impl::test_target(super::$module::target());\n                 }\n             )+\n         }\n@@ -538,7 +529,8 @@ pub struct Target {\n     pub arch: String,\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n-    /// Linker flavor\n+    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n+    /// on the command line.\n     pub linker_flavor: LinkerFlavor,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -566,7 +558,8 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// LLD flavor\n+    /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n+    /// without clarifying its flavor in any way.\n     pub lld_flavor: LldFlavor,\n \n     /// Linker arguments that are passed *before* any user-defined libraries."}, {"sha": "817a322a9e4dac4e320fea06dbbeb35e5d032434", "filename": "src/librustc_target/spec/msvc_base.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsvc_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -0,0 +1,35 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    let pre_link_args_msvc = vec![\n+        // Suppress the verbose logo and authorship debugging output, which would needlessly\n+        // clog any log files.\n+        \"/NOLOGO\".to_string(),\n+        // Tell the compiler that non-code sections can be marked as non-executable,\n+        // including stack pages.\n+        // UEFI is fully compatible to non-executable data pages.\n+        // In fact, firmware might enforce this, so we better let the linker know about this,\n+        // so it will fail if the compiler ever tries placing code on the stack\n+        // (e.g., trampoline constructs and alike).\n+        \"/NXCOMPAT\".to_string(),\n+    ];\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+\n+    TargetOptions {\n+        executables: true,\n+        is_like_windows: true,\n+        is_like_msvc: true,\n+        // set VSLANG to 1033 can prevent link.exe from using\n+        // language packs, and avoid generating Non-UTF-8 error\n+        // messages if a link error occurred.\n+        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n+        lld_flavor: LldFlavor::Link,\n+        pre_link_args,\n+        abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n+\n+        ..Default::default()\n+    }\n+}"}, {"sha": "95c4749f9c74c5543760b4a174de37132ff0183a", "filename": "src/librustc_target/spec/netbsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "cadd14df69352837868549a0fcf99802ef1417ea", "filename": "src/librustc_target/spec/openbsd_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "18cafe654d17f5486d5dd4fb0339041ed9ea3883", "filename": "src/librustc_target/spec/redox_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fredox_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();"}, {"sha": "8d3a3563f4164a87fc6de8803e52be11da28a16f", "filename": "src/librustc_target/spec/solaris_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::TargetOptions;\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {"}, {"sha": "4cf186bdd7c1a718e20fff9fe9b4648e99c4d443", "filename": "src/librustc_target/spec/tests/tests_impl.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ftests%2Ftests_impl.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -0,0 +1,43 @@\n+use super::super::*;\n+\n+pub(super) fn test_target(target: TargetResult) {\n+    // Grab the TargetResult struct. If we successfully retrieved\n+    // a Target, then the test JSON encoding/decoding can run for this\n+    // Target on this testing platform (i.e., checking the iOS targets\n+    // only on a Mac test platform).\n+    if let Ok(original) = target {\n+        original.check_consistency();\n+        let as_json = original.to_json();\n+        let parsed = Target::from_json(as_json).unwrap();\n+        assert_eq!(original, parsed);\n+    }\n+}\n+\n+impl Target {\n+    fn check_consistency(&self) {\n+        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n+        // If you target really needs to deviate from the rules below, whitelist it\n+        // and document the reasons.\n+        assert_eq!(\n+            self.linker_flavor == LinkerFlavor::Msvc\n+                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n+            self.options.lld_flavor == LldFlavor::Link,\n+        );\n+        for args in &[\n+            &self.options.pre_link_args,\n+            &self.options.pre_link_args_crt,\n+            &self.options.late_link_args,\n+            &self.options.late_link_args_dynamic,\n+            &self.options.late_link_args_static,\n+            &self.options.post_link_args,\n+        ] {\n+            assert_eq!(\n+                args.get(&LinkerFlavor::Msvc),\n+                args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n+            );\n+            if args.contains_key(&LinkerFlavor::Msvc) {\n+                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n+            }\n+        }\n+    }\n+}"}, {"sha": "eca095b5942898298036c837b5e7dd369df56389", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -28,7 +28,6 @@\n // build scripts / gcc flags.\n \n use crate::spec::{PanicStrategy, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults"}, {"sha": "21d62d252e09ad2d059d2757bfd30ed45acbdd9f", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n@@ -10,7 +10,12 @@ pub fn target() -> TargetResult {\n     // should be smart enough to insert branch islands only\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(\"/OPT:NOLBR\".to_string());\n+    let pre_link_args_msvc = \"/OPT:NOLBR\".to_string();\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().push(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .push(pre_link_args_msvc);\n \n     // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n     // implemented for windows/arm in LLVM"}, {"sha": "d09da9478fb2b356a834639416ea7a307559df96", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/351eefe93a96f98d37182701590493b6710175c3/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351eefe93a96f98d37182701590493b6710175c3/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=351eefe93a96f98d37182701590493b6710175c3", "patch": "@@ -1,67 +0,0 @@\n-// This defines a base target-configuration for native UEFI systems. The UEFI specification has\n-// quite detailed sections on the ABI of all the supported target architectures. In almost all\n-// cases it simply follows what Microsoft Windows does. Hence, whenever in doubt, see the MSDN\n-// documentation.\n-// UEFI uses COFF/PE32+ format for binaries. All binaries must be statically linked. No dynamic\n-// linker is supported. As native to COFF, binaries are position-dependent, but will be relocated\n-// by the loader if the pre-chosen memory location is already in use.\n-// UEFI forbids running code on anything but the boot-CPU. No interrupts are allowed other than\n-// the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n-// code runs in the same environment, no process separation is supported.\n-\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n-use std::default::Default;\n-\n-pub fn opts() -> TargetOptions {\n-    let mut pre_link_args = LinkArgs::new();\n-\n-    pre_link_args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Link),\n-        vec![\n-            // Suppress the verbose logo and authorship debugging output, which would needlessly\n-            // clog any log files.\n-            \"/NOLOGO\".to_string(),\n-            // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n-            // non-code sections can be marked as non-executable, including stack pages. In fact,\n-            // firmware might enforce this, so we better let the linker know about this, so it\n-            // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n-            // constructs and alike).\n-            \"/NXCOMPAT\".to_string(),\n-            // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets\n-            // must be freestanding.\n-            \"/nodefaultlib\".to_string(),\n-            // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n-            // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n-            // spec.\n-            \"/entry:efi_main\".to_string(),\n-            // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n-            // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n-            // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n-            // which is very likely the most common option. Individual projects can override this\n-            // with custom linker flags.\n-            // The subsystem-type only has minor effects on the application. It defines the memory\n-            // regions the application is loaded into (runtime-drivers need to be put into\n-            // reserved areas), as well as whether a return from the entry-point is treated as\n-            // exit (default for applications).\n-            \"/subsystem:efi_application\".to_string(),\n-        ],\n-    );\n-\n-    TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n-        disable_redzone: true,\n-        exe_suffix: \".efi\".to_string(),\n-        allows_weak_linkage: false,\n-        panic_strategy: PanicStrategy::Abort,\n-        stack_probes: true,\n-        singlethread: true,\n-        emit_debug_gdb_scripts: false,\n-\n-        linker: Some(\"rust-lld\".to_string()),\n-        lld_flavor: LldFlavor::Link,\n-        pre_link_args,\n-\n-        ..Default::default()\n-    }\n-}"}, {"sha": "3f7c78c8e7d47cb79876fd834ba7f83629a91828", "filename": "src/librustc_target/spec/uefi_msvc_base.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_msvc_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -0,0 +1,58 @@\n+// This defines a base target-configuration for native UEFI systems. The UEFI specification has\n+// quite detailed sections on the ABI of all the supported target architectures. In almost all\n+// cases it simply follows what Microsoft Windows does. Hence, whenever in doubt, see the MSDN\n+// documentation.\n+// UEFI uses COFF/PE32+ format for binaries. All binaries must be statically linked. No dynamic\n+// linker is supported. As native to COFF, binaries are position-dependent, but will be relocated\n+// by the loader if the pre-chosen memory location is already in use.\n+// UEFI forbids running code on anything but the boot-CPU. No interrupts are allowed other than\n+// the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n+// code runs in the same environment, no process separation is supported.\n+\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+\n+pub fn opts() -> TargetOptions {\n+    let mut base = super::msvc_base::opts();\n+\n+    let pre_link_args_msvc = vec![\n+        // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n+        // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n+        // spec.\n+        \"/entry:efi_main\".to_string(),\n+        // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n+        // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n+        // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n+        // which is very likely the most common option. Individual projects can override this\n+        // with custom linker flags.\n+        // The subsystem-type only has minor effects on the application. It defines the memory\n+        // regions the application is loaded into (runtime-drivers need to be put into\n+        // reserved areas), as well as whether a return from the entry-point is treated as\n+        // exit (default for applications).\n+        \"/subsystem:efi_application\".to_string(),\n+    ];\n+    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n+\n+    TargetOptions {\n+        disable_redzone: true,\n+        exe_suffix: \".efi\".to_string(),\n+        allows_weak_linkage: false,\n+        panic_strategy: PanicStrategy::Abort,\n+        stack_probes: true,\n+        singlethread: true,\n+        linker: Some(\"rust-lld\".to_string()),\n+        // FIXME: This should likely be `true` inherited from `msvc_base`\n+        // because UEFI follows Windows ABI and uses PE/COFF.\n+        // The `false` is probably causing ABI bugs right now.\n+        is_like_windows: false,\n+        // FIXME: This should likely be `true` inherited from `msvc_base`\n+        // because UEFI follows Windows ABI and uses PE/COFF.\n+        // The `false` is probably causing ABI bugs right now.\n+        is_like_msvc: false,\n+\n+        ..base\n+    }\n+}"}, {"sha": "1b25c51278d4a51653f685935afc975e18fe0a8d", "filename": "src/librustc_target/spec/vxworks_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fvxworks_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut args_crt = LinkArgs::new();"}, {"sha": "33ecb1d0d48ceb28b2b657e2fc3f698069f286fc", "filename": "src/librustc_target/spec/windows_gnu_base.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_gnu_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,5 +1,4 @@\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();", "previous_filename": "src/librustc_target/spec/windows_base.rs"}, {"sha": "77171f8672e8a2b7ea8a26a11604be5db1c04431", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,36 +1,30 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n-use std::default::Default;\n+use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    let pre_args = vec![\"/NOLOGO\".to_string(), \"/NXCOMPAT\".to_string()];\n-    let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Msvc, pre_args.clone());\n-    args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_args);\n+    let base = super::msvc_base::opts();\n \n     TargetOptions {\n-        function_sections: true,\n         dynamic_linking: true,\n-        executables: true,\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n         target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        is_like_msvc: true,\n-        // set VSLANG to 1033 can prevent link.exe from using\n-        // language packs, and avoid generating Non-UTF-8 error\n-        // messages if a link error occurred.\n-        link_env: vec![(\"VSLANG\".to_string(), \"1033\".to_string())],\n-        lld_flavor: LldFlavor::Link,\n-        pre_link_args: args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n+        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n+        // as there's been trouble in the past of linking the C++ standard\n+        // library required by LLVM. This likely needs to happen one day, but\n+        // in general Windows is also a more controlled environment than\n+        // Unix, so it's not necessarily as critical that this be implemented.\n+        //\n+        // Note that there are also some licensing worries about statically\n+        // linking some libraries which require a specific agreement, so it may\n+        // not ever be possible for us to pass this flag.\n+        no_default_libraries: false,\n \n-        ..Default::default()\n+        ..base\n     }\n }"}, {"sha": "dd3b60344be228db161716f3fc57456f695836ec", "filename": "src/librustc_target/spec/windows_uwp_gnu_base.rs", "status": "renamed", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,9 @@\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    let base = super::windows_gnu_base::opts();\n+\n+    // FIXME: Consider adding `-nostdlib` and inheriting from `windows_gnu_base`.\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n         LinkerFlavor::Gcc,\n@@ -14,7 +16,10 @@ pub fn opts() -> TargetOptions {\n         ],\n     );\n \n+    // FIXME: This should be updated for the exception machinery changes from #67502.\n     let mut late_link_args = LinkArgs::new();\n+    let late_link_args_dynamic = LinkArgs::new();\n+    let late_link_args_static = LinkArgs::new();\n     late_link_args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n@@ -33,31 +38,17 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        // FIXME(#13846) this should be enabled for windows\n-        function_sections: false,\n-        linker: Some(\"gcc\".to_string()),\n-        dynamic_linking: true,\n         executables: false,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"lib\".to_string(),\n-        staticlib_suffix: \".a\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        allows_weak_linkage: false,\n+        limit_rdylib_exports: false,\n         pre_link_args,\n-        pre_link_objects_exe: vec![\n-            \"rsbegin.o\".to_string(), // Rust compiler runtime initialization, see rsbegin.rs\n-        ],\n+        // FIXME: Consider adding `-nostdlib` and inheriting from `windows_gnu_base`.\n+        pre_link_objects_exe: vec![\"rsbegin.o\".to_string()],\n+        // FIXME: Consider adding `-nostdlib` and inheriting from `windows_gnu_base`.\n         pre_link_objects_dll: vec![\"rsbegin.o\".to_string()],\n         late_link_args,\n-        post_link_objects: vec![\"rsend.o\".to_string()],\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n-        requires_uwtable: true,\n-        limit_rdylib_exports: false,\n+        late_link_args_dynamic,\n+        late_link_args_static,\n \n-        ..Default::default()\n+        ..base\n     }\n }", "previous_filename": "src/librustc_target/spec/windows_uwp_base.rs"}, {"sha": "04ffa1a0addbeb4b38727a23670c88c4e938145b", "filename": "src/librustc_target/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,37 +1,14 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n+use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Msvc,\n-        vec![\n-            \"/NOLOGO\".to_string(),\n-            \"/NXCOMPAT\".to_string(),\n-            \"/APPCONTAINER\".to_string(),\n-            \"mincore.lib\".to_string(),\n-        ],\n-    );\n+    let mut opts = super::windows_msvc_base::opts();\n \n-    TargetOptions {\n-        function_sections: true,\n-        dynamic_linking: true,\n-        executables: true,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: String::new(),\n-        staticlib_suffix: \".lib\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        is_like_msvc: true,\n-        pre_link_args: args,\n-        crt_static_allows_dylibs: true,\n-        crt_static_respected: true,\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n-        requires_uwtable: true,\n+    let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n+    opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    opts.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n-        ..Default::default()\n-    }\n+    opts\n }"}, {"sha": "eb97fa56814d85c7469439488f9ed7a472d27515", "filename": "src/librustc_target/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_base::opts();\n+    let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}, {"sha": "12edc29330a49057c6cf2c1fc41b3658bf28961b", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -8,7 +8,7 @@\n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::uefi_base::opts();\n+    let mut base = super::uefi_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n \n@@ -28,11 +28,6 @@ pub fn target() -> TargetResult {\n     // places no locality-restrictions, so it fits well here.\n     base.code_model = Some(\"large\".to_string());\n \n-    // UEFI mirrors the calling-conventions used on windows. In case of x86-64 this means small\n-    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n-    // by the UEFI specifications forbid any ABI to return structures.\n-    base.abi_return_struct_as_int = true;\n-\n     Ok(Target {\n         llvm_target: \"x86_64-unknown-windows\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "ad6002f6b89e40fb4fe4526958871be4da67d334", "filename": "src/librustc_target/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::windows_uwp_base::opts();\n+    let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}, {"sha": "3f159fe5e302967faa0416af54cd198e3b4f84db", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -865,9 +865,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &mut self,\n         expr_hir_id: hir::HirId,\n     ) -> Result<(), MethodError<'tcx>> {\n-        if expr_hir_id == hir::DUMMY_HIR_ID {\n-            return Ok(());\n-        }\n         let mut duplicates = FxHashSet::default();\n         let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {"}, {"sha": "ca6bd21fefd39aa276b4fce028f10376722fcbca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -838,7 +838,11 @@ fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         return tcx.has_typeck_tables(outer_def_id);\n     }\n \n-    if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n+    // FIXME(#71104) Should really be using just `as_local_hir_id` but\n+    // some `LocalDefId` do not seem to have a corresponding HirId.\n+    if let Some(id) =\n+        def_id.as_local().and_then(|def_id| tcx.hir().opt_local_def_id_to_hir_id(def_id))\n+    {\n         primary_body_of(tcx, id).is_some()\n     } else {\n         false"}, {"sha": "6e50264c098b67adf771f2db5a6e31572e7bee91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -375,18 +375,16 @@ impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n \n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext<'_>) -> Lifetime {\n-        if self.hir_id != hir::DUMMY_HIR_ID {\n-            let def = cx.tcx.named_region(self.hir_id);\n-            match def {\n-                Some(rl::Region::EarlyBound(_, node_id, _))\n-                | Some(rl::Region::LateBound(_, node_id, _))\n-                | Some(rl::Region::Free(_, node_id)) => {\n-                    if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n-                        return lt;\n-                    }\n+        let def = cx.tcx.named_region(self.hir_id);\n+        match def {\n+            Some(rl::Region::EarlyBound(_, node_id, _))\n+            | Some(rl::Region::LateBound(_, node_id, _))\n+            | Some(rl::Region::Free(_, node_id)) => {\n+                if let Some(lt) = cx.lt_substs.borrow().get(&node_id).cloned() {\n+                    return lt;\n                 }\n-                _ => {}\n             }\n+            _ => {}\n         }\n         Lifetime(self.name.ident().to_string())\n     }"}, {"sha": "316cf84152842bc56b8af8567b886584c21f6180", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -580,11 +580,7 @@ pub fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n \n /// Given a type Path, resolve it to a Type using the TyCtxt\n pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n-    if id == hir::DUMMY_HIR_ID {\n-        debug!(\"resolve_type({:?})\", path);\n-    } else {\n-        debug!(\"resolve_type({:?},{:?})\", path, id);\n-    }\n+    debug!(\"resolve_type({:?},{:?})\", path, id);\n \n     let is_generic = match path.res {\n         Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),"}, {"sha": "d0b5c401beabaaedfde007cbf1a24021085ad42e", "filename": "src/test/mir-opt/address-of/rustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -298,7 +298,13 @@ fn address_of_reborrow() -> () {\n         StorageDead(_48);                // bb0[157]: scope 13 at $DIR/address-of.rs:36:25: 36:26\n         FakeRead(ForLet, _47);           // bb0[158]: scope 13 at $DIR/address-of.rs:36:9: 36:10\n         AscribeUserType(_47, o, UserTypeProjection { base: UserType(29), projs: [] }); // bb0[159]: scope 13 at $DIR/address-of.rs:36:12: 36:22\n-        _0 = ();                         // bb0[160]: scope 0 at $DIR/address-of.rs:3:26: 37:2\n+        _0 = const ();                   // bb0[160]: scope 0 at $DIR/address-of.rs:3:26: 37:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/address-of.rs:3:26: 37:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_47);                // bb0[161]: scope 13 at $DIR/address-of.rs:37:1: 37:2\n         StorageDead(_45);                // bb0[162]: scope 12 at $DIR/address-of.rs:37:1: 37:2\n         StorageDead(_44);                // bb0[163]: scope 11 at $DIR/address-of.rs:37:1: 37:2"}, {"sha": "0ed76f230fda22beeba9ffd1ec931750531891e3", "filename": "src/test/mir-opt/address-of/rustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Faddress-of%2Frustc.borrow_and_cast.SimplifyCfg-initial.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -38,7 +38,13 @@ fn borrow_and_cast(_1: i32) -> () {\n         _6 = &raw mut (*_7);             // bb0[15]: scope 2 at $DIR/address-of.rs:44:13: 44:19\n         FakeRead(ForLet, _6);            // bb0[16]: scope 2 at $DIR/address-of.rs:44:9: 44:10\n         StorageDead(_7);                 // bb0[17]: scope 2 at $DIR/address-of.rs:44:31: 44:32\n-        _0 = ();                         // bb0[18]: scope 0 at $DIR/address-of.rs:41:32: 45:2\n+        _0 = const ();                   // bb0[18]: scope 0 at $DIR/address-of.rs:41:32: 45:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/address-of.rs:41:32: 45:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // bb0[19]: scope 2 at $DIR/address-of.rs:45:1: 45:2\n         StorageDead(_4);                 // bb0[20]: scope 1 at $DIR/address-of.rs:45:1: 45:2\n         StorageDead(_2);                 // bb0[21]: scope 0 at $DIR/address-of.rs:45:1: 45:2"}, {"sha": "217d080be4fd9e6c438e8e47a2ea76c4e1163618", "filename": "src/test/mir-opt/array-index-is-temporary/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -82,7 +82,13 @@ fn main() -> () {\n         _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n         StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n         StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n-        _0 = ();                         // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+        _0 = const ();                   // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:12:11: 17:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2"}, {"sha": "c75acef2a27b0d8a33367bf4f11d8e95a58aa57a", "filename": "src/test/mir-opt/array-index-is-temporary/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -82,7 +82,13 @@ fn main() -> () {\n         _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n         StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n         StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n-        _0 = ();                         // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+        _0 = const ();                   // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:12:11: 17:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n         StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2"}, {"sha": "86ee1be6f7404644aabf327f18270e686c50f441", "filename": "src/test/mir-opt/basic_assignment/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment%2Frustc.main.SimplifyCfg-initial.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -72,7 +72,13 @@ fn main() -> () {\n \n     bb6: {\n         StorageDead(_6);                 // bb6[0]: scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-        _0 = ();                         // bb6[1]: scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n+        _0 = const ();                   // bb6[1]: scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/basic_assignment.rs:10:11: 24:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_5) -> [return: bb7, unwind: bb3]; // bb6[2]: scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n "}, {"sha": "aef0da9d6f09857e5ecd02938b9fe7cf075eda46", "filename": "src/test/mir-opt/box_expr/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr%2Frustc.main.ElaborateDrops.before.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -53,7 +53,13 @@ fn main() -> () {\n     bb5: {\n         StorageDead(_4);                 // bb5[0]: scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // bb5[1]: scope 1 at $DIR/box_expr.rs:8:12: 8:13\n-        _0 = ();                         // bb5[2]: scope 0 at $DIR/box_expr.rs:6:11: 9:2\n+        _0 = const ();                   // bb5[2]: scope 0 at $DIR/box_expr.rs:6:11: 9:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:6:11: 9:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_1) -> bb8;                 // bb5[3]: scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n "}, {"sha": "84f4e5bfd633e0850c828df5d76b7106ea8b3af5", "filename": "src/test/mir-opt/byte_slice/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -34,7 +34,13 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:6:19: 6:23\n                                          // + literal: Const { ty: u8, val: Value(Scalar(0x78)) }\n-        _0 = ();                         // bb0[4]: scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n+        _0 = const ();                   // bb0[4]: scope 0 at $DIR/byte_slice.rs:4:11: 7:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/byte_slice.rs:4:11: 7:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // bb0[5]: scope 1 at $DIR/byte_slice.rs:7:1: 7:2\n         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/byte_slice.rs:7:1: 7:2\n         return;                          // bb0[7]: scope 0 at $DIR/byte_slice.rs:7:2: 7:2"}, {"sha": "2247b8e155a4bc7045dc70d197d23e46d904f354", "filename": "src/test/mir-opt/const_allocation/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -18,7 +18,13 @@ fn main() -> () {\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        _0 = ();                         // bb0[6]: scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/const_allocation.rs:7:11: 9:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb0[7]: scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n     }\n }"}, {"sha": "d6cca185ab0f7d237c8c449ba096c9b0dacd2193", "filename": "src/test/mir-opt/const_allocation/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -18,7 +18,13 @@ fn main() -> () {\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n-        _0 = ();                         // bb0[6]: scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation.rs:7:11: 9:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/const_allocation.rs:7:11: 9:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb0[7]: scope 0 at $DIR/const_allocation.rs:9:2: 9:2\n     }\n }"}, {"sha": "4105d673218a08d6137f983cd406aaa041a1b88d", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -18,7 +18,13 @@ fn main() -> () {\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        _0 = ();                         // bb0[6]: scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/const_allocation2.rs:4:11: 6:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb0[7]: scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n     }\n }"}, {"sha": "e61f0a8b69fa72b420194cc9368fda4721081ddb", "filename": "src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -18,7 +18,13 @@ fn main() -> () {\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n-        _0 = ();                         // bb0[6]: scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation2.rs:4:11: 6:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/const_allocation2.rs:4:11: 6:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb0[7]: scope 0 at $DIR/const_allocation2.rs:6:2: 6:2\n     }\n }"}, {"sha": "323134553c195a25f03e3ef5db2182f2da878fd2", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -18,7 +18,13 @@ fn main() -> () {\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        _0 = ();                         // bb0[6]: scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/const_allocation3.rs:4:11: 6:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb0[7]: scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n     }\n }"}, {"sha": "952fe8336cd0ea6a43484b3cb3c50228a7f1f816", "filename": "src/test/mir-opt/const_allocation3/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -18,7 +18,13 @@ fn main() -> () {\n         _1 = (*_2);                      // bb0[3]: scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // bb0[4]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // bb0[5]: scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n-        _0 = ();                         // bb0[6]: scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/const_allocation3.rs:4:11: 6:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/const_allocation3.rs:4:11: 6:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb0[7]: scope 0 at $DIR/const_allocation3.rs:6:2: 6:2\n     }\n }"}, {"sha": "50e6cfc37eea3adf31dccaa3071aaf673a0034e9", "filename": "src/test/mir-opt/const_prop/aggregate/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -54,7 +54,13 @@\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_2);                 // bb0[6]: scope 0 at $DIR/aggregate.rs:5:27: 5:28\n           StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/aggregate.rs:5:28: 5:29\n-          _0 = ();                         // bb0[8]: scope 0 at $DIR/aggregate.rs:4:11: 6:2\n+          _0 = const ();                   // bb0[8]: scope 0 at $DIR/aggregate.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/aggregate.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/aggregate.rs:6:1: 6:2\n           return;                          // bb0[10]: scope 0 at $DIR/aggregate.rs:6:2: 6:2\n       }"}, {"sha": "474d50100b03a61a144531f08f7544a0a3920e25", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -84,7 +84,13 @@\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n           StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+          _0 = const ();                   // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:6:1: 6:2\n           return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }"}, {"sha": "b3d353bd48780f5bc674e4b4791ca6067b437eb6", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -84,7 +84,13 @@\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n           StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n-          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+          _0 = const ();                   // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:6:1: 6:2\n           return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }"}, {"sha": "bf5aff0cf4699749d5139571c40715e0a8fe9c98", "filename": "src/test/mir-opt/const_prop/boxes/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -44,7 +44,13 @@\n   \n       bb2: {\n           StorageDead(_3);                 // bb2[0]: scope 0 at $DIR/boxes.rs:12:26: 12:27\n-          _0 = ();                         // bb2[1]: scope 0 at $DIR/boxes.rs:11:11: 13:2\n+          _0 = const ();                   // bb2[1]: scope 0 at $DIR/boxes.rs:11:11: 13:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:11:11: 13:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb2[2]: scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // bb2[3]: scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }"}, {"sha": "ca0a309b1b5df4b6b6660ad9b4a0eb2fd4627132", "filename": "src/test/mir-opt/const_prop/cast/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -39,7 +39,13 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/cast.rs:6:13: 6:24\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n-          _0 = ();                         // bb0[4]: scope 0 at $DIR/cast.rs:3:11: 7:2\n+          _0 = const ();                   // bb0[4]: scope 0 at $DIR/cast.rs:3:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/cast.rs:3:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_2);                 // bb0[5]: scope 1 at $DIR/cast.rs:7:1: 7:2\n           StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/cast.rs:7:1: 7:2\n           return;                          // bb0[7]: scope 0 at $DIR/cast.rs:7:2: 7:2"}, {"sha": "762927575f0f3ebf8fa4e68d6d510bd7af86562e", "filename": "src/test/mir-opt/const_prop/checked_add/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -51,7 +51,13 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          _0 = ();                         // bb1[1]: scope 0 at $DIR/checked_add.rs:4:11: 6:2\n+          _0 = const ();                   // bb1[1]: scope 0 at $DIR/checked_add.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/checked_add.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[2]: scope 0 at $DIR/checked_add.rs:6:1: 6:2\n           return;                          // bb1[3]: scope 0 at $DIR/checked_add.rs:6:2: 6:2\n       }"}, {"sha": "d3a6105a8522540f8447f6fff675b5e8bafa23f0", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -42,7 +42,13 @@\n       bb1: {\n           StorageDead(_5);                 // bb1[0]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:11: 8:12\n           StorageDead(_4);                 // bb1[1]: scope 1 at $DIR/const_prop_fails_gracefully.rs:8:12: 8:13\n-          _0 = ();                         // bb1[2]: scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n+          _0 = const ();                   // bb1[2]: scope 0 at $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_prop_fails_gracefully.rs:5:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/const_prop_fails_gracefully.rs:9:1: 9:2\n           return;                          // bb1[4]: scope 0 at $DIR/const_prop_fails_gracefully.rs:9:2: 9:2\n       }"}, {"sha": "cbda5e4ef864af880615ca2339c3dcb3a60ba8e3", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -29,7 +29,13 @@\n       }\n   \n       bb1: {\n-          _0 = ();                         // bb1[0]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+          _0 = const ();                   // bb1[0]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/control-flow-simplification.rs:15:1: 15:2\n           return;                          // bb1[2]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n       }"}, {"sha": "73922b5666905437bf5e28555ff84f2aa6350507", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.PreCodegen.before.mir", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.PreCodegen.before.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -4,6 +4,13 @@ fn hello() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n \n     bb0: {\n-        return;                          // bb0[0]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n+        _0 = const ();                   // bb0[0]: scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/control-flow-simplification.rs:12:5: 14:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/control-flow-simplification.rs:15:2: 15:2\n     }\n }"}, {"sha": "f89d869cab504e4ee250453c95d39f496e667cc7", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -87,7 +87,13 @@\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:6:67: 6:68\n           StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = ();                         // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          _0 = const ();                   // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:5:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:7:1: 7:2\n           return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:7:2: 7:2\n       }"}, {"sha": "06f43db50f486c6c62d70ece7b0b4a7e3d1ddc85", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -87,7 +87,13 @@\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:6:67: 6:68\n           StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:6:68: 6:69\n-          _0 = ();                         // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          _0 = const ();                   // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:5:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:7:1: 7:2\n           return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:7:2: 7:2\n       }"}, {"sha": "4c80d0d1278445a0c067b2d649c2f787e3d05cf2", "filename": "src/test/mir-opt/const_prop/indirect/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -62,7 +62,13 @@\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }\n           StorageDead(_2);                 // bb1[1]: scope 0 at $DIR/indirect.rs:5:28: 5:29\n-          _0 = ();                         // bb1[2]: scope 0 at $DIR/indirect.rs:4:11: 6:2\n+          _0 = const ();                   // bb1[2]: scope 0 at $DIR/indirect.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/indirect.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/indirect.rs:6:1: 6:2\n           return;                          // bb1[4]: scope 0 at $DIR/indirect.rs:6:2: 6:2\n       }"}, {"sha": "76c6759f700adf2ab7fb1d0f81cbef1464755d6f", "filename": "src/test/mir-opt/const_prop/issue-66971/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-66971%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -45,7 +45,13 @@\n       bb1: {\n           StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/issue-66971.rs:16:22: 16:23\n           StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/issue-66971.rs:16:23: 16:24\n-          _0 = ();                         // bb1[2]: scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n+          _0 = const ();                   // bb1[2]: scope 0 at $DIR/issue-66971.rs:15:11: 17:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-66971.rs:15:11: 17:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb1[3]: scope 0 at $DIR/issue-66971.rs:17:2: 17:2\n       }\n   }"}, {"sha": "05e1a615953aefa4b228b239d91e0275acf5eadd", "filename": "src/test/mir-opt/const_prop/issue-67019/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue-67019%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -40,7 +40,13 @@\n       bb1: {\n           StorageDead(_2);                 // bb1[0]: scope 0 at $DIR/issue-67019.rs:11:19: 11:20\n           StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/issue-67019.rs:11:20: 11:21\n-          _0 = ();                         // bb1[2]: scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n+          _0 = const ();                   // bb1[2]: scope 0 at $DIR/issue-67019.rs:10:11: 12:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-67019.rs:10:11: 12:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb1[3]: scope 0 at $DIR/issue-67019.rs:12:2: 12:2\n       }\n   }"}, {"sha": "2868365e9ac8efd2a8be1e03f333259109939201", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -171,7 +171,13 @@\n +                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n-          _0 = ();                         // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+          _0 = const ();                   // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "5e2a8af060be81e79387414b9fd58a1f34cc21b2", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -80,9 +80,16 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        StorageDead(_4);                 // bb0[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        _0 = const ();                   // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_4);                 // bb0[10]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[11]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[13]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "0097d9448c81f570140b86c16831941f731a3715", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -171,7 +171,13 @@\n +                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n           StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n-          _0 = ();                         // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+          _0 = const ();                   // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n           StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2"}, {"sha": "5e2a8af060be81e79387414b9fd58a1f34cc21b2", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -80,9 +80,16 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        StorageDead(_4);                 // bb0[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        _0 = const ();                   // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_4);                 // bb0[10]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[11]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[13]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "d9852539844c9742519bc933fa168834df0f9fa5", "filename": "src/test/mir-opt/const_prop/read_immutable_static/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -60,7 +60,13 @@\n           StorageDead(_2);                 // bb0[11]: scope 0 at $DIR/read_immutable_static.rs:7:21: 7:22\n           StorageDead(_5);                 // bb0[12]: scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n           StorageDead(_3);                 // bb0[13]: scope 0 at $DIR/read_immutable_static.rs:7:22: 7:23\n-          _0 = ();                         // bb0[14]: scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n+          _0 = const ();                   // bb0[14]: scope 0 at $DIR/read_immutable_static.rs:6:11: 8:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/read_immutable_static.rs:6:11: 8:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb0[15]: scope 0 at $DIR/read_immutable_static.rs:8:1: 8:2\n           return;                          // bb0[16]: scope 0 at $DIR/read_immutable_static.rs:8:2: 8:2\n       }"}, {"sha": "591fdaddfccd5b25142230355ae785ac0763d183", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -29,7 +29,13 @@\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n           StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-          _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+          _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb0[8]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n       }\n   }"}, {"sha": "5cd9f43a5c684014f788e1c79f290c1cd9be9225", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -27,15 +27,21 @@\n -         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n -         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n -         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n--         _0 = ();                         // bb0[9]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n--         return;                          // bb0[10]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n+-         _0 = const ();                   // bb0[9]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // bb0[3]: scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n +         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n-+         _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n++         _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         return;                          // bb0[10]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n +         return;                          // bb0[8]: scope 0 at $DIR/ref_deref.rs:6:2: 6:2\n       }\n   }"}, {"sha": "6393bad2993d55ff7d09ee170adc75fef7f12b7a", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -22,7 +22,13 @@\n           _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-          _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+          _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref_project.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n       }\n   }"}, {"sha": "020ad7278c038af50283249c87ad3446b37f560a", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -22,7 +22,14 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n--                                          // ty::Const\n++                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n++         _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n++         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n++         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n++         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n++         _0 = const ();                   // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+                                           // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000005))\n -                                          // mir::Constant\n@@ -33,15 +40,14 @@\n -         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n -         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n -         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n--         _0 = ();                         // bb0[9]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+-         _0 = const ();                   // bb0[9]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n+-                                          // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/ref_deref_project.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         return;                          // bb0[10]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n-+                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n-+         _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-+         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n-+         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-+         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n-+         _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2\n +         return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2\n       }\n   }"}, {"sha": "388ebe08689c2f39cdaf04b71f216c331f897302", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -25,7 +25,13 @@\n           _1 = move _2 as *const fn() (Misc); // bb0[6]: scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n           StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41\n           StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/reify_fn_ptr.rs:4:41: 4:42\n-          _0 = ();                         // bb0[9]: scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n+          _0 = const ();                   // bb0[9]: scope 0 at $DIR/reify_fn_ptr.rs:3:11: 5:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/reify_fn_ptr.rs:3:11: 5:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb0[10]: scope 0 at $DIR/reify_fn_ptr.rs:5:2: 5:2\n       }\n   }"}, {"sha": "921de794722533b2d8784400aac3384313daf843", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -80,7 +80,13 @@\n           StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:6:31: 6:32\n           StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n           StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          _0 = ();                         // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+          _0 = const ();                   // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:5:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:7:1: 7:2\n           return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }"}, {"sha": "361ee4933788e4603e34fb2825b5a21f7db14522", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -80,7 +80,13 @@\n           StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:6:31: 6:32\n           StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n           StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n-          _0 = ();                         // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+          _0 = const ();                   // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:5:11: 7:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:7:1: 7:2\n           return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }"}, {"sha": "018180954553dc97fc1150a97cc4a460f4258df0", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -76,7 +76,13 @@\n           StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          _0 = ();                         // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+          _0 = const ();                   // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }"}, {"sha": "f1379446d7ad76e84fe2c02e7d986536eba08ab5", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -76,7 +76,13 @@\n           StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n           StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n-          _0 = ();                         // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+          _0 = const ();                   // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }"}, {"sha": "16bdb7d0a992180e587652254551c2f97f3aa2b6", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.bar.CopyPropagation.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.bar.CopyPropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -30,7 +30,13 @@\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:17:5: 17:10\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }\n-          nop;                             // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n+          _0 = const ();                   // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:15:19: 18:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:15:19: 18:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb1[4]: scope 0 at $DIR/copy_propagation_arg.rs:18:2: 18:2\n       }\n   }"}, {"sha": "7df995c990a30f6d961a919ed3d1dd207851a8cf", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.baz.CopyPropagation.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.baz.CopyPropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -11,7 +11,13 @@\n           _2 = _1;                         // bb0[1]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n           _1 = move _2;                    // bb0[2]: scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n           StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          nop;                             // bb0[4]: scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n+          _0 = const ();                   // bb0[4]: scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:21:20: 24:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb0[5]: scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n       }\n   }"}, {"sha": "67b58c30f054ad2025826f3a500ff4af1725d25f", "filename": "src/test/mir-opt/copy_propagation_arg/rustc.foo.CopyPropagation.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg%2Frustc.foo.CopyPropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -24,7 +24,13 @@\n           StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n           _1 = move _2;                    // bb1[1]: scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n           StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-          nop;                             // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n+          _0 = const ();                   // bb1[3]: scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:9:19: 12:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb1[4]: scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n       }\n   }"}, {"sha": "50a48f2eee4143376e2f2d53b2a665c16d8f5fe4", "filename": "src/test/mir-opt/generator-storage-dead-unwind/rustc.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind%2Frustc.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -112,7 +112,13 @@ yields ()\n     bb10: {\n         StorageDead(_10);                // bb10[0]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n         StorageDead(_9);                 // bb10[1]: scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = ();                         // bb10[2]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+        _0 = const ();                   // bb10[2]: scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // bb10[3]: scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         StorageDead(_3);                 // bb10[4]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n         drop(_1) -> [return: bb12, unwind: bb1]; // bb10[5]: scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6"}, {"sha": "2e3354699fbaacf84f77fa5f7464da0821e2d585", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -54,7 +54,13 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n \n     bb4: {\n         StorageDead(_8);                 // bb4[0]: scope 1 at $DIR/generator-tiny.rs:22:21: 22:22\n-        _5 = ();                         // bb4[1]: scope 1 at $DIR/generator-tiny.rs:20:14: 23:10\n+        _5 = const ();                   // bb4[1]: scope 1 at $DIR/generator-tiny.rs:20:14: 23:10\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/generator-tiny.rs:20:14: 23:10\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb2;                     // bb4[2]: scope 1 at $DIR/generator-tiny.rs:20:9: 23:10\n     }\n "}, {"sha": "f5d8b84812a3e15f53490aac02a5e0971414c72a", "filename": "src/test/mir-opt/graphviz/rustc.main.mir_map.0.dot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz%2Frustc.main.mir_map.0.dot?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -3,7 +3,7 @@ digraph Mir_0_3 {\n     node [fontname=\"monospace\"];\n     edge [fontname=\"monospace\"];\n     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n+    bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = const ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n     bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n     bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n     bb0__0_3 -> bb2__0_3 [label=\"\"];"}, {"sha": "6983e94ff8d771177392678faee760dde9b062db", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -29,38 +29,46 @@\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1 (cleanup): {\n+-         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-     }\n+- \n+-     bb2: {\n+-         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = const ();                   // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n-+                                          // ty::Const\n+                                           // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n +         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n +         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = ();                         // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++         _0 = const ();                   // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++                                          // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n +         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n-      }\n-  \n-      bb2: {\n--         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = ();                         // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--     }\n-- \n -     bb3: {\n -         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n -         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n--     }\n-- \n++     bb1 (cleanup): {\n++         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      }\n+  \n -     bb4 (cleanup): {\n -         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n@@ -69,6 +77,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++     bb2: {\n +         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n +         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }"}, {"sha": "38ab9ce9926c06d469fada8077b70672eb2bfb16", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -29,38 +29,46 @@\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1 (cleanup): {\n+-         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+-     }\n+- \n+-     bb2: {\n+-         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = const ();                   // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n-+                                          // ty::Const\n+                                           // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000000))\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n +         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n +         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+         _0 = ();                         // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++         _0 = const ();                   // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++                                          // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-into-box-place.rs:7:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n +         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n-      bb1 (cleanup): {\n-          resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n-      }\n-  \n-      bb2: {\n--         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--         _0 = ();                         // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n--     }\n-- \n -     bb3: {\n -         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n -         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n--     }\n-- \n++     bb1 (cleanup): {\n++         resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      }\n+  \n -     bb4 (cleanup): {\n -         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // ty::Const\n@@ -69,6 +77,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++     bb2: {\n +         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n +         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }"}, {"sha": "35c400035a6ab7121e3d6f6ee028bcacf50af492", "filename": "src/test/mir-opt/inline/inline-specialization/rustc.main.Inline.diff", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-specialization%2Frustc.main.Inline.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -25,12 +25,18 @@\n -     }\n - \n -     bb1: {\n--         _0 = ();                         // bb1[0]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n--         StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n--         return;                          // bb1[2]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n+-         _0 = const ();                   // bb1[0]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n +                                          // + span: $DIR/inline-specialization.rs:14:31: 14:34\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000007b)) }\n-+         _0 = ();                         // bb0[2]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n++         _0 = const ();                   // bb0[2]: scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-specialization.rs:4:11: 6:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         StorageDead(_1);                 // bb1[1]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n+-         return;                          // bb1[2]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n +         StorageDead(_1);                 // bb0[3]: scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n +         return;                          // bb0[4]: scope 0 at $DIR/inline-specialization.rs:6:2: 6:2\n       }"}, {"sha": "62d2f8db7a43fdfacb40b01d54c91d930c1e2253", "filename": "src/test/mir-opt/issue-38669/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669%2Frustc.main.SimplifyCfg-initial.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -45,7 +45,13 @@ fn main() -> () {\n     }\n \n     bb5: {\n-        _3 = ();                         // bb5[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+        _3 = const ();                   // bb5[0]: scope 1 at $DIR/issue-38669.rs:7:9: 9:10\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-38669.rs:7:9: 9:10\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // bb5[1]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // bb5[2]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         _1 = const true;                 // bb5[3]: scope 1 at $DIR/issue-38669.rs:10:9: 10:28\n@@ -55,12 +61,24 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-38669.rs:10:24: 10:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        _2 = ();                         // bb5[4]: scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n+        _2 = const ();                   // bb5[4]: scope 1 at $DIR/issue-38669.rs:6:10: 11:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-38669.rs:6:10: 11:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb2;                     // bb5[5]: scope 1 at $DIR/issue-38669.rs:6:5: 11:6\n     }\n \n     bb6: {\n-        _0 = ();                         // bb6[0]: scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n+        _0 = const ();                   // bb6[0]: scope 1 at $DIR/issue-38669.rs:8:13: 8:18\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-38669.rs:8:13: 8:18\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // bb6[1]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_3);                 // bb6[2]: scope 1 at $DIR/issue-38669.rs:9:9: 9:10\n         StorageDead(_1);                 // bb6[3]: scope 0 at $DIR/issue-38669.rs:12:1: 12:2"}, {"sha": "55849b2773290061e7d6fb711d9a540477504ad5", "filename": "src/test/mir-opt/issue-41110/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.main.ElaborateDrops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -85,7 +85,13 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41110.rs:8:27: 8:28\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         StorageDead(_2);                 // bb6[2]: scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _0 = ();                         // bb6[3]: scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n+        _0 = const ();                   // bb6[3]: scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:7:11: 9:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_1);                 // bb6[4]: scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n         return;                          // bb6[5]: scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n     }"}, {"sha": "cc1a49dd24524579b7598590612c81fdda716848", "filename": "src/test/mir-opt/issue-41110/rustc.test.ElaborateDrops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110%2Frustc.test.ElaborateDrops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -87,7 +87,13 @@ fn test() -> () {\n \n     bb8: {\n         StorageDead(_5);                 // bb8[0]: scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        _0 = ();                         // bb8[1]: scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n+        _0 = const ();                   // bb8[1]: scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41110.rs:14:15: 19:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_2) -> [return: bb9, unwind: bb3]; // bb8[2]: scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n "}, {"sha": "ee05bf48d6273fba603185e511c33f52974a0f60", "filename": "src/test/mir-opt/issue-41888/rustc.main.ElaborateDrops.after.mir", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41888%2Frustc.main.ElaborateDrops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -66,7 +66,13 @@ fn main() -> () {\n     }\n \n     bb4: {\n-        _0 = ();                         // bb4[0]: scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        _0 = const ();                   // bb4[0]: scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:8:5: 14:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb11;                    // bb4[1]: scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n@@ -94,7 +100,13 @@ fn main() -> () {\n     }\n \n     bb9: {\n-        _0 = ();                         // bb9[0]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        _0 = const ();                   // bb9[0]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:10:9: 13:10\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb11;                    // bb9[1]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n@@ -108,7 +120,13 @@ fn main() -> () {\n                                          // + span: $DIR/issue-41888.rs:10:21: 10:23\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n         _6 = move ((_1 as F).0: K);      // bb10[2]: scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _0 = ();                         // bb10[3]: scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n+        _0 = const ();                   // bb10[3]: scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41888.rs:10:29: 13:10\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // bb10[4]: scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n         goto -> bb11;                    // bb10[5]: scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }"}, {"sha": "5440d4488bb97c88cebfaa3c833354b569eaa97e", "filename": "src/test/mir-opt/issue-49232/rustc.main.mir_map.0.mir", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232%2Frustc.main.mir_map.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -47,7 +47,13 @@ fn main() -> () {\n     }\n \n     bb6: {\n-        _0 = ();                         // bb6[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        _0 = const ();                   // bb6[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-49232.rs:10:25: 10:30\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb6[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n@@ -73,7 +79,13 @@ fn main() -> () {\n     }\n \n     bb10: {\n-        _4 = ();                         // bb10[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+        _4 = const ();                   // bb10[0]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-49232.rs:10:25: 10:30\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         unreachable;                     // bb10[1]: scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n@@ -99,7 +111,13 @@ fn main() -> () {\n     bb13: {\n         StorageDead(_6);                 // bb13[0]: scope 1 at $DIR/issue-49232.rs:13:21: 13:22\n         StorageDead(_5);                 // bb13[1]: scope 1 at $DIR/issue-49232.rs:13:22: 13:23\n-        _1 = ();                         // bb13[2]: scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n+        _1 = const ();                   // bb13[2]: scope 0 at $DIR/issue-49232.rs:6:10: 14:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-49232.rs:6:10: 14:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // bb13[3]: scope 0 at $DIR/issue-49232.rs:14:5: 14:6\n         goto -> bb1;                     // bb13[4]: scope 0 at $DIR/issue-49232.rs:6:5: 14:6\n     }"}, {"sha": "df05dbabc770d576efb29525daff4aae4089ec09", "filename": "src/test/mir-opt/loop_test/rustc.main.SimplifyCfg-qualify-consts.after.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test%2Frustc.main.SimplifyCfg-qualify-consts.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -35,15 +35,27 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        _1 = ();                         // bb3[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+        _1 = const ();                   // bb3[0]: scope 0 at $DIR/loop_test.rs:10:5: 12:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/loop_test.rs:10:5: 12:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // bb3[1]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // bb3[2]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageLive(_4);                 // bb3[3]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n         goto -> bb5;                     // bb3[4]: scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     }\n \n     bb4: {\n-        _0 = ();                         // bb4[0]: scope 0 at $DIR/loop_test.rs:11:9: 11:15\n+        _0 = const ();                   // bb4[0]: scope 0 at $DIR/loop_test.rs:11:9: 11:15\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/loop_test.rs:11:9: 11:15\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         StorageDead(_1);                 // bb4[2]: scope 0 at $DIR/loop_test.rs:12:5: 12:6\n         return;                          // bb4[3]: scope 0 at $DIR/loop_test.rs:17:2: 17:2"}, {"sha": "a296bd053121c76fe22c9b7110105743d05d1f7a", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -143,7 +143,13 @@ fn full_tested_match() -> () {\n     bb11: {\n         StorageDead(_2);                 // bb11[0]: scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n         StorageDead(_1);                 // bb11[1]: scope 0 at $DIR/match_false_edges.rs:19:6: 19:7\n-        _0 = ();                         // bb11[2]: scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n+        _0 = const ();                   // bb11[2]: scope 0 at $DIR/match_false_edges.rs:14:28: 20:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:14:28: 20:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb11[3]: scope 0 at $DIR/match_false_edges.rs:20:2: 20:2\n     }\n }"}, {"sha": "567e3ebdd93103f639f057b3c228c33ddae58b17", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match2.PromoteTemps.before.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -135,7 +135,13 @@ fn full_tested_match2() -> () {\n     bb11: {\n         StorageDead(_2);                 // bb11[0]: scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n         StorageDead(_1);                 // bb11[1]: scope 0 at $DIR/match_false_edges.rs:30:6: 30:7\n-        _0 = ();                         // bb11[2]: scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n+        _0 = const ();                   // bb11[2]: scope 0 at $DIR/match_false_edges.rs:25:29: 31:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:25:29: 31:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb11[3]: scope 0 at $DIR/match_false_edges.rs:31:2: 31:2\n     }\n }"}, {"sha": "a24fa9dedb39f16232c9bf7c32ef58d42acfea0b", "filename": "src/test/mir-opt/match_false_edges/rustc.main.PromoteTemps.before.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.main.PromoteTemps.before.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -182,7 +182,13 @@ fn main() -> () {\n     bb15: {\n         StorageDead(_2);                 // bb15[0]: scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n         StorageDead(_1);                 // bb15[1]: scope 0 at $DIR/match_false_edges.rs:40:6: 40:7\n-        _0 = ();                         // bb15[2]: scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n+        _0 = const ();                   // bb15[2]: scope 0 at $DIR/match_false_edges.rs:34:11: 41:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_false_edges.rs:34:11: 41:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb15[3]: scope 0 at $DIR/match_false_edges.rs:41:2: 41:2\n     }\n }"}, {"sha": "3236b3bcc738f8560f5c38be983c8563842b2a45", "filename": "src/test/mir-opt/match_test/rustc.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test%2Frustc.main.SimplifyCfg-initial.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -158,7 +158,13 @@ fn main() -> () {\n \n     bb14: {\n         StorageDead(_3);                 // bb14[0]: scope 2 at $DIR/match_test.rs:17:6: 17:7\n-        _0 = ();                         // bb14[1]: scope 0 at $DIR/match_test.rs:6:11: 18:2\n+        _0 = const ();                   // bb14[1]: scope 0 at $DIR/match_test.rs:6:11: 18:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/match_test.rs:6:11: 18:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_2);                 // bb14[2]: scope 1 at $DIR/match_test.rs:18:1: 18:2\n         StorageDead(_1);                 // bb14[3]: scope 0 at $DIR/match_test.rs:18:1: 18:2\n         return;                          // bb14[4]: scope 0 at $DIR/match_test.rs:18:2: 18:2"}, {"sha": "7d396c3f1fbd3230c1f4659d4711ba3fe5a51f73", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -137,13 +137,25 @@ fn main() -> () {\n     bb6: {\n         StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:17: 19:18\n         StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:18: 19:19\n-        _0 = ();                         // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:18:13: 20:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n \n     bb7: {\n         StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = ();                         // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:20:12: 22:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n "}, {"sha": "4a285d035be53f25a2d2819f10ceb0b93ee8fd66", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -137,13 +137,25 @@ fn main() -> () {\n     bb6: {\n         StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:17: 19:18\n         StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:18: 19:19\n-        _0 = ();                         // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:18:13: 20:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n \n     bb7: {\n         StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = ();                         // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:20:12: 22:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n "}, {"sha": "e43e37feba743515e83933b393dff9acbf917b3e", "filename": "src/test/mir-opt/no-spurious-drop-after-call/rustc.main.ElaborateDrops.before.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call%2Frustc.main.ElaborateDrops.before.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -48,7 +48,13 @@ fn main() -> () {\n         StorageDead(_2);                 // bb3[0]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n         StorageDead(_4);                 // bb3[1]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n         StorageDead(_1);                 // bb3[2]: scope 0 at $DIR/no-spurious-drop-after-call.rs:9:35: 9:36\n-        _0 = ();                         // bb3[3]: scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n+        _0 = const ();                   // bb3[3]: scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb3[4]: scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n "}, {"sha": "cea10872942982865bdceed3d00e7ce89b8190db", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -61,7 +61,13 @@ fn main() -> () {\n         StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n-        _0 = ();                         // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+        _0 = const ();                   // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "432f91d91e576f6020868bb57da6a29a23cf6326", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -61,7 +61,13 @@ fn main() -> () {\n         StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n         StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n-        _0 = ();                         // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+        _0 = const ();                   // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }"}, {"sha": "727c271a47832bf4f70870a13d7a6f19723e4474", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -125,7 +125,13 @@ fn main() -> () {\n         Retag([raw] _12);                // bb4[14]: scope 4 at $DIR/retag.rs:36:18: 36:19\n         _11 = _12;                       // bb4[15]: scope 4 at $DIR/retag.rs:36:18: 36:29\n         StorageDead(_12);                // bb4[16]: scope 4 at $DIR/retag.rs:36:29: 36:30\n-        _2 = ();                         // bb4[17]: scope 1 at $DIR/retag.rs:31:5: 37:6\n+        _2 = const ();                   // bb4[17]: scope 1 at $DIR/retag.rs:31:5: 37:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:31:5: 37:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_11);                // bb4[18]: scope 4 at $DIR/retag.rs:37:5: 37:6\n         StorageDead(_10);                // bb4[19]: scope 3 at $DIR/retag.rs:37:5: 37:6\n         StorageDead(_8);                 // bb4[20]: scope 2 at $DIR/retag.rs:37:5: 37:6\n@@ -217,7 +223,13 @@ fn main() -> () {\n         Retag([raw] _26);                // bb8[5]: scope 7 at $DIR/retag.rs:50:14: 50:16\n         _25 = _26;                       // bb8[6]: scope 7 at $DIR/retag.rs:50:14: 50:28\n         StorageDead(_26);                // bb8[7]: scope 7 at $DIR/retag.rs:50:28: 50:29\n-        _0 = ();                         // bb8[8]: scope 0 at $DIR/retag.rs:29:11: 51:2\n+        _0 = const ();                   // bb8[8]: scope 0 at $DIR/retag.rs:29:11: 51:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/retag.rs:29:11: 51:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_25);                // bb8[9]: scope 7 at $DIR/retag.rs:51:1: 51:2\n         StorageDead(_15);                // bb8[10]: scope 6 at $DIR/retag.rs:51:1: 51:2\n         StorageDead(_13);                // bb8[11]: scope 1 at $DIR/retag.rs:51:1: 51:2"}, {"sha": "2caa6235d54c00de85278cc4631b84dee33ca61d", "filename": "src/test/mir-opt/simplify-arm-identity/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -57,8 +57,15 @@\n   \n       bb4: {\n           StorageDead(_2);                 // bb4[0]: scope 1 at $DIR/simplify-arm-identity.rs:21:6: 21:7\n-          StorageDead(_1);                 // bb4[1]: scope 0 at $DIR/simplify-arm-identity.rs:22:1: 22:2\n-          return;                          // bb4[2]: scope 0 at $DIR/simplify-arm-identity.rs:22:2: 22:2\n+          _0 = const ();                   // bb4[1]: scope 0 at $DIR/simplify-arm-identity.rs:16:11: 22:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-arm-identity.rs:16:11: 22:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_1);                 // bb4[2]: scope 0 at $DIR/simplify-arm-identity.rs:22:1: 22:2\n+          return;                          // bb4[3]: scope 0 at $DIR/simplify-arm-identity.rs:22:2: 22:2\n       }\n   }\n   "}, {"sha": "8613a812a834b94539a99a9286940b24e97e2e0d", "filename": "src/test/mir-opt/simplify-locals-removes-unused-consts/rustc.main.SimplifyLocals.diff", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-consts%2Frustc.main.SimplifyLocals.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -124,9 +124,17 @@\n       bb2: {\n -         StorageDead(_11);                // bb2[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n -         StorageDead(_8);                 // bb2[1]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n--         return;                          // bb2[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n+-         _0 = const ();                   // bb2[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n +         StorageDead(_2);                 // bb2[0]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:35: 16:36\n-+         return;                          // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n++         _0 = const ();                   // bb2[1]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-consts.rs:12:11: 17:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         return;                          // bb2[3]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n++         return;                          // bb2[2]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:17:2: 17:2\n       }\n   }\n   "}, {"sha": "ecac835fb87ef01869091e55f2f6c6e3ebc4a3a5", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-early-opt.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -33,28 +33,40 @@\n -     bb3: {\n -         nop;                             // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n -         switchInt(_2) -> [false: bb5, otherwise: bb4]; // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+     bb2: {\n-+         _1 = ();                         // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n-+         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n-+         goto -> bb0;                     // bb2[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n-      }\n-  \n+-     }\n+- \n -     bb4: {\n -         goto -> bb6;                     // bb4[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n -     }\n - \n -     bb5: {\n--         _1 = ();                         // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         _1 = const ();                   // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++     bb2: {\n++         _1 = const ();                   // bb2[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n -         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n--     }\n-- \n++         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n++         goto -> bb0;                     // bb2[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n+      }\n+  \n -     bb6: {\n--         _0 = ();                         // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         _0 = const ();                   // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n++     bb3: {\n++         _0 = const ();                   // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_2);                 // bb6[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n -         return;                          // bb6[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n-+     bb3: {\n-+         _0 = ();                         // bb3[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n +         StorageDead(_2);                 // bb3[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         return;                          // bb3[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }"}, {"sha": "7c8bdde5418c2c1f18dccb99af6489282c33c3b7", "filename": "src/test/mir-opt/simplify_cfg/rustc.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg%2Frustc.main.SimplifyCfg-initial.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -54,16 +54,30 @@\n       }\n   \n -     bb7: {\n--         _1 = ();                         // bb7[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n--         goto -> bb12;                    // bb7[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+-         _1 = const ();                   // bb7[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +     bb5: {\n-+         _1 = ();                         // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n++         _1 = const ();                   // bb5[0]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_cfg.rs:7:9: 9:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+-         goto -> bb12;                    // bb7[1]: scope 0 at $DIR/simplify_cfg.rs:7:9: 9:10\n +         StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/simplify_cfg.rs:6:5: 10:6\n       }\n   \n -     bb8: {\n--         _0 = ();                         // bb8[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+-         _0 = const ();                   // bb8[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n++     bb6: {\n++         _0 = const ();                   // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_cfg.rs:8:13: 8:18\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb9;                     // bb8[1]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n -     }\n - \n@@ -87,8 +101,6 @@\n - \n -     bb13: {\n -         return;                          // bb13[0]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n-+     bb6: {\n-+         _0 = ();                         // bb6[0]: scope 0 at $DIR/simplify_cfg.rs:8:13: 8:18\n +         StorageDead(_2);                 // bb6[1]: scope 0 at $DIR/simplify_cfg.rs:10:5: 10:6\n +         return;                          // bb6[2]: scope 0 at $DIR/simplify_cfg.rs:11:2: 11:2\n       }"}, {"sha": "2946eb1cc44e162b5d2e24fc1ad98f4ab208423e", "filename": "src/test/mir-opt/simplify_if/rustc.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if%2Frustc.main.SimplifyBranches-after-const-prop.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -26,7 +26,13 @@\n       }\n   \n       bb1: {\n-          _0 = ();                         // bb1[0]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_if.rs:6:5: 8:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // bb1[1]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   \n@@ -43,7 +49,13 @@\n   \n       bb3: {\n           StorageDead(_2);                 // bb3[0]: scope 0 at $DIR/simplify_if.rs:7:15: 7:16\n-          _0 = ();                         // bb3[1]: scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n+          _0 = const ();                   // bb3[1]: scope 0 at $DIR/simplify_if.rs:6:14: 8:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_if.rs:6:14: 8:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb4;                     // bb3[2]: scope 0 at $DIR/simplify_if.rs:6:5: 8:6\n       }\n   "}, {"sha": "1c83bb13425def3c7c5501db236940996655a0cb", "filename": "src/test/mir-opt/simplify_match/rustc.main.SimplifyBranches-after-copy-prop.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match%2Frustc.main.SimplifyBranches-after-copy-prop.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -26,7 +26,13 @@\n       }\n   \n       bb1: {\n-          nop;                             // bb1[0]: scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n+          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify_match.rs:8:18: 8:20\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb3;                     // bb1[1]: scope 0 at $DIR/simplify_match.rs:6:5: 9:6\n       }\n   "}, {"sha": "e455a27642d369998d76a75db0a165b41183fc4d", "filename": "src/test/mir-opt/storage_ranges/rustc.main.nll.0.mir", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -54,7 +54,13 @@ fn main() -> () {\n         StorageDead(_5);                 // bb0[9]: scope 1 at $DIR/storage_ranges.rs:6:24: 6:25\n         _3 = &_4;                        // bb0[10]: scope 1 at $DIR/storage_ranges.rs:6:17: 6:25\n         FakeRead(ForLet, _3);            // bb0[11]: scope 1 at $DIR/storage_ranges.rs:6:13: 6:14\n-        _2 = ();                         // bb0[12]: scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n+        _2 = const ();                   // bb0[12]: scope 1 at $DIR/storage_ranges.rs:5:5: 7:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_ranges.rs:5:5: 7:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_4);                 // bb0[13]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_3);                 // bb0[14]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n         StorageDead(_2);                 // bb0[15]: scope 1 at $DIR/storage_ranges.rs:7:5: 7:6\n@@ -67,7 +73,13 @@ fn main() -> () {\n                                          // + span: $DIR/storage_ranges.rs:8:13: 8:14\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n         FakeRead(ForLet, _6);            // bb0[18]: scope 1 at $DIR/storage_ranges.rs:8:9: 8:10\n-        _0 = ();                         // bb0[19]: scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n+        _0 = const ();                   // bb0[19]: scope 0 at $DIR/storage_ranges.rs:3:11: 9:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/storage_ranges.rs:3:11: 9:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         StorageDead(_6);                 // bb0[20]: scope 1 at $DIR/storage_ranges.rs:9:1: 9:2\n         StorageDead(_1);                 // bb0[21]: scope 0 at $DIR/storage_ranges.rs:9:1: 9:2\n         return;                          // bb0[22]: scope 0 at $DIR/storage_ranges.rs:9:2: 9:2"}, {"sha": "b46adadf1016ad16ebc9229a4097b44b1693c469", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_by_subslice.mir_map.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -83,7 +83,13 @@ fn move_out_by_subslice() -> () {\n         FakeRead(ForLet, _1);            // bb9[1]: scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // bb9[2]: scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // bb9[3]: scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        _0 = ();                         // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n+        _0 = const ();                   // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:10:27: 13:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_6) -> [return: bb12, unwind: bb10]; // bb9[5]: scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n "}, {"sha": "851107efe11f258f6c694752d47b33625ac99d98", "filename": "src/test/mir-opt/uniform_array_move_out/rustc.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out%2Frustc.move_out_from_end.mir_map.0.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -83,7 +83,13 @@ fn move_out_from_end() -> () {\n         FakeRead(ForLet, _1);            // bb9[1]: scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // bb9[2]: scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // bb9[3]: scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        _0 = ();                         // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n+        _0 = const ();                   // bb9[4]: scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:4:24: 7:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         drop(_6) -> [return: bb12, unwind: bb10]; // bb9[5]: scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n "}, {"sha": "1ee2297daaca43302eab9c6cf592f833ad14b430", "filename": "src/test/mir-opt/uninhabited-enum/rustc.process_void.SimplifyLocals.after.mir", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited-enum%2Frustc.process_void.SimplifyLocals.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -13,7 +13,14 @@ fn process_void(_1: *const Void) -> () {\n     bb0: {\n         StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/uninhabited-enum.rs:14:8: 14:14\n         _2 = &(*_1);                     // bb0[1]: scope 2 at $DIR/uninhabited-enum.rs:14:26: 14:33\n-        StorageDead(_2);                 // bb0[2]: scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n-        return;                          // bb0[3]: scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n+        _0 = const ();                   // bb0[2]: scope 0 at $DIR/uninhabited-enum.rs:13:41: 17:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uninhabited-enum.rs:13:41: 17:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // bb0[3]: scope 0 at $DIR/uninhabited-enum.rs:17:1: 17:2\n+        return;                          // bb0[4]: scope 0 at $DIR/uninhabited-enum.rs:17:2: 17:2\n     }\n }"}, {"sha": "fba77dfe239efcf1a6e4d0b8ac9a2a545cce27cf", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -64,7 +64,13 @@ fn main() -> () {\n     bb3: {\n         StorageDead(_7);                 // bb3[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n         StorageDead(_6);                 // bb3[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n-        _0 = ();                         // bb3[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+        _0 = const ();                   // bb3[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n         return;                          // bb3[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n     }\n }"}, {"sha": "35842fdaa4e7e9c6145635b7e7dfbb8455f9f808", "filename": "src/test/mir-opt/uninhabited_enum_branching/rustc.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching%2Frustc.main.UninhabitedEnumBranching.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -99,7 +99,13 @@\n       bb7: {\n           StorageDead(_7);                 // bb7[0]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n           StorageDead(_6);                 // bb7[1]: scope 0 at $DIR/uninhabited_enum_branching.rs:29:6: 29:7\n-          _0 = ();                         // bb7[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+          _0 = const ();                   // bb7[2]: scope 0 at $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/uninhabited_enum_branching.rs:19:11: 30:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           return;                          // bb7[3]: scope 0 at $DIR/uninhabited_enum_branching.rs:30:2: 30:2\n       }\n   }"}, {"sha": "d530a9994098347347056013dad9e6f6ea7ba04a", "filename": "src/test/mir-opt/unreachable/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable%2Frustc.main.UnreachablePropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -35,7 +35,13 @@\n       }\n   \n       bb2: {\n-          _0 = ();                         // bb2[0]: scope 0 at $DIR/unreachable.rs:9:5: 19:6\n+          _0 = const ();                   // bb2[0]: scope 0 at $DIR/unreachable.rs:9:5: 19:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable.rs:9:5: 19:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable.rs:20:1: 20:2\n           return;                          // bb2[2]: scope 0 at $DIR/unreachable.rs:20:2: 20:2\n -     }\n@@ -64,7 +70,13 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:15:18: 15:20\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n--         _5 = ();                         // bb4[1]: scope 2 at $DIR/unreachable.rs:14:16: 16:10\n+-         _5 = const ();                   // bb4[1]: scope 2 at $DIR/unreachable.rs:14:16: 16:10\n+-                                          // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:14:16: 16:10\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // bb4[2]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - \n@@ -76,7 +88,13 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/unreachable.rs:13:18: 13:20\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n--         _5 = ();                         // bb5[1]: scope 2 at $DIR/unreachable.rs:12:17: 14:10\n+-         _5 = const ();                   // bb5[1]: scope 2 at $DIR/unreachable.rs:12:17: 14:10\n+-                                          // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:12:17: 14:10\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // bb5[2]: scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -     }\n - "}, {"sha": "2b3ab80fa0f812af59fb0a454aad6c7ce568fe62", "filename": "src/test/mir-opt/unreachable_asm/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm%2Frustc.main.UnreachablePropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -37,7 +37,13 @@\n       }\n   \n       bb2: {\n-          _0 = ();                         // bb2[0]: scope 0 at $DIR/unreachable_asm.rs:11:5: 23:6\n+          _0 = const ();                   // bb2[0]: scope 0 at $DIR/unreachable_asm.rs:11:5: 23:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:11:5: 23:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n           return;                          // bb2[2]: scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n       }\n@@ -66,7 +72,13 @@\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:17:18: 17:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          _5 = ();                         // bb4[1]: scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n+          _5 = const ();                   // bb4[1]: scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:16:16: 18:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb6;                     // bb4[2]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n@@ -78,7 +90,13 @@\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:15:18: 15:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n-          _5 = ();                         // bb5[1]: scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n+          _5 = const ();                   // bb5[1]: scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:14:17: 16:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           goto -> bb6;                     // bb5[2]: scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n       }\n   \n@@ -87,7 +105,13 @@\n           StorageDead(_5);                 // bb6[1]: scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n           StorageLive(_7);                 // bb6[2]: scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb6[3]: scope 3 at $DIR/unreachable_asm.rs:21:18: 21:35\n-          _7 = ();                         // bb6[4]: scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n+          _7 = const ();                   // bb6[4]: scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm.rs:21:9: 21:37\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_7);                 // bb6[5]: scope 2 at $DIR/unreachable_asm.rs:21:36: 21:37\n           StorageLive(_8);                 // bb6[6]: scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n           unreachable;                     // bb6[7]: scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17"}, {"sha": "c3760f6a7fccf55533817ef80dfbe72de9954353", "filename": "src/test/mir-opt/unreachable_asm_2/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2%2Frustc.main.UnreachablePropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -40,7 +40,13 @@\n       }\n   \n       bb2: {\n-          _0 = ();                         // bb2[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:5: 25:6\n+          _0 = const ();                   // bb2[0]: scope 0 at $DIR/unreachable_asm_2.rs:11:5: 25:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:11:5: 25:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n           return;                          // bb2[2]: scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n       }\n@@ -64,7 +70,13 @@\n       bb4: {\n           StorageLive(_8);                 // bb4[0]: scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb4[1]: scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:39\n-          _8 = ();                         // bb4[2]: scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+          _8 = const ();                   // bb4[2]: scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:20:13: 20:41\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_8);                 // bb4[3]: scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n           _4 = const 42i32;                // bb4[4]: scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n                                            // ty::Const\n@@ -73,15 +85,27 @@\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:21:18: 21:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          _5 = ();                         // bb4[5]: scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n+          _5 = const ();                   // bb4[5]: scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:18:16: 22:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // bb4[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n +         unreachable;                     // bb4[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n       }\n   \n       bb5: {\n           StorageLive(_7);                 // bb5[0]: scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n           llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // bb5[1]: scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:39\n-          _7 = ();                         // bb5[2]: scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+          _7 = const ();                   // bb5[2]: scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:16:13: 16:41\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_7);                 // bb5[3]: scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n           _4 = const 21i32;                // bb5[4]: scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n                                            // ty::Const\n@@ -90,7 +114,13 @@\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:17:18: 17:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000015)) }\n-          _5 = ();                         // bb5[5]: scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n+          _5 = const ();                   // bb5[5]: scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_asm_2.rs:14:17: 18:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // bb5[6]: scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n -     }\n - "}, {"sha": "2fe0c8dc1e7856ba7608a329a16a6eb509abeb8b", "filename": "src/test/mir-opt/unreachable_diverging/rustc.main.UnreachablePropagation.diff", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging%2Frustc.main.UnreachablePropagation.diff?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -42,7 +42,13 @@\n       }\n   \n       bb2: {\n-          _0 = ();                         // bb2[0]: scope 1 at $DIR/unreachable_diverging.rs:14:5: 19:6\n+          _0 = const ();                   // bb2[0]: scope 1 at $DIR/unreachable_diverging.rs:14:5: 19:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable_diverging.rs:14:5: 19:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n           StorageDead(_1);                 // bb2[1]: scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           StorageDead(_2);                 // bb2[2]: scope 0 at $DIR/unreachable_diverging.rs:20:1: 20:2\n           return;                          // bb2[3]: scope 0 at $DIR/unreachable_diverging.rs:20:2: 20:2\n@@ -59,14 +65,20 @@\n       }\n   \n       bb4: {\n--         _5 = ();                         // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         _5 = const ();                   // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n++         _5 = const loop_forever() -> bb5; // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+                                           // ty::Const\n+-                                          // + ty: ()\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable_diverging.rs:15:9: 17:10\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // bb4[1]: scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n -     bb5: {\n -         _5 = const loop_forever() -> bb6; // bb5[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-+         _5 = const loop_forever() -> bb5; // bb4[0]: scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-                                           // ty::Const\n+-                                          // ty::Const\n                                            // + ty: fn() {loop_forever}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant"}, {"sha": "0ac7989166ee04d7d6cac2e60e9f441d64ed91aa", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df768c5c8fcb361c4dc94b4c776d6a78c12862e1/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=df768c5c8fcb361c4dc94b4c776d6a78c12862e1", "patch": "@@ -23,40 +23,58 @@ fn while_loop(_1: bool) -> () {\n \n     bb1: {\n         StorageDead(_3);                 // bb1[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n-        switchInt(_2) -> [false: bb6, otherwise: bb2]; // bb1[1]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        switchInt(_2) -> [false: bb2, otherwise: bb3]; // bb1[1]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb2: {\n-        StorageLive(_4);                 // bb2[0]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n-        StorageLive(_5);                 // bb2[1]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _5 = _1;                         // bb2[2]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n-        _4 = const get_bool(move _5) -> bb3; // bb2[3]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        _0 = const ();                   // bb2[0]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n                                          // ty::Const\n-                                         // + ty: fn(bool) -> bool {get_bool}\n+                                         // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/while-storage.rs:11:12: 11:20\n-                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n+                                         // + span: $DIR/while-storage.rs:10:5: 14:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        goto -> bb7;                     // bb2[1]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb3: {\n-        StorageDead(_5);                 // bb3[0]: scope 0 at $DIR/while-storage.rs:11:22: 11:23\n-        switchInt(_4) -> [false: bb4, otherwise: bb5]; // bb3[1]: scope 0 at $DIR/while-storage.rs:11:9: 13:10\n+        StorageLive(_4);                 // bb3[0]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+        StorageLive(_5);                 // bb3[1]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+        _5 = _1;                         // bb3[2]: scope 0 at $DIR/while-storage.rs:11:21: 11:22\n+        _4 = const get_bool(move _5) -> bb4; // bb3[3]: scope 0 at $DIR/while-storage.rs:11:12: 11:23\n+                                         // ty::Const\n+                                         // + ty: fn(bool) -> bool {get_bool}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while-storage.rs:11:12: 11:20\n+                                         // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        StorageDead(_4);                 // bb4[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n-        goto -> bb0;                     // bb4[2]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n+        StorageDead(_5);                 // bb4[0]: scope 0 at $DIR/while-storage.rs:11:22: 11:23\n+        switchInt(_4) -> [false: bb5, otherwise: bb6]; // bb4[1]: scope 0 at $DIR/while-storage.rs:11:9: 13:10\n     }\n \n     bb5: {\n         StorageDead(_4);                 // bb5[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        goto -> bb6;                     // bb5[1]: scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+        StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        goto -> bb0;                     // bb5[2]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // bb6[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n-        return;                          // bb6[1]: scope 0 at $DIR/while-storage.rs:15:2: 15:2\n+        _0 = const ();                   // bb6[0]: scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while-storage.rs:12:13: 12:18\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_4);                 // bb6[1]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n+        goto -> bb7;                     // bb6[2]: scope 0 at $DIR/while-storage.rs:12:13: 12:18\n+    }\n+\n+    bb7: {\n+        StorageDead(_2);                 // bb7[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        return;                          // bb7[1]: scope 0 at $DIR/while-storage.rs:15:2: 15:2\n     }\n }"}]}