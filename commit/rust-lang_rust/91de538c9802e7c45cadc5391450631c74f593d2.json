{"sha": "91de538c9802e7c45cadc5391450631c74f593d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGU1MzhjOTgwMmU3YzQ1Y2FkYzUzOTE0NTA2MzFjNzRmNTkzZDI=", "commit": {"author": {"name": "Jason Toffaletti", "email": "jason@topsy.com", "date": "2013-11-11T21:33:43Z"}, "committer": {"name": "Jason Toffaletti", "email": "jason@topsy.com", "date": "2013-11-13T22:44:50Z"}, "message": "add rust_trylock_little_lock\n\nTry to acquire lock and succeed only if lock is not already held.\nUses TryEnterCriticalSection or pthread_mutex_trylock.", "tree": {"sha": "9d27e1bca85ec26ee67d489c95d3c7ce5b513b49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d27e1bca85ec26ee67d489c95d3c7ce5b513b49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91de538c9802e7c45cadc5391450631c74f593d2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91de538c9802e7c45cadc5391450631c74f593d2", "html_url": "https://github.com/rust-lang/rust/commit/91de538c9802e7c45cadc5391450631c74f593d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91de538c9802e7c45cadc5391450631c74f593d2/comments", "author": {"login": "toffaletti", "id": 145012, "node_id": "MDQ6VXNlcjE0NTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/145012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffaletti", "html_url": "https://github.com/toffaletti", "followers_url": "https://api.github.com/users/toffaletti/followers", "following_url": "https://api.github.com/users/toffaletti/following{/other_user}", "gists_url": "https://api.github.com/users/toffaletti/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffaletti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffaletti/subscriptions", "organizations_url": "https://api.github.com/users/toffaletti/orgs", "repos_url": "https://api.github.com/users/toffaletti/repos", "events_url": "https://api.github.com/users/toffaletti/events{/privacy}", "received_events_url": "https://api.github.com/users/toffaletti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toffaletti", "id": 145012, "node_id": "MDQ6VXNlcjE0NTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/145012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffaletti", "html_url": "https://github.com/toffaletti", "followers_url": "https://api.github.com/users/toffaletti/followers", "following_url": "https://api.github.com/users/toffaletti/following{/other_user}", "gists_url": "https://api.github.com/users/toffaletti/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffaletti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffaletti/subscriptions", "organizations_url": "https://api.github.com/users/toffaletti/orgs", "repos_url": "https://api.github.com/users/toffaletti/repos", "events_url": "https://api.github.com/users/toffaletti/events{/privacy}", "received_events_url": "https://api.github.com/users/toffaletti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2a89d97f72aa6f1b1fc9849c4322f294747e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2a89d97f72aa6f1b1fc9849c4322f294747e12", "html_url": "https://github.com/rust-lang/rust/commit/2b2a89d97f72aa6f1b1fc9849c4322f294747e12"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "0e1f5fc1bdcfc8211b604389588787906570c991", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91de538c9802e7c45cadc5391450631c74f593d2/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91de538c9802e7c45cadc5391450631c74f593d2/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=91de538c9802e7c45cadc5391450631c74f593d2", "patch": "@@ -13,7 +13,7 @@ use cell::Cell;\n use comm;\n use libc;\n use ptr;\n-use option::*;\n+use option::{Option,Some,None};\n use task;\n use unstable::atomics::{AtomicOption,AtomicUint,Acquire,Release,Relaxed,SeqCst};\n use unstable::finally::Finally;\n@@ -354,6 +354,20 @@ impl LittleLock {\n         }\n     }\n \n+    pub unsafe fn try_lock<T>(&self, f: &fn() -> T) -> Option<T> {\n+        do atomically {\n+            if rust_trylock_little_lock(self.l) {\n+                Some(do (|| {\n+                    f()\n+                }).finally {\n+                    rust_unlock_little_lock(self.l);\n+                })\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+\n     pub unsafe fn signal(&self) {\n         rust_signal_little_lock(self.l);\n     }\n@@ -478,6 +492,7 @@ impl<T:Send> Exclusive<T> {\n extern {\n     fn rust_create_little_lock() -> rust_little_lock;\n     fn rust_destroy_little_lock(lock: rust_little_lock);\n+    fn rust_trylock_little_lock(lock: rust_little_lock) -> bool;\n     fn rust_lock_little_lock(lock: rust_little_lock);\n     fn rust_unlock_little_lock(lock: rust_little_lock);\n     fn rust_signal_little_lock(lock: rust_little_lock);"}, {"sha": "4c1c6a7202a43b77ccfe9f66f7b34f6c42761f3c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=91de538c9802e7c45cadc5391450631c74f593d2", "patch": "@@ -394,6 +394,11 @@ rust_lock_little_lock(lock_and_signal *lock) {\n     lock->lock();\n }\n \n+extern \"C\" bool\n+rust_trylock_little_lock(lock_and_signal *lock) {\n+    return lock->try_lock();\n+}\n+\n extern \"C\" void\n rust_unlock_little_lock(lock_and_signal *lock) {\n     lock->unlock();"}, {"sha": "1f440047d4e3a04dfea02dc8623704bedced19c9", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=91de538c9802e7c45cadc5391450631c74f593d2", "patch": "@@ -37,6 +37,7 @@ rust_dbg_do_nothing\n rust_create_little_lock\n rust_destroy_little_lock\n rust_lock_little_lock\n+rust_trylock_little_lock\n rust_unlock_little_lock\n rust_signal_little_lock\n rust_wait_little_lock"}, {"sha": "fcf8ab5d88b390f98729aafb5e4f0f7f7c5440d8", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=91de538c9802e7c45cadc5391450631c74f593d2", "patch": "@@ -83,6 +83,32 @@ void lock_and_signal::lock() {\n #endif\n }\n \n+bool lock_and_signal::try_lock() {\n+    must_not_have_lock();\n+#if defined(__WIN32__)\n+    if (TryEnterCriticalSection(&_cs)) {\n+#if defined(DEBUG_LOCKS)\n+        _holding_thread = GetCurrentThreadId();\n+#endif\n+        return true;\n+    }\n+#else // non-windows\n+    int trylock = pthread_mutex_trylock(&_mutex);\n+    if (trylock == 0) {\n+#if defined(DEBUG_LOCKS)\n+        _holding_thread = pthread_self();\n+#endif\n+        return true;\n+    } else if (trylock == EBUSY) {\n+        // EBUSY means lock was already held by someone else\n+        return false;\n+    }\n+    // abort on all other errors\n+    CHECKED(trylock);\n+#endif\n+    return false;\n+}\n+\n void lock_and_signal::unlock() {\n     must_have_lock();\n #if defined(DEBUG_LOCKS)"}, {"sha": "45e1f7198516c9cd7537c784e142addfe576d13d", "filename": "src/rt/sync/lock_and_signal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Fsync%2Flock_and_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/91de538c9802e7c45cadc5391450631c74f593d2/src%2Frt%2Fsync%2Flock_and_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.h?ref=91de538c9802e7c45cadc5391450631c74f593d2", "patch": "@@ -43,6 +43,7 @@ class lock_and_signal {\n     virtual ~lock_and_signal();\n \n     void lock();\n+    bool try_lock();\n     void unlock();\n     void wait();\n     void signal();"}]}