{"sha": "03584a2d8c76036bf380cdbb759f3e57033f5301", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTg0YTJkOGM3NjAzNmJmMzgwY2RiYjc1OWYzZTU3MDMzZjUzMDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-12T08:48:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-12T08:54:36Z"}, "message": "Less cfg's", "tree": {"sha": "86a72af0ed146dd222089dc76f41245e509ade1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86a72af0ed146dd222089dc76f41245e509ade1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03584a2d8c76036bf380cdbb759f3e57033f5301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03584a2d8c76036bf380cdbb759f3e57033f5301", "html_url": "https://github.com/rust-lang/rust/commit/03584a2d8c76036bf380cdbb759f3e57033f5301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03584a2d8c76036bf380cdbb759f3e57033f5301/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bffc973da8a7045d6ad5c678eab6fd57ab49ed54", "url": "https://api.github.com/repos/rust-lang/rust/commits/bffc973da8a7045d6ad5c678eab6fd57ab49ed54", "html_url": "https://github.com/rust-lang/rust/commit/bffc973da8a7045d6ad5c678eab6fd57ab49ed54"}], "stats": {"total": 68, "additions": 25, "deletions": 43}, "files": [{"sha": "c3de39fc975393bac260da8a5329929c6c43284d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=03584a2d8c76036bf380cdbb759f3e57033f5301", "patch": "@@ -73,10 +73,7 @@ pub fn compile_input(sess: &Session,\n                      output: &Option<PathBuf>,\n                      addl_plugins: Option<Vec<String>>,\n                      control: &CompileController) -> CompileResult {\n-    #[cfg(feature=\"llvm\")]\n     use rustc_trans::back::write::OngoingCrateTranslation;\n-    #[cfg(not(feature=\"llvm\"))]\n-    type OngoingCrateTranslation = ();\n \n     macro_rules! controller_entry_point {\n         ($point: ident, $tsess: expr, $make_state: expr, $phase_result: expr) => {{\n@@ -393,7 +390,6 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub resolutions: Option<&'a Resolutions>,\n     pub analysis: Option<&'a ty::CrateAnalysis>,\n     pub tcx: Option<TyCtxt<'a, 'tcx, 'tcx>>,\n-    #[cfg(feature=\"llvm\")]\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n \n@@ -420,7 +416,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             resolutions: None,\n             analysis: None,\n             tcx: None,\n-            #[cfg(feature=\"llvm\")]\n             trans: None,\n         }\n     }\n@@ -942,7 +937,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     mir::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_privacy::provide(&mut local_providers);\n-    #[cfg(feature=\"llvm\")]\n     trans::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n@@ -955,7 +949,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);\n-    #[cfg(feature=\"llvm\")]\n     trans::provide(&mut extern_providers);\n     ty::provide_extern(&mut extern_providers);\n     traits::provide_extern(&mut extern_providers);"}, {"sha": "ea7af4e1ae13bdf4740c5bf42320c6a81047f225", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=03584a2d8c76036bf380cdbb759f3e57033f5301", "patch": "@@ -71,8 +71,6 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n-#[cfg(feature=\"llvm\")]\n-use rustc_trans::back::write::{RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::CompileIncomplete;\n@@ -207,6 +205,25 @@ impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n     }\n }\n \n+#[cfg(feature=\"llvm\")]\n+mod rustc_trans {\n+    use rustc::ty::maps::Providers;\n+    pub fn init(_sess: &Session) {}\n+    pub fn enable_llvm_debug() {}\n+    pub fn provide(_providers: &mut Providers) {}\n+    pub struct CrateTranslation(());\n+    pub mod back {\n+        pub mod write {\n+            pub struct OngoingCrateTranslation(());\n+        }\n+    }\n+    mod diagnostics {\n+        register_long_diagnostics! {}\n+    }\n+\n+    pub use diagnostics::DIAGNOSTICS;\n+}\n+\n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n@@ -232,7 +249,6 @@ pub fn run_compiler<'a>(args: &[String],\n     let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n     if sopts.debugging_opts.debug_llvm {\n-        #[cfg(feature=\"llvm\")]\n         rustc_trans::enable_llvm_debug();\n     }\n \n@@ -262,7 +278,6 @@ pub fn run_compiler<'a>(args: &[String],\n     let mut sess = session::build_session_with_codemap(\n         sopts, &dep_graph, input_file_path, descriptions, cstore.clone(), codemap, emitter_dest,\n     );\n-    #[cfg(feature=\"llvm\")]\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n@@ -544,7 +559,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     None,\n                     descriptions.clone(),\n                     cstore.clone());\n-                #[cfg(feature=\"llvm\")]\n                 rustc_trans::init(&sess);\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n@@ -803,15 +817,15 @@ impl RustcDefaultCalls {\n                 PrintRequest::RelocationModels => {\n                     println!(\"Available relocation models:\");\n                     #[cfg(feature=\"llvm\")]\n-                    for &(name, _) in RELOC_MODEL_ARGS.iter() {\n+                    for &(name, _) in rustc_trans::back::write::RELOC_MODEL_ARGS.iter() {\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n                 }\n                 PrintRequest::CodeModels => {\n                     println!(\"Available code models:\");\n                     #[cfg(feature=\"llvm\")]\n-                    for &(name, _) in CODE_GEN_MODEL_ARGS.iter(){\n+                    for &(name, _) in rustc_trans::back::write::CODE_GEN_MODEL_ARGS.iter(){\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n@@ -1285,7 +1299,6 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     all_errors.extend_from_slice(&rustc_borrowck::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_resolve::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_privacy::DIAGNOSTICS);\n-    #[cfg(feature=\"llvm\")]\n     all_errors.extend_from_slice(&rustc_trans::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_const_eval::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_metadata::DIAGNOSTICS);"}, {"sha": "f3f934ccde50f04a41dda9179eaac6d18bb77c93", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=03584a2d8c76036bf380cdbb759f3e57033f5301", "patch": "@@ -114,7 +114,6 @@ fn test_env<F>(source_string: &str,\n                                        diagnostic_handler,\n                                        Rc::new(CodeMap::new(FilePathMapping::empty())),\n                                        cstore.clone());\n-    #[cfg(feature=\"llvm\")]\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let input = config::Input::Str {"}, {"sha": "264158f0de9eeedf986e8e99d388de473f587d06", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03584a2d8c76036bf380cdbb759f3e57033f5301/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=03584a2d8c76036bf380cdbb759f3e57033f5301", "patch": "@@ -8,34 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::session::config::{self, /*NoDebugInfo,*/ OutputFilenames, Input, OutputType};\n-/*use rustc::session::filesearch;\n-use rustc::session::search_paths::PathKind;\n-*/use rustc::session::Session;\n-use rustc::middle::cstore;/*::{self, LinkMeta, NativeLibrary, LibSource, LinkagePreference,\n-                            NativeLibraryKind};*/\n-/*use rustc::middle::dependency_format::Linkage;\n-use rustc::util::common::time;\n-use rustc::util::fs::fix_windows_verbatim_for_gcc;\n-use rustc::dep_graph::{DepKind, DepNode};\n-use rustc::hir::def_id::CrateNum;\n-use rustc::hir::svh::Svh;\n-use rustc_back::tempdir::TempDir;\n-use rustc_back::{PanicStrategy, RelroLevel};\n-use rustc_incremental::IncrementalHashesMap;*/\n-\n-/*use std::ascii;\n-use std::char;\n-use std::env;\n-use std::ffi::OsString;\n-use std::fs;\n-use std::io::{self, Read, Write};\n-use std::mem;\n-*/use std::path::PathBuf;/*{Path, PathBuf};\n-use std::process::Command;\n-use std::str;*/\n+use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n+use rustc::session::Session;\n+use rustc::middle::cstore;\n+use std::path::PathBuf;\n use syntax::ast;\n-//use syntax::attr;\n use syntax_pos::Span;\n \n pub fn find_crate_name(sess: Option<&Session>,"}]}