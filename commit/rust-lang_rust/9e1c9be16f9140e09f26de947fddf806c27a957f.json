{"sha": "9e1c9be16f9140e09f26de947fddf806c27a957f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMWM5YmUxNmY5MTQwZTA5ZjI2ZGU5NDdmZGRmODA2YzI3YTk1N2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-28T23:42:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-29T19:06:15Z"}, "message": "librustc: Make the Drop trait use explicit self", "tree": {"sha": "28510160831f6fe9d33336dd67234f4d3b91c841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28510160831f6fe9d33336dd67234f4d3b91c841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e1c9be16f9140e09f26de947fddf806c27a957f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1c9be16f9140e09f26de947fddf806c27a957f", "html_url": "https://github.com/rust-lang/rust/commit/9e1c9be16f9140e09f26de947fddf806c27a957f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e1c9be16f9140e09f26de947fddf806c27a957f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a282ec26fc7587b94e0d86a003abcf1cfd214c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a282ec26fc7587b94e0d86a003abcf1cfd214c1", "html_url": "https://github.com/rust-lang/rust/commit/5a282ec26fc7587b94e0d86a003abcf1cfd214c1"}], "stats": {"total": 289, "additions": 166, "deletions": 123}, "files": [{"sha": "5c56ed7608f25e46cfd34da2c287929dcf1b4c38", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -25,7 +25,7 @@ pub trait Owned {\n \n #[lang=\"drop\"]\n pub trait Drop {\n-    fn finalize();  // XXX: Rename to \"drop\"? --pcwalton\n+    fn finalize(&self);  // XXX: Rename to \"drop\"? --pcwalton\n }\n \n #[lang=\"add\"]"}, {"sha": "36696594e423c7f8cfd0c594b5555a2e6274bbf8", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -888,7 +888,7 @@ fn with_field_tys<R>(tcx: ty::ctxt,\n         }\n \n         ty::ty_class(did, ref substs) => {\n-            let has_dtor = ty::ty_dtor(tcx, did).is_some();\n+            let has_dtor = ty::ty_dtor(tcx, did).is_present();\n             op(has_dtor, class_items_as_mutable_fields(tcx, did, substs))\n         }\n "}, {"sha": "0a44028c7dfdb70167ed6055f037c82b0ecb7214", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -397,8 +397,14 @@ fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n       }\n       ty::ty_class(did, ref substs) => {\n         // Call the dtor if there is one\n-        do option::map_default(&ty::ty_dtor(bcx.tcx(), did), bcx) |dt_id| {\n-            trans_class_drop(bcx, v, *dt_id, did, substs)\n+        match ty::ty_dtor(bcx.tcx(), did) {\n+            ty::NoDtor => bcx,\n+            ty::LegacyDtor(ref dt_id) => {\n+                trans_class_drop(bcx, v, *dt_id, did, substs, false)\n+            }\n+            ty::TraitDtor(ref dt_id) => {\n+                trans_class_drop(bcx, v, *dt_id, did, substs, true)\n+            }\n         }\n       }\n       _ => bcx\n@@ -410,7 +416,8 @@ fn trans_class_drop(bcx: block,\n                     v0: ValueRef,\n                     dtor_did: ast::def_id,\n                     class_did: ast::def_id,\n-                    substs: &ty::substs) -> block {\n+                    substs: &ty::substs,\n+                    take_ref: bool) -> block {\n     let drop_flag = GEPi(bcx, v0, struct_dtor());\n     do with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) |cx| {\n         let mut bcx = cx;\n@@ -427,7 +434,18 @@ fn trans_class_drop(bcx: block,\n         // just consist of the output pointer and the environment\n         // (self)\n         assert(params.len() == 2);\n-        let self_arg = PointerCast(bcx, v0, params[1]);\n+\n+        // If we need to take a reference to the class (because it's using\n+        // the Drop trait), do so now.\n+        let llval;\n+        if take_ref {\n+            llval = alloca(bcx, val_ty(v0));\n+            Store(bcx, v0, llval);\n+        } else {\n+            llval = v0;\n+        }\n+\n+        let self_arg = PointerCast(bcx, llval, params[1]);\n         let args = ~[bcx.fcx.llretptr, self_arg];\n         Call(bcx, dtor_addr, args);\n \n@@ -465,10 +483,13 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_class(did, ref substs) => {\n         let tcx = bcx.tcx();\n         match ty::ty_dtor(tcx, did) {\n-          Some(dtor) => {\n-            trans_class_drop(bcx, v0, dtor, did, substs)\n+          ty::TraitDtor(dtor) => {\n+            trans_class_drop(bcx, v0, dtor, did, substs, true)\n           }\n-          None => {\n+          ty::LegacyDtor(dtor) => {\n+            trans_class_drop(bcx, v0, dtor, did, substs, false)\n+          }\n+          ty::NoDtor => {\n             // No dtor? Just the default case\n             iter_structural_ty(bcx, v0, t, drop_ty)\n           }"}, {"sha": "6f6a5c52ecdfce88f2b31fb54ee8d1b6ee645654", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -27,7 +27,7 @@ pub fn simplify_type(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n           // Reduce a class type to a record type in which all the fields are\n           // simplified\n           ty::ty_class(did, ref substs) => {\n-            let simpl_fields = (if ty::ty_dtor(tcx, did).is_some() {\n+            let simpl_fields = (if ty::ty_dtor(tcx, did).is_present() {\n                 // remember the drop flag\n                   ~[{ident: syntax::parse::token::special_idents::dtor,\n                      mt: {ty: ty::mk_u8(tcx),"}, {"sha": "9251b31568419922e5392eb7b409cc9696d337e0", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -199,7 +199,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n \n         // include a byte flag if there is a dtor so that we know when we've\n         // been dropped\n-        if ty::ty_dtor(cx.tcx, did) != None {\n+        if ty::ty_dtor(cx.tcx, did).is_present() {\n             common::set_struct_body(llty, ~[T_struct(tys), T_i8()]);\n         } else {\n             common::set_struct_body(llty, ~[T_struct(tys)]);"}, {"sha": "b37fbd9feb456efd35a8377372705f09ea02a2a3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -75,6 +75,7 @@ export enum_variants, substd_enum_variants, enum_is_univariant;\n export trait_methods, store_trait_methods, impl_traits;\n export enum_variant_with_id;\n export ty_dtor;\n+export DtorKind, NoDtor, LegacyDtor, TraitDtor;\n export ty_param_bounds_and_ty;\n export ty_param_substs_and_ty;\n export ty_bool, mk_bool, type_is_bool;\n@@ -1868,7 +1869,7 @@ fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n       }\n       ty_class(did, ref substs) => {\n          // Any class with a dtor needs a drop\n-         ty_dtor(cx, did).is_some() || {\n+         ty_dtor(cx, did).is_present() || {\n              for vec::each(ty::class_items_as_fields(cx, did, substs)) |f| {\n                  if type_needs_drop(cx, f.mt.ty) { accum = true; }\n              }\n@@ -3954,11 +3955,29 @@ fn item_path_str(cx: ctxt, id: ast::def_id) -> ~str {\n     ast_map::path_to_str(item_path(cx, id), cx.sess.parse_sess.interner)\n }\n \n+enum DtorKind {\n+    NoDtor,\n+    LegacyDtor(def_id),\n+    TraitDtor(def_id)\n+}\n+\n+impl DtorKind {\n+    pure fn is_not_present(&const self) -> bool {\n+        match *self {\n+            NoDtor => true,\n+            _ => false\n+        }\n+    }\n+    pure fn is_present(&const self) -> bool {\n+        !self.is_not_present()\n+    }\n+}\n+\n /* If class_id names a class with a dtor, return Some(the dtor's id).\n    Otherwise return none. */\n-fn ty_dtor(cx: ctxt, class_id: def_id) -> Option<def_id> {\n+fn ty_dtor(cx: ctxt, class_id: def_id) -> DtorKind {\n     match cx.destructor_for_type.find(class_id) {\n-        Some(method_def_id) => return Some(method_def_id),\n+        Some(method_def_id) => return TraitDtor(method_def_id),\n         None => {}  // Continue.\n     }\n \n@@ -3968,18 +3987,21 @@ fn ty_dtor(cx: ctxt, class_id: def_id) -> Option<def_id> {\n                node: ast::item_class(@{ dtor: Some(dtor), _ }, _),\n                _\n            }, _)) =>\n-               Some(local_def(dtor.node.id)),\n+               LegacyDtor(local_def(dtor.node.id)),\n            _ =>\n-               None\n+               NoDtor\n        }\n     }\n     else {\n-      csearch::class_dtor(cx.sess.cstore, class_id)\n+      match csearch::class_dtor(cx.sess.cstore, class_id) {\n+        None => NoDtor,\n+        Some(did) => LegacyDtor(did),\n+      }\n     }\n }\n \n fn has_dtor(cx: ctxt, class_id: def_id) -> bool {\n-    ty_dtor(cx, class_id).is_some()\n+    ty_dtor(cx, class_id).is_present()\n }\n \n fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {"}, {"sha": "3ced56e6f508f3e0d18bd33dbac53c78a2168212", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -229,7 +229,7 @@ struct PoisonOnFail {\n }\n \n impl PoisonOnFail : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         /* assert !*self.failed; -- might be false in case of cond.wait() */\n         if task::failing() { *self.failed = true; }\n     }"}, {"sha": "ea247d4bd3fba75c044c0a260ddad74533339a22", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -58,7 +58,7 @@ pub struct Arena {\n }\n \n impl Arena : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             destroy_chunk(&self.head);\n             for list::each(self.chunks) |chunk| {"}, {"sha": "8777592eaccd39658e57f94ecfd52ab42ce62ee1", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -42,11 +42,11 @@ struct DtorRes {\n }\n \n impl DtorRes : Drop {\n-    fn finalize() {\n-    match self.dtor {\n-      option::None => (),\n-      option::Some(f) => f()\n-    }\n+    fn finalize(&self) {\n+        match self.dtor {\n+          option::None => (),\n+          option::Some(f) => f()\n+        }\n     }\n }\n "}, {"sha": "a22e4d674683ba4defcea86c73c2ec483b51ff5c", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -28,7 +28,7 @@ pub struct Future<A> {\n // FIXME(#2829) -- futures should not be copyable, because they close\n // over fn~'s that have pipes and so forth within!\n impl<A> Future<A> : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n priv enum FutureState<A> {"}, {"sha": "2dd0c2b286d8fd9c50e134a7b426d2992ebb13b1", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -30,10 +30,10 @@ struct TcpSocket {\n }\n \n impl TcpSocket : Drop {\n-    fn finalize() {\n-    unsafe {\n-        tear_down_socket_data(self.socket_data)\n-    }\n+    fn finalize(&self) {\n+        unsafe {\n+            tear_down_socket_data(self.socket_data)\n+        }\n     }\n }\n "}, {"sha": "c9981c2fef5c51183c7ec56e18e71959ad340f67", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1137,7 +1137,7 @@ mod big_tests {\n     }\n \n     impl LVal : Drop {\n-        fn finalize() {\n+        fn finalize(&self) {\n             let x = unsafe { task::local_data::local_data_get(self.key) };\n             match x {\n                 Some(@y) => {"}, {"sha": "61201d44d2f8822b60350258a5ac1e8704c253f2", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -153,7 +153,7 @@ struct SemRelease {\n }\n \n impl SemRelease : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         self.sem.release();\n     }\n }\n@@ -170,7 +170,7 @@ struct SemAndSignalRelease {\n }\n \n impl SemAndSignalRelease : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         self.sem.release();\n     }\n }\n@@ -185,7 +185,7 @@ fn SemAndSignalRelease(sem: &r/Sem<~[mut Waitqueue]>)\n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n pub struct Condvar { priv sem: &Sem<~[mut Waitqueue]> }\n \n-impl Condvar : Drop { fn finalize() {} }\n+impl Condvar : Drop { fn finalize(&self) {} }\n \n impl &Condvar {\n     /**\n@@ -257,7 +257,7 @@ impl &Condvar {\n         }\n \n         impl SemAndSignalReacquire : Drop {\n-            fn finalize() {\n+            fn finalize(&self) {\n                 unsafe {\n                     // Needs to succeed, instead of itself dying.\n                     do task::unkillable {\n@@ -607,7 +607,7 @@ struct RWlockReleaseRead {\n }\n \n impl RWlockReleaseRead : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             do task::unkillable {\n                 let mut last_reader = false;\n@@ -641,7 +641,7 @@ struct RWlockReleaseDowngrade {\n }\n \n impl RWlockReleaseDowngrade : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             do task::unkillable {\n                 let mut writer_or_last_reader = false;\n@@ -678,10 +678,10 @@ fn RWlockReleaseDowngrade(lock: &r/RWlock) -> RWlockReleaseDowngrade/&r {\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n pub struct RWlockWriteMode { /* priv */ lock: &RWlock }\n-impl RWlockWriteMode : Drop { fn finalize() {} }\n+impl RWlockWriteMode : Drop { fn finalize(&self) {} }\n /// The \"read permission\" token used for rwlock.write_downgrade().\n pub struct RWlockReadMode  { priv lock: &RWlock }\n-impl RWlockReadMode : Drop { fn finalize() {} }\n+impl RWlockReadMode : Drop { fn finalize(&self) {} }\n \n impl &RWlockWriteMode {\n     /// Access the pre-downgrade rwlock in write mode.\n@@ -993,7 +993,7 @@ mod tests {\n         }\n \n         impl SendOnFailure : Drop {\n-            fn finalize() {\n+            fn finalize(&self) {\n                 self.c.send(());\n             }\n         }"}, {"sha": "b3e5c645edbc1fdd7c870d1e3634cafc8021ab2c", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -12,7 +12,7 @@ struct arc_destruct<T:Const> {\n }\n \n impl<T:Const> arc_destruct<T> : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn arc_destruct<T: Const>(data: int) -> arc_destruct<T> {\n@@ -34,7 +34,7 @@ struct context_res {\n }\n \n impl context_res : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn context_res() -> context_res {"}, {"sha": "15c7cf53e2f6c4195c69aec8a3e61e233112b855", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -12,7 +12,7 @@ struct socket_handle {\n }\n \n impl socket_handle : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         /* c::close(self.sockfd); */\n     }\n }"}, {"sha": "9a78fd346130c5e19dee5e584789e210743b0cb4", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -8,7 +8,7 @@ struct rsrc {\n }\n \n impl rsrc : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         foo(self.x);\n     }\n }"}, {"sha": "36e336d2ad391b504b494da2651cf5a905a6bf9b", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -32,7 +32,7 @@ struct port_ptr<T:Send> {\n }\n \n impl<T:Send> port_ptr<T> : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             debug!(\"in the port_ptr destructor\");\n                do task::unkillable {"}, {"sha": "f2652b10cdc1a818f65ec232963476f23aff7fce", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -45,7 +45,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn r(l: @nillist) -> r {"}, {"sha": "5753a8625829f8e41bd38a65bf5a6a1a19ace31a", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: () }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "2cf08c0139fa0198479ae91f512c294757ae5cf5", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: (), }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "3dd000a1da8f5f8f858d20cbace58ba9305e7cc8", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: (), }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "e7f146e5bd359779701f3adf964f93a9b9479098", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: (), }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "cd5bf5e17f3d0fef5a1b7b8e479df118de81625f", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: (), }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "be016034ff34df5fdbb4502489803bde4a4cf220", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: (), }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "3c1ffbd86d78258b628910899060fd9fb62b6d31", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct X { x: (), }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"destructor runs\");\n     }\n }"}, {"sha": "464d6b1bc0385c9c3c353052cb109bea14a4b493", "filename": "src/test/compile-fail/block-must-not-have-result-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-res.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@\n struct r {}\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         true\n     }\n }"}, {"sha": "cd24a8bb323e6d4b36542f634b8ea2ee9d3e85fd", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct defer {\n }\n \n impl defer : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"%?\", self.x);\n     }\n }"}, {"sha": "eedeac84f8346d0786ebf3e6d472bcc70473830c", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct noncopyable {\n }\n \n impl noncopyable : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"dropped\");\n     }\n }"}, {"sha": "c174a4b50bcc980b512ef75cceedd8b22de80242", "filename": "src/test/compile-fail/cap-clause-illegal-cap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-illegal-cap.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@\n struct foo { x: int, }\n \n impl foo : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn foo(x: int) -> foo {"}, {"sha": "311eecae7db59828adcbee6886148837bd258d0c", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct foo {\n }\n \n impl foo : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn foo(i:int) -> foo {"}, {"sha": "053a4075d2f872a042808cb7fe3cb29dceb947c3", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct X {\n }\n \n impl X : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"value: %s\", self.x);\n     }\n }"}, {"sha": "f3db004da1326964be1d822057e40a13e13b91ba", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n type Foo = @[u8];\n \n impl Foo : Drop {   //~ ERROR the Drop trait may only be implemented\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"kaboom\");\n     }\n }"}, {"sha": "0f78d8e1ae3f1bc244424c146d4df88721a7ddea", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct Foo {\n }\n \n impl Foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"kaboom\");\n     }\n }"}, {"sha": "83464270eb5218c9b9a2e0a3888170b354a953c1", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ trait Bar : Drop {\n }\n \n impl Foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"kaboom\");\n     }\n }"}, {"sha": "a1a156d9ff534f855a54bd2972d6b661b23e68ce", "filename": "src/test/compile-fail/functional-struct-update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct Bar {\n }\n \n impl Bar : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"Goodbye, cruel world\");\n     }\n }"}, {"sha": "a6248c158b72e5a7914ccc2188a60d1079faa9f5", "filename": "src/test/compile-fail/issue-2487-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2487-b.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct socket {\n }\n \n impl socket : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n impl socket {"}, {"sha": "d47d51b2a2b9ad021c4c2ae9de3d6ba09515e969", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ struct foo {\n }\n \n impl foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"Goodbye, World!\");\n         *self.x += 1;\n     }"}, {"sha": "d8d2f82da97bf9336915f028107c8feb35b295d2", "filename": "src/test/compile-fail/issue-2587-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2587-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -9,7 +9,7 @@ struct S {\n }\n \n impl S : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn S(x: int) -> S { S { x: x } }"}, {"sha": "e613114fee54d84116ed039c38ef03b11fbe5a21", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct C {\n }\n \n impl C : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"dropping: %?\", self.x);\n     }\n }"}, {"sha": "ad97377324ce8614c52cc7910a1e4ec683f432ea", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ fn foo<T>() {\n     }\n \n     impl<T> foo<T> : Drop {\n-        fn finalize() {}\n+        fn finalize(&self) {}\n     }\n }\n fn main() { }"}, {"sha": "3c4d70e058bbc5e9ea730ce7d47bc873df7d53a5", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -53,7 +53,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn main() {"}, {"sha": "87f149d3928b4eb8b2a372ee784667c0cf72f5f5", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     }\n \n     impl foo : Drop {\n-        fn finalize() {}\n+        fn finalize(&self) {}\n     }\n \n     fn foo(x: comm::Port<()>) -> foo {"}, {"sha": "0808997676bcaebabca72c602e72d0f4fddd82c9", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn r(x:int) -> r {\n@@ -21,7 +21,7 @@ struct r2 {\n }\n \n impl r2 : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn r2(x:@mut int) -> r2 {"}, {"sha": "ee786370dfb1851d2b7d73e870d71b597b29cc35", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ struct bar {\n }\n \n impl bar : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn bar(x:int) -> bar {"}, {"sha": "dbb57d7ee861705fd85ab90e8188b43e6f2180ad", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n     }\n }"}, {"sha": "01a6c729e7fa1493fd50434008c4722e485a7377", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct my_resource {\n }\n \n impl my_resource : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         log(error, self.x);\n     }\n }"}, {"sha": "bcd7e5b03ab25244c93f4437bd88f0047cc1454c", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,23 +3,23 @@ struct yes0 {\n }\n \n impl yes0 : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n struct yes1 {\n   x: &self/uint,\n }\n \n impl yes1 : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n struct yes2 {\n   x: &foo/uint, //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n impl yes2 : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn main() {}"}, {"sha": "2037358c36d204d8077a99e15a7af4e2d61d5bbe", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ struct Foo {\n }\n \n impl Foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"Goodbye!\");\n     }\n }"}, {"sha": "f42bfea9562e5156f7ced298df6398d090f3d7a3", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ struct Bar {\n }\n \n impl Bar : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n impl Bar : Foo {"}, {"sha": "d9eeced26fe906e7c3dab74e021dd565ec85b467", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn main() {"}, {"sha": "0c3ab53dcc7682920b2a85c8d26a5457142d30ce", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n     }\n }"}, {"sha": "c0e6f2b60c1690dc0fb336cc6a2fde25bcbe9c35", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ struct r {\n fn r(i:int) -> r { r { i: i } }\n \n impl r : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn main() {"}, {"sha": "9ffc10b86ae97e5af7a1f6347b2cc50ea0289aef", "filename": "src/test/run-fail/issue-2061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fissue-2061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fissue-2061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2061.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct R {\n }\n \n impl R : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         let _y = R { b: self.b };\n     }\n }"}, {"sha": "32b45c5396eb4f6bffc509e4aaa55fac2ddd7650", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -26,7 +26,7 @@ struct and_then_get_big_again {\n }\n \n impl and_then_get_big_again : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         fn getbig(i: int) {\n             if i != 0 {\n                 getbig(i - 1);"}, {"sha": "1892be596c1641ae767f19b8014112b4f220c5a9", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -18,7 +18,7 @@ struct and_then_get_big_again {\n }\n \n impl and_then_get_big_again : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         fn getbig(i: int) {\n             if i != 0 {\n                 getbig(i - 1);"}, {"sha": "c5d3161cbf69fc7b3d907cf2163399fe0e815c2e", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -18,7 +18,7 @@ struct and_then_get_big_again {\n }\n \n impl and_then_get_big_again : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn and_then_get_big_again(x:int) -> and_then_get_big_again {"}, {"sha": "45385927566e0e384b195b8f37f68cfb9c65dc11", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -8,7 +8,7 @@ struct r {\n // failed has no effect and the process exits with the\n // runtime's exit code\n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         os::set_exit_status(50);\n     }\n }"}, {"sha": "1c61704bdbe49c589c7e8975a0d306cbdc1edbb4", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -9,7 +9,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             let _v2: ~int = cast::reinterpret_cast(&self.v);\n         }"}, {"sha": "17acfd105bbfca165b94758850d8111361be0fa4", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -8,7 +8,7 @@ struct faily_box {\n fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n \n impl faily_box : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         fail ~\"quux\";\n     }\n }"}, {"sha": "29abb4c9d7ea2e3ab3780ecb33be7c6fef88793e", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct cat {\n \n impl cat: Drop {\n     #[cat_dropper]\n-    fn finalize() { error!(\"%s landed on hir feet\",self.name); }\n+    fn finalize(&self) { error!(\"%s landed on hir feet\",self.name); }\n }\n \n "}, {"sha": "00d3730554e62f68207985c5d506d926951fb8f2", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -7,7 +7,7 @@ impl cat : Drop {\n     /**\n        Actually, cats don't always land on their feet when you drop them.\n     */\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"%s landed on hir feet\", self.name);\n     }\n }"}, {"sha": "e9194f057781d649533eeff9bda5b28ca7f104c0", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ struct cat {\n }\n \n impl cat : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         self.done(self.meows);\n     }\n }"}, {"sha": "a56cd0f6eca8f69419c7905a6cc7fea772a9f210", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct S<T> {\n }\n \n impl<T> S<T> : core::ops::Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"bye\");\n     }\n }"}, {"sha": "f55981e58bef85a81b3cc48a9ff87848e28db9a3", "filename": "src/test/run-pass/drop-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct Foo {\n }\n \n impl Foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         io::println(\"bye\");\n     }\n }"}, {"sha": "c9824d96c9c030f0908de10252ff59267b3e53a1", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n     }\n }"}, {"sha": "10074864632653b26a00f0c18a94fc5101aaff1b", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ struct socket {\n }\n \n impl socket : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n impl socket {"}, {"sha": "e4ff1fef539cd44c6bd025b7ca7236a507d07326", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct Font {\n }\n \n impl Font : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn Font() -> Font {"}, {"sha": "82ad82c64a3c9097404fda8a33aa7677661c3dd1", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -144,7 +144,7 @@ mod pipes {\n     }\n \n     impl<T: Send> send_packet<T> : Drop {\n-        fn finalize() {\n+        fn finalize(&self) {\n             if self.p != None {\n                 let mut p = None;\n                 p <-> self.p;\n@@ -172,7 +172,7 @@ mod pipes {\n     }\n \n     impl<T: Send> recv_packet<T> : Drop {\n-        fn finalize() {\n+        fn finalize(&self) {\n             if self.p != None {\n                 let mut p = None;\n                 p <-> self.p;"}, {"sha": "501d37f7d398648559c6f248ff271f4ca13fe9e5", "filename": "src/test/run-pass/issue-2735-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ struct defer {\n }\n \n impl defer : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.b) = true;\n     }\n }"}, {"sha": "cfaad51f3b62961a58e8daf498f8598b6097021c", "filename": "src/test/run-pass/issue-2735-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735-3.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ struct defer {\n }\n \n impl defer : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.b) = true;\n     }\n }"}, {"sha": "c45a582fd667d66e06ccbc25169916d53bd5024b", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -10,7 +10,7 @@ struct Kitty {\n }\n \n impl Kitty : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "6e51ae80baf431c3d929de21d533935407af3bc7", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -1,7 +1,7 @@\n struct thing { x: int, }\n \n impl thing : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn thing() -> thing {"}, {"sha": "e8e1def99c02507f12e9446b6c0e7e6d575b3af3", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.b) += 1;\n     }\n }"}, {"sha": "3294f76c25ecf11011f8bd9a2a02b1180eab0444", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ struct dtor {\n }\n \n impl dtor : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         // abuse access to shared mutable state to write this code\n         *self.x -= 1;\n     }"}, {"sha": "e29eb9787c0a2c215c1ae8db2037b8626bec3acc", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -69,7 +69,7 @@ struct Buffer {\n }\n \n impl Buffer : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n proto! double_buffer ("}, {"sha": "8a6a9a48a0407c2f4d27e6ccd34b647fbc42c43c", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.i) += 1;\n     }\n }"}, {"sha": "e9ec45d97e98d6e5a5936967704d4502e4e6d7c7", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -5,7 +5,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n               cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&self)),"}, {"sha": "00225ee1190f2ccd6ae31d04b5e347a69c34110e", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -11,7 +11,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             let v2: ~int = cast::reinterpret_cast(&self.v.c);\n         }"}, {"sha": "62703724337d2ae1d6294cb5937783fd915091fb", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -15,7 +15,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         unsafe {\n             let _v2: ~int = cast::reinterpret_cast(&self.v.c);\n             // let _v3: ~int = unsafe::reinterpret_cast(self.x);"}, {"sha": "82023aa99d2d258edf5806e626957dd0c207b7d0", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct shrinky_pointer {\n }\n \n impl shrinky_pointer : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         log(error, ~\"Hello!\"); **(self.i) -= 1;\n     }\n }"}, {"sha": "04c4c6672a3c19e573f835e34ea82ab87de663b4", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct finish<T: Copy> {\n }\n \n impl<T: Copy> finish<T> : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         self.arg.fin(self.arg.val);\n     }\n }"}, {"sha": "b4ffab2782ada4b45555b022b4c8228faa99a168", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -9,7 +9,7 @@ struct close_res {\n }\n \n impl close_res : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.i) = false;\n     }\n }"}, {"sha": "f183f7cc650596431220c857e35f07bccc8d7e3f", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct test {\n }\n \n impl test : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn test(f: int) -> test {"}, {"sha": "27fdbcc07b9fe08cd74f00df8a9ff50fc9907869", "filename": "src/test/run-pass/struct-literal-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-literal-dtor.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct foo {\n }\n \n impl foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"%s\", self.x);\n     }\n }"}, {"sha": "552f1a13c1cb8ba3f77b0084199affa86e958584", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -12,7 +12,7 @@ struct notify {\n }\n \n impl notify : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n                task::get_task(),\n                ptr::addr_of(&(*(self.v))) as uint,"}, {"sha": "68b09166b661d09cc1ab13446a1e616378c371d6", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -10,7 +10,7 @@ struct notify {\n }\n \n impl notify : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n                task::get_task(),\n                ptr::addr_of(&(*(self.v))) as uint,"}, {"sha": "a668105ab5ac9ea5e59178fd11b1e93df98dd674", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -10,7 +10,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn r(i:int) -> r {"}, {"sha": "fb5f45416342dcfee9d5e882ac5ff71fd892f5b1", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -3,7 +3,7 @@ struct r {\n }\n \n impl r : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n     }\n }"}, {"sha": "e49a5ddc19b87030e14de80cc3f4c534461dfb30", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct complainer {\n }\n \n impl complainer : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         error!(\"About to send!\");\n         comm::send(self.c, true);\n         error!(\"Sent!\");"}, {"sha": "8458dcfb9ea2084605118f0e3d647955cf34f534", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -6,7 +6,7 @@ struct complainer {\n }\n \n impl complainer : Drop {\n-    fn finalize() {}\n+    fn finalize(&self) {}\n }\n \n fn complainer(c: @int) -> complainer {"}, {"sha": "732075868bffcedeb6456fc635dc0c42e3a7473a", "filename": "src/test/run-pass/vec-slice-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1c9be16f9140e09f26de947fddf806c27a957f/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice-drop.rs?ref=9e1c9be16f9140e09f26de947fddf806c27a957f", "patch": "@@ -4,7 +4,7 @@ struct foo {\n }\n \n impl foo : Drop {\n-    fn finalize() {\n+    fn finalize(&self) {\n         *self.x += 1;\n     }\n }"}]}