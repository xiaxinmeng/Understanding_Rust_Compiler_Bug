{"sha": "90b1f5ae59291dd69d72fad41a22277df19dc953", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYjFmNWFlNTkyOTFkZDY5ZDcyZmFkNDFhMjIyNzdkZjE5ZGM5NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T10:14:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T10:14:52Z"}, "message": "Auto merge of #76171 - estebank:turbofish-the-revenge, r=davidtwco\n\nDetect turbofish with multiple type params missing leading `::`\n\nFix #76072.", "tree": {"sha": "48be81f25a8a51daf3a29911988d58044341f67f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48be81f25a8a51daf3a29911988d58044341f67f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b1f5ae59291dd69d72fad41a22277df19dc953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b1f5ae59291dd69d72fad41a22277df19dc953", "html_url": "https://github.com/rust-lang/rust/commit/90b1f5ae59291dd69d72fad41a22277df19dc953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b1f5ae59291dd69d72fad41a22277df19dc953/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1589cc819ba7cf289c3ccbab30c215f0a6ba7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1589cc819ba7cf289c3ccbab30c215f0a6ba7d7", "html_url": "https://github.com/rust-lang/rust/commit/c1589cc819ba7cf289c3ccbab30c215f0a6ba7d7"}, {"sha": "62effcbd5bfaf74e99def3e9a660dba9728b0b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/62effcbd5bfaf74e99def3e9a660dba9728b0b47", "html_url": "https://github.com/rust-lang/rust/commit/62effcbd5bfaf74e99def3e9a660dba9728b0b47"}], "stats": {"total": 176, "additions": 167, "deletions": 9}, "files": [{"sha": "9ab13db4b5f9650991e24cd1fd35bb2423ce70b7", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -553,6 +553,52 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// When writing a turbofish with multiple type parameters missing the leading `::`, we will\n+    /// encounter a parse error when encountering the first `,`.\n+    pub(super) fn check_mistyped_turbofish_with_multiple_type_params(\n+        &mut self,\n+        mut e: DiagnosticBuilder<'a>,\n+        expr: &mut P<Expr>,\n+    ) -> PResult<'a, ()> {\n+        if let ExprKind::Binary(binop, _, _) = &expr.kind {\n+            if let ast::BinOpKind::Lt = binop.node {\n+                if self.eat(&token::Comma) {\n+                    let x = self.parse_seq_to_before_end(\n+                        &token::Gt,\n+                        SeqSep::trailing_allowed(token::Comma),\n+                        |p| p.parse_ty(),\n+                    );\n+                    match x {\n+                        Ok((_, _, false)) => {\n+                            self.bump(); // `>`\n+                            match self.parse_expr() {\n+                                Ok(_) => {\n+                                    e.span_suggestion_verbose(\n+                                        binop.span.shrink_to_lo(),\n+                                        \"use `::<...>` instead of `<...>` to specify type arguments\",\n+                                        \"::\".to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                    e.emit();\n+                                    *expr = self.mk_expr_err(expr.span.to(self.prev_token.span));\n+                                    return Ok(());\n+                                }\n+                                Err(mut err) => {\n+                                    err.cancel();\n+                                }\n+                            }\n+                        }\n+                        Err(mut err) => {\n+                            err.cancel();\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+        Err(e)\n+    }\n+\n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,\n     /// e.g. `1 < x <= 3`. If so, suggest either splitting the comparison into two, or\n     /// parenthesising the leftmost comparison."}, {"sha": "fd1c6b25aec63eb8c1c56aab2777cffac5e8b335", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -364,7 +364,7 @@ impl<'a> Parser<'a> {\n         let mut eat_semi = true;\n         match stmt.kind {\n             // Expression without semicolon.\n-            StmtKind::Expr(ref expr)\n+            StmtKind::Expr(ref mut expr)\n                 if self.token != token::Eof && classify::expr_requires_semi_to_be_stmt(expr) =>\n             {\n                 // Just check for errors and recover; do not eat semicolon yet.\n@@ -388,15 +388,29 @@ impl<'a> Parser<'a> {\n                             );\n                         }\n                     }\n-                    e.emit();\n-                    self.recover_stmt();\n+                    if let Err(mut e) =\n+                        self.check_mistyped_turbofish_with_multiple_type_params(e, expr)\n+                    {\n+                        e.emit();\n+                        self.recover_stmt();\n+                    }\n                     // Don't complain about type errors in body tail after parse error (#57383).\n                     let sp = expr.span.to(self.prev_token.span);\n-                    stmt.kind = StmtKind::Expr(self.mk_expr_err(sp));\n+                    *expr = self.mk_expr_err(sp);\n                 }\n             }\n-            StmtKind::Local(..) => {\n-                self.expect_semi()?;\n+            StmtKind::Local(ref mut local) => {\n+                if let Err(e) = self.expect_semi() {\n+                    // We might be at the `,` in `let x = foo<bar, baz>;`. Try to recover.\n+                    match &mut local.init {\n+                        Some(ref mut expr) => {\n+                            self.check_mistyped_turbofish_with_multiple_type_params(e, expr)?;\n+                            // We found `foo<bar, baz>`, have we fully recovered?\n+                            self.expect_semi()?;\n+                        }\n+                        None => return Err(e),\n+                    }\n+                }\n                 eat_semi = false;\n             }\n             StmtKind::Empty => eat_semi = false,"}, {"sha": "5497ba2e11f7325bbecaff305b7ef5ec3823aeae", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,8 +1,29 @@\n fn main() {\n     (0..13).collect<Vec<i32>>();\n     //~^ ERROR comparison operators cannot be chained\n+    //~| HELP use `::<...>` instead\n     Vec<i32>::new();\n     //~^ ERROR comparison operators cannot be chained\n+    //~| HELP use `::<...>` instead\n     (0..13).collect<Vec<i32>();\n     //~^ ERROR comparison operators cannot be chained\n+    //~| HELP use `::<...>` instead\n+    let x = std::collections::HashMap<i128, i128>::new(); //~ ERROR expected one of\n+    //~^ HELP use `::<...>` instead\n+    let x: () = 42; //~ ERROR mismatched types\n+    let x = {\n+        std::collections::HashMap<i128, i128>::new() //~ ERROR expected one of\n+        //~^ HELP use `::<...>` instead\n+    };\n+    let x: () = 42; //~ ERROR mismatched types\n+    let x = {\n+        std::collections::HashMap<i128, i128>::new(); //~ ERROR expected one of\n+        //~^ HELP use `::<...>` instead\n+        let x: () = 42; //~ ERROR mismatched types\n+    };\n+    {\n+        std::collections::HashMap<i128, i128>::new(1, 2); //~ ERROR expected one of\n+        //~^ HELP use `::<...>` instead\n+        let x: () = 32; //~ ERROR mismatched types\n+    };\n }"}, {"sha": "184bcf0c74b1428cc1896e562a5a411c4d759743", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -10,7 +10,7 @@ LL |     (0..13).collect::<Vec<i32>>();\n    |                    ^^\n \n error: comparison operators cannot be chained\n-  --> $DIR/issue-40396.rs:4:8\n+  --> $DIR/issue-40396.rs:5:8\n    |\n LL |     Vec<i32>::new();\n    |        ^   ^\n@@ -21,7 +21,7 @@ LL |     Vec::<i32>::new();\n    |        ^^\n \n error: comparison operators cannot be chained\n-  --> $DIR/issue-40396.rs:6:20\n+  --> $DIR/issue-40396.rs:8:20\n    |\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^   ^\n@@ -31,5 +31,82 @@ help: use `::<...>` instead of `<...>` to specify type arguments\n LL |     (0..13).collect::<Vec<i32>();\n    |                    ^^\n \n-error: aborting due to 3 previous errors\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n+  --> $DIR/issue-40396.rs:11:43\n+   |\n+LL |     let x = std::collections::HashMap<i128, i128>::new();\n+   |                                           ^ expected one of 7 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify type arguments\n+   |\n+LL |     let x = std::collections::HashMap::<i128, i128>::new();\n+   |                                      ^^\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n+  --> $DIR/issue-40396.rs:15:39\n+   |\n+LL |         std::collections::HashMap<i128, i128>::new()\n+   |                                       ^ expected one of 8 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify type arguments\n+   |\n+LL |         std::collections::HashMap::<i128, i128>::new()\n+   |                                  ^^\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n+  --> $DIR/issue-40396.rs:20:39\n+   |\n+LL |         std::collections::HashMap<i128, i128>::new();\n+   |                                       ^ expected one of 8 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify type arguments\n+   |\n+LL |         std::collections::HashMap::<i128, i128>::new();\n+   |                                  ^^\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n+  --> $DIR/issue-40396.rs:25:39\n+   |\n+LL |         std::collections::HashMap<i128, i128>::new(1, 2);\n+   |                                       ^ expected one of 8 possible tokens\n+   |\n+help: use `::<...>` instead of `<...>` to specify type arguments\n+   |\n+LL |         std::collections::HashMap::<i128, i128>::new(1, 2);\n+   |                                  ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-40396.rs:13:17\n+   |\n+LL |     let x: () = 42;\n+   |            --   ^^ expected `()`, found integer\n+   |            |\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-40396.rs:18:17\n+   |\n+LL |     let x: () = 42;\n+   |            --   ^^ expected `()`, found integer\n+   |            |\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-40396.rs:22:21\n+   |\n+LL |         let x: () = 42;\n+   |                --   ^^ expected `()`, found integer\n+   |                |\n+   |                expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-40396.rs:27:21\n+   |\n+LL |         let x: () = 32;\n+   |                --   ^^ expected `()`, found integer\n+   |                |\n+   |                expected due to this\n+\n+error: aborting due to 11 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}