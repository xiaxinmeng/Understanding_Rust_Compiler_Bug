{"sha": "c73c5dd35fa8171ba1634bf9111073706ccf993a", "node_id": "C_kwDOAAsO6NoAKGM3M2M1ZGQzNWZhODE3MWJhMTYzNGJmOTExMTA3MzcwNmNjZjk5M2E", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-05T02:40:05Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-05T04:15:22Z"}, "message": "cleanup now that Kind is no longer used for excludes", "tree": {"sha": "ed18f73e0a65504ebc2a34b760ba176db7e9845d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed18f73e0a65504ebc2a34b760ba176db7e9845d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73c5dd35fa8171ba1634bf9111073706ccf993a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73c5dd35fa8171ba1634bf9111073706ccf993a", "html_url": "https://github.com/rust-lang/rust/commit/c73c5dd35fa8171ba1634bf9111073706ccf993a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73c5dd35fa8171ba1634bf9111073706ccf993a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1205e6cff3b2df4ed8465aa1f4f4b3f8e230b7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1205e6cff3b2df4ed8465aa1f4f4b3f8e230b7a3", "html_url": "https://github.com/rust-lang/rust/commit/1205e6cff3b2df4ed8465aa1f4f4b3f8e230b7a3"}], "stats": {"total": 89, "additions": 27, "deletions": 62}, "files": [{"sha": "1acf522eeab6b59d9830c518b9d2baeeac78fb8a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c73c5dd35fa8171ba1634bf9111073706ccf993a", "patch": "@@ -8,7 +8,7 @@ use std::fs::{self, File};\n use std::hash::Hash;\n use std::io::{BufRead, BufReader};\n use std::ops::Deref;\n-use std::path::{Component, Path, PathBuf};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n@@ -150,29 +150,6 @@ pub struct TaskPath {\n     pub kind: Option<Kind>,\n }\n \n-impl TaskPath {\n-    pub fn parse(path: impl Into<PathBuf>) -> TaskPath {\n-        let mut kind = None;\n-        let mut path = path.into();\n-\n-        let mut components = path.components();\n-        if let Some(Component::Normal(os_str)) = components.next() {\n-            if let Some(str) = os_str.to_str() {\n-                if let Some((found_kind, found_prefix)) = str.split_once(\"::\") {\n-                    if found_kind.is_empty() {\n-                        panic!(\"empty kind in task path {}\", path.display());\n-                    }\n-                    kind = Kind::parse(found_kind);\n-                    assert!(kind.is_some());\n-                    path = Path::new(found_prefix).join(components.as_path());\n-                }\n-            }\n-        }\n-\n-        TaskPath { path, kind }\n-    }\n-}\n-\n impl Debug for TaskPath {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         if let Some(kind) = &self.kind {\n@@ -216,17 +193,17 @@ impl PathSet {\n         PathSet::Set(set)\n     }\n \n-    fn has(&self, needle: &Path, module: Option<Kind>) -> bool {\n+    fn has(&self, needle: &Path, module: Kind) -> bool {\n         match self {\n             PathSet::Set(set) => set.iter().any(|p| Self::check(p, needle, module)),\n             PathSet::Suite(suite) => Self::check(suite, needle, module),\n         }\n     }\n \n     // internal use only\n-    fn check(p: &TaskPath, needle: &Path, module: Option<Kind>) -> bool {\n-        if let (Some(p_kind), Some(kind)) = (&p.kind, module) {\n-            p.path.ends_with(needle) && *p_kind == kind\n+    fn check(p: &TaskPath, needle: &Path, module: Kind) -> bool {\n+        if let Some(p_kind) = &p.kind {\n+            p.path.ends_with(needle) && *p_kind == module\n         } else {\n             p.path.ends_with(needle)\n         }\n@@ -238,11 +215,7 @@ impl PathSet {\n     /// This is used for `StepDescription::krate`, which passes all matching crates at once to\n     /// `Step::make_run`, rather than calling it many times with a single crate.\n     /// See `tests.rs` for examples.\n-    fn intersection_removing_matches(\n-        &self,\n-        needles: &mut Vec<&Path>,\n-        module: Option<Kind>,\n-    ) -> PathSet {\n+    fn intersection_removing_matches(&self, needles: &mut Vec<&Path>, module: Kind) -> PathSet {\n         let mut check = |p| {\n             for (i, n) in needles.iter().enumerate() {\n                 let matched = Self::check(p, n, module);\n@@ -307,7 +280,7 @@ impl StepDescription {\n     }\n \n     fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n-        if builder.config.exclude.iter().any(|e| pathset.has(&e.path, Some(builder.kind))) {\n+        if builder.config.exclude.iter().any(|e| pathset.has(&e, builder.kind)) {\n             println!(\"Skipping {:?} because it is excluded\", pathset);\n             return true;\n         }\n@@ -562,7 +535,7 @@ impl<'a> ShouldRun<'a> {\n     ) -> Vec<PathSet> {\n         let mut sets = vec![];\n         for pathset in &self.paths {\n-            let subset = pathset.intersection_removing_matches(paths, Some(kind));\n+            let subset = pathset.intersection_removing_matches(paths, kind);\n             if subset != PathSet::empty() {\n                 sets.push(subset);\n             }\n@@ -2130,7 +2103,7 @@ impl<'a> Builder<'a> {\n         let should_run = (desc.should_run)(ShouldRun::new(self, desc.kind));\n \n         for path in &self.paths {\n-            if should_run.paths.iter().any(|s| s.has(path, Some(desc.kind)))\n+            if should_run.paths.iter().any(|s| s.has(path, desc.kind))\n                 && !desc.is_excluded(\n                     self,\n                     &PathSet::Suite(TaskPath { path: path.clone(), kind: Some(desc.kind) }),"}, {"sha": "31dcee58216ae01c259de7e6857bce18b817533b", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=c73c5dd35fa8171ba1634bf9111073706ccf993a", "patch": "@@ -101,23 +101,21 @@ fn test_invalid() {\n \n #[test]\n fn test_intersection() {\n-    let set = PathSet::Set(\n-        [\"library/core\", \"library/alloc\", \"library/std\"].into_iter().map(TaskPath::parse).collect(),\n-    );\n+    let set = |paths: &[&str]| {\n+        PathSet::Set(paths.into_iter().map(|p| TaskPath { path: p.into(), kind: None }).collect())\n+    };\n+    let library_set = set(&[\"library/core\", \"library/alloc\", \"library/std\"]);\n     let mut command_paths =\n         vec![Path::new(\"library/core\"), Path::new(\"library/alloc\"), Path::new(\"library/stdarch\")];\n-    let subset = set.intersection_removing_matches(&mut command_paths, None);\n-    assert_eq!(\n-        subset,\n-        PathSet::Set([\"library/core\", \"library/alloc\"].into_iter().map(TaskPath::parse).collect())\n-    );\n+    let subset = library_set.intersection_removing_matches(&mut command_paths, Kind::Build);\n+    assert_eq!(subset, set(&[\"library/core\", \"library/alloc\"]),);\n     assert_eq!(command_paths, vec![Path::new(\"library/stdarch\")]);\n }\n \n #[test]\n fn test_exclude() {\n     let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n-    config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n+    config.exclude = vec![\"src/tools/tidy\".into()];\n     let cache = run_build(&[], config);\n \n     // Ensure we have really excluded tidy\n@@ -129,21 +127,16 @@ fn test_exclude() {\n \n #[test]\n fn test_exclude_kind() {\n-    let path = PathBuf::from(\"src/tools/cargotest\");\n-    let exclude = TaskPath::parse(\"test::src/tools/cargotest\");\n-    assert_eq!(exclude, TaskPath { kind: Some(Kind::Test), path: path.clone() });\n+    let path = PathBuf::from(\"compiler/rustc_data_structures\");\n \n     let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n-    // Ensure our test is valid, and `test::Cargotest` would be run without the exclude.\n-    assert!(run_build(&[path.clone()], config.clone()).contains::<test::Cargotest>());\n-    // Ensure tests for cargotest are skipped.\n-    config.exclude = vec![exclude.clone()];\n-    assert!(!run_build(&[path.clone()], config).contains::<test::Cargotest>());\n-\n-    // Ensure builds for cargotest are not skipped.\n-    let mut config = configure(\"build\", &[\"A\"], &[\"A\"]);\n-    config.exclude = vec![exclude];\n-    assert!(run_build(&[path], config).contains::<tool::CargoTest>());\n+    // Ensure our test is valid, and `test::Rustc` would be run without the exclude.\n+    assert!(run_build(&[], config.clone()).contains::<test::CrateLibrustc>());\n+    // Ensure tests for rustc are skipped.\n+    config.exclude = vec![path.clone()];\n+    assert!(!run_build(&[], config.clone()).contains::<test::CrateLibrustc>());\n+    // Ensure builds for rustc are not skipped.\n+    assert!(run_build(&[], config).contains::<compile::Rustc>());\n }\n \n /// Ensure that if someone passes both a single crate and `library`, all library crates get built."}, {"sha": "42cd7922be6b5cfa43820432299b97233a0df703", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c73c5dd35fa8171ba1634bf9111073706ccf993a", "patch": "@@ -16,7 +16,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n \n-use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::cc_detect::{ndk_compiler, Language};\n use crate::channel::{self, GitInfo};\n@@ -79,7 +78,7 @@ pub struct Config {\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub omit_git_hash: bool,\n-    pub exclude: Vec<TaskPath>,\n+    pub exclude: Vec<PathBuf>,\n     pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n@@ -958,7 +957,7 @@ impl Config {\n \n         // Set flags.\n         config.paths = std::mem::take(&mut flags.paths);\n-        config.exclude = flags.exclude.into_iter().map(|path| TaskPath::parse(path)).collect();\n+        config.exclude = flags.exclude;\n         config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;"}, {"sha": "31a2a33ebc259f4dc3c80bad81853a4aa5a2b656", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73c5dd35fa8171ba1634bf9111073706ccf993a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c73c5dd35fa8171ba1634bf9111073706ccf993a", "patch": "@@ -1529,7 +1529,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         for exclude in &builder.config.exclude {\n             cmd.arg(\"--skip\");\n-            cmd.arg(&exclude.path);\n+            cmd.arg(&exclude);\n         }\n \n         // Get paths from cmd args"}]}