{"sha": "44352df57c04996b12d14ba92967d6637d154906", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MzUyZGY1N2MwNDk5NmIxMmQxNGJhOTI5NjdkNjYzN2QxNTQ5MDY=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-11T01:33:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-12T08:55:48Z"}, "message": "Cleanups to previous commits for issue #1393.", "tree": {"sha": "bf4097aa5a17c8849ec7f6c21eeeefc70580cf77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4097aa5a17c8849ec7f6c21eeeefc70580cf77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44352df57c04996b12d14ba92967d6637d154906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44352df57c04996b12d14ba92967d6637d154906", "html_url": "https://github.com/rust-lang/rust/commit/44352df57c04996b12d14ba92967d6637d154906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44352df57c04996b12d14ba92967d6637d154906/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175196bbb8057d21959feb51cf07f3518e9ef247", "url": "https://api.github.com/repos/rust-lang/rust/commits/175196bbb8057d21959feb51cf07f3518e9ef247", "html_url": "https://github.com/rust-lang/rust/commit/175196bbb8057d21959feb51cf07f3518e9ef247"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "2cf62fcb2d4dfef70ee82b5594b1126a868f2e28", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=44352df57c04996b12d14ba92967d6637d154906", "patch": "@@ -174,7 +174,7 @@ export type_is_tup_like;\n export type_is_str;\n export type_is_unique;\n export type_is_tag;\n-export type_is_enum_like;\n+export type_is_c_like_enum;\n export type_structurally_contains_uniques;\n export type_autoderef;\n export type_param;\n@@ -1274,7 +1274,7 @@ fn type_is_tag(cx: ctxt, ty: t) -> bool {\n \n // Whether a type is enum like, that is a tag type with only nullary\n // constructors\n-fn type_is_enum_like(cx: ctxt, ty: t) -> bool {\n+fn type_is_c_like_enum(cx: ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       ty_tag(did, tps) {\n         let variants = tag_variants(cx, did);"}, {"sha": "bde40bdde554d36a9cbea40c4a6ddb781f526466", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=44352df57c04996b12d14ba92967d6637d154906", "patch": "@@ -211,9 +211,9 @@ fn type_is_scalar(fcx: @fn_ctxt, sp: span, typ: ty::t) -> bool {\n     ret ty::type_is_scalar(fcx.ccx.tcx, typ_s);\n }\n \n-fn type_is_enum_like(fcx: @fn_ctxt, sp: span, typ: ty::t) -> bool {\n+fn type_is_c_like_enum(fcx: @fn_ctxt, sp: span, typ: ty::t) -> bool {\n     let typ_s = structurally_resolved_type(fcx, sp, typ);\n-    ret ty::type_is_enum_like(fcx.ccx.tcx, typ_s);\n+    ret ty::type_is_c_like_enum(fcx.ccx.tcx, typ_s);\n }\n \n // Parses the programmer's textual representation of a type into our internal\n@@ -2216,7 +2216,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           ty::ty_iface(_, _) {}\n           _ {\n             let t_1_is_scalar = type_is_scalar(fcx, expr.span, t_1);\n-            if type_is_enum_like(fcx,expr.span,t_e) && t_1_is_scalar {\n+            if type_is_c_like_enum(fcx,expr.span,t_e) && t_1_is_scalar {\n                 /* this case is allowed */\n             } else if !(type_is_scalar(fcx,expr.span,t_e) && t_1_is_scalar) {\n                 // FIXME there are more forms of cast to support, eventually."}, {"sha": "4a9c51286c790b013b5b04b90351882d6024cacb", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=44352df57c04996b12d14ba92967d6637d154906", "patch": "@@ -245,6 +245,8 @@ tag const_val {\n     const_str(str);\n }\n \n+// FIXME (#1417): any function that uses this function should likely be moved\n+// into the middle end\n fn eval_const_expr(e: @expr) -> const_val {\n     fn fromb(b: bool) -> const_val { const_int(b as i64) }\n     alt e.node {"}, {"sha": "a2cb8066a678001da21653876dc48ca1fd5053e9", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=44352df57c04996b12d14ba92967d6637d154906", "patch": "@@ -473,9 +473,9 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n     let (de, dv) = alt v.disr_expr {\n       some(e) {\n         let de = fld.fold_expr(e);\n+        // FIXME (#1417): see parser.rs\n         let dv = alt syntax::ast_util::eval_const_expr(e) {\n           ast_util::const_int(val) {\n-            // FIXME (#1417): check that value is in range\n             val as int\n           }\n         };"}, {"sha": "13396d68227228a75d9cc19b22df1e999305a442", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44352df57c04996b12d14ba92967d6637d154906/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=44352df57c04996b12d14ba92967d6637d154906", "patch": "@@ -2117,7 +2117,7 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n                 // probably be doing.\"  (See issue #1417)\n                 alt syntax::ast_util::eval_const_expr(e) {\n                   syntax::ast_util::const_int(val) {\n-                    // FIXME (#1417): check that value is in range\n+                    // FIXME: check that value is in range\n                     disr_val = val as int;\n                   }\n                 }\n@@ -2148,7 +2148,7 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     }\n     let hi = p.get_hi_pos();\n     if (have_disr && !all_nullary) {\n-        p.fatal(\"discriminator values can only be used with enum-like tag\");\n+        p.fatal(\"discriminator values can only be used with a c-like enum\");\n     }\n     p.bump();\n     ret mk_item(p, lo, hi, id, ast::item_tag(variants, ty_params), attrs);"}, {"sha": "3c8f25d93137056163588dd311d08f4e4d866df0", "filename": "src/test/compile-fail/tag-variant-disr-non-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44352df57c04996b12d14ba92967d6637d154906/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44352df57c04996b12d14ba92967d6637d154906/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-non-nullary.rs?ref=44352df57c04996b12d14ba92967d6637d154906", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: discriminator values can only be used with enum-like tag\n+//error-pattern: discriminator values can only be used with a c-like enum\n // black and white have the same discriminator value ...\n \n tag color {"}]}