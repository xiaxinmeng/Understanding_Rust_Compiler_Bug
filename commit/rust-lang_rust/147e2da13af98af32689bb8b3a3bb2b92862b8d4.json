{"sha": "147e2da13af98af32689bb8b3a3bb2b92862b8d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0N2UyZGExM2FmOThhZjMyNjg5YmI4YjNhM2JiMmI5Mjg2MmI4ZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-07T06:30:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-08T00:17:07Z"}, "message": "rustbuild: Use `cargo metadata` to learn about DAG\n\nThis updates the commit to use workspaces to use `cargo metadata` instead of\nhardcoded lists about what to test. This should help us be resilient to updates\nin the future on behalf of the crate DAG and minimize the amount of files that\nneed to be touched.", "tree": {"sha": "7b952612037d2f2fd040b9fba91da35f7bd9da03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b952612037d2f2fd040b9fba91da35f7bd9da03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147e2da13af98af32689bb8b3a3bb2b92862b8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147e2da13af98af32689bb8b3a3bb2b92862b8d4", "html_url": "https://github.com/rust-lang/rust/commit/147e2da13af98af32689bb8b3a3bb2b92862b8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147e2da13af98af32689bb8b3a3bb2b92862b8d4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca382f95fff732f6cd2a6cffbd04825ff6c4145", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca382f95fff732f6cd2a6cffbd04825ff6c4145", "html_url": "https://github.com/rust-lang/rust/commit/9ca382f95fff732f6cd2a6cffbd04825ff6c4145"}], "stats": {"total": 165, "additions": 91, "deletions": 74}, "files": [{"sha": "ecd94e5b7e92f8c34e6c09316e114e515f4844cc", "filename": "src/Cargo.lock", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/147e2da13af98af32689bb8b3a3bb2b92862b8d4/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/147e2da13af98af32689bb8b3a3bb2b92862b8d4/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=147e2da13af98af32689bb8b3a3bb2b92862b8d4", "patch": "@@ -87,6 +87,14 @@ dependencies = [\n  \"rustc_unicode 0.0.0\",\n ]\n \n+[[package]]\n+name = \"compiler_builtins\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"gcc 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"compiletest\"\n version = \"0.0.0\"\n@@ -251,25 +259,24 @@ dependencies = [\n name = \"proc_macro\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n- \"rustc_plugin 0.0.0\",\n  \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n ]\n \n [[package]]\n-name = \"rand\"\n+name = \"proc_macro_plugin\"\n version = \"0.0.0\"\n dependencies = [\n- \"core 0.0.0\",\n+ \"log 0.0.0\",\n+ \"rustc_plugin 0.0.0\",\n+ \"syntax 0.0.0\",\n+ \"syntax_pos 0.0.0\",\n ]\n \n [[package]]\n-name = \"rbml\"\n+name = \"rand\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n- \"serialize 0.0.0\",\n+ \"core 0.0.0\",\n ]\n \n [[package]]\n@@ -302,7 +309,6 @@ dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n- \"rbml 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -395,7 +401,7 @@ dependencies = [\n  \"flate 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n- \"proc_macro 0.0.0\",\n+ \"proc_macro_plugin 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_borrowck 0.0.0\",\n@@ -434,7 +440,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n- \"rbml 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -469,16 +474,16 @@ version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n  \"log 0.0.0\",\n- \"rbml 0.0.0\",\n+ \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n+ \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n@@ -647,6 +652,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"collections 0.0.0\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"gcc 0.3.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n@@ -661,6 +667,7 @@ dependencies = [\n name = \"std_shim\"\n version = \"0.1.0\"\n dependencies = [\n+ \"core 0.0.0\",\n  \"std 0.0.0\",\n ]\n \n@@ -681,6 +688,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"log 0.0.0\",\n+ \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "b8d0eb3ff996a6b8738a0baacd2bafdfc6e286e1", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 70, "deletions": 61, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/147e2da13af98af32689bb8b3a3bb2b92862b8d4/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147e2da13af98af32689bb8b3a3bb2b92862b8d4/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=147e2da13af98af32689bb8b3a3bb2b92862b8d4", "patch": "@@ -13,19 +13,44 @@\n //! This file implements the various regression test suites that we execute on\n //! our CI.\n \n+use std::collections::{HashMap, HashSet};\n use std::env;\n-use std::fs::{self, File};\n-use std::io::prelude::*;\n+use std::fs;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n use build_helper::output;\n+use rustc_serialize::json;\n \n use {Build, Compiler, Mode};\n use util::{self, dylib_path, dylib_path_var};\n \n const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n \n+#[derive(RustcDecodable)]\n+struct Output {\n+    packages: Vec<Package>,\n+    resolve: Resolve,\n+}\n+\n+#[derive(RustcDecodable)]\n+struct Package {\n+    id: String,\n+    name: String,\n+    source: Option<String>,\n+}\n+\n+#[derive(RustcDecodable)]\n+struct Resolve {\n+    nodes: Vec<ResolveNode>,\n+}\n+\n+#[derive(RustcDecodable)]\n+struct ResolveNode {\n+    id: String,\n+    dependencies: Vec<String>,\n+}\n+\n /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n ///\n /// This tool in `src/tools` will verify the validity of all our links in the\n@@ -263,90 +288,74 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n /// It essentially is the driver for running `cargo test`.\n ///\n /// Currently this runs all tests for a DAG by passing a bunch of `-p foo`\n-/// arguments, and those arguments are discovered from `Cargo.lock`.\n+/// arguments, and those arguments are discovered from `cargo metadata`.\n pub fn krate(build: &Build,\n              compiler: &Compiler,\n              target: &str,\n              mode: Mode) {\n-    let (name, path, features, excluded) = match mode {\n+    let (name, path, features, root) = match mode {\n         Mode::Libstd => {\n-            let excluded = vec![\n-               \"alloc_jemalloc\", \"arena\", \"bootstrap\", \"cargotest\", \"compiletest\",\n-               \"error_index_generator\", \"flate\", \"fmt_macros\", \"getopts\", \"graphviz\",\n-               \"linkchecker\", \"log\", \"proc_macro\", \"rbml\", \"rustbook\", \"rustc\", \"rustc-main\",\n-               \"rustc_back\", \"rustc_bitflags\", \"rustc_borrowck\", \"rustc_const_eval\",\n-               \"rustc_const_math\", \"rustc_data_structures\", \"rustc_driver\", \"rustc_errors\",\n-               \"rustc_incremental\", \"rustc_lint\", \"rustc_llvm\", \"rustc_metadata\", \"rustc_mir\",\n-               \"rustc_passes\", \"rustc_platform_intrinsics\", \"rustc_plugin\", \"rustc_privacy\",\n-               \"rustc_resolve\", \"rustc_save_analysis\", \"rustc_trans\", \"rustc_typeck\", \"rustdoc\",\n-               \"serialize\", \"syntax\", \"syntax_ext\", \"syntax_pos\", \"term\", \"test\", \"test_shim\",\n-               \"tidy\", \"unwind\",\n-            ];\n-            (\"libstd\", \"src/rustc/std_shim\", build.std_features(), excluded)\n+            (\"libstd\", \"src/rustc/std_shim\", build.std_features(), \"std_shim\")\n         }\n         Mode::Libtest => {\n-            let excluded = vec![\n-                \"alloc\", \"alloc_jemalloc\", \"alloc_system\", \"arena\", \"bootstrap\", \"build_helper\",\n-                \"cargotest\", \"collections\", \"compiletest\", \"core\", \"error_index_generator\",\n-                \"flate\", \"fmt_macros\", \"graphviz\", \"libc\", \"linkchecker\", \"log\", \"panic_abort\",\n-                \"panic_unwind\", \"proc_macro\", \"rand\", \"rbml\", \"rustbook\", \"rustc\", \"rustc-main\",\n-                \"rustc_back\", \"rustc_bitflags\", \"rustc_borrowck\", \"rustc_const_eval\",\n-                \"rustc_const_math\", \"rustc_data_structures\", \"rustc_driver\", \"rustc_errors\",\n-                \"rustc_incremental\", \"rustc_lint\", \"rustc_llvm\", \"rustc_metadata\", \"rustc_mir\",\n-                \"rustc_passes\", \"rustc_platform_intrinsics\", \"rustc_plugin\", \"rustc_privacy\",\n-                \"rustc_resolve\", \"rustc_save_analysis\", \"rustc_trans\", \"rustc_typeck\",\n-                \"rustc_unicode\", \"rustdoc\", \"serialize\", \"std\", \"std_shim\", \"syntax\", \"syntax_ext\",\n-                \"syntax_pos\", \"tidy\", \"unwind\",\n-            ];\n-            (\"libtest\", \"src/rustc/test_shim\", String::new(), excluded)\n+            (\"libtest\", \"src/rustc/test_shim\", String::new(), \"test_shim\")\n         }\n         Mode::Librustc => {\n-            let excluded = vec![\n-                \"alloc\", \"alloc_jemalloc\", \"alloc_system\", \"bootstrap\", \"cargotest\", \"collections\",\n-                \"compiletest\", \"core\", \"error_index_generator\", \"getopts\", \"libc\", \"linkchecker\",\n-                \"panic_abort\", \"panic_unwind\", \"rand\", \"rustbook\", \"rustc_unicode\", \"std\",\n-                \"std_shim\", \"term\", \"test\", \"test_shim\", \"tidy\", \"unwind\",\n-            ];\n-            (\"librustc\", \"src/rustc\", build.rustc_features(), excluded)\n+            (\"librustc\", \"src/rustc\", build.rustc_features(), \"rustc-main\")\n         }\n         _ => panic!(\"can only test libraries\"),\n     };\n     println!(\"Testing {} stage{} ({} -> {})\", name, compiler.stage,\n              compiler.host, target);\n \n+    // Run `cargo metadata` to figure out what crates we're testing.\n+    //\n+    // Down below we're going to call `cargo test`, but to test the right set\n+    // of packages we're going to have to know what `-p` arguments to pass it\n+    // to know what crates to test. Here we run `cargo metadata` to learn about\n+    // the dependency graph and what `-p` arguments there are.\n+    let mut cargo = Command::new(&build.cargo);\n+    cargo.arg(\"metadata\")\n+         .arg(\"--manifest-path\").arg(build.src.join(path).join(\"Cargo.toml\"));\n+    let output = output(&mut cargo);\n+    let output: Output = json::decode(&output).unwrap();\n+    let id2pkg = output.packages.iter()\n+                        .map(|pkg| (&pkg.id, pkg))\n+                        .collect::<HashMap<_, _>>();\n+    let id2deps = output.resolve.nodes.iter()\n+                        .map(|node| (&node.id, &node.dependencies))\n+                        .collect::<HashMap<_, _>>();\n+\n     // Build up the base `cargo test` command.\n+    //\n+    // Pass in some standard flags then iterate over the graph we've discovered\n+    // in `cargo metadata` with the maps above and figure out what `-p`\n+    // arguments need to get passed.\n     let mut cargo = build.cargo(compiler, mode, target, \"test\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(path).join(\"Cargo.toml\"))\n          .arg(\"--features\").arg(features);\n \n-    // Generate a list of `-p` arguments to pass to the `cargo test` invocation\n-    // by crawling the corresponding Cargo.lock file.\n-    let lockfile = build.src.join(\"src\").join(\"Cargo.lock\");\n-    let mut contents = String::new();\n-    t!(t!(File::open(&lockfile)).read_to_string(&mut contents));\n-    let mut lines = contents.lines();\n-    while let Some(line) = lines.next() {\n-        let prefix = \"name = \\\"\";\n-        if !line.starts_with(prefix) {\n+    let mut visited = HashSet::new();\n+    let root_pkg = output.packages.iter().find(|p| p.name == root).unwrap();\n+    let mut next = vec![&root_pkg.id];\n+    while let Some(id) = next.pop() {\n+        // Skip any packages with sources listed, as these come from crates.io\n+        // and we shouldn't be testing them.\n+        if id2pkg[id].source.is_some() {\n             continue\n         }\n-        lines.next(); // skip `version = ...`\n-\n-        // skip crates.io or otherwise non-path crates\n-        if let Some(line) = lines.next() {\n-            if line.starts_with(\"source\") {\n-                continue\n-            }\n+        // Right now jemalloc is our only target-specific crate in the sense\n+        // that it's not present on all platforms. Custom skip it here for now,\n+        // but if we add more this probably wants to get more generalized.\n+        if !id.contains(\"jemalloc\") {\n+            cargo.arg(\"-p\").arg(&id2pkg[id].name);\n         }\n-\n-        let crate_name = &line[prefix.len()..line.len() - 1];\n-\n-        if excluded.contains(&crate_name) {\n-            continue\n+        for dep in id2deps[id] {\n+            if visited.insert(dep) {\n+                next.push(dep);\n+            }\n         }\n-\n-        cargo.arg(\"-p\").arg(crate_name);\n     }\n \n     // The tests are going to run with the *target* libraries, so we need to"}]}