{"sha": "292869493ce64e4aa4305eae4f1f2a246d50d0b0", "node_id": "C_kwDOAAsO6NoAKDI5Mjg2OTQ5M2NlNjRlNGFhNDMwNWVhZTRmMWYyYTI0NmQ1MGQwYjA", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-08-31T14:01:37Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:10Z"}, "message": "Add additional flooding when assigning a value and corresponding test", "tree": {"sha": "5a0ea89f6e53c3040159cf04db4ef5fe9c3a9b69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a0ea89f6e53c3040159cf04db4ef5fe9c3a9b69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292869493ce64e4aa4305eae4f1f2a246d50d0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292869493ce64e4aa4305eae4f1f2a246d50d0b0", "html_url": "https://github.com/rust-lang/rust/commit/292869493ce64e4aa4305eae4f1f2a246d50d0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292869493ce64e4aa4305eae4f1f2a246d50d0b0/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1639769ec2ef5ff297986f63b2954091c9c95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1639769ec2ef5ff297986f63b2954091c9c95c", "html_url": "https://github.com/rust-lang/rust/commit/bb1639769ec2ef5ff297986f63b2954091c9c95c"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "a4ade54604e0257cc3c729a4e6e1d52ca2021cf1", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292869493ce64e4aa4305eae4f1f2a246d50d0b0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292869493ce64e4aa4305eae4f1f2a246d50d0b0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=292869493ce64e4aa4305eae4f1f2a246d50d0b0", "patch": "@@ -339,7 +339,9 @@ impl<V: Clone + HasTop> State<V> {\n     pub fn assign_idx(&mut self, target: PlaceIndex, result: ValueOrPlace<V>, map: &Map) {\n         match result {\n             ValueOrPlace::Value(value) => {\n-                // FIXME: What if not all tracked projections are overwritten? Can this happen?\n+                // First flood the target place in case we also track any projections (although\n+                // this scenario is currently not well-supported with the ValueOrPlace interface).\n+                self.flood_idx(target, map, V::top());\n                 if let Some(value_index) = map.places[target].value_index {\n                     self.0[value_index] = value;\n                 }"}, {"sha": "4c6c0bd8f3e24a2969e55635bc5f5cca74f154c5", "filename": "src/test/mir-opt/dataflow-const-prop/static_ref.main.DataflowConstProp.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/292869493ce64e4aa4305eae4f1f2a246d50d0b0/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/292869493ce64e4aa4305eae4f1f2a246d50d0b0/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff?ref=292869493ce64e4aa4305eae4f1f2a246d50d0b0", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/static_ref.rs:+0:11: +0:11\n+      let _1: usize;                       // in scope 0 at $DIR/static_ref.rs:+2:9: +2:10\n+      let mut _3: &usize;                  // in scope 0 at $DIR/static_ref.rs:+4:9: +4:11\n+      let _4: &usize;                      // in scope 0 at $DIR/static_ref.rs:+4:9: +4:11\n+      let _5: &usize;                      // in scope 0 at $DIR/static_ref.rs:+4:10: +4:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/static_ref.rs:+2:9: +2:10\n+          let mut _2: &usize;              // in scope 1 at $DIR/static_ref.rs:+3:9: +3:14\n+          scope 2 {\n+              debug r => _2;               // in scope 2 at $DIR/static_ref.rs:+3:9: +3:14\n+              let _6: usize;               // in scope 2 at $DIR/static_ref.rs:+5:9: +5:10\n+              scope 3 {\n+                  debug y => _6;           // in scope 3 at $DIR/static_ref.rs:+5:9: +5:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/static_ref.rs:+2:9: +2:10\n+          _1 = const 0_usize;              // scope 0 at $DIR/static_ref.rs:+2:13: +2:14\n+          StorageLive(_2);                 // scope 1 at $DIR/static_ref.rs:+3:9: +3:14\n+          _2 = &_1;                        // scope 1 at $DIR/static_ref.rs:+3:17: +3:19\n+          StorageLive(_3);                 // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n+          StorageLive(_4);                 // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n+          StorageLive(_5);                 // scope 2 at $DIR/static_ref.rs:+4:10: +4:11\n+          _5 = const {alloc1: &usize};     // scope 2 at $DIR/static_ref.rs:+4:10: +4:11\n+                                           // mir::Constant\n+                                           // + span: $DIR/static_ref.rs:8:10: 8:11\n+                                           // + literal: Const { ty: &usize, val: Value(Scalar(alloc1)) }\n+          _4 = &(*_5);                     // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n+          _3 = &(*_4);                     // scope 2 at $DIR/static_ref.rs:+4:9: +4:11\n+          _2 = move _3;                    // scope 2 at $DIR/static_ref.rs:+4:5: +4:11\n+          StorageDead(_3);                 // scope 2 at $DIR/static_ref.rs:+4:10: +4:11\n+          StorageDead(_5);                 // scope 2 at $DIR/static_ref.rs:+4:11: +4:12\n+          StorageDead(_4);                 // scope 2 at $DIR/static_ref.rs:+4:11: +4:12\n+          StorageLive(_6);                 // scope 2 at $DIR/static_ref.rs:+5:9: +5:10\n+          _6 = (*_2);                      // scope 2 at $DIR/static_ref.rs:+5:13: +5:15\n+          _0 = const ();                   // scope 0 at $DIR/static_ref.rs:+0:11: +6:2\n+          StorageDead(_6);                 // scope 2 at $DIR/static_ref.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/static_ref.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/static_ref.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/static_ref.rs:+6:2: +6:2\n+      }\n+  }\n+  \n+  alloc1 (static: P, size: 8, align: 8) {\n+      05 00 00 00 00 00 00 00                         \u2502 ........\n+  }\n+  "}, {"sha": "d5e8063cf018ccf4b424384e41cee41b26e76d24", "filename": "src/test/mir-opt/dataflow-const-prop/static_ref.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292869493ce64e4aa4305eae4f1f2a246d50d0b0/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292869493ce64e4aa4305eae4f1f2a246d50d0b0/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs?ref=292869493ce64e4aa4305eae4f1f2a246d50d0b0", "patch": "@@ -0,0 +1,10 @@\n+// unit-test: DataflowConstProp\n+\n+// EMIT_MIR static_ref.main.DataflowConstProp.diff\n+fn main() {\n+    static P: usize = 5;\n+    let x = 0;\n+    let mut r = &x;\n+    r = &P;\n+    let y = *r;\n+}"}]}