{"sha": "637f1492e7beb768c039b962fb04b6855d6e9461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzN2YxNDkyZTdiZWI3NjhjMDM5Yjk2MmZiMDRiNjg1NWQ2ZTk0NjE=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-08-27T14:33:36Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-09-11T23:02:44Z"}, "message": "Use question_mark feature in libstd.", "tree": {"sha": "5c9cb93cef91575d77d24c9a3af3e7fbd033dc4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9cb93cef91575d77d24c9a3af3e7fbd033dc4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637f1492e7beb768c039b962fb04b6855d6e9461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637f1492e7beb768c039b962fb04b6855d6e9461", "html_url": "https://github.com/rust-lang/rust/commit/637f1492e7beb768c039b962fb04b6855d6e9461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637f1492e7beb768c039b962fb04b6855d6e9461/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73e374ddbf66489c0565566d26e659e6ff80c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d73e374ddbf66489c0565566d26e659e6ff80c2c", "html_url": "https://github.com/rust-lang/rust/commit/d73e374ddbf66489c0565566d26e659e6ff80c2c"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "7389280b853dbfb87905dea8406c5ead548c3c8d", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637f1492e7beb768c039b962fb04b6855d6e9461/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637f1492e7beb768c039b962fb04b6855d6e9461/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=637f1492e7beb768c039b962fb04b6855d6e9461", "patch": "@@ -150,7 +150,7 @@ impl<T> Packet<T> {\n                     let timed_out = !wait_token.wait_max_until(deadline);\n                     // Try to reset the state\n                     if timed_out {\n-                        try!(self.abort_selection().map_err(Upgraded));\n+                        self.abort_selection().map_err(Upgraded)?;\n                     }\n                 } else {\n                     wait_token.wait();"}, {"sha": "61c8316467d9ab345fbefe290f1bff45a5390950", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/637f1492e7beb768c039b962fb04b6855d6e9461/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637f1492e7beb768c039b962fb04b6855d6e9461/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=637f1492e7beb768c039b962fb04b6855d6e9461", "patch": "@@ -187,8 +187,7 @@ impl<T> Packet<T> {\n             if let Some(deadline) = deadline {\n                 let timed_out = !wait_token.wait_max_until(deadline);\n                 if timed_out {\n-                    try!(self.abort_selection(/* was_upgrade = */ false)\n-                             .map_err(Upgraded));\n+                    self.abort_selection(/* was_upgrade = */ false).map_err(Upgraded)?;\n                 }\n             } else {\n                 wait_token.wait();"}, {"sha": "a8540fed9286f1aaae8f9843c25ec5f293d301e7", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/637f1492e7beb768c039b962fb04b6855d6e9461/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637f1492e7beb768c039b962fb04b6855d6e9461/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=637f1492e7beb768c039b962fb04b6855d6e9461", "patch": "@@ -153,11 +153,11 @@ pub fn demangle(writer: &mut Write, s: &str) -> io::Result<()> {\n                     macro_rules! demangle {\n                         ($($pat:expr => $demangled:expr),*) => ({\n                             $(if rest.starts_with($pat) {\n-                                try!(writer.write_all($demangled));\n+                                writer.write_all($demangled)?;\n                                 rest = &rest[$pat.len()..];\n                               } else)*\n                             {\n-                                try!(writer.write_all(rest.as_bytes()));\n+                                writer.write_all(rest.as_bytes())?;\n                                 break;\n                             }\n "}]}