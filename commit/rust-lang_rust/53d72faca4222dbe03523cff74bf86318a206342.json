{"sha": "53d72faca4222dbe03523cff74bf86318a206342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZDcyZmFjYTQyMjJkYmUwMzUyM2NmZjc0YmY4NjMxOGEyMDYzNDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-25T13:37:56Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-25T13:37:56Z"}, "message": "Merge pull request #235 from birkenfeld/fix\n\nall: remove unneeded deref and/or ref operations", "tree": {"sha": "e84f202b9ac729bf13cb53ed2316d53fcc3c4f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e84f202b9ac729bf13cb53ed2316d53fcc3c4f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53d72faca4222dbe03523cff74bf86318a206342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53d72faca4222dbe03523cff74bf86318a206342", "html_url": "https://github.com/rust-lang/rust/commit/53d72faca4222dbe03523cff74bf86318a206342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53d72faca4222dbe03523cff74bf86318a206342/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe85d457c0b1f05bcdf83c6b51c1b77098ee0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe85d457c0b1f05bcdf83c6b51c1b77098ee0fc", "html_url": "https://github.com/rust-lang/rust/commit/3fe85d457c0b1f05bcdf83c6b51c1b77098ee0fc"}, {"sha": "92a3394065e601f6f4ace7f374f5ce782d7b211d", "url": "https://api.github.com/repos/rust-lang/rust/commits/92a3394065e601f6f4ace7f374f5ce782d7b211d", "html_url": "https://github.com/rust-lang/rust/commit/92a3394065e601f6f4ace7f374f5ce782d7b211d"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "ad021f28a4d67ef45f43044c76ea6dab12b7ba2c", "filename": "src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -71,14 +71,14 @@ fn is_relevant_block(block: &Block) -> bool {\n             _ => ()\n         }\n     }\n-    block.expr.as_ref().map_or(false, |e| is_relevant_expr(&*e))\n+    block.expr.as_ref().map_or(false, |e| is_relevant_expr(e))\n }\n \n fn is_relevant_expr(expr: &Expr) -> bool {\n     match expr.node {\n         ExprBlock(ref block) => is_relevant_block(block),\n         ExprRet(Some(ref e)) | ExprParen(ref e) =>\n-            is_relevant_expr(&*e),\n+            is_relevant_expr(e),\n         ExprRet(None) | ExprBreak(_) | ExprMac(_) => false,\n         ExprCall(ref path_expr, _) => {\n             if let ExprPath(_, ref path) = path_expr.node {"}, {"sha": "e0b25b7283bf8ab8355cf8b6cf1a717eff137e25", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -79,7 +79,7 @@ fn single_stmt_of_block(block: &Block) -> Option<&Expr> {\n         } else { None }\n     } else {\n         if block.stmts.is_empty() {\n-            if let Some(ref p) = block.expr { Some(&*p) } else { None }\n+            if let Some(ref p) = block.expr { Some(p) } else { None }\n         } else { None }\n     }\n }"}, {"sha": "1a828317fc2de35a77151d2d93ecff6418c36736", "filename": "src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -222,7 +222,7 @@ fn neg_float_str(s: String) -> String {\n     if s.starts_with('-') {\n         s[1..].to_owned()\n     } else {\n-        format!(\"-{}\", &*s)\n+        format!(\"-{}\", s)\n     }\n }\n \n@@ -299,7 +299,7 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n             ExprPath(_, _) => self.fetch_path(e),\n             ExprBlock(ref block) => self.block(block),\n             ExprIf(ref cond, ref then, ref otherwise) =>\n-                self.ifthenelse(&*cond, &*then, &*otherwise),\n+                self.ifthenelse(cond, then, otherwise),\n             ExprLit(ref lit) => Some(lit_to_constant(&lit.node)),\n             ExprVec(ref vec) => self.multi(vec).map(ConstantVec),\n             ExprTup(ref tup) => self.multi(tup).map(ConstantTuple),\n@@ -362,7 +362,7 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n             if b {\n                 self.block(then)\n             } else {\n-                otherwise.as_ref().and_then(|ref expr| self.expr(expr))\n+                otherwise.as_ref().and_then(|expr| self.expr(expr))\n             }\n         } else { None }\n     }"}, {"sha": "481512abc6270fd8172afd542cbf82144c9c86f9", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -22,7 +22,7 @@ impl LintPass for EtaPass {\n             ExprCall(_, ref args) |\n             ExprMethodCall(_, _, ref args) => {\n                 for arg in args {\n-                    check_closure(cx, &*arg)\n+                    check_closure(cx, arg)\n                 }\n             },\n             _ => (),"}, {"sha": "ca3ce51bf7cc6deb3c8fafa8b421f299b186b45a", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -102,7 +102,7 @@ fn check_len_zero(cx: &Context, span: Span, method: &SpannedIdent,\n                   args: &[P<Expr>], lit: &Lit, op: &str) {\n     if let Spanned{node: LitInt(0, _), ..} = *lit {\n         if method.node.name == \"len\" && args.len() == 1 &&\n-            has_is_empty(cx, &*args[0]) {\n+            has_is_empty(cx, &args[0]) {\n                 span_lint(cx, LEN_ZERO, span, &format!(\n                     \"consider replacing the len comparison with `{}{}.is_empty()`\",\n                     op, snippet(cx, args[0].span, \"_\")))"}, {"sha": "660d68535bd5a593bb03ef8fd51825ca669844bb", "filename": "src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -26,14 +26,14 @@ impl LintPass for LifetimePass {\n \n     fn check_impl_item(&mut self, cx: &Context, item: &ImplItem) {\n         if let MethodImplItem(ref sig, _) = item.node {\n-            check_fn_inner(cx, &*sig.decl, Some(&sig.explicit_self),\n+            check_fn_inner(cx, &sig.decl, Some(&sig.explicit_self),\n                            &sig.generics.lifetimes, item.span);\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &Context, item: &TraitItem) {\n         if let MethodTraitItem(ref sig, _) = item.node {\n-            check_fn_inner(cx, &*sig.decl, Some(&sig.explicit_self),\n+            check_fn_inner(cx, &sig.decl, Some(&sig.explicit_self),\n                            &sig.generics.lifetimes, item.span);\n         }\n     }\n@@ -92,7 +92,7 @@ fn could_use_elision(func: &FnDecl, slf: Option<&ExplicitSelf>,\n     }\n     // extract lifetimes in input argument types\n     for arg in &func.inputs {\n-        walk_ty(&mut input_visitor, &*arg.ty);\n+        walk_ty(&mut input_visitor, &arg.ty);\n     }\n     // extract lifetimes in output type\n     if let Return(ref ty) = func.output {"}, {"sha": "ca8d3990fc5da424eb0c65297891b4d43baa6682", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -95,9 +95,9 @@ fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n             let PatEnum(_, Some(ref somepats)) = innerarms[0].pats[0].node,\n             somepats.len() == 1\n         ], {\n-            return Some((&*somepats[0],\n-                         &*iterargs[0],\n-                         &*innerarms[0].body));\n+            return Some((&somepats[0],\n+                         &iterargs[0],\n+                         &innerarms[0].body));\n         }\n     }\n     None"}, {"sha": "d1c74daf2cd189c87515ea5cf98e1ec625ddf654", "filename": "src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -34,7 +34,7 @@ impl LintPass for MatchPass {\n                 // when an enum is extended, so we don't consider these cases\n                 arms[1].pats[0].node == PatWild(PatWildSingle) &&\n                 // finally, we don't want any content in the second arm (unit or empty block)\n-                is_unit_expr(&*arms[1].body)\n+                is_unit_expr(&arms[1].body)\n             {\n                 let body_code = snippet_block(cx, arms[0].body.span, \"..\");\n                 let body_code = if let ExprBlock(_) = arms[0].body.node {\n@@ -46,10 +46,10 @@ impl LintPass for MatchPass {\n                       \"you seem to be trying to use match for \\\n                       destructuring a single pattern. Did you mean to \\\n                       use `if let`?\",\n-                      &*format!(\"try\\nif let {} = {} {}\",\n-                                snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                snippet(cx, ex.span, \"..\"),\n-                                body_code)\n+                      &format!(\"try\\nif let {} = {} {}\",\n+                               snippet(cx, arms[0].pats[0].span, \"..\"),\n+                               snippet(cx, ex.span, \"..\"),\n+                               body_code)\n                 );\n             }\n "}, {"sha": "07693e11d996589389f58fa8286ac07afcc1c57a", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -24,7 +24,7 @@ impl LintPass for MethodsPass {\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n-            let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(&*args[0]));\n+            let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(&args[0]));\n             if ident.node.name == \"unwrap\" {\n                 if match_type(cx, obj_ty, &OPTION_PATH) {\n                     span_lint(cx, OPTION_UNWRAP_USED, expr.span,"}, {"sha": "2290af38bb5745621441cb1f5187b54b7bfde417", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -203,7 +203,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \n fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n     args.len() == 1 && if let ty::TyStr =\n-        walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n+        walk_ptrs_ty(cx.tcx.expr_ty(&args[0])).sty { true } else { false }\n }\n \n declare_lint!(pub MODULO_ONE, Warn, \"taking a number modulo 1, which always returns 0\");"}, {"sha": "0fe52c44189cdb584d1e8e993ef9c22a3b43853e", "filename": "src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -5,7 +5,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n \n-use utils::{de_p, span_lint, snippet};\n+use utils::{span_lint, snippet};\n \n declare_lint! {\n     pub NEEDLESS_BOOL,\n@@ -55,7 +55,7 @@ impl LintPass for NeedlessBool {\n \n fn fetch_bool_block(block: &Block) -> Option<bool> {\n     if block.stmts.is_empty() {\n-        block.expr.as_ref().map(de_p).and_then(fetch_bool_expr)\n+        block.expr.as_ref().and_then(|e| fetch_bool_expr(e))\n     } else { None }\n }\n "}, {"sha": "bcbd8dad68a9c74b3f25255c32544f09f9f0bfb5", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -45,7 +45,7 @@ impl LintPass for PtrArg {\n \n fn check_fn(cx: &Context, decl: &FnDecl) {\n     for arg in &decl.inputs {\n-        if let Some(pat_ty) = cx.tcx.pat_ty_opt(&*arg.pat) {\n+        if let Some(pat_ty) = cx.tcx.pat_ty_opt(&arg.pat) {\n             if let ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = pat_ty.sty {\n                 if match_type(cx, ty, &VEC_PATH) {\n                     span_lint(cx, PTR_ARG, arg.ty.span,"}, {"sha": "301072f79123d08598123c2fda3f7f9cef972d69", "filename": "src/returns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -50,7 +50,7 @@ impl ReturnPass {\n             // a match expr, check all arms\n             ExprMatch(_, ref arms, _) => {\n                 for arm in arms {\n-                    self.check_final_expr(cx, &*arm.body);\n+                    self.check_final_expr(cx, &arm.body);\n                 }\n             }\n             _ => { }\n@@ -76,7 +76,7 @@ impl ReturnPass {\n                 let PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node,\n                 let Some(ref retexpr) = block.expr,\n                 let ExprPath(_, ref path) = retexpr.node,\n-                match_path(path, &[&*id.name.as_str()])\n+                match_path(path, &[&id.name.as_str()])\n             ], {\n                 self.emit_let_lint(cx, retexpr.span, initexpr.span);\n             }"}, {"sha": "d03f4d53c606b835a4e0a28f7997522b1ad2f479", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -70,8 +70,8 @@ fn is_add(cx: &Context, src: &Expr, target: &Expr) -> bool {\n             is_exp_equal(cx, target, left),\n         ExprBlock(ref block) => block.stmts.is_empty() &&\n             block.expr.as_ref().map_or(false,\n-                |expr| is_add(cx, &*expr, target)),\n-        ExprParen(ref expr) => is_add(cx, &*expr, target),\n+                |expr| is_add(cx, expr, target)),\n+        ExprParen(ref expr) => is_add(cx, expr, target),\n         _ => false\n     }\n }"}, {"sha": "7479a65b6ee5d18b9862cf301944d815fe8f8713", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -55,7 +55,7 @@ declare_lint!(pub LET_UNIT_VALUE, Warn,\n fn check_let_unit(cx: &Context, decl: &Decl, info: Option<&ExpnInfo>) {\n     if in_macro(cx, info) { return; }\n     if let DeclLocal(ref local) = decl.node {\n-        let bindtype = &cx.tcx.pat_ty(&*local.pat).sty;\n+        let bindtype = &cx.tcx.pat_ty(&local.pat).sty;\n         if *bindtype == ty::TyTuple(vec![]) {\n             span_lint(cx, LET_UNIT_VALUE, decl.span, &format!(\n                 \"this let-binding has unit value. Consider omitting `let {} =`\",\n@@ -210,7 +210,7 @@ impl LintPass for CastPass {\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprCast(ref ex, _) = expr.node {\n-            let (cast_from, cast_to) = (cx.tcx.expr_ty(&*ex), cx.tcx.expr_ty(expr));\n+            let (cast_from, cast_to) = (cx.tcx.expr_ty(ex), cx.tcx.expr_ty(expr));\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false) => {\n@@ -263,14 +263,14 @@ impl LintPass for TypeComplexityPass {\n     }\n \n     fn check_struct_field(&mut self, cx: &Context, field: &StructField) {\n-        check_type(cx, &*field.node.ty);\n+        check_type(cx, &field.node.ty);\n     }\n \n     fn check_variant(&mut self, cx: &Context, var: &Variant, _: &Generics) {\n         // StructVariant is covered by check_struct_field\n         if let TupleVariantKind(ref args) = var.node.kind {\n             for arg in args {\n-                check_type(cx, &*arg.ty);\n+                check_type(cx, &arg.ty);\n             }\n         }\n     }\n@@ -312,7 +312,7 @@ impl LintPass for TypeComplexityPass {\n \n fn check_fndecl(cx: &Context, decl: &FnDecl) {\n     for arg in &decl.inputs {\n-        check_type(cx, &*arg.ty);\n+        check_type(cx, &arg.ty);\n     }\n     if let Return(ref ty) = decl.output {\n         check_type(cx, ty);"}, {"sha": "394204bedfc714e11f5ab4089b064523b8d36150", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d72faca4222dbe03523cff74bf86318a206342/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d72faca4222dbe03523cff74bf86318a206342/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=53d72faca4222dbe03523cff74bf86318a206342", "patch": "@@ -1,7 +1,6 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::{ExpnInfo, Span};\n-use syntax::ptr::P;\n use rustc::ast_map::Node::NodeExpr;\n use rustc::middle::ty;\n use std::borrow::Cow;\n@@ -130,9 +129,6 @@ pub fn get_parent_expr<'c>(cx: &'c Context, e: &Expr) -> Option<&'c Expr> {\n         if let NodeExpr(parent) = node { Some(parent) } else { None } )\n }\n \n-/// dereference a P<T> and return a ref on the result\n-pub fn de_p<T>(p: &P<T>) -> &T { &*p }\n-\n #[cfg(not(feature=\"structured_logging\"))]\n pub fn span_lint(cx: &Context, lint: &'static Lint, sp: Span, msg: &str) {\n     cx.span_lint(lint, sp, msg);"}]}