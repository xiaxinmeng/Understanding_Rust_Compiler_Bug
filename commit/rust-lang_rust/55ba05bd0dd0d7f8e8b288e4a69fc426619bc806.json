{"sha": "55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YmEwNWJkMGRkMGQ3ZjhlOGIyODhlNGE2OWZjNDI2NjE5YmM4MDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-29T22:20:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-01T17:53:25Z"}, "message": "rustc_plugin: Remove support for plugin arguments", "tree": {"sha": "631d7e83d164441fd8992597d5a99203ff0d6023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631d7e83d164441fd8992597d5a99203ff0d6023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "html_url": "https://github.com/rust-lang/rust/commit/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4007d4ef26eab44bdabc2b7574d032152264d3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4007d4ef26eab44bdabc2b7574d032152264d3ad", "html_url": "https://github.com/rust-lang/rust/commit/4007d4ef26eab44bdabc2b7574d032152264d3ad"}], "stats": {"total": 253, "additions": 97, "deletions": 156}, "files": [{"sha": "c7fd748663ce0d776a1e058b77e52d2199172634", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -21,10 +21,6 @@ the crate attribute `#![plugin(...)]`.  See the\n `rustc_driver::plugin` documentation for more about the\n mechanics of defining and loading a plugin.\n \n-If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n-interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s `args` method.\n-\n In the vast majority of cases, a plugin should *only* be used through\n `#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n pull in all of libsyntax and librustc as dependencies of your crate.  This is"}, {"sha": "9c936492cbded40e3810566fdcd3a77be7bc1cde", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -283,7 +283,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         )\n     ),\n     (\n-        sym::plugin, CrateLevel, template!(List: \"name|name(args)\"),\n+        sym::plugin, CrateLevel, template!(List: \"name\"),\n         Gated(\n             Stability::Deprecated(\n                 \"https://github.com/rust-lang/rust/pull/64675\","}, {"sha": "1d181faa09a2e0caff192c689f3e35360278353b", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -229,8 +229,7 @@ pub fn register_plugins<'a>(\n \n     time(sess, \"plugin registration\", || {\n         for registrar in registrars {\n-            registry.args_hidden = Some(registrar.args);\n-            (registrar.fun)(&mut registry);\n+            registrar(&mut registry);\n         }\n     });\n "}, {"sha": "8150af5b2b691d2225c9ebe848884b189dffd3dd", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 68, "deletions": 97, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -9,27 +9,15 @@ use std::borrow::ToOwned;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n-use syntax::ast;\n+use syntax::ast::{Crate, Ident};\n use syntax::struct_span_err;\n-use syntax::symbol::{Symbol, kw, sym};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax::symbol::sym;\n+use syntax_pos::Span;\n \n use rustc_error_codes::*;\n \n /// Pointer to a registrar function.\n-pub type PluginRegistrarFun =\n-    fn(&mut Registry<'_>);\n-\n-pub struct PluginRegistrar {\n-    pub fun: PluginRegistrarFun,\n-    pub args: Vec<ast::NestedMetaItem>,\n-}\n-\n-struct PluginLoader<'a> {\n-    sess: &'a Session,\n-    metadata_loader: &'a dyn MetadataLoader,\n-    plugins: Vec<PluginRegistrar>,\n-}\n+type PluginRegistrarFn = fn(&mut Registry<'_>);\n \n fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n     struct_span_err!(sess, span, E0498, \"malformed `plugin` attribute\")\n@@ -40,98 +28,81 @@ fn call_malformed_plugin_attribute(sess: &Session, span: Span) {\n /// Read plugin metadata and dynamically load registrar functions.\n pub fn load_plugins(sess: &Session,\n                     metadata_loader: &dyn MetadataLoader,\n-                    krate: &ast::Crate,\n-                    addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrar> {\n-    let mut loader = PluginLoader { sess, metadata_loader, plugins: Vec::new() };\n-\n-    // do not report any error now. since crate attributes are\n-    // not touched by expansion, every use of plugin without\n-    // the feature enabled will result in an error later...\n-    if sess.features_untracked().plugin {\n-        for attr in &krate.attrs {\n-            if !attr.check_name(sym::plugin) {\n-                continue;\n-            }\n-\n-            let plugins = match attr.meta_item_list() {\n-                Some(xs) => xs,\n-                None => continue,\n-            };\n+                    krate: &Crate,\n+                    addl_plugins: Option<Vec<String>>) -> Vec<PluginRegistrarFn> {\n+    let mut plugins = Vec::new();\n+    let mut load_plugin = |ident| load_plugin(&mut plugins, sess, metadata_loader, ident);\n+\n+    for attr in &krate.attrs {\n+        if !attr.check_name(sym::plugin) {\n+            continue;\n+        }\n \n-            for plugin in plugins {\n-                // plugins must have a name and can't be key = value\n-                let name = plugin.name_or_empty();\n-                if name != kw::Invalid && !plugin.is_value_str() {\n-                    let args = plugin.meta_item_list().map(ToOwned::to_owned);\n-                    loader.load_plugin(plugin.span(), name, args.unwrap_or_default());\n-                } else {\n-                    call_malformed_plugin_attribute(sess, attr.span);\n-                }\n+        for plugin in attr.meta_item_list().unwrap_or_default() {\n+            match plugin.ident() {\n+                Some(ident) if plugin.is_word() => load_plugin(ident),\n+                _ => call_malformed_plugin_attribute(sess, plugin.span()),\n             }\n         }\n     }\n \n-    if let Some(plugins) = addl_plugins {\n-        for plugin in plugins {\n-            loader.load_plugin(DUMMY_SP, Symbol::intern(&plugin), vec![]);\n-        }\n+    for plugin in addl_plugins.unwrap_or_default() {\n+        load_plugin(Ident::from_str(&plugin));\n     }\n \n-    loader.plugins\n+    plugins\n }\n \n-impl<'a> PluginLoader<'a> {\n-    fn load_plugin(&mut self, span: Span, name: Symbol, args: Vec<ast::NestedMetaItem>) {\n-        let registrar = locator::find_plugin_registrar(self.sess, self.metadata_loader, span, name);\n-\n-        if let Some((lib, disambiguator)) = registrar {\n-            let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator);\n-            let fun = self.dylink_registrar(span, lib, symbol);\n-            self.plugins.push(PluginRegistrar {\n-                fun,\n-                args,\n-            });\n-        }\n+fn load_plugin(plugins: &mut Vec<PluginRegistrarFn>,\n+               sess: &Session,\n+               metadata_loader: &dyn MetadataLoader,\n+               ident: Ident) {\n+    let registrar = locator::find_plugin_registrar(sess, metadata_loader, ident.span, ident.name);\n+\n+    if let Some((lib, disambiguator)) = registrar {\n+        let symbol = sess.generate_plugin_registrar_symbol(disambiguator);\n+        let fun = dylink_registrar(sess, ident.span, lib, symbol);\n+        plugins.push(fun);\n     }\n+}\n \n-    // Dynamically link a registrar function into the compiler process.\n-    fn dylink_registrar(&mut self,\n-                        span: Span,\n-                        path: PathBuf,\n-                        symbol: String) -> PluginRegistrarFun {\n-        use rustc_metadata::dynamic_lib::DynamicLibrary;\n-\n-        // Make sure the path contains a / or the linker will search for it.\n-        let path = env::current_dir().unwrap().join(&path);\n-\n-        let lib = match DynamicLibrary::open(Some(&path)) {\n-            Ok(lib) => lib,\n-            // this is fatal: there are almost certainly macros we need\n-            // inside this crate, so continue would spew \"macro undefined\"\n-            // errors\n-            Err(err) => {\n-                self.sess.span_fatal(span, &err)\n-            }\n-        };\n-\n-        unsafe {\n-            let registrar =\n-                match lib.symbol(&symbol) {\n-                    Ok(registrar) => {\n-                        mem::transmute::<*mut u8,PluginRegistrarFun>(registrar)\n-                    }\n-                    // again fatal if we can't register macros\n-                    Err(err) => {\n-                        self.sess.span_fatal(span, &err)\n-                    }\n-                };\n-\n-            // Intentionally leak the dynamic library. We can't ever unload it\n-            // since the library can make things that will live arbitrarily long\n-            // (e.g., an @-box cycle or a thread).\n-            mem::forget(lib);\n-\n-            registrar\n+// Dynamically link a registrar function into the compiler process.\n+fn dylink_registrar(sess: &Session,\n+                    span: Span,\n+                    path: PathBuf,\n+                    symbol: String) -> PluginRegistrarFn {\n+    use rustc_metadata::dynamic_lib::DynamicLibrary;\n+\n+    // Make sure the path contains a / or the linker will search for it.\n+    let path = env::current_dir().unwrap().join(&path);\n+\n+    let lib = match DynamicLibrary::open(Some(&path)) {\n+        Ok(lib) => lib,\n+        // this is fatal: there are almost certainly macros we need\n+        // inside this crate, so continue would spew \"macro undefined\"\n+        // errors\n+        Err(err) => {\n+            sess.span_fatal(span, &err)\n         }\n+    };\n+\n+    unsafe {\n+        let registrar =\n+            match lib.symbol(&symbol) {\n+                Ok(registrar) => {\n+                    mem::transmute::<*mut u8, PluginRegistrarFn>(registrar)\n+                }\n+                // again fatal if we can't register macros\n+                Err(err) => {\n+                    sess.span_fatal(span, &err)\n+                }\n+            };\n+\n+        // Intentionally leak the dynamic library. We can't ever unload it\n+        // since the library can make things that will live arbitrarily long\n+        // (e.g., an @-box cycle or a thread).\n+        mem::forget(lib);\n+\n+        registrar\n     }\n }"}, {"sha": "91e6901ff50734322f97bf9d327e2f2d177c854b", "filename": "src/librustc_plugin_impl/registry.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_plugin_impl%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Flibrustc_plugin_impl%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fregistry.rs?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -2,7 +2,6 @@\n \n use rustc::lint::LintStore;\n use rustc::session::Session;\n-use syntax::ast;\n use syntax_pos::Span;\n \n use std::borrow::ToOwned;\n@@ -23,9 +22,6 @@ pub struct Registry<'a> {\n     /// The `LintStore` allows plugins to register new lints.\n     pub lint_store: &'a mut LintStore,\n \n-    #[doc(hidden)]\n-    pub args_hidden: Option<Vec<ast::NestedMetaItem>>,\n-\n     #[doc(hidden)]\n     pub krate_span: Span,\n \n@@ -39,26 +35,11 @@ impl<'a> Registry<'a> {\n         Registry {\n             sess,\n             lint_store,\n-            args_hidden: None,\n             krate_span,\n             llvm_passes: vec![],\n         }\n     }\n \n-    /// Gets the plugin's arguments, if any.\n-    ///\n-    /// These are specified inside the `plugin` crate attribute as\n-    ///\n-    /// ```no_run\n-    /// #![plugin(my_plugin_name(... args ...))]\n-    /// ```\n-    ///\n-    /// Returns empty slice in case the plugin was loaded\n-    /// with `--extra-plugins`\n-    pub fn args(&self) -> &[ast::NestedMetaItem] {\n-        self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n-    }\n-\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "85eaf53364315580d6005d214943b254435c0947", "filename": "src/test/ui-fulldeps/feature-gate-plugin.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.rs?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -1,6 +1,7 @@\n-// Test that `#![plugin(...)]` attribute is gated by `plugin` feature gate\n+// aux-build:empty-plugin.rs\n+// ignore-stage1\n \n-#![plugin(foo)]\n+#![plugin(empty_plugin)]\n //~^ ERROR compiler plugins are deprecated\n //~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-plugin.rs"}, {"sha": "c922325c341ea674905db7758cf03c573fba48ab", "filename": "src/test/ui-fulldeps/feature-gate-plugin.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffeature-gate-plugin.stderr?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: compiler plugins are deprecated\n-  --> $DIR/feature-gate-plugin.rs:3:1\n+  --> $DIR/feature-gate-plugin.rs:4:1\n    |\n-LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/feature-gate-plugin.rs:3:1\n+  --> $DIR/feature-gate-plugin.rs:4:1\n    |\n-LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-plugin.stderr"}, {"sha": "488f2b775bf0b48d5aec7e1d228d29fcae48bc24", "filename": "src/test/ui-fulldeps/plugin-args-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.rs?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -1,8 +1,9 @@\n-// check-pass\n // aux-build:empty-plugin.rs\n // ignore-stage1\n \n #![feature(plugin)]\n-#![plugin(empty_plugin())] //~ WARNING compiler plugins are deprecated\n+#![plugin(empty_plugin(args))]\n+//~^ ERROR malformed `plugin` attribute\n+//~| WARNING compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "fcdb07f99bdc5765260ba34b454609207e00233a", "filename": "src/test/ui-fulldeps/plugin-args-2.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -1,8 +1,16 @@\n+error[E0498]: malformed `plugin` attribute\n+  --> $DIR/plugin-args-2.rs:5:11\n+   |\n+LL | #![plugin(empty_plugin(args))]\n+   |           ^^^^^^^^^^^^^^^^^^ malformed attribute\n+\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-2.rs:6:1\n+  --> $DIR/plugin-args-2.rs:5:1\n    |\n-LL | #![plugin(empty_plugin())]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n+LL | #![plugin(empty_plugin(args))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n+error: aborting due to previous error\n+"}, {"sha": "c8818cc6c3178b33d02811586140ffe96c4e03ff", "filename": "src/test/ui-fulldeps/plugin-args-3.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.rs?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-// aux-build:empty-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(empty_plugin(hello(there), how(are=\"you\")))] //~ WARNING compiler plugins are deprecated\n-\n-fn main() {}"}, {"sha": "278853e0881ba7dac601fceceee7a1f9253897e1", "filename": "src/test/ui-fulldeps/plugin-args-3.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4007d4ef26eab44bdabc2b7574d032152264d3ad/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr?ref=4007d4ef26eab44bdabc2b7574d032152264d3ad", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-args-3.rs:6:1\n-   |\n-LL | #![plugin(empty_plugin(hello(there), how(are=\"you\")))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}, {"sha": "2a4f772850e92b69851a6c4e53adba4abde57418", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n+   | ^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-1.rs:2:1"}, {"sha": "fe116a4061025ff7ee1812e014a0503619a4308b", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -2,7 +2,7 @@ error: malformed `plugin` attribute input\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name)]`\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-2.rs:2:1"}, {"sha": "4af933c15f61ed7ca174f3ffdcd3165ac513649a", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55ba05bd0dd0d7f8e8b288e4a69fc426619bc806/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=55ba05bd0dd0d7f8e8b288e4a69fc426619bc806", "patch": "@@ -1,8 +1,8 @@\n error[E0498]: malformed `plugin` attribute\n-  --> $DIR/malformed-plugin-3.rs:2:1\n+  --> $DIR/malformed-plugin-3.rs:2:11\n    |\n LL | #![plugin(foo=\"bleh\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^ malformed attribute\n+   |           ^^^^^^^^^^ malformed attribute\n \n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-3.rs:2:1"}]}