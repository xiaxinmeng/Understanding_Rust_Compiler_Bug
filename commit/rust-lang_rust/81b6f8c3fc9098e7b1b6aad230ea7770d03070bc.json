{"sha": "81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjZmOGMzZmM5MDk4ZTdiMWI2YWFkMjMwZWE3NzcwZDAzMDcwYmM=", "commit": {"author": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2020-01-28T16:46:49Z"}, "committer": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2020-01-28T16:46:49Z"}, "message": "Add private is_empty method to RangeMut", "tree": {"sha": "a13cfad117aa2c7fc3ae8ce8ae12c09f001b2980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a13cfad117aa2c7fc3ae8ce8ae12c09f001b2980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "html_url": "https://github.com/rust-lang/rust/commit/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc/comments", "author": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a7c9421e78a29610e019b4030ca011bcd0bfd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a7c9421e78a29610e019b4030ca011bcd0bfd5", "html_url": "https://github.com/rust-lang/rust/commit/60a7c9421e78a29610e019b4030ca011bcd0bfd5"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "d0c56d83d722a3064865113882cf51a4e007df94", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b6f8c3fc9098e7b1b6aad230ea7770d03070bc/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=81b6f8c3fc9098e7b1b6aad230ea7770d03070bc", "patch": "@@ -247,7 +247,7 @@ impl<K: Clone + Ord, V: Clone> BTreeClone for BTreeMap<K, V> {\n         // replaces every key-value pair in `self`. Since `oiter` is in sorted\n         // order and the structure of the `BTreeMap` stays the same,\n         // the BTree invariants are maintained at the end of the loop\n-        while siter.front != siter.back {\n+        while !siter.is_empty() {\n             if let Some((ok, ov)) = oiter.next() {\n                 // SAFETY: This is safe because the `siter.front != siter.back` check\n                 // ensures that `siter` is nonempty\n@@ -1764,7 +1764,7 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.front == self.back {\n+        if self.is_empty() {\n             None\n         } else {\n             unsafe {\n@@ -1780,6 +1780,10 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n+    fn is_empty(&self) -> bool {\n+        self.front == self.back\n+    }\n+\n     unsafe fn next_unchecked(&mut self) -> (&'a mut K, &'a mut V) {\n         let handle = ptr::read(&self.front);\n \n@@ -1816,7 +1820,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.front == self.back { None } else { unsafe { Some(self.next_back_unchecked()) } }\n+        if self.is_empty() { None } else { unsafe { Some(self.next_back_unchecked()) } }\n     }\n }\n "}]}