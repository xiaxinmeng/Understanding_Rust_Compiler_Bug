{"sha": "78db333f9dd6786b156e2b3e4bec85f959d22606", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZGIzMzNmOWRkNjc4NmIxNTZlMmIzZTRiZWM4NWY5NTlkMjI2MDY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T19:18:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-09T19:18:34Z"}, "message": "Rollup merge of #67725 - ssomers:into_key_slice_mut, r=RalfJung\n\nSimplify into_key_slice_mut\n\nRemove a rare and tiny but superfluous run-time check from into_key_slice_mut.\n\nIn #67459, I wrote that \"`get_mut` [...] does visit `into_key_slice_mut`\" and that was wrong. No function that operates on a map that (still) has a shared root ever dives into `into_key_slice_mut`.  So it's more clear to remove the (previously existing, and always incomplete) code it has for dealing with shared roots, as well as a petty performance improvement for those using exotically aligned key types.\n\n~~Also, some testing of the `range` function initially added to #67686 but hardly related.~~\n\nr? @RalfJung", "tree": {"sha": "9058a3e8dcb00399ee292fa91d1bf4f111675908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9058a3e8dcb00399ee292fa91d1bf4f111675908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78db333f9dd6786b156e2b3e4bec85f959d22606", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeF3yKCRBK7hj4Ov3rIwAAdHIIAHvXy5LELqog7JCMEo7lQ0v2\ngtEU799ClobMVcyzy1919Borjnl64T7O4yfINnIv/bs4V+UsGk9QVS6C2w+aFhWs\nQyq08sKSGXp9JuL6kvjPV+nTO8yGlks5ZLc9yq4OcP9oaf/3/4phtUBeoLgQeaNK\ndltesEHHmSwR+kHBoFOmXUOPBo60Vyp4cG5M81Wp4xjoQpCybDODu4aVJZLBaiqn\nXi6QnmMgdZKR/p8UAwSnxw1ZoOnXfYHvtr2ppte/uDaUCmtjRxbBVaUeITWsb3rZ\nrly2gvFTsSWjuJepeOuwE1jlBAaaa8B9P6DERra2wYMAqTyS8YL7t4SrRZFv3TI=\n=zJ0G\n-----END PGP SIGNATURE-----\n", "payload": "tree 9058a3e8dcb00399ee292fa91d1bf4f111675908\nparent 02ef0dcf692c3fbd822ba8f7859d3a827a5d9800\nparent 9b92bf83156fbe4892fd7a1aa186ce15cce3b770\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578597514 +0900\ncommitter GitHub <noreply@github.com> 1578597514 +0900\n\nRollup merge of #67725 - ssomers:into_key_slice_mut, r=RalfJung\n\nSimplify into_key_slice_mut\n\nRemove a rare and tiny but superfluous run-time check from into_key_slice_mut.\n\nIn #67459, I wrote that \"`get_mut` [...] does visit `into_key_slice_mut`\" and that was wrong. No function that operates on a map that (still) has a shared root ever dives into `into_key_slice_mut`.  So it's more clear to remove the (previously existing, and always incomplete) code it has for dealing with shared roots, as well as a petty performance improvement for those using exotically aligned key types.\n\n~~Also, some testing of the `range` function initially added to #67686 but hardly related.~~\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78db333f9dd6786b156e2b3e4bec85f959d22606", "html_url": "https://github.com/rust-lang/rust/commit/78db333f9dd6786b156e2b3e4bec85f959d22606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78db333f9dd6786b156e2b3e4bec85f959d22606/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800", "html_url": "https://github.com/rust-lang/rust/commit/02ef0dcf692c3fbd822ba8f7859d3a827a5d9800"}, {"sha": "9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b92bf83156fbe4892fd7a1aa186ce15cce3b770", "html_url": "https://github.com/rust-lang/rust/commit/9b92bf83156fbe4892fd7a1aa186ce15cce3b770"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "f40e0b0c30479ae5a5b7fd3faa36faf8481631a7", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78db333f9dd6786b156e2b3e4bec85f959d22606/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78db333f9dd6786b156e2b3e4bec85f959d22606/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=78db333f9dd6786b156e2b3e4bec85f959d22606", "patch": "@@ -397,6 +397,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     /// Borrows a view into the values stored in the node.\n     /// The caller must ensure that the node is not the shared root.\n+    /// This function is not public, so doesn't have to support shared roots like `keys` does.\n     fn vals(&self) -> &[V] {\n         self.reborrow().into_val_slice()\n     }\n@@ -514,6 +515,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     /// The caller must ensure that the node is not the shared root.\n+    /// This function is not public, so doesn't have to support shared roots like `keys` does.\n     fn keys_mut(&mut self) -> &mut [K] {\n         unsafe { self.reborrow_mut().into_key_slice_mut() }\n     }\n@@ -589,20 +591,15 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         unsafe { &mut *(self.root as *mut Root<K, V>) }\n     }\n \n+    /// The caller must ensure that the node is not the shared root.\n     fn into_key_slice_mut(mut self) -> &'a mut [K] {\n-        // Same as for `into_key_slice` above, we try to avoid a run-time check.\n-        if (mem::align_of::<NodeHeader<K, V, K>>() > mem::align_of::<NodeHeader<K, V>>()\n-            || mem::size_of::<NodeHeader<K, V, K>>() != mem::size_of::<NodeHeader<K, V>>())\n-            && self.is_shared_root()\n-        {\n-            &mut []\n-        } else {\n-            unsafe {\n-                slice::from_raw_parts_mut(\n-                    MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).keys),\n-                    self.len(),\n-                )\n-            }\n+        debug_assert!(!self.is_shared_root());\n+        // We cannot be the shared root, so `as_leaf_mut` is okay.\n+        unsafe {\n+            slice::from_raw_parts_mut(\n+                MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).keys),\n+                self.len(),\n+            )\n         }\n     }\n "}, {"sha": "48cbf67eea2542afa0805698048011bd3db6d9c5", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78db333f9dd6786b156e2b3e4bec85f959d22606/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78db333f9dd6786b156e2b3e4bec85f959d22606/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=78db333f9dd6786b156e2b3e4bec85f959d22606", "patch": "@@ -46,6 +46,11 @@ where\n     }\n }\n \n+/// Returns the index in the node at which the key (or an equivalent) exists\n+/// or could exist, and whether it exists in the node itself. If it doesn't\n+/// exist in the node itself, it may exist in the subtree with that index\n+/// (if the node has subtrees). If the key doesn't exist in node or subtree,\n+/// the returned index is the position or subtree to insert at.\n pub fn search_linear<BorrowType, K, V, Type, Q: ?Sized>(\n     node: &NodeRef<BorrowType, K, V, Type>,\n     key: &Q,\n@@ -54,6 +59,12 @@ where\n     Q: Ord,\n     K: Borrow<Q>,\n {\n+    // This function is defined over all borrow types (immutable, mutable, owned),\n+    // and may be called on the shared root in each case.\n+    // Crucially, we use `keys()` here, i.e., we work with immutable data.\n+    // `keys_mut()` does not support the shared root, so we cannot use it.\n+    // Using `keys()` is fine here even if BorrowType is mutable, as all we return\n+    // is an index -- not a reference.\n     for (i, k) in node.keys().iter().enumerate() {\n         match key.cmp(k.borrow()) {\n             Ordering::Greater => {}"}]}