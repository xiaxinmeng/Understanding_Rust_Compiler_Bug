{"sha": "e3928ccb2ffb16709573588aacaa125d2d4c3212", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOTI4Y2NiMmZmYjE2NzA5NTczNTg4YWFjYWExMjVkMmQ0YzMyMTI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T19:46:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T19:46:28Z"}, "message": "Rollup merge of #52854 - RalfJung:memrchr, r=Kimundi\n\nfix memrchr in miri\n\nThe previous PR https://github.com/rust-lang/rust/pull/52744 was not enough because it assumed that the split between the `mid` and `end` parts returned by `align_to` was aligned. But really the only guarantee we have is that the `mid` part is aligned, so make use of that.", "tree": {"sha": "4fe7f333c859d09d0a557f5aaab24b92469c35a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe7f333c859d09d0a557f5aaab24b92469c35a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3928ccb2ffb16709573588aacaa125d2d4c3212", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYg4VCRBK7hj4Ov3rIwAAdHIIAEUeo4l1abd5vlEdueXGJwBF\ncSZPblXVjQZrrwOkwp4v20fovrz72wLcGUTiyKyk4nhD631KhCTaCCb2x+9vuGwd\n4MWfsJ4kEE693Vp1F+NB/P9ThyHKRsI+hb8C9dR5hn3POqi7JRg72SiW2iUaKqKu\nVZuem2YRajIg8YdjljSZvdxPAKceYBNdE6gA28ISds0WD9+27HXif6br/zv2KzgH\npb+WLBtqLH6cU4CPWND6nOnaj/qpry4MX7/yR09elIBh9vcuAofRyQm9llMENRNy\nkieoMGm+cN1RCGEU101SqXY6OXNH6aeLpgTGQ7FeIPFucE9O+1WRJchsL4ASqEs=\n=mycC\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fe7f333c859d09d0a557f5aaab24b92469c35a8\nparent f52ef3b839e688ea02fad67e7b45e9d68f26614e\nparent 6d5694a0218c4b7c655425581d0bded79de9067a\nauthor Pietro Albini <pietro@pietroalbini.org> 1533152788 +0200\ncommitter GitHub <noreply@github.com> 1533152788 +0200\n\nRollup merge of #52854 - RalfJung:memrchr, r=Kimundi\n\nfix memrchr in miri\n\nThe previous PR https://github.com/rust-lang/rust/pull/52744 was not enough because it assumed that the split between the `mid` and `end` parts returned by `align_to` was aligned. But really the only guarantee we have is that the `mid` part is aligned, so make use of that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3928ccb2ffb16709573588aacaa125d2d4c3212", "html_url": "https://github.com/rust-lang/rust/commit/e3928ccb2ffb16709573588aacaa125d2d4c3212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3928ccb2ffb16709573588aacaa125d2d4c3212/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52ef3b839e688ea02fad67e7b45e9d68f26614e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52ef3b839e688ea02fad67e7b45e9d68f26614e", "html_url": "https://github.com/rust-lang/rust/commit/f52ef3b839e688ea02fad67e7b45e9d68f26614e"}, {"sha": "6d5694a0218c4b7c655425581d0bded79de9067a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5694a0218c4b7c655425581d0bded79de9067a", "html_url": "https://github.com/rust-lang/rust/commit/6d5694a0218c4b7c655425581d0bded79de9067a"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "c9d3c7fea9839e1ed3da89ae8b61971ff69c493f", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e3928ccb2ffb16709573588aacaa125d2d4c3212/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3928ccb2ffb16709573588aacaa125d2d4c3212/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=e3928ccb2ffb16709573588aacaa125d2d4c3212", "patch": "@@ -100,24 +100,30 @@ pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // - the first remaining bytes, < 2 word size\n     let len = text.len();\n     let ptr = text.as_ptr();\n-    let usize_bytes = mem::size_of::<usize>();\n+    type Chunk = usize;\n \n-    let mut offset = {\n-        // We call this just to obtain the length of the suffix\n-        let (_, _, suffix) = unsafe { text.align_to::<usize>() };\n-        len - suffix.len()\n+    let (min_aligned_offset, max_aligned_offset) = {\n+        // We call this just to obtain the length of the prefix and suffix.\n+        // In the middle we always process two chunks at once.\n+        let (prefix, _, suffix) = unsafe { text.align_to::<(Chunk, Chunk)>() };\n+        (prefix.len(), len - suffix.len())\n     };\n+\n+    let mut offset = max_aligned_offset;\n     if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {\n         return Some(offset + index);\n     }\n \n-    // search the body of the text\n+    // search the body of the text, make sure we don't cross min_aligned_offset.\n+    // offset is always aligned, so just testing `>` is sufficient and avoids possible\n+    // overflow.\n     let repeated_x = repeat_byte(x);\n+    let chunk_bytes = mem::size_of::<Chunk>();\n \n-    while offset >= 2 * usize_bytes {\n+    while offset > min_aligned_offset {\n         unsafe {\n-            let u = *(ptr.offset(offset as isize - 2 * usize_bytes as isize) as *const usize);\n-            let v = *(ptr.offset(offset as isize - usize_bytes as isize) as *const usize);\n+            let u = *(ptr.offset(offset as isize - 2 * chunk_bytes as isize) as *const Chunk);\n+            let v = *(ptr.offset(offset as isize - chunk_bytes as isize) as *const Chunk);\n \n             // break if there is a matching byte\n             let zu = contains_zero_byte(u ^ repeated_x);\n@@ -126,7 +132,7 @@ pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n                 break;\n             }\n         }\n-        offset -= 2 * usize_bytes;\n+        offset -= 2 * chunk_bytes;\n     }\n \n     // find the byte before the point the body loop stopped"}]}