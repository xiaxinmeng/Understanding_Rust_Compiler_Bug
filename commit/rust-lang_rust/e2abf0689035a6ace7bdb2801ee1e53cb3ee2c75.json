{"sha": "e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWJmMDY4OTAzNWE2YWNlN2JkYjI4MDFlZTFlNTNjYjNlZTJjNzU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T17:01:34Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T17:02:06Z"}, "message": "Fix lifetime generics in <T<..> as Trait>::try_from suggestion.", "tree": {"sha": "5383efe2df3cdde22128925edc5b2b19960459fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5383efe2df3cdde22128925edc5b2b19960459fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "html_url": "https://github.com/rust-lang/rust/commit/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f6d3e5c27e09f9fab591c19391b53a4175b666", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f6d3e5c27e09f9fab591c19391b53a4175b666", "html_url": "https://github.com/rust-lang/rust/commit/a4f6d3e5c27e09f9fab591c19391b53a4175b666"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "69dada98dc3b51168c91ddcc159e8de2b2130e10", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "patch": "@@ -262,31 +262,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name.name\n             ));\n \n-            let self_ty_name = self\n+            let mut self_ty_name = self\n                 .sess()\n                 .source_map()\n                 .span_to_snippet(self_ty_span)\n                 .unwrap_or_else(|_| self_ty.to_string());\n \n-            let self_ty_generics_count = match self_ty.kind() {\n-                // Get the number of generics the self type has (if an Adt) unless we can determine that\n-                // the user has written the self type with generics already which we (naively) do by looking\n-                // for a \"<\" in `self_ty_name`.\n-                Adt(def, _) if !self_ty_name.contains('<') => self.tcx.generics_of(def.did).count(),\n-                _ => 0,\n-            };\n-            let self_ty_generics = if self_ty_generics_count > 0 {\n-                format!(\"<{}>\", vec![\"_\"; self_ty_generics_count].join(\", \"))\n-            } else {\n-                String::new()\n-            };\n+            // Get the number of generics the self type has (if an Adt) unless we can determine that\n+            // the user has written the self type with generics already which we (naively) do by looking\n+            // for a \"<\" in `self_ty_name`.\n+            if !self_ty_name.contains('<') {\n+                if let Adt(def, _) = self_ty.kind() {\n+                    let generics = self.tcx.generics_of(def.did);\n+                    if !generics.params.is_empty() {\n+                        let counts = generics.own_counts();\n+                        self_ty_name += &format!(\n+                            \"<{}>\",\n+                            std::iter::repeat(\"'_\")\n+                                .take(counts.lifetimes)\n+                                .chain(std::iter::repeat(\"_\").take(counts.types + counts.consts))\n+                                .collect::<Vec<_>>()\n+                                .join(\", \")\n+                        );\n+                    }\n+                }\n+            }\n             lint.span_suggestion(\n                 span,\n                 \"disambiguate the associated function\",\n-                format!(\n-                    \"<{}{} as {}>::{}\",\n-                    self_ty_name, self_ty_generics, trait_name, method_name.name,\n-                ),\n+                format!(\"<{} as {}>::{}\", self_ty_name, trait_name, method_name.name,),\n                 Applicability::MachineApplicable,\n             );\n "}]}