{"sha": "2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNDdmYzNiY2Q0NmU1NDhkNzE2OGUyYmE2MzFiM2RmYTg0NjRkMDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T20:45:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T20:48:17Z"}, "message": "fix unused-import error on android", "tree": {"sha": "89dea6577a8aae62335b4d78ca034feaa125d567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89dea6577a8aae62335b4d78ca034feaa125d567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "html_url": "https://github.com/rust-lang/rust/commit/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e7ba96cb9e5cc018f213f15a2c71f4e1350424", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e7ba96cb9e5cc018f213f15a2c71f4e1350424", "html_url": "https://github.com/rust-lang/rust/commit/45e7ba96cb9e5cc018f213f15a2c71f4e1350424"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "2c2dd3b77eae9791d31a7b3cb2c5ed6a9d95a3d9", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e47fc3bcd46e548d7168e2ba631b3dfa8464d01/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=2e47fc3bcd46e548d7168e2ba631b3dfa8464d01", "patch": "@@ -1,7 +1,6 @@\n use crate::ptr;\n use crate::sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n use crate::alloc::{GlobalAlloc, Layout, System};\n-use crate::mem;\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {\n@@ -88,7 +87,7 @@ unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     let mut out = ptr::null_mut();\n     // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.\n     // Since these are all powers of 2, we can just use max.\n-    let align = layout.align().max(mem::size_of::<usize>());\n+    let align = layout.align().max(crate::mem::size_of::<usize>());\n     let ret = libc::posix_memalign(&mut out, align, layout.size());\n     if ret != 0 {\n         ptr::null_mut()"}]}