{"sha": "dd4b53402d469e80151845bf28c74c6782d775f1", "node_id": "C_kwDOAAsO6NoAKGRkNGI1MzQwMmQ0NjllODAxNTE4NDViZjI4Yzc0YzY3ODJkNzc1ZjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-05T18:35:48Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-06T12:50:24Z"}, "message": "Regenrate docs and package.json", "tree": {"sha": "3915db57a032e0be2d1fa71760d0030e4ec03a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3915db57a032e0be2d1fa71760d0030e4ec03a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd4b53402d469e80151845bf28c74c6782d775f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4b53402d469e80151845bf28c74c6782d775f1", "html_url": "https://github.com/rust-lang/rust/commit/dd4b53402d469e80151845bf28c74c6782d775f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd4b53402d469e80151845bf28c74c6782d775f1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "html_url": "https://github.com/rust-lang/rust/commit/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "7946558311a27f4fcc0090eca2fdee8fc0066444", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b53402d469e80151845bf28c74c6782d775f1/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b53402d469e80151845bf28c74c6782d775f1/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=dd4b53402d469e80151845bf28c74c6782d775f1", "patch": "@@ -55,8 +55,6 @@ pub trait InternDatabase: SourceDatabase {\n pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::input]\n     fn enable_proc_attr_macros(&self) -> bool;\n-    #[salsa::input]\n-    fn enablse_proc_attr_macros(&self) -> bool;\n \n     #[salsa::invoke(ItemTree::file_item_tree_query)]\n     fn file_item_tree(&self, file_id: HirFileId) -> Arc<ItemTree>;"}, {"sha": "dba772259f9c5bfdb34f41573a7cf3c34cba9704", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b53402d469e80151845bf28c74c6782d775f1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b53402d469e80151845bf28c74c6782d775f1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=dd4b53402d469e80151845bf28c74c6782d775f1", "patch": "@@ -301,6 +301,8 @@ config_data! {\n         /// Internal config, path to proc-macro server executable (typically,\n         /// this is rust-analyzer itself, but we override this in tests).\n         procMacro_server: Option<PathBuf>          = \"null\",\n+        /// Replaces the proc-macro expanders for the named proc-macros in the named crates with\n+        /// an identity expander that outputs the input again.\n         procMacro_dummies: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n@@ -1167,7 +1169,13 @@ fn get_field<T: DeserializeOwned>(\n         .find_map(move |field| {\n             let mut pointer = field.replace('_', \"/\");\n             pointer.insert(0, '/');\n-            json.pointer_mut(&pointer).and_then(|it| serde_json::from_value(it.take()).ok())\n+            json.pointer_mut(&pointer).and_then(|it| match serde_json::from_value(it.take()) {\n+                Ok(it) => Some(it),\n+                Err(e) => {\n+                    tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n+                    None\n+                }\n+            })\n         })\n         .unwrap_or(default)\n }\n@@ -1228,6 +1236,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n+        \"FxHashMap<Box<str>, Box<[Box<str>]>>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"FxHashMap<String, SnippetDef>\" => set! {\n             \"type\": \"object\",\n         },"}, {"sha": "eecc83e02ac499d4b0e40156c4d1db06e3f73002", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b53402d469e80151845bf28c74c6782d775f1/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b53402d469e80151845bf28c74c6782d775f1/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=dd4b53402d469e80151845bf28c74c6782d775f1", "patch": "@@ -291,9 +291,6 @@ impl GlobalState {\n                     }\n                 },\n             };\n-            self.analysis_host\n-                .raw_database_mut()\n-                .set_enable_proc_attr_macros(self.config.expand_proc_attr_macros());\n         }\n \n         let watch = match files_config.watcher {\n@@ -514,6 +511,8 @@ impl SourceRootConfig {\n     }\n }\n \n+/// Load the proc-macros for the given lib path, replacing all expanders whose names are in `dummy_replace`\n+/// with an identity dummy expander.\n pub(crate) fn load_proc_macro(\n     client: Option<&ProcMacroServer>,\n     path: &AbsPath,\n@@ -586,6 +585,7 @@ pub(crate) fn load_proc_macro(\n         }\n     }\n \n+    /// Dummy identity expander, used for proc-macros that are deliberately ignored by the user.\n     #[derive(Debug)]\n     struct DummyExpander;\n "}, {"sha": "0b9abadf98889d34c7db3c07e884208c31c24cfd", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b53402d469e80151845bf28c74c6782d775f1/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b53402d469e80151845bf28c74c6782d775f1/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=dd4b53402d469e80151845bf28c74c6782d775f1", "patch": "@@ -455,6 +455,12 @@ Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScri\n Internal config, path to proc-macro server executable (typically,\n this is rust-analyzer itself, but we override this in tests).\n --\n+[[rust-analyzer.procMacro.dummies]]rust-analyzer.procMacro.dummies (default: `{}`)::\n++\n+--\n+Replaces the proc-macro expanders for the named proc-macros in the named crates with\n+an identity expander that outputs the input again.\n+--\n [[rust-analyzer.runnables.overrideCargo]]rust-analyzer.runnables.overrideCargo (default: `null`)::\n +\n --"}, {"sha": "e7c958050e3181054b24b9a63f5a7964bdc5c8b4", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b53402d469e80151845bf28c74c6782d775f1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b53402d469e80151845bf28c74c6782d775f1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=dd4b53402d469e80151845bf28c74c6782d775f1", "patch": "@@ -880,6 +880,11 @@\n                         \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.procMacro.dummies\": {\n+                    \"markdownDescription\": \"Replaces the proc-macro expanders for the named proc-macros in the named crates with\\nan identity expander that outputs the input again.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.runnables.overrideCargo\": {\n                     \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n                     \"default\": null,"}]}