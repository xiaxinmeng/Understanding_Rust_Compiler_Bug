{"sha": "6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjI4YjY2MTdlMjViNzQzODlmMWNlZTJlYzAzMzVjMmNjZmI4NjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-10T23:20:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:39:26Z"}, "message": "`Ident::with_empty_ctxt` -> `Ident::with_dummy_span`\n\n`Ident` has had a full span rather than just a `SyntaxContext` for a long time now.", "tree": {"sha": "907989a12ba0e76bb06749599e45a61d8c7e4b3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/907989a12ba0e76bb06749599e45a61d8c7e4b3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "html_url": "https://github.com/rust-lang/rust/commit/6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d6ce42063732d7c7b12d94f872dcafb5efb607", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d6ce42063732d7c7b12d94f872dcafb5efb607", "html_url": "https://github.com/rust-lang/rust/commit/67d6ce42063732d7c7b12d94f872dcafb5efb607"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "f942a0fb85792ec4eac064401e6b01fdd6f06ec4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -1224,7 +1224,7 @@ impl<'a> LoweringContext<'a> {\n                     P(hir::Path {\n                         res,\n                         segments: hir_vec![hir::PathSegment::from_ident(\n-                            Ident::with_empty_ctxt(kw::SelfUpper)\n+                            Ident::with_dummy_span(kw::SelfUpper)\n                         )],\n                         span: t.span,\n                     }),\n@@ -1558,7 +1558,7 @@ impl<'a> LoweringContext<'a> {\n \n                     let (name, kind) = match name {\n                         hir::LifetimeName::Underscore => (\n-                            hir::ParamName::Plain(Ident::with_empty_ctxt(kw::UnderscoreLifetime)),\n+                            hir::ParamName::Plain(Ident::with_dummy_span(kw::UnderscoreLifetime)),\n                             hir::LifetimeParamKind::Elided,\n                         ),\n                         hir::LifetimeName::Param(param_name) => (\n@@ -2002,7 +2002,7 @@ impl<'a> LoweringContext<'a> {\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 hir_id: this.next_id(),\n-                                ident: Ident::with_empty_ctxt(FN_OUTPUT_NAME),\n+                                ident: Ident::with_dummy_span(FN_OUTPUT_NAME),\n                                 kind: hir::TypeBindingKind::Equality {\n                                     ty: output\n                                         .as_ref()\n@@ -2394,7 +2394,7 @@ impl<'a> LoweringContext<'a> {\n         let future_params = P(hir::GenericArgs {\n             args: hir_vec![],\n             bindings: hir_vec![hir::TypeBinding {\n-                ident: Ident::with_empty_ctxt(FN_OUTPUT_NAME),\n+                ident: Ident::with_dummy_span(FN_OUTPUT_NAME),\n                 kind: hir::TypeBindingKind::Equality {\n                     ty: output_ty,\n                 },"}, {"sha": "4ba61e9d4fdc8ad8deb8c6b9557c565fe17e5781", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -552,7 +552,7 @@ impl LoweringContext<'_> {\n \n         // let mut pinned = <expr>;\n         let expr = P(self.lower_expr(expr));\n-        let pinned_ident = Ident::with_empty_ctxt(sym::pinned);\n+        let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) = self.pat_ident_binding_mode(\n             span,\n             pinned_ident,\n@@ -593,7 +593,7 @@ impl LoweringContext<'_> {\n         let loop_node_id = self.sess.next_node_id();\n         let loop_hir_id = self.lower_node_id(loop_node_id);\n         let ready_arm = {\n-            let x_ident = Ident::with_empty_ctxt(sym::result);\n+            let x_ident = Ident::with_dummy_span(sym::result);\n             let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n             let x_expr = P(self.expr_ident(span, x_ident, x_pat_hid));\n             let ready_pat = self.pat_std_enum(\n@@ -1070,9 +1070,9 @@ impl LoweringContext<'_> {\n         );\n         head.span = desugared_span;\n \n-        let iter = Ident::with_empty_ctxt(sym::iter);\n+        let iter = Ident::with_dummy_span(sym::iter);\n \n-        let next_ident = Ident::with_empty_ctxt(sym::__next);\n+        let next_ident = Ident::with_dummy_span(sym::__next);\n         let (next_pat, next_pat_hid) = self.pat_ident_binding_mode(\n             desugared_span,\n             next_ident,\n@@ -1081,7 +1081,7 @@ impl LoweringContext<'_> {\n \n         // `::std::option::Option::Some(val) => __next = val`\n         let pat_arm = {\n-            let val_ident = Ident::with_empty_ctxt(sym::val);\n+            let val_ident = Ident::with_dummy_span(sym::val);\n             let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n             let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat_hid));\n             let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat_hid));\n@@ -1247,7 +1247,7 @@ impl LoweringContext<'_> {\n \n         // `Ok(val) => #[allow(unreachable_code)] val,`\n         let ok_arm = {\n-            let val_ident = Ident::with_empty_ctxt(sym::val);\n+            let val_ident = Ident::with_dummy_span(sym::val);\n             let (val_pat, val_pat_nid) = self.pat_ident(span, val_ident);\n             let val_expr = P(self.expr_ident_with_attrs(\n                 span,\n@@ -1263,7 +1263,7 @@ impl LoweringContext<'_> {\n         // `Err(err) => #[allow(unreachable_code)]\n         //              return Try::from_error(From::from(err)),`\n         let err_arm = {\n-            let err_ident = Ident::with_empty_ctxt(sym::err);\n+            let err_ident = Ident::with_dummy_span(sym::err);\n             let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n             let from_expr = {\n                 let from_path = &[sym::convert, sym::From, sym::from];"}, {"sha": "57fd0be77ecff108c5dd4c56598a77170fe5c786", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -202,7 +202,7 @@ impl ParamName {\n         match *self {\n             ParamName::Plain(ident) => ident,\n             ParamName::Fresh(_) |\n-            ParamName::Error => Ident::with_empty_ctxt(kw::UnderscoreLifetime),\n+            ParamName::Error => Ident::with_dummy_span(kw::UnderscoreLifetime),\n         }\n     }\n \n@@ -237,8 +237,8 @@ impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n             LifetimeName::Implicit | LifetimeName::Error => Ident::invalid(),\n-            LifetimeName::Underscore => Ident::with_empty_ctxt(kw::UnderscoreLifetime),\n-            LifetimeName::Static => Ident::with_empty_ctxt(kw::StaticLifetime),\n+            LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n+            LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(param_name) => param_name.ident(),\n         }\n     }"}, {"sha": "2fd683ed83c54917def6d4ab97fad3f14c34537f", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -1457,7 +1457,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) {\n-        self.print_ident(ast::Ident::with_empty_ctxt(name))\n+        self.print_ident(ast::Ident::with_dummy_span(name))\n     }\n \n     pub fn print_for_decl(&mut self, loc: &hir::Local, coll: &hir::Expr) {"}, {"sha": "72df45df92314247f82063c386da1010c980301e", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -1417,7 +1417,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n                 projection_ty: ty::ProjectionTy::from_ref_and_name(\n                     tcx,\n                     trait_ref,\n-                    Ident::with_empty_ctxt(FN_OUTPUT_NAME),\n+                    Ident::with_dummy_span(FN_OUTPUT_NAME),\n                 ),\n                 ty: ret_type\n             }"}, {"sha": "fdd0773b73ae2066dc0232b47cb2a2a529cd9625", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -678,7 +678,7 @@ impl RustcDefaultCalls {\n \n                     let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            path: ast::Path::from_ident(ast::Ident::with_empty_ctxt(name)),\n+                            path: ast::Path::from_ident(ast::Ident::with_dummy_span(name)),\n                             node: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });"}, {"sha": "0bec31d70765f7c786db98fd8c83795672fc0c11", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -569,15 +569,15 @@ impl<'a, 'tcx> CrateMetadata {\n \n         ty::VariantDef::new(\n             tcx,\n-            Ident::with_empty_ctxt(self.item_name(index)),\n+            Ident::with_dummy_span(self.item_name(index)),\n             variant_did,\n             ctor_did,\n             data.discr,\n             item.children.decode(self).map(|index| {\n                 let f = self.entry(index);\n                 ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    ident: Ident::with_empty_ctxt(self.item_name(index)),\n+                    ident: Ident::with_dummy_span(self.item_name(index)),\n                     vis: f.visibility.decode(self)\n                 }\n             }).collect(),\n@@ -741,7 +741,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         DefKind::Macro(ext.macro_kind()),\n                         self.local_def_id(DefIndex::from_proc_macro_index(id)),\n                     );\n-                    let ident = Ident::with_empty_ctxt(name);\n+                    let ident = Ident::with_dummy_span(name);\n                     callback(def::Export {\n                         ident: ident,\n                         res: res,\n@@ -783,7 +783,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(kind) = self.def_kind(child_index) {\n                                 callback(def::Export {\n                                     res: Res::Def(kind, self.local_def_id(child_index)),\n-                                    ident: Ident::with_empty_ctxt(self.item_name(child_index)),\n+                                    ident: Ident::with_dummy_span(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                 });"}, {"sha": "f824dfe8e7812d23db9da4347729c160d71ed92b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -595,7 +595,7 @@ impl<'a> Resolver<'a> {\n         where FilterFn: Fn(Res) -> bool\n     {\n         let mut suggestions = self.lookup_import_candidates_from_module(\n-            lookup_ident, namespace, self.graph_root, Ident::with_empty_ctxt(kw::Crate), &filter_fn\n+            lookup_ident, namespace, self.graph_root, Ident::with_dummy_span(kw::Crate), &filter_fn\n         );\n \n         if lookup_ident.span.rust_2018() {"}, {"sha": "8c15bff71018ac52f83a43a2d57697eb7d5f79ab", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n             }\n             TyKind::ImplicitSelf => {\n-                let self_ty = Ident::with_empty_ctxt(kw::SelfUpper);\n+                let self_ty = Ident::with_dummy_span(kw::SelfUpper);\n                 let res = self.resolve_ident_in_lexical_scope(self_ty, TypeNS, Some(ty.id), ty.span)\n                               .map_or(Res::Err, |d| d.res());\n                 self.r.record_partial_res(ty.id, PartialRes::new(res));\n@@ -442,7 +442,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 GenericParamKind::Type { ref default, .. } => {\n                     found_default |= default.is_some();\n                     if found_default {\n-                        Some((Ident::with_empty_ctxt(param.ident.name), Res::Err))\n+                        Some((Ident::with_dummy_span(param.ident.name), Res::Err))\n                     } else {\n                         None\n                     }\n@@ -459,7 +459,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                     false\n                 }\n             })\n-            .map(|param| (Ident::with_empty_ctxt(param.ident.name), Res::Err)));\n+            .map(|param| (Ident::with_dummy_span(param.ident.name), Res::Err)));\n \n         for param in &generics.params {\n             match param.kind {\n@@ -476,7 +476,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                     }\n \n                     // Allow all following defaults to refer to this type parameter.\n-                    default_ban_rib.bindings.remove(&Ident::with_empty_ctxt(param.ident.name));\n+                    default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n                 GenericParamKind::Const { ref ty } => {\n                     self.ribs[TypeNS].push(const_ty_param_ban_rib);\n@@ -965,7 +965,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         let mut self_type_rib = Rib::new(NormalRibKind);\n \n         // Plain insert (no renaming, since types are not currently hygienic)\n-        self_type_rib.bindings.insert(Ident::with_empty_ctxt(kw::SelfUpper), self_res);\n+        self_type_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), self_res);\n         self.ribs[TypeNS].push(self_type_rib);\n         f(self);\n         self.ribs[TypeNS].pop();\n@@ -976,7 +976,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n     {\n         let self_res = Res::SelfCtor(impl_id);\n         let mut self_type_rib = Rib::new(NormalRibKind);\n-        self_type_rib.bindings.insert(Ident::with_empty_ctxt(kw::SelfUpper), self_res);\n+        self_type_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), self_res);\n         self.ribs[ValueNS].push(self_type_rib);\n         f(self);\n         self.ribs[ValueNS].pop();\n@@ -1476,7 +1476,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                     self.r.trait_map.insert(id, traits);\n                 }\n \n-                let mut std_path = vec![Segment::from_ident(Ident::with_empty_ctxt(sym::std))];\n+                let mut std_path = vec![Segment::from_ident(Ident::with_dummy_span(sym::std))];\n                 std_path.extend(path);\n                 if self.r.primitive_type_table.primitive_types.contains_key(&path[0].ident.name) {\n                     let cl = CrateLint::No;\n@@ -1507,7 +1507,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n     fn self_type_is_available(&mut self, span: Span) -> bool {\n         let binding = self.resolve_ident_in_lexical_scope(\n-            Ident::with_empty_ctxt(kw::SelfUpper),\n+            Ident::with_dummy_span(kw::SelfUpper),\n             TypeNS,\n             None,\n             span,"}, {"sha": "60a368fbb4bd678adf2ce1c540b65dbf56b29675", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -985,11 +985,11 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         } else {\n             kw::Crate\n         };\n-        let segments = iter::once(Ident::with_empty_ctxt(root))\n+        let segments = iter::once(Ident::with_dummy_span(root))\n             .chain(\n                 crate_root.into_iter()\n                     .chain(components.iter().cloned())\n-                    .map(Ident::with_empty_ctxt)\n+                    .map(Ident::with_dummy_span)\n             ).map(|i| self.new_ast_path_segment(i)).collect::<Vec<_>>();\n \n         let path = ast::Path {\n@@ -1060,11 +1060,11 @@ impl<'a> Resolver<'a> {\n                                        .collect();\n \n         if !attr::contains_name(&krate.attrs, sym::no_core) {\n-            extern_prelude.insert(Ident::with_empty_ctxt(sym::core), Default::default());\n+            extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());\n             if !attr::contains_name(&krate.attrs, sym::no_std) {\n-                extern_prelude.insert(Ident::with_empty_ctxt(sym::std), Default::default());\n+                extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());\n                 if session.rust_2018() {\n-                    extern_prelude.insert(Ident::with_empty_ctxt(sym::meta), Default::default());\n+                    extern_prelude.insert(Ident::with_dummy_span(sym::meta), Default::default());\n                 }\n             }\n         }\n@@ -2624,7 +2624,7 @@ impl<'a> Resolver<'a> {\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n                 span,\n-                segments: iter::once(Ident::with_empty_ctxt(kw::PathRoot))\n+                segments: iter::once(Ident::with_dummy_span(kw::PathRoot))\n                     .chain({\n                         path_str.split(\"::\").skip(1).map(Ident::from_str)\n                     })\n@@ -2713,7 +2713,7 @@ fn module_to_string(module: Module<'_>) -> Option<String> {\n     fn collect_mod(names: &mut Vec<Ident>, module: Module<'_>) {\n         if let ModuleKind::Def(.., name) = module.kind {\n             if let Some(parent) = module.parent {\n-                names.push(Ident::with_empty_ctxt(name));\n+                names.push(Ident::with_dummy_span(name));\n                 collect_mod(names, parent);\n             }\n         } else {"}, {"sha": "fc1ee649e287f7d64d3deba68e29ce998843f55e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -2943,7 +2943,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             (PlaceOp::Index, false) => (self.tcx.lang_items().index_trait(), sym::index),\n             (PlaceOp::Index, true) => (self.tcx.lang_items().index_mut_trait(), sym::index_mut),\n         };\n-        (tr, ast::Ident::with_empty_ctxt(name))\n+        (tr, ast::Ident::with_dummy_span(name))\n     }\n \n     fn try_overloaded_place_op(&self,"}, {"sha": "fede9e930101215768d6139c8ead06e35bd875a0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -930,7 +930,7 @@ impl Attributes {\n             if attr.check_name(sym::enable) {\n                 if let Some(feat) = attr.value_str() {\n                     let meta = attr::mk_name_value_item_str(\n-                        Ident::with_empty_ctxt(sym::target_feature), feat, DUMMY_SP\n+                        Ident::with_dummy_span(sym::target_feature), feat, DUMMY_SP\n                     );\n                     if let Ok(feat_cfg) = Cfg::parse(&meta) {\n                         cfg &= feat_cfg;"}, {"sha": "bcf03b5237a8d1a33c73b0ee66b5ea2caa702d6e", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -327,7 +327,7 @@ impl Attribute {\n         if self.is_sugared_doc {\n             let comment = self.value_str().unwrap();\n             let meta = mk_name_value_item_str(\n-                Ident::with_empty_ctxt(sym::doc),\n+                Ident::with_dummy_span(sym::doc),\n                 Symbol::intern(&strip_doc_comment_decoration(&comment.as_str())),\n                 DUMMY_SP,\n             );\n@@ -412,7 +412,7 @@ pub fn mk_sugared_doc_attr(text: Symbol, span: Span) -> Attribute {\n     Attribute {\n         id: mk_attr_id(),\n         style,\n-        path: Path::from_ident(Ident::with_empty_ctxt(sym::doc).with_span_pos(span)),\n+        path: Path::from_ident(Ident::with_dummy_span(sym::doc).with_span_pos(span)),\n         tokens: MetaItemKind::NameValue(lit).tokens(span),\n         is_sugared_doc: true,\n         span,"}, {"sha": "9618b5acfb0f18d8b72d8e07b385a265398507c9", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -172,7 +172,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n         });\n \n-    let static_ = ecx.lifetime(span, Ident::with_empty_ctxt(kw::StaticLifetime));\n+    let static_ = ecx.lifetime(span, Ident::with_dummy_span(kw::StaticLifetime));\n     let ty_str = ecx.ty_rptr(\n         span,\n         ecx.ty_ident(span, ecx.ident_of(\"str\")),"}, {"sha": "fd6b9138fdee6f067af834675724200f1a921d34", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -872,7 +872,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn std_path(&self, components: &[Symbol]) -> Vec<ast::Ident> {\n         let def_site = DUMMY_SP.apply_mark(self.current_expansion.id);\n         iter::once(Ident::new(kw::DollarCrate, def_site))\n-            .chain(components.iter().map(|&s| Ident::with_empty_ctxt(s)))\n+            .chain(components.iter().map(|&s| Ident::with_dummy_span(s)))\n             .collect()\n     }\n     pub fn name_of(&self, st: &str) -> ast::Name {"}, {"sha": "e2ac4d573a1e0adde3c0892dd2d48557948727e9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -340,7 +340,7 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_path(self.path_ident(span, id))\n     }\n     pub fn expr_self(&self, span: Span) -> P<ast::Expr> {\n-        self.expr_ident(span, Ident::with_empty_ctxt(kw::SelfLower))\n+        self.expr_ident(span, Ident::with_dummy_span(kw::SelfLower))\n     }\n \n     pub fn expr_binary(&self, sp: Span, op: ast::BinOpKind,"}, {"sha": "5f4074a217ad6b25db05bd6e599c1741f5b0f49a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -1249,21 +1249,21 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                             let include_info = vec![\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n-                                        Ident::with_empty_ctxt(sym::file),\n+                                        Ident::with_dummy_span(sym::file),\n                                         file,\n                                         DUMMY_SP,\n                                     ),\n                                 ),\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n-                                        Ident::with_empty_ctxt(sym::contents),\n+                                        Ident::with_dummy_span(sym::contents),\n                                         src_interned,\n                                         DUMMY_SP,\n                                     ),\n                                 ),\n                             ];\n \n-                            let include_ident = Ident::with_empty_ctxt(sym::include);\n+                            let include_ident = Ident::with_dummy_span(sym::include);\n                             let item = attr::mk_list_item(include_ident, include_info);\n                             items.push(ast::NestedMetaItem::MetaItem(item));\n                         }\n@@ -1325,7 +1325,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 }\n             }\n \n-            let meta = attr::mk_list_item(Ident::with_empty_ctxt(sym::doc), items);\n+            let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n             *at = attr::Attribute {\n                 span: at.span,\n                 id: at.id,"}, {"sha": "3f6f87b1c44b612cd41ecd84d3af728e1b5050ab", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -60,7 +60,7 @@ impl<'a> Parser<'a> {\n                 // Record that we fetched the mod from an external file\n                 if warn {\n                     let attr = attr::mk_attr_outer(\n-                        attr::mk_word_item(Ident::with_empty_ctxt(sym::warn_directory_ownership)));\n+                        attr::mk_word_item(Ident::with_dummy_span(sym::warn_directory_ownership)));\n                     attr::mark_known(&attr);\n                     attrs.push(attr);\n                 }"}, {"sha": "8a7009828bc44e15e765910e3e7fdc5c733de2c7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -123,13 +123,13 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n         // of the feature gate, so we fake them up here.\n \n         // #![feature(prelude_import)]\n-        let pi_nested = attr::mk_nested_word_item(ast::Ident::with_empty_ctxt(sym::prelude_import));\n-        let list = attr::mk_list_item(ast::Ident::with_empty_ctxt(sym::feature), vec![pi_nested]);\n+        let pi_nested = attr::mk_nested_word_item(ast::Ident::with_dummy_span(sym::prelude_import));\n+        let list = attr::mk_list_item(ast::Ident::with_dummy_span(sym::feature), vec![pi_nested]);\n         let fake_attr = attr::mk_attr_inner(list);\n         s.print_attribute(&fake_attr);\n \n         // #![no_std]\n-        let no_std_meta = attr::mk_word_item(ast::Ident::with_empty_ctxt(sym::no_std));\n+        let no_std_meta = attr::mk_word_item(ast::Ident::with_dummy_span(sym::no_std));\n         let fake_attr = attr::mk_attr_inner(no_std_meta);\n         s.print_attribute(&fake_attr);\n     }"}, {"sha": "5a02ae0afb96986987e248473df2503ec511d1ce", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -129,7 +129,7 @@ fn cs_clone_shallow(name: &str,\n     if is_union {\n         // let _: AssertParamIsCopy<Self>;\n         let self_ty =\n-            cx.ty_path(cx.path_ident(trait_span, ast::Ident::with_empty_ctxt(kw::SelfUpper)));\n+            cx.ty_path(cx.path_ident(trait_span, ast::Ident::with_dummy_span(kw::SelfUpper)));\n         assert_ty_bounds(cx, &mut stmts, self_ty, trait_span, \"AssertParamIsCopy\");\n     } else {\n         match *substr.fields {"}, {"sha": "1d5234a9b7b4f90f033208fdb9bb42143a44f358", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -82,7 +82,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n                 let expr = cx.expr_method_call(span,\n                                                 builder_expr.clone(),\n-                                                Ident::with_empty_ctxt(sym::field),\n+                                                Ident::with_dummy_span(sym::field),\n                                                 vec![field]);\n \n                 // Use `let _ = expr;` to avoid triggering the\n@@ -106,7 +106,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n                 let field = cx.expr_addr_of(field.span, field);\n                 let expr = cx.expr_method_call(span,\n                                                 builder_expr.clone(),\n-                                                Ident::with_empty_ctxt(sym::field),\n+                                                Ident::with_dummy_span(sym::field),\n                                                 vec![name, field]);\n                 stmts.push(stmt_let_undescore(cx, span, expr));\n             }"}, {"sha": "4bf004a71e4da2b21f7cbbc811dd4fe9ce5ceaab", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -928,7 +928,7 @@ impl<'a> MethodDef<'a> {\n \n         let args = {\n             let self_args = explicit_self.map(|explicit_self| {\n-                let ident = Ident::with_empty_ctxt(kw::SelfLower).with_span_pos(trait_.span);\n+                let ident = Ident::with_dummy_span(kw::SelfLower).with_span_pos(trait_.span);\n                 ast::Arg::from_self(ThinVec::default(), explicit_self, ident)\n             });\n             let nonself_args = arg_types.into_iter()"}, {"sha": "9834130fa23f0871b44145e187ab492d97945bfa", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -23,13 +23,13 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     let sp = sp.apply_mark(cx.current_expansion.id);\n     let e = match env::var(&*var.as_str()) {\n         Err(..) => {\n-            let lt = cx.lifetime(sp, Ident::with_empty_ctxt(kw::StaticLifetime));\n+            let lt = cx.lifetime(sp, Ident::with_dummy_span(kw::StaticLifetime));\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n                                      cx.std_path(&[sym::option, sym::Option, sym::None]),\n                                      vec![GenericArg::Type(cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp,\n-                                                                 Ident::with_empty_ctxt(sym::str)),\n+                                                                 Ident::with_dummy_span(sym::str)),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],\n                                      vec![]))"}, {"sha": "d2121abe3b466b5313938138017597fc1f20de53", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -44,7 +44,7 @@ pub fn expand(\n     let const_ty = ecx.ty(span, TyKind::Tup(Vec::new()));\n     let const_body = ecx.expr_block(ecx.block(span, stmts));\n     let const_item =\n-        ecx.item_const(span, Ident::with_empty_ctxt(kw::Underscore), const_ty, const_body);\n+        ecx.item_const(span, Ident::with_dummy_span(kw::Underscore), const_ty, const_body);\n \n     // Return the original item and the new methods.\n     vec![Annotatable::Item(item), Annotatable::Item(const_item)]\n@@ -120,7 +120,7 @@ impl AllocFnFactory<'_, '_> {\n     ) -> P<Expr> {\n         match *ty {\n             AllocatorTy::Layout => {\n-                let usize = self.cx.path_ident(self.span, Ident::with_empty_ctxt(sym::usize));\n+                let usize = self.cx.path_ident(self.span, Ident::with_dummy_span(sym::usize));\n                 let ty_usize = self.cx.ty_path(usize);\n                 let size = ident();\n                 let align = ident();\n@@ -178,12 +178,12 @@ impl AllocFnFactory<'_, '_> {\n     }\n \n     fn usize(&self) -> P<Ty> {\n-        let usize = self.cx.path_ident(self.span, Ident::with_empty_ctxt(sym::usize));\n+        let usize = self.cx.path_ident(self.span, Ident::with_dummy_span(sym::usize));\n         self.cx.ty_path(usize)\n     }\n \n     fn ptr_u8(&self) -> P<Ty> {\n-        let u8 = self.cx.path_ident(self.span, Ident::with_empty_ctxt(sym::u8));\n+        let u8 = self.cx.path_ident(self.span, Ident::with_dummy_span(sym::u8));\n         let ty_u8 = self.cx.ty_path(u8);\n         self.cx.ty_ptr(self.span, ty_u8, Mutability::Mutable)\n     }"}, {"sha": "3ded808bb358aaa6427503e18d9551603e0ed11f", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -42,7 +42,7 @@ pub mod test_harness;\n \n pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, edition: Edition) {\n     let mut register = |name, kind| resolver.register_builtin_macro(\n-        Ident::with_empty_ctxt(name), SyntaxExtension {\n+        Ident::with_dummy_span(name), SyntaxExtension {\n             is_builtin: true, ..SyntaxExtension::default(kind, edition)\n         },\n     );"}, {"sha": "15737314b2239af51dc2b14274ac2cf14be7b1bf", "filename": "src/libsyntax_ext/plugin_macro_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fplugin_macro_defs.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -48,7 +48,7 @@ pub fn inject(\n             [sym::rustc_attrs][..].into(),\n         ));\n         for (name, ext) in named_exts {\n-            resolver.register_builtin_macro(Ident::with_empty_ctxt(name), ext);\n+            resolver.register_builtin_macro(Ident::with_dummy_span(name), ext);\n             extra_items.push(plugin_macro_def(name, span));\n         }\n         // The `macro_rules` items must be inserted before any other items."}, {"sha": "62c74b2b9c6b435697cf503bff4f5e2825dcf9b6", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -337,7 +337,7 @@ fn mk_decls(\n     let doc = cx.meta_list(span, sym::doc, vec![hidden]);\n     let doc_hidden = cx.attribute(doc);\n \n-    let proc_macro = Ident::with_empty_ctxt(sym::proc_macro);\n+    let proc_macro = Ident::with_dummy_span(sym::proc_macro);\n     let krate = cx.item(span,\n                         proc_macro,\n                         Vec::new(),\n@@ -349,7 +349,7 @@ fn mk_decls(\n     let custom_derive = Ident::from_str(\"custom_derive\");\n     let attr = Ident::from_str(\"attr\");\n     let bang = Ident::from_str(\"bang\");\n-    let crate_kw = Ident::with_empty_ctxt(kw::Crate);\n+    let crate_kw = Ident::with_dummy_span(kw::Crate);\n \n     let decls = {\n         let local_path = |sp: Span, name| {"}, {"sha": "4382fb8af85852b3a563e980a7dfebfa1de56744", "filename": "src/libsyntax_ext/standard_library_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fstandard_library_imports.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -32,15 +32,15 @@ pub fn inject(\n         // HACK(eddyb) gensym the injected crates on the Rust 2018 edition,\n         // so they don't accidentally interfere with the new import paths.\n         let orig_name_sym = Symbol::intern(orig_name_str);\n-        let orig_name_ident = Ident::with_empty_ctxt(orig_name_sym);\n+        let orig_name_ident = Ident::with_dummy_span(orig_name_sym);\n         let (rename, orig_name) = if rust_2018 {\n             (orig_name_ident.gensym(), Some(orig_name_sym))\n         } else {\n             (orig_name_ident, None)\n         };\n         krate.module.items.insert(0, P(ast::Item {\n             attrs: vec![attr::mk_attr_outer(\n-                attr::mk_word_item(ast::Ident::with_empty_ctxt(sym::macro_use))\n+                attr::mk_word_item(ast::Ident::with_dummy_span(sym::macro_use))\n             )],\n             vis: dummy_spanned(ast::VisibilityKind::Inherited),\n             node: ast::ItemKind::ExternCrate(alt_std_name.or(orig_name)),\n@@ -66,7 +66,7 @@ pub fn inject(\n         vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n         node: ast::ItemKind::Use(P(ast::UseTree {\n             prefix: ast::Path {\n-                segments: iter::once(ast::Ident::with_empty_ctxt(kw::PathRoot))\n+                segments: iter::once(ast::Ident::with_dummy_span(kw::PathRoot))\n                     .chain(\n                         [name, \"prelude\", \"v1\"].iter().cloned()\n                             .map(ast::Ident::from_str)"}, {"sha": "ab108290a938d6d38c0e3b6f435ea2edc5b78638", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -150,7 +150,7 @@ impl MutVisitor for EntryPointCleaner {\n             EntryPointType::MainAttr |\n             EntryPointType::Start =>\n                 item.map(|ast::Item {id, ident, attrs, node, vis, span, tokens}| {\n-                    let allow_ident = Ident::with_empty_ctxt(sym::allow);\n+                    let allow_ident = Ident::with_dummy_span(sym::allow);\n                     let dc_nested = attr::mk_nested_word_item(Ident::from_str(\"dead_code\"));\n                     let allow_dead_code_item = attr::mk_list_item(allow_ident, vec![dc_nested]);\n                     let allow_dead_code = attr::mk_attr_outer(allow_dead_code_item);\n@@ -191,7 +191,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt<'_>,\n                    tests: Vec<Ident>,\n                    tested_submods: Vec<(Ident, Ident)>)\n                    -> (P<ast::Item>, Ident) {\n-    let super_ = Ident::with_empty_ctxt(kw::Super);\n+    let super_ = Ident::with_dummy_span(kw::Super);\n \n     let items = tests.into_iter().map(|r| {\n         cx.ext_cx.item_use_simple(DUMMY_SP, dummy_spanned(ast::VisibilityKind::Public),\n@@ -274,7 +274,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         [sym::main, sym::test, sym::rustc_attrs][..].into(),\n     ));\n     let ecx = &cx.ext_cx;\n-    let test_id = Ident::with_empty_ctxt(sym::test);\n+    let test_id = Ident::with_dummy_span(sym::test);\n \n     // test::test_main_static(...)\n     let mut test_runner = cx.test_runner.clone().unwrap_or("}, {"sha": "e2d1635f31216606adaaf4ee46ba60ca6d537b59", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb28b6617e25b74389f1cee2ec0335c2ccfb865/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=6cb28b6617e25b74389f1cee2ec0335c2ccfb865", "patch": "@@ -744,25 +744,25 @@ impl Ident {\n         Ident { name, span }\n     }\n \n-    /// Constructs a new identifier with an empty syntax context.\n+    /// Constructs a new identifier with a dummy span.\n     #[inline]\n-    pub const fn with_empty_ctxt(name: Symbol) -> Ident {\n+    pub const fn with_dummy_span(name: Symbol) -> Ident {\n         Ident::new(name, DUMMY_SP)\n     }\n \n     #[inline]\n     pub fn invalid() -> Ident {\n-        Ident::with_empty_ctxt(kw::Invalid)\n+        Ident::with_dummy_span(kw::Invalid)\n     }\n \n     /// Maps an interned string to an identifier with an empty syntax context.\n     pub fn from_interned_str(string: InternedString) -> Ident {\n-        Ident::with_empty_ctxt(string.as_symbol())\n+        Ident::with_dummy_span(string.as_symbol())\n     }\n \n     /// Maps a string to an identifier with an empty span.\n     pub fn from_str(string: &str) -> Ident {\n-        Ident::with_empty_ctxt(Symbol::intern(string))\n+        Ident::with_dummy_span(Symbol::intern(string))\n     }\n \n     /// Maps a string and a span to an identifier."}]}