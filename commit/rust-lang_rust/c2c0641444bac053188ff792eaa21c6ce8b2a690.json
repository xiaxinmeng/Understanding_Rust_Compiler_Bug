{"sha": "c2c0641444bac053188ff792eaa21c6ce8b2a690", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzA2NDE0NDRiYWMwNTMxODhmZjc5MmVhYTIxYzZjZThiMmE2OTA=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-05-05T18:42:39Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-05-11T16:56:12Z"}, "message": "Add Vec::resize_default.", "tree": {"sha": "2a7b8ba8fc09fb6e2d618face823559d050e75f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7b8ba8fc09fb6e2d618face823559d050e75f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c0641444bac053188ff792eaa21c6ce8b2a690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c0641444bac053188ff792eaa21c6ce8b2a690", "html_url": "https://github.com/rust-lang/rust/commit/c2c0641444bac053188ff792eaa21c6ce8b2a690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c0641444bac053188ff792eaa21c6ce8b2a690/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3fc547194d22dc673274ac20e9a7b1e607cb862", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fc547194d22dc673274ac20e9a7b1e607cb862", "html_url": "https://github.com/rust-lang/rust/commit/f3fc547194d22dc673274ac20e9a7b1e607cb862"}], "stats": {"total": 136, "additions": 103, "deletions": 33}, "files": [{"sha": "b978ce6b22be3a3690d22cad7e93633802009a9f", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2c0641444bac053188ff792eaa21c6ce8b2a690/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2c0641444bac053188ff792eaa21c6ce8b2a690/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=c2c0641444bac053188ff792eaa21c6ce8b2a690", "patch": "@@ -217,6 +217,7 @@\n     - [unique](library-features/unique.md)\n     - [unsize](library-features/unsize.md)\n     - [utf8_error_error_len](library-features/utf8-error-error-len.md)\n+    - [vec_resize_default](library-features/vec-resize-default.md)\n     - [vec_remove_item](library-features/vec-remove-item.md)\n     - [windows_c](library-features/windows-c.md)\n     - [windows_handle](library-features/windows-handle.md)"}, {"sha": "5803d3215a54b93bbfbcbe84a2be995fa494b2bb", "filename": "src/doc/unstable-book/src/library-features/vec-resize-default.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2c0641444bac053188ff792eaa21c6ce8b2a690/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fvec-resize-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2c0641444bac053188ff792eaa21c6ce8b2a690/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fvec-resize-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fvec-resize-default.md?ref=c2c0641444bac053188ff792eaa21c6ce8b2a690", "patch": "@@ -0,0 +1,7 @@\n+# `vec_resize_default`\n+\n+The tracking issue for this feature is: [#41758]\n+\n+[#41758]: https://github.com/rust-lang/rust/issues/41758\n+\n+------------------------"}, {"sha": "1cf713290d8e8b7e7ea65b6b9af21f961a73c337", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 95, "deletions": 33, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/c2c0641444bac053188ff792eaa21c6ce8b2a690/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c0641444bac053188ff792eaa21c6ce8b2a690/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c2c0641444bac053188ff792eaa21c6ce8b2a690", "patch": "@@ -1220,11 +1220,14 @@ impl<T> Vec<T> {\n }\n \n impl<T: Clone> Vec<T> {\n-    /// Resizes the `Vec` in-place so that `len()` is equal to `new_len`.\n+    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n     ///\n-    /// If `new_len` is greater than `len()`, the `Vec` is extended by the\n+    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n     /// difference, with each additional slot filled with `value`.\n-    /// If `new_len` is less than `len()`, the `Vec` is simply truncated.\n+    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n+    ///\n+    /// This method requires `Clone` to clone the passed value. If you'd\n+    /// rather create a value with `Default` instead, see [`resize_default`].\n     ///\n     /// # Examples\n     ///\n@@ -1237,19 +1240,100 @@ impl<T: Clone> Vec<T> {\n     /// vec.resize(2, 0);\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n+    ///\n+    /// [`resize_default`]: #method.resize_default\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend_with_element(new_len - len, value);\n+            self.extend_with(new_len - len, ExtendElement(value))\n+        } else {\n+            self.truncate(new_len);\n+        }\n+    }\n+\n+    /// Clones and appends all elements in a slice to the `Vec`.\n+    ///\n+    /// Iterates over the slice `other`, clones each element, and then appends\n+    /// it to this `Vec`. The `other` vector is traversed in-order.\n+    ///\n+    /// Note that this function is same as `extend` except that it is\n+    /// specialized to work with slices instead. If and when Rust gets\n+    /// specialization this function will likely be deprecated (but still\n+    /// available).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut vec = vec![1];\n+    /// vec.extend_from_slice(&[2, 3, 4]);\n+    /// assert_eq!(vec, [1, 2, 3, 4]);\n+    /// ```\n+    #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n+    pub fn extend_from_slice(&mut self, other: &[T]) {\n+        self.spec_extend(other.iter())\n+    }\n+}\n+\n+impl<T: Default> Vec<T> {\n+    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n+    ///\n+    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n+    /// difference, with each additional slot filled with `Default::default()`.\n+    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n+    ///\n+    /// This method uses `Default` to create new values on every push. If\n+    /// you'd rather `Clone` a given value, use [`resize`].\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_resize_default)]\n+    ///\n+    /// let mut vec = vec![1, 2, 3];\n+    /// vec.resize_default(5);\n+    /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n+    ///\n+    /// let mut vec = vec![1, 2, 3, 4];\n+    /// vec.resize_default(2);\n+    /// assert_eq!(vec, [1, 2]);\n+    /// ```\n+    ///\n+    /// [`resize`]: #method.resize\n+    #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n+    pub fn resize_default(&mut self, new_len: usize) {\n+        let len = self.len();\n+\n+        if new_len > len {\n+            self.extend_with(new_len - len, ExtendDefault);\n         } else {\n             self.truncate(new_len);\n         }\n     }\n+}\n \n-    /// Extend the vector by `n` additional clones of `value`.\n-    fn extend_with_element(&mut self, n: usize, value: T) {\n+// This code generalises `extend_with_{element,default}`.\n+trait ExtendWith<T> {\n+    fn next(&self) -> T;\n+    fn last(self) -> T;\n+}\n+\n+struct ExtendElement<T>(T);\n+impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n+    fn next(&self) -> T { self.0.clone() }\n+    fn last(self) -> T { self.0 }\n+}\n+\n+struct ExtendDefault;\n+impl<T: Default> ExtendWith<T> for ExtendDefault {\n+    fn next(&self) -> T { Default::default() }\n+    fn last(self) -> T { Default::default() }\n+}\n+impl<T> Vec<T> {\n+    /// Extend the vector by `n` values, using the given generator.\n+    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, value: E) {\n         self.reserve(n);\n \n         unsafe {\n@@ -1261,43 +1345,21 @@ impl<T: Clone> Vec<T> {\n \n             // Write all elements except the last one\n             for _ in 1..n {\n-                ptr::write(ptr, value.clone());\n+                ptr::write(ptr, value.next());\n                 ptr = ptr.offset(1);\n-                // Increment the length in every step in case clone() panics\n+                // Increment the length in every step in case next() panics\n                 local_len.increment_len(1);\n             }\n \n             if n > 0 {\n                 // We can write the last element directly without cloning needlessly\n-                ptr::write(ptr, value);\n+                ptr::write(ptr, value.last());\n                 local_len.increment_len(1);\n             }\n \n             // len set by scope guard\n         }\n     }\n-\n-    /// Clones and appends all elements in a slice to the `Vec`.\n-    ///\n-    /// Iterates over the slice `other`, clones each element, and then appends\n-    /// it to this `Vec`. The `other` vector is traversed in-order.\n-    ///\n-    /// Note that this function is same as `extend` except that it is\n-    /// specialized to work with slices instead. If and when Rust gets\n-    /// specialization this function will likely be deprecated (but still\n-    /// available).\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let mut vec = vec![1];\n-    /// vec.extend_from_slice(&[2, 3, 4]);\n-    /// assert_eq!(vec, [1, 2, 3, 4]);\n-    /// ```\n-    #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n-    pub fn extend_from_slice(&mut self, other: &[T]) {\n-        self.spec_extend(other.iter())\n-    }\n }\n \n // Set the length of the vec when the `SetLenOnDrop` value goes out of scope.\n@@ -1389,7 +1451,7 @@ trait SpecFromElem: Sized {\n impl<T: Clone> SpecFromElem for T {\n     default fn from_elem(elem: Self, n: usize) -> Vec<Self> {\n         let mut v = Vec::with_capacity(n);\n-        v.extend_with_element(n, elem);\n+        v.extend_with(n, ExtendElement(elem));\n         v\n     }\n }\n@@ -1424,7 +1486,7 @@ macro_rules! impl_spec_from_elem {\n                     }\n                 }\n                 let mut v = Vec::with_capacity(n);\n-                v.extend_with_element(n, elem);\n+                v.extend_with(n, ExtendElement(elem));\n                 v\n             }\n         }"}]}