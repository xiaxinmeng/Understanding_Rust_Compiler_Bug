{"sha": "ea7e885204e1ed6b18406e84708abef748925ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhN2U4ODUyMDRlMWVkNmIxODQwNmU4NDcwOGFiZWY3NDg5MjVlYzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-14T00:12:44Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:37:24Z"}, "message": "Elide E0308 errors in favor of E0746\n\nWhen a type error involves a `dyn Trait` as the return type, do not emit\nthe type error, as the \"return type is not `Sized`\" error will provide\nenough information to the user.", "tree": {"sha": "c1f7251d6e76a303a1d2dae31ad50ddfa02c512b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1f7251d6e76a303a1d2dae31ad50ddfa02c512b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7e885204e1ed6b18406e84708abef748925ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7e885204e1ed6b18406e84708abef748925ec5", "html_url": "https://github.com/rust-lang/rust/commit/ea7e885204e1ed6b18406e84708abef748925ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7e885204e1ed6b18406e84708abef748925ec5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75eabb17aec390fd91b5bf11539012e4fc7307b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75eabb17aec390fd91b5bf11539012e4fc7307b7", "html_url": "https://github.com/rust-lang/rust/commit/75eabb17aec390fd91b5bf11539012e4fc7307b7"}], "stats": {"total": 168, "additions": 44, "deletions": 124}, "files": [{"sha": "77f16fb79141d42f221c5fe657eb25c20b427713", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ea7e885204e1ed6b18406e84708abef748925ec5", "patch": "@@ -1222,6 +1222,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 };\n \n                 let mut err;\n+                let mut unsized_return = false;\n                 match cause.code {\n                     ObligationCauseCode::ReturnNoExpression => {\n                         err = struct_span_err!(\n@@ -1243,6 +1244,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             parent_id,\n                             expression.map(|expr| (expr, blk_id)),\n                         );\n+                        if !fcx.tcx.features().unsized_locals {\n+                            unsized_return = fcx.is_unsized_return(blk_id);\n+                        }\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n                         err = self.report_return_mismatched_types(\n@@ -1254,6 +1258,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             id,\n                             None,\n                         );\n+                        if !fcx.tcx.features().unsized_locals {\n+                            let id = fcx.tcx.hir().get_parent_node(id);\n+                            unsized_return = fcx.is_unsized_return(id);\n+                        }\n                     }\n                     _ => {\n                         err = fcx.report_mismatched_types(cause, expected, found, coercion_error);\n@@ -1282,7 +1290,16 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     .filter(|e| fcx.is_assign_to_bool(e, self.expected_ty()))\n                     .is_some();\n \n-                err.emit_unless(assign_to_bool);\n+                if unsized_return {\n+                    fcx.tcx.sess.delay_span_bug(\n+                        cause.span,\n+                        &format!(\n+                            \"elided E0308 in favor of more detailed E0277 or E0746: {:?}\",\n+                            cause.code\n+                        ),\n+                    );\n+                }\n+                err.emit_unless(assign_to_bool || unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.types.err);\n             }"}, {"sha": "8f531ea6199e14c038f6a76b554bd1fe4fbf8b94", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ea7e885204e1ed6b18406e84708abef748925ec5", "patch": "@@ -4964,6 +4964,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn is_unsized_return(&self, blk_id: hir::HirId) -> bool {\n+        if let Some((fn_decl, _)) = self.get_fn_decl(blk_id) {\n+            if let hir::FunctionRetTy::Return(ty) = fn_decl.output {\n+                let ty = AstConv::ast_ty_to_ty(self, ty);\n+                if let ty::Dynamic(..) = ty.kind {\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     /// A possible error is to forget to add a return type that is needed:\n     ///\n     /// ```"}, {"sha": "c9ab455a4c5b416b038d6af7afe7309f17efa462", "filename": "src/test/ui/error-codes/E0746.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs?ref=ea7e885204e1ed6b18406e84708abef748925ec5", "patch": "@@ -5,13 +5,12 @@ impl Trait for u32 {}\n \n fn foo() -> dyn Trait { Struct }\n //~^ ERROR E0746\n-//~| ERROR E0308\n \n fn bar() -> dyn Trait { //~ ERROR E0746\n     if true {\n-        return 0; //~ ERROR E0308\n+        return 0;\n     }\n-    42 //~ ERROR E0308\n+    42\n }\n \n fn main() {}"}, {"sha": "44bd0d7ed7d37cc3ae9b8b35640da63015c6e885", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=ea7e885204e1ed6b18406e84708abef748925ec5", "patch": "@@ -1,14 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/E0746.rs:6:25\n-   |\n-LL | fn foo() -> dyn Trait { Struct }\n-   |             ---------   ^^^^^^ expected trait `Trait`, found struct `Struct`\n-   |             |\n-   |             expected `(dyn Trait + 'static)` because of return type\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                    found struct `Struct`\n-\n error[E0746]: return type cannot have a bare trait because it must be `Sized`\n   --> $DIR/E0746.rs:6:13\n    |\n@@ -22,7 +11,7 @@ LL | fn foo() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n error[E0746]: return type cannot have a bare trait because it must be `Sized`\n-  --> $DIR/E0746.rs:10:13\n+  --> $DIR/E0746.rs:9:13\n    |\n LL | fn bar() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n@@ -33,30 +22,5 @@ help: you can use the `impl Trait` feature in the return type because all the re\n LL | fn bar() -> impl Trait {\n    |             ^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/E0746.rs:12:16\n-   |\n-LL | fn bar() -> dyn Trait {\n-   |             --------- expected `(dyn Trait + 'static)` because of return type\n-LL |     if true {\n-LL |         return 0;\n-   |                ^ expected trait `Trait`, found integer\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                      found type `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/E0746.rs:14:5\n-   |\n-LL | fn bar() -> dyn Trait {\n-   |             --------- expected `(dyn Trait + 'static)` because of return type\n-...\n-LL |     42\n-   |     ^^ expected trait `Trait`, found integer\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                      found type `{integer}`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "b70a51dc82511d649f1e07ddf65811affa8ec938", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=ea7e885204e1ed6b18406e84708abef748925ec5", "patch": "@@ -12,25 +12,23 @@ fn bar() -> (usize, dyn Trait) { (42, Struct) }\n //~| ERROR E0308\n fn bap() -> Trait { Struct }\n //~^ ERROR E0746\n-//~| ERROR E0308\n fn ban() -> dyn Trait { Struct }\n //~^ ERROR E0746\n-//~| ERROR E0308\n fn bak() -> dyn Trait { unimplemented!() } //~ ERROR E0277\n // Suggest using `Box<dyn Trait>`\n fn bal() -> dyn Trait { //~ ERROR E0746\n     if true {\n-        return Struct; //~ ERROR E0308\n+        return Struct;\n     }\n-    42 //~ ERROR E0308\n+    42\n }\n \n // Suggest using `impl Trait`\n fn bat() -> dyn Trait { //~ ERROR E0746\n     if true {\n-        return 0; //~ ERROR E0308\n+        return 0;\n     }\n-    42 //~ ERROR E0308\n+    42\n }\n \n fn main() {}"}, {"sha": "a09ce2bb298635b41359f0e78511b8dd49ee210c", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 6, "deletions": 76, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea7e885204e1ed6b18406e84708abef748925ec5/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=ea7e885204e1ed6b18406e84708abef748925ec5", "patch": "@@ -38,17 +38,6 @@ LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n    = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n    = note: the return type of a function must have a statically known size\n \n-error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:13:21\n-   |\n-LL | fn bap() -> Trait { Struct }\n-   |             -----   ^^^^^^ expected trait `Trait`, found struct `Struct`\n-   |             |\n-   |             expected `(dyn Trait + 'static)` because of return type\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                    found struct `Struct`\n-\n error[E0746]: return type cannot have a bare trait because it must be `Sized`\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:13:13\n    |\n@@ -61,19 +50,8 @@ help: you can use the `impl Trait` feature in the return type because all the re\n LL | fn bap() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:16:25\n-   |\n-LL | fn ban() -> dyn Trait { Struct }\n-   |             ---------   ^^^^^^ expected trait `Trait`, found struct `Struct`\n-   |             |\n-   |             expected `(dyn Trait + 'static)` because of return type\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                    found struct `Struct`\n-\n error[E0746]: return type cannot have a bare trait because it must be `Sized`\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:16:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:15:13\n    |\n LL | fn ban() -> dyn Trait { Struct }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n@@ -85,7 +63,7 @@ LL | fn ban() -> impl Trait { Struct }\n    |             ^^^^^^^^^^\n \n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:17:13\n    |\n LL | fn bak() -> dyn Trait { unimplemented!() }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n@@ -94,26 +72,14 @@ LL | fn bak() -> dyn Trait { unimplemented!() }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n-error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:23:16\n-   |\n-LL | fn bal() -> dyn Trait {\n-   |             --------- expected `(dyn Trait + 'static)` because of return type\n-LL |     if true {\n-LL |         return Struct;\n-   |                ^^^^^^ expected trait `Trait`, found struct `Struct`\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                    found struct `Struct`\n-\n error[E0746]: return type cannot have a bare trait because it must be `Sized`\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:21:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n    |\n LL | fn bal() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n help: if all the returned values were of the same type you could use `impl Trait` as the return type\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:5\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:23:5\n    |\n LL |         return Struct;\n    |                ^^^^^^\n@@ -132,20 +98,8 @@ LL |     }\n LL |     Box::new(42)\n    |\n \n-error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:5\n-   |\n-LL | fn bal() -> dyn Trait {\n-   |             --------- expected `(dyn Trait + 'static)` because of return type\n-...\n-LL |     42\n-   |     ^^ expected trait `Trait`, found integer\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                      found type `{integer}`\n-\n error[E0746]: return type cannot have a bare trait because it must be `Sized`\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:29:13\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:27:13\n    |\n LL | fn bat() -> dyn Trait {\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n@@ -156,31 +110,7 @@ help: you can use the `impl Trait` feature in the return type because all the re\n LL | fn bat() -> impl Trait {\n    |             ^^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:31:16\n-   |\n-LL | fn bat() -> dyn Trait {\n-   |             --------- expected `(dyn Trait + 'static)` because of return type\n-LL |     if true {\n-LL |         return 0;\n-   |                ^ expected trait `Trait`, found integer\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                      found type `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:33:5\n-   |\n-LL | fn bat() -> dyn Trait {\n-   |             --------- expected `(dyn Trait + 'static)` because of return type\n-...\n-LL |     42\n-   |     ^^ expected trait `Trait`, found integer\n-   |\n-   = note: expected trait object `(dyn Trait + 'static)`\n-                      found type `{integer}`\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}]}