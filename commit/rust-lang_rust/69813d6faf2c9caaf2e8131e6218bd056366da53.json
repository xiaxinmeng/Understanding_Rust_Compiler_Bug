{"sha": "69813d6faf2c9caaf2e8131e6218bd056366da53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODEzZDZmYWYyYzljYWFmMmU4MTMxZTYyMThiZDA1NjM2NmRhNTM=", "commit": {"author": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-10-04T07:58:09Z"}, "committer": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-12-06T09:23:39Z"}, "message": "Don't try to determine sysroot. rustc_driver will use default value.", "tree": {"sha": "c8edb0f8e6be4841b6ed9a2aa6b2bba42b5e543e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8edb0f8e6be4841b6ed9a2aa6b2bba42b5e543e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69813d6faf2c9caaf2e8131e6218bd056366da53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQTv7q0NRmbSXocCXjKPunSz54tGdwUCXAjqmwAKCRCPunSz54tG\nd6YpAQCTyTkFAczxJ1dp6+NyuY5eQKUa5WhzocD7jbO/h9qjsAD6AoiW9gw0AI0i\noAQsiRygFqmtb+mLOsc78LNVN+98yEs=\n=vg06\n-----END PGP SIGNATURE-----", "payload": "tree c8edb0f8e6be4841b6ed9a2aa6b2bba42b5e543e\nparent f93591294d60f705fb70578cfc32346efe1e03d8\nauthor O01eg <o01eg@yandex.ru> 1538639889 +0300\ncommitter O01eg <o01eg@yandex.ru> 1544088219 +0300\n\nDon't try to determine sysroot. rustc_driver will use default value.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69813d6faf2c9caaf2e8131e6218bd056366da53", "html_url": "https://github.com/rust-lang/rust/commit/69813d6faf2c9caaf2e8131e6218bd056366da53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69813d6faf2c9caaf2e8131e6218bd056366da53/comments", "author": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93591294d60f705fb70578cfc32346efe1e03d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93591294d60f705fb70578cfc32346efe1e03d8", "html_url": "https://github.com/rust-lang/rust/commit/f93591294d60f705fb70578cfc32346efe1e03d8"}], "stats": {"total": 44, "additions": 6, "deletions": 38}, "files": [{"sha": "6b327d08207f5d78c03a68980ac17e844bc48a13", "filename": "src/driver.rs", "status": "modified", "additions": 6, "deletions": 38, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/69813d6faf2c9caaf2e8131e6218bd056366da53/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69813d6faf2c9caaf2e8131e6218bd056366da53/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=69813d6faf2c9caaf2e8131e6218bd056366da53", "patch": "@@ -23,7 +23,7 @@ use self::rustc_driver::{driver::CompileController, Compilation};\n \n use std::convert::TryInto;\n use std::path::Path;\n-use std::process::{exit, Command};\n+use std::process::exit;\n \n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n@@ -40,54 +40,22 @@ pub fn main() {\n                 exit(0);\n             }\n \n-            let sys_root = option_env!(\"SYSROOT\")\n-                .map(String::from)\n-                .or_else(|| std::env::var(\"SYSROOT\").ok())\n-                .or_else(|| {\n-                    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-                    home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-                })\n-                .or_else(|| {\n-                    Command::new(\"rustc\")\n-                        .arg(\"--print\")\n-                        .arg(\"sysroot\")\n-                        .output()\n-                        .ok()\n-                        .and_then(|out| String::from_utf8(out.stdout).ok())\n-                        .map(|s| s.trim().to_owned())\n-                })\n-                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n-\n             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n             // We're invoking the compiler programmatically, so we ignore this/\n-            let mut orig_args: Vec<String> = env::args().collect();\n-            if orig_args.len() <= 1 {\n+            let mut args: Vec<String> = env::args().collect();\n+            if args.len() <= 1 {\n                 std::process::exit(1);\n             }\n-            if Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n+            if Path::new(&args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n                 // we still want to be able to invoke it normally though\n-                orig_args.remove(1);\n+                args.remove(1);\n             }\n-            // this conditional check for the --sysroot flag is there so users can call\n-            // `clippy_driver` directly\n-            // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-                orig_args.clone()\n-            } else {\n-                orig_args\n-                    .clone()\n-                    .into_iter()\n-                    .chain(Some(\"--sysroot\".to_owned()))\n-                    .chain(Some(sys_root))\n-                    .collect()\n-            };\n \n             // this check ensures that dependencies are built but not linted and the final\n             // crate is\n             // linted but not built\n             let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-                || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+                || args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n \n             if clippy_enabled {\n                 args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);"}]}