{"sha": "44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NzI2YjZjYTNiMmZiMDZjODFjNGNlNzc5NjIzMDFmZmMyNzNkMmY=", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-08-04T06:12:41Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-08-04T06:12:41Z"}, "message": "fix + update expects", "tree": {"sha": "9b424b8e194c8b372826a67e8f6c6e3d6c4d5b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b424b8e194c8b372826a67e8f6c6e3d6c4d5b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "html_url": "https://github.com/rust-lang/rust/commit/44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01ff775ae7a1c050b54668d74d4a4849e74592f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01ff775ae7a1c050b54668d74d4a4849e74592f", "html_url": "https://github.com/rust-lang/rust/commit/e01ff775ae7a1c050b54668d74d4a4849e74592f"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "e32b0759449731a7137777f6941e7e225ac28667", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "patch": "@@ -1842,7 +1842,10 @@ impl Local {\n \n     pub fn is_ref(self, db: &dyn HirDatabase) -> bool {\n         let body = db.body(self.parent);\n-        matches!(&body[self.pat_id], Pat::Bind { mode: BindingAnnotation::Ref | BindingAnnotation::RefMut, .. })\n+        matches!(\n+            &body[self.pat_id],\n+            Pat::Bind { mode: BindingAnnotation::Ref | BindingAnnotation::RefMut, .. }\n+        )\n     }\n \n     pub fn parent(self, _db: &dyn HirDatabase) -> DefWithBody {"}, {"sha": "60fb38e1828337dea8a9ac242ae51f97030eb011", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "patch": "@@ -460,8 +460,6 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 if s.is_mut(db) {\n                     h |= HlMod::Mutable;\n                     h |= HlMod::Unsafe;\n-                } else {\n-                    h |= HlMod::Reference;\n                 }\n \n                 h\n@@ -489,7 +487,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n             let ty = local.ty(db);\n             if local.is_mut(db) || ty.is_mutable_reference() {\n                 h |= HlMod::Mutable;\n-            } \n+            }\n             if local.is_ref(db) || ty.is_reference() {\n                 h |= HlMod::Reference;\n             }\n@@ -555,7 +553,10 @@ fn highlight_method_call(\n     if let Some(self_param) = func.self_param(sema.db) {\n         match self_param.access(sema.db) {\n             hir::Access::Shared => h |= HlMod::Reference,\n-            hir::Access::Exclusive => h | HlMod::Mutable | HlMod::Reference,\n+            hir::Access::Exclusive => {\n+                h |= HlMod::Mutable;\n+                h |= HlMod::Reference;\n+            }\n             hir::Access::Owned => {\n                 if let Some(receiver_ty) =\n                     method_call.receiver().and_then(|it| sema.type_of_expr(&it))"}, {"sha": "88a348115b9edc3f40656cde5da9b18dac0101a8", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "patch": "@@ -83,8 +83,8 @@\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword consuming mutable\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+        <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field public\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n@@ -102,8 +102,8 @@\n         <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"self_keyword\">self</span><span class=\"parenthesis\">)</span>\n     <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function associated declaration mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword declaration mutable reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+        <span class=\"self_keyword mutable reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n \n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n@@ -197,8 +197,8 @@\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">x</span> <span class=\"arithmetic mutable\">+=</span> <span class=\"numeric_literal\">1</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"semicolon\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration reference\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable\">y</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable reference\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration reference\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable reference\">y</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field public\">x</span><span class=\"colon\">:</span> <span class=\"variable reference\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n@@ -207,12 +207,12 @@\n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field public\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"brace\">{</span> <span class=\"field\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated reference\">quop</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated mutable\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated mutable reference\">qux</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parenthesis\">(</span><span class=\"variable mutable\">copy</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"variable callable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"punctuation\">|</span><span class=\"value_param declaration\">x</span><span class=\"punctuation\">|</span> <span class=\"value_param\">x</span><span class=\"semicolon\">;</span>"}, {"sha": "f0c96412f11e2f7af6e8801ad504f6292580bed2", "filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/44726b6ca3b2fb06c81c4ce77962301ffc273d2f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html?ref=44726b6ca3b2fb06c81c4ce77962301ffc273d2f", "patch": "@@ -49,5 +49,5 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable reference\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}]}