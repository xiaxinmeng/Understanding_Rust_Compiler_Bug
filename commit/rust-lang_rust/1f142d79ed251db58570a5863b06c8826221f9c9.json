{"sha": "1f142d79ed251db58570a5863b06c8826221f9c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMTQyZDc5ZWQyNTFkYjU4NTcwYTU4NjNiMDZjODgyNjIyMWY5Yzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T11:17:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T11:17:47Z"}, "message": "Refactor", "tree": {"sha": "368371ac2f842622c90970e75d3286b9b776637d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368371ac2f842622c90970e75d3286b9b776637d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f142d79ed251db58570a5863b06c8826221f9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f142d79ed251db58570a5863b06c8826221f9c9", "html_url": "https://github.com/rust-lang/rust/commit/1f142d79ed251db58570a5863b06c8826221f9c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f142d79ed251db58570a5863b06c8826221f9c9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c766b2bdb88afbde051db064f255aa71c75fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c766b2bdb88afbde051db064f255aa71c75fbd", "html_url": "https://github.com/rust-lang/rust/commit/42c766b2bdb88afbde051db064f255aa71c75fbd"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "d0a52670a1371cd33dc1ac5b1eb42cca35b6c4b1", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/1f142d79ed251db58570a5863b06c8826221f9c9/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f142d79ed251db58570a5863b06c8826221f9c9/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=1f142d79ed251db58570a5863b06c8826221f9c9", "patch": "@@ -5,62 +5,62 @@ use ra_project_model::{self, ProjectWorkspace, TargetKind};\n \n use crate::{world::WorldSnapshot, Result};\n \n-pub(crate) fn runnable_args(\n-    spec: Option<CargoTargetSpec>,\n-    kind: &RunnableKind,\n-) -> Result<Vec<String>> {\n-    let mut res = Vec::new();\n-    match kind {\n-        RunnableKind::Test { test_id } => {\n-            res.push(\"test\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-            res.push(\"--\".to_string());\n-            res.push(test_id.to_string());\n-            if let TestId::Path(_) = test_id {\n-                res.push(\"--exact\".to_string());\n-            }\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::TestMod { path } => {\n-            res.push(\"test\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-            res.push(\"--\".to_string());\n-            res.push(path.to_string());\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::Bench { test_id } => {\n-            res.push(\"bench\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-            res.push(\"--\".to_string());\n-            res.push(test_id.to_string());\n-            if let TestId::Path(_) = test_id {\n-                res.push(\"--exact\".to_string());\n-            }\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::Bin => {\n-            res.push(\"run\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-        }\n-    }\n-    Ok(res)\n-}\n-\n pub(crate) struct CargoTargetSpec {\n     pub(crate) package: String,\n     pub(crate) target: String,\n     pub(crate) target_kind: TargetKind,\n }\n \n impl CargoTargetSpec {\n+    pub(crate) fn runnable_args(\n+        spec: Option<CargoTargetSpec>,\n+        kind: &RunnableKind,\n+    ) -> Result<Vec<String>> {\n+        let mut res = Vec::new();\n+        match kind {\n+            RunnableKind::Test { test_id } => {\n+                res.push(\"test\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(test_id.to_string());\n+                if let TestId::Path(_) = test_id {\n+                    res.push(\"--exact\".to_string());\n+                }\n+                res.push(\"--nocapture\".to_string());\n+            }\n+            RunnableKind::TestMod { path } => {\n+                res.push(\"test\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(path.to_string());\n+                res.push(\"--nocapture\".to_string());\n+            }\n+            RunnableKind::Bench { test_id } => {\n+                res.push(\"bench\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(test_id.to_string());\n+                if let TestId::Path(_) = test_id {\n+                    res.push(\"--exact\".to_string());\n+                }\n+                res.push(\"--nocapture\".to_string());\n+            }\n+            RunnableKind::Bin => {\n+                res.push(\"run\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+            }\n+        }\n+        Ok(res)\n+    }\n+\n     pub(crate) fn for_file(\n         world: &WorldSnapshot,\n         file_id: FileId,"}, {"sha": "92f219e28d0a159080c5affa469bab2d9b801434", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f142d79ed251db58570a5863b06c8826221f9c9/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f142d79ed251db58570a5863b06c8826221f9c9/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=1f142d79ed251db58570a5863b06c8826221f9c9", "patch": "@@ -29,7 +29,7 @@ use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n \n use crate::{\n-    cargo_target_spec::{runnable_args, CargoTargetSpec},\n+    cargo_target_spec::CargoTargetSpec,\n     conv::{\n         to_call_hierarchy_item, to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith,\n         TryConvWithToVec,\n@@ -921,8 +921,8 @@ fn to_lsp_runnable(\n     file_id: FileId,\n     runnable: Runnable,\n ) -> Result<req::Runnable> {\n-    let spec: Option<CargoTargetSpec> = CargoTargetSpec::for_file(world, file_id)?;\n-    let args = runnable_args(spec, &runnable.kind)?;\n+    let spec = CargoTargetSpec::for_file(world, file_id)?;\n+    let args = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id } => format!(\"test {}\", test_id),"}]}