{"sha": "ce6aabbaa19378ac621c2971934383a146176fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNmFhYmJhYTE5Mzc4YWM2MjFjMjk3MTkzNDM4M2ExNDYxNzZmZWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T15:38:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:21:09Z"}, "message": "Rename `ImplItem.node` to `ImplItem.kind`", "tree": {"sha": "4bc6bada043714c81772a8fb16c74b5724f33d4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc6bada043714c81772a8fb16c74b5724f33d4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce6aabbaa19378ac621c2971934383a146176fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6aabbaa19378ac621c2971934383a146176fec", "html_url": "https://github.com/rust-lang/rust/commit/ce6aabbaa19378ac621c2971934383a146176fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce6aabbaa19378ac621c2971934383a146176fec/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd0382134368d8bc017185baba9e5276693ef6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd0382134368d8bc017185baba9e5276693ef6a", "html_url": "https://github.com/rust-lang/rust/commit/8bd0382134368d8bc017185baba9e5276693ef6a"}], "stats": {"total": 215, "additions": 107, "deletions": 108}, "files": [{"sha": "26f4e115cc5dbcc9b64289a05d1533cd6f725046", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -905,7 +905,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         ref defaultness,\n         ref attrs,\n         ref generics,\n-        ref node,\n+        ref kind,\n         span: _,\n     } = *impl_item;\n \n@@ -914,7 +914,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_defaultness(defaultness);\n     walk_list!(visitor, visit_attribute, attrs);\n     visitor.visit_generics(generics);\n-    match *node {\n+    match *kind {\n         ImplItemKind::Const(ref ty, body) => {\n             visitor.visit_id(impl_item.hir_id);\n             visitor.visit_ty(ty);"}, {"sha": "fe544f506a69694ae8cbba1045834d069df6bc62", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -902,7 +902,7 @@ impl LoweringContext<'_> {\n     fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n-        let (generics, node) = match i.node {\n+        let (generics, kind) = match i.kind {\n             ImplItemKind::Const(ref ty, ref expr) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::ImplItemKind::Const(\n@@ -946,7 +946,7 @@ impl LoweringContext<'_> {\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n-            node,\n+            kind,\n             span: i.span,\n         }\n \n@@ -960,7 +960,7 @@ impl LoweringContext<'_> {\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n-            kind: match i.node {\n+            kind: match i.kind {\n                 ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n                 ImplItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n                 ImplItemKind::OpaqueTy(..) => hir::AssocItemKind::OpaqueTy,"}, {"sha": "22cc3b9b3706ac8bb9a386418476c5d900bddd27", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -43,7 +43,10 @@ impl MaybeFnLike for ast::Item {\n \n impl MaybeFnLike for ast::ImplItem {\n     fn is_fn_like(&self) -> bool {\n-        match self.node { ast::ImplItemKind::Method(..) => true, _ => false, }\n+        match self.kind {\n+            ast::ImplItemKind::Method(..) => true,\n+            _ => false,\n+        }\n     }\n }\n \n@@ -234,7 +237,7 @@ impl<'a> FnLikeNode<'a> {\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n             map::Node::ImplItem(ii) => {\n-                match ii.node {\n+                match ii.kind {\n                     ast::ImplItemKind::Method(ref sig, body) => {\n                         method(ii.hir_id, ii.ident, sig, Some(&ii.vis), body, ii.span, &ii.attrs)\n                     }"}, {"sha": "29bcbed8eb199a2c71cff7ed7c9f5863f9accb49", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -228,7 +228,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n-        let def_data = match ii.node {\n+        let def_data = match ii.kind {\n             ImplItemKind::Method(MethodSig {\n                 ref header,\n                 ref decl,"}, {"sha": "b2ac417d7e1156296a1d742386133f49f9a6070c", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -64,7 +64,7 @@ impl<'hir> Entry<'hir> {\n             }\n \n             Node::ImplItem(ref item) => {\n-                match item.node {\n+                match item.kind {\n                     ImplItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n                     _ => None,\n                 }\n@@ -101,7 +101,7 @@ impl<'hir> Entry<'hir> {\n             }\n \n             Node::ImplItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     ImplItemKind::Const(_, body) |\n                     ImplItemKind::Method(_, body) => Some(body),\n                     _ => None,\n@@ -327,7 +327,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::ImplItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     ImplItemKind::Const(..) => DefKind::AssocConst,\n                     ImplItemKind::Method(..) => DefKind::Method,\n                     ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n@@ -455,14 +455,14 @@ impl<'hir> Map<'hir> {\n         match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Const(..), .. }) |\n             Node::TraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n-            Node::ImplItem(&ImplItem { node: ImplItemKind::Const(..), .. }) |\n+            Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. }) |\n             Node::AnonConst(_) => {\n                 BodyOwnerKind::Const\n             }\n             Node::Ctor(..) |\n             Node::Item(&Item { node: ItemKind::Fn(..), .. }) |\n             Node::TraitItem(&TraitItem { node: TraitItemKind::Method(..), .. }) |\n-            Node::ImplItem(&ImplItem { node: ImplItemKind::Method(..), .. }) => {\n+            Node::ImplItem(&ImplItem { kind: ImplItemKind::Method(..), .. }) => {\n                 BodyOwnerKind::Fn\n             }\n             Node::Item(&Item { node: ItemKind::Static(_, m, _), .. }) => {\n@@ -657,7 +657,7 @@ impl<'hir> Map<'hir> {\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {\n-                node: ImplItemKind::Const(..),\n+                kind: ImplItemKind::Const(..),\n                 ..\n             })\n             | Node::AnonConst(_)\n@@ -832,7 +832,7 @@ impl<'hir> Map<'hir> {\n                 }\n             },\n             Node::ImplItem(ii) => {\n-                match ii.node {\n+                match ii.kind {\n                     ImplItemKind::Method(..) => true,\n                     _ => false,\n                 }\n@@ -1310,7 +1310,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n             format!(\"foreign item {}{}\", path_str(), id_str)\n         }\n         Some(Node::ImplItem(ii)) => {\n-            match ii.node {\n+            match ii.kind {\n                 ImplItemKind::Const(..) => {\n                     format!(\"assoc const {} in {}{}\", ii.ident, path_str(), id_str)\n                 }"}, {"sha": "45f5047aca31643ab2907a8d18926fab1843c2ce", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1873,7 +1873,7 @@ pub struct ImplItem {\n     pub defaultness: Defaultness,\n     pub attrs: HirVec<Attribute>,\n     pub generics: Generics,\n-    pub node: ImplItemKind,\n+    pub kind: ImplItemKind,\n     pub span: Span,\n }\n "}, {"sha": "d5801638dcdd401c4b508a720ceae0ff0242a3cc", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -896,7 +896,7 @@ impl<'a> State<'a> {\n         self.print_outer_attributes(&ii.attrs);\n         self.print_defaultness(ii.defaultness);\n \n-        match ii.node {\n+        match ii.kind {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n                 self.print_associated_const(ii.ident, &ty, Some(expr), &ii.vis);\n             }"}, {"sha": "1a446559f23e3cbcb5015aba8dc7231aeadb67f0", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -226,7 +226,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem {\n             defaultness,\n             ref attrs,\n             ref generics,\n-            ref node,\n+            ref kind,\n             span\n         } = *self;\n \n@@ -236,7 +236,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem {\n             defaultness.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n-            node.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n         });\n     }"}, {"sha": "af9f04978332890fc027112d8bb115370f5c4729", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -267,7 +267,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n-        match item.node {\n+        match item.kind {\n             hir::ImplItemKind::Method(..) => \"method body\",\n             hir::ImplItemKind::Const(..)\n             | hir::ImplItemKind::OpaqueTy(..)"}, {"sha": "3da96e265c39bd51169ba86705f7a832bd89184b", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n-                        node: hir::ImplItemKind::Method(ref m, ..),\n+                        kind: hir::ImplItemKind::Method(ref m, ..),\n                         ..\n                     }) => &m.decl,\n                     _ => return None,"}, {"sha": "02b641a8519a5a45666628635d8c7e3220d5270c", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1060,7 +1060,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                     (def_scope_default(), hir::OpaqueTyOrigin::TypeAlias)\n                                 }\n                             },\n-                            Some(Node::ImplItem(item)) => match item.node {\n+                            Some(Node::ImplItem(item)) => match item.kind {\n                                 hir::ImplItemKind::OpaqueTy(_) => (\n                                     may_define_opaque_type(\n                                         tcx,"}, {"sha": "adc21b7548b4b4bd359a6e4f88b533bf8c511392", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -626,7 +626,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        match impl_item.node {\n+        match impl_item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.hir_id) {\n                     self.warn_dead_code(impl_item.hir_id,"}, {"sha": "efe0aeb658ec9df7a68018fdabe6e5d01a6ae568", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -55,7 +55,7 @@ fn method_might_be_inlined(\n     if codegen_fn_attrs.requests_inline() || generics.requires_monomorphization(tcx) {\n         return true\n     }\n-    if let hir::ImplItemKind::Method(method_sig, _) = &impl_item.node {\n+    if let hir::ImplItemKind::Method(method_sig, _) = &impl_item.kind {\n         if method_sig.header.is_const() {\n             return true\n         }\n@@ -172,7 +172,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 }\n             }\n             Some(Node::ImplItem(impl_item)) => {\n-                match impl_item.node {\n+                match impl_item.kind {\n                     hir::ImplItemKind::Const(..) => true,\n                     hir::ImplItemKind::Method(..) => {\n                         let attrs = self.tcx.codegen_fn_attrs(def_id);\n@@ -299,7 +299,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 }\n             }\n             Node::ImplItem(impl_item) => {\n-                match impl_item.node {\n+                match impl_item.kind {\n                     hir::ImplItemKind::Const(_, body) => {\n                         self.visit_nested_body(body);\n                     }"}, {"sha": "d83775331ebefddf7ca064f865dceec0376586d1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -830,7 +830,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         use self::hir::ImplItemKind::*;\n-        match impl_item.node {\n+        match impl_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n@@ -1530,7 +1530,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         }\n                     },\n                     Node::ImplItem(impl_item) => {\n-                        if let hir::ImplItemKind::Method(sig, _) = &impl_item.node {\n+                        if let hir::ImplItemKind::Method(sig, _) = &impl_item.kind {\n                             find_arg_use_span(&sig.decl.inputs);\n                         }\n                     }\n@@ -1875,7 +1875,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n-                        node: hir::ImplItemKind::Method(..),\n+                        kind: hir::ImplItemKind::Method(..),\n                         ..\n                     }) => {\n                         let scope = self.tcx.hir().local_def_id(fn_id);\n@@ -2190,7 +2190,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             Node::ImplItem(&hir::ImplItem {\n-                node: hir::ImplItemKind::Method(_, body),\n+                kind: hir::ImplItemKind::Method(_, body),\n                 ..\n             }) => {\n                 if let hir::ItemKind::Impl(.., ref self_ty, ref impl_items) = self.tcx"}, {"sha": "b4734363fb66480f84bdefad893af19840187180", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1168,7 +1168,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 span,\n-                node: hir::ImplItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::ImplItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n                 ..\n             }) |\n             Node::TraitItem(&hir::TraitItem {"}, {"sha": "b6ae999a8e92f0666b7594f7f54c6b05ad2b435e", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -101,7 +101,7 @@ fn reachable_non_generics_provider(\n                     node: hir::ItemKind::Fn(..), ..\n                 }) |\n                 Node::ImplItem(&hir::ImplItem {\n-                    node: hir::ImplItemKind::Method(..),\n+                    kind: hir::ImplItemKind::Method(..),\n                     ..\n                 }) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);"}, {"sha": "593ddad4de4076fc9704b0eee107f8e1bf3cd32a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -404,7 +404,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 }\n             },\n             HirNode::ImplItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     ImplItemKind::Method(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                     ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n                     ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),"}, {"sha": "a3aa1aaa652921441e02ec6f4f829f3ec9601f99", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -806,7 +806,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     }\n \n     fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n-        let is_const = match i.node {\n+        let is_const = match i.kind {\n             ast::ImplItemKind::Const(..) => true,\n             ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n                 header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),"}, {"sha": "b0ad90c65e0d411071f33fd1779fe910167b7aa8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             return;\n         }\n \n-        let desc = match impl_item.node {\n+        let desc = match impl_item.kind {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n             hir::ImplItemKind::Method(..) => \"a method\",\n             hir::ImplItemKind::TyAlias(_) => \"an associated type\","}, {"sha": "ec4201570b16201c528a2e1d40d94d55d4bc57c2", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, ii: &hir::ImplItem) {\n-        if let hir::ImplItemKind::Const(..) = ii.node {\n+        if let hir::ImplItemKind::Const(..) = ii.kind {\n             NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ii.ident);\n         }\n     }"}, {"sha": "8c471e1d4b93baa71acde7a123efb9e52cb70f0e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -970,7 +970,7 @@ impl EncodeContext<'tcx> {\n \n         let kind = match impl_item.kind {\n             ty::AssocKind::Const => {\n-                if let hir::ImplItemKind::Const(_, body_id) = ast_item.node {\n+                if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {\n                     let mir = self.tcx.at(ast_item.span).mir_const_qualif(def_id).0;\n \n                     EntryKind::AssocConst(container,\n@@ -981,7 +981,7 @@ impl EncodeContext<'tcx> {\n                 }\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n+                let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.kind {\n                     FnData {\n                         asyncness: sig.header.asyncness,\n                         constness: sig.header.constness,\n@@ -1001,21 +1001,20 @@ impl EncodeContext<'tcx> {\n             ty::AssocKind::Type => EntryKind::AssocType(container)\n         };\n \n-        let mir =\n-            match ast_item.node {\n-                hir::ImplItemKind::Const(..) => true,\n-                hir::ImplItemKind::Method(ref sig, _) => {\n-                    let generics = self.tcx.generics_of(def_id);\n-                    let needs_inline = (generics.requires_monomorphization(self.tcx) ||\n-                                        tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n-                                        !self.metadata_output_only();\n-                    let is_const_fn = sig.header.constness == hir::Constness::Const;\n-                    let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                    needs_inline || is_const_fn || always_encode_mir\n-                },\n-                hir::ImplItemKind::OpaqueTy(..) |\n-                hir::ImplItemKind::TyAlias(..) => false,\n-            };\n+        let mir = match ast_item.kind {\n+            hir::ImplItemKind::Const(..) => true,\n+            hir::ImplItemKind::Method(ref sig, _) => {\n+                let generics = self.tcx.generics_of(def_id);\n+                let needs_inline = (generics.requires_monomorphization(self.tcx) ||\n+                                    tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n+                                    !self.metadata_output_only();\n+                let is_const_fn = sig.header.constness == hir::Constness::Const;\n+                let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n+                needs_inline || is_const_fn || always_encode_mir\n+            },\n+            hir::ImplItemKind::OpaqueTy(..) |\n+            hir::ImplItemKind::TyAlias(..) => false,\n+        };\n \n         Entry {\n             kind,"}, {"sha": "7c65b4f00bf3b149db3b3b3b4a162f2d47541d9c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 },\n             ),\n             hir::Node::ImplItem(hir::ImplItem {\n-                node: hir::ImplItemKind::Method(method_sig, _),\n+                kind: hir::ImplItemKind::Method(method_sig, _),\n                 ..\n             }) => (method_sig.decl.output.span(), \"\"),\n             _ => (body.span, \"\"),"}, {"sha": "ee9701387ce9a4939f278905b04d764cc8b96a25", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -31,7 +31,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n         | Node::Item(hir::Item { node: hir::ItemKind::Fn(decl, _, _, body_id), .. })\n         | Node::ImplItem(\n             hir::ImplItem {\n-                node: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),\n+                kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),\n                 ..\n             }\n         )\n@@ -48,7 +48,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n         }\n         Node::Item(hir::Item { node: hir::ItemKind::Static(ty, _, body_id), .. })\n         | Node::Item(hir::Item { node: hir::ItemKind::Const(ty, body_id), .. })\n-        | Node::ImplItem(hir::ImplItem { node: hir::ImplItemKind::Const(ty, body_id), .. })\n+        | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n         | Node::TraitItem(\n             hir::TraitItem { node: hir::TraitItemKind::Const(ty, Some(body_id)), .. }\n         ) => {"}, {"sha": "2c000f931ef1f0f92b5c155efc6072a0c281dfcd", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1058,7 +1058,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n-        match ii.node {\n+        match ii.kind {\n             hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n                 let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n                 self.push_if_root(def_id);"}, {"sha": "1ffef27a3ef3437507a482b1ed51d1c8d0242dd5", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -551,7 +551,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, None);\n-                    if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n+                    if let ImplItemKind::Method(ref sig, _) = impl_item.kind {\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         self.check_trait_fn_not_async(impl_item.span, sig.header.asyncness.node);\n                     }\n@@ -832,11 +832,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n-        match ii.node {\n-            ImplItemKind::Method(ref sig, _) => {\n-                self.check_fn_decl(&sig.decl);\n-            }\n-            _ => {}\n+        if let ImplItemKind::Method(ref sig, _) = ii.kind {\n+            self.check_fn_decl(&sig.decl);\n         }\n         visit::walk_impl_item(self, ii);\n     }"}, {"sha": "a4b2b31374bed6028f3f2b921f6cb3fe19a5d393", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1489,7 +1489,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     impl_item_refs.iter()\n                                  .any(|impl_item_ref| {\n                                      let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                     match impl_item.node {\n+                                     match impl_item.kind {\n                                          hir::ImplItemKind::Const(..) |\n                                          hir::ImplItemKind::Method(..) => {\n                                              self.access_levels.is_reachable(\n@@ -1515,7 +1515,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 // don't erroneously report errors for private\n                                 // types in private items.\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                match impl_item.node {\n+                                match impl_item.kind {\n                                     hir::ImplItemKind::Const(..) |\n                                     hir::ImplItemKind::Method(..)\n                                         if self.item_is_public(&impl_item.hir_id, &impl_item.vis) =>\n@@ -1548,7 +1548,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             // Those in 3. are warned with this call.\n                             for impl_item_ref in impl_item_refs {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                if let hir::ImplItemKind::TyAlias(ref ty) = impl_item.node {\n+                                if let hir::ImplItemKind::TyAlias(ref ty) = impl_item.kind {\n                                     self.visit_ty(ty);\n                                 }\n                             }"}, {"sha": "9f73e0e9abbdc6ce3aa2431407a150a0ee06af4d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1132,7 +1132,7 @@ macro_rules! method {\n }\n \n impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n-    method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item, node);\n+    method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item, kind);\n     method!(visit_expr:      ast::Expr,     ast::ExprKind::Mac,       walk_expr, kind);\n     method!(visit_pat:       ast::Pat,      ast::PatKind::Mac,        walk_pat, kind);\n     method!(visit_ty:        ast::Ty,       ast::TyKind::Mac,         walk_ty, node);"}, {"sha": "fab981344790b87d627cbb55e50b56995ff24bbe", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1035,7 +1035,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                                           AssocItemRibKind);\n                                     this.with_generic_param_rib(generic_params, |this| {\n                                         use crate::ResolutionError::*;\n-                                        match impl_item.node {\n+                                        match impl_item.kind {\n                                             ImplItemKind::Const(..) => {\n                                                 debug!(\n                                                     \"resolve_implementation ImplItemKind::Const\","}, {"sha": "805663965c829a04ad14fa3de8585440c99ea313", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1078,7 +1078,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n     fn process_impl_item(&mut self, impl_item: &'l ast::ImplItem, impl_id: DefId) {\n         self.process_macro_use(impl_item.span);\n-        match impl_item.node {\n+        match impl_item.kind {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     impl_item.id,"}, {"sha": "78809d88d1f4613ae5378b8a37d2cfc77bc4b0cd", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -200,7 +200,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n             _ => NodeKind::Other,\n         }\n \n-        Node::ImplItem(item) => match item.node {\n+        Node::ImplItem(item) => match item.kind {\n             ImplItemKind::Method(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         }"}, {"sha": "5aa053b1968d9e87e1cdadc3526bd212b999fa0d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -425,7 +425,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n     let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id).unwrap();\n     let (impl_m_output, impl_m_iter) = match tcx.hir()\n                                                 .expect_impl_item(impl_m_hir_id)\n-                                                .node {\n+                                                .kind {\n         ImplItemKind::Method(ref impl_m_sig, _) => {\n             (&impl_m_sig.decl.output, impl_m_sig.decl.inputs.iter())\n         }\n@@ -740,7 +740,7 @@ fn compare_number_of_method_arguments<'tcx>(\n             trait_item_span\n         };\n         let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id).unwrap();\n-        let impl_span = match tcx.hir().expect_impl_item(impl_m_hir_id).node {\n+        let impl_span = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n             ImplItemKind::Method(ref impl_m_sig, _) => {\n                 let pos = if impl_number_args > 0 {\n                     impl_number_args - 1\n@@ -883,7 +883,7 @@ fn compare_synthetic_generics<'tcx>(\n                     (|| {\n                         let impl_m = tcx.hir().as_local_hir_id(impl_m.def_id)?;\n                         let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });\n-                        let input_tys = match impl_m.node {\n+                        let input_tys = match impl_m.kind {\n                             hir::ImplItemKind::Method(ref sig, _) => &sig.decl.inputs,\n                             _ => unreachable!(),\n                         };\n@@ -1014,7 +1014,7 @@ pub fn compare_const_impl<'tcx>(\n                    trait_ty);\n \n             // Locate the Span containing just the type of the offending impl\n-            match tcx.hir().expect_impl_item(impl_c_hir_id).node {\n+            match tcx.hir().expect_impl_item(impl_c_hir_id).kind {\n                 ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n                 _ => bug!(\"{:?} is not a impl const\", impl_c),\n             }"}, {"sha": "275952b7749cc30d95c1254cfad8c41167f9a739", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -813,7 +813,7 @@ fn primary_body_of(\n             }\n         }\n         Node::ImplItem(item) => {\n-            match item.node {\n+            match item.kind {\n                 hir::ImplItemKind::Const(ref ty, body) =>\n                     Some((body, Some(ty), None, None)),\n                 hir::ImplItemKind::Method(ref sig, body) =>\n@@ -1681,7 +1681,7 @@ fn check_specialization_validity<'tcx>(\n ) {\n     let ancestors = trait_def.ancestors(tcx, impl_id);\n \n-    let kind = match impl_item.node {\n+    let kind = match impl_item.kind {\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n         hir::ImplItemKind::Method(..) => ty::AssocKind::Method,\n         hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n@@ -1725,7 +1725,7 @@ fn check_impl_items_against_trait<'tcx>(\n         let ty_impl_item = tcx.associated_item(\n             tcx.hir().local_def_id(impl_item.hir_id));\n         let ty_trait_item = tcx.associated_items(impl_trait_ref.def_id)\n-            .find(|ac| Namespace::from(&impl_item.node) == Namespace::from(ac.kind) &&\n+            .find(|ac| Namespace::from(&impl_item.kind) == Namespace::from(ac.kind) &&\n                        tcx.hygienic_eq(ty_impl_item.ident, ac.ident, impl_trait_ref.def_id))\n             .or_else(|| {\n                 // Not compatible, but needed for the error message\n@@ -1735,7 +1735,7 @@ fn check_impl_items_against_trait<'tcx>(\n \n         // Check that impl definition matches trait definition\n         if let Some(ty_trait_item) = ty_trait_item {\n-            match impl_item.node {\n+            match impl_item.kind {\n                 hir::ImplItemKind::Const(..) => {\n                     // Find associated const definition.\n                     if ty_trait_item.kind == ty::AssocKind::Const {\n@@ -4072,7 +4072,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 node: hir::ItemKind::Fn(_, _, _, body_id), ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n-                node: hir::ImplItemKind::Method(_, body_id), ..\n+                kind: hir::ImplItemKind::Method(_, body_id), ..\n             }) => {\n                 let body = self.tcx.hir().body(body_id);\n                 if let ExprKind::Block(block, _) = &body.value.kind {\n@@ -4107,7 +4107,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }, ..), ..\n             }) => Some((decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n-                ident, node: hir::ImplItemKind::Method(hir::MethodSig {\n+                ident, kind: hir::ImplItemKind::Method(hir::MethodSig {\n                     ref decl, ..\n                 }, ..), ..\n             }) => Some((decl, ident, false)),\n@@ -4196,7 +4196,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 })) |\n                 Some(Node::ImplItem(hir::ImplItem {\n-                    node: hir::ImplItemKind::Method(_, body_id),\n+                    kind: hir::ImplItemKind::Method(_, body_id),\n                     ..\n                 })) |\n                 Some(Node::TraitItem(hir::TraitItem {"}, {"sha": "468815e88710f39a07d5f5b125d8a49856883eab", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -178,7 +178,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n-    let method_sig = match impl_item.node {\n+    let method_sig = match impl_item.kind {\n         hir::ImplItemKind::Method(ref sig, _) => Some(sig),\n         _ => None\n     };"}, {"sha": "9d723054897f2a99c6bd9a2d21fb11c33cebf012", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -507,7 +507,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n-    if let hir::ImplItemKind::Method(..) = tcx.hir().expect_impl_item(impl_item_id).node {\n+    if let hir::ImplItemKind::Method(..) = tcx.hir().expect_impl_item(impl_item_id).kind {\n         tcx.fn_sig(def_id);\n     }\n }\n@@ -866,7 +866,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             }\n             _ => None,\n         },\n-        Node::ImplItem(item) => match item.node {\n+        Node::ImplItem(item) => match item.kind {\n             hir::ImplItemKind::Method(ref sig, _) => {\n                 has_late_bound_regions(tcx, &item.generics, &sig.decl)\n             }\n@@ -1230,7 +1230,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n             }\n         },\n \n-        Node::ImplItem(item) => match item.node {\n+        Node::ImplItem(item) => match item.kind {\n             ImplItemKind::Method(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n@@ -1790,7 +1790,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n-            node: ImplItemKind::Method(MethodSig { header, decl }, _),\n+            kind: ImplItemKind::Method(MethodSig { header, decl }, _),\n             ..\n         })\n         | Item(hir::Item {\n@@ -2055,7 +2055,7 @@ fn explicit_predicates_of(\n     let ast_generics = match node {\n         Node::TraitItem(item) => &item.generics,\n \n-        Node::ImplItem(item) => match item.node {\n+        Node::ImplItem(item) => match item.kind {\n             ImplItemKind::OpaqueTy(ref bounds) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 let opaque_ty = tcx.mk_opaque(def_id, substs);"}, {"sha": "8f661112caa15f19994b21d22135e15bfc43baa9", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -197,7 +197,7 @@ fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplI\n     let mut seen_value_items = FxHashMap::default();\n     for impl_item_ref in impl_item_refs {\n         let impl_item = tcx.hir().impl_item(impl_item_ref.id);\n-        let seen_items = match impl_item.node {\n+        let seen_items = match impl_item.kind {\n             hir::ImplItemKind::TyAlias(_) => &mut seen_type_items,\n             _                          => &mut seen_value_items,\n         };"}, {"sha": "2aeff86de5973b726e7eee3b17cff2f08a44e8f8", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n-        if let hir::ImplItemKind::Method(..) = impl_item.node {\n+        if let hir::ImplItemKind::Method(..) = impl_item.kind {\n             self.visit_node_helper(impl_item.hir_id);\n         }\n     }"}, {"sha": "a2aab4587eae9c1e1f5c137640d7b5c1e9759561", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -64,7 +64,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n             _ => unsupported()\n         },\n \n-        Node::ImplItem(item) => match item.node {\n+        Node::ImplItem(item) => match item.kind {\n             hir::ImplItemKind::Method(..) => {}\n \n             _ => unsupported()"}, {"sha": "0ca7c499bee2e22a2b09d43d67d4aedc37a6098f", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n-        if let hir::ImplItemKind::Method(..) = impl_item.node {\n+        if let hir::ImplItemKind::Method(..) = impl_item.kind {\n             self.add_inferreds_for_item(impl_item.hir_id);\n         }\n     }"}, {"sha": "892c9f1160f2b6302c91b79aefa541f993c2859b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -2321,7 +2321,7 @@ impl Clean<Item> for hir::TraitItem {\n \n impl Clean<Item> for hir::ImplItem {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let inner = match self.node {\n+        let inner = match self.kind {\n             hir::ImplItemKind::Const(ref ty, expr) => {\n                 AssocConstItem(ty.clean(cx),\n                                     Some(print_const_expr(cx, expr)))"}, {"sha": "08268aa418aa0e334318ee81ac69b6b54669d2d5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1497,7 +1497,7 @@ pub struct ImplItem {\n     pub defaultness: Defaultness,\n     pub attrs: Vec<Attribute>,\n     pub generics: Generics,\n-    pub node: ImplItemKind,\n+    pub kind: ImplItemKind,\n     pub span: Span,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,"}, {"sha": "ae342fef651e8fbee6b54c5207f70569a8aca303", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1337,7 +1337,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                                      AstFragmentKind::ImplItems, after_derive).make_impl_items();\n         }\n \n-        match item.node {\n+        match item.kind {\n             ast::ImplItemKind::Macro(mac) => {\n                 let ast::ImplItem { attrs, span, .. } = item;\n                 self.check_attributes(&attrs);"}, {"sha": "07ee53aceb3ad215ee0ad22910aafb66d774eea2", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -58,7 +58,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         }]),\n         AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::ImplItem {\n             id, span, ident, vis, attrs, generics,\n-            node: ast::ImplItemKind::Macro(mac_placeholder()),\n+            kind: ast::ImplItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,\n         }]),\n@@ -268,7 +268,7 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n     }\n \n     fn flat_map_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n-        match item.node {\n+        match item.kind {\n             ast::ImplItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n             _ => noop_flat_map_impl_item(item, self),\n         }"}, {"sha": "80e1c93ae764674a2f5a7f6ce3a4e2c88a7f1e33", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -600,7 +600,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                               \"specialization is unstable\");\n         }\n \n-        match ii.node {\n+        match ii.kind {\n             ast::ImplItemKind::Method(..) => {}\n             ast::ImplItemKind::OpaqueTy(..) => {\n                 gate_feature_post!("}, {"sha": "0e417f4b99b657064b62912dd13e751ee31f0951", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -951,14 +951,14 @@ pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, vis: &mut T)\n pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut T)\n                                               -> SmallVec<[ImplItem; 1]>\n {\n-    let ImplItem { id, ident, vis, defaultness: _, attrs, generics, node, span, tokens: _ } =\n+    let ImplItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n         &mut item;\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     visitor.visit_generics(generics);\n-    match node  {\n+    match kind  {\n         ImplItemKind::Const(ty, expr) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);"}, {"sha": "c56bb65f69f90ad4ff929fe5af8308f422f45051", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -783,7 +783,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness();\n-        let (name, node, generics) = if let Some(type_) = self.eat_type() {\n+        let (name, kind, generics) = if let Some(type_) = self.eat_type() {\n             let (name, alias, generics) = type_?;\n             let kind = match alias {\n                 AliasKind::Weak(typ) => ast::ImplItemKind::TyAlias(typ),\n@@ -802,9 +802,9 @@ impl<'a> Parser<'a> {\n             self.expect(&token::Semi)?;\n             (name, ast::ImplItemKind::Const(typ, expr), Generics::default())\n         } else {\n-            let (name, inner_attrs, generics, node) = self.parse_impl_method(&vis, at_end)?;\n+            let (name, inner_attrs, generics, kind) = self.parse_impl_method(&vis, at_end)?;\n             attrs.extend(inner_attrs);\n-            (name, node, generics)\n+            (name, kind, generics)\n         };\n \n         Ok(ImplItem {\n@@ -815,7 +815,7 @@ impl<'a> Parser<'a> {\n             defaultness,\n             attrs,\n             generics,\n-            node,\n+            kind,\n             tokens: None,\n         })\n     }"}, {"sha": "1f7f8b59ee34ef8dc66d3674afc8f4fdafdd1b9d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -1597,7 +1597,7 @@ impl<'a> State<'a> {\n         self.maybe_print_comment(ii.span.lo());\n         self.print_outer_attributes(&ii.attrs);\n         self.print_defaultness(ii.defaultness);\n-        match ii.node {\n+        match ii.kind {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 self.print_associated_const(ii.ident, ty, Some(expr), &ii.vis);\n             }"}, {"sha": "8d2b40c95348fe81a5a253062672fa362534cb12", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -617,7 +617,7 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n     visitor.visit_ident(impl_item.ident);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     visitor.visit_generics(&impl_item.generics);\n-    match impl_item.node {\n+    match impl_item.kind {\n         ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);"}, {"sha": "a1986d380f71050cf95d7b99c3e659474a8d99d9", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6aabbaa19378ac621c2971934383a146176fec/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ce6aabbaa19378ac621c2971934383a146176fec", "patch": "@@ -530,7 +530,7 @@ impl<'a> TraitDef<'a> {\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n-                node: ast::ImplItemKind::TyAlias(\n+                kind: ast::ImplItemKind::TyAlias(\n                     type_def.to_ty(cx, self.span, type_ident, generics)),\n                 tokens: None,\n             }\n@@ -960,7 +960,7 @@ impl<'a> MethodDef<'a> {\n             vis: respan(trait_.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            node: ast::ImplItemKind::Method(ast::MethodSig {\n+            kind: ast::ImplItemKind::Method(ast::MethodSig {\n                                                 header: ast::FnHeader {\n                                                     unsafety, abi,\n                                                     ..ast::FnHeader::default()"}]}