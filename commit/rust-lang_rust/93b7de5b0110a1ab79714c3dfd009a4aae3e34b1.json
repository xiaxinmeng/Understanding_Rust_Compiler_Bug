{"sha": "93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "node_id": "C_kwDOAAsO6NoAKDkzYjdkZTViMDExMGExYWI3OTcxNGMzZGZkMDA5YTRhYWUzZTM0YjE", "commit": {"author": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2019-11-06T10:15:34Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-01-02T16:06:06Z"}, "message": "Make `--check` work when running from stdin. (#3896)\n\n# Conflicts:\n#\tsrc/bin/main.rs", "tree": {"sha": "578b0b2f59a0e587714031493be6254cb35a0f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578b0b2f59a0e587714031493be6254cb35a0f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "html_url": "https://github.com/rust-lang/rust/commit/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/comments", "author": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "737e6f704671dbf30e81dababa0133b585c03b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/737e6f704671dbf30e81dababa0133b585c03b48", "html_url": "https://github.com/rust-lang/rust/commit/737e6f704671dbf30e81dababa0133b585c03b48"}], "stats": {"total": 165, "additions": 139, "deletions": 26}, "files": [{"sha": "6f5b09fc86adf54bb5d3b951d08c19266bc70dae", "filename": "src/bin/main.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -74,14 +74,10 @@ pub enum OperationError {\n     /// An io error during reading or writing.\n     #[error(\"{0}\")]\n     IoError(IoError),\n-    /// Attempt to use --check with stdin, which isn't currently\n-    /// supported.\n-    #[error(\"The `--check` option is not supported with standard input.\")]\n-    CheckWithStdin,\n-    /// Attempt to use --emit=json with stdin, which isn't currently\n-    /// supported.\n-    #[error(\"Using `--emit` other than stdout is not supported with standard input.\")]\n-    EmitWithStdin,\n+    /// Attempt to use --emit with a mode which is not currently\n+    /// supported with stdandard input.\n+    #[error(\"Emit mode {0} not supported with standard output.\")]\n+    StdinBadEmit(EmitMode),\n }\n \n impl From<IoError> for OperationError {\n@@ -255,15 +251,20 @@ fn format_string(input: String, options: GetOptsOptions) -> Result<i32> {\n     let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n     if options.check {\n-        return Err(OperationError::CheckWithStdin.into());\n-    }\n-    if let Some(emit_mode) = options.emit_mode {\n-        if emit_mode != EmitMode::Stdout {\n-            return Err(OperationError::EmitWithStdin.into());\n+        config.set().emit_mode(EmitMode::Diff);\n+    } else {\n+        match options.emit_mode {\n+            // Emit modes which work with standard input\n+            // None means default, which is Stdout.\n+            None | Some(EmitMode::Stdout) | Some(EmitMode::Checkstyle) | Some(EmitMode::Json) => {}\n+            Some(emit_mode) => {\n+                return Err(OperationError::StdinBadEmit(emit_mode).into());\n+            }\n         }\n+        config\n+            .set()\n+            .emit_mode(options.emit_mode.unwrap_or(EmitMode::Stdout));\n     }\n-    // emit mode is always Stdout for Stdin.\n-    config.set().emit_mode(EmitMode::Stdout);\n     config.set().verbose(Verbosity::Quiet);\n \n     // parse file_lines"}, {"sha": "545b259979d911d04b8200a3459fbe2b5cfce07c", "filename": "src/emitter/checkstyle.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle.rs?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -2,7 +2,6 @@ use self::xml::XmlEscaped;\n use super::*;\n use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n use std::io::{self, Write};\n-use std::path::Path;\n \n mod xml;\n \n@@ -30,7 +29,6 @@ impl Emitter for CheckstyleEmitter {\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 0;\n-        let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         output_checkstyle_file(output, filename, diff)?;\n         Ok(EmitterResult::default())\n@@ -39,13 +37,13 @@ impl Emitter for CheckstyleEmitter {\n \n pub(crate) fn output_checkstyle_file<T>(\n     mut writer: T,\n-    filename: &Path,\n+    filename: &FileName,\n     diff: Vec<Mismatch>,\n ) -> Result<(), io::Error>\n where\n     T: Write,\n {\n-    write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n+    write!(writer, r#\"<file name=\"{}\">\"#, filename)?;\n     for mismatch in diff {\n         let begin_line = mismatch.line_number;\n         let mut current_line;\n@@ -77,7 +75,11 @@ mod tests {\n     fn emits_empty_record_on_file_with_no_mismatches() {\n         let file_name = \"src/well_formatted.rs\";\n         let mut writer = Vec::new();\n-        let _ = output_checkstyle_file(&mut writer, &PathBuf::from(file_name), vec![]);\n+        let _ = output_checkstyle_file(\n+            &mut writer,\n+            &FileName::Real(PathBuf::from(file_name)),\n+            vec![],\n+        );\n         assert_eq!(\n             &writer[..],\n             format!(r#\"<file name=\"{}\"></file>\"#, file_name).as_bytes()"}, {"sha": "4d6f972c5e3d8107636fd53f299a967bb73d1d35", "filename": "src/emitter/json.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Femitter%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Femitter%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fjson.rs?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -3,7 +3,6 @@ use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n use serde::Serialize;\n use serde_json::to_string as to_json_string;\n use std::io::{self, Write};\n-use std::path::Path;\n \n #[derive(Debug, Default)]\n pub(crate) struct JsonEmitter {\n@@ -47,7 +46,6 @@ impl Emitter for JsonEmitter {\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n         const CONTEXT_SIZE: usize = 0;\n-        let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         let has_diff = !diff.is_empty();\n \n@@ -62,7 +60,7 @@ impl Emitter for JsonEmitter {\n \n fn output_json_file<T>(\n     mut writer: T,\n-    filename: &Path,\n+    filename: &FileName,\n     diff: Vec<Mismatch>,\n     num_emitted_files: u32,\n ) -> Result<(), io::Error>\n@@ -106,7 +104,7 @@ where\n         });\n     }\n     let json = to_json_string(&MismatchedFile {\n-        name: String::from(filename.to_str().unwrap()),\n+        name: format!(\"{}\", filename),\n         mismatches,\n     })?;\n     let prefix = if num_emitted_files > 0 { \",\" } else { \"\" };\n@@ -148,7 +146,12 @@ mod tests {\n \n         let mut writer = Vec::new();\n         let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n+        let _ = output_json_file(\n+            &mut writer,\n+            &FileName::Real(PathBuf::from(file)),\n+            vec![mismatch],\n+            0,\n+        );\n         assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n     }\n \n@@ -188,7 +191,12 @@ mod tests {\n \n         let mut writer = Vec::new();\n         let exp_json = to_json_string(&mismatched_file).unwrap();\n-        let _ = output_json_file(&mut writer, &PathBuf::from(file), vec![mismatch], 0);\n+        let _ = output_json_file(\n+            &mut writer,\n+            &FileName::Real(PathBuf::from(file)),\n+            vec![mismatch],\n+            0,\n+        );\n         assert_eq!(&writer[..], format!(\"{}\", exp_json).as_bytes());\n     }\n "}, {"sha": "e1a7972ec829c23327d0c01eb2da3f3391e4eadf", "filename": "src/test/mod.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -307,6 +307,52 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n     }\n }\n \n+// Helper function for comparing the results of rustfmt\n+// to a known output generated by one of the write modes.\n+fn assert_stdin_output(\n+    source: &Path,\n+    expected_filename: &Path,\n+    emit_mode: EmitMode,\n+    has_diff: bool,\n+) {\n+    let mut config = Config::default();\n+    config.set().newline_style(NewlineStyle::Unix);\n+    config.set().emit_mode(emit_mode);\n+\n+    let mut source_file = fs::File::open(&source).expect(\"couldn't open source\");\n+    let mut source_text = String::new();\n+    source_file\n+        .read_to_string(&mut source_text)\n+        .expect(\"Failed reading target\");\n+    let input = Input::Text(source_text);\n+\n+    // Populate output by writing to a vec.\n+    let mut buf: Vec<u8> = vec![];\n+    {\n+        let mut session = Session::new(config, Some(&mut buf));\n+        session.format(input).unwrap();\n+        let errors = ReportedErrors {\n+            has_diff: has_diff,\n+            ..Default::default()\n+        };\n+        assert_eq!(session.errors, errors);\n+    }\n+\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"couldn't open target\");\n+    let mut expected_text = String::new();\n+    expected_file\n+        .read_to_string(&mut expected_text)\n+        .expect(\"Failed reading target\");\n+\n+    let output = String::from_utf8(buf).unwrap();\n+    let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n+    if !compare.is_empty() {\n+        let mut failures = HashMap::new();\n+        failures.insert(source.to_owned(), compare);\n+        print_mismatches_default_message(failures);\n+        panic!(\"Text does not match expected output\");\n+    }\n+}\n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n #[nightly_only_test]\n@@ -463,6 +509,30 @@ fn stdin_works_with_modified_lines() {\n     assert_eq!(buf, output.as_bytes());\n }\n \n+/// Ensures that `EmitMode::Json` works with input from `stdin`.\n+#[test]\n+fn stdin_works_with_json() {\n+    init_log();\n+    assert_stdin_output(\n+        Path::new(\"tests/writemode/source/stdin.rs\"),\n+        Path::new(\"tests/writemode/target/stdin.json\"),\n+        EmitMode::Json,\n+        true,\n+    );\n+}\n+\n+/// Ensures that `EmitMode::Checkstyle` works with input from `stdin`.\n+#[test]\n+fn stdin_works_with_checkstyle() {\n+    init_log();\n+    assert_stdin_output(\n+        Path::new(\"tests/writemode/source/stdin.rs\"),\n+        Path::new(\"tests/writemode/target/stdin.xml\"),\n+        EmitMode::Checkstyle,\n+        false,\n+    );\n+}\n+\n #[test]\n fn stdin_disable_all_formatting_test() {\n     init_log();\n@@ -896,3 +966,26 @@ fn verify_check_works() {\n         .status()\n         .expect(\"run with check option failed\");\n }\n+\n+#[test]\n+fn verify_check_works_with_stdin() {\n+    init_log();\n+\n+    let mut child = Command::new(rustfmt().to_str().unwrap())\n+        .arg(\"--check\")\n+        .stdin(Stdio::piped())\n+        .stderr(Stdio::piped())\n+        .spawn()\n+        .expect(\"run with check option failed\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+        stdin\n+            .write_all(\"fn main() {}\\n\".as_bytes())\n+            .expect(\"Failed to write to rustfmt --check\");\n+    }\n+    let output = child\n+        .wait_with_output()\n+        .expect(\"Failed to wait on rustfmt child\");\n+    assert!(output.status.success());\n+}"}, {"sha": "06f8a0c288d7fadee2d4abb621de66cee7cbb51c", "filename": "tests/writemode/source/stdin.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/tests%2Fwritemode%2Fsource%2Fstdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/tests%2Fwritemode%2Fsource%2Fstdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fsource%2Fstdin.rs?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -0,0 +1,6 @@\n+\n+fn\n+ some( )\n+{\n+}\n+fn main () {}"}, {"sha": "20e38f57f4a79b7cd6d41ea4e16a2e41068d94a8", "filename": "tests/writemode/target/stdin.json", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/tests%2Fwritemode%2Ftarget%2Fstdin.json", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/tests%2Fwritemode%2Ftarget%2Fstdin.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fstdin.json?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -0,0 +1 @@\n+[{\"name\":\"stdin\",\"mismatches\":[{\"original_begin_line\":1,\"original_end_line\":6,\"expected_begin_line\":1,\"expected_end_line\":2,\"original\":\"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\",\"expected\":\"fn some() {}\\nfn main() {}\"}]}]\n\\ No newline at end of file"}, {"sha": "e70708338f563d70284fa617132a3f9a531cf443", "filename": "tests/writemode/target/stdin.xml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/tests%2Fwritemode%2Ftarget%2Fstdin.xml", "raw_url": "https://github.com/rust-lang/rust/raw/93b7de5b0110a1ab79714c3dfd009a4aae3e34b1/tests%2Fwritemode%2Ftarget%2Fstdin.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fstdin.xml?ref=93b7de5b0110a1ab79714c3dfd009a4aae3e34b1", "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<checkstyle version=\"4.3\"><file name=\"stdin\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn some() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn main() {}`\" /></file></checkstyle>"}]}