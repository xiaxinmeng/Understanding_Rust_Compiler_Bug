{"sha": "e927a244ea8f162858594552ddaec8465d54c329", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MjdhMjQ0ZWE4ZjE2Mjg1ODU5NDU1MmRkYWVjODQ2NWQ1NGMzMjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-05T05:18:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-12T05:23:35Z"}, "message": "Avoid the Box in `TyCtxt::associated_items`.\n\nThis reduces instruction counts on packed_simd by 2%.", "tree": {"sha": "0f49f2cf913eae8f82e205fd65d3eee5b71816b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f49f2cf913eae8f82e205fd65d3eee5b71816b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e927a244ea8f162858594552ddaec8465d54c329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e927a244ea8f162858594552ddaec8465d54c329", "html_url": "https://github.com/rust-lang/rust/commit/e927a244ea8f162858594552ddaec8465d54c329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e927a244ea8f162858594552ddaec8465d54c329/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a2ca1a6f18aa93d3120761f614ec2d39b4cb1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2ca1a6f18aa93d3120761f614ec2d39b4cb1ac", "html_url": "https://github.com/rust-lang/rust/commit/5a2ca1a6f18aa93d3120761f614ec2d39b4cb1ac"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "e44e1453b79654ff1ef0a9cf061ee607d2deaa1d", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e927a244ea8f162858594552ddaec8465d54c329/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e927a244ea8f162858594552ddaec8465d54c329/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=e927a244ea8f162858594552ddaec8465d54c329", "patch": "@@ -366,7 +366,7 @@ impl<'a, 'gcx, 'tcx> Node {\n     pub fn items(\n         &self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    ) -> impl Iterator<Item = ty::AssociatedItem> + 'a {\n+    ) -> ty::AssociatedItemsIterator<'a, 'gcx, 'tcx> {\n         tcx.associated_items(self.def_id())\n     }\n "}, {"sha": "9a63bb374c66d23e589183846cbd165e1992be2b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e927a244ea8f162858594552ddaec8465d54c329/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e927a244ea8f162858594552ddaec8465d54c329/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e927a244ea8f162858594552ddaec8465d54c329", "patch": "@@ -2674,10 +2674,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn associated_items(\n         self,\n         def_id: DefId,\n-    ) -> impl Iterator<Item = AssociatedItem> + 'a {\n-        let def_ids = self.associated_item_def_ids(def_id);\n-        Box::new((0..def_ids.len()).map(move |i| self.associated_item(def_ids[i])))\n-            as Box<dyn Iterator<Item = AssociatedItem> + 'a>\n+    ) -> AssociatedItemsIterator<'a, 'gcx, 'tcx> {\n+        // Ideally, we would use `-> impl Iterator` here, but it falls\n+        // afoul of the conservative \"capture [restrictions]\" we put\n+        // in place, so we use a hand-written iterator.\n+        //\n+        // [restrictions]: https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\n+        AssociatedItemsIterator {\n+            tcx: self,\n+            def_ids: self.associated_item_def_ids(def_id),\n+            next_index: 0,\n+        }\n     }\n \n     /// Returns `true` if the impls are the same polarity and the trait either\n@@ -2874,6 +2881,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n+pub struct AssociatedItemsIterator<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    def_ids: Lrc<Vec<DefId>>,\n+    next_index: usize,\n+}\n+\n+impl Iterator for AssociatedItemsIterator<'_, '_, '_> {\n+    type Item = AssociatedItem;\n+\n+    fn next(&mut self) -> Option<AssociatedItem> {\n+        let def_id = self.def_ids.get(self.next_index)?;\n+        self.next_index += 1;\n+        Some(self.tcx.associated_item(*def_id))\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn with_freevars<T, F>(self, fid: NodeId, f: F) -> T where\n         F: FnOnce(&[hir::Freevar]) -> T,"}]}