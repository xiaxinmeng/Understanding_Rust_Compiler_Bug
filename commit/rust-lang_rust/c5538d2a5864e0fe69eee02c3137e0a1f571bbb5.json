{"sha": "c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTM4ZDJhNTg2NGUwZmU2OWVlZTAyYzMxMzdlMGExZjU3MWJiYjU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-16T01:24:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-16T01:24:03Z"}, "message": "Merge pull request #1692 from topecongiro/chain/last-item\n\nAllow overflowing the last item of chain only if it is multi-lined", "tree": {"sha": "0fc77adb07912c88c836fc918c33d65358a2be65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc77adb07912c88c836fc918c33d65358a2be65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "html_url": "https://github.com/rust-lang/rust/commit/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f", "html_url": "https://github.com/rust-lang/rust/commit/3c36cfbeea08a0b2987f9a5921d3f78c8ea19e3f"}, {"sha": "208ff15954c76ee0a7908e20eecb35dac6a69f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/208ff15954c76ee0a7908e20eecb35dac6a69f72", "html_url": "https://github.com/rust-lang/rust/commit/208ff15954c76ee0a7908e20eecb35dac6a69f72"}], "stats": {"total": 348, "additions": 188, "deletions": 160}, "files": [{"sha": "25c1c353915107de5845794b7687a54fe9688c6b", "filename": "src/chains.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -167,9 +167,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let child_shape_iter = Some(first_child_shape).into_iter().chain(\n         ::std::iter::repeat(\n             other_child_shape,\n-        ).take(\n-            subexpr_list.len() - 1,\n-        ),\n+        ).take(subexpr_list.len() - 1),\n     );\n     let iter = subexpr_list.iter().rev().zip(child_shape_iter);\n     let mut rewrites = try_opt!(\n@@ -180,9 +178,9 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n     // Total of all items excluding the last.\n     let last_non_try_index = rewrites.len() - (1 + trailing_try_num);\n-    let almost_total = rewrites[..last_non_try_index].iter().fold(0, |a, b| {\n-        a + first_line_width(b)\n-    }) + parent_rewrite.len();\n+    let almost_total = rewrites[..last_non_try_index]\n+        .iter()\n+        .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n     let one_line_len = rewrites.iter().fold(0, |a, r| a + first_line_width(r)) +\n         parent_rewrite.len();\n \n@@ -320,9 +318,9 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n fn is_extendable_parent(context: &RewriteContext, parent_str: &str) -> bool {\n     context.config.chain_indent() == IndentStyle::Block &&\n         parent_str.lines().last().map_or(false, |s| {\n-            s.trim().chars().all(|c| {\n-                c == ')' || c == ']' || c == '}' || c == '?'\n-            })\n+            s.trim()\n+                .chars()\n+                .all(|c| c == ')' || c == ']' || c == '}' || c == '?')\n         })\n }\n \n@@ -348,7 +346,7 @@ fn rewrite_last_child_with_overflow(\n ) -> bool {\n     if let Some(shape) = shape.shrink_left(almost_total) {\n         if let Some(ref mut rw) = rewrite_chain_subexpr(expr, span, context, shape) {\n-            if almost_total + first_line_width(rw) <= one_line_budget {\n+            if almost_total + first_line_width(rw) <= one_line_budget && rw.lines().count() > 3 {\n                 ::std::mem::swap(last_child, rw);\n                 return true;\n             }"}, {"sha": "d8189df363cbd0597f040f52a0ce1c192bf5cf63", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -45,9 +45,9 @@ pub enum CommentStyle<'a> {\n \n fn custom_opener(s: &str) -> &str {\n     s.lines().next().map_or(\"\", |first_line| {\n-        first_line.find(' ').map_or(first_line, |space_index| {\n-            &first_line[0..space_index + 1]\n-        })\n+        first_line\n+            .find(' ')\n+            .map_or(first_line, |space_index| &first_line[0..space_index + 1])\n     })\n }\n "}, {"sha": "892e6ef905ead6937eac9c4ccab9434b59a13cd6", "filename": "src/expr.rs", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -360,9 +360,8 @@ where\n         // This is needed in case of line break not caused by a\n         // shortage of space, but by end-of-line comments, for example.\n         if !rhs_result.contains('\\n') {\n-            let lhs_shape = try_opt!(try_opt!(shape.offset_left(prefix.len())).sub_width(\n-                infix.len(),\n-            ));\n+            let lhs_shape =\n+                try_opt!(try_opt!(shape.offset_left(prefix.len())).sub_width(infix.len()));\n             let lhs_result = lhs.rewrite(context, lhs_shape);\n             if let Some(lhs_result) = lhs_result {\n                 let mut result = format!(\"{}{}{}\", prefix, lhs_result, infix);\n@@ -451,9 +450,11 @@ where\n     let nested_shape = match context.config.array_layout() {\n         IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces()),\n         IndentStyle::Visual => {\n-            try_opt!(shape.visual_indent(bracket_size).sub_width(\n-                bracket_size * 2,\n-            ))\n+            try_opt!(\n+                shape\n+                    .visual_indent(bracket_size)\n+                    .sub_width(bracket_size * 2)\n+            )\n         }\n     };\n \n@@ -476,9 +477,9 @@ where\n         }\n     }\n \n-    let has_long_item = items.iter().any(|li| {\n-        li.item.as_ref().map(|s| s.len() > 10).unwrap_or(false)\n-    });\n+    let has_long_item = items\n+        .iter()\n+        .any(|li| li.item.as_ref().map(|s| s.len() > 10).unwrap_or(false));\n \n     let tactic = match context.config.array_layout() {\n         IndentStyle::Block => {\n@@ -1699,9 +1700,10 @@ impl Rewrite for ast::Arm {\n             body.rewrite(context, body_shape),\n             body_shape.width,\n         ));\n-        let indent_str = shape.indent.block_indent(context.config).to_string(\n-            context.config,\n-        );\n+        let indent_str = shape\n+            .indent\n+            .block_indent(context.config)\n+            .to_string(context.config);\n         let (body_prefix, body_suffix) = if context.config.wrap_match_arms() {\n             if context.config.match_block_trailing_comma() {\n                 (\"{\", \"},\")\n@@ -1763,13 +1765,13 @@ fn rewrite_guard(\n     if let Some(ref guard) = *guard {\n         // First try to fit the guard string on the same line as the pattern.\n         // 4 = ` if `, 5 = ` => {`\n-        if let Some(cond_shape) = shape.shrink_left(pattern_width + 4).and_then(\n-            |s| s.sub_width(5),\n-        )\n+        if let Some(cond_shape) = shape\n+            .shrink_left(pattern_width + 4)\n+            .and_then(|s| s.sub_width(5))\n         {\n-            if let Some(cond_str) = guard.rewrite(context, cond_shape).and_then(|s| {\n-                s.rewrite(context, cond_shape)\n-            })\n+            if let Some(cond_str) = guard\n+                .rewrite(context, cond_shape)\n+                .and_then(|s| s.rewrite(context, cond_shape))\n             {\n                 if !cond_str.contains('\\n') {\n                     return Some(format!(\" if {}\", cond_str));\n@@ -1787,9 +1789,10 @@ fn rewrite_guard(\n             if let Some(cond_str) = guard.rewrite(context, cond_shape) {\n                 return Some(format!(\n                     \"\\n{}if {}\",\n-                    shape.indent.block_indent(context.config).to_string(\n-                        context.config,\n-                    ),\n+                    shape\n+                        .indent\n+                        .block_indent(context.config)\n+                        .to_string(context.config),\n                     cond_str\n                 ));\n             }\n@@ -1821,9 +1824,8 @@ fn rewrite_pat_expr(\n             } else {\n                 format!(\"{} \", matcher)\n             };\n-            let pat_shape = try_opt!(try_opt!(shape.offset_left(matcher.len())).sub_width(\n-                connector.len(),\n-            ));\n+            let pat_shape =\n+                try_opt!(try_opt!(shape.offset_left(matcher.len())).sub_width(connector.len()));\n             pat_string = try_opt!(pat.rewrite(context, pat_shape));\n             format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n@@ -1936,9 +1938,9 @@ where\n             width: callee_max_width,\n             ..shape\n         };\n-        let callee_str = callee.rewrite(context, callee_shape).ok_or(\n-            Ordering::Greater,\n-        )?;\n+        let callee_str = callee\n+            .rewrite(context, callee_shape)\n+            .ok_or(Ordering::Greater)?;\n \n         rewrite_call_inner(\n             context,\n@@ -2046,9 +2048,9 @@ where\n         );\n     }\n \n-    let args_shape = shape.sub_width(last_line_width(&callee_str)).ok_or(\n-        Ordering::Less,\n-    )?;\n+    let args_shape = shape\n+        .sub_width(last_line_width(&callee_str))\n+        .ok_or(Ordering::Less)?;\n     Ok(format!(\n         \"{}{}\",\n         callee_str,\n@@ -2064,9 +2066,8 @@ where\n \n fn need_block_indent(s: &str, shape: Shape) -> bool {\n     s.lines().skip(1).any(|s| {\n-        s.find(|c| !char::is_whitespace(c)).map_or(false, |w| {\n-            w + 1 < shape.indent.width()\n-        })\n+        s.find(|c| !char::is_whitespace(c))\n+            .map_or(false, |w| w + 1 < shape.indent.width())\n     })\n }\n \n@@ -2434,9 +2435,10 @@ fn rewrite_struct_lit<'a>(\n         return Some(format!(\"{} {{}}\", path_str));\n     }\n \n-    let field_iter = fields.into_iter().map(StructLitField::Regular).chain(\n-        base.into_iter().map(StructLitField::Base),\n-    );\n+    let field_iter = fields\n+        .into_iter()\n+        .map(StructLitField::Regular)\n+        .chain(base.into_iter().map(StructLitField::Base));\n \n     // Foo { a: Foo } - indent is +3, width is -5.\n     let (h_shape, v_shape) = try_opt!(struct_lit_shape(shape, context, path_str.len() + 3, 2));"}, {"sha": "81755eae8051d9ae0feda5275a98dc80fff7d605", "filename": "src/file_lines.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -213,9 +213,8 @@ struct JsonSpan {\n impl JsonSpan {\n     fn into_tuple(self) -> Result<(String, Range), String> {\n         let (lo, hi) = self.range;\n-        let canonical = canonicalize_path_string(&self.file).ok_or_else(|| {\n-            format!(\"Can't canonicalize {}\", &self.file)\n-        })?;\n+        let canonical = canonicalize_path_string(&self.file)\n+            .ok_or_else(|| format!(\"Can't canonicalize {}\", &self.file))?;\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "8ded75a9576c5c99bacf6b3c13edf3d87ee61ed5", "filename": "src/imports.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -196,9 +196,11 @@ impl<'a> FmtVisitor<'a> {\n             .map(|p_i| {\n                 cmp::max(\n                     self.last_pos,\n-                    p_i.attrs.iter().map(|attr| attr.span.lo).min().unwrap_or(\n-                        p_i.span.lo,\n-                    ),\n+                    p_i.attrs\n+                        .iter()\n+                        .map(|attr| attr.span.lo)\n+                        .min()\n+                        .unwrap_or(p_i.span.lo),\n                 )\n             })\n             .unwrap_or(self.last_pos);\n@@ -399,9 +401,9 @@ pub fn rewrite_use_list(\n \n // Returns true when self item was found.\n fn move_self_to_front(items: &mut Vec<ListItem>) -> bool {\n-    match items.iter().position(|item| {\n-        item.item.as_ref().map(|x| &x[..]) == Some(\"self\")\n-    }) {\n+    match items\n+        .iter()\n+        .position(|item| item.item.as_ref().map(|x| &x[..]) == Some(\"self\")) {\n         Some(pos) => {\n             items[0] = items.remove(pos);\n             true"}, {"sha": "1eb85771fd62dc3bfaebfbf5d189fc69e09a948b", "filename": "src/items.rs", "status": "modified", "additions": 69, "deletions": 45, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -149,9 +149,8 @@ impl<'a> FmtVisitor<'a> {\n                 self.format_missing_no_indent(item.span.hi - BytePos(1));\n                 self.block_indent = self.block_indent.block_unindent(self.config);\n \n-                self.buffer.push_str(\n-                    &self.block_indent.to_string(self.config),\n-                );\n+                self.buffer\n+                    .push_str(&self.block_indent.to_string(self.config));\n             } else {\n                 for item in &item.body {\n                     self.format_body_element(item);\n@@ -424,9 +423,8 @@ impl<'a> FmtVisitor<'a> {\n         self.block_indent = self.block_indent.block_unindent(self.config);\n \n         if variant_list.is_some() || contains_comment(&enum_snippet[brace_pos..]) {\n-            self.buffer.push_str(\n-                &self.block_indent.to_string(self.config),\n-            );\n+            self.buffer\n+                .push_str(&self.block_indent.to_string(self.config));\n         }\n         self.buffer.push_str(\"}\");\n         self.last_pos = span.hi;\n@@ -955,9 +953,12 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             Density::Tall\n         };\n \n-        let where_budget = try_opt!(context.config.max_width().checked_sub(\n-            last_line_width(&result),\n-        ));\n+        let where_budget = try_opt!(\n+            context\n+                .config\n+                .max_width()\n+                .checked_sub(last_line_width(&result))\n+        );\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,\n@@ -1100,9 +1101,12 @@ fn format_struct_struct(\n \n     let item_indent = offset.block_indent(context.config);\n     // 1 = \",\"\n-    let item_budget = try_opt!(context.config.max_width().checked_sub(\n-        item_indent.width() + 1,\n-    ));\n+    let item_budget = try_opt!(\n+        context\n+            .config\n+            .max_width()\n+            .checked_sub(item_indent.width() + 1)\n+    );\n \n     let items = itemize_list(\n         context.codemap,\n@@ -1144,9 +1148,9 @@ fn format_struct_struct(\n         Some(format!(\n             \"{}\\n{}{}\\n{}}}\",\n             result,\n-            offset.block_indent(context.config).to_string(\n-                context.config,\n-            ),\n+            offset\n+                .block_indent(context.config)\n+                .to_string(context.config),\n             items_str,\n             offset.to_string(context.config)\n         ))\n@@ -1181,9 +1185,12 @@ fn format_tuple_struct(\n             let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n             result.push_str(&generics_str);\n \n-            let where_budget = try_opt!(context.config.max_width().checked_sub(\n-                last_line_width(&result),\n-            ));\n+            let where_budget = try_opt!(\n+                context\n+                    .config\n+                    .max_width()\n+                    .checked_sub(last_line_width(&result))\n+            );\n             try_opt!(rewrite_where_clause(\n                 context,\n                 &generics.where_clause,\n@@ -1229,9 +1236,12 @@ fn format_tuple_struct(\n             }\n         };\n         // 3 = `();`\n-        let item_budget = try_opt!(context.config.max_width().checked_sub(\n-            item_indent.width() + 3,\n-        ));\n+        let item_budget = try_opt!(\n+            context\n+                .config\n+                .max_width()\n+                .checked_sub(item_indent.width() + 3)\n+        );\n \n         let items = itemize_list(\n             context.codemap,\n@@ -1321,9 +1331,12 @@ pub fn rewrite_type_alias(\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, g_span));\n     result.push_str(&generics_str);\n \n-    let where_budget = try_opt!(context.config.max_width().checked_sub(\n-        last_line_width(&result),\n-    ));\n+    let where_budget = try_opt!(\n+        context\n+            .config\n+            .max_width()\n+            .checked_sub(last_line_width(&result))\n+    );\n     let where_clause_str = try_opt!(rewrite_where_clause(\n         context,\n         &generics.where_clause,\n@@ -1358,9 +1371,12 @@ pub fn rewrite_type_alias(\n                 let type_indent = indent.block_indent(context.config);\n                 result.push('\\n');\n                 result.push_str(&type_indent.to_string(context.config));\n-                let budget = try_opt!(context.config.max_width().checked_sub(\n-                    type_indent.width() + \";\".len(),\n-                ));\n+                let budget = try_opt!(\n+                    context\n+                        .config\n+                        .max_width()\n+                        .checked_sub(type_indent.width() + \";\".len())\n+                );\n                 ty.rewrite(context, Shape::legacy(budget, type_indent))\n             })\n     );\n@@ -1963,9 +1979,10 @@ fn rewrite_fn_base(\n         }\n         // If the last line of args contains comment, we cannot put the closing paren\n         // on the same line.\n-        if arg_str.lines().last().map_or(false, |last_line| {\n-            last_line.contains(\"//\")\n-        })\n+        if arg_str\n+            .lines()\n+            .last()\n+            .map_or(false, |last_line| last_line.contains(\"//\"))\n         {\n             args_last_line_contains_comment = true;\n             result.push('\\n');\n@@ -2038,12 +2055,13 @@ fn rewrite_fn_base(\n             let snippet_hi = span.hi;\n             let snippet = context.snippet(mk_sp(snippet_lo, snippet_hi));\n             // Try to preserve the layout of the original snippet.\n-            let original_starts_with_newline = snippet.find(|c| c != ' ').map_or(false, |i| {\n-                snippet[i..].starts_with('\\n')\n-            });\n-            let original_ends_with_newline = snippet.rfind(|c| c != ' ').map_or(false, |i| {\n-                snippet[i..].ends_with('\\n')\n-            });\n+            let original_starts_with_newline =\n+                snippet\n+                    .find(|c| c != ' ')\n+                    .map_or(false, |i| snippet[i..].starts_with('\\n'));\n+            let original_ends_with_newline = snippet\n+                .rfind(|c| c != ' ')\n+                .map_or(false, |i| snippet[i..].ends_with('\\n'));\n             let snippet = snippet.trim();\n             if !snippet.is_empty() {\n                 result.push(if original_starts_with_newline {\n@@ -2070,9 +2088,12 @@ fn rewrite_fn_base(\n     } || (put_args_in_block && ret_str.is_empty());\n \n     if where_clause.predicates.len() == 1 && should_compress_where {\n-        let budget = try_opt!(context.config.max_width().checked_sub(\n-            last_line_width(&result),\n-        ));\n+        let budget = try_opt!(\n+            context\n+                .config\n+                .max_width()\n+                .checked_sub(last_line_width(&result))\n+        );\n         if let Some(where_clause_str) =\n             rewrite_where_clause(\n                 context,\n@@ -2463,9 +2484,9 @@ pub fn wrap_generics_with_angle_brackets(\n             \"<\\n{}{}\\n{}>\",\n             list_offset.to_string(context.config),\n             list_str,\n-            list_offset.block_unindent(context.config).to_string(\n-                context.config,\n-            )\n+            list_offset\n+                .block_unindent(context.config)\n+                .to_string(context.config)\n         )\n     } else if context.config.spaces_within_angle_brackets() {\n         format!(\"< {} >\", list_str)\n@@ -2672,9 +2693,12 @@ fn format_generics(\n     let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n-        let budget = try_opt!(context.config.max_width().checked_sub(\n-            last_line_width(&result),\n-        ));\n+        let budget = try_opt!(\n+            context\n+                .config\n+                .max_width()\n+                .checked_sub(last_line_width(&result))\n+        );\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,"}, {"sha": "c770d1bf9539e7ee3125e6d63150c4ca47206c3c", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -132,9 +132,9 @@ impl ListItem {\n     }\n \n     pub fn has_line_pre_comment(&self) -> bool {\n-        self.pre_comment.as_ref().map_or(false, |comment| {\n-            comment.starts_with(\"//\")\n-        })\n+        self.pre_comment\n+            .as_ref()\n+            .map_or(false, |comment| comment.starts_with(\"//\"))\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n@@ -160,9 +160,10 @@ where\n     I: IntoIterator<Item = T> + Clone,\n     T: AsRef<ListItem>,\n {\n-    let pre_line_comments = items.clone().into_iter().any(|item| {\n-        item.as_ref().has_line_pre_comment()\n-    });\n+    let pre_line_comments = items\n+        .clone()\n+        .into_iter()\n+        .any(|item| item.as_ref().has_line_pre_comment());\n \n     let limit = match tactic {\n         _ if pre_line_comments => return DefinitiveListTactic::Vertical,"}, {"sha": "45e4dc19daef3bbfd7df3b6c969080e461db74c5", "filename": "src/missed_spans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -160,9 +160,8 @@ impl<'a> FmtVisitor<'a> {\n                         if let Some('{') = last_char {\n                             self.buffer.push_str(\"\\n\");\n                         }\n-                        self.buffer.push_str(\n-                            &self.block_indent.to_string(self.config),\n-                        );\n+                        self.buffer\n+                            .push_str(&self.block_indent.to_string(self.config));\n                     } else {\n                         self.buffer.push_str(\" \");\n                     }\n@@ -184,9 +183,10 @@ impl<'a> FmtVisitor<'a> {\n \n                     if let Some('/') = subslice.chars().skip(1).next() {\n                         // check that there are no contained block comments\n-                        if !subslice.split('\\n').map(|s| s.trim_left()).any(|s| {\n-                            s.len() >= 2 && &s[0..2] == \"/*\"\n-                        })\n+                        if !subslice\n+                            .split('\\n')\n+                            .map(|s| s.trim_left())\n+                            .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n                         {\n                             // Add a newline after line comments\n                             self.buffer.push_str(\"\\n\");"}, {"sha": "1899944bc105f8836758ab215e4cd629909d8b24", "filename": "src/patterns.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -38,9 +38,11 @@ impl Rewrite for Pat {\n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n                         // 3 - ` @ `.\n-                        let width = try_opt!(shape.width.checked_sub(\n-                            prefix.len() + mut_infix.len() + id_str.len() + 3,\n-                        ));\n+                        let width = try_opt!(\n+                            shape\n+                                .width\n+                                .checked_sub(prefix.len() + mut_infix.len() + id_str.len() + 3)\n+                        );\n                         format!(\n                             \" @ {}\",\n                             try_opt!(p.rewrite(context, Shape::legacy(width, shape.indent)))"}, {"sha": "3efb406e796631820e8b26306a4a1d7e62339c61", "filename": "src/string.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -42,10 +42,12 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n \n     // `cur_start` is the position in `orig` of the start of the current line.\n     let mut cur_start = 0;\n-    let mut result =\n-        String::with_capacity(stripped_str.len().checked_next_power_of_two().unwrap_or(\n-            usize::max_value(),\n-        ));\n+    let mut result = String::with_capacity(\n+        stripped_str\n+            .len()\n+            .checked_next_power_of_two()\n+            .unwrap_or(usize::max_value()),\n+    );\n     result.push_str(fmt.opener);\n \n     let ender_length = fmt.line_end.len();"}, {"sha": "3cdf909609457bc32453bcf69d574babb93cc662", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -311,9 +311,9 @@ where\n         context.codemap,\n         // FIXME Would be nice to avoid this allocation,\n         // but I couldn't get the types to work out.\n-        inputs.map(|i| ArgumentKind::Regular(Box::new(i))).chain(\n-            variadic_arg,\n-        ),\n+        inputs\n+            .map(|i| ArgumentKind::Regular(Box::new(i)))\n+            .chain(variadic_arg),\n         \")\",\n         |arg| match *arg {\n             ArgumentKind::Regular(ref ty) => ty.span().lo,\n@@ -718,9 +718,8 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Mac(..) => None,\n             ast::TyKind::ImplicitSelf => Some(String::from(\"\")),\n             ast::TyKind::ImplTrait(ref it) => {\n-                it.rewrite(context, shape).map(|it_str| {\n-                    format!(\"impl {}\", it_str)\n-                })\n+                it.rewrite(context, shape)\n+                    .map(|it_str| format!(\"impl {}\", it_str))\n             }\n             ast::TyKind::Err |\n             ast::TyKind::Typeof(..) => unreachable!(),"}, {"sha": "dd18572575b1fda8563a8b984a288dd89dd487ca", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -44,9 +44,9 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.to_string());\n             if path.is_global() {\n-                segments_iter.next().expect(\n-                    \"Non-global path in pub(restricted)?\",\n-                );\n+                segments_iter\n+                    .next()\n+                    .expect(\"Non-global path in pub(restricted)?\");\n             }\n             let is_keyword = |s: &str| s == \"self\" || s == \"super\";\n             let path = segments_iter.collect::<Vec<_>>().join(\"::\");\n@@ -129,9 +129,9 @@ fn is_skip_nested(meta_item: &NestedMetaItem) -> bool {\n \n #[inline]\n pub fn contains_skip(attrs: &[Attribute]) -> bool {\n-    attrs.iter().any(\n-        |a| a.meta().map_or(false, |a| is_skip(&a)),\n-    )\n+    attrs\n+        .iter()\n+        .any(|a| a.meta().map_or(false, |a| is_skip(&a)))\n }\n \n // Find the end of a TyParam"}, {"sha": "f0aeb6bfa3fa97e58f271b24e3af74bd4558dbd6", "filename": "src/visitor.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -69,11 +69,9 @@ impl<'a> FmtVisitor<'a> {\n         );\n \n         // FIXME(#434): Move this check to somewhere more central, eg Rewrite.\n-        if !self.config.file_lines().intersects(\n-            &self.codemap.lookup_line_range(\n-                stmt.span,\n-            ),\n-        )\n+        if !self.config\n+            .file_lines()\n+            .intersects(&self.codemap.lookup_line_range(stmt.span))\n         {\n             return;\n         }\n@@ -292,9 +290,10 @@ impl<'a> FmtVisitor<'a> {\n             ast::ItemKind::Impl(..) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo);\n                 let snippet = self.get_context().snippet(item.span);\n-                let where_span_end = snippet.find_uncommented(\"{\").map(|x| {\n-                    (BytePos(x as u32)) + source!(self, item.span).lo\n-                });\n+                let where_span_end =\n+                    snippet\n+                        .find_uncommented(\"{\")\n+                        .map(|x| (BytePos(x as u32)) + source!(self, item.span).lo);\n                 if let Some(impl_str) = format_impl(\n                     &self.get_context(),\n                     item,\n@@ -727,9 +726,11 @@ impl Rewrite for ast::MetaItem {\n             ast::MetaItemKind::List(ref list) => {\n                 let name = self.name.as_str();\n                 // 3 = `#[` and `(`, 2 = `]` and `)`\n-                let item_shape = try_opt!(shape.shrink_left(name.len() + 3).and_then(\n-                    |s| s.sub_width(2),\n-                ));\n+                let item_shape = try_opt!(\n+                    shape\n+                        .shrink_left(name.len() + 3)\n+                        .and_then(|s| s.sub_width(2))\n+                );\n                 let hi = self.span.hi +\n                     BytePos(count_missing_closing_parens(&context.snippet(self.span)));\n                 let items = itemize_list("}, {"sha": "26b1edaff5bf05c19689c81b443061966a7a3043", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -84,9 +84,9 @@ fn assert_output(source: &str, expected_filename: &str) {\n \n     let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n-    expected_file.read_to_string(&mut expected_text).expect(\n-        \"Failed reading target\",\n-    );\n+    expected_file\n+        .read_to_string(&mut expected_text)\n+        .expect(\"Failed reading target\");\n \n     let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n     if compare.len() > 0 {\n@@ -285,9 +285,9 @@ fn get_config(config_file: Option<&str>) -> Config {\n \n     let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n-    def_config_file.read_to_string(&mut def_config).expect(\n-        \"Couldn't read config\",\n-    );\n+    def_config_file\n+        .read_to_string(&mut def_config)\n+        .expect(\"Couldn't read config\");\n \n     Config::from_toml(&def_config).expect(\"Invalid toml\")\n }"}, {"sha": "154fa0bfa2e6131b9842cf90476fe50510bc0038", "filename": "tests/target/configs-chain_split_single_child-true.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-chain_split_single_child-true.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -1,7 +1,6 @@\n // rustfmt-chain_split_single_child: true\n \n fn main() {\n-    let files = fs::read_dir(\"tests/source\").expect(\n-        \"Couldn't read source dir\",\n-    );\n+    let files = fs::read_dir(\"tests/source\")\n+        .expect(\"Couldn't read source dir\");\n }"}, {"sha": "55d023cb55de4c551f917856669a43a1fc423fe2", "filename": "tests/target/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -353,8 +353,8 @@ fn issue1106() {\n         {}\n     }\n \n-    for entry in WalkDir::new(path).into_iter().filter_entry(|entry| {\n-        exclusions.filter_entry(entry)\n-    })\n+    for entry in WalkDir::new(path)\n+        .into_iter()\n+        .filter_entry(|entry| exclusions.filter_entry(entry))\n     {}\n }"}, {"sha": "bd51ac6f9622fabe670ab42990f1c9356b6e4e06", "filename": "tests/target/match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5538d2a5864e0fe69eee02c3137e0a1f571bbb5/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=c5538d2a5864e0fe69eee02c3137e0a1f571bbb5", "patch": "@@ -389,9 +389,8 @@ fn issue1395() {\n \n fn issue1456() {\n     Ok(Recording {\n-        artists: match reader.evaluate(\n-            \".//mb:recording/mb:artist-credit/mb:name-credit\",\n-        )? {\n+        artists: match reader\n+            .evaluate(\".//mb:recording/mb:artist-credit/mb:name-credit\")? {\n             Nodeset(nodeset) => {\n                 let res: Result<Vec<ArtistRef>, ReadError> = nodeset\n                     .iter()"}]}