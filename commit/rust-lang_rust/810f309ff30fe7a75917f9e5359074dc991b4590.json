{"sha": "810f309ff30fe7a75917f9e5359074dc991b4590", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGYzMDlmZjMwZmU3YTc1OTE3ZjllNTM1OTA3NGRjOTkxYjQ1OTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T21:46:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-22T07:19:08Z"}, "message": "MIR sanity check: validate types on assignment", "tree": {"sha": "c19b85d859f12a322748ff2ecb12b4ffc30966ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c19b85d859f12a322748ff2ecb12b4ffc30966ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810f309ff30fe7a75917f9e5359074dc991b4590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810f309ff30fe7a75917f9e5359074dc991b4590", "html_url": "https://github.com/rust-lang/rust/commit/810f309ff30fe7a75917f9e5359074dc991b4590", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810f309ff30fe7a75917f9e5359074dc991b4590/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3", "html_url": "https://github.com/rust-lang/rust/commit/1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "3d48a2387a88e0dcc0619bf64b122d82c6ff5e04", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/810f309ff30fe7a75917f9e5359074dc991b4590/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810f309ff30fe7a75917f9e5359074dc991b4590/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=810f309ff30fe7a75917f9e5359074dc991b4590", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::{\n         BasicBlock, Body, Location, Operand, Rvalue, Statement, StatementKind, Terminator,\n         TerminatorKind,\n     },\n-    ty::{self, ParamEnv, TyCtxt},\n+    ty::{self, fold::BottomUpFolder, ParamEnv, Ty, TyCtxt, TypeFoldable},\n };\n \n #[derive(Copy, Clone, Debug)]\n@@ -83,6 +83,40 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     }\n }\n \n+/// Check if src can be assigned into dest.\n+/// This is not precise, it will accept some incorrect assignments.\n+fn mir_assign_valid_types<'tcx>(tcx: TyCtxt<'tcx>, src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n+    if src == dest {\n+        // Equal types, all is good.\n+        return true;\n+    }\n+\n+    // Type-changing assignments can happen for (at least) two reasons:\n+    // 1. `&mut T` -> `&T` gets optimized from a reborrow to a mere assignment.\n+    // 2. Subtyping is used. While all normal lifetimes are erased, higher-ranked types\n+    //    with their late-bound lifetimes are still around and can lead to type differences.\n+    // Normalize both of them away.\n+    // FIXME: Share this code with `interpret/eval_context.rs`.\n+    let normalize = |ty: Ty<'tcx>| {\n+        ty.fold_with(&mut BottomUpFolder {\n+            tcx,\n+            // Normalize all references to immutable.\n+            ty_op: |ty| match ty.kind {\n+                ty::Ref(_, pointee, _) => tcx.mk_imm_ref(tcx.lifetimes.re_erased, pointee),\n+                _ => ty,\n+            },\n+            // We just erase all late-bound lifetimes, but this is not fully correct (FIXME):\n+            // lifetimes in invariant positions could matter (e.g. through associated types).\n+            // But that just means we miss some potential incompatible types, it will not\n+            // lead to wrong errors.\n+            lt_op: |_| tcx.lifetimes.re_erased,\n+            // Leave consts unchanged.\n+            ct_op: |ct| ct,\n+        })\n+    };\n+    normalize(src) == normalize(dest)\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         // `Operand::Copy` is only supposed to be used with `Copy` types.\n@@ -99,9 +133,23 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     }\n \n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n-        // The sides of an assignment must not alias. Currently this just checks whether the places\n-        // are identical.\n         if let StatementKind::Assign(box (dest, rvalue)) = &statement.kind {\n+            // LHS and RHS of the assignment must have the same type.\n+            let left_ty = dest.ty(&self.body.local_decls, self.tcx).ty;\n+            let right_ty = rvalue.ty(&self.body.local_decls, self.tcx);\n+            if !mir_assign_valid_types(self.tcx, right_ty, left_ty) {\n+                self.fail(\n+                    location,\n+                    format!(\n+                        \"encountered `Assign` statement with incompatible types:\\n\\\n+                        left-hand side has type: {}\\n\\\n+                        right-hand side has type: {}\",\n+                        left_ty, right_ty,\n+                    ),\n+                );\n+            }\n+            // The sides of an assignment must not alias. Currently this just checks whether the places\n+            // are identical.\n             match rvalue {\n                 Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) => {\n                     if dest == src {"}]}