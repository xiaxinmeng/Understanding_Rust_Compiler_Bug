{"sha": "0dd26821783ccc809fb0995f178fd6c53f6eebd7", "node_id": "C_kwDOAAsO6NoAKDBkZDI2ODIxNzgzY2NjODA5ZmIwOTk1ZjE3OGZkNmM1M2Y2ZWViZDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T10:59:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T10:59:17Z"}, "message": "Refactor replace_arith assists into one module", "tree": {"sha": "e166f125ecad91c83937c8db6d5015b2c7cbd0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e166f125ecad91c83937c8db6d5015b2c7cbd0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd26821783ccc809fb0995f178fd6c53f6eebd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd26821783ccc809fb0995f178fd6c53f6eebd7", "html_url": "https://github.com/rust-lang/rust/commit/0dd26821783ccc809fb0995f178fd6c53f6eebd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd26821783ccc809fb0995f178fd6c53f6eebd7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "html_url": "https://github.com/rust-lang/rust/commit/3dd2f99c49d225b08e38ccd1981e1adef8fd2901"}], "stats": {"total": 501, "additions": 234, "deletions": 267}, "files": [{"sha": "f1ca35cafc3a4761c75b3ec6351abbf960f7f243", "filename": "crates/ide-assists/src/handlers/replace_arith_op.rs", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/0dd26821783ccc809fb0995f178fd6c53f6eebd7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd26821783ccc809fb0995f178fd6c53f6eebd7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_op.rs?ref=0dd26821783ccc809fb0995f178fd6c53f6eebd7", "patch": "@@ -0,0 +1,226 @@\n+use ide_db::assists::{AssistId, AssistKind, GroupLabel};\n+use syntax::{\n+    ast::{self, ArithOp, BinaryOp},\n+    AstNode, TextRange,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: replace_arith_with_checked\n+//\n+// Replaces arithmetic on integers with the `checked_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.checked_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_checked(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Checked)\n+}\n+\n+// Assist: replace_arith_with_saturating\n+//\n+// Replaces arithmetic on integers with the `saturating_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.saturating_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_saturating(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Saturating)\n+}\n+\n+// Assist: replace_arith_with_wrapping\n+//\n+// Replaces arithmetic on integers with the `wrapping_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.wrapping_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_wrapping(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Wrapping)\n+}\n+\n+fn replace_arith(acc: &mut Assists, ctx: &AssistContext<'_>, kind: ArithKind) -> Option<()> {\n+    let (lhs, op, rhs) = parse_binary_op(ctx)?;\n+\n+    if !is_primitive_int(ctx, &lhs) || !is_primitive_int(ctx, &rhs) {\n+        return None;\n+    }\n+\n+    let start = lhs.syntax().text_range().start();\n+    let end = rhs.syntax().text_range().end();\n+    let range = TextRange::new(start, end);\n+\n+    acc.add_group(\n+        &GroupLabel(\"replace_arith\".into()),\n+        kind.assist_id(),\n+        kind.label(),\n+        range,\n+        |builder| {\n+            let method_name = kind.method_name(op);\n+\n+            builder.replace(range, format!(\"{lhs}.{method_name}({rhs})\"))\n+        },\n+    )\n+}\n+\n+fn is_primitive_int(ctx: &AssistContext<'_>, expr: &ast::Expr) -> bool {\n+    match ctx.sema.type_of_expr(expr) {\n+        Some(ty) => ty.adjusted().is_int_or_uint(),\n+        _ => false,\n+    }\n+}\n+\n+/// Extract the operands of an arithmetic expression (e.g. `1 + 2` or `1.checked_add(2)`)\n+fn parse_binary_op(ctx: &AssistContext<'_>) -> Option<(ast::Expr, ArithOp, ast::Expr)> {\n+    let expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n+\n+    let op = match expr.op_kind() {\n+        Some(BinaryOp::ArithOp(ArithOp::Add)) => ArithOp::Add,\n+        Some(BinaryOp::ArithOp(ArithOp::Sub)) => ArithOp::Sub,\n+        Some(BinaryOp::ArithOp(ArithOp::Mul)) => ArithOp::Mul,\n+        Some(BinaryOp::ArithOp(ArithOp::Div)) => ArithOp::Div,\n+        _ => return None,\n+    };\n+\n+    let lhs = expr.lhs()?;\n+    let rhs = expr.rhs()?;\n+\n+    Some((lhs, op, rhs))\n+}\n+\n+pub(crate) enum ArithKind {\n+    Saturating,\n+    Wrapping,\n+    Checked,\n+}\n+\n+impl ArithKind {\n+    fn assist_id(&self) -> AssistId {\n+        let s = match self {\n+            ArithKind::Saturating => \"replace_arith_with_saturating\",\n+            ArithKind::Checked => \"replace_arith_with_checked\",\n+            ArithKind::Wrapping => \"replace_arith_with_wrapping\",\n+        };\n+\n+        AssistId(s, AssistKind::RefactorRewrite)\n+    }\n+\n+    fn label(&self) -> &'static str {\n+        match self {\n+            ArithKind::Saturating => \"Replace arithmetic with call to saturating_*\",\n+            ArithKind::Checked => \"Replace arithmetic with call to checked_*\",\n+            ArithKind::Wrapping => \"Replace arithmetic with call to wrapping_*\",\n+        }\n+    }\n+\n+    fn method_name(&self, op: ArithOp) -> String {\n+        let prefix = match self {\n+            ArithKind::Checked => \"checked_\",\n+            ArithKind::Wrapping => \"wrapping_\",\n+            ArithKind::Saturating => \"saturating_\",\n+        };\n+\n+        let suffix = match op {\n+            ArithOp::Add => \"add\",\n+            ArithOp::Sub => \"sub\",\n+            ArithOp::Mul => \"mul\",\n+            ArithOp::Div => \"div\",\n+            _ => unreachable!(\"this function should only be called with +, -, / or *\"),\n+        };\n+        format!(\"{prefix}{suffix}\")\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn arith_kind_method_name() {\n+        assert_eq!(ArithKind::Saturating.method_name(ArithOp::Add), \"saturating_add\");\n+        assert_eq!(ArithKind::Checked.method_name(ArithOp::Sub), \"checked_sub\");\n+    }\n+\n+    #[test]\n+    fn replace_arith_with_checked_add() {\n+        check_assist(\n+            replace_arith_with_checked,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.checked_add(2);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_arith_with_saturating_add() {\n+        check_assist(\n+            replace_arith_with_saturating,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.saturating_add(2);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_arith_with_wrapping_add() {\n+        check_assist(\n+            replace_arith_with_wrapping,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.wrapping_add(2);\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "ff1fba5818cce480096de29263e18c80fb891063", "filename": "crates/ide-assists/src/handlers/replace_arith_with_checked.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_checked.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1,45 +0,0 @@\n-use crate::assist_context::{AssistContext, Assists};\n-use crate::utils::{replace_arith, ArithKind};\n-\n-// Assist: replace_arith_with_checked\n-//\n-// Replaces arithmetic on integers with the `checked_*` equivalent.\n-//\n-// ```\n-// fn main() {\n-//   let x = 1 $0+ 2;\n-// }\n-// ```\n-// ->\n-// ```\n-// fn main() {\n-//   let x = 1.checked_add(2);\n-// }\n-// ```\n-pub(crate) fn replace_arith_with_checked(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n-    replace_arith(acc, ctx, ArithKind::Checked)\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::check_assist;\n-\n-    use super::*;\n-\n-    #[test]\n-    fn replace_arith_with_saturating_add() {\n-        check_assist(\n-            replace_arith_with_checked,\n-            r#\"\n-fn main() {\n-    let x = 1 $0+ 2;\n-}\n-\"#,\n-            r#\"\n-fn main() {\n-    let x = 1.checked_add(2);\n-}\n-\"#,\n-        )\n-    }\n-}"}, {"sha": "717875e84f032d94d8e28f38d4d8299573b4cbbd", "filename": "crates/ide-assists/src/handlers/replace_arith_with_saturating.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_saturating.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1,48 +0,0 @@\n-use crate::assist_context::{AssistContext, Assists};\n-use crate::utils::{replace_arith, ArithKind};\n-\n-// Assist: replace_arith_with_saturating\n-//\n-// Replaces arithmetic on integers with the `saturating_*` equivalent.\n-//\n-// ```\n-// fn main() {\n-//   let x = 1 $0+ 2;\n-// }\n-// ```\n-// ->\n-// ```\n-// fn main() {\n-//   let x = 1.saturating_add(2);\n-// }\n-// ```\n-pub(crate) fn replace_arith_with_saturating(\n-    acc: &mut Assists,\n-    ctx: &AssistContext<'_>,\n-) -> Option<()> {\n-    replace_arith(acc, ctx, ArithKind::Saturating)\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::check_assist;\n-\n-    use super::*;\n-\n-    #[test]\n-    fn replace_arith_with_saturating_add() {\n-        check_assist(\n-            replace_arith_with_saturating,\n-            r#\"\n-fn main() {\n-    let x = 1 $0+ 2;\n-}\n-\"#,\n-            r#\"\n-fn main() {\n-    let x = 1.saturating_add(2);\n-}\n-\"#,\n-        )\n-    }\n-}"}, {"sha": "e0a90292b1948ff65d18262bd43a8eb5826c34f6", "filename": "crates/ide-assists/src/handlers/replace_arith_with_wrapping.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd2f99c49d225b08e38ccd1981e1adef8fd2901/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_with_wrapping.rs?ref=3dd2f99c49d225b08e38ccd1981e1adef8fd2901", "patch": "@@ -1,48 +0,0 @@\n-use crate::assist_context::{AssistContext, Assists};\n-use crate::utils::{replace_arith, ArithKind};\n-\n-// Assist: replace_arith_with_wrapping\n-//\n-// Replaces arithmetic on integers with the `wrapping_*` equivalent.\n-//\n-// ```\n-// fn main() {\n-//   let x = 1 $0+ 2;\n-// }\n-// ```\n-// ->\n-// ```\n-// fn main() {\n-//   let x = 1.wrapping_add(2);\n-// }\n-// ```\n-pub(crate) fn replace_arith_with_wrapping(\n-    acc: &mut Assists,\n-    ctx: &AssistContext<'_>,\n-) -> Option<()> {\n-    replace_arith(acc, ctx, ArithKind::Wrapping)\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::check_assist;\n-\n-    use super::*;\n-\n-    #[test]\n-    fn replace_arith_with_saturating_add() {\n-        check_assist(\n-            replace_arith_with_wrapping,\n-            r#\"\n-fn main() {\n-    let x = 1 $0+ 2;\n-}\n-\"#,\n-            r#\"\n-fn main() {\n-    let x = 1.wrapping_add(2);\n-}\n-\"#,\n-        )\n-    }\n-}"}, {"sha": "0255ffdea3f2212ddd9a8f38813460e16af7aa93", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dd26821783ccc809fb0995f178fd6c53f6eebd7/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd26821783ccc809fb0995f178fd6c53f6eebd7/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=0dd26821783ccc809fb0995f178fd6c53f6eebd7", "patch": "@@ -183,9 +183,7 @@ mod handlers {\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n     mod replace_or_with_or_else;\n-    mod replace_arith_with_checked;\n-    mod replace_arith_with_wrapping;\n-    mod replace_arith_with_saturating;\n+    mod replace_arith_op;\n     mod introduce_named_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n@@ -289,9 +287,9 @@ mod handlers {\n             replace_or_with_or_else::replace_or_with_or_else,\n             replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n-            replace_arith_with_wrapping::replace_arith_with_wrapping,\n-            replace_arith_with_checked::replace_arith_with_checked,\n-            replace_arith_with_saturating::replace_arith_with_saturating,\n+            replace_arith_op::replace_arith_with_wrapping,\n+            replace_arith_op::replace_arith_with_checked,\n+            replace_arith_op::replace_arith_with_saturating,\n             sort_items::sort_items,\n             split_import::split_import,\n             toggle_ignore::toggle_ignore,"}, {"sha": "db32e7182c44d76ab78db38123862d8fe9f84257", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 4, "deletions": 120, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/0dd26821783ccc809fb0995f178fd6c53f6eebd7/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd26821783ccc809fb0995f178fd6c53f6eebd7/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=0dd26821783ccc809fb0995f178fd6c53f6eebd7", "patch": "@@ -4,27 +4,21 @@ use std::ops;\n \n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n-use ide_db::{\n-    assists::{AssistId, AssistKind},\n-    famous_defs::FamousDefs,\n-    path_transform::PathTransform,\n-    RootDatabase, SnippetCap,\n-};\n+use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n use stdx::format_to;\n use syntax::{\n     ast::{\n         self,\n         edit::{self, AstNodeEdit},\n         edit_in_place::{AttrsOwnerEdit, Removable},\n-        make, ArithOp, BinExpr, BinaryOp, Expr, HasArgList, HasAttrs, HasGenericParams, HasName,\n-        HasTypeBounds, Whitespace,\n+        make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n-    ted, AstNode, AstToken, Direction, SmolStr, SourceFile,\n+    ted, AstNode, AstToken, Direction, SourceFile,\n     SyntaxKind::*,\n     SyntaxNode, TextRange, TextSize, T,\n };\n \n-use crate::assist_context::{AssistContext, Assists, SourceChangeBuilder};\n+use crate::assist_context::{AssistContext, SourceChangeBuilder};\n \n pub(crate) mod suggest_name;\n mod gen_trait_fn_body;\n@@ -711,113 +705,3 @@ pub(crate) fn convert_param_list_to_arg_list(list: ast::ParamList) -> ast::ArgLi\n     }\n     make::arg_list(args)\n }\n-\n-pub(crate) enum ArithKind {\n-    Saturating,\n-    Wrapping,\n-    Checked,\n-}\n-\n-impl ArithKind {\n-    fn assist_id(&self) -> AssistId {\n-        let s = match self {\n-            ArithKind::Saturating => \"replace_arith_with_saturating\",\n-            ArithKind::Checked => \"replace_arith_with_checked\",\n-            ArithKind::Wrapping => \"replace_arith_with_wrapping\",\n-        };\n-\n-        AssistId(s, AssistKind::RefactorRewrite)\n-    }\n-\n-    fn label(&self) -> &'static str {\n-        match self {\n-            ArithKind::Saturating => \"Replace arithmetic with call to saturating_*\",\n-            ArithKind::Checked => \"Replace arithmetic with call to checked_*\",\n-            ArithKind::Wrapping => \"Replace arithmetic with call to wrapping_*\",\n-        }\n-    }\n-\n-    fn method_name(&self, op: ArithOp) -> SmolStr {\n-        // is this too much effort to avoid an allocation? is there a better way?\n-        let mut bytes = [0u8; 14];\n-        let prefix = match self {\n-            ArithKind::Checked => \"checked_\",\n-            ArithKind::Wrapping => \"wrapping_\",\n-            ArithKind::Saturating => \"saturating_\",\n-        };\n-\n-        bytes[0..(prefix.len())].copy_from_slice(prefix.as_bytes());\n-\n-        let suffix = match op {\n-            ArithOp::Add => \"add\",\n-            ArithOp::Sub => \"sub\",\n-            ArithOp::Mul => \"mul\",\n-            ArithOp::Div => \"div\",\n-            _ => unreachable!(\"this function should only be called with +, -, / or *\"),\n-        };\n-\n-        bytes[(prefix.len())..(prefix.len() + suffix.len())].copy_from_slice(suffix.as_bytes());\n-\n-        let len = prefix.len() + suffix.len();\n-        let s = core::str::from_utf8(&bytes[0..len]).unwrap();\n-        SmolStr::from(s)\n-    }\n-}\n-\n-pub(crate) fn replace_arith(\n-    acc: &mut Assists,\n-    ctx: &AssistContext<'_>,\n-    kind: ArithKind,\n-) -> Option<()> {\n-    let (lhs, op, rhs) = parse_binary_op(ctx)?;\n-\n-    if !is_primitive_int(ctx, &lhs) || !is_primitive_int(ctx, &rhs) {\n-        return None;\n-    }\n-\n-    let start = lhs.syntax().text_range().start();\n-    let end = rhs.syntax().text_range().end();\n-    let range = TextRange::new(start, end);\n-\n-    acc.add(kind.assist_id(), kind.label(), range, |builder| {\n-        let method_name = kind.method_name(op);\n-\n-        builder.replace(range, format!(\"{lhs}.{method_name}({rhs})\"))\n-    })\n-}\n-\n-fn is_primitive_int(ctx: &AssistContext<'_>, expr: &Expr) -> bool {\n-    match ctx.sema.type_of_expr(expr) {\n-        Some(ty) => ty.adjusted().is_int_or_uint(),\n-        _ => false,\n-    }\n-}\n-\n-/// Extract the operands of an arithmetic expression (e.g. `1 + 2` or `1.checked_add(2)`)\n-fn parse_binary_op(ctx: &AssistContext<'_>) -> Option<(Expr, ArithOp, Expr)> {\n-    let expr = ctx.find_node_at_offset::<BinExpr>()?;\n-\n-    let op = match expr.op_kind() {\n-        Some(BinaryOp::ArithOp(ArithOp::Add)) => ArithOp::Add,\n-        Some(BinaryOp::ArithOp(ArithOp::Sub)) => ArithOp::Sub,\n-        Some(BinaryOp::ArithOp(ArithOp::Mul)) => ArithOp::Mul,\n-        Some(BinaryOp::ArithOp(ArithOp::Div)) => ArithOp::Div,\n-        _ => return None,\n-    };\n-\n-    let lhs = expr.lhs()?;\n-    let rhs = expr.rhs()?;\n-\n-    Some((lhs, op, rhs))\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn arith_kind_method_name() {\n-        assert_eq!(ArithKind::Saturating.method_name(ArithOp::Add), \"saturating_add\");\n-        assert_eq!(ArithKind::Checked.method_name(ArithOp::Sub), \"checked_sub\");\n-    }\n-}"}]}