{"sha": "0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTU2MzA5MWYxZGMzZWRlNmVmMTkwZmZlMGY1YzRiYTdiZWU3NzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-12T09:41:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-12T09:41:12Z"}, "message": "Rollup merge of #72048 - jonas-schievink:visit-return, r=oli-obk\n\nVisit move out of `_0` when visiting `return`\n\nCloses https://github.com/rust-lang/rust/issues/72032", "tree": {"sha": "7b1b0e4b7ba6e25d70f7cbe0f1d7ab5743c130e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b1b0e4b7ba6e25d70f7cbe0f1d7ab5743c130e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeum84CRBK7hj4Ov3rIwAAdHIIAEwyzui+U6lAlkjTvKFphZwM\n/sXDP5rN/Pz9YgQD832ACpIZ6MML4EQYoKNtfSevf0yC08OzUuCG1/rsXcFCDVW0\nRkEnVVatyln9sgWOaSQv57oxdKZka7zQUnewc35kyUdJfwlD5J/DNLkNektcpv+O\nOhmlX5Ge4MIWd8mZTwpm2j25NfbyXVvxGxBS7kza2kzKPh7qADmB1cH40/Vpy6HT\n2q+XIZ7wZEQWuQPebONt/vnm7gKABpVUKhuPkQ3rrggvRwyTB+GF8eHF6enPV+hR\ncAnfNSG8OcWgceQM9jd+Dsz31oMNIfduylc/0eP9mjQfSYAEInPRM2PoSasVvTc=\n=W/f5\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b1b0e4b7ba6e25d70f7cbe0f1d7ab5743c130e6\nparent 5fe77e59979e7fa0a83db18c203875de71b5a44d\nparent e22cc993fbf9918784ec38a25e04564e7b1973ee\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589276472 +0200\ncommitter GitHub <noreply@github.com> 1589276472 +0200\n\nRollup merge of #72048 - jonas-schievink:visit-return, r=oli-obk\n\nVisit move out of `_0` when visiting `return`\n\nCloses https://github.com/rust-lang/rust/issues/72032\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "html_url": "https://github.com/rust-lang/rust/commit/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe77e59979e7fa0a83db18c203875de71b5a44d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe77e59979e7fa0a83db18c203875de71b5a44d", "html_url": "https://github.com/rust-lang/rust/commit/5fe77e59979e7fa0a83db18c203875de71b5a44d"}, {"sha": "e22cc993fbf9918784ec38a25e04564e7b1973ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e22cc993fbf9918784ec38a25e04564e7b1973ee", "html_url": "https://github.com/rust-lang/rust/commit/e22cc993fbf9918784ec38a25e04564e7b1973ee"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "1f097f24942decf27a19892b858a94c04c623e5d", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "patch": "@@ -427,13 +427,29 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Goto { .. } |\n                     TerminatorKind::Resume |\n                     TerminatorKind::Abort |\n-                    TerminatorKind::Return |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable |\n                     TerminatorKind::FalseEdges { .. } |\n                     TerminatorKind::FalseUnwind { .. } => {\n                     }\n \n+                    TerminatorKind::Return => {\n+                        // `return` logically moves from the return place `_0`. Note that the place\n+                        // cannot be changed by any visitor, though.\n+                        let $($mutability)? local = RETURN_PLACE;\n+                        self.visit_local(\n+                            & $($mutability)? local,\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Move),\n+                            source_location,\n+                        );\n+\n+                        assert_eq!(\n+                            local,\n+                            RETURN_PLACE,\n+                            \"`MutVisitor` tried to mutate return place of `return` terminator\"\n+                        );\n+                    }\n+\n                     TerminatorKind::SwitchInt {\n                         discr,\n                         switch_ty,"}, {"sha": "ba406c72df8488225a10da8425e45b66752fdf8f", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "patch": "@@ -73,7 +73,12 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n                     }\n                     // Conservatively gives up if the dest is an argument,\n                     // because there may be uses of the original argument value.\n-                    if body.local_kind(dest_local) == LocalKind::Arg {\n+                    // Also gives up on the return place, as we cannot propagate into its implicit\n+                    // use by `return`.\n+                    if matches!(\n+                        body.local_kind(dest_local),\n+                        LocalKind::Arg | LocalKind::ReturnPointer\n+                    ) {\n                         debug!(\"  Can't copy-propagate local: dest {:?} (argument)\", dest_local);\n                         continue;\n                     }"}, {"sha": "bfc872be653a596ca25db421d3f6a00d58b40089", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "patch": "@@ -91,6 +91,16 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor<'tcx> {\n             *local = self.to;\n         }\n     }\n+\n+    fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, location: Location) {\n+        match kind {\n+            TerminatorKind::Return => {\n+                // Do not replace the implicit `_0` access here, as that's not possible. The\n+                // transform already handles `return` correctly.\n+            }\n+            _ => self.super_terminator_kind(kind, location),\n+        }\n+    }\n }\n \n struct DerefArgVisitor<'tcx> {"}, {"sha": "632408fde749f225ef864c88f92faaecf48917cd", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0f9563091f1dc3ede6ef190ffe0f5c4ba7bee774", "patch": "@@ -732,7 +732,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     }\n \n     fn visit_terminator_kind(&mut self, kind: &mut TerminatorKind<'tcx>, loc: Location) {\n-        self.super_terminator_kind(kind, loc);\n+        // Don't try to modify the implicit `_0` access on return (`return` terminators are\n+        // replaced down below anyways).\n+        if !matches!(kind, TerminatorKind::Return) {\n+            self.super_terminator_kind(kind, loc);\n+        }\n \n         match *kind {\n             TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => bug!(),"}]}