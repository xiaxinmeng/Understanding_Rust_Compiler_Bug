{"sha": "9eb798e9658888b3988e49fe2ce5005af9f6589e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjc5OGU5NjU4ODg4YjM5ODhlNDlmZTJjZTUwMDVhZjlmNjU4OWU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-15T20:31:27Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-15T22:48:10Z"}, "message": "Change arg typechecking procedure to make blocks more useful.", "tree": {"sha": "4646ba00be768669027412febcffe9a0bff79522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4646ba00be768669027412febcffe9a0bff79522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb798e9658888b3988e49fe2ce5005af9f6589e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb798e9658888b3988e49fe2ce5005af9f6589e", "html_url": "https://github.com/rust-lang/rust/commit/9eb798e9658888b3988e49fe2ce5005af9f6589e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb798e9658888b3988e49fe2ce5005af9f6589e/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d68f1a80dc666272a5a28f79b37f8feca0cd15be", "url": "https://api.github.com/repos/rust-lang/rust/commits/d68f1a80dc666272a5a28f79b37f8feca0cd15be", "html_url": "https://github.com/rust-lang/rust/commit/d68f1a80dc666272a5a28f79b37f8feca0cd15be"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "03953ebb8f8ccfb10b50dbfd6a78da16dbbafa17", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9eb798e9658888b3988e49fe2ce5005af9f6589e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb798e9658888b3988e49fe2ce5005af9f6589e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9eb798e9658888b3988e49fe2ce5005af9f6589e", "patch": "@@ -1611,21 +1611,38 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n         }\n \n         // Check the arguments.\n-        let i = 0u;\n-        for a_opt: option::t[@ast::expr]  in args {\n-            alt a_opt {\n-              some(a) {\n-                bot |= check_expr_with_unifier(fcx, a, demand::block_coerce,\n-                                               arg_tys.(i).ty);\n-              }\n-              none. { }\n+        // We do this in a pretty awful way: first we typecheck any arguments\n+        // that are not anonymous functions, then we typecheck the anonymous\n+        // functions. This is so that we have more information about the types\n+        // of arguments when we typecheck the functions. This isn't really the\n+        // right way to do this.\n+        let check_args = lambda(check_blocks: bool) -> bool {\n+            let i = 0u;\n+            let bot = false;\n+            for a_opt: option::t[@ast::expr]  in args {\n+                alt a_opt {\n+                  some(a) {\n+                    let is_block =\n+                        alt a.node { ast::expr_fn(_) { true } _ { false } };\n+                    if is_block == check_blocks {\n+                        bot |= check_expr_with_unifier(fcx, a,\n+                                                       demand::block_coerce,\n+                                                       arg_tys.(i).ty);\n+                    }\n+                  }\n+                  none. {}\n+                }\n+                i += 1u;\n             }\n-            i += 1u;\n-        }\n+            ret bot;\n+        };\n+        bot |= check_args(false);\n+        bot |= check_args(true);\n+\n         ret bot;\n     }\n-    // A generic function for checking assignment expressions\n \n+    // A generic function for checking assignment expressions\n     fn check_assignment(fcx: &@fn_ctxt, sp: &span, lhs: &@ast::expr,\n                         rhs: &@ast::expr, id: &ast::node_id) -> bool {\n         let t = next_ty_var(fcx);"}]}