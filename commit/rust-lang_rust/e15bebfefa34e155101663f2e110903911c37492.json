{"sha": "e15bebfefa34e155101663f2e110903911c37492", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNWJlYmZlZmEzNGUxNTUxMDE2NjNmMmUxMTA5MDM5MTFjMzc0OTI=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-25T03:55:02Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-26T04:44:21Z"}, "message": "infer: Refactor Display impl", "tree": {"sha": "f1c00aa8cce96fc4d6bd49b08a8e11bc995ebfe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c00aa8cce96fc4d6bd49b08a8e11bc995ebfe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15bebfefa34e155101663f2e110903911c37492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15bebfefa34e155101663f2e110903911c37492", "html_url": "https://github.com/rust-lang/rust/commit/e15bebfefa34e155101663f2e110903911c37492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15bebfefa34e155101663f2e110903911c37492/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "url": "https://api.github.com/repos/rust-lang/rust/commits/385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "html_url": "https://github.com/rust-lang/rust/commit/385b5a3a7d2d96701ebabd7a48a6332a212d9c99"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "c25862f41c4c61b59b7984715fdfb2775406b44b", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e15bebfefa34e155101663f2e110903911c37492/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15bebfefa34e155101663f2e110903911c37492/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=e15bebfefa34e155101663f2e110903911c37492", "patch": "@@ -129,22 +129,27 @@ pub enum TypeOrigin {\n     EquatePredicate(Span),\n }\n \n-impl fmt::Display for TypeOrigin {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(),fmt::Error> {\n-        let msg = match self {\n-            &TypeOrigin::Misc(_) => \"mismatched types\",\n-            &TypeOrigin::MethodCompatCheck(_) => \"method not compatible with trait\",\n+impl TypeOrigin {\n+    fn as_str(&self) -> &'static str {\n+        match self {\n+            &TypeOrigin::Misc(_) |\n+            &TypeOrigin::RelateSelfType(_) |\n+            &TypeOrigin::RelateOutputImplTypes(_) |\n             &TypeOrigin::ExprAssignable(_) => \"mismatched types\",\n             &TypeOrigin::RelateTraitRefs(_) => \"mismatched traits\",\n-            &TypeOrigin::RelateSelfType(_) => \"mismatched types\",\n-            &TypeOrigin::RelateOutputImplTypes(_) => \"mismatched types\",\n+            &TypeOrigin::MethodCompatCheck(_) => \"method not compatible with trait\",\n             &TypeOrigin::MatchExpressionArm(_, _) => \"match arms have incompatible types\",\n             &TypeOrigin::IfExpression(_) => \"if and else have incompatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n             &TypeOrigin::RangeExpression(_) => \"start and end of range have incompatible types\",\n             &TypeOrigin::EquatePredicate(_) => \"equality predicate not satisfied\",\n-        };\n-        fmt::Display::fmt(msg, f)\n+        }\n+    }\n+}\n+\n+impl fmt::Display for TypeOrigin {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(),fmt::Error> {\n+        fmt::Display::fmt(self.as_str(), f)\n     }\n }\n "}]}