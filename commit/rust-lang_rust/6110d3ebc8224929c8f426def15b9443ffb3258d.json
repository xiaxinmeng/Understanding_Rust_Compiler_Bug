{"sha": "6110d3ebc8224929c8f426def15b9443ffb3258d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTBkM2ViYzgyMjQ5MjljOGY0MjZkZWYxNWI5NDQzZmZiMzI1OGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T03:49:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-01T03:49:19Z"}, "message": "Rollup merge of #66503 - thomasetter:panic-error-msg, r=joshtriplett\n\nMore useful test error messages on should_panic(expected=...) mismatch\n\nFixes  #66304\nr? @gilescope\n\nShows both the actual as well as the expected panic value when a test with `should_panic(expected=...)` fails.\nThis makes `should_panic` more consistent with `assert_eq`.\n\nI am not sure whether printing the `Any::type_id()` is useful, is there something better that we could print for non-string panic values?", "tree": {"sha": "27600c0d000d6ee236f5fb7e64052b6ed0e560de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27600c0d000d6ee236f5fb7e64052b6ed0e560de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6110d3ebc8224929c8f426def15b9443ffb3258d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4zg/CRBK7hj4Ov3rIwAAdHIIABwHje3UhDSXFQWunyNxBk5v\nD7tzKq5cFF0jmDGWQQooI3BSApBKGhfO++7dyrRkO/1vIDMwcAlmPH6jm3ZOa9PG\nW2SZiLbmnt9DHkv67Sa6lefjQN2OkmuuSHT/N/v7j7TDO4mMIPdwVBbjJyo806bD\nV/dQw3i+aCYzBHixtVccll7dtO2OwTF+G+DWPJq9YFcrRnLkRW9uGa/kI0efAZal\nFNZo9CojmNbzXLrVNRIaVr9/9ijG77OqBs6LBEEA/82PPx8uUMGVgxBjuuBd7Vzh\nipDX+B7rPXcRuBvkdPZWPfNE3cqqL3FumGdg9HVDHUTFqt+/Gr9XsOBoW1OThh4=\n=rXEb\n-----END PGP SIGNATURE-----\n", "payload": "tree 27600c0d000d6ee236f5fb7e64052b6ed0e560de\nparent 135ccbaca86ed4b9c0efaf0cd31442eae57ffad7\nparent 16bf4f5e1b50773c6b4ec7b7524876440db69d1b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575172159 +0100\ncommitter GitHub <noreply@github.com> 1575172159 +0100\n\nRollup merge of #66503 - thomasetter:panic-error-msg, r=joshtriplett\n\nMore useful test error messages on should_panic(expected=...) mismatch\n\nFixes  #66304\nr? @gilescope\n\nShows both the actual as well as the expected panic value when a test with `should_panic(expected=...)` fails.\nThis makes `should_panic` more consistent with `assert_eq`.\n\nI am not sure whether printing the `Any::type_id()` is useful, is there something better that we could print for non-string panic values?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6110d3ebc8224929c8f426def15b9443ffb3258d", "html_url": "https://github.com/rust-lang/rust/commit/6110d3ebc8224929c8f426def15b9443ffb3258d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6110d3ebc8224929c8f426def15b9443ffb3258d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7", "html_url": "https://github.com/rust-lang/rust/commit/135ccbaca86ed4b9c0efaf0cd31442eae57ffad7"}, {"sha": "16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bf4f5e1b50773c6b4ec7b7524876440db69d1b", "html_url": "https://github.com/rust-lang/rust/commit/16bf4f5e1b50773c6b4ec7b7524876440db69d1b"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "bfabe1722dbedc53d2c693a8a06da24a06d3faa3", "filename": "src/libtest/test_result.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6110d3ebc8224929c8f426def15b9443ffb3258d/src%2Flibtest%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6110d3ebc8224929c8f426def15b9443ffb3258d/src%2Flibtest%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftest_result.rs?ref=6110d3ebc8224929c8f426def15b9443ffb3258d", "patch": "@@ -37,22 +37,30 @@ pub fn calc_result<'a>(\n     let result = match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TestResult::TrOk,\n         (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {\n-            if err\n+            let maybe_panic_str = err\n                 .downcast_ref::<String>()\n                 .map(|e| &**e)\n-                .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n-                .map(|e| e.contains(msg))\n-                .unwrap_or(false)\n-            {\n+                .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e));\n+\n+            if maybe_panic_str.map(|e| e.contains(msg)).unwrap_or(false) {\n                 TestResult::TrOk\n+            } else if desc.allow_fail {\n+                TestResult::TrAllowedFail\n+            } else if let Some(panic_str) = maybe_panic_str {\n+                TestResult::TrFailedMsg(format!(\n+                    r#\"panic did not contain expected string\n+      panic message: `{:?}`,\n+ expected substring: `{:?}`\"#,\n+                    panic_str, msg\n+                ))\n             } else {\n-                if desc.allow_fail {\n-                    TestResult::TrAllowedFail\n-                } else {\n-                    TestResult::TrFailedMsg(\n-                        format!(\"panic did not include expected string '{}'\", msg)\n-                    )\n-                }\n+                TestResult::TrFailedMsg(format!(\n+                    r#\"expected panic with string value,\n+ found non-string value: `{:?}`\n+     expected substring: `{:?}`\"#,\n+                    (**err).type_id(),\n+                    msg\n+                ))\n             }\n         }\n         (&ShouldPanic::Yes, Ok(())) => {"}, {"sha": "0bea2b80ecf5e185e2ce40f7c82cb0af14346e98", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6110d3ebc8224929c8f426def15b9443ffb3258d/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6110d3ebc8224929c8f426def15b9443ffb3258d/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=6110d3ebc8224929c8f426def15b9443ffb3258d", "patch": "@@ -15,6 +15,7 @@ use crate::{\n         // TestType, TrFailedMsg, TrIgnored, TrOk,\n     },\n };\n+use std::any::TypeId;\n use std::sync::mpsc::channel;\n use std::time::Duration;\n \n@@ -84,7 +85,7 @@ pub fn do_not_run_ignored_tests() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result != TrOk);\n+    assert_ne!(result, TrOk);\n }\n \n #[test]\n@@ -103,7 +104,7 @@ pub fn ignored_tests_result_in_ignored() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrIgnored);\n+    assert_eq!(result, TrIgnored);\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -126,7 +127,7 @@ fn test_should_panic() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrOk);\n+    assert_eq!(result, TrOk);\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -149,7 +150,7 @@ fn test_should_panic_good_message() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrOk);\n+    assert_eq!(result, TrOk);\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -161,7 +162,9 @@ fn test_should_panic_bad_message() {\n         panic!(\"an error message\");\n     }\n     let expected = \"foobar\";\n-    let failed_msg = \"panic did not include expected string\";\n+    let failed_msg = r#\"panic did not contain expected string\n+      panic message: `\"an error message\"`,\n+ expected substring: `\"foobar\"`\"#;\n     let desc = TestDescAndFn {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n@@ -175,7 +178,35 @@ fn test_should_panic_bad_message() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n+    assert_eq!(result, TrFailedMsg(failed_msg.to_string()));\n+}\n+\n+// FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n+#[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n+fn test_should_panic_non_string_message_type() {\n+    use crate::tests::TrFailedMsg;\n+    fn f() {\n+        panic!(1i32);\n+    }\n+    let expected = \"foobar\";\n+    let failed_msg = format!(r#\"expected panic with string value,\n+ found non-string value: `{:?}`\n+     expected substring: `\"foobar\"`\"#, TypeId::of::<i32>());\n+    let desc = TestDescAndFn {\n+        desc: TestDesc {\n+            name: StaticTestName(\"whatever\"),\n+            ignore: false,\n+            should_panic: ShouldPanic::YesWithMessage(expected),\n+            allow_fail: false,\n+            test_type: TestType::Unknown,\n+        },\n+        testfn: DynTestFn(Box::new(f)),\n+    };\n+    let (tx, rx) = channel();\n+    run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n+    let result = rx.recv().unwrap().result;\n+    assert_eq!(result, TrFailedMsg(failed_msg));\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -196,7 +227,7 @@ fn test_should_panic_but_succeeds() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrFailedMsg(\"test did not panic as expected\".to_string()));\n+    assert_eq!(result, TrFailedMsg(\"test did not panic as expected\".to_string()));\n }\n \n fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n@@ -570,7 +601,7 @@ pub fn sort_tests() {\n     ];\n \n     for (a, b) in expected.iter().zip(filtered) {\n-        assert!(*a == b.desc.name.to_string());\n+        assert_eq!(*a, b.desc.name.to_string());\n     }\n }\n "}]}