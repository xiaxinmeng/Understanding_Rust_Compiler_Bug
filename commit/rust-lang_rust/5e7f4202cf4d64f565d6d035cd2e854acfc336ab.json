{"sha": "5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2Y0MjAyY2Y0ZDY0ZjU2NWQ2ZDAzNWNkMmU4NTRhY2ZjMzM2YWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:45:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:45:36Z"}, "message": "Move FileItems up", "tree": {"sha": "bc76e79dd732fecc217dbb1a2109e5ae1a1803fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc76e79dd732fecc217dbb1a2109e5ae1a1803fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "html_url": "https://github.com/rust-lang/rust/commit/5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9100d769a043c55f83b709de2714dac935e333f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9100d769a043c55f83b709de2714dac935e333f", "html_url": "https://github.com/rust-lang/rust/commit/b9100d769a043c55f83b709de2714dac935e333f"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "a226e8205fb9d102c7b4132e03df29d51bebeb17", "filename": "crates/ra_analysis/src/hir/db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs?ref=5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "patch": "@@ -8,11 +8,12 @@ use ra_syntax::{\n use crate::{\n     FileId,\n     db::SyntaxDatabase,\n+    hir::{FileItems, FileItemId},\n     hir::query_definitions,\n     hir::function::{FnId, FnScopes},\n     hir::module::{\n         ModuleId, ModuleTree, ModuleSource,\n-        nameres::{ItemMap, InputModuleItems, FileItems, FileItemId}\n+        nameres::{ItemMap, InputModuleItems}\n     },\n     input::SourceRootId,\n     Cancelable,"}, {"sha": "3d4a55ca43b722b68f05fd400bba4bc77cfe74e9", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "patch": "@@ -11,15 +11,20 @@ mod function;\n mod module;\n mod path;\n \n+use std::ops::Index;\n+\n+use ra_syntax::{SyntaxNodeRef, SyntaxNode};\n+\n use crate::{\n     hir::db::HirDatabase,\n     loc2id::{DefId, DefLoc},\n     Cancelable,\n+    arena::{Arena, Id},\n };\n \n pub(crate) use self::{\n     path::{Path, PathKind},\n-    module::{Module, ModuleId, Problem, nameres::FileItemId},\n+    module::{Module, ModuleId, Problem},\n     function::{Function, FnScopes},\n };\n \n@@ -43,3 +48,34 @@ impl DefId {\n         Ok(res)\n     }\n }\n+\n+/// Identifier of item within a specific file. This is stable over reparses, so\n+/// it's OK to use it as a salsa key/value.\n+pub(crate) type FileItemId = Id<SyntaxNode>;\n+\n+/// Maps item's `SyntaxNode`s to `FileItemId` and back.\n+#[derive(Debug, PartialEq, Eq, Default)]\n+pub(crate) struct FileItems {\n+    arena: Arena<SyntaxNode>,\n+}\n+\n+impl FileItems {\n+    fn alloc(&mut self, item: SyntaxNode) -> FileItemId {\n+        self.arena.alloc(item)\n+    }\n+    fn id_of(&self, item: SyntaxNodeRef) -> FileItemId {\n+        let (id, _item) = self\n+            .arena\n+            .iter()\n+            .find(|(_id, i)| i.borrowed() == item)\n+            .unwrap();\n+        id\n+    }\n+}\n+\n+impl Index<FileItemId> for FileItems {\n+    type Output = SyntaxNode;\n+    fn index(&self, idx: FileItemId) -> &SyntaxNode {\n+        &self.arena[idx]\n+    }\n+}"}, {"sha": "f7d8c8e8c6d74e9fbbeb6d0796aac9e1b02392e3", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "patch": "@@ -16,13 +16,12 @@\n //! structure itself is modified.\n use std::{\n     sync::Arc,\n-    ops::Index,\n };\n \n use rustc_hash::FxHashMap;\n \n use ra_syntax::{\n-    SyntaxNode, SyntaxNodeRef, TextRange,\n+    TextRange,\n     SmolStr, SyntaxKind::{self, *},\n     ast::{self, AstNode}\n };\n@@ -31,45 +30,14 @@ use crate::{\n     Cancelable, FileId,\n     loc2id::{DefId, DefLoc},\n     hir::{\n+        FileItemId, FileItems,\n         Path, PathKind,\n         HirDatabase,\n         module::{ModuleId, ModuleTree},\n     },\n     input::SourceRootId,\n-    arena::{Arena, Id}\n };\n \n-/// Identifier of item within a specific file. This is stable over reparses, so\n-/// it's OK to use it as a salsa key/value.\n-pub(crate) type FileItemId = Id<SyntaxNode>;\n-\n-/// Maps item's `SyntaxNode`s to `FileItemId` and back.\n-#[derive(Debug, PartialEq, Eq, Default)]\n-pub(crate) struct FileItems {\n-    arena: Arena<SyntaxNode>,\n-}\n-\n-impl FileItems {\n-    pub(crate) fn alloc(&mut self, item: SyntaxNode) -> FileItemId {\n-        self.arena.alloc(item)\n-    }\n-    fn id_of(&self, item: SyntaxNodeRef) -> FileItemId {\n-        let (id, _item) = self\n-            .arena\n-            .iter()\n-            .find(|(_id, i)| i.borrowed() == item)\n-            .unwrap();\n-        id\n-    }\n-}\n-\n-impl Index<FileItemId> for FileItems {\n-    type Output = SyntaxNode;\n-    fn index(&self, idx: FileItemId) -> &SyntaxNode {\n-        &self.arena[idx]\n-    }\n-}\n-\n /// Item map is the result of the name resolution. Item map contains, for each\n /// module, the set of visible items.\n #[derive(Default, Debug, PartialEq, Eq)]"}, {"sha": "e6bfbc6cf3f78127fcbbfbcf6cbbb1acf68a1c33", "filename": "crates/ra_analysis/src/hir/query_definitions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7f4202cf4d64f565d6d035cd2e854acfc336ab/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs?ref=5e7f4202cf4d64f565d6d035cd2e854acfc336ab", "patch": "@@ -12,12 +12,13 @@ use ra_syntax::{\n use crate::{\n     FileId, Cancelable,\n     hir::{\n+        FileItems, FileItemId,\n         db::HirDatabase,\n         function::{FnId, FnScopes},\n         module::{\n             ModuleSource, ModuleSourceNode, ModuleId,\n             imp::Submodule,\n-            nameres::{FileItems, FileItemId, InputModuleItems, ItemMap, Resolver},\n+            nameres::{InputModuleItems, ItemMap, Resolver},\n         },\n     },\n     input::SourceRootId,"}]}