{"sha": "44a01b8a54b078d15620d1133b94ee21ee7a6915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YTAxYjhhNTRiMDc4ZDE1NjIwZDExMzNiOTRlZTIxZWU3YTY5MTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-02-15T23:57:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-03T15:29:31Z"}, "message": "rustbuild: Add support for compiling Cargo\n\nThis commit adds support to rustbuild for compiling Cargo as part of the release\nprocess. Previously rustbuild would simply download a Cargo snapshot and\nrepackage it. With this change we should be able to turn off artifacts from the\nrust-lang/cargo repository and purely rely on the artifacts Cargo produces here.\n\nThe infrastructure added here is intended to be extensible to other components,\nsuch as the RLS. It won't exactly be a one-line addition, but the addition of\nCargo didn't require too much hooplah anyway.\n\nThe process for release Cargo will now look like:\n\n* The rust-lang/rust repository has a Cargo submodule which is used to build a\n  Cargo to pair with the rust-lang/rust release\n* Periodically we'll update the cargo submodule as necessary on rust-lang/rust's\n  master branch\n* When branching beta we'll create a new branch of Cargo (as we do today), and\n  the first commit to the beta branch will be to update the Cargo submodule to\n  this exact revision.\n* When branching stable, we'll ensure that the Cargo submodule is updated and\n  then make a stable release.\n\nBackports to Cargo will look like:\n\n* Send a PR to cargo's master branch\n* Send a PR to cargo's release branch (e.g. rust-1.16.0)\n* Send a PR to rust-lang/rust's beta branch updating the submodule\n* Eventually send a PR to rust-lang/rust's master branch updating the submodule\n\nFor reference, the process to add a new component to the rust-lang/rust release\nwould look like:\n\n* Add `$foo` as a submodule in `src/tools`\n* Add a `tool-$foo` step which compiles `$foo` with the specified compiler,\n  likely mirroring what Cargo does.\n* Add a `dist-$foo` step which uses `src/tools/$foo` and the `tool-$foo` output\n  to create a rust-installer package for `$foo` likely mirroring what Cargo\n  does.\n* Update the `dist-extended` step with a new dependency on `dist-$foo`\n* Update `src/tools/build-manifest` for the new component.", "tree": {"sha": "861bb43f27c87f7346a19bfe2dc1e33681cdc6a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861bb43f27c87f7346a19bfe2dc1e33681cdc6a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a01b8a54b078d15620d1133b94ee21ee7a6915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a01b8a54b078d15620d1133b94ee21ee7a6915", "html_url": "https://github.com/rust-lang/rust/commit/44a01b8a54b078d15620d1133b94ee21ee7a6915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a01b8a54b078d15620d1133b94ee21ee7a6915/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6304e12281ed03f4123de6352d4bd7bbff6e0dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6304e12281ed03f4123de6352d4bd7bbff6e0dd", "html_url": "https://github.com/rust-lang/rust/commit/f6304e12281ed03f4123de6352d4bd7bbff6e0dd"}], "stats": {"total": 677, "additions": 511, "deletions": 166}, "files": [{"sha": "be8628de62832f0b01b8ca60b0c8a97696850c9a", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/configure", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -651,6 +651,7 @@ opt locked-deps 0 \"force Cargo.lock to be up to date\"\n opt vendor 0 \"enable usage of vendored Rust crates\"\n opt sanitizers 0 \"build the sanitizer runtimes (asan, lsan, msan, tsan)\"\n opt dist-src 1 \"when building tarballs enables building a source tarball\"\n+opt cargo-openssl-static 0 \"static openssl in cargo\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\""}, {"sha": "c463f2bb747cc20b853fa281003e8a46d1496123", "filename": "src/Cargo.lock", "status": "modified", "additions": 72, "deletions": 12, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -140,11 +140,15 @@ dependencies = [\n  \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_ignored 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -163,6 +167,8 @@ dependencies = [\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -238,7 +244,9 @@ name = \"crates-io\"\n version = \"0.7.0\"\n dependencies = [\n  \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -784,6 +792,11 @@ name = \"quick-error\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"quote\"\n+version = \"0.3.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n@@ -1222,6 +1235,32 @@ name = \"serde\"\n version = \"0.9.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"serde_codegen_internals\"\n+version = \"0.14.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"syn 0.11.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"0.9.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_codegen_internals 0.14.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_ignored\"\n+version = \"0.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"serde_json\"\n version = \"0.9.7\"\n@@ -1278,6 +1317,24 @@ name = \"strsim\"\n version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.11.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"synom\"\n+version = \"0.11.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syntax\"\n version = \"0.0.0\"\n@@ -1404,14 +1461,6 @@ dependencies = [\n  \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"toml\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"toml\"\n version = \"0.3.0\"\n@@ -1443,6 +1492,11 @@ name = \"unicode-width\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unreachable\"\n version = \"0.1.1\"\n@@ -1547,8 +1601,8 @@ dependencies = [\n \"checksum libssh2-sys 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91e135645c2e198a39552c8c7686bb5b83b1b99f64831c040a6c2798a1195934\"\n \"checksum libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e5ee912a45d686d393d5ac87fac15ba0ba18daae14e8e7543c63ebf7fb7e970c\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n-\"checksum mdbook 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbba458ca886cb082d026afd704eeeeb0531f7e4ffd6c619f72dc309c1c18fe4\"\n \"checksum matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efd7622e3022e1a6eaa602c4cea8912254e5582c9c692e9167714182244801b1\"\n+\"checksum mdbook 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbba458ca886cb082d026afd704eeeeb0531f7e4ffd6c619f72dc309c1c18fe4\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\"\n@@ -1572,6 +1626,7 @@ dependencies = [\n \"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n \"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n \"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n+\"checksum quote 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7375cf7ad34a92e8fd18dd9c42f58b9a11def59ab48bec955bf359a788335592\"\n \"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n \"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n@@ -1581,9 +1636,14 @@ dependencies = [\n \"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e0ed773960f90a78567fcfbe935284adf50c5d7cf119aa2cf43bb0b4afa69bb\"\n+\"checksum serde_codegen_internals 0.14.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4d52006899f910528a10631e5b727973fe668f3228109d1707ccf5bad5490b6e\"\n+\"checksum serde_derive 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"789ee9f3cd78c850948b94121020147f5220b47dafbf230d7098a93a58f726cf\"\n+\"checksum serde_ignored 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4b3f5576874721d14690657e9f0ed286e72a52be2f6fdc0cf2f024182bd8f64\"\n \"checksum serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb96d30e4e6f9fc52e08f51176d078b6f79b981dc3ed4134f7b850be9f446a8\"\n \"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n+\"checksum syn 0.11.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37c279fb816210c9bb28b2c292664581e7b87b4561e86b94df462664d8620bb8\"\n+\"checksum synom 0.11.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"27e31aa4b09b9f4cb12dff3c30ba503e17b1a624413d764d32dab76e3920e5bc\"\n \"checksum tar 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eb3bf6ec92843ca93f4fcfb5fc6dfe30534815b147885db4b5759b8e2ff7d52\"\n \"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n \"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n@@ -1593,12 +1653,12 @@ dependencies = [\n \"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n-\"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08272367dd2e766db3fa38f068067d17aa6a9dfd7259af24b3927db92f1e0c2f\"\n \"checksum unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3a078ebdd62c0e71a709c3d53d2af693fe09fe93fbff8344aebe289b78f9032\"\n \"checksum unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e28fa37426fceeb5cf8f41ee273faa7c82c47dc8fba5853402841e665fcd86ff\"\n \"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n \"checksum url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5ba8a749fb4479b043733416c244fa9d1d3af3d7c23804944651c8a448cb87e\"\n \"checksum user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ef4711d107b21b410a3a974b1204d9accc8b10dad75d8324b5d755de1617d47\""}, {"sha": "c126c076a3d4eccf862197263a520d6b04d5007c", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -15,72 +15,77 @@\n //! `package_vers`, and otherwise indicating to the compiler what it should\n //! print out as part of its version information.\n \n+use std::path::Path;\n use std::process::Command;\n \n use build_helper::output;\n \n use Build;\n \n // The version number\n-const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n+pub const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release\n // versions (section 9)\n-const CFG_PRERELEASE_VERSION: &'static str = \".1\";\n+pub const CFG_PRERELEASE_VERSION: &'static str = \".1\";\n \n-pub fn collect(build: &mut Build) {\n-    build.release_num = CFG_RELEASE_NUM.to_string();\n-    build.prerelease_version = CFG_RELEASE_NUM.to_string();\n+pub struct GitInfo {\n+    inner: Option<Info>,\n+}\n \n-    // Depending on the channel, passed in `./configure --release-channel`,\n-    // determine various properties of the build.\n-    match &build.config.channel[..] {\n-        \"stable\" => {\n-            build.release = CFG_RELEASE_NUM.to_string();\n-            build.package_vers = build.release.clone();\n-            build.unstable_features = false;\n-        }\n-        \"beta\" => {\n-            build.release = format!(\"{}-beta{}\", CFG_RELEASE_NUM,\n-                                   CFG_PRERELEASE_VERSION);\n-            build.package_vers = \"beta\".to_string();\n-            build.unstable_features = false;\n-        }\n-        \"nightly\" => {\n-            build.release = format!(\"{}-nightly\", CFG_RELEASE_NUM);\n-            build.package_vers = \"nightly\".to_string();\n-            build.unstable_features = true;\n-        }\n-        _ => {\n-            build.release = format!(\"{}-dev\", CFG_RELEASE_NUM);\n-            build.package_vers = build.release.clone();\n-            build.unstable_features = true;\n-        }\n-    }\n-    build.version = build.release.clone();\n+struct Info {\n+    commit_date: String,\n+    sha: String,\n+    short_sha: String,\n+}\n \n-    // If we have a git directory, add in some various SHA information of what\n-    // commit this compiler was compiled from.\n-    if build.src.join(\".git\").is_dir() {\n-        let ver_date = output(Command::new(\"git\").current_dir(&build.src)\n+impl GitInfo {\n+    pub fn new(dir: &Path) -> GitInfo {\n+        if !dir.join(\".git\").is_dir() {\n+            return GitInfo { inner: None }\n+        }\n+        let ver_date = output(Command::new(\"git\").current_dir(dir)\n                                       .arg(\"log\").arg(\"-1\")\n                                       .arg(\"--date=short\")\n                                       .arg(\"--pretty=format:%cd\"));\n-        let ver_hash = output(Command::new(\"git\").current_dir(&build.src)\n+        let ver_hash = output(Command::new(\"git\").current_dir(dir)\n                                       .arg(\"rev-parse\").arg(\"HEAD\"));\n         let short_ver_hash = output(Command::new(\"git\")\n-                                            .current_dir(&build.src)\n+                                            .current_dir(dir)\n                                             .arg(\"rev-parse\")\n                                             .arg(\"--short=9\")\n                                             .arg(\"HEAD\"));\n-        let ver_date = ver_date.trim().to_string();\n-        let ver_hash = ver_hash.trim().to_string();\n-        let short_ver_hash = short_ver_hash.trim().to_string();\n-        build.version.push_str(&format!(\" ({} {})\", short_ver_hash,\n-                                       ver_date));\n-        build.ver_date = Some(ver_date.to_string());\n-        build.ver_hash = Some(ver_hash);\n-        build.short_ver_hash = Some(short_ver_hash);\n+        GitInfo {\n+            inner: Some(Info {\n+                commit_date: ver_date.trim().to_string(),\n+                sha: ver_hash.trim().to_string(),\n+                short_sha: short_ver_hash.trim().to_string(),\n+            }),\n+        }\n+    }\n+\n+    pub fn sha(&self) -> Option<&str> {\n+        self.inner.as_ref().map(|s| &s.sha[..])\n+    }\n+\n+    pub fn sha_short(&self) -> Option<&str> {\n+        self.inner.as_ref().map(|s| &s.short_sha[..])\n+    }\n+\n+    pub fn commit_date(&self) -> Option<&str> {\n+        self.inner.as_ref().map(|s| &s.commit_date[..])\n+    }\n+\n+    pub fn version(&self, build: &Build, num: &str) -> String {\n+        let mut version = build.release(num);\n+        if let Some(ref inner) = self.inner {\n+            version.push_str(\" (\");\n+            version.push_str(&inner.short_sha);\n+            version.push_str(\" \");\n+            version.push_str(&inner.commit_date);\n+            version.push_str(\")\");\n+        }\n+        return version\n     }\n }"}, {"sha": "46d8d4b4aab2d6717017f75d660f0d424ad52976", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -24,6 +24,7 @@ use std::process::Command;\n use build_helper::{output, mtime, up_to_date};\n use filetime::FileTime;\n \n+use channel::GitInfo;\n use util::{exe, libdir, is_dylib, copy};\n use {Build, Compiler, Mode};\n \n@@ -210,9 +211,9 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n \n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n-    cargo.env(\"CFG_RELEASE\", &build.release)\n+    cargo.env(\"CFG_RELEASE\", build.rust_release())\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n-         .env(\"CFG_VERSION\", &build.version)\n+         .env(\"CFG_VERSION\", build.rust_version())\n          .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or(PathBuf::new()));\n \n     if compiler.stage == 0 {\n@@ -229,13 +230,13 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n         cargo.env_remove(\"RUSTC_DEBUGINFO_LINES\");\n     }\n \n-    if let Some(ref ver_date) = build.ver_date {\n+    if let Some(ref ver_date) = build.rust_info.commit_date() {\n         cargo.env(\"CFG_VER_DATE\", ver_date);\n     }\n-    if let Some(ref ver_hash) = build.ver_hash {\n+    if let Some(ref ver_hash) = build.rust_info.sha() {\n         cargo.env(\"CFG_VER_HASH\", ver_hash);\n     }\n-    if !build.unstable_features {\n+    if !build.unstable_features() {\n         cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n     }\n     // Flag that rust llvm is in use\n@@ -416,13 +417,32 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n     // build.clear_if_dirty(&out_dir, &libstd_stamp(build, stage, &host, target));\n \n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n-    cargo.arg(\"--manifest-path\")\n-         .arg(build.src.join(format!(\"src/tools/{}/Cargo.toml\", tool)));\n+    let dir = build.src.join(\"src/tools\").join(tool);\n+    cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n     // We don't want to build tools dynamically as they'll be running across\n     // stages and such and it's just easier if they're not dynamically linked.\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n \n+    if let Some(dir) = build.openssl_install_dir(target) {\n+        cargo.env(\"OPENSSL_STATIC\", \"1\");\n+        cargo.env(\"OPENSSL_DIR\", dir);\n+        cargo.env(\"LIBZ_SYS_STATIC\", \"1\");\n+    }\n+\n+    cargo.env(\"CFG_RELEASE_CHANNEL\", &build.config.channel);\n+\n+    let info = GitInfo::new(&dir);\n+    if let Some(sha) = info.sha() {\n+        cargo.env(\"CFG_COMMIT_HASH\", sha);\n+    }\n+    if let Some(sha_short) = info.sha_short() {\n+        cargo.env(\"CFG_SHORT_COMMIT_HASH\", sha_short);\n+    }\n+    if let Some(date) = info.commit_date() {\n+        cargo.env(\"CFG_COMMIT_DATE\", date);\n+    }\n+\n     build.run(&mut cargo);\n }\n "}, {"sha": "438ce6103d624f814ddae98fe9afbea1830f407a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -106,6 +106,7 @@ pub struct Config {\n     pub gdb: Option<PathBuf>,\n     pub python: Option<PathBuf>,\n     pub configure_args: Vec<String>,\n+    pub openssl_static: bool,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -155,6 +156,7 @@ struct Build {\n     extended: Option<bool>,\n     verbose: Option<usize>,\n     sanitizers: Option<bool>,\n+    openssl_static: Option<bool>,\n }\n \n /// TOML representation of various global install decisions.\n@@ -305,6 +307,7 @@ impl Config {\n         set(&mut config.extended, build.extended);\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n+        set(&mut config.openssl_static, build.openssl_static);\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n@@ -453,6 +456,7 @@ impl Config {\n                 (\"EXTENDED\", self.extended),\n                 (\"SANITIZERS\", self.sanitizers),\n                 (\"DIST_SRC\", self.rust_dist_src),\n+                (\"CARGO_OPENSSL_STATIC\", self.openssl_static),\n             }\n \n             match key {"}, {"sha": "30763e38a336fa4569c41e6b91a371880ef6a71c", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -134,6 +134,11 @@\n # Build the sanitizer runtimes\n #sanitizers = false\n \n+# Indicates whether the OpenSSL linked into Cargo will be statically linked or\n+# not. If static linkage is specified then the build system will download a\n+# known-good version of OpenSSL, compile it, and link it to Cargo.\n+#openssl-static = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "67e4dad83ce8855bd93384a9ecc2b39e491624e7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 76, "deletions": 58, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -33,19 +33,12 @@ const SH_CMD: &'static str = \"sh\";\n const SH_CMD: &'static str = \"bash\";\n \n use {Build, Compiler, Mode};\n-use util::{cp_r, libdir, is_dylib, cp_filtered, copy};\n-\n-pub fn package_vers(build: &Build) -> &str {\n-    match &build.config.channel[..] {\n-        \"stable\" => &build.release,\n-        \"beta\" => \"beta\",\n-        \"nightly\" => \"nightly\",\n-        _ => &build.release,\n-    }\n-}\n+use channel;\n+use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n \n fn pkgname(build: &Build, component: &str) -> String {\n-    format!(\"{}-{}\", component, package_vers(build))\n+    assert!(component.starts_with(\"rust\")); // does not work with cargo\n+    format!(\"{}-{}\", component, build.rust_package_vers())\n }\n \n fn distdir(build: &Build) -> PathBuf {\n@@ -93,7 +86,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     // As part of this step, *also* copy the docs directory to a directory which\n     // buildbot typically uploads.\n     if host == build.config.build {\n-        let dst = distdir(build).join(\"doc\").join(&build.package_vers);\n+        let dst = distdir(build).join(\"doc\").join(build.rust_package_vers());\n         t!(fs::create_dir_all(&dst));\n         cp_r(&src, &dst);\n     }\n@@ -162,7 +155,7 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     cp(\"LICENSE-MIT\");\n     cp(\"README.md\");\n     // tiny morsel of metadata is used by rust-packaging\n-    let version = &build.version;\n+    let version = build.rust_version();\n     t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n \n     // On MinGW we've got a few runtime DLL dependencies that we need to\n@@ -312,7 +305,7 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n }\n \n pub fn rust_src_location(build: &Build) -> PathBuf {\n-    let plain_name = format!(\"rustc-{}-src\", package_vers(build));\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n     distdir(build).join(&format!(\"{}.tar.gz\", plain_name))\n }\n \n@@ -477,14 +470,14 @@ pub fn rust_src(build: &Build) {\n     build.run(&mut cmd);\n \n     // Rename directory, so that root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", package_vers(build));\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n     let plain_dst_src = tmpdir(build).join(&plain_name);\n     let _ = fs::remove_dir_all(&plain_dst_src);\n     t!(fs::create_dir_all(&plain_dst_src));\n     cp_r(&dst_src, &plain_dst_src);\n \n     // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.version.as_bytes());\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n \n     // Create plain source tarball\n     let mut cmd = Command::new(\"tar\");\n@@ -536,54 +529,78 @@ fn write_file(path: &Path, data: &[u8]) {\n     t!(vf.write_all(data));\n }\n \n-// FIXME(#38531) eventually this should package up a Cargo that we just compiled\n-//               and tested locally, but for now we're downloading cargo\n-//               artifacts from their compiled location.\n pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n \n-    let branch = match &build.config.channel[..] {\n-        \"stable\" |\n-        \"beta\" => format!(\"rust-{}\", build.release_num),\n-        _ => \"master\".to_string(),\n-    };\n+    let src = build.src.join(\"src/tools/cargo\");\n+    let etc = src.join(\"src/etc\");\n+    let release_num = &build.crates[\"cargo\"].version;\n+    let name = format!(\"cargo-{}\", build.package_vers(release_num));\n+    let version = build.cargo_info.version(build, release_num);\n+\n+    let tmp = tmpdir(build);\n+    let image = tmp.join(\"cargo-image\");\n+    drop(fs::remove_dir_all(&image));\n+    t!(fs::create_dir_all(&image));\n \n-    let dst = tmpdir(build).join(\"cargo\");\n-    let _ = fs::remove_dir_all(&dst);\n-    build.run(Command::new(\"git\")\n-                .arg(\"clone\")\n-                .arg(\"--depth\").arg(\"1\")\n-                .arg(\"--branch\").arg(&branch)\n-                .arg(\"https://github.com/rust-lang/cargo\")\n-                .current_dir(dst.parent().unwrap()));\n-    let sha = output(Command::new(\"git\")\n-                .arg(\"rev-parse\")\n-                .arg(\"HEAD\")\n-                .current_dir(&dst));\n-    let sha = sha.trim();\n-    println!(\"\\tgot cargo sha: {}\", sha);\n-\n-    let input = format!(\"https://s3.amazonaws.com/rust-lang-ci/cargo-builds\\\n-                         /{}/cargo-nightly-{}.tar.gz\", sha, target);\n-    let output = distdir(build).join(format!(\"cargo-nightly-{}.tar.gz\", target));\n-    println!(\"\\tdownloading {}\", input);\n-    let mut curl = Command::new(\"curl\");\n-    curl.arg(\"-f\")\n-        .arg(\"-o\").arg(&output)\n-        .arg(&input)\n-        .arg(\"--retry\").arg(\"3\");\n-    build.run(&mut curl);\n+    // Prepare the image directory\n+    t!(fs::create_dir_all(image.join(\"share/zsh/site-functions\")));\n+    t!(fs::create_dir_all(image.join(\"etc/bash_completions.d\")));\n+    let cargo = build.cargo_out(&compiler, Mode::Tool, target)\n+                     .join(exe(\"cargo\", target));\n+    install(&cargo, &image.join(\"bin\"), 0o755);\n+    for man in t!(etc.join(\"man\").read_dir()) {\n+        let man = t!(man);\n+        install(&man.path(), &image.join(\"share/man/man1\"), 0o644);\n+    }\n+    install(&etc.join(\"_cargo\"), &image.join(\"share/zsh/site-functions\"), 0o644);\n+    copy(&etc.join(\"cargo.bashcomp.sh\"),\n+         &image.join(\"etc/bash_completions.d/cargo\"));\n+    let doc = image.join(\"share/doc/cargo\");\n+    install(&src.join(\"README.md\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-THIRD-PARTY\"), &doc, 0o644);\n+\n+    // Prepare the overlay\n+    let overlay = tmp.join(\"cargo-overlay\");\n+    drop(fs::remove_dir_all(&overlay));\n+    t!(fs::create_dir_all(&overlay));\n+    install(&src.join(\"README.md\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-THIRD-PARTY\"), &overlay, 0o644);\n+    t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n+    // Generate the installer tarball\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=Rust-is-ready-to-roll.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(\"--component-name=cargo\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n }\n \n /// Creates a combined installer for the specified target in the provided stage.\n pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n \n     let dist = distdir(build);\n+    let cargo_vers = &build.crates[\"cargo\"].version;\n     let rustc_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"rustc\"),\n                                             target));\n-    let cargo_installer = dist.join(format!(\"cargo-nightly-{}.tar.gz\", target));\n+    let cargo_installer = dist.join(format!(\"cargo-{}-{}.tar.gz\",\n+                                            build.package_vers(&cargo_vers),\n+                                            target));\n     let docs_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                            pkgname(build, \"rust-docs\"),\n                                            target));\n@@ -603,7 +620,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     install(&build.src.join(\"COPYRIGHT\"), &overlay, 0o644);\n     install(&build.src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n     install(&build.src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n-    let version = &build.version;\n+    let version = build.rust_version();\n     t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n     install(&etc.join(\"README.md\"), &overlay, 0o644);\n \n@@ -876,16 +893,16 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n }\n \n fn add_env(build: &Build, cmd: &mut Command, target: &str) {\n-    let mut parts = build.release_num.split('.');\n-    cmd.env(\"CFG_RELEASE_INFO\", &build.version)\n-       .env(\"CFG_RELEASE_NUM\", &build.release_num)\n-       .env(\"CFG_RELEASE\", &build.release)\n-       .env(\"CFG_PRERELEASE_VERSION\", &build.prerelease_version)\n+    let mut parts = channel::CFG_RELEASE_NUM.split('.');\n+    cmd.env(\"CFG_RELEASE_INFO\", build.rust_version())\n+       .env(\"CFG_RELEASE_NUM\", channel::CFG_RELEASE_NUM)\n+       .env(\"CFG_RELEASE\", build.rust_release())\n+       .env(\"CFG_PRERELEASE_VERSION\", channel::CFG_PRERELEASE_VERSION)\n        .env(\"CFG_VER_MAJOR\", parts.next().unwrap())\n        .env(\"CFG_VER_MINOR\", parts.next().unwrap())\n        .env(\"CFG_VER_PATCH\", parts.next().unwrap())\n        .env(\"CFG_VER_BUILD\", \"0\") // just needed to build\n-       .env(\"CFG_PACKAGE_VERS\", package_vers(build))\n+       .env(\"CFG_PACKAGE_VERS\", build.rust_package_vers())\n        .env(\"CFG_PACKAGE_NAME\", pkgname(build, \"rust\"))\n        .env(\"CFG_BUILD\", target)\n        .env(\"CFG_CHANNEL\", &build.config.channel);\n@@ -925,7 +942,8 @@ pub fn hash_and_sign(build: &Build) {\n     cmd.arg(sign);\n     cmd.arg(distdir(build));\n     cmd.arg(today.trim());\n-    cmd.arg(package_vers(build));\n+    cmd.arg(build.rust_package_vers());\n+    cmd.arg(build.cargo_info.version(build, &build.crates[\"cargo\"].version));\n     cmd.arg(addr);\n \n     t!(fs::create_dir_all(distdir(build)));"}, {"sha": "d19e5b1b88456030eb959e9810535cdcdd198e18", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -77,12 +77,9 @@ pub fn standalone(build: &Build, target: &str) {\n     if !up_to_date(&version_input, &version_info) {\n         let mut info = String::new();\n         t!(t!(File::open(&version_input)).read_to_string(&mut info));\n-        let blank = String::new();\n-        let short = build.short_ver_hash.as_ref().unwrap_or(&blank);\n-        let hash = build.ver_hash.as_ref().unwrap_or(&blank);\n-        let info = info.replace(\"VERSION\", &build.release)\n-                       .replace(\"SHORT_HASH\", short)\n-                       .replace(\"STAMP\", hash);\n+        let info = info.replace(\"VERSION\", &build.rust_release())\n+                       .replace(\"SHORT_HASH\", build.rust_info.sha_short().unwrap_or(\"\"))\n+                       .replace(\"STAMP\", build.rust_info.sha().unwrap_or(\"\"));\n         t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n     }\n "}, {"sha": "ba8442ebd8c37bfe1571a76d841ba5b4824e6718", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -19,7 +19,7 @@ use std::path::{Path, PathBuf, Component};\n use std::process::Command;\n \n use Build;\n-use dist::{package_vers, sanitize_sh, tmpdir};\n+use dist::{sanitize_sh, tmpdir};\n \n /// Installs everything.\n pub fn install(build: &Build, stage: u32, host: &str) {\n@@ -59,7 +59,7 @@ pub fn install(build: &Build, stage: u32, host: &str) {\n fn install_sh(build: &Build, package: &str, name: &str, stage: u32, host: &str,\n               prefix: &Path, docdir: &Path, libdir: &Path, mandir: &Path, empty_dir: &Path) {\n     println!(\"Install {} stage{} ({})\", package, stage, host);\n-    let package_name = format!(\"{}-{}-{}\", name, package_vers(build), host);\n+    let package_name = format!(\"{}-{}-{}\", name, build.rust_package_vers(), host);\n \n     let mut cmd = Command::new(\"sh\");\n     cmd.current_dir(empty_dir)"}, {"sha": "5215b281fac0bf0383f669a98c0b2a08837cde08", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 113, "deletions": 24, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -84,7 +84,7 @@ use std::fs::{self, File};\n use std::path::{Component, PathBuf, Path};\n use std::process::Command;\n \n-use build_helper::{run_silent, output, mtime};\n+use build_helper::{run_silent, run_suppressed, output, mtime};\n \n use util::{exe, libdir, add_lib_path};\n \n@@ -148,16 +148,9 @@ pub struct Build {\n     rustc: PathBuf,\n     src: PathBuf,\n     out: PathBuf,\n-    release: String,\n-    unstable_features: bool,\n-    ver_hash: Option<String>,\n-    short_ver_hash: Option<String>,\n-    ver_date: Option<String>,\n-    version: String,\n-    package_vers: String,\n+    rust_info: channel::GitInfo,\n+    cargo_info: channel::GitInfo,\n     local_rebuild: bool,\n-    release_num: String,\n-    prerelease_version: String,\n \n     // Probed tools at runtime\n     lldb_version: Option<String>,\n@@ -173,6 +166,7 @@ pub struct Build {\n #[derive(Debug)]\n struct Crate {\n     name: String,\n+    version: String,\n     deps: Vec<String>,\n     path: PathBuf,\n     doc_step: String,\n@@ -236,6 +230,8 @@ impl Build {\n             }\n             None => false,\n         };\n+        let rust_info = channel::GitInfo::new(&src);\n+        let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n \n         Build {\n             flags: flags,\n@@ -245,22 +241,15 @@ impl Build {\n             src: src,\n             out: out,\n \n-            release: String::new(),\n-            unstable_features: false,\n-            ver_hash: None,\n-            short_ver_hash: None,\n-            ver_date: None,\n-            version: String::new(),\n+            rust_info: rust_info,\n+            cargo_info: cargo_info,\n             local_rebuild: local_rebuild,\n-            package_vers: String::new(),\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             crates: HashMap::new(),\n             lldb_version: None,\n             lldb_python_dir: None,\n             is_sudo: is_sudo,\n-            release_num: String::new(),\n-            prerelease_version: String::new(),\n         }\n     }\n \n@@ -278,15 +267,14 @@ impl Build {\n         cc::find(self);\n         self.verbose(\"running sanity check\");\n         sanity::check(self);\n-        self.verbose(\"collecting channel variables\");\n-        channel::collect(self);\n         // If local-rust is the same major.minor as the current version, then force a local-rebuild\n         let local_version_verbose = output(\n             Command::new(&self.rustc).arg(\"--version\").arg(\"--verbose\"));\n         let local_release = local_version_verbose\n             .lines().filter(|x| x.starts_with(\"release:\"))\n             .next().unwrap().trim_left_matches(\"release:\").trim();\n-        if local_release.split('.').take(2).eq(self.release.split('.').take(2)) {\n+        let my_version = channel::CFG_RELEASE_NUM;\n+        if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n             self.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n             self.local_rebuild = true;\n         }\n@@ -478,10 +466,8 @@ impl Build {\n                   self.config.rust_codegen_units.to_string())\n              .env(\"RUSTC_DEBUG_ASSERTIONS\",\n                   self.config.rust_debug_assertions.to_string())\n-             .env(\"RUSTC_SNAPSHOT\", &self.rustc)\n              .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n              .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n-             .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir())\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n              .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n@@ -491,6 +477,27 @@ impl Build {\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n \n+        // Almost all of the crates that we compile as part of the bootstrap may\n+        // have a build script, including the standard library. To compile a\n+        // build script, however, it itself needs a standard library! This\n+        // introduces a bit of a pickle when we're compiling the standard\n+        // library itself.\n+        //\n+        // To work around this we actually end up using the snapshot compiler\n+        // (stage0) for compiling build scripts of the standard library itself.\n+        // The stage0 compiler is guaranteed to have a libstd available for use.\n+        //\n+        // For other crates, however, we know that we've already got a standard\n+        // library up and running, so we can use the normal compiler to compile\n+        // build scripts in that situation.\n+        if let Mode::Libstd = mode {\n+            cargo.env(\"RUSTC_SNAPSHOT\", &self.rustc)\n+                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n+        } else {\n+            cargo.env(\"RUSTC_SNAPSHOT\", self.compiler_path(compiler))\n+                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n+        }\n+\n         // Ignore incremental modes except for stage0, since we're\n         // not guaranteeing correctness acros builds if the compiler\n         // is changing under your feet.`\n@@ -797,6 +804,12 @@ impl Build {\n         run_silent(cmd)\n     }\n \n+    /// Runs a command, printing out nice contextual information if it fails.\n+    fn run_quiet(&self, cmd: &mut Command) {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        run_suppressed(cmd)\n+    }\n+\n     /// Prints a message if this build is configured in verbose mode.\n     fn verbose(&self, msg: &str) {\n         if self.flags.verbose() || self.config.verbose() {\n@@ -914,6 +927,82 @@ impl Build {\n             compiler.stage >= 2 &&\n             self.config.host.iter().any(|h| h == target)\n     }\n+\n+    /// Returns the directory that OpenSSL artifacts are compiled into if\n+    /// configured to do so.\n+    fn openssl_dir(&self, target: &str) -> Option<PathBuf> {\n+        // OpenSSL not used on Windows\n+        if target.contains(\"windows\") {\n+            None\n+        } else if self.config.openssl_static {\n+            Some(self.out.join(target).join(\"openssl\"))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns the directory that OpenSSL artifacts are installed into if\n+    /// configured as such.\n+    fn openssl_install_dir(&self, target: &str) -> Option<PathBuf> {\n+        self.openssl_dir(target).map(|p| p.join(\"install\"))\n+    }\n+\n+    /// Given `num` in the form \"a.b.c\" return a \"release string\" which\n+    /// describes the release version number.\n+    ///\n+    /// For example on nightly this returns \"a.b.c-nightly\", on beta it returns\n+    /// \"a.b.c-beta.1\" and on stable it just returns \"a.b.c\".\n+    fn release(&self, num: &str) -> String {\n+        match &self.config.channel[..] {\n+            \"stable\" => num.to_string(),\n+            \"beta\" => format!(\"{}-beta{}\", num, channel::CFG_PRERELEASE_VERSION),\n+            \"nightly\" => format!(\"{}-nightly\", num),\n+            _ => format!(\"{}-dev\", num),\n+        }\n+    }\n+\n+    /// Returns the value of `release` above for Rust itself.\n+    fn rust_release(&self) -> String {\n+        self.release(channel::CFG_RELEASE_NUM)\n+    }\n+\n+    /// Returns the \"package version\" for a component given the `num` release\n+    /// number.\n+    ///\n+    /// The package version is typically what shows up in the names of tarballs.\n+    /// For channels like beta/nightly it's just the channel name, otherwise\n+    /// it's the `num` provided.\n+    fn package_vers(&self, num: &str) -> String {\n+        match &self.config.channel[..] {\n+            \"stable\" => num.to_string(),\n+            \"beta\" => \"beta\".to_string(),\n+            \"nightly\" => \"nightly\".to_string(),\n+            _ => format!(\"{}-dev\", num),\n+        }\n+    }\n+\n+    /// Returns the value of `package_vers` above for Rust itself.\n+    fn rust_package_vers(&self) -> String {\n+        self.package_vers(channel::CFG_RELEASE_NUM)\n+    }\n+\n+    /// Returns the `version` string associated with this compiler for Rust\n+    /// itself.\n+    ///\n+    /// Note that this is a descriptive string which includes the commit date,\n+    /// sha, version, etc.\n+    fn rust_version(&self) -> String {\n+        self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n+    }\n+\n+    /// Returns whether unstable features should be enabled for the compiler\n+    /// we're building.\n+    fn unstable_features(&self) -> bool {\n+        match &self.config.channel[..] {\n+            \"stable\" | \"beta\" => false,\n+            \"nightly\" | _ => true,\n+        }\n+    }\n }\n \n impl<'a> Compiler<'a> {"}, {"sha": "5918fe41e7c8b829dd1108ad28c65e7525011d08", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -27,6 +27,7 @@ struct Output {\n struct Package {\n     id: String,\n     name: String,\n+    version: String,\n     source: Option<String>,\n     manifest_path: String,\n }\n@@ -72,6 +73,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n                 test_step: format!(\"test-crate-{}\", package.name),\n                 bench_step: format!(\"bench-crate-{}\", package.name),\n                 name: package.name,\n+                version: package.version,\n                 deps: Vec::new(),\n                 path: path,\n             });"}, {"sha": "90e1530308f4aaf9b231c37d9de0e8717be01032", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -191,3 +191,96 @@ pub fn test_helpers(build: &Build, target: &str) {\n        .file(build.src.join(\"src/rt/rust_test_helpers.c\"))\n        .compile(\"librust_test_helpers.a\");\n }\n+const OPENSSL_VERS: &'static str = \"1.0.2k\";\n+const OPENSSL_SHA256: &'static str =\n+    \"6b3977c61f2aedf0f96367dcfb5c6e578cf37e7b8d913b4ecb6643c3cb88d8c0\";\n+\n+pub fn openssl(build: &Build, target: &str) {\n+    let out = match build.openssl_dir(target) {\n+        Some(dir) => dir,\n+        None => return,\n+    };\n+\n+    let stamp = out.join(\".stamp\");\n+    let mut contents = String::new();\n+    drop(File::open(&stamp).and_then(|mut f| f.read_to_string(&mut contents)));\n+    if contents == OPENSSL_VERS {\n+        return\n+    }\n+    t!(fs::create_dir_all(&out));\n+\n+    let name = format!(\"openssl-{}.tar.gz\", OPENSSL_VERS);\n+    let tarball = out.join(&name);\n+    if !tarball.exists() {\n+        let tmp = tarball.with_extension(\"tmp\");\n+        build.run(Command::new(\"curl\")\n+                        .arg(\"-o\").arg(&tmp)\n+                        .arg(format!(\"https://www.openssl.org/source/{}\", name)));\n+        let mut shasum = if target.contains(\"apple\") {\n+            let mut cmd = Command::new(\"shasum\");\n+            cmd.arg(\"-a\").arg(\"256\");\n+            cmd\n+        } else {\n+            Command::new(\"sha256sum\")\n+        };\n+        let output = output(&mut shasum.arg(&tmp));\n+        let found = output.split_whitespace().next().unwrap();\n+        if found != OPENSSL_SHA256 {\n+            panic!(\"downloaded openssl sha256 different\\n\\\n+                    expected: {}\\n\\\n+                    found:    {}\\n\", OPENSSL_SHA256, found);\n+        }\n+        t!(fs::rename(&tmp, &tarball));\n+    }\n+    let obj = out.join(format!(\"openssl-{}\", OPENSSL_VERS));\n+    let dst = build.openssl_install_dir(target).unwrap();\n+    drop(fs::remove_dir_all(&obj));\n+    drop(fs::remove_dir_all(&dst));\n+    build.run(Command::new(\"tar\").arg(\"xf\").arg(&tarball).current_dir(&out));\n+\n+    let mut configure = Command::new(obj.join(\"Configure\"));\n+    configure.arg(format!(\"--prefix={}\", dst.display()));\n+    configure.arg(\"no-dso\");\n+    configure.arg(\"no-ssl2\");\n+    configure.arg(\"no-ssl3\");\n+\n+    let os = match target {\n+        \"aarch64-unknown-linux-gnu\" => \"linux-aarch64\",\n+        \"arm-unknown-linux-gnueabi\" => \"linux-armv4\",\n+        \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+        \"armv7-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+        \"i686-apple-darwin\" => \"darwin-i386-cc\",\n+        \"i686-unknown-freebsd\" => \"BSD-x86-elf\",\n+        \"i686-unknown-linux-gnu\" => \"linux-elf\",\n+        \"i686-unknown-linux-musl\" => \"linux-elf\",\n+        \"mips-unknown-linux-gnu\" => \"linux-mips32\",\n+        \"mips64-unknown-linux-gnuabi64\" => \"linux64-mips64\",\n+        \"mips64el-unknown-linux-gnuabi64\" => \"linux64-mips64\",\n+        \"mipsel-unknown-linux-gnu\" => \"linux-mips32\",\n+        \"powerpc-unknown-linux-gnu\" => \"linux-ppc\",\n+        \"powerpc64-unknown-linux-gnu\" => \"linux-ppc64\",\n+        \"powerpc64le-unknown-linux-gnu\" => \"linux-ppc64le\",\n+        \"s390x-unknown-linux-gnu\" => \"linux64-s390x\",\n+        \"x86_64-apple-darwin\" => \"darwin64-x86_64-cc\",\n+        \"x86_64-unknown-freebsd\" => \"BSD-x86_64\",\n+        \"x86_64-unknown-linux-gnu\" => \"linux-x86_64\",\n+        \"x86_64-unknown-linux-musl\" => \"linux-x86_64\",\n+        \"x86_64-unknown-netbsd\" => \"BSD-x86_64\",\n+        _ => panic!(\"don't know how to configure OpenSSL for {}\", target),\n+    };\n+    configure.arg(os);\n+    configure.env(\"CC\", build.cc(target));\n+    for flag in build.cflags(target) {\n+        configure.arg(flag);\n+    }\n+    configure.current_dir(&obj);\n+    println!(\"Configuring openssl for {}\", target);\n+    build.run_quiet(&mut configure);\n+    println!(\"Building openssl for {}\", target);\n+    build.run_quiet(Command::new(\"make\").current_dir(&obj));\n+    println!(\"Installing openssl for {}\", target);\n+    build.run_quiet(Command::new(\"make\").arg(\"install\").current_dir(&obj));\n+\n+    let mut f = t!(File::create(&stamp));\n+    t!(f.write_all(OPENSSL_VERS.as_bytes()));\n+}"}, {"sha": "6f8975309d112844571f7a1dd5c95fab2e35bfd6", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -278,9 +278,19 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         rules.build(&krate.build_step, path)\n              .dep(|s| s.name(\"libtest-link\"))\n              .dep(move |s| s.name(\"llvm\").host(&build.config.build).stage(0))\n+             .dep(|s| s.name(\"may-run-build-script\"))\n              .run(move |s| compile::rustc(build, s.target, &s.compiler()));\n     }\n \n+    // Crates which have build scripts need to rely on this rule to ensure that\n+    // the necessary prerequisites for a build script are linked and located in\n+    // place.\n+    rules.build(\"may-run-build-script\", \"path/to/nowhere\")\n+         .dep(move |s| {\n+             s.name(\"libstd-link\")\n+              .host(&build.config.build)\n+              .target(&build.config.build)\n+         });\n     rules.build(\"startup-objects\", \"src/rtstartup\")\n          .dep(|s| s.name(\"create-sysroot\").target(s.host))\n          .run(move |s| compile::build_startup_objects(build, &s.compiler(), s.target));\n@@ -478,9 +488,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"dist-src\"))\n          .run(move |_| check::distcheck(build));\n \n-\n     rules.build(\"test-helpers\", \"src/rt/rust_test_helpers.c\")\n          .run(move |s| native::test_helpers(build, s.target));\n+    rules.build(\"openssl\", \"path/to/nowhere\")\n+         .run(move |s| native::openssl(build, s.target));\n \n     // Some test suites are run inside emulators, and most of our test binaries\n     // are linked dynamically which means we need to ship the standard library\n@@ -547,6 +558,17 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"tool-qemu-test-client\", \"src/tools/qemu-test-client\")\n          .dep(|s| s.name(\"libstd\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-client\"));\n+    rules.build(\"tool-cargo\", \"src/tools/cargo\")\n+         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n+         .dep(move |s| {\n+             // Cargo depends on procedural macros, which requires a full host\n+             // compiler to be available, so we need to depend on that.\n+             s.name(\"librustc-link\")\n+              .target(&build.config.build)\n+              .host(&build.config.build)\n+         })\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n \n     // ========================================================================\n     // Documentation targets\n@@ -673,6 +695,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.dist(\"dist-cargo\", \"cargo\")\n          .host(true)\n          .only_host_build(true)\n+         .dep(|s| s.name(\"tool-cargo\"))\n          .run(move |s| dist::cargo(build, s.stage, s.target));\n     rules.dist(\"dist-extended\", \"extended\")\n          .default(build.config.extended)\n@@ -1180,6 +1203,7 @@ mod tests {\n             build_step: \"build-crate-std\".to_string(),\n             test_step: \"test-std\".to_string(),\n             bench_step: \"bench-std\".to_string(),\n+            version: String::new(),\n         });\n         build.crates.insert(\"test\".to_string(), ::Crate {\n             name: \"test\".to_string(),\n@@ -1189,10 +1213,12 @@ mod tests {\n             build_step: \"build-crate-test\".to_string(),\n             test_step: \"test-test\".to_string(),\n             bench_step: \"bench-test\".to_string(),\n+            version: String::new(),\n         });\n         build.crates.insert(\"rustc-main\".to_string(), ::Crate {\n             name: \"rustc-main\".to_string(),\n             deps: Vec::new(),\n+            version: String::new(),\n             path: cwd.join(\"src/rustc-main\"),\n             doc_step: \"doc-rustc-main\".to_string(),\n             build_step: \"build-crate-rustc-main\".to_string(),\n@@ -1378,7 +1404,7 @@ mod tests {\n         let all = rules.expand(&plan);\n         println!(\"all rules: {:#?}\", all);\n         assert!(!all.contains(&step.name(\"rustc\")));\n-        assert!(!all.contains(&step.name(\"build-crate-std\").stage(1)));\n+        assert!(!all.contains(&step.name(\"build-crate-test\").stage(1)));\n \n         // all stage0 compiles should be for the build target, A\n         for step in all.iter().filter(|s| s.stage == 0) {"}, {"sha": "08f1f31c2d74bfba6bcd32035c116c7afcb942e4", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -53,6 +53,24 @@ pub fn run_silent(cmd: &mut Command) {\n     }\n }\n \n+pub fn run_suppressed(cmd: &mut Command) {\n+    let output = match cmd.output() {\n+        Ok(status) => status,\n+        Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n+                                cmd, e)),\n+    };\n+    if !output.status.success() {\n+        fail(&format!(\"command did not execute successfully: {:?}\\n\\\n+                       expected success, got: {}\\n\\n\\\n+                       stdout ----\\n{}\\n\\\n+                       stderr ----\\n{}\\n\",\n+                      cmd,\n+                      output.status,\n+                      String::from_utf8_lossy(&output.stdout),\n+                      String::from_utf8_lossy(&output.stderr)));\n+    }\n+}\n+\n pub fn gnu_target(target: &str) -> String {\n     match target {\n         \"i686-pc-windows-msvc\" => \"i686-pc-win32\".to_string(),"}, {"sha": "4c4836d7ca2301f9ded0d7766af01ee05056dd72", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -27,6 +27,7 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-quiet-tests\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-openssl-static\"\n \n if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\""}, {"sha": "ceefcc9e0ec46b80c0c07ea491f967ee96c15104", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -131,7 +131,8 @@ macro_rules! t {\n }\n \n struct Builder {\n-    channel: String,\n+    rust_release: String,\n+    cargo_release: String,\n     input: PathBuf,\n     output: PathBuf,\n     gpg_passphrase: String,\n@@ -147,13 +148,15 @@ fn main() {\n     let input = PathBuf::from(args.next().unwrap());\n     let output = PathBuf::from(args.next().unwrap());\n     let date = args.next().unwrap();\n-    let channel = args.next().unwrap();\n+    let rust_release = args.next().unwrap();\n+    let cargo_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));\n \n     Builder {\n-        channel: channel,\n+        rust_release: rust_release,\n+        cargo_release: cargo_release,\n         input: input,\n         output: output,\n         gpg_passphrase: passphrase,\n@@ -184,10 +187,10 @@ impl Builder {\n         manifest.insert(\"pkg\".to_string(), toml::encode(&pkg));\n         let manifest = toml::Value::Table(manifest).to_string();\n \n-        let filename = format!(\"channel-rust-{}.toml\", self.channel);\n+        let filename = format!(\"channel-rust-{}.toml\", self.rust_release);\n         self.write_manifest(&manifest, &filename);\n \n-        if self.channel != \"beta\" && self.channel != \"nightly\" {\n+        if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n             self.write_manifest(&manifest, \"channel-rust-stable.toml\");\n         }\n     }\n@@ -336,11 +339,11 @@ impl Builder {\n \n     fn filename(&self, component: &str, target: &str) -> String {\n         if component == \"rust-src\" {\n-            format!(\"rust-src-{}.tar.gz\", self.channel)\n+            format!(\"rust-src-{}.tar.gz\", self.rust_release)\n         } else if component == \"cargo\" {\n-            format!(\"cargo-nightly-{}.tar.gz\", target)\n+            format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target)\n         } else {\n-            format!(\"{}-{}-{}.tar.gz\", component, self.channel, target)\n+            format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n         }\n     }\n "}, {"sha": "d17b61aa5a2ca790f268a043bffdb0ffb04f0ec7", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -1 +1 @@\n-Subproject commit 6ed5a43bb566e0ee3fe7981de5aa5a36e2905ebd\n+Subproject commit d17b61aa5a2ca790f268a043bffdb0ffb04f0ec7"}, {"sha": "053f0bbe3b81d321a86f23b320c9937a54a4b2ec", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -20,7 +20,7 @@ use std::fs::File;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    if path.ends_with(\"vendor\") {\n+    if !super::filter_dirs(path) {\n         return\n     }\n     for entry in t!(path.read_dir(), path).map(|e| t!(e)) {"}, {"sha": "3bf396db4d39da9fe845523b35bdf7993218749d", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -16,6 +16,7 @@ use std::path::Path;\n \n static LICENSES: &'static [&'static str] = &[\n     \"MIT/Apache-2.0\",\n+    \"MIT / Apache-2.0\",\n     \"Apache-2.0/MIT\",\n     \"MIT OR Apache-2.0\",\n     \"MIT\",\n@@ -25,6 +26,7 @@ static LICENSES: &'static [&'static str] = &[\n /// These MPL licensed projects are acceptable, but only these.\n static EXCEPTIONS: &'static [&'static str] = &[\n     \"mdbook\",\n+    \"openssl\",\n     \"pest\",\n     \"thread-id\",\n ];"}, {"sha": "2af891b5b8562e79bc39483aaa65e12dcc425bdb", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a01b8a54b078d15620d1133b94ee21ee7a6915/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=44a01b8a54b078d15620d1133b94ee21ee7a6915", "patch": "@@ -70,6 +70,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/rustllvm\",\n         \"src/rust-installer\",\n         \"src/liblibc\",\n+        \"src/tools/cargo\",\n         \"src/vendor\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))"}]}