{"sha": "9adf2b2225af5f4766709b93da463bfb951ca955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZGYyYjIyMjVhZjVmNDc2NjcwOWI5M2RhNDYzYmZiOTUxY2E5NTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-22T02:18:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-22T23:46:49Z"}, "message": "Add `--explain` for extended error explanations", "tree": {"sha": "602ee426ece1fbbe99026d25c00e61df5a754d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602ee426ece1fbbe99026d25c00e61df5a754d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9adf2b2225af5f4766709b93da463bfb951ca955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9adf2b2225af5f4766709b93da463bfb951ca955", "html_url": "https://github.com/rust-lang/rust/commit/9adf2b2225af5f4766709b93da463bfb951ca955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9adf2b2225af5f4766709b93da463bfb951ca955/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae920dcc98c9b18b38aac03367f7f1cd6dce7d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae920dcc98c9b18b38aac03367f7f1cd6dce7d2d", "html_url": "https://github.com/rust-lang/rust/commit/ae920dcc98c9b18b38aac03367f7f1cd6dce7d2d"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "b5e19d6aad8b413914c338a87798d9ab2bf4e6bc", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9adf2b2225af5f4766709b93da463bfb951ca955/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adf2b2225af5f4766709b93da463bfb951ca955/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9adf2b2225af5f4766709b93da463bfb951ca955", "patch": "@@ -1122,6 +1122,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"treat all errors that occur as bugs\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n           \"show macro backtraces even for non-local macros\"),\n+    explain: bool = (false, parse_bool, [TRACKED],\n+          \"show extended diagnostic help\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n           \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],"}, {"sha": "67b1a04d54f8b945ca94d474ba37956671f8cb82", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9adf2b2225af5f4766709b93da463bfb951ca955/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adf2b2225af5f4766709b93da463bfb951ca955/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9adf2b2225af5f4766709b93da463bfb951ca955", "patch": "@@ -2591,9 +2591,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // arguments which we skipped above.\n         if variadic {\n             fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n-                type_error_struct!(s, span, t, E0617,\n-                                   \"can't pass `{}` to variadic function, cast to `{}`\",\n-                                   t, cast_ty).emit();\n+                let mut err = type_error_struct!(\n+                    s, span, t, E0617, \"can't pass `{}` to variadic function\", t);\n+                if s.opts.debugging_opts.explain {\n+                    err.note(&format!(\"certain types, like `{}`, must be cast before passing them \\\n+                                       to a variadic function, because of arcane ABI rules \\\n+                                       dictated by the C standard\",\n+                                      t));\n+                }\n+                if let Ok(snippet) = s.codemap().span_to_snippet(span) {\n+                    err.span_suggestion(span,\n+                                        &format!(\"cast the value to `{}`\", cast_ty),\n+                                        format!(\"{} as {}\", snippet, cast_ty));\n+                } else {\n+                    err.help(&format!(\"cast the value to `{}`\", cast_ty));\n+                }\n+                err.emit();\n             }\n \n             for arg in args.iter().skip(expected_arg_count) {"}]}