{"sha": "b2603d63861722e9b10a2275f5b8a1d071498279", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjAzZDYzODYxNzIyZTliMTBhMjI3NWY1YjhhMWQwNzE0OTgyNzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T06:17:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T06:17:42Z"}, "message": "Rollup merge of #63272 - Mark-Simulacrum:clean-attr, r=petrochenkov\n\nSome more libsyntax::attr cleanup\n\nMuch smaller patch than the last one, mostly just finishing up by removing some Span arguments.\n\nr? @petrochenkov", "tree": {"sha": "80a77565b2a5daa7c79519a15a388a3633a2b051", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a77565b2a5daa7c79519a15a388a3633a2b051"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2603d63861722e9b10a2275f5b8a1d071498279", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSRuHCRBK7hj4Ov3rIwAAdHIIAGgzR/kb3E2mRSJE5R6nOIQt\nxTve2jDetmheMT/ewp2GmW2HquDKQ0GVjmCBzQegvhPe5/KVKtSvX98s2Zuu8c+g\nx5OxwpBP/3nE2HiIDF07/aSzRZVpOCF1DN1FWehIUxfS5XC8MXOw53fX0K4LKf1x\nHBhxR1gMz6soDtDVKNF+i/Qji8/wFcS6apYsAObpazG/Z56HYPwJZiC/VqJQLpze\nNnEU8kuTq8NjvmPcESkC5rpr6WrttfZaFPm6r8izeqSaCddu9/R7+bYXZoSrvOv3\nneKqMyqhrOV0KxDYVUp3zPSxTEVvRrdOWi/HF61awkbho53rTjQ9EUXH2URWEg0=\n=QfSM\n-----END PGP SIGNATURE-----\n", "payload": "tree 80a77565b2a5daa7c79519a15a388a3633a2b051\nparent 61da2f4d19016625c9bdf2b45fc41f65e91c6736\nparent 88491497456e485b0171d6791bd81f52170fbc09\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565072262 +0200\ncommitter GitHub <noreply@github.com> 1565072262 +0200\n\nRollup merge of #63272 - Mark-Simulacrum:clean-attr, r=petrochenkov\n\nSome more libsyntax::attr cleanup\n\nMuch smaller patch than the last one, mostly just finishing up by removing some Span arguments.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2603d63861722e9b10a2275f5b8a1d071498279", "html_url": "https://github.com/rust-lang/rust/commit/b2603d63861722e9b10a2275f5b8a1d071498279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2603d63861722e9b10a2275f5b8a1d071498279/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61da2f4d19016625c9bdf2b45fc41f65e91c6736", "url": "https://api.github.com/repos/rust-lang/rust/commits/61da2f4d19016625c9bdf2b45fc41f65e91c6736", "html_url": "https://github.com/rust-lang/rust/commit/61da2f4d19016625c9bdf2b45fc41f65e91c6736"}, {"sha": "88491497456e485b0171d6791bd81f52170fbc09", "url": "https://api.github.com/repos/rust-lang/rust/commits/88491497456e485b0171d6791bd81f52170fbc09", "html_url": "https://github.com/rust-lang/rust/commit/88491497456e485b0171d6791bd81f52170fbc09"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "493083c680aad0f4585cde7b9a3fcaa89c50cbb2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -5176,11 +5176,10 @@ impl<'a> LoweringContext<'a> {\n                 let attr = {\n                     // `allow(unreachable_code)`\n                     let allow = {\n-                        let allow_ident = Ident::with_empty_ctxt(sym::allow).with_span_pos(e.span);\n-                        let uc_ident = Ident::with_empty_ctxt(sym::unreachable_code)\n-                            .with_span_pos(e.span);\n+                        let allow_ident = Ident::new(sym::allow, e.span);\n+                        let uc_ident = Ident::new(sym::unreachable_code, e.span);\n                         let uc_nested = attr::mk_nested_word_item(uc_ident);\n-                        attr::mk_list_item(e.span, allow_ident, vec![uc_nested])\n+                        attr::mk_list_item(allow_ident, vec![uc_nested])\n                     };\n                     attr::mk_attr_outer(allow)\n                 };"}, {"sha": "405144b444f09225b5eb5a09772b0b8a893aa20e", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -211,7 +211,6 @@ fn test_parse_ok() {\n fn test_parse_err() {\n     with_default_globals(|| {\n         let mi = attr::mk_name_value_item(\n-            DUMMY_SP,\n             Ident::from_str(\"foo\"),\n             LitKind::Bool(false),\n             DUMMY_SP,"}, {"sha": "a9d3227b3a8f40d5732445de148e5622a0894345", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -347,16 +347,17 @@ impl Attribute {\n \n pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem {\n     let lit_kind = LitKind::Str(value.node, ast::StrStyle::Cooked);\n-    mk_name_value_item(ident.span.to(value.span), ident, lit_kind, value.span)\n+    mk_name_value_item(ident, lit_kind, value.span)\n }\n \n-pub fn mk_name_value_item(span: Span, ident: Ident, lit_kind: LitKind, lit_span: Span) -> MetaItem {\n+pub fn mk_name_value_item(ident: Ident, lit_kind: LitKind, lit_span: Span) -> MetaItem {\n     let lit = Lit::from_lit_kind(lit_kind, lit_span);\n+    let span = ident.span.to(lit_span);\n     MetaItem { path: Path::from_ident(ident), span, node: MetaItemKind::NameValue(lit) }\n }\n \n-pub fn mk_list_item(span: Span, ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {\n-    MetaItem { path: Path::from_ident(ident), span, node: MetaItemKind::List(items) }\n+pub fn mk_list_item(ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {\n+    MetaItem { path: Path::from_ident(ident), span: ident.span, node: MetaItemKind::List(items) }\n }\n \n pub fn mk_word_item(ident: Ident) -> MetaItem {\n@@ -367,7 +368,7 @@ pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n     NestedMetaItem::MetaItem(mk_word_item(ident))\n }\n \n-pub fn mk_attr_id() -> AttrId {\n+crate fn mk_attr_id() -> AttrId {\n     use std::sync::atomic::AtomicUsize;\n     use std::sync::atomic::Ordering;\n "}, {"sha": "db562840e8d3bae41f2d847803ec431ba7ecbd2e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -879,13 +879,12 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn meta_list(&self, sp: Span, name: ast::Name, mis: Vec<ast::NestedMetaItem>)\n                  -> ast::MetaItem {\n-        attr::mk_list_item(sp, Ident::new(name, sp), mis)\n+        attr::mk_list_item(Ident::new(name, sp), mis)\n     }\n \n     pub fn meta_name_value(&self, span: Span, name: ast::Name, lit_kind: ast::LitKind)\n                        -> ast::MetaItem {\n-        attr::mk_name_value_item(span, Ident::new(name, span),\n-                                 lit_kind, span)\n+        attr::mk_name_value_item(Ident::new(name, span), lit_kind, span)\n     }\n \n     pub fn item_use(&self, sp: Span,"}, {"sha": "964c81dd4664103743ca0cfd505acc6c3105acfa", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -1272,7 +1272,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                             ];\n \n                             let include_ident = Ident::with_empty_ctxt(sym::include);\n-                            let item = attr::mk_list_item(DUMMY_SP, include_ident, include_info);\n+                            let item = attr::mk_list_item(include_ident, include_info);\n                             items.push(ast::NestedMetaItem::MetaItem(item));\n                         }\n                         Err(e) => {\n@@ -1333,7 +1333,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 }\n             }\n \n-            let meta = attr::mk_list_item(DUMMY_SP, Ident::with_empty_ctxt(sym::doc), items);\n+            let meta = attr::mk_list_item(Ident::with_empty_ctxt(sym::doc), items);\n             *at = attr::Attribute {\n                 span: at.span,\n                 id: at.id,"}, {"sha": "bda761244d5ca09d4cac7ed844852a4f8162eaff", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -15,7 +15,7 @@ use crate::tokenstream::{self, TokenStream, TokenTree};\n \n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{self, BytePos};\n-use syntax_pos::{DUMMY_SP, FileName, Span};\n+use syntax_pos::{FileName, Span};\n \n use std::borrow::Cow;\n \n@@ -124,8 +124,7 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n \n         // #![feature(prelude_import)]\n         let pi_nested = attr::mk_nested_word_item(ast::Ident::with_empty_ctxt(sym::prelude_import));\n-        let list = attr::mk_list_item(\n-            DUMMY_SP, ast::Ident::with_empty_ctxt(sym::feature), vec![pi_nested]);\n+        let list = attr::mk_list_item(ast::Ident::with_empty_ctxt(sym::feature), vec![pi_nested]);\n         let fake_attr = attr::mk_attr_inner(list);\n         s.print_attribute(&fake_attr);\n "}, {"sha": "eec8a3f802343f9a286a5ae65148218e86603f1b", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2603d63861722e9b10a2275f5b8a1d071498279/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=b2603d63861722e9b10a2275f5b8a1d071498279", "patch": "@@ -157,8 +157,7 @@ impl MutVisitor for EntryPointCleaner {\n                 item.map(|ast::Item {id, ident, attrs, node, vis, span, tokens}| {\n                     let allow_ident = Ident::with_empty_ctxt(sym::allow);\n                     let dc_nested = attr::mk_nested_word_item(Ident::from_str(\"dead_code\"));\n-                    let allow_dead_code_item = attr::mk_list_item(DUMMY_SP, allow_ident,\n-                                                                  vec![dc_nested]);\n+                    let allow_dead_code_item = attr::mk_list_item(allow_ident, vec![dc_nested]);\n                     let allow_dead_code = attr::mk_attr_outer(allow_dead_code_item);\n \n                     ast::Item {"}]}