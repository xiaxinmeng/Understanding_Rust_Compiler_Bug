{"sha": "f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920", "node_id": "C_kwDOAAsO6NoAKGYwMTVlNmZlNDk5ZjBkNmRjMmMzZWE3NDIyYWM4ZWZkMWRkYjM5MjA", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2023-03-22T12:12:51Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2023-03-30T12:49:42Z"}, "message": "core: optimize `LazyCell` size", "tree": {"sha": "cc0140347be56d381a00ad5ce4215db1012c867a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0140347be56d381a00ad5ce4215db1012c867a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmQlhWcACgkQcE4BSbAZ\nSzwy2Q//VX6XyiXnLP5JHnzfALW4stvNUuPax5iNa/jn9sh7TpAj26vxAhbfMnu3\nBC7vNJFkgkNZrwkvNzLD6RSaodaeA5gRlizrSC8kg1xIouzzTQ9GbkhyTfaCk4gz\nK0JWbO2wriOxca6MeoI3+VKlilvF40+YtkQdi0Krb04mQ+/JS0h79DBsQO+NbqDs\nw9VRtvRRzW85flojGPuQtZWLa9smAlJbHCDTvCzOQ9a1yAI5YM54MmtlWa6zzmxN\n7BS4Ds6IJzURQ11NK1KD7d5Jdkn0E6zSZqgsHosSQeCyCa3DZCPPBo+PShrTA24W\nYtS8wYn4NHi/FNotuQMrHEdpWq6SBjj/iOlVouJJq2rEXoS3jiEQHjqm3fa8jphn\nieg6CbPaVr4ifhpb0f+k/aGHN9x5fNReLCmj8VWmapwpFlUEw9WxjJSF9EB8enmA\nqbDUAOBetKMKA49yJqN6lpQrnwY7LBlIQVbNNoL+u7y1ur/d4uc2NaLW1YX1km/l\n+2GVPTc3O6972Tj+piSS6govT2KV3chrGaeiI6eMO58VxRZyyEpRBB+a5dB5p7xh\numYT5bnEpaX8iqqxNQkgrWGR0r5oFpmtUFjdzdAvdimEAKOWtyhxD2elZ0Rf4mfp\nsMD6hRuf+xwBjG0Q7iwPcaHGlj0lj++WFUKPxurLIxrHouHc3lY=\n=u1a1\n-----END PGP SIGNATURE-----", "payload": "tree cc0140347be56d381a00ad5ce4215db1012c867a\nparent 8a7ca936e61d04399198911ee2b07ac110bf17b0\nauthor joboet <jonasboettiger@icloud.com> 1679487171 +0100\ncommitter joboet <jonasboettiger@icloud.com> 1680180582 +0200\n\ncore: optimize `LazyCell` size\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920", "html_url": "https://github.com/rust-lang/rust/commit/f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7ca936e61d04399198911ee2b07ac110bf17b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7ca936e61d04399198911ee2b07ac110bf17b0", "html_url": "https://github.com/rust-lang/rust/commit/8a7ca936e61d04399198911ee2b07ac110bf17b0"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "13a4c297e8afe8fd4d2b293671e3eaa82486b0ce", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=f015e6fe499f0d6dc2c3ea7422ac8efd1ddb3920", "patch": "@@ -1,6 +1,13 @@\n-use crate::cell::{Cell, OnceCell};\n-use crate::fmt;\n use crate::ops::Deref;\n+use crate::{fmt, mem};\n+\n+use super::UnsafeCell;\n+\n+enum State<T, F> {\n+    Uninit(F),\n+    Init(T),\n+    Poisoned,\n+}\n \n /// A value which is initialized on the first access.\n ///\n@@ -31,8 +38,7 @@ use crate::ops::Deref;\n /// ```\n #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub struct LazyCell<T, F = fn() -> T> {\n-    cell: OnceCell<T>,\n-    init: Cell<Option<F>>,\n+    state: UnsafeCell<State<T, F>>,\n }\n \n impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n@@ -53,8 +59,8 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n-    pub const fn new(init: F) -> LazyCell<T, F> {\n-        LazyCell { cell: OnceCell::new(), init: Cell::new(Some(init)) }\n+    pub const fn new(f: F) -> LazyCell<T, F> {\n+        LazyCell { state: UnsafeCell::new(State::Uninit(f)) }\n     }\n \n     /// Forces the evaluation of this lazy value and returns a reference to\n@@ -77,10 +83,47 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     #[inline]\n     #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n     pub fn force(this: &LazyCell<T, F>) -> &T {\n-        this.cell.get_or_init(|| match this.init.take() {\n-            Some(f) => f(),\n-            None => panic!(\"`Lazy` instance has previously been poisoned\"),\n-        })\n+        let state = unsafe { &*this.state.get() };\n+        match state {\n+            State::Init(data) => data,\n+            State::Uninit(_) => unsafe { LazyCell::really_init(this) },\n+            State::Poisoned => panic!(\"LazyCell has previously been poisoned\"),\n+        }\n+    }\n+\n+    /// # Safety\n+    /// May only be called when the state is `Uninit`.\n+    #[cold]\n+    unsafe fn really_init(this: &LazyCell<T, F>) -> &T {\n+        let state = unsafe { &mut *this.state.get() };\n+        // Temporarily mark the state as poisoned. This prevents reentrant\n+        // accesses and correctly poisons the cell if the closure panicked.\n+        let State::Uninit(f) = mem::replace(state, State::Poisoned) else { unreachable!() };\n+\n+        let data = f();\n+\n+        // If the closure accessed the cell, the mutable borrow will be\n+        // invalidated, so create a new one here.\n+        let state = unsafe { &mut *this.state.get() };\n+        *state = State::Init(data);\n+\n+        // A reference obtained by downcasting from the mutable borrow\n+        // would become stale if other references are created in `force`.\n+        // Borrow the state directly instead.\n+        let state = unsafe { &*this.state.get() };\n+        let State::Init(data) = state else { unreachable!() };\n+        data\n+    }\n+}\n+\n+impl<T, F> LazyCell<T, F> {\n+    #[inline]\n+    fn get(&self) -> Option<&T> {\n+        let state = unsafe { &*self.state.get() };\n+        match state {\n+            State::Init(data) => Some(data),\n+            _ => None,\n+        }\n     }\n }\n \n@@ -105,6 +148,11 @@ impl<T: Default> Default for LazyCell<T> {\n #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n impl<T: fmt::Debug, F> fmt::Debug for LazyCell<T, F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"Lazy\").field(\"cell\", &self.cell).field(\"init\", &\"..\").finish()\n+        let mut d = f.debug_tuple(\"LazyCell\");\n+        match self.get() {\n+            Some(data) => d.field(data),\n+            None => d.field(&format_args!(\"<uninit>\")),\n+        };\n+        d.finish()\n     }\n }"}]}