{"sha": "46ab14437e88aa9dd777596db378a8f30e062cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YWIxNDQzN2U4OGFhOWRkNzc3NTk2ZGIzNzhhOGYzMGUwNjJjZGE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-27T22:52:02Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-06T02:45:11Z"}, "message": "Don't flatten a block containing a single macro call\n\nWe no longer flatten a block that looks like this:\n\n```rust\nmatch val {\n    pat => { macro_call!() }\n}\n```\n\nCurrently, rust ignores trailing semicolons in macro expansion in\nexpression position (see https://github.com/rust-lang/rust/issues/33953)\n\nIf this is changed, flattening a block with a macro call may break the\nuser's code - the trailing semicolon will no longer parse if the macro\ncall occurs immediately on the right-hand side of the match arm\n(e.g. `pat => macro_call!()`)", "tree": {"sha": "fb20f2d4830a54bcbc639defe1011a4dd93ab207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb20f2d4830a54bcbc639defe1011a4dd93ab207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ab14437e88aa9dd777596db378a8f30e062cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ab14437e88aa9dd777596db378a8f30e062cda", "html_url": "https://github.com/rust-lang/rust/commit/46ab14437e88aa9dd777596db378a8f30e062cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ab14437e88aa9dd777596db378a8f30e062cda/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea97ec5a4e822a55568ad6216f6aba56c03c464e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea97ec5a4e822a55568ad6216f6aba56c03c464e", "html_url": "https://github.com/rust-lang/rust/commit/ea97ec5a4e822a55568ad6216f6aba56c03c464e"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "3f02357a400177cf2fda803f1312bab9d5341101", "filename": "src/matches.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46ab14437e88aa9dd777596db378a8f30e062cda/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ab14437e88aa9dd777596db378a8f30e062cda/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=46ab14437e88aa9dd777596db378a8f30e062cda", "patch": "@@ -284,6 +284,15 @@ fn rewrite_match_arm(\n     )\n }\n \n+fn stmt_is_expr_mac(stmt: &ast::Stmt) -> bool {\n+    if let ast::StmtKind::Expr(expr) = &stmt.kind {\n+        if let ast::ExprKind::MacCall(_) = &expr.kind {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n fn block_can_be_flattened<'a>(\n     context: &RewriteContext<'_>,\n     expr: &'a ast::Expr,\n@@ -292,7 +301,10 @@ fn block_can_be_flattened<'a>(\n         ast::ExprKind::Block(ref block, _)\n             if !is_unsafe_block(block)\n                 && !context.inside_macro()\n-                && is_simple_block(context, block, Some(&expr.attrs)) =>\n+                && is_simple_block(context, block, Some(&expr.attrs))\n+                // Don't flatten a block containing a macro invocation,\n+                // since it may expand to a statement\n+                && !stmt_is_expr_mac(&block.stmts[0]) =>\n         {\n             Some(&*block)\n         }"}, {"sha": "7a9834168c750b7e382f7ffb406dd892d47ec699", "filename": "tests/target/configs/match_arm_blocks/false.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fconfigs%2Fmatch_arm_blocks%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fconfigs%2Fmatch_arm_blocks%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fmatch_arm_blocks%2Ffalse.rs?ref=46ab14437e88aa9dd777596db378a8f30e062cda", "patch": "@@ -5,6 +5,8 @@ fn main() {\n     match lorem {\n         true =>\n             foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n-        false => println!(\"{}\", sit),\n+        false => {\n+            println!(\"{}\", sit)\n+        }\n     }\n }"}, {"sha": "eb9e34059c7e923197d8a2cbd88f6a122d3bb71b", "filename": "tests/target/configs/match_arm_blocks/true.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fconfigs%2Fmatch_arm_blocks%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fconfigs%2Fmatch_arm_blocks%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fmatch_arm_blocks%2Ftrue.rs?ref=46ab14437e88aa9dd777596db378a8f30e062cda", "patch": "@@ -6,6 +6,8 @@ fn main() {\n         true => {\n             foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n         }\n-        false => println!(\"{}\", sit),\n+        false => {\n+            println!(\"{}\", sit)\n+        }\n     }\n }"}, {"sha": "1d6eb6d6052744398e8b3e0e47fd874650daddba", "filename": "tests/target/issue-2936.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2936.rs?ref=46ab14437e88aa9dd777596db378a8f30e062cda", "patch": "@@ -11,7 +11,9 @@ impl Something for AStruct {\n                 let err: &CStr = match err.kind {\n                     ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(\n                         ..,\n-                    )) => cstr!(\"PEMQExpectedFeatureName\"),\n+                    )) => {\n+                        cstr!(\"PEMQExpectedFeatureName\")\n+                    }\n                 };\n             }\n         };"}, {"sha": "123c4c55f6a905dbe6c023a3143e32b20c564bcb", "filename": "tests/target/match.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ab14437e88aa9dd777596db378a8f30e062cda/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=46ab14437e88aa9dd777596db378a8f30e062cda", "patch": "@@ -166,9 +166,15 @@ fn issue355() {\n         a => println!(\"a\", b),\n         b => vec![1, 2],\n         c => vec![3; 4],\n-        d => println!(\"a\", b),\n-        e => vec![1, 2],\n-        f => vec![3; 4],\n+        d => {\n+            println!(\"a\", b)\n+        }\n+        e => {\n+            vec![1, 2]\n+        }\n+        f => {\n+            vec![3; 4]\n+        }\n         h => println!(\"a\", b), // h comment\n         i => vec![1, 2],       // i comment\n         j => vec![3; 4],       // j comment"}]}