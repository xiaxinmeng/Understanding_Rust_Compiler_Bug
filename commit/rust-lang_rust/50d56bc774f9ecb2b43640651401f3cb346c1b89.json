{"sha": "50d56bc774f9ecb2b43640651401f3cb346c1b89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDU2YmM3NzRmOWVjYjJiNDM2NDA2NTE0MDFmM2NiMzQ2YzFiODk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T10:08:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T10:08:26Z"}, "message": "Rollup merge of #76825 - lcnr:array-windows-apply, r=varkor\n\nuse `array_windows` instead of `windows` in the compiler\n\nI do think these changes are beautiful, but do have to admit that using type inference for the window length\ncan easily be confusing. This seems like a general issue with const generics, where inferring constants adds an additional\ncomplexity which users have to learn and keep in mind.", "tree": {"sha": "eb0a2096eb5f22ed3c126d0ec3ed6fbac5970398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb0a2096eb5f22ed3c126d0ec3ed6fbac5970398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d56bc774f9ecb2b43640651401f3cb346c1b89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZyoaCRBK7hj4Ov3rIwAAdHIIABb205vkHiF7+niiUSBlMYOQ\n9QarUiME0ypYN9ZhakQuWilijyzMLddSrTw4hSMmxwkkB4+NFM2mh+B3jFRNfA+B\ngahhH5CONEuhNmw2l5MCxgZVFahPhO0O++JKmiLs1TZv3ov4kt2skb8NWocm/xmg\n1YqenzHNApJP5pLAkl6qOtZ3CLVKa8olZwQj5qD6fBN0199UgZAwb/Q9d4wsqAYu\n0La86eWH5PK6uQtUlWmnezr7IPLQDszzdn/WHNvB06/Db66juGG0+CRbS1d52mK6\n/7mwBAJjJ7fWpQRBaE3gWpDeM8jb8yP/HQcUpXxHJADHopCYu1Um5ZTCjutyWQE=\n=VEq1\n-----END PGP SIGNATURE-----\n", "payload": "tree eb0a2096eb5f22ed3c126d0ec3ed6fbac5970398\nparent df4e4ef2b9c6674cc93444b925ca8c3d0c17ab90\nparent bfb221b21e13e8fd71a8fc3a2df23e7f0e775df3\nauthor Ralf Jung <post@ralfj.de> 1600596506 +0200\ncommitter GitHub <noreply@github.com> 1600596506 +0200\n\nRollup merge of #76825 - lcnr:array-windows-apply, r=varkor\n\nuse `array_windows` instead of `windows` in the compiler\n\nI do think these changes are beautiful, but do have to admit that using type inference for the window length\ncan easily be confusing. This seems like a general issue with const generics, where inferring constants adds an additional\ncomplexity which users have to learn and keep in mind.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d56bc774f9ecb2b43640651401f3cb346c1b89", "html_url": "https://github.com/rust-lang/rust/commit/50d56bc774f9ecb2b43640651401f3cb346c1b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d56bc774f9ecb2b43640651401f3cb346c1b89/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4e4ef2b9c6674cc93444b925ca8c3d0c17ab90", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4e4ef2b9c6674cc93444b925ca8c3d0c17ab90", "html_url": "https://github.com/rust-lang/rust/commit/df4e4ef2b9c6674cc93444b925ca8c3d0c17ab90"}, {"sha": "bfb221b21e13e8fd71a8fc3a2df23e7f0e775df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb221b21e13e8fd71a8fc3a2df23e7f0e775df3", "html_url": "https://github.com/rust-lang/rust/commit/bfb221b21e13e8fd71a8fc3a2df23e7f0e775df3"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "8dafcdf3bc6b7cc956d4762f577d68a49600096d", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -8,6 +8,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![allow(incomplete_features)]\n+#![feature(array_windows)]\n #![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(unboxed_closures)]"}, {"sha": "4807380595db7267446061203cf4f7c26dbaee6e", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -34,7 +34,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n     /// and that there are no duplicates.\n     #[inline]\n     pub fn from_presorted_elements(elements: Vec<(K, V)>) -> SortedMap<K, V> {\n-        debug_assert!(elements.windows(2).all(|w| w[0].0 < w[1].0));\n+        debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));\n \n         SortedMap { data: elements }\n     }\n@@ -159,7 +159,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n             return;\n         }\n \n-        debug_assert!(elements.windows(2).all(|w| w[0].0 < w[1].0));\n+        debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));\n \n         let start_index = self.lookup_index_for(&elements[0].0);\n "}, {"sha": "b48592c103ca2d71deb6e5baba9c6cfae43b0246", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -27,6 +27,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(test, feature(test))]\n+#![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "b3125f55d4d6e4b4d054cc627236d0b61557023e", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -70,9 +70,9 @@ fn is_camel_case(name: &str) -> bool {\n     // ones (some scripts don't have a concept of upper/lowercase)\n     !name.chars().next().unwrap().is_lowercase()\n         && !name.contains(\"__\")\n-        && !name.chars().collect::<Vec<_>>().windows(2).any(|pair| {\n+        && !name.chars().collect::<Vec<_>>().array_windows().any(|&[fst, snd]| {\n             // contains a capitalisable character followed by, or preceded by, an underscore\n-            char_has_case(pair[0]) && pair[1] == '_' || char_has_case(pair[1]) && pair[0] == '_'\n+            char_has_case(fst) && snd == '_' || char_has_case(snd) && fst == '_'\n         })\n }\n "}, {"sha": "74cb3c130b7f087962427b8ff25012589847765f", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -23,6 +23,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(array_windows)]\n #![feature(backtrace)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "38c0441990b2573634566aa2f09cb8be9479809a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -2419,7 +2419,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         eps: &[ExistentialPredicate<'tcx>],\n     ) -> &'tcx List<ExistentialPredicate<'tcx>> {\n         assert!(!eps.is_empty());\n-        assert!(eps.windows(2).all(|w| w[0].stable_cmp(self, &w[1]) != Ordering::Greater));\n+        assert!(eps.array_windows().all(|[a, b]| a.stable_cmp(self, b) != Ordering::Greater));\n         self._intern_existential_predicates(eps)\n     }\n "}, {"sha": "008ae9bae75cf704c271946566c42fec4f8146d2", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -6,6 +6,7 @@ Rust MIR: a lowered representation of Rust.\n \n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n+#![feature(array_windows)]\n #![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]"}, {"sha": "db6d3b2d912d693aa640358abe69eaf54720c1fa", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -277,14 +277,8 @@ where\n \n     symbols.sort_by_key(|sym| sym.1);\n \n-    for pair in symbols.windows(2) {\n-        let sym1 = &pair[0].1;\n-        let sym2 = &pair[1].1;\n-\n+    for &[(mono_item1, ref sym1), (mono_item2, ref sym2)] in symbols.array_windows() {\n         if sym1 == sym2 {\n-            let mono_item1 = pair[0].0;\n-            let mono_item2 = pair[1].0;\n-\n             let span1 = mono_item1.local_span(tcx);\n             let span2 = mono_item2.local_span(tcx);\n "}, {"sha": "714041ad4e8741df90c20ee28640030f398058ba", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -1,7 +1,7 @@\n //! Construction of MIR from HIR.\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n-\n+#![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]"}, {"sha": "eddd2882406ba38cb40a586cc9873fec8f62a102", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -2299,19 +2299,19 @@ fn split_grouped_constructors<'p, 'tcx>(\n                 // interval into a constructor.\n                 split_ctors.extend(\n                     borders\n-                        .windows(2)\n-                        .filter_map(|window| match (window[0], window[1]) {\n-                            (Border::JustBefore(n), Border::JustBefore(m)) => {\n+                        .array_windows()\n+                        .filter_map(|&pair| match pair {\n+                            [Border::JustBefore(n), Border::JustBefore(m)] => {\n                                 if n < m {\n                                     Some(IntRange { range: n..=(m - 1), ty, span })\n                                 } else {\n                                     None\n                                 }\n                             }\n-                            (Border::JustBefore(n), Border::AfterMax) => {\n+                            [Border::JustBefore(n), Border::AfterMax] => {\n                                 Some(IntRange { range: n..=u128::MAX, ty, span })\n                             }\n-                            (Border::AfterMax, _) => None,\n+                            [Border::AfterMax, _] => None,\n                         })\n                         .map(IntRange),\n                 );"}, {"sha": "a730c30378827e328ae8f5c5106e9e5da5f3d3ab", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d56bc774f9ecb2b43640651401f3cb346c1b89/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=50d56bc774f9ecb2b43640651401f3cb346c1b89", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n@@ -1156,7 +1157,12 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     let max_line_length = if lines.len() == 1 {\n                         0\n                     } else {\n-                        lines.windows(2).map(|w| w[1] - w[0]).map(|bp| bp.to_usize()).max().unwrap()\n+                        lines\n+                            .array_windows()\n+                            .map(|&[fst, snd]| snd - fst)\n+                            .map(|bp| bp.to_usize())\n+                            .max()\n+                            .unwrap()\n                     };\n \n                     let bytes_per_diff: u8 = match max_line_length {\n@@ -1171,7 +1177,7 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     // Encode the first element.\n                     lines[0].encode(s)?;\n \n-                    let diff_iter = (&lines[..]).windows(2).map(|w| (w[1] - w[0]));\n+                    let diff_iter = lines[..].array_windows().map(|&[fst, snd]| snd - fst);\n \n                     match bytes_per_diff {\n                         1 => {"}]}