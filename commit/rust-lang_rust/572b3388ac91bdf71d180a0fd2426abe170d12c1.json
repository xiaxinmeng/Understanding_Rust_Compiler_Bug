{"sha": "572b3388ac91bdf71d180a0fd2426abe170d12c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MmIzMzg4YWM5MWJkZjcxZDE4MGEwZmQyNDI2YWJlMTcwZDEyYzE=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2017-08-22T17:22:47Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2017-08-22T17:22:47Z"}, "message": "lint #1674: lifetimed types exclusion\n\nadd expect() message and update test results", "tree": {"sha": "ad8e9bbb522ecf0d8146c513965aea6fbbe1b74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8e9bbb522ecf0d8146c513965aea6fbbe1b74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572b3388ac91bdf71d180a0fd2426abe170d12c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572b3388ac91bdf71d180a0fd2426abe170d12c1", "html_url": "https://github.com/rust-lang/rust/commit/572b3388ac91bdf71d180a0fd2426abe170d12c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572b3388ac91bdf71d180a0fd2426abe170d12c1/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f575d874b921d5cc24a6f1f13d36fba484ab40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f575d874b921d5cc24a6f1f13d36fba484ab40c", "html_url": "https://github.com/rust-lang/rust/commit/3f575d874b921d5cc24a6f1f13d36fba484ab40c"}], "stats": {"total": 30, "additions": 7, "deletions": 23}, "files": [{"sha": "b8c970d376ef6f8d7ccd3f914cf7cf0a883f3873", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/572b3388ac91bdf71d180a0fd2426abe170d12c1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572b3388ac91bdf71d180a0fd2426abe170d12c1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=572b3388ac91bdf71d180a0fd2426abe170d12c1", "patch": "@@ -46,6 +46,8 @@ impl LintPass for UseSelf {\n     }\n }\n \n+const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if in_macro(item.span) {\n@@ -54,9 +56,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n         if_let_chain!([\n             let ItemImpl(.., ref item_type, ref refs) = item.node,\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n-            let PathParameters::AngleBracketedParameters(ref angleBracketedParameterData)\n-              = item_path.segments.last().unwrap().parameters,\n-            angleBracketedParameterData.lifetimes.len() == 0,\n+            let PathParameters::AngleBracketedParameters(ref param_data)\n+              = item_path.segments.last().expect(SEGMENTS_MSG).parameters,\n+            param_data.lifetimes.len() == 0,\n         ], {\n             let visitor = &mut UseSelfVisitor {\n                 item_path: item_path,\n@@ -79,7 +81,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         if self.item_path.def == path.def &&\n            path.segments\n             .last()\n-            .unwrap()\n+            .expect(SEGMENTS_MSG)\n             .name != SelfType.name() {\n             span_lint_and_then(self.cx, USE_SELF, path.span, \"unnecessary structure name repetition\", |db| {\n                 db.span_suggestion(path.span, \"use the applicable keyword\", \"Self\".to_owned());"}, {"sha": "8570dccd0febe81fe23348b0f103bde1e3ab549a", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/572b3388ac91bdf71d180a0fd2426abe170d12c1/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/572b3388ac91bdf71d180a0fd2426abe170d12c1/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=572b3388ac91bdf71d180a0fd2426abe170d12c1", "patch": "@@ -78,24 +78,6 @@ error: methods called `new` usually return `Self`\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:40:35\n-   |\n-40 |     pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n-   |                                   ^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:49:28\n-   |\n-49 |     pub fn new(s: &str) -> Lt2 { unimplemented!() }\n-   |                            ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:58:21\n-   |\n-58 |     pub fn new() -> Lt3<'static> { unimplemented!() }\n-   |                     ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n error: unnecessary structure name repetition\n   --> $DIR/methods.rs:74:24\n    |\n@@ -730,5 +712,5 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 106 previous errors\n+error: aborting due to 103 previous errors\n "}]}