{"sha": "1002155c755562b8932251b50dac149edf8c885b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDIxNTVjNzU1NTYyYjg5MzIyNTFiNTBkYWMxNDllZGY4Yzg4NWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-04-08T21:21:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-04-08T21:21:36Z"}, "message": "Add --enable-debug to control multiple perf options", "tree": {"sha": "cd0d2c1ddf6b88dcb1cfc6c1bc046e6ffc3daa80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0d2c1ddf6b88dcb1cfc6c1bc046e6ffc3daa80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1002155c755562b8932251b50dac149edf8c885b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1002155c755562b8932251b50dac149edf8c885b", "html_url": "https://github.com/rust-lang/rust/commit/1002155c755562b8932251b50dac149edf8c885b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1002155c755562b8932251b50dac149edf8c885b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cbf8233539d74b9c6a3b1bdc67c66bfb9e0ce7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbf8233539d74b9c6a3b1bdc67c66bfb9e0ce7e", "html_url": "https://github.com/rust-lang/rust/commit/7cbf8233539d74b9c6a3b1bdc67c66bfb9e0ce7e"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "4d2868ede5c95bfc8304c85e3bae0a52f02c1d5a", "filename": "configure", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1002155c755562b8932251b50dac149edf8c885b/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1002155c755562b8932251b50dac149edf8c885b/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1002155c755562b8932251b50dac149edf8c885b", "patch": "@@ -523,19 +523,16 @@ fi\n BOOL_OPTIONS=\"\"\n VAL_OPTIONS=\"\"\n \n+opt debug 0 \"debug mode\"\n opt valgrind 0 \"run tests with valgrind (memcheck by default)\"\n opt helgrind 0 \"run tests with helgrind instead of memcheck\"\n opt valgrind-rpass 1 \"run rpass-valgrind tests with valgrind\"\n opt docs     1 \"build standard library documentation\"\n opt compiler-docs     0 \"build compiler documentation\"\n-opt optimize 1 \"build optimized rust code\"\n-opt optimize-cxx 1 \"build optimized C++ code\"\n-opt optimize-llvm 1 \"build optimized LLVM\"\n opt optimize-tests 1 \"build tests with optimizations\"\n opt libcpp 1 \"build with llvm with libc++ instead of libstdc++ when using clang\"\n opt llvm-assertions 0 \"build LLVM with assertions\"\n opt debug-assertions 0 \"build with debugging assertions\"\n-opt debuginfo 0 \"build with debugger metadata\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n@@ -546,6 +543,14 @@ opt dist-host-only 0 \"only install bins for the host architecture\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-version-check 1 \"don't check if the LLVM version is supported, build anyway\"\n \n+# Optimization and debugging options. These may be overridden by the release channel, etc.\n+opt_nosave optimize 1 \"build optimized rust code\"\n+opt_nosave optimize-cxx 1 \"build optimized C++ code\"\n+opt_nosave optimize-llvm 1 \"build optimized LLVM\"\n+opt_nosave llvm-assertions 0 \"build LLVM with assertions\"\n+opt_nosave debug-assertions 0 \"build with debugging assertions\"\n+opt_nosave debuginfo 0 \"build with debugger metadata\"\n+\n valopt localstatedir \"/var/lib\" \"local state directory\"\n valopt sysconfdir \"/etc\" \"install system configuration files\"\n \n@@ -620,6 +625,24 @@ case \"$CFG_RELEASE_CHANNEL\" in\n         ;;\n esac\n \n+# Adjust perf and debug options for debug mode\n+if [ -n \"$CFG_ENABLE_DEBUG\" ]; then\n+    msg \"debug mode enabled, setting performance options\"\n+    CFG_DISABLE_OPTIMIZE=1\n+    CFG_DISABLE_OPTIMIZE_CXX=1\n+    CFG_DISABLE_OPTIMIZE_LLVM=1\n+    CFG_ENABLE_LLVM_ASSERTIONS=1\n+    CFG_ENABLE_DEBUG_ASSERTIONS=1\n+fi\n+\n+# OK, now write the debugging options\n+if [ -n \"$CFG_DISABLE_OPTIMIZE\" ]; then putvar CFG_DISABLE_OPTIMIZE; fi\n+if [ -n \"$CFG_DISABLE_OPTIMIZE_CXX\" ]; then putvar CFG_DISABLE_OPTIMIZE_CXX; fi\n+if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then putvar CFG_DISABLE_OPTIMIZE_LLVM; fi\n+if [ -n \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]; then putvar CFG_ENABLE_LLVM_ASSERTIONS; fi\n+if [ -n \"$CFG_ENABLE_DEBUG_ASSERTIONS\" ]; then putvar CFG_ENABLE_DEBUG_ASSERTIONS; fi\n+if [ -n \"$CFG_ENABLE_DEBUGINFO\" ]; then putvar CFG_ENABLE_DEBUGINFO; fi\n+\n # A magic value that allows the compiler to use unstable features\n # during the bootstrap even when doing so would normally be an error\n # because of feature staging or because the build turns on\n@@ -1425,6 +1448,11 @@ move_if_changed config.tmp config.mk\n rm -f config.tmp\n touch config.stamp\n \n-step_msg \"complete\"\n+if [ -z \"$CFG_ENABLE_DEBUG\" ]; then\n+    step_msg \"configured in release mode. for development consider --enable-debug\"\n+else\n+    step_msg \"complete\"\n+fi\n+\n msg \"run \\`make help\\`\"\n msg"}]}