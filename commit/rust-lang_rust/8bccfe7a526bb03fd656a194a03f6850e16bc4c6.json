{"sha": "8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2NmZTdhNTI2YmIwM2ZkNjU2YTE5NGEwM2Y2ODUwZTE2YmM0YzY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-27T19:37:52Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:21:52Z"}, "message": "Refactor counting methods", "tree": {"sha": "99a08224e07890a26d9202361828b2a77e9ee841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99a08224e07890a26d9202361828b2a77e9ee841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "html_url": "https://github.com/rust-lang/rust/commit/8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcb006fd96763b24c34a8cf2abdf081d2e912b1", "html_url": "https://github.com/rust-lang/rust/commit/3bcb006fd96763b24c34a8cf2abdf081d2e912b1"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "0bbd25808071443e0fc2aa551ef27f6fe6bff928", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -745,8 +745,8 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyPar\n pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v GenericParam) {\n     visitor.visit_id(param.id);\n     match param.kind {\n-        GenericParamKind::Lifetime { ref bounds, ref lifetime_deprecated, .. } => {\n-            match lifetime_deprecated.name {\n+        GenericParamKind::Lifetime { ref bounds, ref lifetime, .. } => {\n+            match lifetime.name {\n                 LifetimeName::Name(name) => {\n                     visitor.visit_name(param.span, name);\n                 }"}, {"sha": "d8e03bea89df450cf264a2debb756f4ee71880d6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -705,7 +705,7 @@ impl<'a> LoweringContext<'a> {\n                         name: hir_name,\n                         bounds: vec![].into(),\n                         in_band: true,\n-                        lifetime_deprecated: hir::Lifetime {\n+                        lifetime: hir::Lifetime {\n                             id: def_node_id,\n                             span,\n                             name: hir_name,\n@@ -1424,7 +1424,7 @@ impl<'a> LoweringContext<'a> {\n                             name,\n                             bounds: vec![].into(),\n                             in_band: false,\n-                            lifetime_deprecated: hir::Lifetime {\n+                            lifetime: hir::Lifetime {\n                                 id: def_node_id,\n                                 span: lifetime.span,\n                                 name,\n@@ -1947,7 +1947,7 @@ impl<'a> LoweringContext<'a> {\n                            itctx: ImplTraitContext)\n                            -> hir::GenericParam {\n         match param.kind {\n-            GenericParamKind::Lifetime { ref bounds, ref lifetime, .. } => {\n+            GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n \n@@ -1960,7 +1960,7 @@ impl<'a> LoweringContext<'a> {\n                         name: lifetime.name,\n                         bounds: bounds.iter().map(|lt| self.lower_lifetime(lt)).collect(),\n                         in_band: false,\n-                        lifetime_deprecated: lifetime,\n+                        lifetime,\n                     }\n                 };\n "}, {"sha": "9c2aa3c7e497257ef065d6dc2aa41a9924555e63", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -462,7 +462,7 @@ pub enum GenericParamKind {\n         // `fn foo(x: &'a u8) -> &'a u8 { x }`\n         in_band: bool,\n         // We keep a `Lifetime` around for now just so we can `visit_lifetime`.\n-        lifetime_deprecated: Lifetime,\n+        lifetime: Lifetime,\n     },\n     Type {\n         name: Name,"}, {"sha": "fc0eee230cd0db4617f907d0bb4efe4fad485f4e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -208,11 +208,11 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n             hir::GenericParamKind::Lifetime { name, ref bounds, in_band,\n-                                              ref lifetime_deprecated } => {\n+                                              ref lifetime } => {\n                 name.hash_stable(hcx, hasher);\n                 bounds.hash_stable(hcx, hasher);\n                 in_band.hash_stable(hcx, hasher);\n-                lifetime_deprecated.hash_stable(hcx, hasher);\n+                lifetime.hash_stable(hcx, hasher);\n             }\n             hir::GenericParamKind::Type { name, ref bounds, ref default, synthetic, attrs } => {\n                 name.hash_stable(hcx, hasher);"}, {"sha": "561e6094c86a479ff6a868cb39f45f08b3b50082", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -1220,20 +1220,17 @@ fn compute_object_lifetime_defaults(\n                         .map(|set| match *set {\n                             Set1::Empty => \"BaseDefault\".to_string(),\n                             Set1::One(Region::Static) => \"'static\".to_string(),\n-                            Set1::One(Region::EarlyBound(i, _, _)) => {\n-                                let mut j = 0;\n-                                generics.params.iter().find(|param| match param.kind {\n+                            Set1::One(Region::EarlyBound(mut i, _, _)) => {\n+                                generics.params.iter().find_map(|param| match param.kind {\n                                         GenericParamKind::Lifetime { .. } => {\n-                                            if i == j {\n-                                                return true;\n+                                            if i == 0 {\n+                                                return Some(param.name().to_string());\n                                             }\n-                                            j += 1;\n-                                            false\n+                                            i -= 1;\n+                                            None\n                                         }\n-                                        _ => false,\n+                                        _ => None,\n                                     }).unwrap()\n-                                  .name()\n-                                  .to_string()\n                             }\n                             Set1::One(_) => bug!(),\n                             Set1::Many => \"Ambiguous\".to_string(),"}, {"sha": "9d38865a91bc8f2667810e45bdc53dca9ebf10b8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -274,15 +274,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let substs = Substs::for_item(tcx, def_id, |param, substs| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n-                    let i = param.index as usize - own_self;\n-                    let mut j = 0;\n+                    let mut i = param.index as usize - own_self;\n                     for arg in &generic_args.args {\n                         match arg {\n                             GenericArg::Lifetime(lt) => {\n-                                if i == j {\n+                                if i == 0 {\n                                     return self.ast_region_to_region(lt, Some(param)).into();\n                                 }\n-                                j += 1;\n+                                i -= 1;\n                             }\n                             _ => {}\n                         }\n@@ -297,17 +296,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         return ty.into();\n                     }\n \n-                    let i = i - (lt_accepted + own_self);\n+                    let mut i = i - (lt_accepted + own_self);\n                     if i < ty_provided {\n                         // A provided type parameter.\n-                        let mut j = 0;\n                         for arg in &generic_args.args {\n                             match arg {\n                                 GenericArg::Type(ty) => {\n-                                    if i == j {\n+                                    if i == 0 {\n                                         return self.ast_ty_to_ty(ty).into();\n                                     }\n-                                    j += 1;\n+                                    i -= 1;\n                                 }\n                                 _ => {}\n                             }"}, {"sha": "f6b2ded176c47ec1eead8811e8d90c10b84bd7fd", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -325,21 +325,20 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         let provided = &segment.args;\n         let own_counts = method_generics.own_counts();\n         Substs::for_item(self.tcx, pick.item.def_id, |param, _| {\n-            let i = param.index as usize;\n+            let mut i = param.index as usize;\n             if i < parent_substs.len() {\n                 parent_substs[i]\n             } else {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n                         if let Some(lifetime) = provided.as_ref().and_then(|data| {\n-                            let mut j = 0;\n                             for arg in &data.args {\n                                 match arg {\n                                     GenericArg::Lifetime(lt) => {\n-                                        if i - parent_substs.len() == j {\n+                                        if i == parent_substs.len() {\n                                             return Some(lt);\n                                         }\n-                                        j += 1;\n+                                        i -= 1;\n                                     }\n                                     _ => {}\n                                 }\n@@ -352,14 +351,13 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     }\n                     GenericParamDefKind::Type {..} => {\n                         if let Some(ast_ty) = provided.as_ref().and_then(|data| {\n-                            let mut j = 0;\n                             for arg in &data.args {\n                                 match arg {\n                                     GenericArg::Type(ty) => {\n-                                        if i - parent_substs.len() - own_counts.lifetimes == j {\n+                                        if i == parent_substs.len() + own_counts.lifetimes {\n                                             return Some(ty);\n                                         }\n-                                        j += 1;\n+                                        i -= 1;\n                                     }\n                                     _ => {}\n                                 }"}, {"sha": "b647dc7923efd8fed586fb45d422c3b40bcf365a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bccfe7a526bb03fd656a194a03f6850e16bc4c6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8bccfe7a526bb03fd656a194a03f6850e16bc4c6", "patch": "@@ -492,12 +492,12 @@ pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyPar\n \n pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n     match param.kind {\n-        GenericParamKind::Lifetime { ref bounds, ref lifetime, .. } => {\n+        GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n             visitor.visit_ident(param.ident);\n             walk_list!(visitor, visit_lifetime, bounds);\n             walk_list!(visitor, visit_attribute, param.attrs.iter());\n         }\n-        GenericParamKind::Type { ref bounds, ref default, .. } => {\n+        GenericParamKind::Type { ref bounds, ref default } => {\n             visitor.visit_ident(t.ident);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);"}]}