{"sha": "d605a9d9695955324760194f18ec46e7f7824105", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDVhOWQ5Njk1OTU1MzI0NzYwMTk0ZjE4ZWM0NmU3Zjc4MjQxMDU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-06T05:15:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-08T21:40:51Z"}, "message": "Small tweaks to required bound span", "tree": {"sha": "5da1e059361a49846d32584dd3049fb7a851fe9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da1e059361a49846d32584dd3049fb7a851fe9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d605a9d9695955324760194f18ec46e7f7824105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d605a9d9695955324760194f18ec46e7f7824105", "html_url": "https://github.com/rust-lang/rust/commit/d605a9d9695955324760194f18ec46e7f7824105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d605a9d9695955324760194f18ec46e7f7824105/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "html_url": "https://github.com/rust-lang/rust/commit/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e"}], "stats": {"total": 655, "additions": 330, "deletions": 325}, "files": [{"sha": "bc5471592bed5814e9beae336aa2920a633cbf96", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -1387,7 +1387,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);\n-                    if generics.params.iter().filter(|p| p.name.as_str() != \"Self\").next().is_some() && !snippet.ends_with('>') {\n+                    if generics.params.iter().filter(|p| p.name.as_str() != \"Self\").next().is_some()\n+                        && !snippet.ends_with('>')\n+                    {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't\n                         // end with a turbofish. Ideally we would have access to a `PathSegment`\n@@ -1405,7 +1407,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |                        `Tt::const_val::<[i8; 123]>::<T>`\n                         // ...\n                         // LL |     const fn const_val<T: Sized>() -> usize {\n-                        //    |              --------- - required by this bound in `Tt::const_val`\n+                        //    |                        - required by this bound in `Tt::const_val`\n                         //    |\n                         //    = note: cannot satisfy `_: Tt`\n "}, {"sha": "3edc066d49a603cfe0a9c7b7e88a427b58b24f2f", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ///   --> $DIR/issue-64130-2-send.rs:21:5\n     ///    |\n     /// LL | fn is_send<T: Send>(t: T) { }\n-    ///    |    -------    ---- required by this bound in `is_send`\n+    ///    |               ---- required by this bound in `is_send`\n     /// ...\n     /// LL |     is_send(bar());\n     ///    |     ^^^^^^^ future returned by `bar` is not send\n@@ -1356,7 +1356,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by this bound in `{}`\", item_name);\n                 if let Some(ident) = tcx.opt_item_name(item_def_id) {\n-                    if !ident.span.overlaps(span) {\n+                    let sm = self.tcx.sess.source_map();\n+                    let same_line =\n+                        match (sm.lookup_line(ident.span.hi()), sm.lookup_line(span.lo())) {\n+                            (Ok(l), Ok(r)) => l.line == r.line,\n+                            _ => true,\n+                        };\n+                    if !ident.span.overlaps(span) && !same_line {\n                         err.span_label(ident.span, \"\");\n                     }\n                 }"}, {"sha": "de478417d067856af23744441b3281257b1d8827", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -7,7 +7,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n ...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   |    --                   ------------ required by this bound in `f1`\n+   |                         ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n@@ -18,7 +18,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n ...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   |    --                   ----------------------- required by this bound in `f2`\n+   |                         ----------------------- required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -29,7 +29,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n ...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   |    --                       --------------- required by this bound in `f3`\n+   |                             --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n@@ -40,7 +40,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n ...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   |    --                   ----------------------- required by this bound in `f4`\n+   |                         ----------------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -51,7 +51,7 @@ LL |     f5(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n ...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   |    --                   -------------------------- required by this bound in `f5`\n+   |                         -------------------------- required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n@@ -62,7 +62,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   |    --                   ------------------------- required by this bound in `g1`\n+   |                         ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -73,7 +73,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n ...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   |    --                   ---------------- required by this bound in `g2`\n+   |                         ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n@@ -84,7 +84,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   |    --                   ------------------------------------ required by this bound in `g3`\n+   |                         ------------------------------------ required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -95,7 +95,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   |    --                   --------------------------- required by this bound in `g4`\n+   |                         --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n@@ -106,7 +106,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   |    --                   -------------------------------------------- required by this bound in `h1`\n+   |                         -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -117,7 +117,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   |    --                   --------------------------------------------------------- required by this bound in `h2`\n+   |                         --------------------------------------------------------- required by this bound in `h2`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "029c923aa7d4a68ead6ea374290e8ee5bc22d154", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n-   |    --------       ---------- required by this bound in `blue_car`\n+   |                   ---------- required by this bound in `blue_car`\n ...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n@@ -11,7 +11,7 @@ error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n LL | fn black_car<C:Car<Color=Black>>(c: C) {\n-   |    ---------       ----------- required by this bound in `black_car`\n+   |                    ----------- required by this bound in `black_car`\n ...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`"}, {"sha": "a8608abb4d9924706437c343e8ec1efde80795fe", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -15,7 +15,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5\n    |\n LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n-   |    ----        ----- required by this bound in `foo1`\n+   |                ----- required by this bound in `foo1`\n ...\n LL |     foo1(a);\n    |     ^^^^ expected struct `Bar`, found `usize`"}, {"sha": "8f2b760840c080eb9a7d5738cc091ad829505179", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::op\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n-   |    --------------                ------ required by this bound in `is_iterator_of`\n+   |                                  ------ required by this bound in `is_iterator_of`\n ...\n LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n    |                 - this type parameter"}, {"sha": "4e481411b4d2ecda158f2acffd7c7229dd82d612", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL |     want_y(t);\n    |     ^^^^^^ expected `i32`, found associated type\n ...\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n-   |    ------       ----- required by this bound in `want_y`\n+   |                 ----- required by this bound in `want_y`\n    |\n    = note:         expected type `i32`\n            found associated type `<T as Foo>::Y`\n@@ -19,7 +19,7 @@ LL |     want_x(t);\n    |     ^^^^^^ expected `u32`, found associated type\n ...\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n-   |    ------       ----- required by this bound in `want_x`\n+   |                 ----- required by this bound in `want_x`\n    |\n    = note:         expected type `u32`\n            found associated type `<T as Foo>::X`"}, {"sha": "3aed85645aef8e31c4764ec8328b06b0d4487fcc", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0284]: type annotations needed\n   --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n-   |       ---           ---------- required by this bound in `Foo`\n+   |                     ---------- required by this bound in `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n    |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n@@ -12,7 +12,7 @@ error[E0284]: type annotations needed\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n LL | trait I32Iterator = Iterator<Item = i32>;\n-   |       -----------            ---------- required by this bound in `I32Iterator`\n+   |                              ---------- required by this bound in `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |"}, {"sha": "b2599410f05e45815a83b87b63e45a1c7829fcc2", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -13,7 +13,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   |        --    --- required by this bound in `f1`\n+   |              --- required by this bound in `f1`\n ...\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n@@ -28,7 +28,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   |        --    --- required by this bound in `f1`\n+   |              --- required by this bound in `f1`\n ...\n LL |     f1(2u32, 4i32);\n    |     ^^ the trait `Foo` is not implemented for `u32`"}, {"sha": "04df6203e43f1ecdf873e4ad078a20c4b6c21d3f", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:49:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   |    -----------         ---- required by this bound in `assert_send`\n+   |                        ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n@@ -23,7 +23,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:51:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   |    -----------         ---- required by this bound in `assert_send`\n+   |                        ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n@@ -44,7 +44,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:53:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   |    -----------         ---- required by this bound in `assert_send`\n+   |                        ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`"}, {"sha": "b7a88c10e7411617e329ba2ae0ecf568aef21840", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error: future cannot be shared between threads safely\n   --> $DIR/issue-64130-1-sync.rs:21:5\n    |\n LL | fn is_sync<T: Sync>(t: T) { }\n-   |    -------    ---- required by this bound in `is_sync`\n+   |               ---- required by this bound in `is_sync`\n ...\n LL |     is_sync(bar());\n    |     ^^^^^^^ future returned by `bar` is not `Sync`"}, {"sha": "ec183088771771694b278d1e2dba1790c34c2ab4", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-2-send.rs:21:5\n    |\n LL | fn is_send<T: Send>(t: T) { }\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(bar());\n    |     ^^^^^^^ future returned by `bar` is not `Send`"}, {"sha": "6b40cc9184df03f55979dd70850a2daf9af36edd", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl std::future::\n   --> $DIR/issue-64130-3-other.rs:24:5\n    |\n LL | fn is_qux<T: Qux>(t: T) { }\n-   |    ------    --- required by this bound in `is_qux`\n+   |              --- required by this bound in `is_qux`\n LL | \n LL | async fn bar() {\n    |                - within this `impl std::future::Future`"}, {"sha": "0f4441edb138542f1f634a30cd24e4d20e7d8866", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-non-send-future-diags.rs:21:5\n    |\n LL | fn is_send<T: Send>(t: T) { }\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(foo());\n    |     ^^^^^^^ future returned by `foo` is not `Send`"}, {"sha": "cbcc3cf5d78a75a069749b1a01178f1d63d6e495", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/issue-67252-unnamed-future.rs:18:5\n    |\n LL | fn spawn<T: Send>(_: T) {}\n-   |    -----    ---- required by this bound in `spawn`\n+   |             ---- required by this bound in `spawn`\n ...\n LL |     spawn(async {\n    |     ^^^^^ future is not `Send`"}, {"sha": "73e2a92d815c8f2c81c281b1a8bc3c4774257e8c", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error: future cannot be sent between threads safely\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:12:5\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n-   |    -----------    ---- required by this bound in `assert_send`\n+   |                   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future returned by `main` is not `Send`"}, {"sha": "ffd70fac6b19bf8bfe8e29a0bb9bbc7aecf964ba", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `F` cannot be sent between threads safely\n   --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:22\n    |\n LL | struct X<F> where F: FnOnce() + 'static + Send {\n-   |        -                                  ---- required by this bound in `X`\n+   |                                           ---- required by this bound in `X`\n ...\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |                      ^^^^ `F` cannot be sent between threads safely"}, {"sha": "691864c9e1d45652708ce77d2ec17a83a75b285f", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:22\n    |\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n-   |    ----------------                              ---- required by this bound in `take_const_owned`\n+   |                                                  ---- required by this bound in `take_const_owned`\n ...\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely"}, {"sha": "93a06fccbf53caca50ae8c6fae56b7f585adb173", "filename": "src/test/ui/coherence/coherence-unsafe-trait-object-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&dyn Trait: Trait` is not satisfied\n   --> $DIR/coherence-unsafe-trait-object-impl.rs:15:13\n    |\n LL | fn takes_t<S: Trait>(s: S) {\n-   |    -------    ----- required by this bound in `takes_t`\n+   |               ----- required by this bound in `takes_t`\n ...\n LL |     takes_t(t);\n    |             ^ the trait `Trait` is not implemented for `&dyn Trait`"}, {"sha": "8b57d23751660283cd36e5046249ceea89af0e3b", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n LL | pub struct Foo<A, B>(A, B);\n-   |            --- - required by this bound in `Foo`\n+   |                - required by this bound in `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n    |      - this type parameter needs to be `std::marker::Sized`\n@@ -30,7 +30,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n LL | pub struct Foo<A, B>(A, B);\n-   |            ---    - required by this bound in `Foo`\n+   |                   - required by this bound in `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n    |         - this type parameter needs to be `std::marker::Sized`"}, {"sha": "5fa2710cbad4e18a126d57f869cc7c26d2706967", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `C: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n-   |    -------    ---- required by this bound in `is_copy`\n+   |               ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: C });\n    |             ^^^^^^^^^^^^^^^^\n@@ -16,7 +16,7 @@ error[E0277]: the trait bound `C: std::clone::Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL | fn is_clone<T: Clone>(_: T) {}\n-   |    --------    ----- required by this bound in `is_clone`\n+   |                ----- required by this bound in `is_clone`\n ...\n LL |     is_clone(B { a: 1, b: C });\n    |              ^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ error[E0277]: the trait bound `D: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n-   |    -------    ---- required by this bound in `is_copy`\n+   |               ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: D });\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "45cb054b80c91b2fa217d52b2c2824fa1129fc79", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `J: std::marker::Send`\n   --> $DIR/recursion_limit.rs:34:5\n    |\n LL | fn is_send<T:Send>() { }\n-   |    -------   ---- required by this bound in `is_send`\n+   |              ---- required by this bound in `is_send`\n ...\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^"}, {"sha": "580b5aef07e6db249a3df558e47371902c830dfb", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:10:5\n    |\n LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n-   |    ---                         ------------------ required by this bound in `foo`\n+   |                                ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n    |     ^^^ expected `u32`, found `&str`"}, {"sha": "f5ba46ca01e1fef7d79762629aa14bfd4244f4b8", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*const u8` cannot be sent between threads safely\n   --> $DIR/E0277-2.rs:16:5\n    |\n LL | fn is_send<T: Send>() { }\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely"}, {"sha": "a9ea85d14cff5e2546df7774d4859cc7008f7b5a", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -14,7 +14,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15\n    |\n LL | fn some_func<T: Foo>(foo: T) {\n-   |    ---------    --- required by this bound in `some_func`\n+   |                 --- required by this bound in `some_func`\n ...\n LL |     some_func(5i32);\n    |               ^^^^ the trait `Foo` is not implemented for `i32`"}, {"sha": "96ffa6f3e06ba835f7e993835f4f19426537a121", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not sa\n   --> $DIR/error-should-say-copy-not-pod.rs:6:17\n    |\n LL | fn check_bound<T:Copy>(_: T) {}\n-   |    -----------   ---- required by this bound in `check_bound`\n+   |                  ---- required by this bound in `check_bound`\n ...\n LL |     check_bound(\"nocopy\".to_string());\n    |                 ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`"}, {"sha": "a1138c323445116116b026fe8ab937972c6f93b9", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `A` cannot be shared between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:13:19\n    |\n LL | fn assert_sync<T: ?Sized + Sync>() { }\n-   |    -----------             ---- required by this bound in `assert_sync`\n+   |                            ---- required by this bound in `assert_sync`\n ...\n LL |     assert_sync::<A>();\n    |                   ^ `A` cannot be shared between threads safely\n@@ -13,7 +13,7 @@ error[E0277]: `A` cannot be sent between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:16:19\n    |\n LL | fn assert_send<T: ?Sized + Send>() { }\n-   |    -----------             ---- required by this bound in `assert_send`\n+   |                            ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<A>();\n    |                   ^ `A` cannot be sent between threads safely"}, {"sha": "9ed52511fa399256c23b4805282c4868ce3ffc72", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ - required by this bound in `assert_sized`\n+   |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n@@ -18,7 +18,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:25:5\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ - required by this bound in `assert_sized`\n+   |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -31,7 +31,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:28:5\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ - required by this bound in `assert_sized`\n+   |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -44,7 +44,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:31:5\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ - required by this bound in `assert_sized`\n+   |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "64f01b47792c7629ceaef1142b01d616b59fbebf", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:9:11\n    |\n LL | fn is_fn<F>(_: F) where F: Fn() {}\n-   |    -----                   ---- required by this bound in `is_fn`\n+   |                            ---- required by this bound in `is_fn`\n ...\n LL |     is_fn(f);\n    |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`"}, {"sha": "b3b53971a37125d44b051aed87935705fba66a32", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:8:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   |    ----    ---- required by this bound in `send`\n+   |            ---- required by this bound in `send`\n ...\n LL |     send(format_args!(\"{:?}\", c));\n    |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n@@ -18,7 +18,7 @@ error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:9:5\n    |\n LL | fn sync<T: Sync>(_: T) {}\n-   |    ----    ---- required by this bound in `sync`\n+   |            ---- required by this bound in `sync`\n ...\n LL |     sync(format_args!(\"{:?}\", c));\n    |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely"}, {"sha": "e3ada4f6bae0649e4b3882b489374f3f2d252ae7", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14\n    |\n LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n-   |    --------                   ------------------ required by this bound in `needs_fn`\n+   |                               ------------------ required by this bound in `needs_fn`\n ...\n LL |     needs_fn(1);\n    |              ^ expected an `Fn<(isize,)>` closure, found `{integer}`"}, {"sha": "5f5211b5092f449e01e814ae4061a75fdbcb7224", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:16:5\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n-   |        -----------    ---- required by this bound in `main::assert_send`\n+   |                       ---- required by this bound in `main::assert_send`\n ...\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n@@ -15,7 +15,7 @@ error: future cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |        -----------    ---- required by this bound in `main::assert_sync`\n+   |                       ---- required by this bound in `main::assert_sync`\n ...\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ future returned by `main` is not `Sync`"}, {"sha": "ffa440daed8c45088be819f24f8e4bb8e9a12c60", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/resume-arg-late-bound.rs:15:10\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n-   |    ----         ------------------------------- required by this bound in `test`\n+   |                 ------------------------------- required by this bound in `test`\n ...\n LL |     test(gen);\n    |          ^^^"}, {"sha": "3bb899cd890244966d5a61036a6e11655c3a328b", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]` cannot\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {\n-   |    ------------    ----- required by this bound in `assert_unpin`\n+   |                    ----- required by this bound in `assert_unpin`\n ...\n LL |     assert_unpin(generator);\n    |                  ^^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]`"}, {"sha": "0a7382c4dd818305ed5794882f83123b7d8ccbe6", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n   --> $DIR/issue-46989.rs:40:18\n    |\n LL | fn assert_foo<T: Foo>() {}\n-   |    ----------    --- required by this bound in `assert_foo`\n+   |                  --- required by this bound in `assert_foo`\n ...\n LL |     assert_foo::<fn(&i32)>();\n    |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`"}, {"sha": "164524be1bc4102be632c53c09684d4cff5cc20a", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -258,7 +258,7 @@ error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads\n   --> $DIR/auto-trait-leak.rs:16:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   |    ----    ---- required by this bound in `send`\n+   |            ---- required by this bound in `send`\n ...\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely"}, {"sha": "b02ef7d4a5b13d12713c656facf47acab8fd334c", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL | fn before() -> impl Fn(i32) {\n    |                ------------ within this `impl std::ops::Fn<(i32,)>`\n ...\n LL | fn send<T: Send>(_: T) {}\n-   |    ----    ---- required by this bound in `send`\n+   |            ---- required by this bound in `send`\n ...\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n@@ -18,7 +18,7 @@ error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads\n   --> $DIR/auto-trait-leak2.rs:16:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   |    ----    ---- required by this bound in `send`\n+   |            ---- required by this bound in `send`\n ...\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely"}, {"sha": "1ea40d0728ed13343c4e8594c8f935c87e9451c3", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL | fn ho_func(f: Option<FuncType>) {\n    |               ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n ...\n LL | enum Option<T> {\n-   |      ------ - required by this bound in `Option`\n+   |             - required by this bound in `Option`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "3130434f6f6d569889702ae57cc32f55b435745b", "filename": "src/test/ui/issues/issue-1920-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `foo::issue_1920::S: std::clone::Clone` is not sat\n   --> $DIR/issue-1920-1.rs:12:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   |    ------------                ----- required by this bound in `assert_clone`\n+   |                                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n    |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`"}, {"sha": "1084c47f001b89e02b4b1dde2c453563b3fe1620", "filename": "src/test/ui/issues/issue-1920-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `bar::S: std::clone::Clone` is not satisfied\n   --> $DIR/issue-1920-2.rs:10:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   |    ------------                ----- required by this bound in `assert_clone`\n+   |                                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<bar::S>();\n    |                    ^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`"}, {"sha": "11740317e546ed25f9b5fcef5d2b2fdb5a54576d", "filename": "src/test/ui/issues/issue-1920-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `issue_1920::S: std::clone::Clone` is not satisfie\n   --> $DIR/issue-1920-3.rs:14:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   |    ------------                ----- required by this bound in `assert_clone`\n+   |                                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n    |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`"}, {"sha": "19ccf7076199aadf5c5c03e9b949f012fad7b3dc", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-20005.rs:10:49\n    |\n LL | trait From<Src> {\n-   |       ---- --- required by this bound in `From`\n+   |            --- required by this bound in `From`\n ...\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n    |                                                 ^^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::marker::Sized`"}, {"sha": "3ec876f37d4609b6f576edd2127611da13dd0c2f", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/issue-21763.rs:9:5\n    |\n LL | fn foo<T: Send>() {}\n-   |    ---    ---- required by this bound in `foo`\n+   |           ---- required by this bound in `foo`\n ...\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely"}, {"sha": "f7e46b25cf82ba3fb929c20402ec718b006ab938", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: Bound` is not satisfied\n   --> $DIR/issue-21837.rs:8:9\n    |\n LL | pub struct Foo<T: Bound>(T);\n-   |            ---    ----- required by this bound in `Foo`\n+   |                   ----- required by this bound in `Foo`\n ...\n LL | impl<T> Trait2 for Foo<T> {}\n    |         ^^^^^^ the trait `Bound` is not implemented for `T`"}, {"sha": "3b4b8997a70095e43ec2cff2dd8c8ef2da864450", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n    |                           ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n ...\n LL | struct Vec<T> {\n-   |        --- - required by this bound in `Vec`\n+   |            - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "27c577a0d5f6d72a58da8263976ca1d55fea049f", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n   --> $DIR/issue-25076.rs:10:20\n    |\n LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n-   |    -------       --------------- required by this bound in `do_fold`\n+   |                  --------------- required by this bound in `do_fold`\n ...\n LL |     do_fold(bot(), ());\n    |                    ^^ the trait `InOut<_>` is not implemented for `()`"}, {"sha": "34d5c894e36f21e6df75fef38df52465a2673271", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -24,7 +24,7 @@ error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n-   |    ------------    ---- required by this bound in `size_of_copy`\n+   |                    ---- required by this bound in `size_of_copy`\n ...\n LL |     size_of_copy::<dyn Misc + Copy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`"}, {"sha": "a10abb89021a38b0409fddcb3900529b03ac71dc", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n-   |    -    ---- required by this bound in `f`\n+   |         ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be sent between threads safely\n@@ -16,7 +16,7 @@ error[E0277]: `std::rc::Rc<Foo>` cannot be shared between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n-   |    -    ---- required by this bound in `f`\n+   |         ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be shared between threads safely"}, {"sha": "01ed1383ca2b3d5110aba688bee4c6b46630d26d", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -11,7 +11,7 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n ...\n LL |     const fn const_val<T: Sized>() -> usize {\n-   |              --------- - required by this bound in `Tt::const_val`\n+   |                        - required by this bound in `Tt::const_val`\n    |\n    = note: cannot satisfy `_: Tt`\n "}, {"sha": "1a5aad6c36d42d2250ccbae1a901247698e424a8", "filename": "src/test/ui/iterators/bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `u8` is not an iterator\n   --> $DIR/bound.rs:2:10\n    |\n LL | struct S<I: Iterator>(I);\n-   |        -    -------- required by this bound in `S`\n+   |             -------- required by this bound in `S`\n LL | struct T(S<u8>);\n    |          ^^^^^ `u8` is not an iterator\n    |"}, {"sha": "5a7cd458e52d394c23b22837231b1d2639bc6f30", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&'static mut isize: std::marker::Copy` is not sat\n   --> $DIR/kindck-copy.rs:27:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n@@ -14,7 +14,7 @@ error[E0277]: the trait bound `&'a mut isize: std::marker::Copy` is not satisfie\n   --> $DIR/kindck-copy.rs:28:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n@@ -26,7 +26,7 @@ error[E0277]: the trait bound `std::boxed::Box<isize>: std::marker::Copy` is not\n   --> $DIR/kindck-copy.rs:31:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<isize>>();\n    |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n@@ -35,7 +35,7 @@ error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not sa\n   --> $DIR/kindck-copy.rs:32:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<String>();\n    |                   ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n@@ -44,7 +44,7 @@ error[E0277]: the trait bound `std::vec::Vec<isize>: std::marker::Copy` is not s\n   --> $DIR/kindck-copy.rs:33:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Vec<isize> >();\n    |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n@@ -53,7 +53,7 @@ error[E0277]: the trait bound `std::boxed::Box<&'a mut isize>: std::marker::Copy\n   --> $DIR/kindck-copy.rs:34:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<&'a mut isize>>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n@@ -62,7 +62,7 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Dummy>: std::marker::Copy` is\n   --> $DIR/kindck-copy.rs:42:5\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy>`\n@@ -71,7 +71,7 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Dummy + std::marker::Send>: s\n   --> $DIR/kindck-copy.rs:43:5\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n@@ -80,7 +80,7 @@ error[E0277]: the trait bound `&'a mut (dyn Dummy + std::marker::Send + 'a): std\n   --> $DIR/kindck-copy.rs:46:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n@@ -89,7 +89,7 @@ error[E0277]: the trait bound `MyNoncopyStruct: std::marker::Copy` is not satisf\n   --> $DIR/kindck-copy.rs:64:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<MyNoncopyStruct>();\n    |                   ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n@@ -98,7 +98,7 @@ error[E0277]: the trait bound `std::rc::Rc<isize>: std::marker::Copy` is not sat\n   --> $DIR/kindck-copy.rs:67:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   |    -----------   ---- required by this bound in `assert_copy`\n+   |                  ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Rc<isize>>();\n    |                   ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`"}, {"sha": "984960efaeef61e1b081bc8f75282349bf98040f", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   |    ----------   --- required by this bound in `take_param`\n+   |                 --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "7df98366edb6707e709485a661100d79e1b4579a", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   |    ----------   --- required by this bound in `take_param`\n+   |                 --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "6b511e0a6e6f56599b1d7e30b2f5434dfe3ea664", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   |    ----------   --- required by this bound in `take_param`\n+   |                 --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "c7f9058dd7e80e85c18fd089e19c1e19d037d450", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<usize>` cannot be sent between threads safely\n   --> $DIR/kindck-nonsendable-1.rs:9:5\n    |\n LL | fn bar<F:FnOnce() + Send>(_: F) { }\n-   |    ---              ---- required by this bound in `bar`\n+   |                     ---- required by this bound in `bar`\n ...\n LL |     bar(move|| foo(x));\n    |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`"}, {"sha": "a59a375c6c837891c3096cd3c7c8664f225b8195", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object.rs:17:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely"}, {"sha": "14a6f554f6de5b7acd1b03c48e92b82635d2ac33", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely"}, {"sha": "b6d82e3195e04c585d58d0da6459ffc4f9e1fc14", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n@@ -22,7 +22,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely"}, {"sha": "e6daf987c8c48285f8eb1c519712b6ffc56020d2", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object2.rs:7:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'static dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object2.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely"}, {"sha": "2c6c2c6267dc0f975079f24d4f400da54f4c4be0", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*mut u8` cannot be sent between threads safely\n   --> $DIR/kindck-send-owned.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<*mut u8>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely"}, {"sha": "34f98218193a16e645c608fd5b040f98066e9558", "filename": "src/test/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n   --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n LL | fn assert_send<T:Send>() { }\n-   |    -----------   ---- required by this bound in `assert_send`\n+   |                  ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<*mut &'a isize>();\n    |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely"}, {"sha": "0fc266454ee8097980efa3574c5352f8b9549dd2", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n   --> $DIR/overlap-marker-trait.rs:27:17\n    |\n LL | fn is_marker<T: Marker>() { }\n-   |    ---------    ------ required by this bound in `is_marker`\n+   |                 ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n    |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`"}, {"sha": "1b10325564a649a27c8a7dbfeee802c75cefd084", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n-   |    ---    --------- required by this bound in `foo`\n+   |           --------- required by this bound in `foo`\n ...\n LL |     foo(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n@@ -13,7 +13,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n-   |    ---    --------- required by this bound in `bar`\n+   |           --------- required by this bound in `bar`\n ...\n LL |     bar(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n@@ -24,7 +24,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n-   |    ---    --------- required by this bound in `foo`\n+   |           --------- required by this bound in `foo`\n ...\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n@@ -36,7 +36,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:9\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n-   |    ---    --------- required by this bound in `bar`\n+   |           --------- required by this bound in `bar`\n LL | fn main() {\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`"}, {"sha": "405343783de05ca11339248b2478543a85cdd8be", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -49,7 +49,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:13:5\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n-   |    -    --------- required by this bound in `f`\n+   |         --------- required by this bound in `f`\n ...\n LL |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n@@ -65,7 +65,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:15:5\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n-   |    -    --------- required by this bound in `f`\n+   |         --------- required by this bound in `f`\n ...\n LL |     f(  move    || panic!());\n    |     ^   ---------- takes 0 arguments\n@@ -150,7 +150,7 @@ LL |     call(Foo);\n    |          ^^^ expected function that takes 0 arguments\n ...\n LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n-   |    ----                      ------------- required by this bound in `call`\n+   |                              ------------- required by this bound in `call`\n LL | struct Foo(u8);\n    | --------------- takes 1 argument\n "}, {"sha": "69a4b458ebf5089a0c3a33e1f6ebe7ccaab2d56a", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -26,7 +26,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/closure-arg-type-mismatch.rs:10:9\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |    ---    ------------- required by this bound in `baz`\n+   |           ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |         ^\n@@ -38,7 +38,7 @@ error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::Fn\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |    ---    ------------- required by this bound in `baz`\n+   |           ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime"}, {"sha": "389b21574465aa7bc8e94244fb401313eaa8f633", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL | fn baz<T: Foo>(_: T) {}\n-   |    ---    --- required by this bound in `baz`\n+   |           --- required by this bound in `baz`\n ...\n LL |     baz(|_| ());\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n@@ -13,7 +13,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL | fn baz<T: Foo>(_: T) {}\n-   |    ---    --- required by this bound in `baz`\n+   |           --- required by this bound in `baz`\n ...\n LL |     baz(|_| ());\n    |     ^^^ ------ found signature of `fn(_) -> _`"}, {"sha": "dbb281bbf415e6e31dd7dc27cc274d775cdeac4e", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n LL | \n LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   |    -----                            --------- required by this bound in `apply`\n+   |                                     --------- required by this bound in `apply`\n ...\n LL |     apply(&3, takes_mut);\n    |               ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n@@ -17,7 +17,7 @@ LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   |    -----                            --------- required by this bound in `apply`\n+   |                                     --------- required by this bound in `apply`\n ...\n LL |     apply(&mut 3, takes_imm);\n    |                   ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`"}, {"sha": "ab36b8536bf602405af99194c13c2db9ff70b007", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -6,7 +6,6 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n //~^ NOTE required by this bound in `call_it`\n-//~| NOTE\n     f(2, y)\n }\n "}, {"sha": "111ff4a0c325106dc5e4c47e8d1a10fd72d45920", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -1,8 +1,8 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:15:24\n    |\n LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   |    -------   ------------------------- required by this bound in `call_it`\n+   |              ------------------------- required by this bound in `call_it`\n ...\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`"}, {"sha": "9decba790d2ad5461eb9a190fd50340c1d1a7fed", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/mutable-enum-indirect.rs:17:5\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   |    ---    ---- required by this bound in `bar`\n+   |           ---- required by this bound in `bar`\n ...\n LL |     bar(&x);\n    |     ^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "8b5362490bf9420636a8010cfd935c1111d98137", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/mutexguard-sync.rs:11:15\n    |\n LL | fn test_sync<T: Sync>(_t: T) {}\n-   |    ---------    ---- required by this bound in `test_sync`\n+   |                 ---- required by this bound in `test_sync`\n ...\n LL |     test_sync(guard);\n    |               ^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely"}, {"sha": "f82c83fd5b0bab2f2d86a8a0c8d756e3bd056cd3", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -90,7 +90,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m1::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -99,7 +99,7 @@ error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:35:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m2::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n@@ -108,7 +108,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:36:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m2::S);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -117,7 +117,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:39:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm1::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -126,7 +126,7 @@ error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:41:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm2::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n@@ -135,7 +135,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:42:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm2::S);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -144,7 +144,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:55:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m3::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -153,7 +153,7 @@ error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfi\n   --> $DIR/namespace-mix.rs:56:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m3::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n@@ -162,7 +162,7 @@ error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:57:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m4::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n@@ -171,7 +171,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:58:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m4::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -180,7 +180,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:61:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm3::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -189,7 +189,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::T\n   --> $DIR/namespace-mix.rs:62:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm3::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n@@ -198,7 +198,7 @@ error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:63:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm4::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n@@ -207,7 +207,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:64:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm4::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -216,7 +216,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:77:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m5::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -225,7 +225,7 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:78:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m5::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n@@ -234,7 +234,7 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:79:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m6::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n@@ -243,7 +243,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:80:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m6::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -252,7 +252,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:83:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm5::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -261,7 +261,7 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:84:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm5::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n@@ -270,7 +270,7 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:85:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm6::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n@@ -279,7 +279,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:86:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm6::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -288,7 +288,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:99:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m7::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -297,7 +297,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:101:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m8::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -306,7 +306,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:102:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m8::V);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -315,7 +315,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:105:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm7::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -324,7 +324,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:107:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm8::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -333,7 +333,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:108:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm8::V);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -342,7 +342,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:121:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m9::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -351,7 +351,7 @@ error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satis\n   --> $DIR/namespace-mix.rs:122:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(m9::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n@@ -360,7 +360,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:123:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(mA::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -369,7 +369,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:124:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(mA::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -378,7 +378,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:127:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm9::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -387,7 +387,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::\n   --> $DIR/namespace-mix.rs:128:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xm9::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n@@ -396,7 +396,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:129:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xmA::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -405,7 +405,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:130:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xmA::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -414,7 +414,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:143:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(mB::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -423,7 +423,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:144:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(mB::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -432,7 +432,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:145:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(mC::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -441,7 +441,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:146:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(mC::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -450,7 +450,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:149:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xmB::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -459,7 +459,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:150:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xmB::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -468,7 +468,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:151:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xmC::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -477,7 +477,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:152:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   |    -----    ---------- required by this bound in `check`\n+   |             ---------- required by this bound in `check`\n ...\n LL |     check(xmC::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`"}, {"sha": "c96c4784dcf32e3e8c216f9b64704bebc7bce3fd", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -20,7 +20,6 @@ impl ImplementedForUnitButNotNever for () {}\n \n fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n //~^ NOTE required by this bound in `foo`\n-//~| NOTE\n \n fn smeg() {\n     let _x = return;"}, {"sha": "69691883de1e3b5f1be1ee848d2163f6dcb7d90f", "filename": "src/test/ui/never_type/defaulted-never-note.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:27:5\n+  --> $DIR/defaulted-never-note.rs:26:5\n    |\n LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-   |    ---    ----------------------------- required by this bound in `foo`\n+   |           ----------------------------- required by this bound in `foo`\n ...\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`"}, {"sha": "95a0d77676de8415f0732a22c18714dbe2bb7135", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSend` cannot be sent between threads safely\n   --> $DIR/no_send-enum.rs:16:5\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   |    ---    ---- required by this bound in `bar`\n+   |           ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |     ^^^ `NoSend` cannot be sent between threads safely"}, {"sha": "1eb2edb14b80a5623dd25b2b4bd8af35a068a4f8", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/no_send-rc.rs:7:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   |    ---    ---- required by this bound in `bar`\n+   |           ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `std::rc::Rc<{integer}>` cannot be sent between threads safely"}, {"sha": "4e8801a58bfae4e81473ededab9106c54a82dd24", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Foo` cannot be sent between threads safely\n   --> $DIR/no_send-struct.rs:15:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   |    ---    ---- required by this bound in `bar`\n+   |           ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `Foo` cannot be sent between threads safely"}, {"sha": "40996aef702a08cd36b41a70cbbb4867cf85a73c", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/no_share-enum.rs:14:5\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   |    ---    ---- required by this bound in `bar`\n+   |           ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |     ^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "f14b06835f9da498667a3f1f43e70b021f7a6d00", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Foo` cannot be shared between threads safely\n   --> $DIR/no_share-struct.rs:12:9\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   |    ---    ---- required by this bound in `bar`\n+   |           ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `Foo` cannot be shared between threads safely"}, {"sha": "c52d5b9adee06b75b7cf0ca843053274c343480f", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "711346b7b1c2b0f17289b8752a00d5a355050fcc", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "ada22fe9a7785cb15dfa8a96d15db84df614905f", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "c987ca7c088af205bc4c1308571df72389941af7", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-5.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<*const UnsafeCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "f184a459b829f091154329faf7cd061a3ca11752", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "b254a0416667aa154978ed6d1045e04cf3934db4", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `&mut i32` may not be safely transferred across an unwind\n   --> $DIR/not-panic-safe.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |    ------    ---------- required by this bound in `assert`\n+   |              ---------- required by this bound in `assert`\n ...\n LL |     assert::<&mut i32>();\n    |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary"}, {"sha": "25f1a66062bea6dccc3b00a4987d776ce6acd788", "filename": "src/test/ui/not-sync.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-sync.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:8:12\n    |\n LL | fn test<T: Sync>() {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test::<Cell<i32>>();\n    |            ^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n@@ -13,7 +13,7 @@ error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:10:12\n    |\n LL | fn test<T: Sync>() {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test::<RefCell<i32>>();\n    |            ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n@@ -24,7 +24,7 @@ error[E0277]: `std::rc::Rc<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:13:12\n    |\n LL | fn test<T: Sync>() {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test::<Rc<i32>>();\n    |            ^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n@@ -35,7 +35,7 @@ error[E0277]: `std::rc::Weak<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:15:12\n    |\n LL | fn test<T: Sync>() {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test::<Weak<i32>>();\n    |            ^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n@@ -46,7 +46,7 @@ error[E0277]: `std::sync::mpsc::Receiver<i32>` cannot be shared between threads\n   --> $DIR/not-sync.rs:18:12\n    |\n LL | fn test<T: Sync>() {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test::<Receiver<i32>>();\n    |            ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n@@ -57,7 +57,7 @@ error[E0277]: `std::sync::mpsc::Sender<i32>` cannot be shared between threads sa\n   --> $DIR/not-sync.rs:20:12\n    |\n LL | fn test<T: Sync>() {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test::<Sender<i32>>();\n    |            ^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely"}, {"sha": "1d3675bf1c1f69dfe9d759f7017545b3a6e55f4a", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n   --> $DIR/object-does-not-impl-trait.rs:6:44\n    |\n LL | fn take_foo<F:Foo>(f: F) {}\n-   |    --------   --- required by this bound in `take_foo`\n+   |               --- required by this bound in `take_foo`\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n    |                                            ^ the trait `Foo` is not implemented for `std::boxed::Box<dyn Foo>`\n "}, {"sha": "4c1aaf39c7b34430d9aeaa21d47e226715bda6de", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:14:11\n    |\n LL |   fn f<T: Trait>(x: T) {}\n-   |      -    ----- required by this bound in `f`\n+   |           ----- required by this bound in `f`\n ...\n LL |       let x = || {\n    |  _____________-\n@@ -18,7 +18,7 @@ error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:16:15\n    |\n LL |   fn f<T: Trait>(x: T) {}\n-   |      -    ----- required by this bound in `f`\n+   |           ----- required by this bound in `f`\n ...\n LL |           let y = || {\n    |  _________________-\n@@ -31,7 +31,7 @@ error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:22:15\n    |\n LL |   fn f<T: Trait>(x: T) {}\n-   |      -    ----- required by this bound in `f`\n+   |           ----- required by this bound in `f`\n LL | \n LL | / fn main() {\n LL | |     let x = || {\n@@ -49,7 +49,7 @@ error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:26:7\n    |\n LL |   fn f<T: Trait>(x: T) {}\n-   |      -    ----- required by this bound in `f`\n+   |           ----- required by this bound in `f`\n LL | \n LL | / fn main() {\n LL | |     let x = || {"}, {"sha": "be8efbf2ce4f62babce67ef7c4ffdaa214d5c015", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n   --> $DIR/on-trait.rs:28:30\n    |\n LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n-   |    -------                            ----------------- required by this bound in `collect`\n+   |                                       ----------------- required by this bound in `collect`\n ...\n LL |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n   --> $DIR/on-trait.rs:31:21\n    |\n LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n-   |    ------              --------------- required by this bound in `foobar`\n+   |                        --------------- required by this bound in `foobar`\n ...\n LL |     let x: String = foobar();\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`"}, {"sha": "fd0307f15c79aa95bf5dad28e79052760b918369", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:21:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n-   |    ------    --- required by this bound in `is_zen`\n+   |              --- required by this bound in `is_zen`\n ...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n@@ -20,7 +20,7 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:26:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n-   |    ------    --- required by this bound in `is_zen`\n+   |              --- required by this bound in `is_zen`\n ...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely"}, {"sha": "0237675aee4d5010b674f542bd91fb7806bd38b3", "filename": "src/test/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*const Bar` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   |        ----------    ---- required by this bound in `AssertSync`\n+   |                      ---- required by this bound in `AssertSync`\n ...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Bar` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `*const Foo` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   |        ----------    ---- required by this bound in `AssertSync`\n+   |                      ---- required by this bound in `AssertSync`\n ...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Foo` cannot be shared between threads safely"}, {"sha": "2fd805e64699154a842f92855d2e8279e7ea4313", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   |    --- - required by this bound in `bot`\n+   |        - required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time"}, {"sha": "bcdeed262ecbaef15f43765ac03555b878878446", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -74,7 +74,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |        ---                   -- required by this bound in `Foo::bar`\n+   |                              -- required by this bound in `Foo::bar`\n ...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "fb5e6fbcfe712ee52fb2b55dffc34c296c672b95", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -74,7 +74,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |        ---                   -- required by this bound in `Foo::bar`\n+   |                              -- required by this bound in `Foo::bar`\n ...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "99ba4e2a646e52c82d5ec451cafe1b55483a3918", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL | async fn foo() {}\n    |          --- consider calling this function\n LL | \n LL | fn bar(f: impl Future<Output=()>) {}\n-   |    ---         ----------------- required by this bound in `bar`\n+   |                ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n    |         ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n@@ -19,7 +19,7 @@ error[E0277]: the trait bound `[closure@$DIR/async-fn-ctor-passed-as-arg-where-i\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n    |\n LL | fn bar(f: impl Future<Output=()>) {}\n-   |    ---         ----------------- required by this bound in `bar`\n+   |                ----------------- required by this bound in `bar`\n ...\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure"}, {"sha": "8589a2757e91d4499fde923c63e6babc48b07aaf", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL | fn foo() -> impl T<O=()> { S }\n    |    --- consider calling this function\n LL | \n LL | fn bar(f: impl T<O=()>) {}\n-   |    ---         ------- required by this bound in `bar`\n+   |                ------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n    |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n@@ -19,7 +19,7 @@ error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-shou\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n    |\n LL | fn bar(f: impl T<O=()>) {}\n-   |    ---         ------- required by this bound in `bar`\n+   |                ------- required by this bound in `bar`\n ...\n LL |     let closure = || S;\n    |                   -- consider calling this closure"}, {"sha": "df483b3912d6950a190e3ff1616879da6d93c238", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:12:7\n    |\n LL | fn foo<X: Trait>(_: X) {}\n-   |    ---    ----- required by this bound in `foo`\n+   |           ----- required by this bound in `foo`\n ...\n LL |   foo(&s);\n    |       ^^ the trait `Trait` is not implemented for `&S`\n@@ -18,7 +18,7 @@ error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7\n    |\n LL | fn foo<X: Trait>(_: X) {}\n-   |    ---    ----- required by this bound in `foo`\n+   |           ----- required by this bound in `foo`\n ...\n LL |   foo(s);\n    |       ^ the trait `Trait` is not implemented for `S`"}, {"sha": "7414a7cc24c922e0f7cb1a2dcbbedafa0b55c685", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `&str: std::convert::From<std::string::String>` is\n   --> $DIR/into-str.rs:4:5\n    |\n LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n-   |    ---                        ------------- required by this bound in `foo`\n+   |                               ------------- required by this bound in `foo`\n ...\n LL |     foo(String::new());\n    |     ^^^ the trait `std::convert::From<std::string::String>` is not implemented for `&str`"}, {"sha": "0c52778b0d8861ccd736881dd22a45c984546b11", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `impl Sync` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:4:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(val);\n    |             ^^^ `impl Sync` cannot be sent between threads safely\n@@ -17,7 +17,7 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:8:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n@@ -32,7 +32,7 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:12:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n@@ -47,7 +47,7 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:20:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n@@ -62,7 +62,7 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:24:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n@@ -77,7 +77,7 @@ error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13\n    |\n LL | fn is_send<T: Send>(val: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely"}, {"sha": "446b8dbf1148fff8af5407235f5d55617983b1c0", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -13,7 +13,7 @@ error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:5\n    |\n LL | struct Outer<T: Send>(T);\n-   |        -----    ---- required by this bound in `Outer`\n+   |                 ---- required by this bound in `Outer`\n ...\n LL |     Outer(TestType);\n    |     ^^^^^^^^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n@@ -24,7 +24,7 @@ error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:32:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(TestType);\n    |             ^^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n@@ -35,7 +35,7 @@ error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:40:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send((8, TestType));\n    |             ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n@@ -47,7 +47,7 @@ error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(Box::new(TestType));\n    |             ^^^^^^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:56:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send(Box::new(Outer2(TestType)));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n@@ -77,7 +77,7 @@ error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n-   |    -------    ---- required by this bound in `is_sync`\n+   |               ---- required by this bound in `is_sync`\n ...\n LL |     is_sync(Outer2(TestType));\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "04c86cb240341f43e092d41095321022450a4d6b", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<u32>` cannot be sent between threads safely\n   --> $DIR/trait-alias-cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n-   |    ---------    -------- required by this bound in `use_alias`\n+   |                 -------- required by this bound in `use_alias`\n ...\n LL |     use_alias::<Rc<u32>>();\n    |                 ^^^^^^^ `std::rc::Rc<u32>` cannot be sent between threads safely\n@@ -13,7 +13,7 @@ error[E0277]: `std::rc::Rc<u32>` cannot be shared between threads safely\n   --> $DIR/trait-alias-cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n-   |    ---------    -------- required by this bound in `use_alias`\n+   |                 -------- required by this bound in `use_alias`\n ...\n LL |     use_alias::<Rc<u32>>();\n    |                 ^^^^^^^ `std::rc::Rc<u32>` cannot be shared between threads safely"}, {"sha": "e0df76381e0882377ee68ecc5fc363378f8505b5", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: Foo` is not satisfied\n   --> $DIR/trait-alias-wf.rs:5:14\n    |\n LL | trait A<T: Foo> {}\n-   |       -    --- required by this bound in `A`\n+   |            --- required by this bound in `A`\n LL | trait B<T> = A<T>;\n    |              ^^^^ the trait `Foo` is not implemented for `T`\n    |"}, {"sha": "6ca8ce0707f8c0b88b197c5033e2210ce3a7f3ef", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `u32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:15\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL | fn explode(x: Foo<u32>) {}\n    |               ^^^^^^^^ the trait `Trait` is not implemented for `u32`\n@@ -11,7 +11,7 @@ error[E0277]: the trait bound `f32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:14\n    |\n LL | enum Bar<T:Trait> {\n-   |      ---   ----- required by this bound in `Bar`\n+   |            ----- required by this bound in `Bar`\n ...\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`"}, {"sha": "87271e7f1ee153d8c3e987ca17dd7a236aaaacce", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `u16: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-impls.rs:20:6\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL | impl PolyTrait<Foo<u16>> for Struct {\n    |      ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u16`"}, {"sha": "df016a7727428e47480808b224492408458747b8", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:15:14\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL |     let baz: Foo<usize> = loop { };\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`"}, {"sha": "4b650e78badf99701f2d32bdcbea158fa24eee25", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-static.rs:9:11\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL | static X: Foo<usize> = Foo {\n    |           ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`"}, {"sha": "271ed07ce42ab1455d2f75cd5bf46d98c875ec2b", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:13:9\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL | impl<T> Foo<T> {\n    |         ^^^^^^ the trait `Trait` is not implemented for `T`\n@@ -16,7 +16,7 @@ error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL |     a: Foo<isize>,\n    |     ^^^^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n@@ -25,7 +25,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:23:10\n    |\n LL | enum Bar<T:Trait> {\n-   |      ---   ----- required by this bound in `Bar`\n+   |            ----- required by this bound in `Bar`\n ...\n LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `U: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:27:5\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n@@ -48,7 +48,7 @@ error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n    |\n LL | enum Bar<T:Trait> {\n-   |      ---   ----- required by this bound in `Bar`\n+   |            ----- required by this bound in `Bar`\n ...\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n@@ -62,7 +62,7 @@ error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5\n    |\n LL | struct Foo<T:Trait> {\n-   |        ---   ----- required by this bound in `Foo`\n+   |              ----- required by this bound in `Foo`\n ...\n LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n@@ -71,7 +71,7 @@ error[E0277]: the trait bound `u8: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:39:22\n    |\n LL | enum Bar<T:Trait> {\n-   |      ---   ----- required by this bound in `Bar`\n+   |            ----- required by this bound in `Bar`\n ...\n LL |     DictionaryLike { field: Bar<u8> },\n    |                      ^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u8`"}, {"sha": "a0d2d13fbf3d1fbaa6f3bb8d7e79b3e74f48394a", "filename": "src/test/ui/traits/traits-inductive-overflow-simultaneous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n   --> $DIR/traits-inductive-overflow-simultaneous.rs:18:5\n    |\n LL | fn is_ee<T: Combo>(t: T) {\n-   |    -----    ----- required by this bound in `is_ee`\n+   |             ----- required by this bound in `is_ee`\n ...\n LL |     is_ee(4);\n    |     ^^^^^"}, {"sha": "b97197285ed0c6c98f6ed68ed8603f2f34368d34", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -10,7 +10,7 @@ error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n   --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:16:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   |    ----    ----- required by this bound in `copy`\n+   |            ----- required by this bound in `copy`\n ...\n LL |     let (a, b) = copy(NoClone);\n    |                       ^^^^^^^ the trait `std::marker::Copy` is not implemented for `NoClone`"}, {"sha": "a86648d9a1749618953cecab86b8942fd514c8a1", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `NoClone: Magic`\n   --> $DIR/traits-inductive-overflow-supertrait.rs:13:18\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   |    ----    ----- required by this bound in `copy`\n+   |            ----- required by this bound in `copy`\n ...\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^"}, {"sha": "f66cfce55c90316011b95c3be44dc4abf198ed17", "filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n   --> $DIR/traits-inductive-overflow-two-traits.rs:19:5\n    |\n LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n-   |    ------    ----- required by this bound in `wizard`\n+   |              ----- required by this bound in `wizard`\n ...\n LL |     wizard::<*mut ()>();\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "006fa933d34cadd8671ee2055674e1ed61483357", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -37,7 +37,7 @@ LL |     generic_function(5i32);\n    |                      ^^^^ the trait `Foo` is not implemented for `i32`\n ...\n LL | fn generic_function<T: Foo>(t: T) {}\n-   |    ----------------    --- required by this bound in `generic_function`\n+   |                        --- required by this bound in `generic_function`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ecad5a7d11ab689a8d62941047ba11a42076f0d7", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -30,7 +30,7 @@ LL |     try_trait_generic::<()>();\n    |                         ^^ the trait `std::ops::Try` is not implemented for `()`\n ...\n LL | fn try_trait_generic<T: Try>() -> T {\n-   |    -----------------    --- required by this bound in `try_trait_generic`\n+   |                         --- required by this bound in `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:22:5"}, {"sha": "553318ecac6e24ceeee79b923c4e2164a893a32c", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -1,6 +1,5 @@\n fn foo<T: Into<String>>(x: i32) {}\n //~^ NOTE required by\n-//~| NOTE\n \n fn main() {\n     foo(42);"}, {"sha": "927cc507265fa17f874b7b07fa92ac3796472bc6", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -1,8 +1,8 @@\n error[E0283]: type annotations needed\n-  --> $DIR/type-annotation-needed.rs:6:5\n+  --> $DIR/type-annotation-needed.rs:5:5\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n-   |    ---    ------------ required by this bound in `foo`\n+   |           ------------ required by this bound in `foo`\n ...\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`"}, {"sha": "e2729c65e02c46d3ec4e0863c4b773e2bbf8d313", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   |        ---       --------------- required by this bound in `Foo`\n+   |                  --------------- required by this bound in `Foo`\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n    |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n@@ -12,7 +12,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   |        ---       --------------- required by this bound in `Foo`\n+   |                  --------------- required by this bound in `Foo`\n ...\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n    |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n@@ -50,7 +50,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:25\n    |\n LL | trait Super<T: Copy> { }\n-   |       -----    ---- required by this bound in `Super`\n+   |                ---- required by this bound in `Super`\n LL | trait Base<T = String>: Super<T> { }\n    |                         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |"}, {"sha": "e64acfc54ff2a3ba2f3bad2b5ce7975169c0bf20", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -7,7 +7,7 @@ LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n-   |    -------   ---- required by this bound in `is_send`\n+   |              ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<T as Trait>::AssocType`\n "}, {"sha": "53ba9b8a3f6b4d6bb6f4fc68df651692c9fa4709", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n   --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:5\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n-   |    ----------    ------- required by this bound in `is_mytrait`\n+   |                  ------- required by this bound in `is_mytrait`\n ...\n LL |     is_mytrait::<(MyS2, MyS)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`"}, {"sha": "bc5000049846362e2e770323ca2034d44b57a761", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-constituent-types.rs:21:18\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n-   |    ----------    ------- required by this bound in `is_mytrait`\n+   |                  ------- required by this bound in `is_mytrait`\n ...\n LL |     is_mytrait::<MyS2>();\n    |                  ^^^^ the trait `MyTrait` is not implemented for `MyS2`"}, {"sha": "b6ab36f5159d566ecf2075ce0a8414962341fae1", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `MyNotSendable` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-send.rs:19:15\n    |\n LL | fn is_send<T: Send>() {}\n-   |    -------    ---- required by this bound in `is_send`\n+   |               ---- required by this bound in `is_send`\n ...\n LL |     is_send::<MyNotSendable>();\n    |               ^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely"}, {"sha": "d671b8eb7549b802d6c249bfa1ab7a551d838d2f", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `MyNotSync` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:15\n    |\n LL | fn is_sync<T: Sync>() {}\n-   |    -------    ---- required by this bound in `is_sync`\n+   |               ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyNotSync>();\n    |               ^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n@@ -13,7 +13,7 @@ error[E0277]: `std::cell::UnsafeCell<u8>` cannot be shared between threads safel\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n LL | fn is_sync<T: Sync>() {}\n-   |    -------    ---- required by this bound in `is_sync`\n+   |               ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n@@ -25,7 +25,7 @@ error[E0277]: `Managed` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n LL | fn is_sync<T: Sync>() {}\n-   |    -------    ---- required by this bound in `is_sync`\n+   |               ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely"}, {"sha": "76a6994cb009a42dec9e01aad42d280d253aeb00", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-negation.rs:22:19\n    |\n LL | fn is_my_trait<T: MyTrait>() {}\n-   |    -----------    ------- required by this bound in `is_my_trait`\n+   |                   ------- required by this bound in `is_my_trait`\n ...\n LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n    |                   ^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n@@ -14,7 +14,7 @@ error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-negation.rs:25:26\n    |\n LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n-   |    ------------------    ------------- required by this bound in `is_my_unsafe_trait`\n+   |                          ------------- required by this bound in `is_my_unsafe_trait`\n ...\n LL |     is_my_unsafe_trait::<ThisImplsTrait>();\n    |                          ^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`"}, {"sha": "5962d191292889c3a34fd4509c617ca877dc8d99", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `u32: Signed` is not satisfied\n   --> $DIR/typeck-default-trait-impl-precedence.rs:19:5\n    |\n LL | fn is_defaulted<T:Defaulted>() { }\n-   |    ------------   --------- required by this bound in `is_defaulted`\n+   |                   --------- required by this bound in `is_defaulted`\n ...\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`"}, {"sha": "9cba3578449c30b4444c1d91ed5c578b6a40fb5b", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -5,7 +5,7 @@ LL |     is_send::<T>()\n    |               ^ `T` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n-   |    -------   ---- required by this bound in `is_send`\n+   |              ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider restricting type parameter `T`"}, {"sha": "61585fcc1c8654c346366d3c9ac7c7ecb012eef2", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared betwee\n   --> $DIR/typeck-unsafe-always-share.rs:19:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test(us);\n    |          ^^ `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n@@ -13,7 +13,7 @@ error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads s\n   --> $DIR/typeck-unsafe-always-share.rs:23:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test(uns);\n    |          ^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n@@ -24,7 +24,7 @@ error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads s\n   --> $DIR/typeck-unsafe-always-share.rs:27:5\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test(ms);\n    |     ^^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n@@ -36,7 +36,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:30:10\n    |\n LL | fn test<T: Sync>(s: T) {}\n-   |    ----    ---- required by this bound in `test`\n+   |            ---- required by this bound in `test`\n ...\n LL |     test(NoSync);\n    |          ^^^^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "908d8543851574a9433a3989fcb206f68249a51e", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo\n   --> $DIR/unboxed-closure-sugar-default.rs:21:5\n    |\n LL | fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n-   |    --                                  ----- required by this bound in `eq`\n+   |                                        ----- required by this bound in `eq`\n ...\n LL |     eq::<dyn Foo<(isize,), isize, Output=()>, dyn Foo(isize)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`"}, {"sha": "8ce7e825a1ced7e9608757dac681ad090ee051b4", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Out\n   --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n    |\n LL |   fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n-   |      --                      ----- required by this bound in `eq`\n+   |                              ----- required by this bound in `eq`\n ...\n LL | /     eq::< dyn Foo<(),Output=()>,\n LL | |           dyn Foo(char)                                               >();"}, {"sha": "d427873ebcb60f82183f82827f0cd9870062ef58", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `S`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:21\n    |\n LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n-   |    -------   ---------------- required by this bound in `call_it`\n+   |              ---------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&S, 22);\n    |                     ^^ expected an `Fn<(isize,)>` closure, found `S`"}, {"sha": "b9ee9e460201a371c1dc89536ffb4aec9cb69489", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> unsaf\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |    -------   ----------------- required by this bound in `call_it`\n+   |              ----------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -13,7 +13,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> u\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |    -------               ----- required by this bound in `call_it`\n+   |                          ----- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -24,7 +24,7 @@ error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> un\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |    -----------   -------------------- required by this bound in `call_it_mut`\n+   |                  -------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> u\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |    -----------                  ----- required by this bound in `call_it_mut`\n+   |                                 ----- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n@@ -46,7 +46,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> u\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   |    ------------                   ----- required by this bound in `call_it_once`\n+   |                                   ----- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`"}, {"sha": "654b626cf65ccd6ad447c648d12ae4b4c3256fe4", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> exter\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |    -------   ----------------- required by this bound in `call_it`\n+   |              ----------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -13,7 +13,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> e\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |    -------               ----- required by this bound in `call_it`\n+   |                          ----- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -24,7 +24,7 @@ error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> ex\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |    -----------   -------------------- required by this bound in `call_it_mut`\n+   |                  -------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> e\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |    -----------                  ----- required by this bound in `call_it_mut`\n+   |                                 ----- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n@@ -46,7 +46,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> e\n   --> $DIR/unboxed-closures-wrong-abi.rs:24:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   |    ------------                   ----- required by this bound in `call_it_once`\n+   |                                   ----- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`"}, {"sha": "434c8a579f67139b8702148e8efa8e30eb0cde39", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `unsafe fn(isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |    -------   ----------------- required by this bound in `call_it`\n+   |              ----------------- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -13,7 +13,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:21\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   |    -------               ----- required by this bound in `call_it`\n+   |                          ----- required by this bound in `call_it`\n ...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -24,7 +24,7 @@ error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |    -----------   -------------------- required by this bound in `call_it_mut`\n+   |                  -------------------- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -35,7 +35,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:25\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   |    -----------                  ----- required by this bound in `call_it_mut`\n+   |                                 ----- required by this bound in `call_it_mut`\n ...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n@@ -46,7 +46,7 @@ error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:26\n    |\n LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   |    ------------                   ----- required by this bound in `call_it_once`\n+   |                                   ----- required by this bound in `call_it_once`\n ...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`"}, {"sha": "3ff6f30db2a845c537bee9a76f784c7d116fd40c", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-bare-typaram.rs:2:29\n    |\n LL | fn bar<T: Sized>() { }\n-   |    --- - required by this bound in `bar`\n+   |        - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |"}, {"sha": "f43d00f97398d03c93518a6ac8c56c200b7dcc34", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-enum.rs:6:36\n    |\n LL | enum Foo<U> { FooSome(U), FooNone }\n-   |      --- - required by this bound in `Foo`\n+   |          - required by this bound in `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time"}, {"sha": "808c9c583d458bbf8b682c9b6f17c724026fddd5", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-inherent-impl-self-type.rs:7:17\n    |\n LL | struct S5<Y>(Y);\n-   |        -- - required by this bound in `S5`\n+   |           - required by this bound in `S5`\n LL | \n LL | impl<X: ?Sized> S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time"}, {"sha": "42fc5569eceb47e1cdbb6297961dcc77dfce313b", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-struct.rs:6:36\n    |\n LL | struct Foo<T> { data: T }\n-   |        --- - required by this bound in `Foo`\n+   |            - required by this bound in `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-struct.rs:13:24\n    |\n LL | fn is_sized<T:Sized>() { }\n-   |    -------- - required by this bound in `is_sized`\n+   |             - required by this bound in `is_sized`\n ...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "c2b2fe40ce67f099c0f7a8e8d6440c4607124819", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-trait-impl-self-type.rs:10:17\n    |\n LL | struct S5<Y>(Y);\n-   |        -- - required by this bound in `S5`\n+   |           - required by this bound in `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time"}, {"sha": "cf8459609b6914686c956e39557c648f5773e71d", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -7,7 +7,7 @@ LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   |    -- - required by this bound in `f2`\n+   |       - required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -25,7 +25,7 @@ LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   |    -- - required by this bound in `f4`\n+   |       - required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -38,7 +38,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n-   |    -- - required by this bound in `f5`\n+   |       - required by this bound in `f5`\n ...\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n    |       - this type parameter needs to be `std::marker::Sized`\n@@ -80,7 +80,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:8\n    |\n LL | fn f5<Y>(x: &Y) {}\n-   |    -- - required by this bound in `f5`\n+   |       - required by this bound in `f5`\n ...\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n    |        - this type parameter needs to be `std::marker::Sized`"}, {"sha": "1b7f8b6fca1009a153c62f69f8d8e6c5a87a8ab2", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n   --> $DIR/wf-const-type.rs:10:12\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n-   |        ------   ---- required by this bound in `IsCopy`\n+   |                 ---- required by this bound in `IsCopy`\n ...\n LL | const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`"}, {"sha": "962a1b839a792e421f19337e23c647114d1782f1", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-bound.rs:10:14\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "0a3665fcf0436b191cff8afab827dbbb2868c1a8", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-fields-struct-variant.rs:13:9\n    |\n LL | struct IsCopy<T:Copy> {\n-   |        ------   ---- required by this bound in `IsCopy`\n+   |                 ---- required by this bound in `IsCopy`\n ...\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`"}, {"sha": "a833eeacbdf9cf39d6a5b6de00a5a59deadce9bd", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-fields.rs:12:17\n    |\n LL | struct IsCopy<T:Copy> {\n-   |        ------   ---- required by this bound in `IsCopy`\n+   |                 ---- required by this bound in `IsCopy`\n ...\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`"}, {"sha": "59a4f9bad9dfa40c6f3f74cecb46286fc1e3b861", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-fn-where-clause.rs:8:24\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n LL | \n LL | fn foo<T,U>() where T: ExtraCopy<U>\n    |                        ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n@@ -19,7 +19,7 @@ LL | fn bar() where Vec<dyn Copy>:, {}\n    |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n ...\n LL | struct Vec<T> {\n-   |        --- - required by this bound in `Vec`\n+   |            - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "89399e30cad4504b034ca56523a3243f86d0a727", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: MyHash` is not satisfied\n   --> $DIR/wf-impl-associated-type-trait.rs:17:5\n    |\n LL | pub struct MySet<T:MyHash> {\n-   |            -----   ------ required by this bound in `MySet`\n+   |                    ------ required by this bound in `MySet`\n ...\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`"}, {"sha": "84adf04a68a2bdc363cc65a62a47b42a0dd72080", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-arg.rs:10:14\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   |        ----------   ---- required by this bound in `MustBeCopy`\n+   |                     ---- required by this bound in `MustBeCopy`\n ...\n LL | fn bar<T>(_: &MustBeCopy<T>)\n    |              ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "68ef734be55994af1808338a44093b30170e324c", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-ret.rs:10:16\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   |        ----------   ---- required by this bound in `MustBeCopy`\n+   |                     ---- required by this bound in `MustBeCopy`\n ...\n LL | fn bar<T>() -> MustBeCopy<T>\n    |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "c0bb3a50b1f1eb7a09e2f8246e4271703a3aff1e", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-type-arg.rs:9:5\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   |        ----------   ---- required by this bound in `MustBeCopy`\n+   |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "e203058250790776ea76103ab6bb71afdaaec627", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-type-ret.rs:9:5\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   |        ----------   ---- required by this bound in `MustBeCopy`\n+   |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "41cfb1863104ba0988bb85ad82c4f542d48097da", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-where-clause.rs:10:14\n    |\n LL | trait MustBeCopy<T:Copy> {\n-   |       ----------   ---- required by this bound in `MustBeCopy`\n+   |                    ---- required by this bound in `MustBeCopy`\n ...\n LL |     where T: MustBeCopy<U>\n    |              ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "6d85cdde7f99191552029c12d7d32a9671e9d29b", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-obj-type-trait.rs:11:5\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   |        ----------   ---- required by this bound in `MustBeCopy`\n+   |                     ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "1a2a20ec6845c6e7634a3481d43288efb4b2cfea", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-inherent-impl-method-where-clause.rs:12:27\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n ...\n LL |     fn foo(self) where T: ExtraCopy<U>\n    |                           ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "ba1d4a036c6bffbfe8085dee98c700cc852b2daf", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-inherent-impl-where-clause.rs:11:29\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n ...\n LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n    |                             ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "4e78090f998485eecbd01dd1b14df18cfc0c31e7", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n   --> $DIR/wf-static-type.rs:10:13\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n-   |        ------   ---- required by this bound in `IsCopy`\n+   |                 ---- required by this bound in `IsCopy`\n ...\n LL | static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`"}, {"sha": "d9d193aa79d0cb12d916ed6a1b094c114ed77d65", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-struct-bound.rs:10:14\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "cda3b8fe4fddb2a0b701afe67452b83490febb56", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-struct-field.rs:12:5\n    |\n LL | struct IsCopy<T:Copy> {\n-   |        ------   ---- required by this bound in `IsCopy`\n+   |                 ---- required by this bound in `IsCopy`\n ...\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`"}, {"sha": "a4ceb41ffa5b98917dd5071fdd706c8ece47ac1c", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-associated-type-bound.rs:10:17\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n ...\n LL |     type Type1: ExtraCopy<T>;\n    |                 ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "70cf88f262fdc15a9c48a5d5be29299eb6d6c196", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `<Self as SomeTrait>::Type1: std::marker::Copy` is\n   --> $DIR/wf-trait-associated-type-trait.rs:11:5\n    |\n LL | struct IsCopy<T:Copy> { x: T }\n-   |        ------   ---- required by this bound in `IsCopy`\n+   |                 ---- required by this bound in `IsCopy`\n LL | \n LL | trait SomeTrait {\n    |                - help: consider further restricting the associated type: `where <Self as SomeTrait>::Type1: std::marker::Copy`"}, {"sha": "384d668d8004385f5c78ce4a8a6b95962916e99c", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-bound.rs:10:14\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "ed563af592816345f138bb4c8c7a3a2abffacf5e", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-arg.rs:11:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |        ---   -- required by this bound in `Bar`\n+   |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>) {\n    |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "57cf1e9e6dae36787b231fd6520366a575f3da80", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-ret.rs:11:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |        ---   -- required by this bound in `Bar`\n+   |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) -> Bar<Self> {\n    |                      ^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "534bf4d3448363eb29e18721a9c54f47bf9b2aa2", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-where-clause.rs:11:31\n    |\n LL | trait Bar<T:Eq+?Sized> { }\n-   |       ---   -- required by this bound in `Bar`\n+   |             -- required by this bound in `Bar`\n ...\n LL |     fn bar<A>(&self) where A: Bar<Self> {\n    |                               ^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`"}, {"sha": "494619a2f291ef38c01b25a19bc776c2a6f0f001", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-arg.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |        ---   -- required by this bound in `Bar`\n+   |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n    |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "6a3381d9a22f6e25d90536ada07fefbb3b198a3a", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-ret.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |        ---   -- required by this bound in `Bar`\n+   |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n    |                      ^^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "2d6cf838f083ed829647449383620f90cc3ca3e5", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-where-clause.rs:10:49\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   |        ---   -- required by this bound in `Bar`\n+   |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n    |                                                 ^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`"}, {"sha": "7d99b8f5a2ae82413cfc18cbe1b9670b633d664f", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-superbound.rs:9:21\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   |       ---------   ---- required by this bound in `ExtraCopy`\n+   |                   ---- required by this bound in `ExtraCopy`\n LL | \n LL | trait SomeTrait<T>: ExtraCopy<T> {\n    |                     ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "7e881074702829f65cfc86cdf3369916398b11b6", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:13:22\n    |\n LL | fn require_copy<T: Copy>(x: T) {}\n-   |    ------------    ---- required by this bound in `require_copy`\n+   |                    ---- required by this bound in `require_copy`\n ...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "3558d779d9ddf1c580847893a25110a9d3802503", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:18:22\n    |\n LL | fn require_copy<T: Copy>(x: T) {}\n-   |    ------------    ---- required by this bound in `require_copy`\n+   |                    ---- required by this bound in `require_copy`\n ...\n LL |         require_copy(self.x);\n    |                      ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "e92a8fc83df03c6b902a02ef690236933be64715", "filename": "src/test/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d605a9d9695955324760194f18ec46e7f7824105/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=d605a9d9695955324760194f18ec46e7f7824105", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Struct: std::cmp::Eq` is not satisfied\n   --> $DIR/where-clauses-unsatisfied.rs:6:10\n    |\n LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n-   |    -----                                    -- required by this bound in `equal`\n+   |                                             -- required by this bound in `equal`\n ...\n LL |     drop(equal(&Struct, &Struct))\n    |          ^^^^^ the trait `std::cmp::Eq` is not implemented for `Struct`"}]}