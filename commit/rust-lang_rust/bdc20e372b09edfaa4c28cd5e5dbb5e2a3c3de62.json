{"sha": "bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYzIwZTM3MmIwOWVkZmFhNGMyOGNkNWU1ZGJiNWUyYTNjM2RlNjI=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-20T10:48:56Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-22T11:20:29Z"}, "message": "Use instrument debugging for more readable logs", "tree": {"sha": "9eda2c9bdc4fbbc81a9ff1edf7256dcb55230182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eda2c9bdc4fbbc81a9ff1edf7256dcb55230182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62", "html_url": "https://github.com/rust-lang/rust/commit/bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "html_url": "https://github.com/rust-lang/rust/commit/6d76002baf9d03372b05c96c7cdd7e89c501bdb0"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "95c81c5c729be5be29ea0fafb84f7d5c66242d19", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=bdc20e372b09edfaa4c28cd5e5dbb5e2a3c3de62", "patch": "@@ -83,6 +83,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n }\n \n /// Whether member constraints should be generated for all opaque types\n+#[derive(Debug)]\n pub enum GenerateMemberConstraints {\n     /// The default, used by typeck\n     WhenRequired,\n@@ -354,8 +355,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         opaque_types: &OpaqueTypeMap<'tcx>,\n         free_region_relations: &FRR,\n     ) {\n-        debug!(\"constrain_opaque_types()\");\n-\n         for &(opaque_type_key, opaque_defn) in opaque_types {\n             self.constrain_opaque_type(\n                 opaque_type_key,\n@@ -367,6 +366,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     }\n \n     /// See `constrain_opaque_types` for documentation.\n+    #[instrument(level = \"debug\", skip(self, free_region_relations))]\n     fn constrain_opaque_type<FRR: FreeRegionRelations<'tcx>>(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n@@ -376,15 +376,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let def_id = opaque_type_key.def_id;\n \n-        debug!(\"constrain_opaque_type()\");\n-        debug!(\"constrain_opaque_type: def_id={:?}\", def_id);\n-        debug!(\"constrain_opaque_type: opaque_defn={:#?}\", opaque_defn);\n-\n         let tcx = self.tcx;\n \n         let concrete_ty = self.resolve_vars_if_possible(opaque_defn.concrete_ty);\n \n-        debug!(\"constrain_opaque_type: concrete_ty={:?}\", concrete_ty);\n+        debug!(?concrete_ty);\n \n         let first_own_region = match opaque_defn.origin {\n             hir::OpaqueTyOrigin::FnReturn | hir::OpaqueTyOrigin::AsyncFn => {\n@@ -397,7 +393,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // type foo::<'p0..'pn>::Foo<'q0..'qm>\n                 // fn foo<l0..'ln>() -> foo::<'static..'static>::Foo<'l0..'lm>.\n                 //\n-                // For these types we onlt iterate over `'l0..lm` below.\n+                // For these types we only iterate over `'l0..lm` below.\n                 tcx.generics_of(def_id).parent_count\n             }\n             // These opaque type inherit all lifetime parameters from their\n@@ -410,10 +406,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // If there are required region bounds, we can use them.\n         if opaque_defn.has_required_region_bounds {\n             let bounds = tcx.explicit_item_bounds(def_id);\n-            debug!(\"constrain_opaque_type: predicates: {:#?}\", bounds);\n+            debug!(\"{:#?}\", bounds);\n             let bounds: Vec<_> =\n                 bounds.iter().map(|(bound, _)| bound.subst(tcx, opaque_type_key.substs)).collect();\n-            debug!(\"constrain_opaque_type: bounds={:#?}\", bounds);\n+            debug!(\"{:#?}\", bounds);\n             let opaque_type = tcx.mk_opaque(def_id, opaque_type_key.substs);\n \n             let required_region_bounds =\n@@ -452,8 +448,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n             // Compute the least upper bound of it with the other regions.\n-            debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n-            debug!(\"constrain_opaque_types: subst_region={:?}\", subst_region);\n+            debug!(?least_region);\n+            debug!(?subst_region);\n             match least_region {\n                 None => least_region = Some(subst_region),\n                 Some(lr) => {\n@@ -484,7 +480,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         let least_region = least_region.unwrap_or(tcx.lifetimes.re_static);\n-        debug!(\"constrain_opaque_types: least_region={:?}\", least_region);\n+        debug!(?least_region);\n \n         if let GenerateMemberConstraints::IfNoStaticBound = mode {\n             if least_region != tcx.lifetimes.re_static {"}]}