{"sha": "e7d2393d0182f9837897723e1541c0404bdcd55b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDIzOTNkMDE4MmY5ODM3ODk3NzIzZTE1NDFjMDQwNGJkY2Q1NWI=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-10T16:08:48Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-02T09:40:24Z"}, "message": "Move transmute_float_to_int to its own module", "tree": {"sha": "24269a53e7b0f5ee962a3c3dd4ea4ba57ec9eb47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24269a53e7b0f5ee962a3c3dd4ea4ba57ec9eb47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d2393d0182f9837897723e1541c0404bdcd55b", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmA+CAgACgkQHKDfKvWd\naKX45w//d+7P+K/RVtKUmAsFBrbgvVpvn6Ell1yDhLOBZWAzDDz3MOOUFMz6ARig\nuqmjztLsmCv4WLq+M7r0mZ84cRv0mnGGgRaQY7/Bdx6c9b3ZKW2WxOMDn9MGqcsw\nzSxgYzk6idbg5UOxKuhbhAWSLxosbzub9k5sUjUAQ4uFEMAieSO42PhpwshlcuHI\nvsfhjtdMLtdyudGtiXgO2qCwGWxt/DnGZTO0iyIQ8MpefTUvAouycWuRfpCjeQu+\n/wSzqeKYDhctES5HGdVRh5SOF3j+PKU1UXd2mckbZVxVi+HxbFA5NSXsQ7peJW5R\nXvSeZQlDlwcsxKCMCyUJfaO9gTJMSeAJtGN5WUA3T4bI+/LWwJGedWaihzUjKZtH\nUkZCHFGNy61hPd3hiCFQWlx810+VTsrLE7wU/OFaBCXySWNYFCV483FfK+WoaM/F\nSi0KgEnAZERuDE2woJqCW4/lgxuv1onPUQdhIIkVXVwbsy1Rs+7cNVvL8oY+I7+p\nzSIyFgEt+kbdWe0QAZ6rckV17Ku0j6YrJP2AgQoDQGpbbPo9upw2n9z5m/c4rUiB\nAAry1Gk8cO8TLG8N6ULpTAvPw04WTuI2M92ydk19Jv1/bPyvGO0w50jNmtNFIsd0\nLvC/jK0cIvG+ZWmFDSeuCHXdJhChoQs1fgFnlObNE8eRiS3dPBs=\n=CMtp\n-----END PGP SIGNATURE-----", "payload": "tree 24269a53e7b0f5ee962a3c3dd4ea4ba57ec9eb47\nparent acedc7b8f261e97ea544b7d43a053312e55e6ebf\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1612973328 +0900\ncommitter flip1995 <philipp.krones@embecosm.com> 1614678024 +0100\n\nMove transmute_float_to_int to its own module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d2393d0182f9837897723e1541c0404bdcd55b", "html_url": "https://github.com/rust-lang/rust/commit/e7d2393d0182f9837897723e1541c0404bdcd55b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d2393d0182f9837897723e1541c0404bdcd55b/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acedc7b8f261e97ea544b7d43a053312e55e6ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/acedc7b8f261e97ea544b7d43a053312e55e6ebf", "html_url": "https://github.com/rust-lang/rust/commit/acedc7b8f261e97ea544b7d43a053312e55e6ebf"}], "stats": {"total": 115, "additions": 71, "deletions": 44}, "files": [{"sha": "3ba0872393d0d73e6fd4d93b488b4327cc2fdcc3", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e7d2393d0182f9837897723e1541c0404bdcd55b/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d2393d0182f9837897723e1541c0404bdcd55b/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=e7d2393d0182f9837897723e1541c0404bdcd55b", "patch": "@@ -1,4 +1,5 @@\n mod crosspointer_transmute;\n+mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n@@ -390,52 +391,12 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 if triggered {\n                     return;\n                 }\n+                let triggered = transmute_float_to_int::check(cx, e, from_ty, to_ty, args, const_context);\n+                if triggered {\n+                    return;\n+                }\n \n                 match (&from_ty.kind(), &to_ty.kind()) {\n-                    (ty::Float(float_ty), ty::Int(_) | ty::Uint(_)) if !const_context => span_lint_and_then(\n-                        cx,\n-                        TRANSMUTE_FLOAT_TO_INT,\n-                        e.span,\n-                        &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                        |diag| {\n-                            let mut expr = &args[0];\n-                            let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n-\n-                            if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n-                                expr = &inner_expr;\n-                            }\n-\n-                            if_chain! {\n-                                // if the expression is a float literal and it is unsuffixed then\n-                                // add a suffix so the suggestion is valid and unambiguous\n-                                let op = format!(\"{}{}\", arg, float_ty.name_str()).into();\n-                                if let ExprKind::Lit(lit) = &expr.kind;\n-                                if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n-                                then {\n-                                    match arg {\n-                                        sugg::Sugg::MaybeParen(_) => arg = sugg::Sugg::MaybeParen(op),\n-                                        _ => arg = sugg::Sugg::NonParen(op)\n-                                    }\n-                                }\n-                            }\n-\n-                            arg = sugg::Sugg::NonParen(format!(\"{}.to_bits()\", arg.maybe_par()).into());\n-\n-                            // cast the result of `to_bits` if `to_ty` is signed\n-                            arg = if let ty::Int(int_ty) = to_ty.kind() {\n-                                arg.as_ty(int_ty.name_str().to_string())\n-                            } else {\n-                                arg\n-                            };\n-\n-                            diag.span_suggestion(\n-                                e.span,\n-                                \"consider using\",\n-                                arg.to_string(),\n-                                Applicability::Unspecified,\n-                            );\n-                        },\n-                    ),\n                     (ty::Adt(from_adt, from_substs), ty::Adt(to_adt, to_substs)) => {\n                         if from_adt.did != to_adt.did ||\n                                 !COLLECTIONS.iter().any(|path| match_def_path(cx, to_adt.did, path)) {"}, {"sha": "58cd0e217925b7a08c10fcea4ca0a280a5ba1cd6", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e7d2393d0182f9837897723e1541c0404bdcd55b/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d2393d0182f9837897723e1541c0404bdcd55b/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=e7d2393d0182f9837897723e1541c0404bdcd55b", "patch": "@@ -0,0 +1,66 @@\n+use super::TRANSMUTE_FLOAT_TO_INT;\n+use crate::utils::{span_lint_and_then, sugg};\n+use if_chain::if_chain;\n+use rustc_ast as ast;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, UnOp};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_middle::ty::Ty;\n+\n+/// Checks for `transmute_float_to_int` lint.\n+/// Returns `true` if it's triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    args: &'tcx [Expr<'_>],\n+    const_context: bool,\n+) -> bool {\n+    match (&from_ty.kind(), &to_ty.kind()) {\n+        (ty::Float(float_ty), ty::Int(_) | ty::Uint(_)) if !const_context => {\n+            span_lint_and_then(\n+                cx,\n+                TRANSMUTE_FLOAT_TO_INT,\n+                e.span,\n+                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                |diag| {\n+                    let mut expr = &args[0];\n+                    let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n+\n+                    if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n+                        expr = &inner_expr;\n+                    }\n+\n+                    if_chain! {\n+                        // if the expression is a float literal and it is unsuffixed then\n+                        // add a suffix so the suggestion is valid and unambiguous\n+                        let op = format!(\"{}{}\", arg, float_ty.name_str()).into();\n+                        if let ExprKind::Lit(lit) = &expr.kind;\n+                        if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n+                        then {\n+                            match arg {\n+                                sugg::Sugg::MaybeParen(_) => arg = sugg::Sugg::MaybeParen(op),\n+                                _ => arg = sugg::Sugg::NonParen(op)\n+                            }\n+                        }\n+                    }\n+\n+                    arg = sugg::Sugg::NonParen(format!(\"{}.to_bits()\", arg.maybe_par()).into());\n+\n+                    // cast the result of `to_bits` if `to_ty` is signed\n+                    arg = if let ty::Int(int_ty) = to_ty.kind() {\n+                        arg.as_ty(int_ty.name_str().to_string())\n+                    } else {\n+                        arg\n+                    };\n+\n+                    diag.span_suggestion(e.span, \"consider using\", arg.to_string(), Applicability::Unspecified);\n+                },\n+            );\n+            true\n+        },\n+        _ => false,\n+    }\n+}"}]}