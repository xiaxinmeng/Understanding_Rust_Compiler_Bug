{"sha": "08594515926df9b23b912628d9f8c814a30edcb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTk0NTE1OTI2ZGY5YjIzYjkxMjYyOGQ5ZjhjODE0YTMwZWRjYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T22:59:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T22:59:38Z"}, "message": "Auto merge of #68580 - Mark-Simulacrum:rollup-r80xhus, r=Mark-Simulacrum\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #68459 (don't clone types that are copy, round two.)\n - #68576 (update miri)\n - #68579 (Update cargo)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d5ea474ad7e586d27599a3049e78809a4ebd5627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ea474ad7e586d27599a3049e78809a4ebd5627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08594515926df9b23b912628d9f8c814a30edcb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08594515926df9b23b912628d9f8c814a30edcb7", "html_url": "https://github.com/rust-lang/rust/commit/08594515926df9b23b912628d9f8c814a30edcb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08594515926df9b23b912628d9f8c814a30edcb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a79d08fa57e1c257d647c9848e35defcb379c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a79d08fa57e1c257d647c9848e35defcb379c07", "html_url": "https://github.com/rust-lang/rust/commit/8a79d08fa57e1c257d647c9848e35defcb379c07"}, {"sha": "b0f5f670b3a1d022468f165462ea68d725320ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f5f670b3a1d022468f165462ea68d725320ee8", "html_url": "https://github.com/rust-lang/rust/commit/b0f5f670b3a1d022468f165462ea68d725320ee8"}], "stats": {"total": 351, "additions": 157, "deletions": 194}, "files": [{"sha": "265e45635cf5359549c76d6ee08d686e3b53707b", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -19,7 +19,7 @@ fn const_vars_since_snapshot<'tcx>(\n     (\n         range.start..range.end,\n         (range.start.index..range.end.index)\n-            .map(|index| table.probe_value(ConstVid::from_index(index)).origin.clone())\n+            .map(|index| table.probe_value(ConstVid::from_index(index)).origin)\n             .collect(),\n     )\n }"}, {"sha": "4b1f8a5be14f37c4e0ee80cb8be0904d024d59d5", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -611,7 +611,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n             errors.push(RegionResolutionError::GenericBoundFailure(\n                 verify.origin.clone(),\n-                verify.kind.clone(),\n+                verify.kind,\n                 sub,\n             ));\n         }\n@@ -761,7 +761,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n             for upper_bound in &upper_bounds {\n                 if !self.region_rels.is_subregion_of(effective_lower_bound, upper_bound.region) {\n-                    let origin = self.var_infos[node_idx].origin.clone();\n+                    let origin = self.var_infos[node_idx].origin;\n                     debug!(\n                         \"region inference error at {:?} for {:?}: SubSupConflict sub: {:?} \\\n                          sup: {:?}\","}, {"sha": "27ed3c7813892e233340e90ce8ed28679091cf07", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -832,7 +832,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         (\n             range.clone(),\n             (range.start.index()..range.end.index())\n-                .map(|index| self.var_infos[ty::RegionVid::from(index)].origin.clone())\n+                .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)\n                 .collect(),\n         )\n     }"}, {"sha": "8ea1b705d443d6fb19084345603c2670a8379233", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         (\n             range.start.vid..range.end.vid,\n             (range.start.vid.index..range.end.vid.index)\n-                .map(|index| self.values.get(index as usize).origin.clone())\n+                .map(|index| self.values.get(index as usize).origin)\n                 .collect(),\n         )\n     }"}, {"sha": "c9a89aae86fd8234b30e077b8f08b1217b61df26", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1988,7 +1988,7 @@ impl<'tcx> Operand<'tcx> {\n     pub fn to_copy(&self) -> Self {\n         match *self {\n             Operand::Copy(_) | Operand::Constant(_) => self.clone(),\n-            Operand::Move(ref place) => Operand::Copy(place.clone()),\n+            Operand::Move(place) => Operand::Copy(place),\n         }\n     }\n }\n@@ -2462,11 +2462,15 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n         let projs: Vec<_> = self\n             .projs\n             .iter()\n-            .map(|elem| match elem {\n+            .map(|&elem| match elem {\n                 Deref => Deref,\n-                Field(f, ()) => Field(f.clone(), ()),\n+                Field(f, ()) => Field(f, ()),\n                 Index(()) => Index(()),\n-                elem => elem.clone(),\n+                Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n+                ConstantIndex { offset, min_length, from_end } => {\n+                    ConstantIndex { offset, min_length, from_end }\n+                }\n+                Subslice { from, to, from_end } => Subslice { from, to, from_end },\n             })\n             .collect();\n \n@@ -2862,11 +2866,15 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         use crate::mir::ProjectionElem::*;\n \n-        match self {\n+        match *self {\n             Deref => Deref,\n-            Field(f, ty) => Field(*f, ty.fold_with(folder)),\n+            Field(f, ty) => Field(f, ty.fold_with(folder)),\n             Index(v) => Index(v.fold_with(folder)),\n-            elem => elem.clone(),\n+            Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n+            ConstantIndex { offset, min_length, from_end } => {\n+                ConstantIndex { offset, min_length, from_end }\n+            }\n+            Subslice { from, to, from_end } => Subslice { from, to, from_end },\n         }\n     }\n \n@@ -2911,7 +2919,7 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Constant {\n-            span: self.span.clone(),\n+            span: self.span,\n             user_ty: self.user_ty.fold_with(folder),\n             literal: self.literal.fold_with(folder),\n         }"}, {"sha": "d19732664635f68c21b13789ba81459658890d0f", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -362,7 +362,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn codegen_dep_node(&self, tcx: TyCtxt<'tcx>) -> DepNode {\n-        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n+        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name()))\n     }\n }\n "}, {"sha": "fdb6432f7c9e1e5b3264dcc52876e901fbaecf7e", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -535,7 +535,7 @@ impl AutoTraitFinder<'tcx> {\n         }\n \n         while !vid_map.is_empty() {\n-            let target = vid_map.keys().next().expect(\"Keys somehow empty\").clone();\n+            let target = *vid_map.keys().next().expect(\"Keys somehow empty\");\n             let deps = vid_map.remove(&target).expect(\"Entry somehow missing\");\n \n             for smaller in deps.smaller.iter() {"}, {"sha": "28084c9d4ac491f33c1eaf5fecd11055b61fb638", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -54,10 +54,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     span,\n                     predicates\n                         .iter()\n-                        .map(|predicate| ErrorDescriptor {\n-                            predicate: predicate.clone(),\n-                            index: None,\n-                        })\n+                        .map(|&predicate| ErrorDescriptor { predicate, index: None })\n                         .collect(),\n                 )\n             })\n@@ -73,7 +70,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             error_map.entry(span).or_default().push(ErrorDescriptor {\n-                predicate: error.obligation.predicate.clone(),\n+                predicate: error.obligation.predicate,\n                 index: Some(index),\n             });\n \n@@ -137,7 +134,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        for implication in super::elaborate_predicates(self.tcx, vec![cond.clone()]) {\n+        for implication in super::elaborate_predicates(self.tcx, vec![*cond]) {\n             if let ty::Predicate::Trait(implication, _) = implication {\n                 let error = error.to_poly_trait_ref();\n                 let implication = implication.to_poly_trait_ref();"}, {"sha": "3085837335abe58c0368bb09f7683505879c41eb", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 let normalized_ty = normalize_projection_type(\n                     self.selcx,\n                     self.param_env,\n-                    data.clone(),\n+                    *data,\n                     self.cause.clone(),\n                     self.depth,\n                     &mut self.obligations,\n@@ -433,7 +433,7 @@ pub fn normalize_projection_type<'a, 'b, 'tcx>(\n     opt_normalize_projection_type(\n         selcx,\n         param_env,\n-        projection_ty.clone(),\n+        projection_ty,\n         cause.clone(),\n         depth,\n         obligations,"}, {"sha": "ba0a270638cd1bc5ceb85ce10ed6dcc476d2701a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -2068,7 +2068,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                _ => candidates.vec.push(AutoImplCandidate(def_id.clone())),\n+                _ => candidates.vec.push(AutoImplCandidate(def_id)),\n             }\n         }\n \n@@ -2132,10 +2132,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // but `Foo` is declared as `trait Foo: Bar<u32>`.\n             let upcast_trait_refs = util::supertraits(self.tcx(), poly_trait_ref)\n                 .filter(|upcast_trait_ref| {\n-                    self.infcx.probe(|_| {\n-                        let upcast_trait_ref = upcast_trait_ref.clone();\n-                        self.match_poly_trait_ref(obligation, upcast_trait_ref).is_ok()\n-                    })\n+                    self.infcx\n+                        .probe(|_| self.match_poly_trait_ref(obligation, *upcast_trait_ref).is_ok())\n                 })\n                 .count();\n \n@@ -2243,7 +2241,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let def_id = obligation.predicate.def_id();\n \n         if self.tcx().is_trait_alias(def_id) {\n-            candidates.vec.push(TraitAliasCandidate(def_id.clone()));\n+            candidates.vec.push(TraitAliasCandidate(def_id));\n         }\n \n         Ok(())\n@@ -3249,7 +3247,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation_trait_ref: ty::PolyTraitRef<'tcx>,\n         expected_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n-        let obligation_trait_ref = obligation_trait_ref.clone();\n         self.infcx\n             .at(&obligation_cause, obligation_param_env)\n             .sup(obligation_trait_ref, expected_trait_ref)"}, {"sha": "ae1a5e3efa2a775c368109c6639ce1d6237f68e2", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -526,11 +526,11 @@ pub fn predicates_for_generics<'tcx>(\n     generic_bounds\n         .predicates\n         .iter()\n-        .map(|predicate| Obligation {\n+        .map(|&predicate| Obligation {\n             cause: cause.clone(),\n             recursion_depth,\n             param_env,\n-            predicate: predicate.clone(),\n+            predicate,\n         })\n         .collect()\n }"}, {"sha": "9fa3c87477951ba49219c492f7d1f786a119df81", "filename": "src/librustc/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -318,8 +318,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         if let Elaborate::All = elaborate {\n             let trait_assoc_items = tcx.associated_items(trait_ref.def_id);\n \n-            let predicates =\n-                obligations.iter().map(|obligation| obligation.predicate.clone()).collect();\n+            let predicates = obligations.iter().map(|obligation| obligation.predicate).collect();\n             let implied_obligations = traits::elaborate_predicates(tcx, predicates);\n             let implied_obligations = implied_obligations.map(|pred| {\n                 let mut cause = cause.clone();"}, {"sha": "355df86046f4396db151e901321e16a325932a1d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1294,7 +1294,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // statements within the query system and we'd run into endless\n         // recursion otherwise.\n         let (crate_name, crate_disambiguator) = if def_id.is_local() {\n-            (self.crate_name.clone(), self.sess.local_crate_disambiguator())\n+            (self.crate_name, self.sess.local_crate_disambiguator())\n         } else {\n             (\n                 self.cstore.crate_name_untracked(def_id.krate),"}, {"sha": "4889f751f601b9ebaa305078a033b4ea505e9d15", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1326,7 +1326,7 @@ pub trait ToPolyTraitRef<'tcx> {\n \n impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n-        ty::Binder::dummy(self.clone())\n+        ty::Binder::dummy(*self)\n     }\n }\n \n@@ -1372,19 +1372,19 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&PolyTraitRef<'tcx>> {\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n-        Predicate::RegionOutlives(self.clone())\n+        Predicate::RegionOutlives(*self)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n-        Predicate::TypeOutlives(self.clone())\n+        Predicate::TypeOutlives(*self)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n-        Predicate::Projection(self.clone())\n+        Predicate::Projection(*self)\n     }\n }\n "}, {"sha": "dffe86d946212f956177312605556455bb169abf", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -838,7 +838,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n \n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n         // Note that we preserve binding levels\n-        Binder(ty::TraitPredicate { trait_ref: self.skip_binder().clone() })\n+        Binder(ty::TraitPredicate { trait_ref: *self.skip_binder() })\n     }\n }\n "}, {"sha": "a9298abe2d759217118df2ac8b5c52fdadad1e62", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Before consuming the expressions, we have to remember spans for\n         // count arguments as they are now generated separate from other\n         // arguments, hence have no access to the `P<ast::Expr>`'s.\n-        let spans_pos: Vec<_> = self.args.iter().map(|e| e.span.clone()).collect();\n+        let spans_pos: Vec<_> = self.args.iter().map(|e| e.span).collect();\n \n         // Right now there is a bug such that for the expression:\n         //      foo(bar(&1))"}, {"sha": "bf660d188b2879522945278723ea2b2dbd6e01ef", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -400,7 +400,7 @@ pub trait Emitter {\n             }\n             if sm.span_to_filename(sp_label.span.clone()).is_macros() && !always_backtrace {\n                 if let Some(use_site) = sp_label.span.macro_backtrace().last() {\n-                    before_after.push((sp_label.span.clone(), use_site.call_site.clone()));\n+                    before_after.push((sp_label.span, use_site.call_site));\n                 }\n             }\n         }\n@@ -1184,13 +1184,13 @@ impl EmitterWriter {\n             let level_str = level.to_string();\n             // The failure note level itself does not provide any useful diagnostic information\n             if *level != Level::FailureNote && !level_str.is_empty() {\n-                buffer.append(0, &level_str, Style::Level(level.clone()));\n+                buffer.append(0, &level_str, Style::Level(*level));\n             }\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n-                buffer.append(0, \"[\", Style::Level(level.clone()));\n-                buffer.append(0, &code, Style::Level(level.clone()));\n-                buffer.append(0, \"]\", Style::Level(level.clone()));\n+                buffer.append(0, \"[\", Style::Level(*level));\n+                buffer.append(0, &code, Style::Level(*level));\n+                buffer.append(0, \"]\", Style::Level(*level));\n             }\n             if *level != Level::FailureNote && !level_str.is_empty() {\n                 buffer.append(0, \": \", header_style);\n@@ -1495,7 +1495,7 @@ impl EmitterWriter {\n         // Render the suggestion message\n         let level_str = level.to_string();\n         if !level_str.is_empty() {\n-            buffer.append(0, &level_str, Style::Level(level.clone()));\n+            buffer.append(0, &level_str, Style::Level(*level));\n             buffer.append(0, \": \", Style::HeaderMsg);\n         }\n         self.msg_to_buffer("}, {"sha": "521657ea49ca8917255ec502139ea9da92dbe259", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -691,7 +691,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let root_place_projection = self.infcx.tcx.intern_place_elems(root_place.projection);\n \n         if self.access_place_error_reported.contains(&(\n-            Place { local: root_place.local.clone(), projection: root_place_projection },\n+            Place { local: *root_place.local, projection: root_place_projection },\n             borrow_span,\n         )) {\n             debug!(\n@@ -702,7 +702,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n \n         self.access_place_error_reported.insert((\n-            Place { local: root_place.local.clone(), projection: root_place_projection },\n+            Place { local: *root_place.local, projection: root_place_projection },\n             borrow_span,\n         ));\n "}, {"sha": "c3ad6834dc8908014bfcfa6f2c45fedaba3fcdca", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 };\n                 grouped_errors.push(GroupedMoveError::MovesFromPlace {\n                     span,\n-                    move_from: match_place.clone(),\n+                    move_from: *match_place,\n                     original_path,\n                     kind,\n                     binds_to,"}, {"sha": "3bfe510a72b7134aaed1da0b10b0c67e2cf5a345", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -883,7 +883,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Check is_empty() first because it's the common case, and doing that\n         // way we avoid the clone() call.\n         if !self.access_place_error_reported.is_empty()\n-            && self.access_place_error_reported.contains(&(place_span.0.clone(), place_span.1))\n+            && self.access_place_error_reported.contains(&(*place_span.0, place_span.1))\n         {\n             debug!(\n                 \"access_place: suppressing error place_span=`{:?}` kind=`{:?}`\",\n@@ -911,7 +911,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if conflict_error || mutability_error {\n             debug!(\"access_place: logging error place_span=`{:?}` kind=`{:?}`\", place_span, kind);\n \n-            self.access_place_error_reported.insert((place_span.0.clone(), place_span.1));\n+            self.access_place_error_reported.insert((*place_span.0, place_span.1));\n         }\n     }\n \n@@ -1011,10 +1011,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     // the 2018 edition so we emit it as a warning. We buffer\n                     // these sepately so that we only emit a warning if borrow\n                     // checking was otherwise successful.\n-                    this.reservation_warnings.insert(\n-                        bi,\n-                        (place_span.0.clone(), place_span.1, location, bk, borrow.clone()),\n-                    );\n+                    this.reservation_warnings\n+                        .insert(bi, (*place_span.0, place_span.1, location, bk, borrow.clone()));\n \n                     // Don't suppress actual errors.\n                     Control::Continue"}, {"sha": "428db8356b1220eb49077537b690d257707acc83", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -226,7 +226,7 @@ pub fn const_eval_validated_provider<'tcx>(\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     // see comment in const_eval_raw_provider for what we're doing here\n     if key.param_env.reveal == Reveal::All {\n-        let mut key = key.clone();\n+        let mut key = key;\n         key.param_env.reveal = Reveal::UserFacing;\n         match tcx.const_eval_validated(key) {\n             // try again with reveal all as requested\n@@ -267,7 +267,7 @@ pub fn const_eval_raw_provider<'tcx>(\n \n     // In case we fail in the `UserFacing` variant, we just do the real computation.\n     if key.param_env.reveal == Reveal::All {\n-        let mut key = key.clone();\n+        let mut key = key;\n         key.param_env.reveal = Reveal::UserFacing;\n         match tcx.const_eval_raw(key) {\n             // try again with reveal all as requested"}, {"sha": "0ecf22ae23361c2859620d8668ff71c955a9bb4f", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -47,15 +47,15 @@ impl<'tcx> Lift for PlaceElem<'tcx> {\n     fn lift(&self) -> Self::Abstract {\n         match *self {\n             ProjectionElem::Deref => ProjectionElem::Deref,\n-            ProjectionElem::Field(ref f, ty) => ProjectionElem::Field(f.clone(), ty.lift()),\n+            ProjectionElem::Field(f, ty) => ProjectionElem::Field(f, ty.lift()),\n             ProjectionElem::Index(ref i) => ProjectionElem::Index(i.lift()),\n             ProjectionElem::Subslice { from, to, from_end } => {\n                 ProjectionElem::Subslice { from, to, from_end }\n             }\n             ProjectionElem::ConstantIndex { offset, min_length, from_end } => {\n                 ProjectionElem::ConstantIndex { offset, min_length, from_end }\n             }\n-            ProjectionElem::Downcast(a, u) => ProjectionElem::Downcast(a, u.clone()),\n+            ProjectionElem::Downcast(a, u) => ProjectionElem::Downcast(a, u),\n         }\n     }\n }"}, {"sha": "adba38d2a816ae1860875840e42f8d24dfb29f8c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -158,7 +158,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n             if union_path.is_none() {\n                 base = self.add_move_path(base, elem, |tcx| Place {\n-                    local: place.local.clone(),\n+                    local: place.local,\n                     projection: tcx.intern_place_elems(&place.projection[..i + 1]),\n                 });\n             }\n@@ -430,10 +430,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             // Split `Subslice` patterns into the corresponding list of\n             // `ConstIndex` patterns. This is done to ensure that all move paths\n             // are disjoint, which is expected by drop elaboration.\n-            let base_place = Place {\n-                local: place.local.clone(),\n-                projection: self.builder.tcx.intern_place_elems(base),\n-            };\n+            let base_place =\n+                Place { local: place.local, projection: self.builder.tcx.intern_place_elems(base) };\n             let base_path = match self.move_path_for(&base_place) {\n                 Ok(path) => path,\n                 Err(MoveError::UnionMove { path }) => {\n@@ -467,7 +465,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             match self.move_path_for(place) {\n                 Ok(path) | Err(MoveError::UnionMove { path }) => self.record_move(place, path),\n                 Err(error @ MoveError::IllegalMove { .. }) => {\n-                    self.builder.errors.push((place.clone(), error));\n+                    self.builder.errors.push((*place, error));\n                 }\n             };\n         }"}, {"sha": "de45808a4816ce06de223dedbf2abcff5832775e", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -740,18 +740,15 @@ fn compute_codegen_unit_name(\n \n     let cgu_def_id = cgu_def_id.unwrap();\n \n-    cache\n-        .entry((cgu_def_id, volatile))\n-        .or_insert_with(|| {\n-            let def_path = tcx.def_path(cgu_def_id);\n+    *cache.entry((cgu_def_id, volatile)).or_insert_with(|| {\n+        let def_path = tcx.def_path(cgu_def_id);\n \n-            let components = def_path.data.iter().map(|part| part.data.as_symbol());\n+        let components = def_path.data.iter().map(|part| part.data.as_symbol());\n \n-            let volatile_suffix = volatile.then_some(\"volatile\");\n+        let volatile_suffix = volatile.then_some(\"volatile\");\n \n-            name_builder.build_cgu_name(def_path.krate, components, volatile_suffix)\n-        })\n-        .clone()\n+        name_builder.build_cgu_name(def_path.krate, components, volatile_suffix)\n+    })\n }\n \n fn numbered_codegen_unit_name("}, {"sha": "94a5f2b3bf86d46b911ab89d3dccb1b75e809f1b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -207,7 +207,7 @@ fn build_drop_shim<'tcx>(\n                 0,\n                 Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::Raw, box (dropee_ptr.clone())),\n+                    kind: StatementKind::Retag(RetagKind::Raw, box (dropee_ptr)),\n                 },\n             );\n         }\n@@ -445,7 +445,7 @@ impl CloneShimBuilder<'tcx> {\n \n         // `let ref_loc: &ty = &src;`\n         let statement = self.make_statement(StatementKind::Assign(box (\n-            ref_loc.clone(),\n+            ref_loc,\n             Rvalue::Ref(tcx.lifetimes.re_erased, BorrowKind::Shared, src),\n         )));\n \n@@ -475,7 +475,7 @@ impl CloneShimBuilder<'tcx> {\n \n         let cond = self.make_place(Mutability::Mut, tcx.types.bool);\n         let compute_cond = self.make_statement(StatementKind::Assign(box (\n-            cond.clone(),\n+            cond,\n             Rvalue::BinaryOp(BinOp::Ne, Operand::Copy(end), Operand::Copy(beg)),\n         )));\n \n@@ -512,7 +512,7 @@ impl CloneShimBuilder<'tcx> {\n                 Rvalue::Use(Operand::Constant(self.make_usize(0))),\n             ))),\n             self.make_statement(StatementKind::Assign(box (\n-                end.clone(),\n+                end,\n                 Rvalue::Use(Operand::Constant(self.make_usize(len))),\n             ))),\n         ];"}, {"sha": "38db9e51959379cebb250bc4ea8ed763521b3fe0", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -108,7 +108,7 @@ fn add_move_for_packed_drop<'tcx>(\n     });\n \n     patch.add_statement(loc, StatementKind::StorageLive(temp));\n-    patch.add_assign(loc, Place::from(temp), Rvalue::Use(Operand::Move(location.clone())));\n+    patch.add_assign(loc, Place::from(temp), Rvalue::Use(Operand::Move(*location)));\n     patch.patch_terminator(\n         loc.block,\n         TerminatorKind::Drop { location: Place::from(temp), target: storage_dead_block, unwind },"}, {"sha": "a5b467c1e101f77bf8a6b4c4b00a0782ba9ccb60", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                         if needs_retag(&destination.0) {\n                             returns.push((\n                                 block_data.terminator().source_info,\n-                                destination.0.clone(),\n+                                destination.0,\n                                 destination.1,\n                             ));\n                         }\n@@ -141,8 +141,8 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             for i in (0..block_data.statements.len()).rev() {\n                 let (retag_kind, place) = match block_data.statements[i].kind {\n                     // Retag-as-raw after escaping to a raw pointer.\n-                    StatementKind::Assign(box (ref place, Rvalue::AddressOf(..))) => {\n-                        (RetagKind::Raw, place.clone())\n+                    StatementKind::Assign(box (place, Rvalue::AddressOf(..))) => {\n+                        (RetagKind::Raw, place)\n                     }\n                     // Assignments of reference or ptr type are the ones where we may have\n                     // to update tags.  This includes `x = &[mut] ...` and hence\n@@ -156,7 +156,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                             }\n                             _ => RetagKind::Default,\n                         };\n-                        (kind, place.clone())\n+                        (kind, *place)\n                     }\n                     // Do nothing for the rest\n                     _ => continue,"}, {"sha": "73bd6c1c6c24268036b21928797466625ee11f60", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             // `unsafe` blocks are required in safe code\n             Safety::Safe => {\n                 for violation in violations {\n-                    let mut violation = violation.clone();\n+                    let mut violation = *violation;\n                     match violation.kind {\n                         UnsafetyViolationKind::GeneralAndConstFn\n                         | UnsafetyViolationKind::General => {}\n@@ -383,7 +383,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             // these things are forbidden in const fns\n                             UnsafetyViolationKind::General\n                             | UnsafetyViolationKind::BorrowPacked(_) => {\n-                                let mut violation = violation.clone();\n+                                let mut violation = *violation;\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n                                 // compat lint"}, {"sha": "1c0b1b8c137674cde638099528b01086253e7aac", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -459,7 +459,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(box (location.clone(), Rvalue::Use(value.clone()))),\n+            kind: StatementKind::Assign(box (*location, Rvalue::Use(value.clone()))),\n             source_info: terminator.source_info,\n         };\n \n@@ -512,11 +512,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 debug!(\"elaborate_drop_and_replace({:?}) - untracked {:?}\", terminator, parent);\n                 self.patch.patch_terminator(\n                     bb,\n-                    TerminatorKind::Drop {\n-                        location: location.clone(),\n-                        target,\n-                        unwind: Some(unwind),\n-                    },\n+                    TerminatorKind::Drop { location: *location, target, unwind: Some(unwind) },\n                 );\n             }\n         }"}, {"sha": "1c86d6f3f65f22dc89081a11b577ea26b668d6de", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -260,7 +260,7 @@ impl TransformVisitor<'tcx> {\n         let self_place = Place::from(self_arg());\n         let assign = Statement {\n             source_info: source_info(body),\n-            kind: StatementKind::Assign(box (temp.clone(), Rvalue::Discriminant(self_place))),\n+            kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n         };\n         (assign, temp)\n     }"}, {"sha": "96cd8fc135441b621f16627cd75e1c9d26ca405e", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -354,7 +354,7 @@ impl Inliner<'tcx> {\n             let ty = v.ty.subst(tcx, callsite.substs);\n             // Cost of the var is the size in machine-words, if we know\n             // it.\n-            if let Some(size) = type_size_of(tcx, param_env.clone(), ty) {\n+            if let Some(size) = type_size_of(tcx, param_env, ty) {\n                 cost += (size / ptr_size) as usize;\n             } else {\n                 cost += UNKNOWN_SIZE_COST;\n@@ -450,7 +450,7 @@ impl Inliner<'tcx> {\n \n                     let stmt = Statement {\n                         source_info: callsite.location,\n-                        kind: StatementKind::Assign(box (tmp.clone(), dest)),\n+                        kind: StatementKind::Assign(box (tmp, dest)),\n                     };\n                     caller_body[callsite.bb].statements.push(stmt);\n                     self.tcx.mk_place_deref(tmp)"}, {"sha": "48b4d00a2e9b6480d8fa7ebbf94c9136b6d64e6a", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n                     if let &[ref proj_l @ .., proj_r] = place.projection.as_ref() {\n-                        place.projection = self.tcx().intern_place_elems(&[proj_r.clone()]);\n+                        place.projection = self.tcx().intern_place_elems(&[proj_r]);\n \n                         Place {\n                             // Replace with dummy"}, {"sha": "be515ef571368b4f263ae077489f7f5028bbf0ce", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -24,10 +24,7 @@ pub fn expand_aggregate<'tcx>(\n         AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant {\n-                        place: box (lhs.clone()),\n-                        variant_index,\n-                    },\n+                    kind: StatementKind::SetDiscriminant { place: box (lhs), variant_index },\n                     source_info,\n                 });\n                 lhs = tcx.mk_place_downcast(lhs, adt_def, variant_index);\n@@ -39,7 +36,7 @@ pub fn expand_aggregate<'tcx>(\n             // variant 0 (Unresumed).\n             let variant_index = VariantIdx::new(0);\n             set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: box (lhs.clone()), variant_index },\n+                kind: StatementKind::SetDiscriminant { place: box (lhs), variant_index },\n                 source_info,\n             });\n "}, {"sha": "1be3da4b3d85af6df3a068c6f2fbd22d7a7a23e8", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -168,7 +168,7 @@ where\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n-                        location: self.place.clone(),\n+                        location: *self.place,\n                         target: self.succ,\n                         unwind: self.unwind.into_option(),\n                     },\n@@ -517,7 +517,7 @@ where\n         // way lies only trouble.\n         let discr_ty = adt.repr.discr_type().to_ty(self.tcx());\n         let discr = Place::from(self.new_temp(discr_ty));\n-        let discr_rv = Rvalue::Discriminant(self.place.clone());\n+        let discr_rv = Rvalue::Discriminant(*self.place);\n         let switch_block = BasicBlockData {\n             statements: vec![self.assign(&discr, discr_rv)],\n             terminator: Some(Terminator {\n@@ -554,7 +554,7 @@ where\n                 Rvalue::Ref(\n                     tcx.lifetimes.re_erased,\n                     BorrowKind::Mut { allow_two_phase_borrow: false },\n-                    self.place.clone(),\n+                    *self.place,\n                 ),\n             )],\n             terminator: Some(Terminator {\n@@ -634,7 +634,7 @@ where\n         let loop_block = BasicBlockData {\n             statements: vec![self.assign(\n                 &can_go,\n-                Rvalue::BinaryOp(BinOp::Eq, copy(Place::from(cur)), copy(length_or_end.clone())),\n+                Rvalue::BinaryOp(BinOp::Eq, copy(Place::from(cur)), copy(*length_or_end)),\n             )],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -693,7 +693,7 @@ where\n             }\n         }\n \n-        let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n+        let move_ = |place: &Place<'tcx>| Operand::Move(*place);\n         let elem_size = &Place::from(self.new_temp(tcx.types.usize));\n         let len = &Place::from(self.new_temp(tcx.types.usize));\n \n@@ -702,7 +702,7 @@ where\n         let base_block = BasicBlockData {\n             statements: vec![\n                 self.assign(elem_size, Rvalue::NullaryOp(NullOp::SizeOf, ety)),\n-                self.assign(len, Rvalue::Len(self.place.clone())),\n+                self.assign(len, Rvalue::Len(*self.place)),\n             ],\n             is_cleanup: self.unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -735,8 +735,7 @@ where\n         let iter_ty = if ptr_based { tcx.mk_mut_ptr(ety) } else { tcx.types.usize };\n \n         let cur = self.new_temp(iter_ty);\n-        let length_or_end =\n-            if ptr_based { Place::from(self.new_temp(iter_ty)) } else { length.clone() };\n+        let length_or_end = if ptr_based { Place::from(self.new_temp(iter_ty)) } else { length };\n \n         let unwind = self.unwind.map(|unwind| {\n             self.drop_loop(unwind, cur, &length_or_end, ety, Unwind::InCleanup, ptr_based)\n@@ -752,7 +751,7 @@ where\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n             vec![\n-                self.assign(&tmp, Rvalue::AddressOf(Mutability::Mut, self.place.clone())),\n+                self.assign(&tmp, Rvalue::AddressOf(Mutability::Mut, *self.place)),\n                 self.assign(&cur, Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty)),\n                 self.assign(\n                     &length_or_end,\n@@ -925,11 +924,8 @@ where\n     }\n \n     fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n-        let block = TerminatorKind::Drop {\n-            location: self.place.clone(),\n-            target,\n-            unwind: unwind.into_option(),\n-        };\n+        let block =\n+            TerminatorKind::Drop { location: *self.place, target, unwind: unwind.into_option() };\n         self.new_block(unwind, block)\n     }\n \n@@ -982,9 +978,6 @@ where\n     }\n \n     fn assign(&self, lhs: &Place<'tcx>, rhs: Rvalue<'tcx>) -> Statement<'tcx> {\n-        Statement {\n-            source_info: self.source_info,\n-            kind: StatementKind::Assign(box (lhs.clone(), rhs)),\n-        }\n+        Statement { source_info: self.source_info, kind: StatementKind::Assign(box (*lhs, rhs)) }\n     }\n }"}, {"sha": "883aba18ec547be87e3b7ccfad848c79035c4c2a", "filename": "src/librustc_mir_build/build/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fcfg.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> CFG<'tcx> {\n     ) {\n         self.push(\n             block,\n-            Statement { source_info, kind: StatementKind::Assign(box (place.clone(), rvalue)) },\n+            Statement { source_info, kind: StatementKind::Assign(box (*place, rvalue)) },\n         );\n     }\n "}, {"sha": "f27760f692088470afe5c26c819e60477bae9325", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n                                 box (\n-                                    Place::from(temp.clone()),\n+                                    Place::from(temp),\n                                     UserTypeProjection { base: annotation_index, projs: vec![] },\n                                 ),\n                                 Variance::Invariant,\n@@ -347,11 +347,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block,\n             source_info,\n             &lt,\n-            Rvalue::BinaryOp(\n-                BinOp::Lt,\n-                Operand::Copy(Place::from(index)),\n-                Operand::Copy(len.clone()),\n-            ),\n+            Rvalue::BinaryOp(BinOp::Lt, Operand::Copy(Place::from(index)), Operand::Copy(len)),\n         );\n         let msg = BoundsCheck { len: Operand::Move(len), index: Operand::Copy(Place::from(index)) };\n         // assert!(lt, \"...\")\n@@ -396,7 +392,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             Rvalue::Ref(\n                                 tcx.lifetimes.re_erased,\n                                 BorrowKind::Shallow,\n-                                Place { local: base_place.local.clone(), projection },\n+                                Place { local: base_place.local, projection },\n                             ),\n                         );\n                         fake_borrow_temps.push(fake_borrow_temp);"}, {"sha": "5ef338c624da26cff15e64d8af66010fcc64ec28", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             destination: if expr.ty.is_never() {\n                                 None\n                             } else {\n-                                Some((destination.clone(), success))\n+                                Some((*destination, success))\n                             },\n                             from_hir_call,\n                         },"}, {"sha": "882c5e85bb0ac28f90050654b71c34b3155bab78", "filename": "src/librustc_mir_build/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -79,14 +79,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // because AssignOp is only legal for Copy types\n                 // (overloaded ops should be desugared into a call).\n                 let result = unpack!(\n-                    block = this.build_binary_op(\n-                        block,\n-                        op,\n-                        expr_span,\n-                        lhs_ty,\n-                        Operand::Copy(lhs.clone()),\n-                        rhs\n-                    )\n+                    block =\n+                        this.build_binary_op(block, op, expr_span, lhs_ty, Operand::Copy(lhs), rhs)\n                 );\n                 this.cfg.push_assign(block, source_info, &lhs, result);\n "}, {"sha": "801e50eab8a1617df59137387151359cfb957798", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .zip(candidate_pre_binding_blocks.by_ref())\n                     .map(|(pattern, pre_binding_block)| Candidate {\n                         span: pattern.span,\n-                        match_pairs: smallvec![MatchPair::new(scrutinee.clone(), pattern)],\n+                        match_pairs: smallvec![MatchPair::new(*scrutinee, pattern)],\n                         bindings: vec![],\n                         ascriptions: vec![],\n                         otherwise_block: if arm_has_guard {\n@@ -427,7 +427,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // create a dummy candidate\n         let mut candidate = Candidate {\n             span: irrefutable_pat.span,\n-            match_pairs: smallvec![MatchPair::new(initializer.clone(), &irrefutable_pat)],\n+            match_pairs: smallvec![MatchPair::new(*initializer, &irrefutable_pat)],\n             bindings: vec![],\n             ascriptions: vec![],\n \n@@ -469,7 +469,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     ..\n                 }))) = self.local_decls[local].local_info\n                 {\n-                    *match_place = Some(initializer.clone());\n+                    *match_place = Some(*initializer);\n                 } else {\n                     bug!(\"Let binding to non-user variable.\")\n                 }\n@@ -890,7 +890,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let proj_base = &source.projection[..i];\n \n                     fake_borrows.insert(Place {\n-                        local: source.local.clone(),\n+                        local: source.local,\n                         projection: self.hir.tcx().intern_place_elems(proj_base),\n                     });\n                 }\n@@ -1084,7 +1084,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // extract the match-pair from the highest priority candidate\n         let match_pair = &candidates.first().unwrap().match_pairs[0];\n         let mut test = self.test(match_pair);\n-        let match_place = match_pair.place.clone();\n+        let match_place = match_pair.place;\n \n         // most of the time, the test to perform is simply a function\n         // of the main candidate; but for a test like SwitchInt, we\n@@ -1258,7 +1258,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             .into_iter()\n             .map(|matched_place_ref| {\n                 let matched_place = Place {\n-                    local: matched_place_ref.local.clone(),\n+                    local: *matched_place_ref.local,\n                     projection: tcx.intern_place_elems(matched_place_ref.projection),\n                 };\n                 let fake_borrow_deref_ty = matched_place.ty(&self.local_decls, tcx).ty;\n@@ -1416,7 +1416,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let re_erased = tcx.lifetimes.re_erased;\n             let scrutinee_source_info = self.source_info(scrutinee_span);\n             for (place, temp) in fake_borrows {\n-                let borrow = Rvalue::Ref(re_erased, BorrowKind::Shallow, place.clone());\n+                let borrow = Rvalue::Ref(re_erased, BorrowKind::Shallow, *place);\n                 self.cfg.push_assign(block, scrutinee_source_info, &Place::from(*temp), borrow);\n             }\n \n@@ -1514,7 +1514,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Statement {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n-                        box (ascription.source.clone(), user_ty),\n+                        box (ascription.source, user_ty),\n                         ascription.variance,\n                     ),\n                 },\n@@ -1540,7 +1540,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.storage_live_binding(block, binding.var_id, binding.span, RefWithinGuard);\n             match binding.binding_mode {\n                 BindingMode::ByValue => {\n-                    let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, binding.source.clone());\n+                    let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, binding.source);\n                     self.cfg.push_assign(block, source_info, &ref_for_guard, rvalue);\n                 }\n                 BindingMode::ByRef(borrow_kind) => {\n@@ -1551,7 +1551,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         OutsideGuard,\n                     );\n \n-                    let rvalue = Rvalue::Ref(re_erased, borrow_kind, binding.source.clone());\n+                    let rvalue = Rvalue::Ref(re_erased, borrow_kind, binding.source);\n                     self.cfg.push_assign(block, source_info, &value_for_arm, rvalue);\n                     let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, value_for_arm);\n                     self.cfg.push_assign(block, source_info, &ref_for_guard, rvalue);\n@@ -1581,7 +1581,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Rvalue::Use(self.consume_by_copy_or_move(binding.source.clone()))\n                 }\n                 BindingMode::ByRef(borrow_kind) => {\n-                    Rvalue::Ref(re_erased, borrow_kind, binding.source.clone())\n+                    Rvalue::Ref(re_erased, borrow_kind, binding.source)\n                 }\n             };\n             self.cfg.push_assign(block, source_info, &local, rvalue);"}, {"sha": "fb3babca32b95c5503be545ca6cc8e6f43eeb51c", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -59,14 +59,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match *match_pair.pattern.kind {\n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: hair::pattern::Ascription { variance, ref user_ty, user_ty_span },\n+                ascription: hair::pattern::Ascription { variance, user_ty, user_ty_span },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n                 // value being matched, taking the variance field into account.\n                 candidate.ascriptions.push(Ascription {\n                     span: user_ty_span,\n-                    user_ty: user_ty.clone(),\n-                    source: match_pair.place.clone(),\n+                    user_ty: user_ty,\n+                    source: match_pair.place,\n                     variance,\n                 });\n \n@@ -85,7 +85,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     name,\n                     mutability,\n                     span: match_pair.pattern.span,\n-                    source: match_pair.place.clone(),\n+                    source: match_pair.place,\n                     var_id: var,\n                     var_ty: ty,\n                     binding_mode: mode,"}, {"sha": "1f97f5f1b728199d672d7772428bbd888028e5a0", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -209,12 +209,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 let discr_ty = adt_def.repr.discr_type().to_ty(tcx);\n                 let discr = self.temp(discr_ty, test.span);\n-                self.cfg.push_assign(\n-                    block,\n-                    source_info,\n-                    &discr,\n-                    Rvalue::Discriminant(place.clone()),\n-                );\n+                self.cfg.push_assign(block, source_info, &discr, Rvalue::Discriminant(*place));\n                 assert_eq!(values.len() + 1, targets.len());\n                 self.cfg.terminate(\n                     block,\n@@ -240,7 +235,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         };\n                         TerminatorKind::if_(\n                             self.hir.tcx(),\n-                            Operand::Copy(place.clone()),\n+                            Operand::Copy(*place),\n                             true_bb,\n                             false_bb,\n                         )\n@@ -251,7 +246,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // The switch may be inexhaustive so we have a catch all block\n                     debug_assert_eq!(options.len() + 1, target_blocks.len());\n                     TerminatorKind::SwitchInt {\n-                        discr: Operand::Copy(place.clone()),\n+                        discr: Operand::Copy(*place),\n                         switch_ty,\n                         values: options.clone().into(),\n                         targets: target_blocks,\n@@ -276,7 +271,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     if let [success, fail] = *make_target_blocks(self) {\n                         assert_eq!(value.ty, ty);\n                         let expect = self.literal_operand(test.span, value);\n-                        let val = Operand::Copy(place.clone());\n+                        let val = Operand::Copy(*place);\n                         self.compare(block, success, fail, source_info, BinOp::Eq, expect, val);\n                     } else {\n                         bug!(\"`TestKind::Eq` should have two target blocks\");\n@@ -291,7 +286,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n                 let lo = self.literal_operand(test.span, lo);\n                 let hi = self.literal_operand(test.span, hi);\n-                let val = Operand::Copy(place.clone());\n+                let val = Operand::Copy(*place);\n \n                 if let [success, fail] = *target_blocks {\n                     self.compare(\n@@ -320,7 +315,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let actual = self.temp(usize_ty, test.span);\n \n                 // actual = len(place)\n-                self.cfg.push_assign(block, source_info, &actual, Rvalue::Len(place.clone()));\n+                self.cfg.push_assign(block, source_info, &actual, Rvalue::Len(*place));\n \n                 // expected = <N>\n                 let expected = self.push_usize(block, source_info, len);\n@@ -382,7 +377,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         use rustc::middle::lang_items::EqTraitLangItem;\n \n         let mut expect = self.literal_operand(source_info.span, value);\n-        let mut val = Operand::Copy(place.clone());\n+        let mut val = Operand::Copy(*place);\n \n         // If we're using `b\"...\"` as a pattern, we need to insert an\n         // unsizing coercion, as the byte string has the type `&[u8; N]`.\n@@ -457,7 +452,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     literal: method,\n                 }),\n                 args: vec![val, expect],\n-                destination: Some((eq_result.clone(), eq_block)),\n+                destination: Some((eq_result, eq_block)),\n                 cleanup: Some(cleanup),\n                 from_hir_call: false,\n             },"}, {"sha": "fa5f266c76b140279ce55777d4fe82f7401f0da9", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -884,7 +884,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 VarBindingForm {\n                                     binding_mode,\n                                     opt_ty_info,\n-                                    opt_match_place: Some((Some(place.clone()), span)),\n+                                    opt_match_place: Some((Some(place), span)),\n                                     pat_span: span,\n                                 },\n                             )))\n@@ -939,12 +939,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn get_unit_temp(&mut self) -> Place<'tcx> {\n         match self.unit_temp {\n-            Some(ref tmp) => tmp.clone(),\n+            Some(tmp) => tmp,\n             None => {\n                 let ty = self.hir.unit_ty();\n                 let fn_span = self.fn_span;\n                 let tmp = self.temp(ty, fn_span);\n-                self.unit_temp = Some(tmp.clone());\n+                self.unit_temp = Some(tmp);\n                 tmp\n             }\n         }"}, {"sha": "a63ac06ec3fe9c274003cc28af03841caeeb8f36", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -318,11 +318,11 @@ impl<'tcx> Scopes<'tcx> {\n                 if scope.break_destination != Place::return_place() {\n                     span_bug!(span, \"`return` in item with no return scope\");\n                 }\n-                (scope.break_block, scope.region_scope, Some(scope.break_destination.clone()))\n+                (scope.break_block, scope.region_scope, Some(scope.break_destination))\n             }\n             BreakableTarget::Break(scope) => {\n                 let scope = get_scope(scope);\n-                (scope.break_block, scope.region_scope, Some(scope.break_destination.clone()))\n+                (scope.break_block, scope.region_scope, Some(scope.break_destination))\n             }\n             BreakableTarget::Continue(scope) => {\n                 let scope = get_scope(scope);"}, {"sha": "db8109c285980e8c0329a37cab716763c0d6b814", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -366,8 +366,8 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n     // Put the active features into a map for quick lookup.\n     index.active_features = active_lib_features\n         .iter()\n-        .map(|&(ref s, ..)| s.clone())\n-        .chain(active_lang_features.iter().map(|&(ref s, ..)| s.clone()))\n+        .map(|&(s, ..)| s)\n+        .chain(active_lang_features.iter().map(|&(s, ..)| s))\n         .collect();\n \n     {"}, {"sha": "8f882be1a090e258517c2bc2dc14f39b3c1b50f1", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -263,7 +263,7 @@ fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguat\n \n fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n     assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.crate_name.clone()\n+    tcx.crate_name\n }\n \n fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {"}, {"sha": "bedef5042fdb6c8f32415a35e5f34afbea1197b9", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -572,7 +572,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                             has_unsized_tuple_coercion = true;\n                         }\n                     }\n-                    tr.clone()\n+                    *tr\n                 }\n                 _ => {\n                     coercion.obligations.push(obligation);"}, {"sha": "832aa9f62ff4dc097ce8860a001d63db584e7992", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -596,7 +596,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         target_trait_def_id: DefId,\n     ) -> ty::PolyTraitRef<'tcx> {\n         let upcast_trait_refs =\n-            traits::upcast_choices(self.tcx, source_trait_ref.clone(), target_trait_def_id);\n+            traits::upcast_choices(self.tcx, source_trait_ref, target_trait_def_id);\n \n         // must be exactly one trait ref or we'd get an ambig error etc\n         if upcast_trait_refs.len() != 1 {"}, {"sha": "2444fc60f77baf8018afe24e313e472694d0c25d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1491,7 +1491,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // FIXME: check the return type here somehow.\n         // If so, just use this trait and call it a day.\n         Some(Pick {\n-            item: probes[0].0.item.clone(),\n+            item: probes[0].0.item,\n             kind: TraitPick,\n             import_ids: probes[0].0.import_ids.clone(),\n             autoderefs: 0,\n@@ -1715,7 +1715,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n impl<'tcx> Candidate<'tcx> {\n     fn to_unadjusted_pick(&self) -> Pick<'tcx> {\n         Pick {\n-            item: self.item.clone(),\n+            item: self.item,\n             kind: match self.kind {\n                 InherentImplCandidate(..) => InherentImplPick,\n                 ObjectCandidate => ObjectPick,\n@@ -1731,7 +1731,7 @@ impl<'tcx> Candidate<'tcx> {\n                             && !trait_ref.skip_binder().substs.has_placeholders()\n                     );\n \n-                    WhereClausePick(trait_ref.clone())\n+                    WhereClausePick(*trait_ref)\n                 }\n             },\n             import_ids: self.import_ids.clone(),"}, {"sha": "4d1f92d19ce0999d6f48762f7293af6dde9d9a94", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1208,8 +1208,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         debug!(\n             \"local variable {:?} is assigned type {}\",\n             local.pat,\n-            self.fcx\n-                .ty_to_string(self.fcx.locals.borrow().get(&local.hir_id).unwrap().clone().decl_ty)\n+            self.fcx.ty_to_string(&*self.fcx.locals.borrow().get(&local.hir_id).unwrap().decl_ty)\n         );\n         intravisit::walk_local(self, local);\n     }\n@@ -1226,8 +1225,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n             debug!(\n                 \"pattern binding {} is assigned to {} with type {:?}\",\n                 ident,\n-                self.fcx\n-                    .ty_to_string(self.fcx.locals.borrow().get(&p.hir_id).unwrap().clone().decl_ty),\n+                self.fcx.ty_to_string(&*self.fcx.locals.borrow().get(&p.hir_id).unwrap().decl_ty),\n                 var_ty\n             );\n         }\n@@ -1275,7 +1273,7 @@ fn check_fn<'a, 'tcx>(\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n-    let mut fn_sig = fn_sig.clone();\n+    let mut fn_sig = fn_sig;\n \n     debug!(\"check_fn(sig={:?}, fn_id={}, param_env={:?})\", fn_sig, fn_id, param_env);\n "}, {"sha": "028c39b80e42699724a09c43a50f6dde3f310e6b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             let fn_sig = {\n                 match self.tcx.typeck_tables_of(def_id).liberated_fn_sigs().get(hir_id) {\n-                    Some(f) => f.clone(),\n+                    Some(f) => *f,\n                     None => {\n                         bug!(\"No fn-sig entry for def_id={:?}\", def_id);\n                     }"}, {"sha": "af2ccb4517664fe2359d53eda17ee9a017f85437", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n \n         let fn_sig = {\n             match self.tables.borrow().liberated_fn_sigs().get(id) {\n-                Some(f) => f.clone(),\n+                Some(f) => *f,\n                 None => {\n                     bug!(\"No fn-sig entry for id={:?}\", id);\n                 }"}, {"sha": "9b187d461cdeb05e2a4dde7d14de57fd175d1bc8", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -181,7 +181,7 @@ pub fn setup_constraining_predicates<'tcx>(\n                 // to project out an associated type defined by this very\n                 // trait.\n                 let unbound_trait_ref = projection.projection_ty.trait_ref(tcx);\n-                if Some(unbound_trait_ref.clone()) == impl_trait_ref {\n+                if Some(unbound_trait_ref) == impl_trait_ref {\n                     continue;\n                 }\n "}, {"sha": "8edd0591c85562e946e42fcc140c03d4c55eb215", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -393,7 +393,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             Type::ResolvedPath {\n                                 path: new_path,\n                                 param_names: param_names.clone(),\n-                                did: did.clone(),\n+                                did: *did,\n                                 is_generic: *is_generic,\n                             }\n                         }\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             })\n             .map(|p| {\n                 let replaced = p.fold_with(&mut replacer);\n-                (replaced.clone(), replaced.clean(self.cx))\n+                (replaced, replaced.clean(self.cx))\n             });\n \n         let mut generic_params =\n@@ -614,7 +614,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n                                                 param_names: param_names.clone(),\n-                                                did: did.clone(),\n+                                                did: *did,\n                                                 is_generic: *is_generic,\n                                             },\n                                             generic_params: Vec::new(),"}, {"sha": "281306cc0c59103935e6ce92f394832ff6908432", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1417,7 +1417,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                                         });\n                                     if let Some(ty) = type_ {\n                                         ty_substs.insert(ty_param_def_id, ty.clean(cx));\n-                                    } else if let Some(default) = default.clone() {\n+                                    } else if let Some(default) = *default {\n                                         ty_substs.insert(ty_param_def_id, default.clean(cx));\n                                     }\n                                     indices.types += 1;"}, {"sha": "07381eddea7071fd2974ea101b413b7632c41fd4", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -319,7 +319,7 @@ pub fn strip_path(path: &Path) -> Path {\n         })\n         .collect();\n \n-    Path { global: path.global, res: path.res.clone(), segments }\n+    Path { global: path.global, res: path.res, segments }\n }\n \n pub fn qpath_to_string(p: &hir::QPath) -> String {"}, {"sha": "1c0e0b3bf410b5de1f526f26e3b14244a81ca815", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08594515926df9b23b912628d9f8c814a30edcb7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> DocContext<'tcx> {\n \n         let mut fake_ids = self.fake_def_ids.borrow_mut();\n \n-        let def_id = fake_ids.entry(crate_num).or_insert(start_def_id).clone();\n+        let def_id = *fake_ids.entry(crate_num).or_insert(start_def_id);\n         fake_ids.insert(\n             crate_num,\n             DefId { krate: crate_num, index: DefIndex::from(def_id.index.index() + 1) },\n@@ -137,7 +137,7 @@ impl<'tcx> DocContext<'tcx> {\n \n         self.all_fake_def_ids.borrow_mut().insert(def_id);\n \n-        def_id.clone()\n+        def_id\n     }\n \n     /// Like the function of the same name on the HIR map, but skips calling it on fake DefIds."}, {"sha": "9d32b7b01409024b165545c568b1525d86e2b7cb", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1 +1 @@\n-Subproject commit b68b0978ab8012f871c80736fb910d14b89c4498\n+Subproject commit 9d32b7b01409024b165545c568b1525d86e2b7cb"}, {"sha": "83403581bb7a2156f4752fc2d0ceef4b3ec75554", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=08594515926df9b23b912628d9f8c814a30edcb7", "patch": "@@ -1 +1 @@\n-Subproject commit 6a0f14bef7784e57a57a996cae3f94dbd2490e7a\n+Subproject commit 83403581bb7a2156f4752fc2d0ceef4b3ec75554"}]}