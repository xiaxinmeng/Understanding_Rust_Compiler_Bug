{"sha": "c7a178ea5f84620508efbee96fb1da287c1a779d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YTE3OGVhNWY4NDYyMDUwOGVmYmVlOTZmYjFkYTI4N2MxYTc3OWQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-24T22:43:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-24T22:43:49Z"}, "message": "Rollup merge of #52658 - Wallacoloo:topics/use-option-methods, r=cramertj\n\nPrefer `Option::map`/etc over `match` wherever it improves clarity\n\nThis isn't intended to change behavior anywhere. A lot of times statements like `match x { None => None, Some(y) => [...] }` can be rewritten using `Option::map` or `Option::and_then` in a way that preserves or improves clarity, so that's what I've done here.\n\nI think it's particularly valuable to keep things in `libcore` and `libstd` pretty/idiomatic since it's not uncommon to follow the `[src]` links when browsing the rust-lang.org docs for std/core. If there's any concern about pushing style-based changes though, I'll happily back out the non-std/core commits here.", "tree": {"sha": "aecd1021fb355e9f2d638b04712a308b3954a298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aecd1021fb355e9f2d638b04712a308b3954a298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a178ea5f84620508efbee96fb1da287c1a779d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbV6ulCRBK7hj4Ov3rIwAAdHIIAEC0bSK66YIWmWxYPApbNLWy\nUfeoX243f4fovug4H9QOfFpRDS7I1+mx2IE9mM4iBW8j2+1CLKG0/SrMtkAQGTbp\n3geLhUjVfhav5TY19f9zWnG8NGTSbhtIKsQxJBp1B2UluNLaUZ76Tbi6/GRKzfwS\n43mqmkG8yXfyvpDKV/uivfTUJtp6+um8KIV/D4rXdfVsuQPmStPvO02lo56PAZRb\nVr99wDue49bDh/EG/qB3gdcnFGq9piTMIle7FHq1LiMyQUD/Epc7TWHAZgcWnBpg\n8uTjvdrUBeTHdOXYri6vkgjoD32G61BVFGWcSjyf2zPdT/bWL9xzCXMbxyQMYME=\n=g2vD\n-----END PGP SIGNATURE-----\n", "payload": "tree aecd1021fb355e9f2d638b04712a308b3954a298\nparent 28f8cb585aa4953864f64fdc58da9d4a2a34d6c0\nparent cbe5f1c4207673b9059e832ef2f134b4f87b380d\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532472229 -0600\ncommitter GitHub <noreply@github.com> 1532472229 -0600\n\nRollup merge of #52658 - Wallacoloo:topics/use-option-methods, r=cramertj\n\nPrefer `Option::map`/etc over `match` wherever it improves clarity\n\nThis isn't intended to change behavior anywhere. A lot of times statements like `match x { None => None, Some(y) => [...] }` can be rewritten using `Option::map` or `Option::and_then` in a way that preserves or improves clarity, so that's what I've done here.\n\nI think it's particularly valuable to keep things in `libcore` and `libstd` pretty/idiomatic since it's not uncommon to follow the `[src]` links when browsing the rust-lang.org docs for std/core. If there's any concern about pushing style-based changes though, I'll happily back out the non-std/core commits here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a178ea5f84620508efbee96fb1da287c1a779d", "html_url": "https://github.com/rust-lang/rust/commit/c7a178ea5f84620508efbee96fb1da287c1a779d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a178ea5f84620508efbee96fb1da287c1a779d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0", "html_url": "https://github.com/rust-lang/rust/commit/28f8cb585aa4953864f64fdc58da9d4a2a34d6c0"}, {"sha": "cbe5f1c4207673b9059e832ef2f134b4f87b380d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe5f1c4207673b9059e832ef2f134b4f87b380d", "html_url": "https://github.com/rust-lang/rust/commit/cbe5f1c4207673b9059e832ef2f134b4f87b380d"}], "stats": {"total": 81, "additions": 30, "deletions": 51}, "files": [{"sha": "86b8349fa3c89cd1894f39d8172b4d02e9465873", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -696,13 +696,10 @@ impl<'a> Iterator for CharIndices<'a> {\n impl<'a> DoubleEndedIterator for CharIndices<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(usize, char)> {\n-        match self.iter.next_back() {\n-            None => None,\n-            Some(ch) => {\n-                let index = self.front_offset + self.iter.iter.len();\n-                Some((index, ch))\n-            }\n-        }\n+        self.iter.next_back().map(|ch| {\n+            let index = self.front_offset + self.iter.iter.len();\n+            (index, ch)\n+        })\n     }\n }\n "}, {"sha": "e1395c3fa442723c2bba781ea5918aee35bd902d", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -190,11 +190,10 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    options.contains(&(c.name().as_str().to_string(),\n-                                      match c.value_str().map(|s| s.as_str().to_string()) {\n-                                          Some(s) => Some(s),\n-                                          None => None\n-                                      }))\n+                    options.contains(&(\n+                        c.name().as_str().to_string(),\n+                        c.value_str().map(|s| s.as_str().to_string())\n+                    ))\n                 }) {\n                     debug!(\"evaluate: skipping {:?} due to condition\", command);\n                     continue"}, {"sha": "c2795bae01029f4e27871d91441beecc8400a0d4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -2697,15 +2697,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.opt_associated_item(def_id)\n         };\n \n-        match item {\n-            Some(trait_item) => {\n-                match trait_item.container {\n-                    TraitContainer(_) => None,\n-                    ImplContainer(def_id) => Some(def_id),\n-                }\n+        item.and_then(|trait_item|\n+            match trait_item.container {\n+                TraitContainer(_) => None,\n+                ImplContainer(def_id) => Some(def_id),\n             }\n-            None => None\n-        }\n+        )\n     }\n \n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`"}, {"sha": "42af5db82942aadb25b10a31ccf10733dfde08fa", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -824,17 +824,14 @@ impl<'a> Context<'a> {\n         if rlib.is_none() && rmeta.is_none() && dylib.is_none() {\n             return None;\n         }\n-        match slot {\n-            Some((_, metadata)) => {\n-                Some(Library {\n-                    dylib,\n-                    rlib,\n-                    rmeta,\n-                    metadata,\n-                })\n+        slot.map(|(_, metadata)|\n+            Library {\n+                dylib,\n+                rlib,\n+                rmeta,\n+                metadata,\n             }\n-            None => None,\n-        }\n+        )\n     }\n }\n "}, {"sha": "008c5da171ffc663e68a1afe06701b71b40b3f23", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -53,10 +53,7 @@ impl<'a> Parser<'a> {\n         F: FnOnce(&mut Parser) -> Option<T>,\n     {\n         self.read_atomically(move |p| {\n-            match cb(p) {\n-                Some(x) => if p.is_eof() {Some(x)} else {None},\n-                None => None,\n-            }\n+            cb(p).filter(|_| p.is_eof())\n         })\n     }\n "}, {"sha": "688a7e99f10edf0b7cb57fc136122d2e2a016c50", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -1065,10 +1065,7 @@ impl<'a> Iterator for Ancestors<'a> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let next = self.next;\n-        self.next = match next {\n-            Some(path) => path.parent(),\n-            None => None,\n-        };\n+        self.next = next.and_then(Path::parent);\n         next\n     }\n }"}, {"sha": "2db47bd59475e5feb57b96d1a3ddbfa74b59071b", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -156,16 +156,15 @@ pub fn log_enabled() -> Option<PrintFormat> {\n         _ => return Some(PrintFormat::Full),\n     }\n \n-    let val = match env::var_os(\"RUST_BACKTRACE\") {\n-        Some(x) => if &x == \"0\" {\n+    let val = env::var_os(\"RUST_BACKTRACE\").and_then(|x|\n+        if &x == \"0\" {\n             None\n         } else if &x == \"full\" {\n             Some(PrintFormat::Full)\n         } else {\n             Some(PrintFormat::Short)\n-        },\n-        None => None,\n-    };\n+        }\n+    );\n     ENABLED.store(match val {\n         Some(v) => v as isize,\n         None => 1,"}, {"sha": "a0845e0982d2ad362deb7dc55a23a052405f1eba", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a178ea5f84620508efbee96fb1da287c1a779d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=c7a178ea5f84620508efbee96fb1da287c1a779d", "patch": "@@ -138,17 +138,13 @@ pub fn nil_ty<'r>() -> Ty<'r> {\n }\n \n fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n-    match *lt {\n-        Some(s) => Some(cx.lifetime(span, Ident::from_str(s))),\n-        None => None,\n-    }\n+    lt.map(|s|\n+        cx.lifetime(span, Ident::from_str(s))\n+    )\n }\n \n fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> {\n-    match *lt {\n-        Some(s) => vec![cx.lifetime(span, Ident::from_str(s))],\n-        None => vec![],\n-    }\n+    mk_lifetime(cx, span, lt).into_iter().collect()\n }\n \n impl<'a> Ty<'a> {"}]}