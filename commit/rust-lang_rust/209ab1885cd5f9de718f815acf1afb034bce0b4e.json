{"sha": "209ab1885cd5f9de718f815acf1afb034bce0b4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOWFiMTg4NWNkNWY5ZGU3MThmODE1YWNmMWFmYjAzNGJjZTBiNGU=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-11-23T22:02:12Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-11-23T22:02:12Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "645796641acb4e37af8f5cad2ec5cd6969a643c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/645796641acb4e37af8f5cad2ec5cd6969a643c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/209ab1885cd5f9de718f815acf1afb034bce0b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/209ab1885cd5f9de718f815acf1afb034bce0b4e", "html_url": "https://github.com/rust-lang/rust/commit/209ab1885cd5f9de718f815acf1afb034bce0b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/209ab1885cd5f9de718f815acf1afb034bce0b4e/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5fddb6747dae0e01392e1cd47baba9e0587c8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fddb6747dae0e01392e1cd47baba9e0587c8e7", "html_url": "https://github.com/rust-lang/rust/commit/e5fddb6747dae0e01392e1cd47baba9e0587c8e7"}, {"sha": "58a2bc45d70253526e81760e884d5fbc2ab732de", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a2bc45d70253526e81760e884d5fbc2ab732de", "html_url": "https://github.com/rust-lang/rust/commit/58a2bc45d70253526e81760e884d5fbc2ab732de"}], "stats": {"total": 4052, "additions": 3152, "deletions": 900}, "files": [{"sha": "a3f114e0bb34f4e64c8eb233afa49b344d106f33", "filename": ".github/PULL_REQUEST_TEMPLATE.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/.github%2FPULL_REQUEST_TEMPLATE.md", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/.github%2FPULL_REQUEST_TEMPLATE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FPULL_REQUEST_TEMPLATE.md?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,8 +1,8 @@\n Thank you for making Clippy better!\n \n We're collecting our changelog from pull request descriptions.\n-If your PR only updates to the latest nightly, you can leave the\n-`changelog` entry as `none`. Otherwise, please write a short comment\n+If your PR only includes internal changes, you can just write\n+`changelog: none`. Otherwise, please write a short comment\n explaining your change.\n \n If your PR fixes an issue, you can add \"fixes #issue_number\" into this\n@@ -28,5 +28,5 @@ Delete this line and everything above before opening your PR.\n \n ---\n \n-*Please keep the line below*\n-changelog: none\n+*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n+changelog:"}, {"sha": "b9e4b0e67040cc89a6b4c9d84b76c67e28737648", "filename": "CHANGELOG.md", "status": "modified", "additions": 118, "deletions": 9, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -6,11 +6,117 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[e636b88...master](https://github.com/rust-lang/rust-clippy/compare/e636b88...master)\n+[b20d4c1...master](https://github.com/rust-lang/rust-clippy/compare/b20d4c1...master)\n+\n+## Rust 1.49\n+\n+Current beta, release 2020-12-31\n+\n+[e636b88...b20d4c1](https://github.com/rust-lang/rust-clippy/compare/e636b88...b20d4c1)\n+\n+### New Lints\n+\n+* [`field_reassign_with_default`] [#5911](https://github.com/rust-lang/rust-clippy/pull/5911)\n+* [`await_holding_refcell_ref`] [#6029](https://github.com/rust-lang/rust-clippy/pull/6029)\n+* [`disallowed_method`] [#6081](https://github.com/rust-lang/rust-clippy/pull/6081)\n+* [`inline_asm_x86_att_syntax`] [#6092](https://github.com/rust-lang/rust-clippy/pull/6092)\n+* [`inline_asm_x86_intel_syntax`] [#6092](https://github.com/rust-lang/rust-clippy/pull/6092)\n+* [`from_iter_instead_of_collect`] [#6101](https://github.com/rust-lang/rust-clippy/pull/6101)\n+* [`mut_mutex_lock`] [#6103](https://github.com/rust-lang/rust-clippy/pull/6103)\n+* [`single_element_loop`] [#6109](https://github.com/rust-lang/rust-clippy/pull/6109)\n+* [`manual_unwrap_or`] [#6123](https://github.com/rust-lang/rust-clippy/pull/6123)\n+* [`large_types_passed_by_value`] [#6135](https://github.com/rust-lang/rust-clippy/pull/6135)\n+* [`result_unit_err`] [#6157](https://github.com/rust-lang/rust-clippy/pull/6157)\n+* [`ref_option_ref`] [#6165](https://github.com/rust-lang/rust-clippy/pull/6165)\n+* [`manual_range_contains`] [#6177](https://github.com/rust-lang/rust-clippy/pull/6177)\n+* [`unusual_byte_groupings`] [#6183](https://github.com/rust-lang/rust-clippy/pull/6183)\n+* [`comparison_to_empty`] [#6226](https://github.com/rust-lang/rust-clippy/pull/6226)\n+* [`map_collect_result_unit`] [#6227](https://github.com/rust-lang/rust-clippy/pull/6227)\n+* [`manual_ok_or`] [#6233](https://github.com/rust-lang/rust-clippy/pull/6233)\n+\n+### Moves and Deprecations\n+\n+* Rename `single_char_push_str` to [`single_char_add_str`]\n+  [#6037](https://github.com/rust-lang/rust-clippy/pull/6037)\n+* Rename `zero_width_space` to [`invisible_characters`]\n+  [#6105](https://github.com/rust-lang/rust-clippy/pull/6105)\n+* Deprecate [`drop_bounds`] (uplifted)\n+  [#6111](https://github.com/rust-lang/rust-clippy/pull/6111)\n+* Move [`string_lit_as_bytes`] to `nursery`\n+  [#6117](https://github.com/rust-lang/rust-clippy/pull/6117)\n+* Move [`rc_buffer`] to `restriction`\n+  [#6128](https://github.com/rust-lang/rust-clippy/pull/6128)\n+\n+### Enhancements\n+\n+* [`manual_memcpy`]: Also lint when there are loop counters (and produce a\n+  reliable suggestion)\n+  [#5727](https://github.com/rust-lang/rust-clippy/pull/5727)\n+* [`single_char_add_str`]: Also lint on `String::insert_str`\n+  [#6037](https://github.com/rust-lang/rust-clippy/pull/6037)\n+* [`invisible_characters`]: Also lint the characters `\\u{AD}` and `\\u{2060}`\n+  [#6105](https://github.com/rust-lang/rust-clippy/pull/6105)\n+* [`eq_op`]: Also lint on the `assert_*!` macro family\n+  [#6167](https://github.com/rust-lang/rust-clippy/pull/6167)\n+* [`items_after_statements`]: Also lint in local macro expansions\n+  [#6176](https://github.com/rust-lang/rust-clippy/pull/6176)\n+* [`unnecessary_cast`]: Also lint casts on integer and float literals\n+  [#6187](https://github.com/rust-lang/rust-clippy/pull/6187)\n+* [`manual_unwrap_or`]: Also lint `Result::unwrap_or`\n+  [#6190](https://github.com/rust-lang/rust-clippy/pull/6190)\n+* [`match_like_matches_macro`]: Also lint when `match` has more than two arms\n+  [#6216](https://github.com/rust-lang/rust-clippy/pull/6216)\n+* [`integer_arithmetic`]: Better handle `/` an `%` operators\n+  [#6229](https://github.com/rust-lang/rust-clippy/pull/6229)\n+\n+### False Positive Fixes\n+\n+* [`needless_lifetimes`]: Bail out if the function has a `where` clause with the\n+  lifetime [#5978](https://github.com/rust-lang/rust-clippy/pull/5978)\n+* [`explicit_counter_loop`]: No longer lints, when loop counter is used after it\n+  is incremented [#6076](https://github.com/rust-lang/rust-clippy/pull/6076)\n+* [`or_fun_call`]: Revert changes addressing the handling of `const fn`\n+  [#6077](https://github.com/rust-lang/rust-clippy/pull/6077)\n+* [`needless_range_loop`]: No longer lints, when the iterable is used in the\n+  range [#6102](https://github.com/rust-lang/rust-clippy/pull/6102)\n+* [`inconsistent_digit_grouping`]: Fix bug when using floating point exponent\n+  [#6104](https://github.com/rust-lang/rust-clippy/pull/6104)\n+* [`mistyped_literal_suffixes`]: No longer lints on the fractional part of a\n+  float (e.g. `713.32_64`)\n+  [#6114](https://github.com/rust-lang/rust-clippy/pull/6114)\n+* [`invalid_regex`]: No longer lint on unicode characters within `bytes::Regex`\n+  [#6132](https://github.com/rust-lang/rust-clippy/pull/6132)\n+* [`boxed_local`]: No longer lints on `extern fn` arguments\n+  [#6133](https://github.com/rust-lang/rust-clippy/pull/6133)\n+* [`needless_lifetimes`]: Fix regression, where lifetime is used in `where`\n+  clause [#6198](https://github.com/rust-lang/rust-clippy/pull/6198)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`unnecessary_sort_by`]: Avoid dereferencing the suggested closure parameter\n+  [#6078](https://github.com/rust-lang/rust-clippy/pull/6078)\n+* [`needless_arbitrary_self_type`]: Correctly handle expanded code\n+  [#6093](https://github.com/rust-lang/rust-clippy/pull/6093)\n+* [`useless_format`]: Preserve raw strings in suggestion\n+  [#6151](https://github.com/rust-lang/rust-clippy/pull/6151)\n+* [`empty_loop`]: Suggest alternatives\n+  [#6162](https://github.com/rust-lang/rust-clippy/pull/6162)\n+* [`borrowed_box`]: Correctly add parentheses in suggestion\n+  [#6200](https://github.com/rust-lang/rust-clippy/pull/6200)\n+* [`unused_unit`]: Improve suggestion formatting\n+  [#6247](https://github.com/rust-lang/rust-clippy/pull/6247)\n+\n+### Documentation Improvements\n+\n+* Some doc improvements:\n+    * [`rc_buffer`] [#6090](https://github.com/rust-lang/rust-clippy/pull/6090)\n+    * [`empty_loop`] [#6162](https://github.com/rust-lang/rust-clippy/pull/6162)\n+* [`doc_markdown`]: Document problematic link text style\n+  [#6107](https://github.com/rust-lang/rust-clippy/pull/6107)\n \n ## Rust 1.48\n \n-Current beta, release 2020-11-19\n+Current stable, released 2020-11-19\n \n [09bd400...e636b88](https://github.com/rust-lang/rust-clippy/compare/09bd400...e636b88)\n \n@@ -56,15 +162,15 @@ Current beta, release 2020-11-19\n \n * [`useless_attribute`]: permit allowing [`wildcard_imports`] and [`enum_glob_use`]\n   [#5994](https://github.com/rust-lang/rust-clippy/pull/5994)\n-* [`transmute_ptr_to_ptr`]: avoid suggesting dereferencing raw pointers in const contexts \n+* [`transmute_ptr_to_ptr`]: avoid suggesting dereferencing raw pointers in const contexts\n   [#5999](https://github.com/rust-lang/rust-clippy/pull/5999)\n * [`redundant_closure_call`]: take into account usages of the closure in nested functions and closures\n   [#5920](https://github.com/rust-lang/rust-clippy/pull/5920)\n * Fix false positive in [`borrow_interior_mutable_const`] when referencing a field behind a pointer\n   [#5949](https://github.com/rust-lang/rust-clippy/pull/5949)\n * [`doc_markdown`]: allow using \"GraphQL\" without backticks\n   [#5996](https://github.com/rust-lang/rust-clippy/pull/5996)\n-* [`to_string_in_display`]: avoid linting when calling `to_string()` on anything that is not `self` \n+* [`to_string_in_display`]: avoid linting when calling `to_string()` on anything that is not `self`\n   [#5971](https://github.com/rust-lang/rust-clippy/pull/5971)\n * [`indexing_slicing`] and [`out_of_bounds_indexing`] treat references to arrays as arrays\n   [#6034](https://github.com/rust-lang/rust-clippy/pull/6034)\n@@ -85,27 +191,27 @@ Current beta, release 2020-11-19\n   [#5946](https://github.com/rust-lang/rust-clippy/pull/5946)\n * [`useless_conversion`]: show the type in the error message\n   [#6035](https://github.com/rust-lang/rust-clippy/pull/6035)\n-* [`unnecessary_mut_passed`]: discriminate between functions and methods in the error message \n+* [`unnecessary_mut_passed`]: discriminate between functions and methods in the error message\n   [#5892](https://github.com/rust-lang/rust-clippy/pull/5892)\n * [`float_cmp`] and [`float_cmp_const`]: change wording to make margin of error less ambiguous\n   [#6043](https://github.com/rust-lang/rust-clippy/pull/6043)\n * [`default_trait_access`]: do not use unnecessary type parameters in the suggestion\n   [#5993](https://github.com/rust-lang/rust-clippy/pull/5993)\n-* [`collapsible_if`]: don't use expanded code in the suggestion \n+* [`collapsible_if`]: don't use expanded code in the suggestion\n   [#5992](https://github.com/rust-lang/rust-clippy/pull/5992)\n * Do not suggest empty format strings in [`print_with_newline`] and [`write_with_newline`]\n   [#6042](https://github.com/rust-lang/rust-clippy/pull/6042)\n * [`unit_arg`]: improve the readability of the suggestion\n   [#5931](https://github.com/rust-lang/rust-clippy/pull/5931)\n-* [`stable_sort_primitive`]: print the type that is being sorted in the lint message \n+* [`stable_sort_primitive`]: print the type that is being sorted in the lint message\n   [#5935](https://github.com/rust-lang/rust-clippy/pull/5935)\n * Show line count and max lines in [`too_many_lines`] lint message\n   [#6009](https://github.com/rust-lang/rust-clippy/pull/6009)\n * Keep parentheses in the suggestion of [`useless_conversion`] where applicable\n   [#5900](https://github.com/rust-lang/rust-clippy/pull/5900)\n * [`option_map_unit_fn`] and [`result_map_unit_fn`]: print the unit type `()` explicitly\n   [#6024](https://github.com/rust-lang/rust-clippy/pull/6024)\n-* [`redundant_allocation`]: suggest replacing `Rc<Box<T>>` with `Rc<T>` \n+* [`redundant_allocation`]: suggest replacing `Rc<Box<T>>` with `Rc<T>`\n   [#5899](https://github.com/rust-lang/rust-clippy/pull/5899)\n * Make lint messages adhere to rustc dev guide conventions\n   [#5893](https://github.com/rust-lang/rust-clippy/pull/5893)\n@@ -128,7 +234,7 @@ Current beta, release 2020-11-19\n \n ## Rust 1.47\n \n-Current stable, released 2020-10-08\n+Released 2020-10-08\n \n [c2c07fa...09bd400](https://github.com/rust-lang/rust-clippy/compare/c2c07fa...09bd400)\n \n@@ -1787,6 +1893,7 @@ Released 2018-09-13\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n+[`let_underscore_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n@@ -1956,6 +2063,7 @@ Released 2018-09-13\n [`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n [`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign\n [`string_extend_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars\n+[`string_from_utf8_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n@@ -2006,6 +2114,7 @@ Released 2018-09-13\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n+[`unnecessary_wraps`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps\n [`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n [`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n [`unnested_or_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns"}, {"sha": "1da626b505dfb9e1da2978c909a392acba24dcc7", "filename": "README.md", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -7,28 +7,22 @@ A collection of lints to catch common mistakes and improve your [Rust](https://g\n \n [There are over 400 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n-We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n-\n-* `clippy::all` (everything that is on by default: all the categories below except for `nursery`, `pedantic`, and `cargo`)\n-* `clippy::correctness` (code that is just **outright wrong** or **very very useless**, causes hard errors by default)\n-* `clippy::style` (code that should be written in a more idiomatic way)\n-* `clippy::complexity` (code that does something simple but in a complex way)\n-* `clippy::perf` (code that can be written in a faster way)\n-* `clippy::pedantic` (lints which are rather strict, off by default)\n-* `clippy::nursery` (new lints that aren't quite ready yet, off by default)\n-* `clippy::cargo` (checks against the cargo manifest, off by default)\n+Lints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\n+You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category.\n+\n+Category | Description | Default level\n+-- | -- | --\n+`clippy::all` | all lints that are on by default (correctness, style, complexity, perf) | **warn/deny**\n+`clippy::correctness` | code that is outright wrong or very useless | **deny**\n+`clippy::style` | code that should be written in a more idiomatic way | **warn**\n+`clippy::complexity` | code that does something simple but in a complex way | **warn**\n+`clippy::perf` | code that can be written to run faster | **warn**\n+`clippy::pedantic` | lints which are rather strict or might have false positives | allow\n+`clippy::nursery` | new lints that are still under development | allow\n+`clippy::cargo` | lints for the cargo manifest | allow\n \n More to come, please [file an issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n \n-Only the following of those categories are enabled by default:\n-\n-* `clippy::style`\n-* `clippy::correctness`\n-* `clippy::complexity`\n-* `clippy::perf`\n-\n-Other categories need to be enabled in order for their lints to be executed.\n-\n The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also contains \"restriction lints\", which are\n for things which are usually not considered \"bad\", but may be useful to turn on in specific cases. These should be used\n very selectively, if at all."}, {"sha": "62c73dbac48b4a28f622158d525361242913d2bb", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -129,7 +129,7 @@ fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n-        // inner block is optional. unwarp it if it exists, or use the expression as is otherwise.\n+        // inner block is optional. unwrap it if it exists, or use the expression as is otherwise.\n         if let Some(begin_panic_call) = match block_expr.kind {\n             ExprKind::Block(ref inner_block, _) => &inner_block.expr,\n             _ => &block.expr,"}, {"sha": "58892024ce2439cebfde97b587939df93c8bf406", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub AWAIT_HOLDING_LOCK,\n-    correctness,\n+    pedantic,\n     \"Inside an async function, holding a MutexGuard while calling await\"\n }\n \n@@ -65,8 +65,8 @@ declare_clippy_lint! {\n     /// use std::cell::RefCell;\n     ///\n     /// async fn foo(x: &RefCell<u32>) {\n-    ///   let b = x.borrow_mut()();\n-    ///   *ref += 1;\n+    ///   let mut y = x.borrow_mut();\n+    ///   *y += 1;\n     ///   bar.await;\n     /// }\n     /// ```\n@@ -77,14 +77,14 @@ declare_clippy_lint! {\n     ///\n     /// async fn foo(x: &RefCell<u32>) {\n     ///   {\n-    ///     let b = x.borrow_mut();\n-    ///     *ref += 1;\n+    ///      let mut y = x.borrow_mut();\n+    ///      *y += 1;\n     ///   }\n     ///   bar.await;\n     /// }\n     /// ```\n     pub AWAIT_HOLDING_REFCELL_REF,\n-    correctness,\n+    pedantic,\n     \"Inside an async function, holding a RefCell ref while calling await\"\n }\n "}, {"sha": "0d294761af5ab9a844b48e3495a01ef57b661ab7", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -23,6 +23,21 @@ declare_clippy_lint! {\n     /// [package]\n     /// name = \"clippy\"\n     /// version = \"0.0.212\"\n+    /// description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n+    /// repository = \"https://github.com/rust-lang/rust-clippy\"\n+    /// readme = \"README.md\"\n+    /// license = \"MIT OR Apache-2.0\"\n+    /// keywords = [\"clippy\", \"lint\", \"plugin\"]\n+    /// categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n+    /// ```\n+    ///\n+    /// Should include an authors field like:\n+    ///\n+    /// ```toml\n+    /// # This `Cargo.toml` includes all common metadata\n+    /// [package]\n+    /// name = \"clippy\"\n+    /// version = \"0.0.212\"\n     /// authors = [\"Someone <someone@rust-lang.org>\"]\n     /// description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n     /// repository = \"https://github.com/rust-lang/rust-clippy\""}, {"sha": "1c3285ed701db19683379058e45f6a2c2453bd46", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -181,3 +181,8 @@ declare_deprecated_lint! {\n     pub TEMPORARY_CSTRING_AS_PTR,\n     \"this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\"\n }\n+\n+declare_deprecated_lint! {\n+    pub PANIC_PARAMS,\n+    \"this lint has been uplifted to rustc and is now called `panic_fmt`\"\n+}"}, {"sha": "eb5857348fd390804113d7ad1f27f22cce7309c9", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "8842901d90b83dac9b9b7e638fbb0a774733dd0e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -69,7 +69,7 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for comparing to an empty slice such as \"\" or [],`\n+    /// **What it does:** Checks for comparing to an empty slice such as `\"\"` or `[]`,\n     /// and suggests using `.is_empty()` where applicable.\n     ///\n     /// **Why is this bad?** Some structures can answer `.is_empty()` much faster"}, {"sha": "6a5a77f8690a9be9b17c526c23e884cd1be6fa77", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n+use crate::utils::{implements_trait, is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -58,7 +58,48 @@ declare_clippy_lint! {\n     \"non-binding let on a synchronization lock\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let _ = <expr>`\n+    /// where expr has a type that implements `Drop`\n+    ///\n+    /// **Why is this bad?** This statement immediately drops the initializer\n+    /// expression instead of extending its lifetime to the end of the scope, which\n+    /// is often not intended. To extend the expression's lifetime to the end of the\n+    /// scope, use an underscore-prefixed name instead (i.e. _var). If you want to\n+    /// explicitly drop the expression, `std::mem::drop` conveys your intention\n+    /// better and is less error-prone.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// struct Droppable;\n+    /// impl Drop for Droppable {\n+    ///     fn drop(&mut self) {}\n+    /// }\n+    /// {\n+    ///     let _ = Droppable;\n+    ///     //               ^ dropped here\n+    ///     /* more code */\n+    /// }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// {\n+    ///     let _droppable = Droppable;\n+    ///     /* more code */\n+    ///     // dropped at end of scope\n+    /// }\n+    /// ```\n+    pub LET_UNDERSCORE_DROP,\n+    pedantic,\n+    \"non-binding let on a type that implements `Drop`\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_DROP]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::MUTEX_GUARD,\n@@ -84,6 +125,15 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n \n                     GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n                 });\n+                let implements_drop = cx.tcx.lang_items().drop_trait().map_or(false, |drop_trait|\n+                    init_ty.walk().any(|inner| match inner.unpack() {\n+                        GenericArgKind::Type(inner_ty) => {\n+                            implements_trait(cx, inner_ty, drop_trait, &[])\n+                        },\n+\n+                        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                    })\n+                );\n                 if contains_sync_guard {\n                     span_lint_and_help(\n                         cx,\n@@ -94,6 +144,16 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n                     )\n+                } else if implements_drop {\n+                    span_lint_and_help(\n+                        cx,\n+                        LET_UNDERSCORE_DROP,\n+                        local.span,\n+                        \"non-binding `let` on a type that implements `Drop`\",\n+                        None,\n+                        \"consider using an underscore-prefixed named \\\n+                            binding or dropping explicitly with `std::mem::drop`\"\n+                    )\n                 } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "7e8cbd00c22a146dadb04d454046ed3bb2ce1cfb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -323,6 +323,7 @@ mod unicode;\n mod unit_return_expecting_ord;\n mod unnamed_address;\n mod unnecessary_sort_by;\n+mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n mod unused_io_amount;\n@@ -495,6 +496,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::temporary_cstring_as_ptr\",\n         \"this lint has been uplifted to rustc and is now called `temporary_cstring_as_ptr`\",\n     );\n+    store.register_removed(\n+        \"clippy::panic_params\",\n+        \"this lint has been uplifted to rustc and is now called `panic_fmt`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -622,6 +627,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n+        &let_underscore::LET_UNDERSCORE_DROP,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n         &lifetimes::EXTRA_UNUSED_LIFETIMES,\n@@ -831,6 +837,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n         &strings::STRING_ADD,\n         &strings::STRING_ADD_ASSIGN,\n+        &strings::STRING_FROM_UTF8_AS_BYTES,\n         &strings::STRING_LIT_AS_BYTES,\n         &suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n         &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n@@ -889,6 +896,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n+        &unnecessary_wraps::UNNECESSARY_WRAPS,\n         &unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n@@ -1061,6 +1069,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_clone::RedundantClone);\n     store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n     store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n+    store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n     store.register_late_pass(|| box types::RefToMut);\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n     store.register_late_pass(|| box missing_const_for_fn::MissingConstForFn);\n@@ -1215,6 +1224,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n \n     store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n         LintId::of(&attrs::INLINE_ALWAYS),\n+        LintId::of(&await_holding_invalid::AWAIT_HOLDING_LOCK),\n+        LintId::of(&await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n@@ -1238,6 +1249,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n+        LintId::of(&let_underscore::LET_UNDERSCORE_DROP),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n         LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n@@ -1317,8 +1329,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n-        LintId::of(&await_holding_invalid::AWAIT_HOLDING_LOCK),\n-        LintId::of(&await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n@@ -1525,6 +1535,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n+        LintId::of(&strings::STRING_FROM_UTF8_AS_BYTES),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n@@ -1565,6 +1576,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+        LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n@@ -1749,6 +1761,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&repeat_once::REPEAT_ONCE),\n+        LintId::of(&strings::STRING_FROM_UTF8_AS_BYTES),\n         LintId::of(&swap::MANUAL_SWAP),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n@@ -1767,6 +1780,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n+        LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),\n@@ -1779,8 +1793,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::MISMATCHED_TARGET_OS),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n-        LintId::of(&await_holding_invalid::AWAIT_HOLDING_LOCK),\n-        LintId::of(&await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n         LintId::of(&bit_mask::BAD_BIT_MASK),\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n         LintId::of(&booleans::LOGIC_BUG),"}, {"sha": "0d31e9cfc3decb073691ca18766184563141b25f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -4,10 +4,10 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    indent_of, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment,\n-    match_trait_method, match_type, match_var, multispan_sugg, qpath_res, single_segment_path, snippet,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then, sugg, SpanlessEq,\n+    indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n+    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, qpath_res, single_segment_path,\n+    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n+    span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -543,17 +543,15 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n         if let ExprKind::Loop(ref block, _, LoopSource::Loop) = expr.kind {\n-            // also check for empty `loop {}` statements\n-            // TODO(issue #6161): Enable for no_std crates (outside of #[panic_handler])\n-            if block.stmts.is_empty() && block.expr.is_none() && !is_no_std_crate(cx.tcx.hir().krate()) {\n-                span_lint_and_help(\n-                    cx,\n-                    EMPTY_LOOP,\n-                    expr.span,\n-                    \"empty `loop {}` wastes CPU cycles\",\n-                    None,\n-                    \"You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\",\n-                );\n+            // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n+            if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n+                let msg = \"empty `loop {}` wastes CPU cycles\";\n+                let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n+                    \"you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\"\n+                } else {\n+                    \"you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\"\n+                };\n+                span_lint_and_help(cx, EMPTY_LOOP, expr.span, msg, None, help);\n             }\n \n             // extract the expression from the first statement (if any) in a block"}, {"sha": "7b3b450ef93e943fad6882126463f32a42617ebd", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths::FUTURE_FROM_GENERATOR;\n-use crate::utils::{match_function_call, snippet_block, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_function_call, position_before_rarrow, snippet_block, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     |diag| {\n                         if_chain! {\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n-                            if let Some(ret_pos) = header_snip.rfind(\"->\");\n+                            if let Some(ret_pos) = position_before_rarrow(header_snip.clone());\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n                                 let help = format!(\"make the function `async` and {}\", ret_sugg);\n@@ -194,7 +194,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";\n-            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\"-> {}\", snip)))\n+            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {}\", snip)))\n         },\n     }\n }"}, {"sha": "220240acb7aa916368140b92e3cc1df1ef0bab35", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -8,13 +8,15 @@ use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n+use rustc_middle::ty::adjustment::Adjust;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `iterator.map(|x| x.clone())` and suggests\n-    /// `iterator.cloned()` instead\n+    /// **What it does:** Checks for usage of `map(|x| x.clone())` or\n+    /// dereferencing closures for `Copy` types, on `Iterator` or `Option`,\n+    /// and suggests `cloned()` or `copied()` instead\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely\n     ///\n@@ -75,14 +77,19 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n                                     }\n                                 }\n                             },\n-                            hir::ExprKind::MethodCall(ref method, _, ref obj, _) => {\n-                                if ident_eq(name, &obj[0]) && method.ident.as_str() == \"clone\"\n-                                    && match_trait_method(cx, closure_expr, &paths::CLONE_TRAIT) {\n-\n-                                    let obj_ty = cx.typeck_results().expr_ty(&obj[0]);\n-                                    if let ty::Ref(_, ty, _) = obj_ty.kind() {\n-                                        let copy = is_copy(cx, ty);\n-                                        lint(cx, e.span, args[0].span, copy);\n+                            hir::ExprKind::MethodCall(ref method, _, [obj], _) => if_chain! {\n+                                if ident_eq(name, obj) && method.ident.name == sym::clone;\n+                                if match_trait_method(cx, closure_expr, &paths::CLONE_TRAIT);\n+                                // no autoderefs\n+                                if !cx.typeck_results().expr_adjustments(obj).iter()\n+                                    .any(|a| matches!(a.kind, Adjust::Deref(Some(..))));\n+                                then {\n+                                    let obj_ty = cx.typeck_results().expr_ty(obj);\n+                                    if let ty::Ref(_, ty, mutability) = obj_ty.kind() {\n+                                        if matches!(mutability, Mutability::Not) {\n+                                            let copy = is_copy(cx, ty);\n+                                            lint(cx, e.span, args[0].span, copy);\n+                                        }\n                                     } else {\n                                         lint_needless_cloning(cx, e.span, args[0].span);\n                                     }"}, {"sha": "540a1484a8558292a92ad7ea0222eabce8892d26", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 124, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,14 +1,12 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use crate::utils::{\n     in_macro, match_qpath, match_type, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, snippet,\n-    snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then,\n+    snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then, visitors::find_all_ret_expressions,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_span::Span;\n \n pub(crate) struct OptionAndThenSome;\n@@ -193,124 +191,3 @@ pub(crate) trait BindInsteadOfMap {\n         }\n     }\n }\n-\n-/// returns `true` if expr contains match expr desugared from try\n-fn contains_try(expr: &hir::Expr<'_>) -> bool {\n-    struct TryFinder {\n-        found: bool,\n-    }\n-\n-    impl<'hir> intravisit::Visitor<'hir> for TryFinder {\n-        type Map = Map<'hir>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n-        fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n-            if self.found {\n-                return;\n-            }\n-            match expr.kind {\n-                hir::ExprKind::Match(_, _, hir::MatchSource::TryDesugar) => self.found = true,\n-                _ => intravisit::walk_expr(self, expr),\n-            }\n-        }\n-    }\n-\n-    let mut visitor = TryFinder { found: false };\n-    visitor.visit_expr(expr);\n-    visitor.found\n-}\n-\n-fn find_all_ret_expressions<'hir, F>(_cx: &LateContext<'_>, expr: &'hir hir::Expr<'hir>, callback: F) -> bool\n-where\n-    F: FnMut(&'hir hir::Expr<'hir>) -> bool,\n-{\n-    struct RetFinder<F> {\n-        in_stmt: bool,\n-        failed: bool,\n-        cb: F,\n-    }\n-\n-    struct WithStmtGuarg<'a, F> {\n-        val: &'a mut RetFinder<F>,\n-        prev_in_stmt: bool,\n-    }\n-\n-    impl<F> RetFinder<F> {\n-        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuarg<'_, F> {\n-            let prev_in_stmt = std::mem::replace(&mut self.in_stmt, in_stmt);\n-            WithStmtGuarg {\n-                val: self,\n-                prev_in_stmt,\n-            }\n-        }\n-    }\n-\n-    impl<F> std::ops::Deref for WithStmtGuarg<'_, F> {\n-        type Target = RetFinder<F>;\n-\n-        fn deref(&self) -> &Self::Target {\n-            self.val\n-        }\n-    }\n-\n-    impl<F> std::ops::DerefMut for WithStmtGuarg<'_, F> {\n-        fn deref_mut(&mut self) -> &mut Self::Target {\n-            self.val\n-        }\n-    }\n-\n-    impl<F> Drop for WithStmtGuarg<'_, F> {\n-        fn drop(&mut self) {\n-            self.val.in_stmt = self.prev_in_stmt;\n-        }\n-    }\n-\n-    impl<'hir, F: FnMut(&'hir hir::Expr<'hir>) -> bool> intravisit::Visitor<'hir> for RetFinder<F> {\n-        type Map = Map<'hir>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n-        fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n-            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n-        }\n-\n-        fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {\n-            if self.failed {\n-                return;\n-            }\n-            if self.in_stmt {\n-                match expr.kind {\n-                    hir::ExprKind::Ret(Some(expr)) => self.inside_stmt(false).visit_expr(expr),\n-                    _ => intravisit::walk_expr(self, expr),\n-                }\n-            } else {\n-                match expr.kind {\n-                    hir::ExprKind::Match(cond, arms, _) => {\n-                        self.inside_stmt(true).visit_expr(cond);\n-                        for arm in arms {\n-                            self.visit_expr(arm.body);\n-                        }\n-                    },\n-                    hir::ExprKind::Block(..) => intravisit::walk_expr(self, expr),\n-                    hir::ExprKind::Ret(Some(expr)) => self.visit_expr(expr),\n-                    _ => self.failed |= !(self.cb)(expr),\n-                }\n-            }\n-        }\n-    }\n-\n-    !contains_try(expr) && {\n-        let mut ret_finder = RetFinder {\n-            in_stmt: false,\n-            failed: false,\n-            cb: callback,\n-        };\n-        ret_finder.visit_expr(expr);\n-        !ret_finder.failed\n-    }\n-}"}, {"sha": "fa1744043657a2eee08d978616af231d4f73c706", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 84, "deletions": 58, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -515,11 +515,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for an iterator search (such as `find()`,\n+    /// **What it does:** Checks for an iterator or string search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.any(_)`.\n+    /// `_.any(_)` or `_.contains(_)`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -535,7 +535,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n-    \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\"\n+    \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\"\n }\n \n declare_clippy_lint! {\n@@ -1351,7 +1351,7 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(),_>()`.\n+    /// **What it does:** Checks for usage of `_.map(_).collect::<Result<(), _>()`.\n     ///\n     /// **Why is this bad?** Using `try_for_each` instead is more readable and idiomatic.\n     ///\n@@ -1797,12 +1797,20 @@ fn lint_or_fun_call<'tcx>(\n         cx: &LateContext<'tcx>,\n         name: &str,\n         method_span: Span,\n-        fun_span: Span,\n         self_expr: &hir::Expr<'_>,\n         arg: &'tcx hir::Expr<'_>,\n-        or_has_args: bool,\n         span: Span,\n+        // None if lambda is required\n+        fun_span: Option<Span>,\n     ) {\n+        // (path, fn_has_argument, methods, suffix)\n+        static KNOW_TYPES: [(&[&str], bool, &[&str], &str); 4] = [\n+            (&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n+            (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n+            (&paths::OPTION, false, &[\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"], \"else\"),\n+            (&paths::RESULT, true, &[\"or\", \"unwrap_or\"], \"else\"),\n+        ];\n+\n         if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = &arg.kind {\n             if path.ident.as_str() == \"len\" {\n                 let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n@@ -1818,32 +1826,32 @@ fn lint_or_fun_call<'tcx>(\n             }\n         }\n \n-        // (path, fn_has_argument, methods, suffix)\n-        let know_types: &[(&[_], _, &[_], _)] = &[\n-            (&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n-            (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n-            (&paths::OPTION, false, &[\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"], \"else\"),\n-            (&paths::RESULT, true, &[\"or\", \"unwrap_or\"], \"else\"),\n-        ];\n-\n         if_chain! {\n-            if know_types.iter().any(|k| k.2.contains(&name));\n+            if KNOW_TYPES.iter().any(|k| k.2.contains(&name));\n \n             if is_lazyness_candidate(cx, arg);\n             if !contains_return(&arg);\n \n             let self_ty = cx.typeck_results().expr_ty(self_expr);\n \n             if let Some(&(_, fn_has_arguments, poss, suffix)) =\n-                know_types.iter().find(|&&i| match_type(cx, self_ty, i.0));\n+                KNOW_TYPES.iter().find(|&&i| match_type(cx, self_ty, i.0));\n \n             if poss.contains(&name);\n \n             then {\n-                let sugg: Cow<'_, _> = match (fn_has_arguments, !or_has_args) {\n-                    (true, _) => format!(\"|_| {}\", snippet_with_macro_callsite(cx, arg.span, \"..\")).into(),\n-                    (false, false) => format!(\"|| {}\", snippet_with_macro_callsite(cx, arg.span, \"..\")).into(),\n-                    (false, true) => snippet_with_macro_callsite(cx, fun_span, \"..\"),\n+                let sugg: Cow<'_, str> = {\n+                    let (snippet_span, use_lambda) = match (fn_has_arguments, fun_span) {\n+                        (false, Some(fun_span)) => (fun_span, false),\n+                        _ => (arg.span, true),\n+                    };\n+                    let snippet = snippet_with_macro_callsite(cx, snippet_span, \"..\");\n+                    if use_lambda {\n+                        let l_arg = if fn_has_arguments { \"_\" } else { \"\" };\n+                        format!(\"|{}| {}\", l_arg, snippet).into()\n+                    } else {\n+                        snippet\n+                    }\n                 };\n                 let span_replace_word = method_span.with_hi(span.hi());\n                 span_lint_and_sugg(\n@@ -1864,28 +1872,13 @@ fn lint_or_fun_call<'tcx>(\n             hir::ExprKind::Call(ref fun, ref or_args) => {\n                 let or_has_args = !or_args.is_empty();\n                 if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {\n-                    check_general_case(\n-                        cx,\n-                        name,\n-                        method_span,\n-                        fun.span,\n-                        &args[0],\n-                        &args[1],\n-                        or_has_args,\n-                        expr.span,\n-                    );\n+                    let fun_span = if or_has_args { None } else { Some(fun.span) };\n+                    check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, fun_span);\n                 }\n             },\n-            hir::ExprKind::MethodCall(_, span, ref or_args, _) => check_general_case(\n-                cx,\n-                name,\n-                method_span,\n-                span,\n-                &args[0],\n-                &args[1],\n-                !or_args.is_empty(),\n-                expr.span,\n-            ),\n+            hir::ExprKind::Index(..) | hir::ExprKind::MethodCall(..) => {\n+                check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n+            },\n             _ => {},\n         }\n     }\n@@ -3048,6 +3041,7 @@ fn lint_flat_map_identity<'tcx>(\n }\n \n /// lint searching an Iterator followed by `is_some()`\n+/// or calling `find()` on a string followed by `is_some()`\n fn lint_search_is_some<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n@@ -3059,10 +3053,10 @@ fn lint_search_is_some<'tcx>(\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n         let msg = format!(\n-            \"called `is_some()` after searching an `Iterator` with {}. This is more succinctly \\\n-             expressed by calling `any()`.\",\n+            \"called `is_some()` after searching an `Iterator` with `{}`\",\n             search_method\n         );\n+        let hint = \"this is more succinctly expressed by calling `any()`\";\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -3090,15 +3084,44 @@ fn lint_search_is_some<'tcx>(\n                 SEARCH_IS_SOME,\n                 method_span.with_hi(expr.span.hi()),\n                 &msg,\n-                \"try this\",\n+                \"use `any()` instead\",\n                 format!(\n                     \"any({})\",\n                     any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                 ),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n-            span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);\n+            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, hint);\n+        }\n+    }\n+    // lint if `find()` is called by `String` or `&str`\n+    else if search_method == \"find\" {\n+        let is_string_or_str_slice = |e| {\n+            let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n+            if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n+                true\n+            } else {\n+                *self_ty.kind() == ty::Str\n+            }\n+        };\n+        if_chain! {\n+            if is_string_or_str_slice(&search_args[0]);\n+            if is_string_or_str_slice(&search_args[1]);\n+            then {\n+                let msg = \"called `is_some()` after calling `find()` on a string\";\n+                let mut applicability = Applicability::MachineApplicable;\n+                let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                span_lint_and_sugg(\n+                    cx,\n+                    SEARCH_IS_SOME,\n+                    method_span.with_hi(expr.span.hi()),\n+                    msg,\n+                    \"use `contains()` instead\",\n+                    format!(\"contains({})\", find_arg),\n+                    applicability,\n+                );\n+            }\n         }\n     }\n }\n@@ -3901,21 +3924,24 @@ fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<\n     let ty = cx.typeck_results().expr_ty(expr);\n     let arg_ty = cx.typeck_results().expr_ty(&args[0]);\n \n-    let from_iter_id = get_trait_def_id(cx, &paths::FROM_ITERATOR).unwrap();\n-    let iter_id = get_trait_def_id(cx, &paths::ITERATOR).unwrap();\n+    if_chain! {\n+        if let Some(from_iter_id) = get_trait_def_id(cx, &paths::FROM_ITERATOR);\n+        if let Some(iter_id) = get_trait_def_id(cx, &paths::ITERATOR);\n \n-    if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]) {\n-        // `expr` implements `FromIterator` trait\n-        let iter_expr = snippet(cx, args[0].span, \"..\");\n-        span_lint_and_sugg(\n-            cx,\n-            FROM_ITER_INSTEAD_OF_COLLECT,\n-            expr.span,\n-            \"usage of `FromIterator::from_iter`\",\n-            \"use `.collect()` instead of `::from_iter()`\",\n-            format!(\"{}.collect()\", iter_expr),\n-            Applicability::MaybeIncorrect,\n-        );\n+        if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]);\n+        then {\n+            // `expr` implements `FromIterator` trait\n+            let iter_expr = snippet(cx, args[0].span, \"..\");\n+            span_lint_and_sugg(\n+                cx,\n+                FROM_ITER_INSTEAD_OF_COLLECT,\n+                expr.span,\n+                \"usage of `FromIterator::from_iter`\",\n+                \"use `.collect()` instead of `::from_iter()`\",\n+                format!(\"{}.collect()\", iter_expr),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n     }\n }\n "}, {"sha": "a867bdb326d722dfc0c089fda2fa6f8b6adc71d2", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -33,6 +33,17 @@ pub(super) fn lint<'tcx>(\n                 } else {\n                     \"unnecessary closure used to substitute value for `Result::Err`\"\n                 };\n+                let applicability = if body\n+                    .params\n+                    .iter()\n+                    // bindings are checked to be unused above\n+                    .all(|param| matches!(param.pat.kind, hir::PatKind::Binding(..) | hir::PatKind::Wild))\n+                {\n+                    Applicability::MachineApplicable\n+                } else {\n+                    // replacing the lambda may break type inference\n+                    Applicability::MaybeIncorrect\n+                };\n \n                 span_lint_and_sugg(\n                     cx,\n@@ -46,7 +57,7 @@ pub(super) fn lint<'tcx>(\n                         simplify_using,\n                         snippet(cx, body_expr.span, \"..\"),\n                     ),\n-                    Applicability::MachineApplicable,\n+                    applicability,\n                 );\n             }\n         }"}, {"sha": "11044e0c2fb487bab154c72fac101619445a9cea", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -89,11 +89,7 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n     for (hir_ty, ty) in decl.inputs.iter().zip(fn_sig.inputs().skip_binder().iter()) {\n         check_ty(cx, hir_ty.span, ty);\n     }\n-    check_ty(\n-        cx,\n-        decl.output.span(),\n-        cx.tcx.erase_late_bound_regions(fn_sig.output()),\n-    );\n+    check_ty(cx, decl.output.span(), cx.tcx.erase_late_bound_regions(fn_sig.output()));\n }\n \n // We want to lint 1. sets or maps with 2. not immutable key types and 3. no unerased"}, {"sha": "6b0d198edcffa647112af10cceccea3a3304f2d2", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 135, "deletions": 35, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -5,11 +5,15 @@\n use std::ptr;\n \n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{\n+    BodyId, Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n+};\n use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_middle::ty::{AssocKind, Ty};\n+use rustc_middle::ty::{self, AssocKind, Const, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n@@ -36,14 +40,17 @@ declare_clippy_lint! {\n     /// `std::sync::ONCE_INIT` constant). In this case the use of `const` is legit,\n     /// and this lint should be suppressed.\n     ///\n-    /// When an enum has variants with interior mutability, use of its non interior mutable\n-    /// variants can generate false positives. See issue\n-    /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962)\n+    /// Even though the lint avoids triggering on a constant whose type has enums that have variants\n+    /// with interior mutability, and its value uses non interior mutable variants (see\n+    /// [#3962](https://github.com/rust-lang/rust-clippy/issues/3962) and\n+    /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825) for examples);\n+    /// it complains about associated constants without default values only based on its types;\n+    /// which might not be preferable.\n+    /// There're other enums plus associated constants cases that the lint cannot handle.\n     ///\n     /// Types that have underlying or potential interior mutability trigger the lint whether\n     /// the interior mutable field is used or not. See issues\n     /// [#5812](https://github.com/rust-lang/rust-clippy/issues/5812) and\n-    /// [#3825](https://github.com/rust-lang/rust-clippy/issues/3825)\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -105,6 +112,79 @@ declare_clippy_lint! {\n     \"referencing `const` with interior mutability\"\n }\n \n+fn is_unfrozen<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    // Ignore types whose layout is unknown since `is_freeze` reports every generic types as `!Freeze`,\n+    // making it indistinguishable from `UnsafeCell`. i.e. it isn't a tool to prove a type is\n+    // 'unfrozen'. However, this code causes a false negative in which\n+    // a type contains a layout-unknown type, but also a unsafe cell like `const CELL: Cell<T>`.\n+    // Yet, it's better than `ty.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_PROJECTION)`\n+    // since it works when a pointer indirection involves (`Cell<*const T>`).\n+    // Making up a `ParamEnv` where every generic params and assoc types are `Freeze`is another option;\n+    // but I'm not sure whether it's a decent way, if possible.\n+    cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)\n+}\n+\n+fn is_value_unfrozen_raw<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    result: Result<ConstValue<'tcx>, ErrorHandled>,\n+    ty: Ty<'tcx>,\n+) -> bool {\n+    fn inner<'tcx>(cx: &LateContext<'tcx>, val: &'tcx Const<'tcx>) -> bool {\n+        match val.ty.kind() {\n+            // the fact that we have to dig into every structs to search enums\n+            // leads us to the point checking `UnsafeCell` directly is the only option.\n+            ty::Adt(ty_def, ..) if Some(ty_def.did) == cx.tcx.lang_items().unsafe_cell_type() => true,\n+            ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n+                let val = cx.tcx.destructure_const(cx.param_env.and(val));\n+                val.fields.iter().any(|field| inner(cx, field))\n+            },\n+            _ => false,\n+        }\n+    }\n+\n+    result.map_or_else(\n+        |err| {\n+            // Consider `TooGeneric` cases as being unfrozen.\n+            // This causes a false positive where an assoc const whose type is unfrozen\n+            // have a value that is a frozen variant with a generic param (an example is\n+            // `declare_interior_mutable_const::enums::BothOfCellAndGeneric::GENERIC_VARIANT`).\n+            // However, it prevents a number of false negatives that is, I think, important:\n+            // 1. assoc consts in trait defs referring to consts of themselves\n+            //    (an example is `declare_interior_mutable_const::traits::ConcreteTypes::ANOTHER_ATOMIC`).\n+            // 2. a path expr referring to assoc consts whose type is doesn't have\n+            //    any frozen variants in trait defs (i.e. without substitute for `Self`).\n+            //    (e.g. borrowing `borrow_interior_mutable_const::trait::ConcreteTypes::ATOMIC`)\n+            // 3. similar to the false positive above;\n+            //    but the value is an unfrozen variant, or the type has no enums. (An example is\n+            //    `declare_interior_mutable_const::enums::BothOfCellAndGeneric::UNFROZEN_VARIANT`\n+            //    and `declare_interior_mutable_const::enums::BothOfCellAndGeneric::NO_ENUM`).\n+            // One might be able to prevent these FNs correctly, and replace this with `false`;\n+            // e.g. implementing `has_frozen_variant` described above, and not running this function\n+            // when the type doesn't have any frozen variants would be the 'correct' way for the 2nd\n+            // case (that actually removes another suboptimal behavior (I won't say 'false positive') where,\n+            // similar to 2., but with the a frozen variant) (e.g. borrowing\n+            // `borrow_interior_mutable_const::enums::AssocConsts::TO_BE_FROZEN_VARIANT`).\n+            // I chose this way because unfrozen enums as assoc consts are rare (or, hopefully, none).\n+            err == ErrorHandled::TooGeneric\n+        },\n+        |val| inner(cx, Const::from_value(cx.tcx, val, ty)),\n+    )\n+}\n+\n+fn is_value_unfrozen_poly<'tcx>(cx: &LateContext<'tcx>, body_id: BodyId, ty: Ty<'tcx>) -> bool {\n+    let result = cx.tcx.const_eval_poly(body_id.hir_id.owner.to_def_id());\n+    is_value_unfrozen_raw(cx, result, ty)\n+}\n+\n+fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: DefId, ty: Ty<'tcx>) -> bool {\n+    let substs = cx.typeck_results().node_substs(hir_id);\n+\n+    let result = cx\n+        .tcx\n+        .const_eval_resolve(cx.param_env, ty::WithOptConstParam::unknown(def_id), substs, None, None);\n+    is_value_unfrozen_raw(cx, result, ty)\n+}\n+\n #[derive(Copy, Clone)]\n enum Source {\n     Item { item: Span },\n@@ -130,19 +210,7 @@ impl Source {\n     }\n }\n \n-fn verify_ty_bound<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, source: Source) {\n-    // Ignore types whose layout is unknown since `is_freeze` reports every generic types as `!Freeze`,\n-    // making it indistinguishable from `UnsafeCell`. i.e. it isn't a tool to prove a type is\n-    // 'unfrozen'. However, this code causes a false negative in which\n-    // a type contains a layout-unknown type, but also a unsafe cell like `const CELL: Cell<T>`.\n-    // Yet, it's better than `ty.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_PROJECTION)`\n-    // since it works when a pointer indirection involves (`Cell<*const T>`).\n-    // Making up a `ParamEnv` where every generic params and assoc types are `Freeze`is another option;\n-    // but I'm not sure whether it's a decent way, if possible.\n-    if cx.tcx.layout_of(cx.param_env.and(ty)).is_err() || ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env) {\n-        return;\n-    }\n-\n+fn lint(cx: &LateContext<'_>, source: Source) {\n     let (lint, msg, span) = source.lint();\n     span_lint_and_then(cx, lint, span, msg, |diag| {\n         if span.from_expansion() {\n@@ -165,24 +233,44 @@ declare_lint_pass!(NonCopyConst => [DECLARE_INTERIOR_MUTABLE_CONST, BORROW_INTER\n \n impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx Item<'_>) {\n-        if let ItemKind::Const(hir_ty, ..) = &it.kind {\n+        if let ItemKind::Const(hir_ty, body_id) = it.kind {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n-            verify_ty_bound(cx, ty, Source::Item { item: it.span });\n+\n+            if is_unfrozen(cx, ty) && is_value_unfrozen_poly(cx, body_id, ty) {\n+                lint(cx, Source::Item { item: it.span });\n+            }\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx TraitItem<'_>) {\n-        if let TraitItemKind::Const(hir_ty, ..) = &trait_item.kind {\n+        if let TraitItemKind::Const(hir_ty, body_id_opt) = &trait_item.kind {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+\n             // Normalize assoc types because ones originated from generic params\n             // bounded other traits could have their bound.\n             let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);\n-            verify_ty_bound(cx, normalized, Source::Assoc { item: trait_item.span });\n+            if is_unfrozen(cx, normalized)\n+                // When there's no default value, lint it only according to its type;\n+                // in other words, lint consts whose value *could* be unfrozen, not definitely is.\n+                // This feels inconsistent with how the lint treats generic types,\n+                // which avoids linting types which potentially become unfrozen.\n+                // One could check whether a unfrozen type have a *frozen variant*\n+                // (like `body_id_opt.map_or_else(|| !has_frozen_variant(...), ...)`),\n+                // and do the same as the case of generic types at impl items.\n+                // Note that it isn't sufficient to check if it has an enum\n+                // since all of that enum's variants can be unfrozen:\n+                // i.e. having an enum doesn't necessary mean a type has a frozen variant.\n+                // And, implementing it isn't a trivial task; it'll probably end up\n+                // re-implementing the trait predicate evaluation specific to `Freeze`.\n+                && body_id_opt.map_or(true, |body_id| is_value_unfrozen_poly(cx, body_id, normalized))\n+            {\n+                lint(cx, Source::Assoc { item: trait_item.span });\n+            }\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n-        if let ImplItemKind::Const(hir_ty, ..) = &impl_item.kind {\n+        if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n             let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n@@ -209,24 +297,34 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                                 ),\n                             ))\n                             .is_err();\n+                            // If there were a function like `has_frozen_variant` described above,\n+                            // we should use here as a frozen variant is a potential to be frozen\n+                            // similar to unknown layouts.\n+                            // e.g. `layout_of(...).is_err() || has_frozen_variant(...);`\n                         then {\n                             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                             let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);\n-                            verify_ty_bound(\n-                                cx,\n-                                normalized,\n-                                Source::Assoc {\n-                                    item: impl_item.span,\n-                                },\n-                            );\n+                            if is_unfrozen(cx, normalized)\n+                                && is_value_unfrozen_poly(cx, *body_id, normalized)\n+                            {\n+                                lint(\n+                                   cx,\n+                                   Source::Assoc {\n+                                       item: impl_item.span,\n+                                    },\n+                                );\n+                            }\n                         }\n                     }\n                 },\n                 ItemKind::Impl { of_trait: None, .. } => {\n                     let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                     // Normalize assoc types originated from generic params.\n                     let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);\n-                    verify_ty_bound(cx, normalized, Source::Assoc { item: impl_item.span });\n+\n+                    if is_unfrozen(cx, ty) && is_value_unfrozen_poly(cx, *body_id, normalized) {\n+                        lint(cx, Source::Assoc { item: impl_item.span });\n+                    }\n                 },\n                 _ => (),\n             }\n@@ -241,8 +339,8 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             }\n \n             // Make sure it is a const item.\n-            match qpath_res(cx, qpath, expr.hir_id) {\n-                Res::Def(DefKind::Const | DefKind::AssocConst, _) => {},\n+            let item_def_id = match qpath_res(cx, qpath, expr.hir_id) {\n+                Res::Def(DefKind::Const | DefKind::AssocConst, did) => did,\n                 _ => return,\n             };\n \n@@ -319,7 +417,9 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                 cx.typeck_results().expr_ty(dereferenced_expr)\n             };\n \n-            verify_ty_bound(cx, ty, Source::Expr { expr: expr.span });\n+            if is_unfrozen(cx, ty) && is_value_unfrozen_expr(cx, expr.hir_id, item_def_id, ty) {\n+                lint(cx, Source::Expr { expr: expr.span });\n+            }\n         }\n     }\n }"}, {"sha": "5b42b61fcde90ee21f2d84204de9436f6e1aa0d9", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,7 +1,5 @@\n use crate::utils::{span_lint, span_lint_and_then};\n-use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n-};\n+use rustc_ast::ast::{Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind};\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;"}, {"sha": "31b03ecd101c09daaab92d96f992521fc3cb5166", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -73,7 +73,7 @@ declare_lint_pass!(PanicUnimplemented => [UNIMPLEMENTED, UNREACHABLE, TODO, PANI\n \n impl<'tcx> LateLintPass<'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some(_) = match_panic_call(cx, expr) {\n+        if match_panic_call(cx, expr).is_some() {\n             let span = get_outer_span(expr);\n             if is_expn_of(expr.span, \"unimplemented\").is_some() {\n                 span_lint("}, {"sha": "4b514bbd42ca7d0df4c0b5ebb5853974dec1f31a", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -222,13 +222,14 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n             let name = snippet_with_applicability(cx, name_span, \"_\", &mut applicability);\n             let lo = snippet_with_applicability(cx, l_span, \"_\", &mut applicability);\n             let hi = snippet_with_applicability(cx, u_span, \"_\", &mut applicability);\n+            let space = if lo.ends_with('.') { \" \" } else { \"\" };\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_RANGE_CONTAINS,\n                 span,\n                 &format!(\"manual `{}::contains` implementation\", range_type),\n                 \"use\",\n-                format!(\"({}{}{}).contains(&{})\", lo, range_op, hi, name),\n+                format!(\"({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n                 applicability,\n             );\n         } else if !combine_and && ord == Some(lord) {\n@@ -251,13 +252,14 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n             let name = snippet_with_applicability(cx, name_span, \"_\", &mut applicability);\n             let lo = snippet_with_applicability(cx, l_span, \"_\", &mut applicability);\n             let hi = snippet_with_applicability(cx, u_span, \"_\", &mut applicability);\n+            let space = if lo.ends_with('.') { \" \" } else { \"\" };\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_RANGE_CONTAINS,\n                 span,\n                 &format!(\"manual `!{}::contains` implementation\", range_type),\n                 \"use\",\n-                format!(\"!({}{}{}).contains(&{})\", lo, range_op, hi, name),\n+                format!(\"!({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n                 applicability,\n             );\n         }"}, {"sha": "f0e507105a6a0ef241ece96d66782c039b35cbd7", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -320,11 +320,11 @@ fn find_stmt_assigns_to<'tcx>(\n \n     match (by_ref, &*rvalue) {\n         (true, mir::Rvalue::Ref(_, _, place)) | (false, mir::Rvalue::Use(mir::Operand::Copy(place))) => {\n-            base_local_and_movability(cx, mir, *place)\n+            Some(base_local_and_movability(cx, mir, *place))\n         },\n         (false, mir::Rvalue::Ref(_, _, place)) => {\n             if let [mir::ProjectionElem::Deref] = place.as_ref().projection {\n-                base_local_and_movability(cx, mir, *place)\n+                Some(base_local_and_movability(cx, mir, *place))\n             } else {\n                 None\n             }\n@@ -341,7 +341,7 @@ fn base_local_and_movability<'tcx>(\n     cx: &LateContext<'tcx>,\n     mir: &mir::Body<'tcx>,\n     place: mir::Place<'tcx>,\n-) -> Option<(mir::Local, CannotMoveOut)> {\n+) -> (mir::Local, CannotMoveOut) {\n     use rustc_middle::mir::PlaceRef;\n \n     // Dereference. You cannot move things out from a borrowed value.\n@@ -362,7 +362,7 @@ fn base_local_and_movability<'tcx>(\n             && !is_copy(cx, mir::Place::ty_from(local, projection, &mir.local_decls, cx.tcx).ty);\n     }\n \n-    Some((local, deref || field || slice))\n+    (local, deref || field || slice)\n }\n \n struct LocalUseVisitor {"}, {"sha": "efe3237990d436a0f14c78cbac299d16fff5b240", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,9 +1,10 @@\n-use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, UnOp};\n+use rustc_ast::ast::{Expr, ExprKind, Mutability, UnOp};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::BytePos;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n@@ -42,19 +43,55 @@ impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n-            if let ExprKind::AddrOf(_, _, ref addrof_target) = without_parens(deref_target).kind;\n+            if let ExprKind::AddrOf(_, ref mutability, ref addrof_target) = without_parens(deref_target).kind;\n             if !in_macro(addrof_target.span);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n-                span_lint_and_sugg(\n-                    cx,\n-                    DEREF_ADDROF,\n-                    e.span,\n-                    \"immediately dereferencing a reference\",\n-                    \"try this\",\n-                    format!(\"{}\", snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability)),\n-                    applicability,\n-                );\n+                let sugg = if e.span.from_expansion() {\n+                    if let Ok(macro_source) = cx.sess.source_map().span_to_snippet(e.span) {\n+                        // Remove leading whitespace from the given span\n+                        // e.g: ` $visitor` turns into `$visitor`\n+                        let trim_leading_whitespaces = |span| {\n+                            snippet_opt(cx, span).and_then(|snip| {\n+                                #[allow(clippy::cast_possible_truncation)]\n+                                snip.find(|c: char| !c.is_whitespace()).map(|pos| {\n+                                    span.lo() + BytePos(pos as u32)\n+                                })\n+                            }).map_or(span, |start_no_whitespace| e.span.with_lo(start_no_whitespace))\n+                        };\n+\n+                        let mut generate_snippet = |pattern: &str| {\n+                            #[allow(clippy::cast_possible_truncation)]\n+                            macro_source.rfind(pattern).map(|pattern_pos| {\n+                                let rpos = pattern_pos + pattern.len();\n+                                let span_after_ref = e.span.with_lo(BytePos(e.span.lo().0 + rpos as u32));\n+                                let span = trim_leading_whitespaces(span_after_ref);\n+                                snippet_with_applicability(cx, span, \"_\", &mut applicability)\n+                            })\n+                        };\n+\n+                        if *mutability == Mutability::Mut {\n+                            generate_snippet(\"mut\")\n+                        } else {\n+                            generate_snippet(\"&\")\n+                        }\n+                    } else {\n+                        Some(snippet_with_applicability(cx, e.span, \"_\", &mut applicability))\n+                    }\n+                } else {\n+                    Some(snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability))\n+                };\n+                if let Some(sugg) = sugg {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        DEREF_ADDROF,\n+                        e.span,\n+                        \"immediately dereferencing a reference\",\n+                        \"try this\",\n+                        sugg.to_string(),\n+                        applicability,\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "d06ab14348237630582a8e2b4fe663ab6725d972", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -11,7 +11,7 @@ use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n-    /// (with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct\n+    /// (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`) for correct\n     /// regex syntax.\n     ///\n     /// **Why is this bad?** This will lead to a runtime panic.\n@@ -29,7 +29,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for trivial [regex](https://crates.io/crates/regex)\n-    /// creation (with `Regex::new`, `RegexBuilder::new` or `RegexSet::new`).\n+    /// creation (with `Regex::new`, `RegexBuilder::new`, or `RegexSet::new`).\n     ///\n     /// **Why is this bad?** Matching the regex can likely be replaced by `==` or\n     /// `str::starts_with`, `str::ends_with` or `std::contains` or other `str`"}, {"sha": "ede37624f71a4f1e7364cf4ae70af461c74dacf3", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -9,7 +9,10 @@ use rustc_span::sym;\n use if_chain::if_chain;\n \n use crate::utils::SpanlessEq;\n-use crate::utils::{get_parent_expr, is_allowed, is_type_diagnostic_item, span_lint, span_lint_and_sugg};\n+use crate::utils::{\n+    get_parent_expr, is_allowed, is_type_diagnostic_item, match_function_call, method_calls, paths, span_lint,\n+    span_lint_and_sugg,\n+};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for string appends of the form `x = x + y` (without\n@@ -174,16 +177,75 @@ fn is_add(cx: &LateContext<'_>, src: &Expr<'_>, target: &Expr<'_>) -> bool {\n     }\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Check if the string is transformed to byte array and casted back to string.\n+    ///\n+    /// **Why is this bad?** It's unnecessary, the string can be used directly.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n+    /// ```\n+    /// could be written as\n+    /// ```rust\n+    /// let _ = &\"Hello World!\"[6..11];\n+    /// ```\n+    pub STRING_FROM_UTF8_AS_BYTES,\n+    complexity,\n+    \"casting string slices to byte slices and back\"\n+}\n+\n // Max length a b\"foo\" string can take\n const MAX_LENGTH_BYTE_STRING_LIT: usize = 32;\n \n-declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n+declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES, STRING_FROM_UTF8_AS_BYTES]);\n \n impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use crate::utils::{snippet, snippet_with_applicability};\n         use rustc_ast::LitKind;\n \n+        if_chain! {\n+            // Find std::str::converts::from_utf8\n+            if let Some(args) = match_function_call(cx, e, &paths::STR_FROM_UTF8);\n+\n+            // Find string::as_bytes\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref args) = args[0].kind;\n+            if let ExprKind::Index(ref left, ref right) = args.kind;\n+            let (method_names, expressions, _) = method_calls(left, 1);\n+            if method_names.len() == 1;\n+            if expressions.len() == 1;\n+            if expressions[0].len() == 1;\n+            if method_names[0] == sym!(as_bytes);\n+\n+            // Check for slicer\n+            if let ExprKind::Struct(ref path, _, _) = right.kind;\n+            if let QPath::LangItem(LangItem::Range, _) = path;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let string_expression = &expressions[0][0];\n+\n+                let snippet_app = snippet_with_applicability(\n+                    cx,\n+                    string_expression.span, \"..\",\n+                    &mut applicability,\n+                );\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    STRING_FROM_UTF8_AS_BYTES,\n+                    e.span,\n+                    \"calling a slice of `as_bytes()` with `from_utf8` should be not necessary\",\n+                    \"try\",\n+                    format!(\"Some(&{}[{}])\", snippet_app, snippet(cx, right.span, \"..\")),\n+                    applicability\n+                )\n+            }\n+        }\n+\n         if_chain! {\n             if let ExprKind::MethodCall(path, _, args, _) = &e.kind;\n             if path.ident.name == sym!(as_bytes);"}, {"sha": "73e3a04aec98798f93600e88ae791e3d7e6cc47c", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n-    span_lint_and_sugg,\n+    differing_macro_contexts, in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet,\n+    snippet_with_macro_callsite, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -92,8 +92,11 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n                 };\n \n                 let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n+                let differing_contexts = differing_macro_contexts(expr.span, err_arg.span);\n \n-                let origin_snippet = if err_arg.span.from_expansion() {\n+                let origin_snippet = if in_macro(expr.span) && in_macro(err_arg.span) && differing_contexts {\n+                    snippet(cx, err_arg.span.ctxt().outer_expn_data().call_site, \"_\")\n+                } else if err_arg.span.from_expansion() && !in_macro(expr.span) {\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n                     snippet(cx, err_arg.span, \"_\")"}, {"sha": "840adbbc57a6ccd4f4d2f0e27dfe5add7d43d589", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -8,6 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -553,7 +554,7 @@ impl Types {\n                                     hir_ty.span,\n                                     \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n                                     \"try\",\n-                                    format!(\"Vec<{}>\", ty_ty),\n+                                    format!(\"Vec<{}>\", snippet(cx, boxed_ty.span, \"..\")),\n                                     Applicability::MachineApplicable,\n                                 );\n                                 return; // don't recurse into the type\n@@ -1632,7 +1633,14 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Cast(ref ex, _) = expr.kind {\n+        if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n+                if let Res::Def(_, def_id) = path.res {\n+                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n+                        return;\n+                    }\n+                }\n+            }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let Some(lit) = get_numeric_literal(ex) {"}, {"sha": "2501635e7ef6636933448be0ff2ac50c959a88bc", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -24,7 +24,7 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// let mut twins = vec!((1,1), (2,2));\n+    /// let mut twins = vec!((1, 1), (2, 2));\n     /// twins.sort_by_key(|x| { x.1; });\n     /// ```\n     pub UNIT_RETURN_EXPECTING_ORD,"}, {"sha": "25ecc7a82f18bfac868785558093879f5de0c2b6", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,143 @@\n+use crate::utils::{\n+    in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n+    visitors::find_all_ret_expressions,\n+};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit::FnKind;\n+use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for private functions that only return `Ok` or `Some`.\n+    ///\n+    /// **Why is this bad?** It is not meaningful to wrap values when no `None` or `Err` is returned.\n+    ///\n+    /// **Known problems:** Since this lint changes function type signature, you may need to\n+    /// adjust some code at callee side.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn get_cool_number(a: bool, b: bool) -> Option<i32> {\n+    ///     if a && b {\n+    ///         return Some(50);\n+    ///     }\n+    ///     if a {\n+    ///         Some(0)\n+    ///     } else {\n+    ///         Some(10)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn get_cool_number(a: bool, b: bool) -> i32 {\n+    ///     if a && b {\n+    ///         return 50;\n+    ///     }\n+    ///     if a {\n+    ///         0\n+    ///     } else {\n+    ///         10\n+    ///     }\n+    /// }\n+    /// ```\n+    pub UNNECESSARY_WRAPS,\n+    complexity,\n+    \"functions that only return `Ok` or `Some`\"\n+}\n+\n+declare_lint_pass!(UnnecessaryWraps => [UNNECESSARY_WRAPS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        fn_decl: &FnDecl<'tcx>,\n+        body: &Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        match fn_kind {\n+            FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n+                if visibility.node.is_pub() {\n+                    return;\n+                }\n+            },\n+            FnKind::Closure(..) => return,\n+            _ => (),\n+        }\n+\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), ..} | ItemKind::Trait(..)) {\n+                return;\n+            }\n+        }\n+\n+        let (return_type, path) = if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(option_type)) {\n+            (\"Option\", &paths::OPTION_SOME)\n+        } else if is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym!(result_type)) {\n+            (\"Result\", &paths::RESULT_OK)\n+        } else {\n+            return;\n+        };\n+\n+        let mut suggs = Vec::new();\n+        let can_sugg = find_all_ret_expressions(cx, &body.value, |ret_expr| {\n+            if_chain! {\n+                if !in_macro(ret_expr.span);\n+                if let ExprKind::Call(ref func, ref args) = ret_expr.kind;\n+                if let ExprKind::Path(ref qpath) = func.kind;\n+                if match_qpath(qpath, path);\n+                if args.len() == 1;\n+                then {\n+                    suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+        });\n+\n+        if can_sugg && !suggs.is_empty() {\n+            span_lint_and_then(\n+                cx,\n+                UNNECESSARY_WRAPS,\n+                span,\n+                format!(\n+                    \"this function's return value is unnecessarily wrapped by `{}`\",\n+                    return_type\n+                )\n+                .as_str(),\n+                |diag| {\n+                    let inner_ty = return_ty(cx, hir_id)\n+                        .walk()\n+                        .skip(1) // skip `std::option::Option` or `std::result::Result`\n+                        .take(1) // take the first outermost inner type\n+                        .filter_map(|inner| match inner.unpack() {\n+                            GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n+                            _ => None,\n+                        });\n+                    inner_ty.for_each(|inner_ty| {\n+                        diag.span_suggestion(\n+                            fn_decl.output.span(),\n+                            format!(\"remove `{}` from the return type...\", return_type).as_str(),\n+                            inner_ty,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    });\n+                    diag.multipart_suggestion(\n+                        \"...and change the returning expressions\",\n+                        suggs,\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+            );\n+        }\n+    }\n+}"}, {"sha": "f61fd2ecd735d915964c5b3ce80bfaa6da56e29e", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::span_lint_and_sugg;\n+use crate::utils::{position_before_rarrow, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n@@ -120,26 +120,13 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n     let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        fn_source\n-            .rfind(\"->\")\n-            .map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n-                let mut rpos = rpos;\n-                let chars: Vec<char> = fn_source.chars().collect();\n-                while rpos > 1 {\n-                    if let Some(c) = chars.get(rpos - 1) {\n-                        if c.is_whitespace() {\n-                            rpos -= 1;\n-                            continue;\n-                        }\n-                    }\n-                    break;\n-                }\n-                (\n-                    #[allow(clippy::cast_possible_truncation)]\n-                    ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                    Applicability::MachineApplicable,\n-                )\n-            })\n+        position_before_rarrow(fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+            (\n+                #[allow(clippy::cast_possible_truncation)]\n+                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                Applicability::MachineApplicable,\n+            )\n+        })\n     } else {\n         (ty.span, Applicability::MaybeIncorrect)\n     };"}, {"sha": "efa9c3fab4ab83c20c95d607a1df7ab7d5e71862", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -12,8 +12,8 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`,`IntoIter` calls\n-    /// that useless converts to the same type as caller.\n+    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` calls\n+    /// which uselessly convert to the same type.\n     ///\n     /// **Why is this bad?** Redundant code.\n     ///\n@@ -31,7 +31,7 @@ declare_clippy_lint! {\n     /// ```\n     pub USELESS_CONVERSION,\n     complexity,\n-    \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\"\n+    \"calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type\"\n }\n \n #[derive(Default)]"}, {"sha": "fcf7a4b1367e3c4086bf6edeabe3faa519e3f948", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -110,8 +110,7 @@ pub fn eq_expr_opt(l: &Option<P<Expr>>, r: &Option<P<Expr>>) -> bool {\n pub fn eq_struct_rest(l: &StructRest, r: &StructRest) -> bool {\n     match (l, r) {\n         (StructRest::Base(lb), StructRest::Base(rb)) => eq_expr(lb, rb),\n-        (StructRest::Rest(_), StructRest::Rest(_)) => true,\n-        (StructRest::None, StructRest::None) => true,\n+        (StructRest::Rest(_), StructRest::Rest(_)) | (StructRest::None, StructRest::None) => true,\n         _ => false,\n     }\n }"}, {"sha": "8fe5ddee1ca8d8cf11d4ad300904cae10cc82ddf", "filename": "clippy_lints/src/utils/eager_or_lazy.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -9,7 +9,7 @@\n //!  - or-fun-call\n //!  - option-if-let-else\n \n-use crate::utils::is_ctor_or_promotable_const_function;\n+use crate::utils::{is_ctor_or_promotable_const_function, is_type_diagnostic_item, match_type, paths};\n use rustc_hir::def::{DefKind, Res};\n \n use rustc_hir::intravisit;\n@@ -96,6 +96,11 @@ fn identify_some_potentially_expensive_patterns<'tcx>(cx: &LateContext<'tcx>, ex\n             let call_found = match &expr.kind {\n                 // ignore enum and struct constructors\n                 ExprKind::Call(..) => !is_ctor_or_promotable_const_function(self.cx, expr),\n+                ExprKind::Index(obj, _) => {\n+                    let ty = self.cx.typeck_results().expr_ty(obj);\n+                    is_type_diagnostic_item(self.cx, ty, sym!(hashmap_type))\n+                        || match_type(self.cx, ty, &paths::BTREEMAP)\n+                },\n                 ExprKind::MethodCall(..) => true,\n                 _ => false,\n             };"}, {"sha": "5bd64dcb541f4e3d9f4ab8b5c2c0db8f60b7dcba", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -21,6 +21,7 @@ pub mod ptr;\n pub mod qualify_min_const_fn;\n pub mod sugg;\n pub mod usage;\n+pub mod visitors;\n \n pub use self::attrs::*;\n pub use self::diagnostics::*;\n@@ -468,6 +469,13 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n         .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id.to_def_id())\n }\n \n+/// Returns `true` if the expression is in the program's `#[panic_handler]`.\n+pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n+    let def_id = cx.tcx.hir().local_def_id(parent).to_def_id();\n+    Some(def_id) == cx.tcx.lang_items().panic_impl()\n+}\n+\n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n@@ -659,6 +667,35 @@ pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n     snippet_opt(cx, line_span(cx, span)).and_then(|snip| snip.find(|c: char| !c.is_whitespace()))\n }\n \n+/// Returns the positon just before rarrow\n+///\n+/// ```rust,ignore\n+/// fn into(self) -> () {}\n+///              ^\n+/// // in case of unformatted code\n+/// fn into2(self)-> () {}\n+///               ^\n+/// fn into3(self)   -> () {}\n+///               ^\n+/// ```\n+#[allow(clippy::needless_pass_by_value)]\n+pub fn position_before_rarrow(s: String) -> Option<usize> {\n+    s.rfind(\"->\").map(|rpos| {\n+        let mut rpos = rpos;\n+        let chars: Vec<char> = s.chars().collect();\n+        while rpos > 1 {\n+            if let Some(c) = chars.get(rpos - 1) {\n+                if c.is_whitespace() {\n+                    rpos -= 1;\n+                    continue;\n+                }\n+            }\n+            break;\n+        }\n+        rpos\n+    })\n+}\n+\n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n ///\n /// ```rust,ignore"}, {"sha": "137f5d18b6649d0ae26d8694b863e9e907e72b6d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -126,6 +126,7 @@ pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n+pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];"}, {"sha": "b0837b6c43e76dc3f9bbdaf80ad15bc7bf0039c6", "filename": "clippy_lints/src/utils/visitors.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,125 @@\n+use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n+\n+/// returns `true` if expr contains match expr desugared from try\n+fn contains_try(expr: &hir::Expr<'_>) -> bool {\n+    struct TryFinder {\n+        found: bool,\n+    }\n+\n+    impl<'hir> intravisit::Visitor<'hir> for TryFinder {\n+        type Map = Map<'hir>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+\n+        fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n+            if self.found {\n+                return;\n+            }\n+            match expr.kind {\n+                hir::ExprKind::Match(_, _, hir::MatchSource::TryDesugar) => self.found = true,\n+                _ => intravisit::walk_expr(self, expr),\n+            }\n+        }\n+    }\n+\n+    let mut visitor = TryFinder { found: false };\n+    visitor.visit_expr(expr);\n+    visitor.found\n+}\n+\n+pub fn find_all_ret_expressions<'hir, F>(_cx: &LateContext<'_>, expr: &'hir hir::Expr<'hir>, callback: F) -> bool\n+where\n+    F: FnMut(&'hir hir::Expr<'hir>) -> bool,\n+{\n+    struct RetFinder<F> {\n+        in_stmt: bool,\n+        failed: bool,\n+        cb: F,\n+    }\n+\n+    struct WithStmtGuarg<'a, F> {\n+        val: &'a mut RetFinder<F>,\n+        prev_in_stmt: bool,\n+    }\n+\n+    impl<F> RetFinder<F> {\n+        fn inside_stmt(&mut self, in_stmt: bool) -> WithStmtGuarg<'_, F> {\n+            let prev_in_stmt = std::mem::replace(&mut self.in_stmt, in_stmt);\n+            WithStmtGuarg {\n+                val: self,\n+                prev_in_stmt,\n+            }\n+        }\n+    }\n+\n+    impl<F> std::ops::Deref for WithStmtGuarg<'_, F> {\n+        type Target = RetFinder<F>;\n+\n+        fn deref(&self) -> &Self::Target {\n+            self.val\n+        }\n+    }\n+\n+    impl<F> std::ops::DerefMut for WithStmtGuarg<'_, F> {\n+        fn deref_mut(&mut self) -> &mut Self::Target {\n+            self.val\n+        }\n+    }\n+\n+    impl<F> Drop for WithStmtGuarg<'_, F> {\n+        fn drop(&mut self) {\n+            self.val.in_stmt = self.prev_in_stmt;\n+        }\n+    }\n+\n+    impl<'hir, F: FnMut(&'hir hir::Expr<'hir>) -> bool> intravisit::Visitor<'hir> for RetFinder<F> {\n+        type Map = Map<'hir>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+\n+        fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n+            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n+        }\n+\n+        fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {\n+            if self.failed {\n+                return;\n+            }\n+            if self.in_stmt {\n+                match expr.kind {\n+                    hir::ExprKind::Ret(Some(expr)) => self.inside_stmt(false).visit_expr(expr),\n+                    _ => intravisit::walk_expr(self, expr),\n+                }\n+            } else {\n+                match expr.kind {\n+                    hir::ExprKind::Match(cond, arms, _) => {\n+                        self.inside_stmt(true).visit_expr(cond);\n+                        for arm in arms {\n+                            self.visit_expr(arm.body);\n+                        }\n+                    },\n+                    hir::ExprKind::Block(..) => intravisit::walk_expr(self, expr),\n+                    hir::ExprKind::Ret(Some(expr)) => self.visit_expr(expr),\n+                    _ => self.failed |= !(self.cb)(expr),\n+                }\n+            }\n+        }\n+    }\n+\n+    !contains_try(expr) && {\n+        let mut ret_finder = RetFinder {\n+            in_stmt: false,\n+            failed: false,\n+            cb: callback,\n+        };\n+        ret_finder.visit_expr(expr);\n+        !ret_finder.failed\n+    }\n+}"}, {"sha": "115848c48044ce19000414b2923ba5f1fc5f3e4e", "filename": "doc/changelog_update.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/doc%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/doc%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fchangelog_update.md?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -29,8 +29,11 @@ bullet points might be helpful:\n * When writing the release notes for the **upcoming beta release**, you need to check\n   out the Clippy commit of the current Rust `master`. [Link][rust_master_tools]\n * When writing the (forgotten) release notes for a **past stable release**, you\n-  need to select the Rust release tag from the dropdown and then check the\n-  commit of the Clippy directory:\n+  need to check out the Rust release tag of the stable release.\n+  [Link][rust_stable_tools]\n+\n+Usually you want to wirte the changelog of the **upcoming stable release**. Make\n+sure though, that `beta` was already branched in the Rust repository.\n \n To find the commit hash, issue the following command when in a `rust-lang/rust` checkout:\n ```\n@@ -71,10 +74,24 @@ The order should roughly be:\n 7. Documentation improvements\n 8. Others\n \n+As section headers, we use:\n+\n+```\n+### New Lints\n+### Moves and Deprecations\n+### Enhancements\n+### False Positive Fixes\n+### Suggestion Fixes/Improvements\n+### ICE Fixes\n+### Documentation Improvements\n+### Others\n+```\n+\n Please also be sure to update the Beta/Unreleased sections at the top with the\n relevant commit ranges.\n \n [changelog]: https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md\n [forge]: https://forge.rust-lang.org/\n [rust_master_tools]: https://github.com/rust-lang/rust/tree/master/src/tools/clippy\n [rust_beta_tools]: https://github.com/rust-lang/rust/tree/beta/src/tools/clippy\n+[rust_stable_tools]: https://github.com/rust-lang/rust/releases"}, {"sha": "1d906d20ad475eec2b7039d7b6703f4444c7dcb6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -62,14 +62,14 @@ vec![\n     },\n     Lint {\n         name: \"await_holding_lock\",\n-        group: \"correctness\",\n+        group: \"pedantic\",\n         desc: \"Inside an async function, holding a MutexGuard while calling await\",\n         deprecation: None,\n         module: \"await_holding_invalid\",\n     },\n     Lint {\n         name: \"await_holding_refcell_ref\",\n-        group: \"correctness\",\n+        group: \"pedantic\",\n         desc: \"Inside an async function, holding a RefCell ref while calling await\",\n         deprecation: None,\n         module: \"await_holding_invalid\",\n@@ -1117,6 +1117,13 @@ vec![\n         deprecation: None,\n         module: \"returns\",\n     },\n+    Lint {\n+        name: \"let_underscore_drop\",\n+        group: \"pedantic\",\n+        desc: \"non-binding let on a type that implements `Drop`\",\n+        deprecation: None,\n+        module: \"let_underscore\",\n+    },\n     Lint {\n         name: \"let_underscore_lock\",\n         group: \"correctness\",\n@@ -1831,13 +1838,6 @@ vec![\n         deprecation: None,\n         module: \"panic_in_result_fn\",\n     },\n-    Lint {\n-        name: \"panic_params\",\n-        group: \"style\",\n-        desc: \"missing parameters in `panic!` calls\",\n-        deprecation: None,\n-        module: \"panic_unimplemented\",\n-    },\n     Lint {\n         name: \"panicking_unwrap\",\n         group: \"correctness\",\n@@ -2114,7 +2114,7 @@ vec![\n     Lint {\n         name: \"search_is_some\",\n         group: \"complexity\",\n-        desc: \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\",\n+        desc: \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\",\n         deprecation: None,\n         module: \"methods\",\n     },\n@@ -2258,6 +2258,13 @@ vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"string_from_utf8_as_bytes\",\n+        group: \"complexity\",\n+        desc: \"casting string slices to byte slices and back\",\n+        deprecation: None,\n+        module: \"strings\",\n+    },\n     Lint {\n         name: \"string_lit_as_bytes\",\n         group: \"nursery\",\n@@ -2594,6 +2601,13 @@ vec![\n         deprecation: None,\n         module: \"unwrap\",\n     },\n+    Lint {\n+        name: \"unnecessary_wraps\",\n+        group: \"complexity\",\n+        desc: \"functions that only return `Ok` or `Some`\",\n+        deprecation: None,\n+        module: \"unnecessary_wraps\",\n+    },\n     Lint {\n         name: \"unneeded_field_pattern\",\n         group: \"restriction\",\n@@ -2737,7 +2751,7 @@ vec![\n     Lint {\n         name: \"useless_conversion\",\n         group: \"complexity\",\n-        desc: \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\",\n+        desc: \"calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type\",\n         deprecation: None,\n         module: \"useless_conversion\",\n     },"}, {"sha": "cd745feec6d8acc81063dae1d74b6f0a0a4e85e2", "filename": "tests/ui/as_conversions.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,7 +1,19 @@\n-#[warn(clippy::as_conversions)]\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::as_conversions)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+fn with_external_macro() {\n+    as_conv_with_arg!(0u32 as u64);\n+    as_conv!();\n+}\n \n fn main() {\n     let i = 0u32 as u64;\n \n     let j = &i as *const u64 as *mut u64;\n+\n+    with_external_macro();\n }"}, {"sha": "f5f75d3aee04a40f2032684353aa310418343389", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:4:13\n+  --> $DIR/as_conversions.rs:14:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "f985a15eda2bb5cbc48fecbbdd1e8c1b0205346e", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -70,3 +70,17 @@ macro_rules! ref_arg_function {\n         fn fun_example(ref _x: usize) {}\n     };\n }\n+\n+#[macro_export]\n+macro_rules! as_conv_with_arg {\n+    (0u32 as u64) => {\n+        ()\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! as_conv {\n+    () => {\n+        0u32 as u64\n+    };\n+}"}, {"sha": "2289f7875f04c7007e54cdf1666b5fc820cc01aa", "filename": "tests/ui/borrow_interior_mutable_const/auxiliary/helper.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fauxiliary%2Fhelper.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,16 @@\n+// this file solely exists to test constants defined in foreign crates.\n+// As the most common case is the `http` crate, it replicates `http::HeadewrName`'s structure.\n+\n+#![allow(clippy::declare_interior_mutable_const)]\n+\n+use std::sync::atomic::AtomicUsize;\n+\n+enum Private<T> {\n+    ToBeUnfrozen(T),\n+    Frozen(usize),\n+}\n+\n+pub struct Wrapper(Private<AtomicUsize>);\n+\n+pub const WRAPPED_PRIVATE_UNFROZEN_VARIANT: Wrapper = Wrapper(Private::ToBeUnfrozen(AtomicUsize::new(6)));\n+pub const WRAPPED_PRIVATE_FROZEN_VARIANT: Wrapper = Wrapper(Private::Frozen(7));"}, {"sha": "5027db44561798d1ba05fe0e692af592da2612b5", "filename": "tests/ui/borrow_interior_mutable_const/enums.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,101 @@\n+// aux-build:helper.rs\n+\n+#![warn(clippy::borrow_interior_mutable_const)]\n+#![allow(clippy::declare_interior_mutable_const)]\n+\n+// this file (mostly) replicates its `declare` counterpart. Please see it for more discussions.\n+\n+extern crate helper;\n+\n+use std::cell::Cell;\n+use std::sync::atomic::AtomicUsize;\n+\n+enum OptionalCell {\n+    Unfrozen(Cell<bool>),\n+    Frozen,\n+}\n+\n+const UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(true));\n+const FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;\n+\n+fn borrow_optional_cell() {\n+    let _ = &UNFROZEN_VARIANT; //~ ERROR interior mutability\n+    let _ = &FROZEN_VARIANT;\n+}\n+\n+trait AssocConsts {\n+    const TO_BE_UNFROZEN_VARIANT: OptionalCell;\n+    const TO_BE_FROZEN_VARIANT: OptionalCell;\n+\n+    const DEFAULTED_ON_UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(false));\n+    const DEFAULTED_ON_FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;\n+\n+    fn function() {\n+        // This is the \"suboptimal behavior\" mentioned in `is_value_unfrozen`\n+        // caused by a similar reason to unfrozen types without any default values\n+        // get linted even if it has frozen variants'.\n+        let _ = &Self::TO_BE_FROZEN_VARIANT; //~ ERROR interior mutable\n+\n+        // The lint ignores default values because an impl of this trait can set\n+        // an unfrozen variant to `DEFAULTED_ON_FROZEN_VARIANT` and use the default impl for `function`.\n+        let _ = &Self::DEFAULTED_ON_FROZEN_VARIANT; //~ ERROR interior mutable\n+    }\n+}\n+\n+impl AssocConsts for u64 {\n+    const TO_BE_UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(false));\n+    const TO_BE_FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;\n+\n+    fn function() {\n+        let _ = &<Self as AssocConsts>::TO_BE_UNFROZEN_VARIANT; //~ ERROR interior mutable\n+        let _ = &<Self as AssocConsts>::TO_BE_FROZEN_VARIANT;\n+        let _ = &Self::DEFAULTED_ON_UNFROZEN_VARIANT; //~ ERROR interior mutable\n+        let _ = &Self::DEFAULTED_ON_FROZEN_VARIANT;\n+    }\n+}\n+\n+trait AssocTypes {\n+    type ToBeUnfrozen;\n+\n+    const TO_BE_UNFROZEN_VARIANT: Option<Self::ToBeUnfrozen>;\n+    const TO_BE_FROZEN_VARIANT: Option<Self::ToBeUnfrozen>;\n+\n+    // there's no need to test here because it's the exactly same as `trait::AssocTypes`\n+    fn function();\n+}\n+\n+impl AssocTypes for u64 {\n+    type ToBeUnfrozen = AtomicUsize;\n+\n+    const TO_BE_UNFROZEN_VARIANT: Option<Self::ToBeUnfrozen> = Some(Self::ToBeUnfrozen::new(4)); //~ ERROR interior mutable\n+    const TO_BE_FROZEN_VARIANT: Option<Self::ToBeUnfrozen> = None;\n+\n+    fn function() {\n+        let _ = &<Self as AssocTypes>::TO_BE_UNFROZEN_VARIANT; //~ ERROR interior mutable\n+        let _ = &<Self as AssocTypes>::TO_BE_FROZEN_VARIANT;\n+    }\n+}\n+\n+enum BothOfCellAndGeneric<T> {\n+    Unfrozen(Cell<*const T>),\n+    Generic(*const T),\n+    Frozen(usize),\n+}\n+\n+impl<T> BothOfCellAndGeneric<T> {\n+    const UNFROZEN_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Unfrozen(Cell::new(std::ptr::null())); //~ ERROR interior mutable\n+    const GENERIC_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Generic(std::ptr::null()); //~ ERROR interior mutable\n+    const FROZEN_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Frozen(5);\n+\n+    fn function() {\n+        let _ = &Self::UNFROZEN_VARIANT; //~ ERROR interior mutability\n+        let _ = &Self::GENERIC_VARIANT; //~ ERROR interior mutability\n+        let _ = &Self::FROZEN_VARIANT;\n+    }\n+}\n+\n+fn main() {\n+    // constants defined in foreign crates\n+    let _ = &helper::WRAPPED_PRIVATE_UNFROZEN_VARIANT; //~ ERROR interior mutability\n+    let _ = &helper::WRAPPED_PRIVATE_FROZEN_VARIANT;\n+}"}, {"sha": "654a1ee7df659a402e4fb4404f43c65f00603cfe", "filename": "tests/ui/borrow_interior_mutable_const/enums.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fenums.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,75 @@\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:22:14\n+   |\n+LL |     let _ = &UNFROZEN_VARIANT; //~ ERROR interior mutability\n+   |              ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:37:18\n+   |\n+LL |         let _ = &Self::TO_BE_FROZEN_VARIANT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:41:18\n+   |\n+LL |         let _ = &Self::DEFAULTED_ON_FROZEN_VARIANT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:50:18\n+   |\n+LL |         let _ = &<Self as AssocConsts>::TO_BE_UNFROZEN_VARIANT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:52:18\n+   |\n+LL |         let _ = &Self::DEFAULTED_ON_UNFROZEN_VARIANT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:74:18\n+   |\n+LL |         let _ = &<Self as AssocTypes>::TO_BE_UNFROZEN_VARIANT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:91:18\n+   |\n+LL |         let _ = &Self::UNFROZEN_VARIANT; //~ ERROR interior mutability\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:92:18\n+   |\n+LL |         let _ = &Self::GENERIC_VARIANT; //~ ERROR interior mutability\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/enums.rs:99:14\n+   |\n+LL |     let _ = &helper::WRAPPED_PRIVATE_UNFROZEN_VARIANT; //~ ERROR interior mutability\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "ea25729d11d4db08ae7c57c96bb0bf9bf09b05ff", "filename": "tests/ui/borrow_interior_mutable_const/others.rs", "status": "renamed", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -19,33 +19,7 @@ const NO_ANN: &dyn Display = &70;\n static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n const ONCE_INIT: Once = Once::new();\n \n-trait Trait<T> {\n-    type AssocType;\n-\n-    const ATOMIC: AtomicUsize;\n-    const INPUT: T;\n-    const ASSOC: Self::AssocType;\n-\n-    fn function() {\n-        let _ = &Self::INPUT;\n-        let _ = &Self::ASSOC;\n-    }\n-}\n-\n-impl Trait<u32> for u64 {\n-    type AssocType = AtomicUsize;\n-\n-    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n-    const INPUT: u32 = 10;\n-    const ASSOC: Self::AssocType = AtomicUsize::new(11);\n-\n-    fn function() {\n-        let _ = &Self::INPUT;\n-        let _ = &Self::ASSOC; //~ ERROR interior mutability\n-    }\n-}\n-\n-// This is just a pointer that can be safely dereferended,\n+// This is just a pointer that can be safely dereferenced,\n // it's semantically the same as `&'static T`;\n // but it isn't allowed to make a static reference from an arbitrary integer value at the moment.\n // For more information, please see the issue #5918.\n@@ -100,7 +74,7 @@ fn main() {\n     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n-    let _ = &*ATOMIC_TUPLE.1; //~ ERROR interior mutability\n+    let _ = &*ATOMIC_TUPLE.1;\n     let _ = &ATOMIC_TUPLE.2;\n     let _ = (&&&&ATOMIC_TUPLE).0;\n     let _ = (&&&&ATOMIC_TUPLE).2;\n@@ -124,9 +98,6 @@ fn main() {\n     assert_eq!(STATIC_TUPLE.0.load(Ordering::SeqCst), 3);\n     assert!(STATIC_TUPLE.1.is_empty());\n \n-    u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n-    assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n-\n     assert_eq!(NO_ANN.to_string(), \"70\"); // should never lint this.\n \n     let _ = &CELL_REF.0;", "previous_filename": "tests/ui/borrow_interior_mutable_const.rs"}, {"sha": "9a908cf30e945cc100e1a98126448250704031f0", "filename": "tests/ui/borrow_interior_mutable_const/others.stderr", "status": "renamed", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,139 +1,115 @@\n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:44:18\n-   |\n-LL |         let _ = &Self::ASSOC; //~ ERROR interior mutability\n-   |                  ^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:80:5\n+  --> $DIR/others.rs:54:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n    |\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:81:16\n+  --> $DIR/others.rs:55:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:84:22\n+  --> $DIR/others.rs:58:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:85:25\n+  --> $DIR/others.rs:59:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:86:27\n+  --> $DIR/others.rs:60:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:87:26\n+  --> $DIR/others.rs:61:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:98:14\n+  --> $DIR/others.rs:72:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:99:14\n+  --> $DIR/others.rs:73:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:100:19\n+  --> $DIR/others.rs:74:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:101:14\n+  --> $DIR/others.rs:75:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:102:13\n+  --> $DIR/others.rs:76:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:108:13\n+  --> $DIR/others.rs:82:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:113:5\n+  --> $DIR/others.rs:87:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:114:16\n+  --> $DIR/others.rs:88:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:127:5\n-   |\n-LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: a `const` item with interior mutability should not be borrowed\n-  --> $DIR/borrow_interior_mutable_const.rs:128:16\n-   |\n-LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n-   |                ^^^^^^^^^^^\n-   |\n-   = help: assign this const to a local or static variable, and use the variable here\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 14 previous errors\n ", "previous_filename": "tests/ui/borrow_interior_mutable_const.stderr"}, {"sha": "06b5d62e8f9a816706e03fb174c9a28a5e95189f", "filename": "tests/ui/borrow_interior_mutable_const/traits.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,202 @@\n+#![warn(clippy::borrow_interior_mutable_const)]\n+#![allow(clippy::declare_interior_mutable_const)]\n+\n+// this file replicates its `declare` counterpart. Please see it for more discussions.\n+\n+use std::borrow::Cow;\n+use std::cell::Cell;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+trait ConcreteTypes {\n+    const ATOMIC: AtomicUsize;\n+    const STRING: String;\n+\n+    fn function() {\n+        let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+        let _ = &Self::STRING;\n+    }\n+}\n+\n+impl ConcreteTypes for u64 {\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(9);\n+    const STRING: String = String::new();\n+\n+    fn function() {\n+        // Lint this again since implementers can choose not to borrow it.\n+        let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+        let _ = &Self::STRING;\n+    }\n+}\n+\n+// a helper trait used below\n+trait ConstDefault {\n+    const DEFAULT: Self;\n+}\n+\n+trait GenericTypes<T, U> {\n+    const TO_REMAIN_GENERIC: T;\n+    const TO_BE_CONCRETE: U;\n+\n+    fn function() {\n+        let _ = &Self::TO_REMAIN_GENERIC;\n+    }\n+}\n+\n+impl<T: ConstDefault> GenericTypes<T, AtomicUsize> for Vec<T> {\n+    const TO_REMAIN_GENERIC: T = T::DEFAULT;\n+    const TO_BE_CONCRETE: AtomicUsize = AtomicUsize::new(11);\n+\n+    fn function() {\n+        let _ = &Self::TO_REMAIN_GENERIC;\n+        let _ = &Self::TO_BE_CONCRETE; //~ ERROR interior mutable\n+    }\n+}\n+\n+// a helper type used below\n+pub struct Wrapper<T>(T);\n+\n+trait AssocTypes {\n+    type ToBeFrozen;\n+    type ToBeUnfrozen;\n+    type ToBeGenericParam;\n+\n+    const TO_BE_FROZEN: Self::ToBeFrozen;\n+    const TO_BE_UNFROZEN: Self::ToBeUnfrozen;\n+    const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen>;\n+    const WRAPPED_TO_BE_GENERIC_PARAM: Wrapper<Self::ToBeGenericParam>;\n+\n+    fn function() {\n+        let _ = &Self::TO_BE_FROZEN;\n+        let _ = &Self::WRAPPED_TO_BE_UNFROZEN;\n+    }\n+}\n+\n+impl<T: ConstDefault> AssocTypes for Vec<T> {\n+    type ToBeFrozen = u16;\n+    type ToBeUnfrozen = AtomicUsize;\n+    type ToBeGenericParam = T;\n+\n+    const TO_BE_FROZEN: Self::ToBeFrozen = 12;\n+    const TO_BE_UNFROZEN: Self::ToBeUnfrozen = AtomicUsize::new(13);\n+    const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen> = Wrapper(AtomicUsize::new(14));\n+    const WRAPPED_TO_BE_GENERIC_PARAM: Wrapper<Self::ToBeGenericParam> = Wrapper(T::DEFAULT);\n+\n+    fn function() {\n+        let _ = &Self::TO_BE_FROZEN;\n+        let _ = &Self::TO_BE_UNFROZEN; //~ ERROR interior mutable\n+        let _ = &Self::WRAPPED_TO_BE_UNFROZEN; //~ ERROR interior mutable\n+        let _ = &Self::WRAPPED_TO_BE_GENERIC_PARAM;\n+    }\n+}\n+\n+// a helper trait used below\n+trait AssocTypesHelper {\n+    type NotToBeBounded;\n+    type ToBeBounded;\n+\n+    const NOT_TO_BE_BOUNDED: Self::NotToBeBounded;\n+}\n+\n+trait AssocTypesFromGenericParam<T>\n+where\n+    T: AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const NOT_BOUNDED: T::NotToBeBounded;\n+    const BOUNDED: T::ToBeBounded;\n+\n+    fn function() {\n+        let _ = &Self::NOT_BOUNDED;\n+        let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+    }\n+}\n+\n+impl<T> AssocTypesFromGenericParam<T> for Vec<T>\n+where\n+    T: AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const NOT_BOUNDED: T::NotToBeBounded = T::NOT_TO_BE_BOUNDED;\n+    const BOUNDED: T::ToBeBounded = AtomicUsize::new(15);\n+\n+    fn function() {\n+        let _ = &Self::NOT_BOUNDED;\n+        let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+    }\n+}\n+\n+trait SelfType: Sized {\n+    const SELF: Self;\n+    const WRAPPED_SELF: Option<Self>;\n+\n+    fn function() {\n+        let _ = &Self::SELF;\n+        let _ = &Self::WRAPPED_SELF;\n+    }\n+}\n+\n+impl SelfType for u64 {\n+    const SELF: Self = 16;\n+    const WRAPPED_SELF: Option<Self> = Some(20);\n+\n+    fn function() {\n+        let _ = &Self::SELF;\n+        let _ = &Self::WRAPPED_SELF;\n+    }\n+}\n+\n+impl SelfType for AtomicUsize {\n+    const SELF: Self = AtomicUsize::new(17);\n+    const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21));\n+\n+    fn function() {\n+        let _ = &Self::SELF; //~ ERROR interior mutable\n+        let _ = &Self::WRAPPED_SELF; //~ ERROR interior mutable\n+    }\n+}\n+\n+trait BothOfCellAndGeneric<T> {\n+    const DIRECT: Cell<T>;\n+    const INDIRECT: Cell<*const T>;\n+\n+    fn function() {\n+        let _ = &Self::DIRECT;\n+        let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+    }\n+}\n+\n+impl<T: ConstDefault> BothOfCellAndGeneric<T> for Vec<T> {\n+    const DIRECT: Cell<T> = Cell::new(T::DEFAULT);\n+    const INDIRECT: Cell<*const T> = Cell::new(std::ptr::null());\n+\n+    fn function() {\n+        let _ = &Self::DIRECT;\n+        let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+    }\n+}\n+\n+struct Local<T>(T);\n+\n+impl<T> Local<T>\n+where\n+    T: ConstDefault + AssocTypesHelper<ToBeBounded = AtomicUsize>,\n+{\n+    const ATOMIC: AtomicUsize = AtomicUsize::new(18);\n+    const COW: Cow<'static, str> = Cow::Borrowed(\"tuvwxy\");\n+\n+    const GENERIC_TYPE: T = T::DEFAULT;\n+\n+    const ASSOC_TYPE: T::NotToBeBounded = T::NOT_TO_BE_BOUNDED;\n+    const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19);\n+\n+    fn function() {\n+        let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+        let _ = &Self::COW;\n+        let _ = &Self::GENERIC_TYPE;\n+        let _ = &Self::ASSOC_TYPE;\n+        let _ = &Self::BOUNDED_ASSOC_TYPE; //~ ERROR interior mutable\n+    }\n+}\n+\n+fn main() {\n+    u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n+    assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n+}"}, {"sha": "8f26403abd3ee0444c0f05a52e4cad2677f0b065", "filename": "tests/ui/borrow_interior_mutable_const/traits.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Ftraits.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,123 @@\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:15:18\n+   |\n+LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::borrow-interior-mutable-const` implied by `-D warnings`\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:26:18\n+   |\n+LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:51:18\n+   |\n+LL |         let _ = &Self::TO_BE_CONCRETE; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:86:18\n+   |\n+LL |         let _ = &Self::TO_BE_UNFROZEN; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:87:18\n+   |\n+LL |         let _ = &Self::WRAPPED_TO_BE_UNFROZEN; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:109:18\n+   |\n+LL |         let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:122:18\n+   |\n+LL |         let _ = &Self::BOUNDED; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:151:18\n+   |\n+LL |         let _ = &Self::SELF; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:152:18\n+   |\n+LL |         let _ = &Self::WRAPPED_SELF; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:162:18\n+   |\n+LL |         let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:172:18\n+   |\n+LL |         let _ = &Self::INDIRECT; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:191:18\n+   |\n+LL |         let _ = &Self::ATOMIC; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:195:18\n+   |\n+LL |         let _ = &Self::BOUNDED_ASSOC_TYPE; //~ ERROR interior mutable\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:200:5\n+   |\n+LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: a `const` item with interior mutability should not be borrowed\n+  --> $DIR/traits.rs:201:16\n+   |\n+LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability\n+   |                ^^^^^^^^^^^\n+   |\n+   = help: assign this const to a local or static variable, and use the variable here\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "0eb7bb12b3546e85ad492460d28736886f1bd02b", "filename": "tests/ui/crashes/ice-360.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fcrashes%2Fice-360.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fcrashes%2Fice-360.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-360.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -19,7 +19,7 @@ LL |         loop {}\n    |         ^^^^^^^\n    |\n    = note: `-D clippy::empty-loop` implied by `-D warnings`\n-   = help: You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n+   = help: you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9dc92aa500b2ff795034c6790a6b611777926394", "filename": "tests/ui/crashes/ice-6332.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fcrashes%2Fice-6332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fcrashes%2Fice-6332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6332.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,11 @@\n+fn cmark_check() {\n+    let mut link_err = false;\n+    macro_rules! cmark_error {\n+        ($bad:expr) => {\n+            *$bad = true;\n+        };\n+    }\n+    cmark_error!(&mut link_err);\n+}\n+\n+pub fn main() {}"}, {"sha": "f44518694b89c309bc4ae14326f112367a878ac5", "filename": "tests/ui/declare_interior_mutable_const/enums.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fenums.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,123 @@\n+#![warn(clippy::declare_interior_mutable_const)]\n+\n+use std::cell::Cell;\n+use std::sync::atomic::AtomicUsize;\n+\n+enum OptionalCell {\n+    Unfrozen(Cell<bool>),\n+    Frozen,\n+}\n+\n+// a constant with enums should be linted only when the used variant is unfrozen (#3962).\n+const UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(true)); //~ ERROR interior mutable\n+const FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;\n+\n+const fn unfrozen_variant() -> OptionalCell {\n+    OptionalCell::Unfrozen(Cell::new(false))\n+}\n+\n+const fn frozen_variant() -> OptionalCell {\n+    OptionalCell::Frozen\n+}\n+\n+const UNFROZEN_VARIANT_FROM_FN: OptionalCell = unfrozen_variant(); //~ ERROR interior mutable\n+const FROZEN_VARIANT_FROM_FN: OptionalCell = frozen_variant();\n+\n+enum NestedInnermost {\n+    Unfrozen(AtomicUsize),\n+    Frozen,\n+}\n+\n+struct NestedInner {\n+    inner: NestedInnermost,\n+}\n+\n+enum NestedOuter {\n+    NestedInner(NestedInner),\n+    NotNested(usize),\n+}\n+\n+struct NestedOutermost {\n+    outer: NestedOuter,\n+}\n+\n+// a constant with enums should be linted according to its value, no matter how structs involve.\n+const NESTED_UNFROZEN_VARIANT: NestedOutermost = NestedOutermost {\n+    outer: NestedOuter::NestedInner(NestedInner {\n+        inner: NestedInnermost::Unfrozen(AtomicUsize::new(2)),\n+    }),\n+}; //~ ERROR interior mutable\n+const NESTED_FROZEN_VARIANT: NestedOutermost = NestedOutermost {\n+    outer: NestedOuter::NestedInner(NestedInner {\n+        inner: NestedInnermost::Frozen,\n+    }),\n+};\n+\n+trait AssocConsts {\n+    // When there's no default value, lint it only according to its type.\n+    // Further details are on the corresponding code (`NonCopyConst::check_trait_item`).\n+    const TO_BE_UNFROZEN_VARIANT: OptionalCell; //~ ERROR interior mutable\n+    const TO_BE_FROZEN_VARIANT: OptionalCell; //~ ERROR interior mutable\n+\n+    // Lint default values accordingly.\n+    const DEFAULTED_ON_UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(false)); //~ ERROR interior mutable\n+    const DEFAULTED_ON_FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;\n+}\n+\n+// The lint doesn't trigger for an assoc constant in a trait impl with an unfrozen type even if it\n+// has enums. Further details are on the corresponding code in 'NonCopyConst::check_impl_item'.\n+impl AssocConsts for u64 {\n+    const TO_BE_UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(false));\n+    const TO_BE_FROZEN_VARIANT: OptionalCell = OptionalCell::Frozen;\n+\n+    // even if this sets an unfrozen variant, the lint ignores it.\n+    const DEFAULTED_ON_FROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(false));\n+}\n+\n+// At first, I thought I'd need to check every patterns in `trait.rs`; but, what matters\n+// here are values; and I think substituted generics at definitions won't appear in MIR.\n+trait AssocTypes {\n+    type ToBeUnfrozen;\n+\n+    const TO_BE_UNFROZEN_VARIANT: Option<Self::ToBeUnfrozen>;\n+    const TO_BE_FROZEN_VARIANT: Option<Self::ToBeUnfrozen>;\n+}\n+\n+impl AssocTypes for u64 {\n+    type ToBeUnfrozen = AtomicUsize;\n+\n+    const TO_BE_UNFROZEN_VARIANT: Option<Self::ToBeUnfrozen> = Some(Self::ToBeUnfrozen::new(4)); //~ ERROR interior mutable\n+    const TO_BE_FROZEN_VARIANT: Option<Self::ToBeUnfrozen> = None;\n+}\n+\n+// Use raw pointers since direct generics have a false negative at the type level.\n+enum BothOfCellAndGeneric<T> {\n+    Unfrozen(Cell<*const T>),\n+    Generic(*const T),\n+    Frozen(usize),\n+}\n+\n+impl<T> BothOfCellAndGeneric<T> {\n+    const UNFROZEN_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Unfrozen(Cell::new(std::ptr::null())); //~ ERROR interior mutable\n+\n+    // This is a false positive. The argument about this is on `is_value_unfrozen_raw`\n+    const GENERIC_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Generic(std::ptr::null()); //~ ERROR interior mutable\n+\n+    const FROZEN_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Frozen(5);\n+\n+    // This is what is likely to be a false negative when one tries to fix\n+    // the `GENERIC_VARIANT` false positive.\n+    const NO_ENUM: Cell<*const T> = Cell::new(std::ptr::null()); //~ ERROR interior mutable\n+}\n+\n+// associated types here is basically the same as the one above.\n+trait BothOfCellAndGenericWithAssocType {\n+    type AssocType;\n+\n+    const UNFROZEN_VARIANT: BothOfCellAndGeneric<Self::AssocType> =\n+        BothOfCellAndGeneric::Unfrozen(Cell::new(std::ptr::null())); //~ ERROR interior mutable\n+    const GENERIC_VARIANT: BothOfCellAndGeneric<Self::AssocType> = BothOfCellAndGeneric::Generic(std::ptr::null()); //~ ERROR interior mutable\n+    const FROZEN_VARIANT: BothOfCellAndGeneric<Self::AssocType> = BothOfCellAndGeneric::Frozen(5);\n+}\n+\n+fn main() {}"}, {"sha": "84198d5461578ca4c1ff4e95ca895be899db748e", "filename": "tests/ui/declare_interior_mutable_const/enums.stderr", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fenums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fenums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fenums.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,89 @@\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:12:1\n+   |\n+LL | const UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(true)); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+   |\n+   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:23:1\n+   |\n+LL | const UNFROZEN_VARIANT_FROM_FN: OptionalCell = unfrozen_variant(); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:45:1\n+   |\n+LL |   const NESTED_UNFROZEN_VARIANT: NestedOutermost = NestedOutermost {\n+   |   ^----\n+   |   |\n+   |  _make this a static item (maybe with lazy_static)\n+   | |\n+LL | |     outer: NestedOuter::NestedInner(NestedInner {\n+LL | |         inner: NestedInnermost::Unfrozen(AtomicUsize::new(2)),\n+LL | |     }),\n+LL | | }; //~ ERROR interior mutable\n+   | |__^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:59:5\n+   |\n+LL |     const TO_BE_UNFROZEN_VARIANT: OptionalCell; //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:60:5\n+   |\n+LL |     const TO_BE_FROZEN_VARIANT: OptionalCell; //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:63:5\n+   |\n+LL |     const DEFAULTED_ON_UNFROZEN_VARIANT: OptionalCell = OptionalCell::Unfrozen(Cell::new(false)); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:89:5\n+   |\n+LL |     const TO_BE_UNFROZEN_VARIANT: Option<Self::ToBeUnfrozen> = Some(Self::ToBeUnfrozen::new(4)); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:101:5\n+   |\n+LL |     const UNFROZEN_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Unfrozen(Cell::new(std::ptr::null())); //~ ERROR interior mut...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:104:5\n+   |\n+LL |     const GENERIC_VARIANT: BothOfCellAndGeneric<T> = BothOfCellAndGeneric::Generic(std::ptr::null()); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:110:5\n+   |\n+LL |     const NO_ENUM: Cell<*const T> = Cell::new(std::ptr::null()); //~ ERROR interior mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:117:5\n+   |\n+LL | /     const UNFROZEN_VARIANT: BothOfCellAndGeneric<Self::AssocType> =\n+LL | |         BothOfCellAndGeneric::Unfrozen(Cell::new(std::ptr::null())); //~ ERROR interior mutable\n+   | |____________________________________________________________________^\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/enums.rs:119:5\n+   |\n+LL |     const GENERIC_VARIANT: BothOfCellAndGeneric<Self::AssocType> = BothOfCellAndGeneric::Generic(std::ptr::null()); //~ ERROR interior mu...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "48c5e9537d6d088111316151823a6c838e55e5c4", "filename": "tests/ui/declare_interior_mutable_const/others.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,34 @@\n+#![warn(clippy::declare_interior_mutable_const)]\n+\n+use std::borrow::Cow;\n+use std::cell::Cell;\n+use std::fmt::Display;\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::Once;\n+\n+const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n+const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n+//~^ ERROR interior mutable\n+\n+macro_rules! declare_const {\n+    ($name:ident: $ty:ty = $e:expr) => {\n+        const $name: $ty = $e;\n+    };\n+}\n+declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n+\n+// const ATOMIC_REF: &AtomicUsize = &AtomicUsize::new(7); // This will simply trigger E0492.\n+\n+const INTEGER: u8 = 8;\n+const STRING: String = String::new();\n+const STR: &str = \"012345\";\n+const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n+//^ note: a const item of Cow is used in the `postgres` package.\n+\n+const NO_ANN: &dyn Display = &70;\n+\n+static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n+//^ there should be no lints on this line\n+\n+fn main() {}"}, {"sha": "6153c96edc4f425e254084377242028e490203cb", "filename": "tests/ui/declare_interior_mutable_const/others.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,39 @@\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:9:1\n+   |\n+LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+   |\n+   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:10:1\n+   |\n+LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:11:1\n+   |\n+LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | make this a static item (maybe with lazy_static)\n+\n+error: a `const` item should never be interior mutable\n+  --> $DIR/others.rs:16:9\n+   |\n+LL |         const $name: $ty = $e;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n+   | ------------------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "535147ccc645121259280495102cb985c4905d15", "filename": "tests/ui/declare_interior_mutable_const/traits.rs", "status": "renamed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,37 +2,13 @@\n \n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::fmt::Display;\n use std::sync::atomic::AtomicUsize;\n-use std::sync::Once;\n-\n-const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n-const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n-const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n-//~^ ERROR interior mutable\n \n macro_rules! declare_const {\n     ($name:ident: $ty:ty = $e:expr) => {\n         const $name: $ty = $e;\n     };\n }\n-declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-\n-// const ATOMIC_REF: &AtomicUsize = &AtomicUsize::new(7); // This will simply trigger E0492.\n-\n-const INTEGER: u8 = 8;\n-const STRING: String = String::new();\n-const STR: &str = \"012345\";\n-const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n-//^ note: a const item of Cow is used in the `postgres` package.\n-\n-const NO_ANN: &dyn Display = &70;\n-\n-static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n-//^ there should be no lints on this line\n-\n-#[allow(clippy::declare_interior_mutable_const)]\n-const ONCE_INIT: Once = Once::new();\n \n // a constant whose type is a concrete type should be linted at the definition site.\n trait ConcreteTypes {", "previous_filename": "tests/ui/declare_interior_mutable_const.rs"}, {"sha": "bb77f39b62c1f668a2729b871c728ecb66567816", "filename": "tests/ui/declare_interior_mutable_const/traits.stderr", "status": "renamed", "additions": 14, "deletions": 49, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,48 +1,13 @@\n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:9:1\n-   |\n-LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-   |\n-   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:10:1\n-   |\n-LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:11:1\n-   |\n-LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n-   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | make this a static item (maybe with lazy_static)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:16:9\n-   |\n-LL |         const $name: $ty = $e;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-   | ------------------------------------------ in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:39:5\n+  --> $DIR/traits.rs:15:5\n    |\n LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::declare-interior-mutable-const` implied by `-D warnings`\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:16:9\n+  --> $DIR/traits.rs:9:9\n    |\n LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,58 +18,58 @@ LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR i\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:67:5\n+  --> $DIR/traits.rs:43:5\n    |\n LL |     const TO_BE_CONCRETE: AtomicUsize = AtomicUsize::new(11); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:92:5\n+  --> $DIR/traits.rs:68:5\n    |\n LL |     const TO_BE_UNFROZEN: Self::ToBeUnfrozen = AtomicUsize::new(13); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:93:5\n+  --> $DIR/traits.rs:69:5\n    |\n LL |     const WRAPPED_TO_BE_UNFROZEN: Wrapper<Self::ToBeUnfrozen> = Wrapper(AtomicUsize::new(14)); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:112:5\n+  --> $DIR/traits.rs:88:5\n    |\n LL |     const BOUNDED: T::ToBeBounded; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:140:5\n+  --> $DIR/traits.rs:116:5\n    |\n LL |     const SELF: Self = AtomicUsize::new(17); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:141:5\n+  --> $DIR/traits.rs:117:5\n    |\n LL |     const WRAPPED_SELF: Option<Self> = Some(AtomicUsize::new(21)); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:149:5\n+  --> $DIR/traits.rs:125:5\n    |\n LL |     const INDIRECT: Cell<*const T>; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:165:5\n+  --> $DIR/traits.rs:141:5\n    |\n LL |     const ATOMIC: AtomicUsize = AtomicUsize::new(18); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: a `const` item should never be interior mutable\n-  --> $DIR/declare_interior_mutable_const.rs:171:5\n+  --> $DIR/traits.rs:147:5\n    |\n LL |     const BOUNDED_ASSOC_TYPE: T::ToBeBounded = AtomicUsize::new(19); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 11 previous errors\n ", "previous_filename": "tests/ui/declare_interior_mutable_const.stderr"}, {"sha": "4cbc5630d759d76d6c5e631e31871a3cbfebb2ac", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -10,5 +10,6 @@\n #[warn(clippy::regex_macro)]\n #[warn(clippy::drop_bounds)]\n #[warn(clippy::temporary_cstring_as_ptr)]\n+#[warn(clippy::panic_params)]\n \n fn main() {}"}, {"sha": "a348d01d734fed006f29ecd2e7dba3b96e8f5f1d", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -72,11 +72,17 @@ error: lint `clippy::temporary_cstring_as_ptr` has been removed: `this lint has\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::panic_params` has been removed: `this lint has been uplifted to rustc and is now called `panic_fmt``\n+  --> $DIR/deprecated.rs:13:8\n+   |\n+LL | #[warn(clippy::panic_params)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "0795900558b695824bdead9959b7201313b13034", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![warn(clippy::deref_addrof)]\n \n fn get_number() -> usize {\n     10\n@@ -10,7 +11,6 @@ fn get_reference(n: &usize) -> &usize {\n \n #[allow(clippy::many_single_char_names, clippy::double_parens)]\n #[allow(unused_variables, unused_parens)]\n-#[warn(clippy::deref_addrof)]\n fn main() {\n     let a = 10;\n     let aref = &a;\n@@ -37,3 +37,27 @@ fn main() {\n \n     let b = *aref;\n }\n+\n+#[rustfmt::skip]\n+macro_rules! m {\n+    ($visitor: expr) => {\n+        $visitor\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! m_mut {\n+    ($visitor: expr) => {\n+        $visitor\n+    };\n+}\n+\n+pub struct S;\n+impl S {\n+    pub fn f(&self) -> &Self {\n+        m!(self)\n+    }\n+    pub fn f_mut(&self) -> &Self {\n+        m_mut!(self)\n+    }\n+}"}, {"sha": "60c4318601bc881799a07d7e6e7ffdcbd3886957", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![warn(clippy::deref_addrof)]\n \n fn get_number() -> usize {\n     10\n@@ -10,7 +11,6 @@ fn get_reference(n: &usize) -> &usize {\n \n #[allow(clippy::many_single_char_names, clippy::double_parens)]\n #[allow(unused_variables, unused_parens)]\n-#[warn(clippy::deref_addrof)]\n fn main() {\n     let a = 10;\n     let aref = &a;\n@@ -37,3 +37,27 @@ fn main() {\n \n     let b = **&aref;\n }\n+\n+#[rustfmt::skip]\n+macro_rules! m {\n+    ($visitor: expr) => {\n+        *& $visitor\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! m_mut {\n+    ($visitor: expr) => {\n+        *& mut $visitor\n+    };\n+}\n+\n+pub struct S;\n+impl S {\n+    pub fn f(&self) -> &Self {\n+        m!(self)\n+    }\n+    pub fn f_mut(&self) -> &Self {\n+        m_mut!(self)\n+    }\n+}"}, {"sha": "e85b30fa56eb884ff719241f62e659a57b3cc7fd", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -48,5 +48,27 @@ error: immediately dereferencing a reference\n LL |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n-error: aborting due to 8 previous errors\n+error: immediately dereferencing a reference\n+  --> $DIR/deref_addrof.rs:44:9\n+   |\n+LL |         *& $visitor\n+   |         ^^^^^^^^^^^ help: try this: `$visitor`\n+...\n+LL |         m!(self)\n+   |         -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/deref_addrof.rs:51:9\n+   |\n+LL |         *& mut $visitor\n+   |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`\n+...\n+LL |         m_mut!(self)\n+   |         ------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "6f12d36d777dcbae0fbbae36f393e16f514528ef", "filename": "tests/ui/derive_ord_xor_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderive_ord_xor_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderive_ord_xor_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::derive_ord_xor_partial_ord)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::cmp::Ordering;\n "}, {"sha": "97b46a4aa89828c3dda6d9ed82f65c8f288cf835", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,12 +1,12 @@\n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n-  --> $DIR/derive_ord_xor_partial_ord.rs:20:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:21:10\n    |\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n    = note: `-D clippy::derive-ord-xor-partial-ord` implied by `-D warnings`\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:23:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:24:1\n    |\n LL | / impl PartialOrd for DeriveOrd {\n LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -17,13 +17,13 @@ LL | | }\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n-  --> $DIR/derive_ord_xor_partial_ord.rs:29:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:30:10\n    |\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:32:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:33:1\n    |\n LL | / impl PartialOrd<DeriveOrdWithExplicitTypeVariable> for DeriveOrdWithExplicitTypeVariable {\n LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -34,7 +34,7 @@ LL | | }\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n-  --> $DIR/derive_ord_xor_partial_ord.rs:41:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:42:1\n    |\n LL | / impl std::cmp::Ord for DerivePartialOrd {\n LL | |     fn cmp(&self, other: &Self) -> Ordering {\n@@ -44,14 +44,14 @@ LL | | }\n    | |_^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:38:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:39:10\n    |\n LL | #[derive(PartialOrd, PartialEq, Eq)]\n    |          ^^^^^^^^^^\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n-  --> $DIR/derive_ord_xor_partial_ord.rs:61:5\n+  --> $DIR/derive_ord_xor_partial_ord.rs:62:5\n    |\n LL | /     impl Ord for DerivePartialOrdInUseOrd {\n LL | |         fn cmp(&self, other: &Self) -> Ordering {\n@@ -61,7 +61,7 @@ LL | |     }\n    | |_____^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:58:14\n+  --> $DIR/derive_ord_xor_partial_ord.rs:59:14\n    |\n LL |     #[derive(PartialOrd, PartialEq, Eq)]\n    |              ^^^^^^^^^^"}, {"sha": "c77a74a58f22c6072dcfb295ea22794afbe1309c", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n #![warn(clippy::missing_errors_doc)]\n #![allow(clippy::result_unit_err)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::io;\n "}, {"sha": "b5a81419daee35d295197158c9e20d5a17f21871", "filename": "tests/ui/doc_errors.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdoc_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdoc_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:7:1\n+  --> $DIR/doc_errors.rs:8:1\n    |\n LL | / pub fn pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n@@ -9,47 +9,47 @@ LL | | }\n    = note: `-D clippy::missing-errors-doc` implied by `-D warnings`\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:11:1\n+  --> $DIR/doc_errors.rs:12:1\n    |\n LL | / pub async fn async_pub_fn_missing_errors_header() -> Result<(), ()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:16:1\n+  --> $DIR/doc_errors.rs:17:1\n    |\n LL | / pub fn pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:21:1\n+  --> $DIR/doc_errors.rs:22:1\n    |\n LL | / pub async fn async_pub_fn_returning_io_result() -> io::Result<()> {\n LL | |     unimplemented!();\n LL | | }\n    | |_^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:51:5\n+  --> $DIR/doc_errors.rs:52:5\n    |\n LL | /     pub fn pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:56:5\n+  --> $DIR/doc_errors.rs:57:5\n    |\n LL | /     pub async fn async_pub_method_missing_errors_header() -> Result<(), ()> {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: docs for function returning `Result` missing `# Errors` section\n-  --> $DIR/doc_errors.rs:85:5\n+  --> $DIR/doc_errors.rs:86:5\n    |\n LL |     fn trait_method_missing_errors_header() -> Result<(), ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e1a15c609fd233d6adf784fb5294c7a3b191baed", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::map_err_ignore)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::mem::drop;\n "}, {"sha": "10087cb4820a7ce650ce5f52016d0c615767491e", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:10:5\n+  --> $DIR/drop_ref.rs:11:5\n    |\n LL |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::drop-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:10:10\n+  --> $DIR/drop_ref.rs:11:10\n    |\n LL |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:13:5\n+  --> $DIR/drop_ref.rs:14:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:13:10\n+  --> $DIR/drop_ref.rs:14:10\n    |\n LL |     drop(&owned1);\n    |          ^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:14:5\n+  --> $DIR/drop_ref.rs:15:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n+  --> $DIR/drop_ref.rs:15:10\n    |\n LL |     drop(&&owned1);\n    |          ^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:15:5\n+  --> $DIR/drop_ref.rs:16:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:15:10\n+  --> $DIR/drop_ref.rs:16:10\n    |\n LL |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:19:5\n+  --> $DIR/drop_ref.rs:20:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:19:10\n+  --> $DIR/drop_ref.rs:20:10\n    |\n LL |     drop(reference1);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:22:5\n+  --> $DIR/drop_ref.rs:23:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:22:10\n+  --> $DIR/drop_ref.rs:23:10\n    |\n LL |     drop(reference2);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:25:5\n+  --> $DIR/drop_ref.rs:26:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:25:10\n+  --> $DIR/drop_ref.rs:26:10\n    |\n LL |     drop(reference3);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:30:5\n+  --> $DIR/drop_ref.rs:31:5\n    |\n LL |     drop(&val);\n    |     ^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:30:10\n+  --> $DIR/drop_ref.rs:31:10\n    |\n LL |     drop(&val);\n    |          ^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:38:5\n+  --> $DIR/drop_ref.rs:39:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:38:20\n+  --> $DIR/drop_ref.rs:39:20\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^"}, {"sha": "555f3d3d884a9d6d6a5f4f7520d4b152a53cfd24", "filename": "tests/ui/empty_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fempty_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fempty_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -5,23 +5,23 @@ LL |     loop {}\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::empty-loop` implied by `-D warnings`\n-   = help: You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n+   = help: you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\n \n error: empty `loop {}` wastes CPU cycles\n   --> $DIR/empty_loop.rs:11:9\n    |\n LL |         loop {}\n    |         ^^^^^^^\n    |\n-   = help: You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n+   = help: you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\n \n error: empty `loop {}` wastes CPU cycles\n   --> $DIR/empty_loop.rs:15:9\n    |\n LL |         'inner: loop {}\n    |         ^^^^^^^^^^^^^^^\n    |\n-   = help: You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n+   = help: you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4553d3ec505a33846cce213690a5a6905ef3330c", "filename": "tests/ui/empty_loop_no_std.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fempty_loop_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fempty_loop_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -10,13 +10,18 @@ use core::panic::PanicInfo;\n \n #[start]\n fn main(argc: isize, argv: *const *const u8) -> isize {\n+    // This should trigger the lint\n     loop {}\n }\n \n #[panic_handler]\n fn panic(_info: &PanicInfo) -> ! {\n+    // This should NOT trigger the lint\n     loop {}\n }\n \n #[lang = \"eh_personality\"]\n-extern \"C\" fn eh_personality() {}\n+extern \"C\" fn eh_personality() {\n+    // This should also trigger the lint\n+    loop {}\n+}"}, {"sha": "520248fcb689c4e52b3a39c65873f0e2fc4d547d", "filename": "tests/ui/empty_loop_no_std.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fempty_loop_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fempty_loop_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,19 @@\n+error: empty `loop {}` wastes CPU cycles\n+  --> $DIR/empty_loop_no_std.rs:14:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+   |\n+   = note: `-D clippy::empty-loop` implied by `-D warnings`\n+   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n+\n+error: empty `loop {}` wastes CPU cycles\n+  --> $DIR/empty_loop_no_std.rs:26:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+   |\n+   = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "514502416192640890c0c436981abcdb800f4d5e", "filename": "tests/ui/filter_methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {"}, {"sha": "119226813793c172aba83986b6f15830039a6e5f", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: called `filter(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:5:21\n+  --> $DIR/filter_methods.rs:6:21\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n error: called `filter(..).flat_map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:7:21\n+  --> $DIR/filter_methods.rs:8:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n    |  _____________________^\n@@ -20,7 +20,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).flat_map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:13:21\n+  --> $DIR/filter_methods.rs:14:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n    |  _____________________^\n@@ -32,7 +32,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n error: called `filter_map(..).map(..)` on an `Iterator`\n-  --> $DIR/filter_methods.rs:19:21\n+  --> $DIR/filter_methods.rs:20:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n    |  _____________________^"}, {"sha": "c49e6756a6c5bed9db7e73e40ae7acbf5aebb260", "filename": "tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::mem::forget;\n "}, {"sha": "b2c7f2023bfbf47519d00125d17da0babb767022", "filename": "tests/ui/forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:9:5\n+  --> $DIR/forget_ref.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:9:12\n+  --> $DIR/forget_ref.rs:10:12\n    |\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:12:5\n+  --> $DIR/forget_ref.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:12:12\n+  --> $DIR/forget_ref.rs:13:12\n    |\n LL |     forget(&owned);\n    |            ^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:13:12\n+  --> $DIR/forget_ref.rs:14:12\n    |\n LL |     forget(&&owned);\n    |            ^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n+  --> $DIR/forget_ref.rs:15:12\n    |\n LL |     forget(&mut owned);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:18:5\n+  --> $DIR/forget_ref.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:18:12\n+  --> $DIR/forget_ref.rs:19:12\n    |\n LL |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:21:5\n+  --> $DIR/forget_ref.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:21:12\n+  --> $DIR/forget_ref.rs:22:12\n    |\n LL |     forget(reference2);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:24:5\n+  --> $DIR/forget_ref.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:24:12\n+  --> $DIR/forget_ref.rs:25:12\n    |\n LL |     forget(reference3);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:29:5\n+  --> $DIR/forget_ref.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:29:12\n+  --> $DIR/forget_ref.rs:30:12\n    |\n LL |     forget(&val);\n    |            ^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:37:5\n+  --> $DIR/forget_ref.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:37:22\n+  --> $DIR/forget_ref.rs:38:22\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^"}, {"sha": "98593edb9c591216f7f5380b99917489811e8fef", "filename": "tests/ui/let_underscore_drop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::let_underscore_drop)]\n+\n+struct Droppable;\n+\n+impl Drop for Droppable {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let unit = ();\n+    let boxed = Box::new(());\n+    let droppable = Droppable;\n+    let optional = Some(Droppable);\n+\n+    let _ = ();\n+    let _ = Box::new(());\n+    let _ = Droppable;\n+    let _ = Some(Droppable);\n+}"}, {"sha": "66069e0c5e13f00a8d524c99351a2f7363da0c89", "filename": "tests/ui/let_underscore_drop.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,27 @@\n+error: non-binding `let` on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:16:5\n+   |\n+LL |     let _ = Box::new(());\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding `let` on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:17:5\n+   |\n+LL |     let _ = Droppable;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: non-binding `let` on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:18:5\n+   |\n+LL |     let _ = Some(Droppable);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a842e872a37b1f0fefcb21dad35b630ef75deaeb", "filename": "tests/ui/let_underscore_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::let_underscore_must_use)]\n+#![allow(clippy::unnecessary_wraps)]\n \n // Debug implementations can fire this lint,\n // so we shouldn't lint external macros"}, {"sha": "5b751ea56deffe96d0413506ba5ed67abd039e6b", "filename": "tests/ui/let_underscore_must_use.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:66:5\n+  --> $DIR/let_underscore_must_use.rs:67:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n@@ -8,87 +8,87 @@ LL |     let _ = f();\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:67:5\n+  --> $DIR/let_underscore_must_use.rs:68:5\n    |\n LL |     let _ = g();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:69:5\n+  --> $DIR/let_underscore_must_use.rs:70:5\n    |\n LL |     let _ = l(0_u32);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:73:5\n+  --> $DIR/let_underscore_must_use.rs:74:5\n    |\n LL |     let _ = s.f();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:74:5\n+  --> $DIR/let_underscore_must_use.rs:75:5\n    |\n LL |     let _ = s.g();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:77:5\n+  --> $DIR/let_underscore_must_use.rs:78:5\n    |\n LL |     let _ = S::h();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:78:5\n+  --> $DIR/let_underscore_must_use.rs:79:5\n    |\n LL |     let _ = S::p();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:80:5\n+  --> $DIR/let_underscore_must_use.rs:81:5\n    |\n LL |     let _ = S::a();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:82:5\n+  --> $DIR/let_underscore_must_use.rs:83:5\n    |\n LL |     let _ = if true { Ok(()) } else { Err(()) };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:86:5\n+  --> $DIR/let_underscore_must_use.rs:87:5\n    |\n LL |     let _ = a.is_ok();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:88:5\n+  --> $DIR/let_underscore_must_use.rs:89:5\n    |\n LL |     let _ = a.map(|_| ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:90:5\n+  --> $DIR/let_underscore_must_use.rs:91:5\n    |\n LL |     let _ = a;\n    |     ^^^^^^^^^^"}, {"sha": "5184f6fdb88b3991850aead57bf02ea0a75b46cf", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -7,7 +7,19 @@ use std::future::Future;\n \n async fn fut() -> i32 { 42 }\n \n-async fn empty_fut()  {}\n+#[rustfmt::skip]\n+async fn fut2() -> i32 { 42 }\n+\n+#[rustfmt::skip]\n+async fn fut3() -> i32 { 42 }\n+\n+async fn empty_fut() {}\n+\n+#[rustfmt::skip]\n+async fn empty_fut2() {}\n+\n+#[rustfmt::skip]\n+async fn empty_fut3() {}\n \n async fn core_fut() -> i32 { 42 }\n "}, {"sha": "68c0e591f0b6eed6b4ffd5eeb1b8bd0fde47bae1", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -9,10 +9,30 @@ fn fut() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n+#[rustfmt::skip]\n+fn fut2() ->impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+#[rustfmt::skip]\n+fn fut3()-> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n fn empty_fut() -> impl Future<Output = ()> {\n     async {}\n }\n \n+#[rustfmt::skip]\n+fn empty_fut2() ->impl Future<Output = ()> {\n+    async {}\n+}\n+\n+#[rustfmt::skip]\n+fn empty_fut3()-> impl Future<Output = ()> {\n+    async {}\n+}\n+\n fn core_fut() -> impl core::future::Future<Output = i32> {\n     async move { 42 }\n }"}, {"sha": "fdd43db3255ee5991fe49597ded05698fbae3f64", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -15,22 +15,82 @@ LL | fn fut() -> impl Future<Output = i32> { 42 }\n    |                                       ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:12:1\n+  --> $DIR/manual_async_fn.rs:13:1\n+   |\n+LL | fn fut2() ->impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | async fn fut2() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn fut2() ->impl Future<Output = i32> { 42 }\n+   |                                       ^^^^^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:18:1\n+   |\n+LL | fn fut3()-> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | async fn fut3() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn fut3()-> impl Future<Output = i32> { 42 }\n+   |                                       ^^^^^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:22:1\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: make the function `async` and remove the return type\n    |\n-LL | async fn empty_fut()  {\n+LL | async fn empty_fut() {\n    | ^^^^^^^^^^^^^^^^^^^^\n help: move the body of the async block to the enclosing function\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {}\n    |                                            ^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:16:1\n+  --> $DIR/manual_async_fn.rs:27:1\n+   |\n+LL | fn empty_fut2() ->impl Future<Output = ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and remove the return type\n+   |\n+LL | async fn empty_fut2() {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn empty_fut2() ->impl Future<Output = ()> {}\n+   |                                            ^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:32:1\n+   |\n+LL | fn empty_fut3()-> impl Future<Output = ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and remove the return type\n+   |\n+LL | async fn empty_fut3() {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn empty_fut3()-> impl Future<Output = ()> {}\n+   |                                            ^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:36:1\n    |\n LL | fn core_fut() -> impl core::future::Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +105,7 @@ LL | fn core_fut() -> impl core::future::Future<Output = i32> { 42 }\n    |                                                          ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:38:5\n+  --> $DIR/manual_async_fn.rs:58:5\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -65,7 +125,7 @@ LL |             let c = 21;\n  ...\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:73:1\n+  --> $DIR/manual_async_fn.rs:93:1\n    |\n LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +140,7 @@ LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ { 42 }\n    |                                                      ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:82:1\n+  --> $DIR/manual_async_fn.rs:102:1\n    |\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,5 +154,5 @@ help: move the body of the async block to the enclosing function\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b { 42 }\n    |                                                                                    ^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "887a97d7a01734dafb5269bcac6c57b62a2978db", "filename": "tests/ui/manual_ok_or.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_ok_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_ok_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     // not applicable, or side isn't `Result::Err`\n     foo.map_or(Ok::<i32, &str>(1), |v| Ok(v));\n \n-    // not applicatble, expr is not a `Result` value\n+    // not applicable, expr is not a `Result` value\n     foo.map_or(42, |v| v);\n \n     // TODO patterns not covered yet"}, {"sha": "3c99872f5022a32cb4a35394fe12e8ba46b0e362", "filename": "tests/ui/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     // not applicable, or side isn't `Result::Err`\n     foo.map_or(Ok::<i32, &str>(1), |v| Ok(v));\n \n-    // not applicatble, expr is not a `Result` value\n+    // not applicable, expr is not a `Result` value\n     foo.map_or(42, |v| v);\n \n     // TODO patterns not covered yet"}, {"sha": "81d903c15d32a29475cf338109586a22511ab306", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(dead_code)]\n-#![allow(unused_variables)]\n+#![allow(unused_variables, clippy::unnecessary_wraps)]\n \n fn option_unwrap_or() {\n     // int case"}, {"sha": "16105d379c3052ac8c709e0ea24925411d0fb237", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(dead_code)]\n-#![allow(unused_variables)]\n+#![allow(unused_variables, clippy::unnecessary_wraps)]\n \n fn option_unwrap_or() {\n     // int case"}, {"sha": "178d8705c2f02cedf1a70ed5ef6604e802fd873d", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n #![allow(clippy::many_single_char_names)]\n@@ -44,4 +45,19 @@ fn main() {\n         let v = vec![&mut d];\n         let _: Vec<u32> = v.into_iter().map(|&mut x| x).collect();\n     }\n+\n+    // Issue #6299\n+    {\n+        let mut aa = 5;\n+        let mut bb = 3;\n+        let items = vec![&mut aa, &mut bb];\n+        let _: Vec<_> = items.into_iter().map(|x| x.clone()).collect();\n+    }\n+\n+    // Issue #6239 deref coercion and clone deref\n+    {\n+        use std::cell::RefCell;\n+\n+        let _ = Some(RefCell::new(String::new()).borrow()).map(|s| s.clone());\n+    }\n }"}, {"sha": "c73d81713b8a3a762adf71fa13589f65640d9463", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n #![allow(clippy::many_single_char_names)]\n@@ -44,4 +45,19 @@ fn main() {\n         let v = vec![&mut d];\n         let _: Vec<u32> = v.into_iter().map(|&mut x| x).collect();\n     }\n+\n+    // Issue #6299\n+    {\n+        let mut aa = 5;\n+        let mut bb = 3;\n+        let items = vec![&mut aa, &mut bb];\n+        let _: Vec<_> = items.into_iter().map(|x| x.clone()).collect();\n+    }\n+\n+    // Issue #6239 deref coercion and clone deref\n+    {\n+        use std::cell::RefCell;\n+\n+        let _ = Some(RefCell::new(String::new()).borrow()).map(|s| s.clone());\n+    }\n }"}, {"sha": "d84a5bf8d4de6f3bc3543b4861543e19a92264f9", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,37 +1,37 @@\n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:10:22\n+  --> $DIR/map_clone.rs:11:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: you are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:11:26\n+  --> $DIR/map_clone.rs:12:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:12:23\n+  --> $DIR/map_clone.rs:13:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:14:26\n+  --> $DIR/map_clone.rs:15:26\n    |\n LL |     let _: Option<u64> = Some(&16).map(|b| *b);\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&16).copied()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:15:25\n+  --> $DIR/map_clone.rs:16:25\n    |\n LL |     let _: Option<u8> = Some(&1).map(|x| x.clone());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&1).copied()`\n \n error: you are needlessly cloning iterator elements\n-  --> $DIR/map_clone.rs:26:29\n+  --> $DIR/map_clone.rs:27:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: remove the `map` call"}, {"sha": "05b9949f10217e2cd9ef17c3fd8a2a51dfff61d5", "filename": "tests/ui/map_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::map_err_ignore)]\n+#![allow(clippy::unnecessary_wraps)]\n use std::convert::TryFrom;\n use std::error::Error;\n use std::fmt;"}, {"sha": "390d7ce2e4e7b0fa5a6c956929a72d6983838173", "filename": "tests/ui/map_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: `map_err(|_|...` ignores the original error\n-  --> $DIR/map_err.rs:22:32\n+  --> $DIR/map_err.rs:23:32\n    |\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^"}, {"sha": "773b5914439d39f03ccc5cacd3666f68c0d67eb6", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,8 +1,10 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn main() {\n     // mapping to Option on Iterator"}, {"sha": "578bd877267952da8f126e277a63e9fdc94176ba", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,8 +1,10 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn main() {\n     // mapping to Option on Iterator"}, {"sha": "756e6e818ad4454ee42494add7f11610d078295d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,37 +1,37 @@\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:14:46\n+  --> $DIR/map_flatten.rs:16:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:15:46\n+  --> $DIR/map_flatten.rs:17:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:16:46\n+  --> $DIR/map_flatten.rs:18:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:17:46\n+  --> $DIR/map_flatten.rs:19:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:20:46\n+  --> $DIR/map_flatten.rs:22:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on an `Option`\n-  --> $DIR/map_flatten.rs:23:39\n+  --> $DIR/map_flatten.rs:25:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`"}, {"sha": "513d930e0568758783426279201dfa1bbfe9d8b7", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -133,50 +133,6 @@ fn filter_next() {\n     let _ = foo.filter().next();\n }\n \n-/// Checks implementation of `SEARCH_IS_SOME` lint.\n-#[rustfmt::skip]\n-fn search_is_some() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n-\n-    // Check `find().is_some()`, single-line case.\n-    let _ = v.iter().find(|&x| *x < 0).is_some();\n-    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-    let _ = (0..1).find(|x| *x == 0).is_some();\n-    let _ = v.iter().find(|x| **x == 0).is_some();\n-\n-    // Check `find().is_some()`, multi-line case.\n-    let _ = v.iter().find(|&x| {\n-                              *x < 0\n-                          }\n-                   ).is_some();\n-\n-    // Check `position().is_some()`, single-line case.\n-    let _ = v.iter().position(|&x| x < 0).is_some();\n-\n-    // Check `position().is_some()`, multi-line case.\n-    let _ = v.iter().position(|&x| {\n-                                  x < 0\n-                              }\n-                   ).is_some();\n-\n-    // Check `rposition().is_some()`, single-line case.\n-    let _ = v.iter().rposition(|&x| x < 0).is_some();\n-\n-    // Check `rposition().is_some()`, multi-line case.\n-    let _ = v.iter().rposition(|&x| {\n-                                   x < 0\n-                               }\n-                   ).is_some();\n-\n-    // Check that we don't lint if the caller is not an `Iterator`.\n-    let foo = IteratorFalsePositives { foo: 0 };\n-    let _ = foo.find().is_some();\n-    let _ = foo.position().is_some();\n-    let _ = foo.rposition().is_some();\n-}\n-\n fn main() {\n     filter_next();\n-    search_is_some();\n }"}, {"sha": "33aba630a5304e22de80e7badd67c1b460c32653", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -20,73 +20,5 @@ LL | |                    ).next();\n    |\n    = note: `-D clippy::filter-next` implied by `-D warnings`\n \n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:143:22\n-   |\n-LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n-   |\n-   = note: `-D clippy::search-is-some` implied by `-D warnings`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:144:20\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:145:20\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:146:22\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:149:13\n-   |\n-LL |       let _ = v.iter().find(|&x| {\n-   |  _____________^\n-LL | |                               *x < 0\n-LL | |                           }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:155:22\n-   |\n-LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:158:13\n-   |\n-LL |       let _ = v.iter().position(|&x| {\n-   |  _____________^\n-LL | |                                   x < 0\n-LL | |                               }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:164:22\n-   |\n-LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:167:13\n-   |\n-LL |       let _ = v.iter().rposition(|&x| {\n-   |  _____________^\n-LL | |                                    x < 0\n-LL | |                                }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "44972c8c63964c71e9678d54a49256f34ef54cb4", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "7d29445e66c8b97b8730f096f45db5eb3a321255", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "b6f834f686f9f34cf68ef9f27dc131a226664ee6", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "8abdbcafb6e935ed9ae422fc893e801f27363723", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,135 +9,135 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:40:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:41:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:42:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:43:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:48:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:50:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:57:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:59:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:66:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:67:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:68:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:75:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:77:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:78:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:80:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:81:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:82:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:83:5\n    |\n LL |     option().map(do_nothing);}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^-"}, {"sha": "6859ba8e5bb8f08abf23ef45101217cd6ee9ec23", "filename": "tests/ui/option_option.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::option_option)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn input(_: Option<Option<u8>>) {}\n \n@@ -72,8 +73,6 @@ mod issue_4298 {\n         #[serde(skip_serializing_if = \"Option::is_none\")]\n         #[serde(default)]\n         #[serde(borrow)]\n-        // FIXME: should not lint here\n-        #[allow(clippy::option_option)]\n         foo: Option<Option<Cow<'a, str>>>,\n     }\n "}, {"sha": "ad7f081c71392ff9157f80580d1f62a824319b7c", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:3:13\n+  --> $DIR/option_option.rs:4:13\n    |\n LL | fn input(_: Option<Option<u8>>) {}\n    |             ^^^^^^^^^^^^^^^^^^\n@@ -11,55 +11,55 @@ LL | #![deny(clippy::option_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:5:16\n+  --> $DIR/option_option.rs:6:16\n    |\n LL | fn output() -> Option<Option<u8>> {\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:9:27\n+  --> $DIR/option_option.rs:10:27\n    |\n LL | fn output_nested() -> Vec<Option<Option<u8>>> {\n    |                           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:14:30\n+  --> $DIR/option_option.rs:15:30\n    |\n LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:19:8\n+  --> $DIR/option_option.rs:20:8\n    |\n LL |     x: Option<Option<u8>>,\n    |        ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:23:23\n+  --> $DIR/option_option.rs:24:23\n    |\n LL |     fn struct_fn() -> Option<Option<u8>> {\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:29:22\n+  --> $DIR/option_option.rs:30:22\n    |\n LL |     fn trait_fn() -> Option<Option<u8>>;\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:33:11\n+  --> $DIR/option_option.rs:34:11\n    |\n LL |     Tuple(Option<Option<u8>>),\n    |           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:34:17\n+  --> $DIR/option_option.rs:35:17\n    |\n LL |     Struct { x: Option<Option<u8>> },\n    |                 ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:77:14\n+  --> $DIR/option_option.rs:76:14\n    |\n LL |         foo: Option<Option<Cow<'a, str>>>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2a63318c8c7a8bc7c8f1aa4c34e2ec1cfc943cb5", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n@@ -70,6 +71,15 @@ fn or_fun_call() {\n     let opt = Some(1);\n     let hello = \"Hello\";\n     let _ = opt.ok_or(format!(\"{} world.\", hello));\n+\n+    // index\n+    let map = HashMap::<u64, u64>::new();\n+    let _ = Some(1).unwrap_or_else(|| map[&1]);\n+    let map = BTreeMap::<u64, u64>::new();\n+    let _ = Some(1).unwrap_or_else(|| map[&1]);\n+    // don't lint index vec\n+    let vec = vec![1];\n+    let _ = Some(1).unwrap_or(vec[1]);\n }\n \n struct Foo(u8);"}, {"sha": "026ef437caa1ad29f74d8f2ee7931665a28adab5", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n@@ -70,6 +71,15 @@ fn or_fun_call() {\n     let opt = Some(1);\n     let hello = \"Hello\";\n     let _ = opt.ok_or(format!(\"{} world.\", hello));\n+\n+    // index\n+    let map = HashMap::<u64, u64>::new();\n+    let _ = Some(1).unwrap_or(map[&1]);\n+    let map = BTreeMap::<u64, u64>::new();\n+    let _ = Some(1).unwrap_or(map[&1]);\n+    // don't lint index vec\n+    let vec = vec![1];\n+    let _ = Some(1).unwrap_or(vec[1]);\n }\n \n struct Foo(u8);"}, {"sha": "fb8bf339828f4ff4e87f4442e2fbf2de42f5be85", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,94 +1,106 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:32:19\n+  --> $DIR/or_fun_call.rs:33:19\n    |\n LL |     with_const_fn.unwrap_or(Duration::from_secs(5));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Duration::from_secs(5))`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:35:22\n+  --> $DIR/or_fun_call.rs:36:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:38:5\n+  --> $DIR/or_fun_call.rs:39:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:41:21\n+  --> $DIR/or_fun_call.rs:42:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:44:14\n+  --> $DIR/or_fun_call.rs:45:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:47:19\n+  --> $DIR/or_fun_call.rs:48:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:50:5\n+  --> $DIR/or_fun_call.rs:51:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:53:5\n+  --> $DIR/or_fun_call.rs:54:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:56:5\n+  --> $DIR/or_fun_call.rs:57:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:59:21\n+  --> $DIR/or_fun_call.rs:60:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:19\n+  --> $DIR/or_fun_call.rs:63:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:65:21\n+  --> $DIR/or_fun_call.rs:66:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:68:21\n+  --> $DIR/or_fun_call.rs:69:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:77:21\n+   |\n+LL |     let _ = Some(1).unwrap_or(map[&1]);\n+   |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:79:21\n+   |\n+LL |     let _ = Some(1).unwrap_or(map[&1]);\n+   |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n+\n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:93:35\n+  --> $DIR/or_fun_call.rs:103:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:97:10\n+  --> $DIR/or_fun_call.rs:107:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "3d3c19a1be5199e70c2a08f6c439aaca2e8a9645", "filename": "tests/ui/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wraps)]\n \n struct A;\n "}, {"sha": "ca73ac5a4111405c946c7dc8f6a422917cae48da", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:6:5\n+  --> $DIR/panic_in_result_fn.rs:7:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -10,14 +10,14 @@ LL | |     }\n    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:8:9\n+  --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:11:5\n+  --> $DIR/panic_in_result_fn.rs:12:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -27,14 +27,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:13:9\n+  --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:16:5\n+  --> $DIR/panic_in_result_fn.rs:17:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -44,14 +44,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:18:9\n+  --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:21:5\n+  --> $DIR/panic_in_result_fn.rs:22:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -61,14 +61,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:23:9\n+  --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:52:1\n+  --> $DIR/panic_in_result_fn.rs:53:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n LL | | {\n@@ -78,14 +78,14 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:54:5\n+  --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:67:1\n+  --> $DIR/panic_in_result_fn.rs:68:1\n    |\n LL | / fn main() -> Result<(), String> {\n LL | |     todo!(\"finish main method\");\n@@ -95,7 +95,7 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:68:5\n+  --> $DIR/panic_in_result_fn.rs:69:5\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0b5746cb52270ed7e59d4126b7664151d1d39e95", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n     a?;"}, {"sha": "0f0825c9334679d185e9bc711dc86f05df0466d8", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n     if a.is_none() {"}, {"sha": "6f330cfa385dddeaab2c9473fb9c684f381aea27", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:5:5\n+  --> $DIR/question_mark.rs:6:5\n    |\n LL | /     if a.is_none() {\n LL | |         return None;\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:50:9\n+  --> $DIR/question_mark.rs:51:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:54:9\n+  --> $DIR/question_mark.rs:55:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:58:17\n+  --> $DIR/question_mark.rs:59:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -36,7 +36,7 @@ LL | |         };\n    | |_________^ help: replace it with: `Some(self.opt?)`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:64:17\n+  --> $DIR/question_mark.rs:65:17\n    |\n LL |           let _ = if let Some(x) = self.opt {\n    |  _________________^\n@@ -47,31 +47,31 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:81:9\n+  --> $DIR/question_mark.rs:82:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:89:9\n+  --> $DIR/question_mark.rs:90:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:97:9\n+  --> $DIR/question_mark.rs:98:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:104:26\n+  --> $DIR/question_mark.rs:105:26\n    |\n LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {\n    |  __________________________^\n@@ -82,7 +82,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt.as_ref()?`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:114:17\n+  --> $DIR/question_mark.rs:115:17\n    |\n LL |           let v = if let Some(v) = self.opt {\n    |  _________________^\n@@ -93,7 +93,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:129:5\n+  --> $DIR/question_mark.rs:130:5\n    |\n LL | /     if f().is_none() {\n LL | |         return None;"}, {"sha": "048874a7f8294a5d0af9c3365f29572dd38d07f6", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -38,4 +38,9 @@ fn main() {\n     x >= 8 || x >= 12;\n     x < 12 || 12 < x;\n     x >= 8 || x <= 12;\n+\n+    // Fix #6315\n+    let y = 3.;\n+    (0. ..1.).contains(&y);\n+    !(0. ..=1.).contains(&y);\n }"}, {"sha": "60ad259f404d8201ad16c86923c76442f38696fa", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -38,4 +38,9 @@ fn main() {\n     x >= 8 || x >= 12;\n     x < 12 || 12 < x;\n     x >= 8 || x <= 12;\n+\n+    // Fix #6315\n+    let y = 3.;\n+    y >= 0. && y < 1.;\n+    y < 0. || y > 1.;\n }"}, {"sha": "bc79f1bca846394bfbcfd50baa39b58cec0dbe53", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -72,5 +72,17 @@ error: manual `!RangeInclusive::contains` implementation\n LL |     999 < x || 1 > x;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(1..=999).contains(&x)`\n \n-error: aborting due to 12 previous errors\n+error: manual `Range::contains` implementation\n+  --> $DIR/range_contains.rs:44:5\n+   |\n+LL |     y >= 0. && y < 1.;\n+   |     ^^^^^^^^^^^^^^^^^ help: use: `(0. ..1.).contains(&y)`\n+\n+error: manual `!RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:45:5\n+   |\n+LL |     y < 0. || y > 1.;\n+   |     ^^^^^^^^^^^^^^^^ help: use: `!(0. ..=1.).contains(&y)`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "aa20512296aa1e6c025996d56958ee8b6eff96de", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -7,6 +7,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::unnecessary_wraps,\n     deprecated\n )]\n "}, {"sha": "d76f9c288ffdbfe5608caf10d98e87810ed99d10", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -7,6 +7,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::unnecessary_wraps,\n     deprecated\n )]\n "}, {"sha": "aeb309f5ba12a5f474951bd60577f51929f6e3bf", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,37 +1,37 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:15:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Ok(_) = &result {}\n    |     -------^^^^^---------- help: try this: `if result.is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:17:12\n+  --> $DIR/redundant_pattern_matching.rs:18:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:19:12\n+  --> $DIR/redundant_pattern_matching.rs:20:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:21:15\n+  --> $DIR/redundant_pattern_matching.rs:22:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:23:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:33:5\n+  --> $DIR/redundant_pattern_matching.rs:34:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -40,7 +40,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:38:5\n+  --> $DIR/redundant_pattern_matching.rs:39:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -49,7 +49,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:43:5\n+  --> $DIR/redundant_pattern_matching.rs:44:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -58,7 +58,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:48:5\n+  --> $DIR/redundant_pattern_matching.rs:49:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -67,73 +67,73 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:53:20\n+  --> $DIR/redundant_pattern_matching.rs:54:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:59:20\n+  --> $DIR/redundant_pattern_matching.rs:60:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:61:19\n+  --> $DIR/redundant_pattern_matching.rs:62:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:84:19\n+  --> $DIR/redundant_pattern_matching.rs:85:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:85:16\n+  --> $DIR/redundant_pattern_matching.rs:86:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:91:12\n+  --> $DIR/redundant_pattern_matching.rs:92:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:15\n+  --> $DIR/redundant_pattern_matching.rs:93:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:110:12\n+  --> $DIR/redundant_pattern_matching.rs:111:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:112:12\n+  --> $DIR/redundant_pattern_matching.rs:113:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:114:15\n+  --> $DIR/redundant_pattern_matching.rs:115:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:116:15\n+  --> $DIR/redundant_pattern_matching.rs:117:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:118:5\n+  --> $DIR/redundant_pattern_matching.rs:119:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,7 +142,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:123:5\n+  --> $DIR/redundant_pattern_matching.rs:124:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,"}, {"sha": "5e57c752b5a034fbe5d2a80588938068a54b384e", "filename": "tests/ui/result_unit_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fresult_unit_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fresult_unit_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,3 +1,4 @@\n+#![allow(clippy::unnecessary_wraps)]\n #[warn(clippy::result_unit_err)]\n #[allow(unused)]\n "}, {"sha": "12901b354f9169d76fdf184a1e27934b6a38d011", "filename": "tests/ui/result_unit_error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fresult_unit_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fresult_unit_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_unit_error.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:4:1\n+  --> $DIR/result_unit_error.rs:5:1\n    |\n LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,23 +8,23 @@ LL | pub fn returns_unit_error() -> Result<u32, ()> {\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:13:5\n+  --> $DIR/result_unit_error.rs:14:5\n    |\n LL |     fn get_that_error(&self) -> Result<bool, ()>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:15:5\n+  --> $DIR/result_unit_error.rs:16:5\n    |\n LL |     fn get_this_one_too(&self) -> Result<bool, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use a custom Error type instead\n \n error: this returns a `Result<_, ()>\n-  --> $DIR/result_unit_error.rs:33:5\n+  --> $DIR/result_unit_error.rs:34:5\n    |\n LL |     pub fn unit_error(&self) -> Result<usize, ()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f0dc3b3d06bbc7f4f30d4c32e51e0d9dd2a968af", "filename": "tests/ui/search_is_some.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,38 @@\n+// aux-build:option_helpers.rs\n+extern crate option_helpers;\n+use option_helpers::IteratorFalsePositives;\n+\n+#[warn(clippy::search_is_some)]\n+#[rustfmt::skip]\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+\n+    // Check `find().is_some()`, multi-line case.\n+    let _ = v.iter().find(|&x| {\n+                              *x < 0\n+                          }\n+                   ).is_some();\n+\n+    // Check `position().is_some()`, multi-line case.\n+    let _ = v.iter().position(|&x| {\n+                                  x < 0\n+                              }\n+                   ).is_some();\n+\n+    // Check `rposition().is_some()`, multi-line case.\n+    let _ = v.iter().rposition(|&x| {\n+                                   x < 0\n+                               }\n+                   ).is_some();\n+\n+    // Check that we don't lint if the caller is not an `Iterator` or string\n+    let falsepos = IteratorFalsePositives { foo: 0 };\n+    let _ = falsepos.find().is_some();\n+    let _ = falsepos.position().is_some();\n+    let _ = falsepos.rposition().is_some();\n+    // check that we don't lint if `find()` is called with\n+    // `Pattern` that is not a string\n+    let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_some();\n+}"}, {"sha": "c601f568c609bccf4cf3d7b9c60ac5f3823da45a", "filename": "tests/ui/search_is_some.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,39 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:13:13\n+   |\n+LL |       let _ = v.iter().find(|&x| {\n+   |  _____________^\n+LL | |                               *x < 0\n+LL | |                           }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `any()`\n+\n+error: called `is_some()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some.rs:19:13\n+   |\n+LL |       let _ = v.iter().position(|&x| {\n+   |  _____________^\n+LL | |                                   x < 0\n+LL | |                               }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()`\n+\n+error: called `is_some()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some.rs:25:13\n+   |\n+LL |       let _ = v.iter().rposition(|&x| {\n+   |  _____________^\n+LL | |                                    x < 0\n+LL | |                                }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "dc3f290e56246d14890ae48db869f6de311c4b1b", "filename": "tests/ui/search_is_some_fixable.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().any(|x| *x < 0);\n+    let _ = (0..1).any(|x| **y == x); // one dereference less\n+    let _ = (0..1).any(|x| x == 0);\n+    let _ = v.iter().any(|x| *x == 0);\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".contains(\"world\");\n+    let _ = \"hello world\".contains(&s2);\n+    let _ = \"hello world\".contains(&s2[2..]);\n+    // caller of `find()` is a `String`\n+    let _ = s1.contains(\"world\");\n+    let _ = s1.contains(&s2);\n+    let _ = s1.contains(&s2[2..]);\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].contains(\"world\");\n+    let _ = s1[2..].contains(&s2);\n+    let _ = s1[2..].contains(&s2[2..]);\n+}"}, {"sha": "146cf5adf1b0f97fc0e7d6536416c0192d06733f", "filename": "tests/ui/search_is_some_fixable.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_some();\n+    let _ = v.iter().find(|x| **x == 0).is_some();\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".find(\"world\").is_some();\n+    let _ = \"hello world\".find(&s2).is_some();\n+    let _ = \"hello world\".find(&s2[2..]).is_some();\n+    // caller of `find()` is a `String`\n+    let _ = s1.find(\"world\").is_some();\n+    let _ = s1.find(&s2).is_some();\n+    let _ = s1.find(&s2[2..]).is_some();\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].find(\"world\").is_some();\n+    let _ = s1[2..].find(&s2).is_some();\n+    let _ = s1[2..].find(&s2[2..]).is_some();\n+}"}, {"sha": "23c1d9a901b97da68cdbd6636f55a73c99ff069e", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,94 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:10:22\n+   |\n+LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x < 0)`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:11:20\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| **y == x)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:12:20\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:13:22\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some_fixable.rs:16:22\n+   |\n+LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some_fixable.rs:19:22\n+   |\n+LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:24:27\n+   |\n+LL |     let _ = \"hello world\".find(\"world\").is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:25:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:26:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:28:16\n+   |\n+LL |     let _ = s1.find(\"world\").is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:29:16\n+   |\n+LL |     let _ = s1.find(&s2).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:30:16\n+   |\n+LL |     let _ = s1.find(&s2[2..]).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:32:21\n+   |\n+LL |     let _ = s1[2..].find(\"world\").is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:33:21\n+   |\n+LL |     let _ = s1[2..].find(&s2).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:34:21\n+   |\n+LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "6e665cdd5630243264972ad317b061689176d3dd", "filename": "tests/ui/string_from_utf8_as_bytes.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fstring_from_utf8_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fstring_from_utf8_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_from_utf8_as_bytes.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![warn(clippy::string_from_utf8_as_bytes)]\n+\n+fn main() {\n+    let _ = Some(&\"Hello World!\"[6..11]);\n+}"}, {"sha": "670d206d3679c17cf6fded4040e49e83b2b2f736", "filename": "tests/ui/string_from_utf8_as_bytes.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fstring_from_utf8_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fstring_from_utf8_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_from_utf8_as_bytes.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![warn(clippy::string_from_utf8_as_bytes)]\n+\n+fn main() {\n+    let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]);\n+}"}, {"sha": "bf5e5d33e8f9ab287f124f7ecb083c92dc327eb0", "filename": "tests/ui/string_from_utf8_as_bytes.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fstring_from_utf8_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fstring_from_utf8_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_from_utf8_as_bytes.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,10 @@\n+error: calling a slice of `as_bytes()` with `from_utf8` should be not necessary\n+  --> $DIR/string_from_utf8_as_bytes.rs:5:13\n+   |\n+LL |     let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(&\"Hello World!\"[6..11])`\n+   |\n+   = note: `-D clippy::string-from-utf8-as-bytes` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "652b611208b7376140f062e1a9c93d2be54d89b2", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![deny(clippy::try_err)]\n+#![allow(clippy::unnecessary_wraps)]\n \n #[macro_use]\n extern crate macro_rules;\n@@ -78,12 +79,46 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n+// Bad suggestion when in macro (see #6242)\n+macro_rules! try_validation {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => return Err(1),\n+        }\n+    }};\n+}\n+\n+macro_rules! ret_one {\n+    () => {\n+        1\n+    };\n+}\n+\n+macro_rules! try_validation_in_macro {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => return Err(ret_one!()),\n+        }\n+    }};\n+}\n+\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    try_validation!(Ok::<_, i32>(5));\n+    // `Err` arg is another macro\n+    try_validation_in_macro!(Ok::<_, i32>(5));\n+    Ok(5)\n+}\n+\n fn main() {\n     basic_test().unwrap();\n     into_test().unwrap();\n     negative_test().unwrap();\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n+    calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n     try_err!();"}, {"sha": "6bd479657b70bb1041a91663b9e8357bfbeb9b36", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![deny(clippy::try_err)]\n+#![allow(clippy::unnecessary_wraps)]\n \n #[macro_use]\n extern crate macro_rules;\n@@ -78,12 +79,46 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n+// Bad suggestion when in macro (see #6242)\n+macro_rules! try_validation {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => Err(1)?,\n+        }\n+    }};\n+}\n+\n+macro_rules! ret_one {\n+    () => {\n+        1\n+    };\n+}\n+\n+macro_rules! try_validation_in_macro {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => Err(ret_one!())?,\n+        }\n+    }};\n+}\n+\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    try_validation!(Ok::<_, i32>(5));\n+    // `Err` arg is another macro\n+    try_validation_in_macro!(Ok::<_, i32>(5));\n+    Ok(5)\n+}\n+\n fn main() {\n     basic_test().unwrap();\n     into_test().unwrap();\n     negative_test().unwrap();\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n+    calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n     try_err!();"}, {"sha": "2c01d37192e8e296439258134367a1c37a5c6c63", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:18:9\n+  --> $DIR/try_err.rs:19:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err)`\n@@ -11,46 +11,68 @@ LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:28:9\n+  --> $DIR/try_err.rs:29:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:48:17\n+  --> $DIR/try_err.rs:49:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err)`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:67:17\n+  --> $DIR/try_err.rs:68:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:106:9\n+  --> $DIR/try_err.rs:87:23\n+   |\n+LL |             Err(_) => Err(1)?,\n+   |                       ^^^^^^^ help: try this: `return Err(1)`\n+...\n+LL |     try_validation!(Ok::<_, i32>(5));\n+   |     --------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:102:23\n+   |\n+LL |             Err(_) => Err(ret_one!())?,\n+   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n+...\n+LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n+   |     ------------------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:141:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:113:9\n+  --> $DIR/try_err.rs:148:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:115:9\n+  --> $DIR/try_err.rs:150:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:123:9\n+  --> $DIR/try_err.rs:158:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "9ad16d365094e73b165124cc68b35fe28c7172a1", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -4,6 +4,7 @@\n     unused_must_use,\n     unused_variables,\n     clippy::unused_unit,\n+    clippy::unnecessary_wraps,\n     clippy::or_fun_call\n )]\n "}, {"sha": "c3a839a9bf8120fcefe07023da88df1948f89ff8", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:29:5\n+  --> $DIR/unit_arg.rs:30:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -20,7 +20,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:32:5\n+  --> $DIR/unit_arg.rs:33:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:33:5\n+  --> $DIR/unit_arg.rs:34:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -54,7 +54,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:38:5\n+  --> $DIR/unit_arg.rs:39:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,7 +74,7 @@ LL |     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:41:5\n+  --> $DIR/unit_arg.rs:42:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -87,7 +87,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:42:5\n+  --> $DIR/unit_arg.rs:43:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -110,7 +110,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:46:5\n+  --> $DIR/unit_arg.rs:47:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -140,7 +140,7 @@ LL |         foo(2);\n  ...\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:57:13\n+  --> $DIR/unit_arg.rs:58:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:60:5\n+  --> $DIR/unit_arg.rs:61:5\n    |\n LL |     foo(foo(()))\n    |     ^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ LL |     foo(())\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:93:5\n+  --> $DIR/unit_arg.rs:94:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^"}, {"sha": "e8f2fb46665924848e113fa3a5ee4b2859714c0a", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -20,4 +20,7 @@ fn main() {\n     foo!(a, i32);\n     foo!(b, f32);\n     foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n }"}, {"sha": "6770a7fac90fdc6343092d5e05a02e750d4a0019", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,7 +1,7 @@\n // does not test any rustfixable lints\n \n #![warn(clippy::clone_on_ref_ptr)]\n-#![allow(unused, clippy::redundant_clone)]\n+#![allow(unused, clippy::redundant_clone, clippy::unnecessary_wraps)]\n \n use std::cell::RefCell;\n use std::rc::{self, Rc};"}, {"sha": "2e923bc97a2ef9036bc6309f24a1fe85437e70e2", "filename": "tests/ui/unnecessary_lazy_eval_unfixable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,18 @@\n+#![warn(clippy::unnecessary_lazy_evaluations)]\n+\n+struct Deep(Option<usize>);\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct {\n+    some_field: usize,\n+}\n+\n+fn main() {\n+    // fix will break type inference\n+    let _ = Ok(1).unwrap_or_else(|()| 2);\n+    mod e {\n+        pub struct E;\n+    }\n+    let _ = Ok(1).unwrap_or_else(|e::E| 2);\n+    let _ = Ok(1).unwrap_or_else(|SomeStruct { .. }| 2);\n+}"}, {"sha": "581d641cbf54bae9401667832921742285982ff7", "filename": "tests/ui/unnecessary_lazy_eval_unfixable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,22 @@\n+error: unnecessary closure used to substitute value for `Result::Err`\n+  --> $DIR/unnecessary_lazy_eval_unfixable.rs:12:13\n+   |\n+LL |     let _ = Ok(1).unwrap_or_else(|()| 2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |\n+   = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n+\n+error: unnecessary closure used to substitute value for `Result::Err`\n+  --> $DIR/unnecessary_lazy_eval_unfixable.rs:16:13\n+   |\n+LL |     let _ = Ok(1).unwrap_or_else(|e::E| 2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+\n+error: unnecessary closure used to substitute value for `Result::Err`\n+  --> $DIR/unnecessary_lazy_eval_unfixable.rs:17:13\n+   |\n+LL |     let _ = Ok(1).unwrap_or_else(|SomeStruct { .. }| 2);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a53dec8f91ac50acae35e3d5c02ec13a501e8456", "filename": "tests/ui/unnecessary_wraps.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,116 @@\n+#![warn(clippy::unnecessary_wraps)]\n+#![allow(clippy::no_effect)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::if_same_then_else)]\n+#![allow(dead_code)]\n+\n+// should be linted\n+fn func1(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(42);\n+    }\n+    if a {\n+        Some(-1);\n+        Some(2)\n+    } else {\n+        return Some(1337);\n+    }\n+}\n+\n+// should be linted\n+fn func2(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(10);\n+    }\n+    if a {\n+        Some(20)\n+    } else {\n+        Some(30)\n+    }\n+}\n+\n+// public fns should not be linted\n+pub fn func3(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        Some(1)\n+    }\n+}\n+\n+// should not be linted\n+fn func4(a: bool) -> Option<i32> {\n+    if a {\n+        Some(1)\n+    } else {\n+        None\n+    }\n+}\n+\n+// should be linted\n+fn func5() -> Option<i32> {\n+    Some(1)\n+}\n+\n+// should not be linted\n+fn func6() -> Option<i32> {\n+    None\n+}\n+\n+// should be linted\n+fn func7() -> Result<i32, ()> {\n+    Ok(1)\n+}\n+\n+// should not be linted\n+fn func8(a: bool) -> Result<i32, ()> {\n+    if a {\n+        Ok(1)\n+    } else {\n+        Err(())\n+    }\n+}\n+\n+// should not be linted\n+fn func9(a: bool) -> Result<i32, ()> {\n+    Err(())\n+}\n+\n+// should not be linted\n+fn func10() -> Option<()> {\n+    unimplemented!()\n+}\n+\n+struct A;\n+\n+impl A {\n+    // should not be linted\n+    pub fn func11() -> Option<i32> {\n+        Some(1)\n+    }\n+\n+    // should be linted\n+    fn func12() -> Option<i32> {\n+        Some(1)\n+    }\n+}\n+\n+trait B {\n+    // trait impls are not linted\n+    fn func13() -> Option<i32> {\n+        Some(1)\n+    }\n+}\n+\n+impl B for A {\n+    // trait impls are not linted\n+    fn func13() -> Option<i32> {\n+        Some(0)\n+    }\n+}\n+\n+fn main() {\n+    // method calls are not linted\n+    func1(true, true);\n+    func2(true, true);\n+}"}, {"sha": "410f054b8efcaf8c85536471e4bd08eaa5233701", "filename": "tests/ui/unnecessary_wraps.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_wraps.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Funnecessary_wraps.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -0,0 +1,106 @@\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:8:1\n+   |\n+LL | / fn func1(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(42);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::unnecessary-wraps` implied by `-D warnings`\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func1(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 42;\n+LL |     }\n+LL |     if a {\n+LL |         Some(-1);\n+LL |         2\n+LL |     } else {\n+ ...\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:21:1\n+   |\n+LL | / fn func2(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(10);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func2(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 10;\n+LL |     }\n+LL |     if a {\n+LL |         20\n+LL |     } else {\n+LL |         30\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:51:1\n+   |\n+LL | / fn func5() -> Option<i32> {\n+LL | |     Some(1)\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func5() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |     1\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Result`\n+  --> $DIR/unnecessary_wraps.rs:61:1\n+   |\n+LL | / fn func7() -> Result<i32, ()> {\n+LL | |     Ok(1)\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Result` from the return type...\n+   |\n+LL | fn func7() -> i32 {\n+   |               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |     1\n+   |\n+\n+error: this function's return value is unnecessarily wrapped by `Option`\n+  --> $DIR/unnecessary_wraps.rs:93:5\n+   |\n+LL | /     fn func12() -> Option<i32> {\n+LL | |         Some(1)\n+LL | |     }\n+   | |_____^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL |     fn func12() -> i32 {\n+   |                    ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         1\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "03977de9455ebb34a380a4b1b591a46c105576bb", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(clippy::useless_conversion)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = val;"}, {"sha": "f6e094c16616c438b98e13bb5f93427ff850038d", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(clippy::useless_conversion)]\n+#![allow(clippy::unnecessary_wraps)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::from(val);"}, {"sha": "26a33595031bd9455e54317395bf978e55ee7b1f", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,5 +1,5 @@\n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion.rs:6:13\n+  --> $DIR/useless_conversion.rs:7:13\n    |\n LL |     let _ = T::from(val);\n    |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n@@ -11,61 +11,61 @@ LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion.rs:7:5\n+  --> $DIR/useless_conversion.rs:8:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:19:22\n+  --> $DIR/useless_conversion.rs:20:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:60:21\n+  --> $DIR/useless_conversion.rs:61:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:61:21\n+  --> $DIR/useless_conversion.rs:62:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:62:13\n+  --> $DIR/useless_conversion.rs:63:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:63:13\n+  --> $DIR/useless_conversion.rs:64:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines`\n-  --> $DIR/useless_conversion.rs:64:13\n+  --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:65:13\n+  --> $DIR/useless_conversion.rs:66:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:66:21\n+  --> $DIR/useless_conversion.rs:67:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:71:13\n+  --> $DIR/useless_conversion.rs:72:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`"}, {"sha": "4fa28b525c3c29f93694c2c89b538bef630774cd", "filename": "tests/ui/vec_box_sized.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fvec_box_sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fvec_box_sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -35,4 +35,18 @@ mod should_not_trigger {\n     }\n }\n \n+mod inner_mod {\n+    mod inner {\n+        pub struct S;\n+    }\n+\n+    mod inner2 {\n+        use super::inner::S;\n+\n+        pub fn f() -> Vec<S> {\n+            vec![]\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "7dc735cd90be7d43f2343d8dfb605edca3e53c5d", "filename": "tests/ui/vec_box_sized.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fvec_box_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fvec_box_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -35,4 +35,18 @@ mod should_not_trigger {\n     }\n }\n \n+mod inner_mod {\n+    mod inner {\n+        pub struct S;\n+    }\n+\n+    mod inner2 {\n+        use super::inner::S;\n+\n+        pub fn f() -> Vec<Box<S>> {\n+            vec![]\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "57e2f1fdf9a7449407850a5a25f48d01b97de3f8", "filename": "tests/ui/vec_box_sized.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -18,5 +18,11 @@ error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n LL |     struct B(Vec<Vec<Box<(u32)>>>);\n    |                  ^^^^^^^^^^^^^^^ help: try: `Vec<u32>`\n \n-error: aborting due to 3 previous errors\n+error: `Vec<T>` is already on the heap, the boxing is unnecessary.\n+  --> $DIR/vec_box_sized.rs:46:23\n+   |\n+LL |         pub fn f() -> Vec<Box<S>> {\n+   |                       ^^^^^^^^^^^ help: try: `Vec<S>`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "ee9c9045fff55940b42177b9eecef25bebe2b780", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::wildcard_imports)]\n //#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n #![warn(unused_imports)]\n \n extern crate wildcard_imports_helper;"}, {"sha": "efaa8f9ef664186b0ba5e70a6d9cd4143bb31460", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::wildcard_imports)]\n //#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wraps)]\n #![warn(unused_imports)]\n \n extern crate wildcard_imports_helper;"}, {"sha": "66267dd27b84fcf4da55e265ed164709a6e6647e", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/209ab1885cd5f9de718f815acf1afb034bce0b4e/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=209ab1885cd5f9de718f815acf1afb034bce0b4e", "patch": "@@ -1,123 +1,123 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:11:5\n+  --> $DIR/wildcard_imports.rs:12:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:12:5\n+  --> $DIR/wildcard_imports.rs:13:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:13:5\n+  --> $DIR/wildcard_imports.rs:14:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:15:5\n+  --> $DIR/wildcard_imports.rs:16:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:19:5\n+  --> $DIR/wildcard_imports.rs:20:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:20:5\n+  --> $DIR/wildcard_imports.rs:21:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:91:13\n+  --> $DIR/wildcard_imports.rs:92:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:97:75\n+  --> $DIR/wildcard_imports.rs:98:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:98:13\n+  --> $DIR/wildcard_imports.rs:99:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:109:20\n+  --> $DIR/wildcard_imports.rs:110:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:109:30\n+  --> $DIR/wildcard_imports.rs:110:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:116:13\n+  --> $DIR/wildcard_imports.rs:117:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:145:9\n+  --> $DIR/wildcard_imports.rs:146:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:154:9\n+  --> $DIR/wildcard_imports.rs:155:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:155:9\n+  --> $DIR/wildcard_imports.rs:156:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:166:13\n+  --> $DIR/wildcard_imports.rs:167:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:201:17\n+  --> $DIR/wildcard_imports.rs:202:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:209:13\n+  --> $DIR/wildcard_imports.rs:210:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:218:17\n+  --> $DIR/wildcard_imports.rs:219:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:227:13\n+  --> $DIR/wildcard_imports.rs:228:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5fddb6747dae0e01392e1cd47baba9e0587c8e7/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/e5fddb6747dae0e01392e1cd47baba9e0587c8e7/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=e5fddb6747dae0e01392e1cd47baba9e0587c8e7", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}