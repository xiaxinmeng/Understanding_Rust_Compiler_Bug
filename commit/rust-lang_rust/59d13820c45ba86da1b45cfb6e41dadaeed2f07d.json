{"sha": "59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDEzODIwYzQ1YmE4NmRhMWI0NWNmYjZlNDFkYWRhZWVkMmYwN2Q=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-11-24T18:14:46Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-11-24T18:39:26Z"}, "message": "rustdoc: Render Sized? on traits and generics\n\nBoth `trait Foo for Sized?` and `<Sized? T>` are handled correctly.\n\nFix #18515", "tree": {"sha": "60cb0d1bc574fca8c374bfbd40b0be09eee3cbb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60cb0d1bc574fca8c374bfbd40b0be09eee3cbb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "html_url": "https://github.com/rust-lang/rust/commit/59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de94f0affb6e8f700ce1e9c67a9572c9f262a5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/de94f0affb6e8f700ce1e9c67a9572c9f262a5fa", "html_url": "https://github.com/rust-lang/rust/commit/de94f0affb6e8f700ce1e9c67a9572c9f262a5fa"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "c671e8dcaf808af21b6b69fb75db26985f044a40", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "patch": "@@ -159,11 +159,12 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n         }\n     });\n     let trait_def = ty::lookup_trait_def(tcx, did);\n-    let bounds = trait_def.bounds.clean(cx);\n+    let (bounds, default_unbound) = trait_def.bounds.clean(cx);\n     clean::Trait {\n         generics: (&def.generics, subst::TypeSpace).clean(cx),\n         items: items.collect(),\n         bounds: bounds,\n+        default_unbound: default_unbound\n     }\n }\n "}, {"sha": "db23ec07a84eafa504478e27e5a6edf21b9656b3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "patch": "@@ -464,7 +464,9 @@ pub struct TyParam {\n     pub name: String,\n     pub did: ast::DefId,\n     pub bounds: Vec<TyParamBound>,\n-    pub default: Option<Type>\n+    pub default: Option<Type>,\n+    /// An optional default bound on the parameter which is unbound, like `Sized?`\n+    pub default_unbound: Option<Type>\n }\n \n impl Clean<TyParam> for ast::TyParam {\n@@ -473,7 +475,8 @@ impl Clean<TyParam> for ast::TyParam {\n             name: self.ident.clean(cx),\n             did: ast::DefId { krate: ast::LOCAL_CRATE, node: self.id },\n             bounds: self.bounds.clean(cx),\n-            default: self.default.clean(cx)\n+            default: self.default.clean(cx),\n+            default_unbound: self.unbound.clean(cx)\n         }\n     }\n }\n@@ -482,11 +485,13 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.external_typarams.borrow_mut().as_mut().unwrap()\n           .insert(self.def_id, self.name.clean(cx));\n+        let (bounds, default_unbound) = self.bounds.clean(cx);\n         TyParam {\n             name: self.name.clean(cx),\n             did: self.def_id,\n-            bounds: self.bounds.clean(cx),\n-            default: self.default.clean(cx)\n+            bounds: bounds,\n+            default: self.default.clean(cx),\n+            default_unbound: default_unbound\n         }\n     }\n }\n@@ -588,12 +593,16 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<Vec<TyParamBound>> for ty::ParamBounds<'tcx> {\n-    fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n+// Returns (bounds, default_unbound)\n+impl<'tcx> Clean<(Vec<TyParamBound>, Option<Type>)> for ty::ParamBounds<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> (Vec<TyParamBound>, Option<Type>) {\n         let mut v = Vec::new();\n+        let mut has_sized_bound = false;\n         for b in self.builtin_bounds.iter() {\n             if b != ty::BoundSized {\n                 v.push(b.clean(cx));\n+            } else {\n+                has_sized_bound = true;\n             }\n         }\n         for t in self.trait_bounds.iter() {\n@@ -602,7 +611,15 @@ impl<'tcx> Clean<Vec<TyParamBound>> for ty::ParamBounds<'tcx> {\n         for r in self.region_bounds.iter().filter_map(|r| r.clean(cx)) {\n             v.push(RegionBound(r));\n         }\n-        return v;\n+        if has_sized_bound {\n+            (v, None)\n+        } else {\n+            let ty = match ty::BoundSized.clean(cx) {\n+                TraitBound(ty) => ty,\n+                _ => unreachable!()\n+            };\n+            (v, Some(ty))\n+        }\n     }\n }\n \n@@ -950,6 +967,8 @@ pub struct Trait {\n     pub items: Vec<TraitMethod>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n+    /// An optional default bound not required for `Self`, like `Sized?`\n+    pub default_unbound: Option<Type>\n }\n \n impl Clean<Item> for doctree::Trait {\n@@ -965,6 +984,7 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n+                default_unbound: self.default_unbound.clean(cx)\n             }),\n         }\n     }\n@@ -2258,7 +2278,8 @@ impl Clean<Item> for ty::AssociatedType {\n                     node: ast::DUMMY_NODE_ID\n                 },\n                 bounds: vec![],\n-                default: None\n+                default: None,\n+                default_unbound: None\n             }),\n             visibility: None,\n             def_id: self.def_id,"}, {"sha": "adfd9aa821328868e7fc0419ba0f70407f676418", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "patch": "@@ -177,6 +177,7 @@ pub struct Trait {\n     pub whence: Span,\n     pub vis: ast::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub default_unbound: Option<ast::TraitRef> // FIXME(tomjakubowski)\n }\n \n pub struct Impl {"}, {"sha": "4d127013790028c41af6eae33902f7f354a29ded", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "patch": "@@ -94,6 +94,9 @@ impl fmt::Show for clean::Generics {\n                 if i > 0 {\n                     try!(f.write(\", \".as_bytes()))\n                 }\n+                if let Some(ref unbound) = tp.default_unbound {\n+                    try!(write!(f, \"{}? \", unbound));\n+                };\n                 try!(f.write(tp.name.as_bytes()));\n \n                 if tp.bounds.len() > 0 {"}, {"sha": "3fbb2a8749f903fb7212e2f6f7bc9fd586c193ff", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "patch": "@@ -1670,7 +1670,13 @@ fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n               t: &clean::Trait) -> fmt::Result {\n     let mut bounds = String::new();\n+    if let Some(ref ty) = t.default_unbound {\n+        bounds.push_str(format!(\" for {}?\", ty).as_slice());\n+    }\n     if t.bounds.len() > 0 {\n+        if bounds.len() > 0 {\n+            bounds.push(' ');\n+        }\n         bounds.push_str(\": \");\n         for (i, p) in t.bounds.iter().enumerate() {\n             if i > 0 { bounds.push_str(\" + \"); }"}, {"sha": "b5b34ef6efe6a69dde651b0145991770f62957ca", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d13820c45ba86da1b45cfb6e41dadaeed2f07d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=59d13820c45ba86da1b45cfb6e41dadaeed2f07d", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            ast::ItemTrait(ref gen, _, ref b, ref items) => {\n+            ast::ItemTrait(ref gen, ref def_ub, ref b, ref items) => {\n                 let t = Trait {\n                     name: name,\n                     items: items.clone(),\n@@ -333,6 +333,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n+                    default_unbound: def_ub.clone()\n                 };\n                 om.traits.push(t);\n             },"}]}