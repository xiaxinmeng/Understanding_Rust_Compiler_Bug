{"sha": "a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "node_id": "C_kwDOAAsO6NoAKGE2YWQxMzk0ZjNmN2ZlMWQ5ZDQ1OTk2NGEyZDRiZThkNmJhMmVhNWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-18T16:22:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-18T16:22:04Z"}, "message": "Rollup merge of #96136 - thomcc:lifetime-wording, r=RalfJung\n\nReword clarification on lifetime for ptr->ref safety docs\n\nI believe the current wording of the safety comment is somewhat misleading, and that this is more accurate. Suggested by `@CAD97` in this thread on the topic https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Lifetime.20of.20reference.20pointer.20docs.20issue\n\nJust to check that this is correct, CC `@RalfJung.`\n\nI suppose it's open for interpretation as to whether or not this is more clear. I think it is.", "tree": {"sha": "10cd4fa286d79c6ac3dc775368bb044f92715868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cd4fa286d79c6ac3dc775368bb044f92715868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXZAtCRBK7hj4Ov3rIwAAyBAIAJx4oyt6r3wuavHZGFBF9WAv\nXLMbahh7+R9cbyBVZYi9ATHj+ZwPsWFIUTaQ/t5tFdvTYPmWQFktz6vLcHSDqUpC\njkkNg0vSchs4Ekx1hjKK5pVwQdYf4/oJ7Ag07ELgNnXYlznfIYjAhQFVyLZUwcKK\nlDWYwEH9FxWK0BVxhAEvtmV7rnFty2G8a43Kd57kmgKij9sB+TZTAGfKbNcEbJ2J\navzKd5qgMfYgdCbGQ0vvtfOEWHAk3SI8DdXjJh8P/3SxapXS0livqYnMwi47c57g\nvXG9PKWNTZf0+0GKVRQZOdLFdfaiw2VEskvl5ReRtOyV8k2MH/U58hb30lVax38=\n=OV6b\n-----END PGP SIGNATURE-----\n", "payload": "tree 10cd4fa286d79c6ac3dc775368bb044f92715868\nparent 718b1843eeb6466186f37906779b050bf91566f5\nparent be30e4044052fb0c74166a761eaec69c17fd2d54\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650298924 +0200\ncommitter GitHub <noreply@github.com> 1650298924 +0200\n\nRollup merge of #96136 - thomcc:lifetime-wording, r=RalfJung\n\nReword clarification on lifetime for ptr->ref safety docs\n\nI believe the current wording of the safety comment is somewhat misleading, and that this is more accurate. Suggested by `@CAD97` in this thread on the topic https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Lifetime.20of.20reference.20pointer.20docs.20issue\n\nJust to check that this is correct, CC `@RalfJung.`\n\nI suppose it's open for interpretation as to whether or not this is more clear. I think it is.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "html_url": "https://github.com/rust-lang/rust/commit/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718b1843eeb6466186f37906779b050bf91566f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/718b1843eeb6466186f37906779b050bf91566f5", "html_url": "https://github.com/rust-lang/rust/commit/718b1843eeb6466186f37906779b050bf91566f5"}, {"sha": "be30e4044052fb0c74166a761eaec69c17fd2d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/be30e4044052fb0c74166a761eaec69c17fd2d54", "html_url": "https://github.com/rust-lang/rust/commit/be30e4044052fb0c74166a761eaec69c17fd2d54"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "7ef2e95542bba6b3a0ec1e7fb92491cc88c240dc", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "patch": "@@ -295,7 +295,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -358,7 +358,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -1188,7 +1188,7 @@ impl<T> *const [T] {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!"}, {"sha": "56f9c84f5af6f3341db11472f75528917fc9b76e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "patch": "@@ -302,7 +302,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -368,7 +368,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -550,7 +550,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -615,7 +615,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -1461,7 +1461,7 @@ impl<T> *mut [T] {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -1513,7 +1513,7 @@ impl<T> *mut [T] {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!"}, {"sha": "5ebe61509063f3a7807bacdc5ace278d7666366b", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=a6ad1394f3f7fe1d9d459964a2d4be8d6ba2ea5a", "patch": "@@ -114,7 +114,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -148,7 +148,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -350,7 +350,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -400,7 +400,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -580,7 +580,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -626,7 +626,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!"}]}