{"sha": "a87e81b9292d49f1aa09cdcd928113305ad73a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4N2U4MWI5MjkyZDQ5ZjFhYTA5Y2RjZDkyODExMzMwNWFkNzNhNTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-02T01:25:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-02T01:25:42Z"}, "message": "Support refcount-drop and conditional free in rustc.", "tree": {"sha": "bee860bd9434ded2e26c7ce1c89dc9bd8ea85e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee860bd9434ded2e26c7ce1c89dc9bd8ea85e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87e81b9292d49f1aa09cdcd928113305ad73a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87e81b9292d49f1aa09cdcd928113305ad73a53", "html_url": "https://github.com/rust-lang/rust/commit/a87e81b9292d49f1aa09cdcd928113305ad73a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87e81b9292d49f1aa09cdcd928113305ad73a53/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07f7533b0f336ff27ca4ba90aec0e0204ca7b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07f7533b0f336ff27ca4ba90aec0e0204ca7b92", "html_url": "https://github.com/rust-lang/rust/commit/d07f7533b0f336ff27ca4ba90aec0e0204ca7b92"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "f7147abf607447c01efa63bf3ee21944294615da", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a87e81b9292d49f1aa09cdcd928113305ad73a53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87e81b9292d49f1aa09cdcd928113305ad73a53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a87e81b9292d49f1aa09cdcd928113305ad73a53", "patch": "@@ -51,7 +51,7 @@ state type fn_ctxt = rec(ValueRef llfn,\n type terminator = fn(@fn_ctxt cx, builder build);\n \n tag cleanup {\n-    clean(fn(@block_ctxt cx));\n+    clean(fn(@block_ctxt cx) -> @block_ctxt);\n }\n \n state type block_ctxt = rec(BasicBlockRef llbb,\n@@ -138,12 +138,22 @@ fn T_task() -> TypeRef {\n                      ));\n }\n \n-fn T_str() -> TypeRef {\n+fn T_array(TypeRef t, uint n) -> TypeRef {\n+    ret llvm.LLVMArrayType(t, n);\n+}\n+\n+fn T_vec(TypeRef t, uint n) -> TypeRef {\n     ret T_struct(vec(T_int(),      // Refcount\n-                     T_int()       // Lie about the remainder\n+                     T_int(),      // Alloc\n+                     T_int(),      // Fill\n+                     T_array(t, n) // Body elements\n                      ));\n }\n \n+fn T_str(uint n) -> TypeRef {\n+    ret T_vec(T_i8(), n);\n+}\n+\n fn T_crate() -> TypeRef {\n     ret T_struct(vec(T_int(),      // ptrdiff_t image_base_off\n                      T_int(),      // uintptr_t self_addr\n@@ -279,8 +289,28 @@ fn build_non_gc_free(@block_ctxt cx, ValueRef v) {\n                                         C_int(0)));\n }\n \n-fn drop_str(@block_ctxt cx, ValueRef v) {\n-    build_non_gc_free(cx, v);\n+fn decr_refcnt_and_if_zero(@block_ctxt cx,\n+                           ValueRef box_ptr,\n+                           fn(@block_ctxt cx) inner) -> @block_ctxt {\n+    auto rc_ptr = cx.build.GEP(box_ptr, vec(C_int(0),\n+                                            C_int(abi.box_rc_field_refcnt)));\n+    auto rc = cx.build.Load(rc_ptr);\n+    rc = cx.build.Sub(rc, C_int(1));\n+    cx.build.Store(rc, rc_ptr);\n+    auto test = cx.build.ICmp(lib.llvm.LLVMIntEQ, C_int(0), rc);\n+    auto next_cx = new_block_ctxt(cx.fcx, cx.term);\n+    // We terminate the then-block ourselves here with a Br, so\n+    // the terminator we pass in to the inner call is the no-op.\n+    auto then_term = terminate_no_op;\n+    auto then_cx = new_block_ctxt(cx.fcx, then_term);\n+    inner(then_cx);\n+    then_cx.build.Br(next_cx.llbb);\n+    cx.build.CondBr(test, then_cx.llbb, next_cx.llbb);\n+    ret next_cx;\n+}\n+\n+fn drop_str(@block_ctxt cx, ValueRef v) -> @block_ctxt {\n+    ret decr_refcnt_and_if_zero(cx, v, bind build_non_gc_free(_, v));\n }\n \n fn trans_lit(@block_ctxt cx, &ast.lit lit) -> ValueRef {\n@@ -302,7 +332,7 @@ fn trans_lit(@block_ctxt cx, &ast.lit lit) -> ValueRef {\n             auto v = trans_upcall(cx, \"upcall_new_str\",\n                                   vec(p2i(C_str(cx.fcx.tcx, s)),\n                                       C_int(len)));\n-            v = cx.build.IntToPtr(v, T_ptr(T_str()));\n+            v = cx.build.IntToPtr(v, T_ptr(T_str(len as uint)));\n             cx.cleanups += vec(clean(bind drop_str(_, v)));\n             ret v;\n         }\n@@ -466,10 +496,18 @@ fn trans_stmt(@block_ctxt cx, &ast.stmt s) {\n     }\n }\n \n-fn default_terminate(@fn_ctxt cx, builder build) {\n+fn terminate_ret_void(@fn_ctxt cx, builder build) {\n     build.RetVoid();\n }\n \n+\n+fn terminate_branch_to(@fn_ctxt cx, builder build, BasicBlockRef bb) {\n+    build.Br(bb);\n+}\n+\n+fn terminate_no_op(@fn_ctxt cx, builder build) {\n+}\n+\n fn new_builder(BasicBlockRef llbb) -> builder {\n     let BuilderRef llbuild = llvm.LLVMCreateBuilder();\n     llvm.LLVMPositionBuilderAtEnd(llbuild, llbb);\n@@ -496,7 +534,7 @@ fn trans_block(@fn_ctxt cx, &ast.block b, terminator term) {\n     for (cleanup c in bcx.cleanups) {\n         alt (c) {\n             case (clean(?cfn)) {\n-                cfn(bcx);\n+                bcx = cfn(bcx);\n             }\n         }\n     }\n@@ -527,7 +565,7 @@ fn trans_fn(@trans_ctxt cx, &ast._fn f) {\n     let vec[TypeRef] args = vec();\n \n     auto fcx = new_fn_ctxt(cx, cx.path, out, args);\n-    auto term = default_terminate;\n+    auto term = terminate_ret_void;\n \n     trans_block(fcx, f.body, term);\n }\n@@ -558,7 +596,7 @@ fn p2i(ValueRef v) -> ValueRef {\n fn trans_exit_task_glue(@trans_ctxt cx) {\n     let vec[TypeRef] T_args = vec();\n     let vec[ValueRef] V_args = vec();\n-    auto term = default_terminate;\n+    auto term = terminate_ret_void;\n \n     auto llfn = cx.glues.exit_task_glue;\n     let ValueRef lloutptr = C_null(T_int());"}]}