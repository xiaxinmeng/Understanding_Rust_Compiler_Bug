{"sha": "200955647277c31a3254a1041b7b7bb5f2a79ed8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDk1NTY0NzI3N2MzMWEzMjU0YTEwNDFiN2I3YmI1ZjJhNzllZDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-16T20:52:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-16T20:52:56Z"}, "message": "Merge #8542\n\n8542: Include path in `unresolved-macro-call` diagnostic r=matklad a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "806a0de6951d509f5a4f8ccada6b189789cdf544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806a0de6951d509f5a4f8ccada6b189789cdf544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200955647277c31a3254a1041b7b7bb5f2a79ed8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgefkoCRBK7hj4Ov3rIwAAvlMIAELs0WnZYICpkE7t08o5p56Z\nwVmf6v4QEv4L6vvTFiKty4cZPZOYJ7uwcfbkBLU+N91B4Yd8MeMqjrmsDLupB7u3\nOpzmoULTgbqQEsBDZq9YwD9WfGuEG2zq/f+nif967yLKTceesaHxdnlOsWnx6AnC\no/Z4bm3ncWsBo81PsCXJjc3RT7yepOvQNaGDNkwG9oiJdnUjeDwSVhUzHnGSnt5z\nQ5S262zlJOUQKNllmSSq2q/Dw8mZFgkgW8C6xy24dJHNf+FNesAKUWCz6yboxGFi\nYGOPxlSqka19F50ZDbYb0fc/vcFOXp/maUb5iuHaJOUnKJHPgq7ILAE4zAibj0M=\n=flyX\n-----END PGP SIGNATURE-----\n", "payload": "tree 806a0de6951d509f5a4f8ccada6b189789cdf544\nparent 5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9\nparent ff858376aa4a974cda33a269b4c2d34cbda21bed\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618606376 +0000\ncommitter GitHub <noreply@github.com> 1618606376 +0000\n\nMerge #8542\n\n8542: Include path in `unresolved-macro-call` diagnostic r=matklad a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200955647277c31a3254a1041b7b7bb5f2a79ed8", "html_url": "https://github.com/rust-lang/rust/commit/200955647277c31a3254a1041b7b7bb5f2a79ed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200955647277c31a3254a1041b7b7bb5f2a79ed8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9", "html_url": "https://github.com/rust-lang/rust/commit/5274eb12dd87f0d790f2871d63f8e3c6f69d3ae9"}, {"sha": "ff858376aa4a974cda33a269b4c2d34cbda21bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff858376aa4a974cda33a269b4c2d34cbda21bed", "html_url": "https://github.com/rust-lang/rust/commit/ff858376aa4a974cda33a269b4c2d34cbda21bed"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "c0b0b784151442cb2773d0f484395abf781a7bc0", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -568,9 +568,13 @@ impl ExprCollector<'_> {\n \n         let res = match res {\n             Ok(res) => res,\n-            Err(UnresolvedMacro) => {\n+            Err(UnresolvedMacro { path }) => {\n                 self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedMacroCall(\n-                    UnresolvedMacroCall { file: outer_file, node: syntax_ptr.cast().unwrap() },\n+                    UnresolvedMacroCall {\n+                        file: outer_file,\n+                        node: syntax_ptr.cast().unwrap(),\n+                        path,\n+                    },\n                 ));\n                 collector(self, None);\n                 return;"}, {"sha": "63f5fe88db31c53aae3d8de1caaf0cde3b1263a0", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -180,7 +180,7 @@ fn unresolved_macro_diag() {\n         r#\"\n fn f() {\n     m!();\n-  //^^^^ unresolved macro call\n+  //^^^^ unresolved macro `m!`\n }\n       \"#,\n     );"}, {"sha": "a71ae266845a753044521e7f519561270200f3e5", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -8,7 +8,7 @@ use hir_expand::diagnostics::{Diagnostic, DiagnosticCode, DiagnosticSink};\n use hir_expand::{HirFileId, InFile};\n use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n \n-use crate::{db::DefDatabase, DefWithBodyId};\n+use crate::{db::DefDatabase, path::ModPath, DefWithBodyId};\n \n pub fn validate_body(db: &dyn DefDatabase, owner: DefWithBodyId, sink: &mut DiagnosticSink<'_>) {\n     let source_map = db.body_with_source_map(owner).1;\n@@ -103,14 +103,15 @@ impl Diagnostic for UnresolvedImport {\n pub struct UnresolvedMacroCall {\n     pub file: HirFileId,\n     pub node: AstPtr<ast::MacroCall>,\n+    pub path: ModPath,\n }\n \n impl Diagnostic for UnresolvedMacroCall {\n     fn code(&self) -> DiagnosticCode {\n         DiagnosticCode(\"unresolved-macro-call\")\n     }\n     fn message(&self) -> String {\n-        \"unresolved macro call\".to_string()\n+        format!(\"unresolved macro `{}!`\", self.path)\n     }\n     fn display_source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.node.clone().into())"}, {"sha": "000567d990f4954d8c3eaabaadb00054378e17b6", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -66,6 +66,7 @@ use hir_expand::{\n };\n use la_arena::Idx;\n use nameres::DefMap;\n+use path::ModPath;\n use syntax::ast;\n \n use crate::builtin_type::BuiltinType;\n@@ -675,7 +676,9 @@ impl<T: ast::AstNode> AstIdWithPath<T> {\n     }\n }\n \n-pub struct UnresolvedMacro;\n+pub struct UnresolvedMacro {\n+    pub path: ModPath,\n+}\n \n fn macro_call_as_call_id(\n     call: &AstIdWithPath<ast::MacroCall>,\n@@ -684,7 +687,8 @@ fn macro_call_as_call_id(\n     resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     error_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<Result<MacroCallId, ErrorEmitted>, UnresolvedMacro> {\n-    let def: MacroDefId = resolver(call.path.clone()).ok_or(UnresolvedMacro)?;\n+    let def: MacroDefId =\n+        resolver(call.path.clone()).ok_or_else(|| UnresolvedMacro { path: call.path.clone() })?;\n \n     let res = if let MacroDefKind::BuiltInEager(..) = def.kind {\n         let macro_call = InFile::new(call.ast_id.file_id, call.ast_id.to_node(db.upcast()));\n@@ -714,8 +718,13 @@ fn derive_macro_as_call_id(\n     krate: CrateId,\n     resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n ) -> Result<MacroCallId, UnresolvedMacro> {\n-    let def: MacroDefId = resolver(item_attr.path.clone()).ok_or(UnresolvedMacro)?;\n-    let last_segment = item_attr.path.segments().last().ok_or(UnresolvedMacro)?;\n+    let def: MacroDefId = resolver(item_attr.path.clone())\n+        .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n+    let last_segment = item_attr\n+        .path\n+        .segments()\n+        .last()\n+        .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n     let res = def\n         .as_lazy_macro(\n             db.upcast(),"}, {"sha": "542f190a11b932d1ca6561dee5132cdcf0388510", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -481,7 +481,7 @@ mod diagnostics {\n \n         UnresolvedProcMacro { ast: MacroCallKind },\n \n-        UnresolvedMacroCall { ast: AstId<ast::MacroCall> },\n+        UnresolvedMacroCall { ast: AstId<ast::MacroCall>, path: ModPath },\n \n         MacroError { ast: MacroCallKind, message: String },\n     }\n@@ -546,8 +546,9 @@ mod diagnostics {\n         pub(super) fn unresolved_macro_call(\n             container: LocalModuleId,\n             ast: AstId<ast::MacroCall>,\n+            path: ModPath,\n         ) -> Self {\n-            Self { in_module: container, kind: DiagnosticKind::UnresolvedMacroCall { ast } }\n+            Self { in_module: container, kind: DiagnosticKind::UnresolvedMacroCall { ast, path } }\n         }\n \n         pub(super) fn add_to(\n@@ -662,9 +663,13 @@ mod diagnostics {\n                     });\n                 }\n \n-                DiagnosticKind::UnresolvedMacroCall { ast } => {\n+                DiagnosticKind::UnresolvedMacroCall { ast, path } => {\n                     let node = ast.to_node(db.upcast());\n-                    sink.push(UnresolvedMacroCall { file: ast.file_id, node: AstPtr::new(&node) });\n+                    sink.push(UnresolvedMacroCall {\n+                        file: ast.file_id,\n+                        node: AstPtr::new(&node),\n+                        path: path.clone(),\n+                    });\n                 }\n \n                 DiagnosticKind::MacroError { ast, message } => {"}, {"sha": "05ceb1efb62ded62911eb2f13ff96e29e531009b", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -829,7 +829,7 @@ impl DefCollector<'_> {\n                             res = ReachedFixedPoint::No;\n                             return false;\n                         }\n-                        Err(UnresolvedMacro) | Ok(Err(_)) => {}\n+                        Err(UnresolvedMacro { .. }) | Ok(Err(_)) => {}\n                     }\n                 }\n                 MacroDirectiveKind::Derive { ast_id, derive_attr } => {\n@@ -845,7 +845,7 @@ impl DefCollector<'_> {\n                             res = ReachedFixedPoint::No;\n                             return false;\n                         }\n-                        Err(UnresolvedMacro) => (),\n+                        Err(UnresolvedMacro { .. }) => (),\n                     }\n                 }\n             }\n@@ -943,10 +943,11 @@ impl DefCollector<'_> {\n                     &mut |_| (),\n                 ) {\n                     Ok(_) => (),\n-                    Err(UnresolvedMacro) => {\n+                    Err(UnresolvedMacro { path }) => {\n                         self.def_map.diagnostics.push(DefDiagnostic::unresolved_macro_call(\n                             directive.module_id,\n                             ast_id.ast_id,\n+                            path,\n                         ));\n                     }\n                 },\n@@ -1530,7 +1531,7 @@ impl ModCollector<'_, '_> {\n                 ));\n                 return;\n             }\n-            Err(UnresolvedMacro) => (),\n+            Err(UnresolvedMacro { .. }) => (),\n         }\n \n         // Case 2: resolve in module scope, expand during name resolution."}, {"sha": "543975e07568435fbd31bf861a443e8fbbf5d3d3", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -170,7 +170,7 @@ fn unresolved_legacy_scope_macro() {\n \n           m!();\n           m2!();\n-        //^^^^^^ unresolved macro call\n+        //^^^^^^ unresolved macro `self::m2!`\n         \"#,\n     );\n }\n@@ -187,7 +187,7 @@ fn unresolved_module_scope_macro() {\n \n           self::m!();\n           self::m2!();\n-        //^^^^^^^^^^^^ unresolved macro call\n+        //^^^^^^^^^^^^ unresolved macro `self::m2!`\n         \"#,\n     );\n }"}, {"sha": "1c911a8b2c856c3e1308ac4e8a9ac09940700588", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200955647277c31a3254a1041b7b7bb5f2a79ed8/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=200955647277c31a3254a1041b7b7bb5f2a79ed8", "patch": "@@ -725,7 +725,7 @@ fn test_fn() {\n             expect![[r#\"\n                 [\n                     Diagnostic {\n-                        message: \"unresolved macro call\",\n+                        message: \"unresolved macro `foo::bar!`\",\n                         range: 5..8,\n                         severity: Error,\n                         fix: None,"}]}