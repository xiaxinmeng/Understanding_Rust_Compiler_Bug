{"sha": "c58951ea7d70bfab8c9a0a3ad6540d829c59b585", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODk1MWVhN2Q3MGJmYWI4YzlhMGEzYWQ2NTQwZDgyOWM1OWI1ODU=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T17:17:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-18T21:25:24Z"}, "message": "Replace TmMut with inherited mutability", "tree": {"sha": "0c0fb4e985a789c53cc0e96de2d426e948882832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c0fb4e985a789c53cc0e96de2d426e948882832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c58951ea7d70bfab8c9a0a3ad6540d829c59b585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c58951ea7d70bfab8c9a0a3ad6540d829c59b585", "html_url": "https://github.com/rust-lang/rust/commit/c58951ea7d70bfab8c9a0a3ad6540d829c59b585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c58951ea7d70bfab8c9a0a3ad6540d829c59b585/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e13586a363fa539828268129b75accc085a31d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e13586a363fa539828268129b75accc085a31d", "html_url": "https://github.com/rust-lang/rust/commit/a9e13586a363fa539828268129b75accc085a31d"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "d5a5deeae8c08b584907edbaf1d7ec0fae34532f", "filename": "src/libstd/time.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c58951ea7d70bfab8c9a0a3ad6540d829c59b585/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58951ea7d70bfab8c9a0a3ad6540d829c59b585/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=c58951ea7d70bfab8c9a0a3ad6540d829c59b585", "patch": "@@ -155,6 +155,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     do_strptime(s, format)\n }\n \n+/// Formats the time according to the format string.\n pub fn strftime(format: &str, tm: Tm) -> ~str {\n     do_strftime(format, tm)\n }\n@@ -235,21 +236,6 @@ impl Tm {\n }\n \n priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n-    type TmMut = {\n-       mut tm_sec: i32,\n-       mut tm_min: i32,\n-       mut tm_hour: i32,\n-       mut tm_mday: i32,\n-       mut tm_mon: i32,\n-       mut tm_year: i32,\n-       mut tm_wday: i32,\n-       mut tm_yday: i32,\n-       mut tm_isdst: i32,\n-       mut tm_gmtoff: i32,\n-       mut tm_zone: ~str,\n-       mut tm_nsec: i32,\n-    };\n-\n     fn match_str(s: &str, pos: uint, needle: &str) -> bool {\n         let mut i = pos;\n         for str::each(needle) |ch| {\n@@ -312,7 +298,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n     }\n \n-    fn parse_type(s: &str, pos: uint, ch: char, tm: &TmMut)\n+    fn parse_type(s: &str, pos: uint, ch: char, tm: &mut Tm_)\n       -> Result<uint, ~str> {\n         match ch {\n           'A' => match match_strs(s, pos, ~[\n@@ -623,19 +609,19 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     }\n \n     do io::with_str_reader(str::from_slice(format)) |rdr| {\n-        let tm = {\n-            mut tm_sec: 0_i32,\n-            mut tm_min: 0_i32,\n-            mut tm_hour: 0_i32,\n-            mut tm_mday: 0_i32,\n-            mut tm_mon: 0_i32,\n-            mut tm_year: 0_i32,\n-            mut tm_wday: 0_i32,\n-            mut tm_yday: 0_i32,\n-            mut tm_isdst: 0_i32,\n-            mut tm_gmtoff: 0_i32,\n-            mut tm_zone: ~\"\",\n-            mut tm_nsec: 0_i32,\n+        let mut tm = {\n+            tm_sec: 0_i32,\n+            tm_min: 0_i32,\n+            tm_hour: 0_i32,\n+            tm_mday: 0_i32,\n+            tm_mon: 0_i32,\n+            tm_year: 0_i32,\n+            tm_wday: 0_i32,\n+            tm_yday: 0_i32,\n+            tm_isdst: 0_i32,\n+            tm_gmtoff: 0_i32,\n+            tm_zone: ~\"\",\n+            tm_nsec: 0_i32,\n         };\n         let mut pos = 0u;\n         let len = str::len(s);\n@@ -645,7 +631,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             let {ch, next} = str::char_range_at(s, pos);\n \n             match rdr.read_char() {\n-              '%' => match parse_type(s, pos, rdr.read_char(), &tm) {\n+              '%' => match parse_type(s, pos, rdr.read_char(), &mut tm) {\n                 Ok(next) => pos = next,\n                   Err(copy e) => { result = Err(e); break; }\n               },"}]}