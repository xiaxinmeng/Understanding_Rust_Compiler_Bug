{"sha": "74db87b99d48f318e96acb91482599b906be0a7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGI4N2I5OWQ0OGYzMThlOTZhY2I5MTQ4MjU5OWI5MDZiZTBhN2U=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-11T00:55:42Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-17T04:53:20Z"}, "message": "move feature_gate to libsyntax", "tree": {"sha": "e298180b99524efa2c46901f11b994823a351dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e298180b99524efa2c46901f11b994823a351dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74db87b99d48f318e96acb91482599b906be0a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74db87b99d48f318e96acb91482599b906be0a7e", "html_url": "https://github.com/rust-lang/rust/commit/74db87b99d48f318e96acb91482599b906be0a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74db87b99d48f318e96acb91482599b906be0a7e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "375c95b7ad17ed39019b5782cecb94eea8840f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/375c95b7ad17ed39019b5782cecb94eea8840f75", "html_url": "https://github.com/rust-lang/rust/commit/375c95b7ad17ed39019b5782cecb94eea8840f75"}], "stats": {"total": 134, "additions": 69, "deletions": 65}, "files": [{"sha": "20371f63a3427d7fe9e45dc35b1bbf86a7bccfee", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -13,7 +13,6 @@ use back::link;\n use back::write;\n use driver::session::Session;\n use driver::config;\n-use front;\n use lint;\n use llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n@@ -194,8 +193,20 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     *sess.crate_metadata.borrow_mut() =\n         collect_crate_metadata(sess, krate.attrs.as_slice());\n \n-    time(time_passes, \"gated feature checking\", (), |_|\n-         front::feature_gate::check_crate(sess, &krate));\n+    time(time_passes, \"gated feature checking\", (), |_| {\n+        let (features, unknown_features) =\n+            syntax::feature_gate::check_crate(&sess.parse_sess.span_diagnostic, &krate);\n+\n+        for uf in unknown_features.iter() {\n+            sess.add_lint(lint::builtin::UNKNOWN_FEATURES,\n+                          ast::CRATE_NODE_ID,\n+                          *uf,\n+                          \"unknown feature\".to_string());\n+        }\n+\n+        sess.abort_if_errors();\n+        *sess.features.borrow_mut() = features;\n+    });\n \n     let any_exe = sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeExecutable\n@@ -225,7 +236,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     let mut registry = Registry::new(&krate);\n \n     time(time_passes, \"plugin registration\", (), |_| {\n-        if sess.features.rustc_diagnostic_macros.get() {\n+        if sess.features.borrow().rustc_diagnostic_macros {\n             registry.register_macro(\"__diagnostic_used\",\n                 diagnostics::plugin::expand_diagnostic_used);\n             registry.register_macro(\"__register_diagnostic\",\n@@ -277,7 +288,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 os::setenv(\"PATH\", os::join_paths(new_path.as_slice()).unwrap());\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n-                deriving_hash_type_parameter: sess.features.default_type_params.get(),\n+                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n                 crate_name: crate_name.to_string(),\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,"}, {"sha": "d7ed5d3e1ffa446f005d46bf201a5083640b0061", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -11,7 +11,6 @@\n \n use driver::config;\n use driver::driver;\n-use front;\n use metadata::cstore::CStore;\n use metadata::filesearch;\n use lint;\n@@ -21,6 +20,7 @@ use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use syntax::diagnostic;\n use syntax::diagnostics;\n+use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::token;\n use syntax::parse::ParseSess;\n@@ -49,7 +49,7 @@ pub struct Session {\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub crate_metadata: RefCell<Vec<String>>,\n-    pub features: front::feature_gate::Features,\n+    pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n@@ -245,7 +245,7 @@ pub fn build_session_(sopts: config::Options,\n         lints: RefCell::new(NodeMap::new()),\n         crate_types: RefCell::new(Vec::new()),\n         crate_metadata: RefCell::new(Vec::new()),\n-        features: front::feature_gate::Features::new(),\n+        features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n     };\n "}, {"sha": "81234f36ade50b32b375fa0d3e1694322e7c7ea6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -116,10 +116,6 @@ pub mod middle {\n     pub mod weak_lang_items;\n }\n \n-pub mod front {\n-    pub mod feature_gate;\n-}\n-\n pub mod metadata;\n \n pub mod driver;"}, {"sha": "d4fe3c265f518dd92a69b3f7acbfbba3566d2386", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -2811,7 +2811,7 @@ impl<'a> Resolver<'a> {\n                                     import_span: Span,\n                                     name: Name,\n                                     namespace: Namespace) {\n-        if self.session.features.import_shadowing.get() {\n+        if self.session.features.borrow().import_shadowing {\n             return\n         }\n \n@@ -2837,7 +2837,7 @@ impl<'a> Resolver<'a> {\n                                                      &mut ImportResolution,\n                                                      import_span: Span,\n                                                      name: Name) {\n-        if self.session.features.import_shadowing.get() {\n+        if self.session.features.borrow().import_shadowing {\n             return\n         }\n \n@@ -2919,7 +2919,7 @@ impl<'a> Resolver<'a> {\n                                                    module: &Module,\n                                                    name: Name,\n                                                    span: Span) {\n-        if self.session.features.import_shadowing.get() {\n+        if self.session.features.borrow().import_shadowing {\n             return\n         }\n \n@@ -2937,7 +2937,7 @@ impl<'a> Resolver<'a> {\n                                                              module: &Module,\n                                                              name: Name,\n                                                              span: Span) {\n-        if self.session.features.import_shadowing.get() {\n+        if self.session.features.borrow().import_shadowing {\n             return\n         }\n "}, {"sha": "c46e95cf045f5eab247e77a88bc27b2e5431e6b0", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -235,7 +235,7 @@ fn ast_path_substs<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n     }\n \n     if supplied_ty_param_count > required_ty_param_count\n-        && !this.tcx().sess.features.default_type_params.get() {\n+        && !this.tcx().sess.features.borrow().default_type_params {\n         span_err!(this.tcx().sess, path.span, E0108,\n             \"default type parameters are experimental and possibly buggy\");\n         span_note!(this.tcx().sess, path.span,"}, {"sha": "12905763f522b442c0bee6350cbf62d43f15c725", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -2131,7 +2131,7 @@ fn try_overloaded_call(fcx: &FnCtxt,\n         fcx.inh.method_map.borrow_mut().insert(method_call, method_callee);\n         write_call(fcx, call_expression, output_type);\n \n-        if !fcx.tcx().sess.features.overloaded_calls.get() {\n+        if !fcx.tcx().sess.features.borrow().overloaded_calls {\n             span_err!(fcx.tcx().sess, call_expression.span, E0056,\n                 \"overloaded calls are experimental\");\n             span_note!(fcx.tcx().sess, call_expression.span,"}, {"sha": "e22e55193fca3565d8d1867bc64409dbf2e89172", "filename": "src/libsyntax/feature_gate.rs", "status": "renamed", "additions": 43, "deletions": 47, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -18,21 +18,17 @@\n //! Features are enabled in programs via the crate-level attributes of\n //! `#![feature(...)]` with a comma-separated list of features.\n \n-use lint;\n+use abi::RustIntrinsic;\n+use ast::NodeId;\n+use ast;\n+use attr;\n+use attr::AttrMetaMethods;\n+use codemap::Span;\n+use diagnostic::SpanHandler;\n+use visit;\n+use visit::Visitor;\n+use parse::token;\n \n-use syntax::abi::RustIntrinsic;\n-use syntax::ast::NodeId;\n-use syntax::ast;\n-use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::Span;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n-use syntax::parse::token;\n-\n-use driver::session::Session;\n-\n-use std::cell::Cell;\n use std::slice;\n \n /// This is a list of all known features since the beginning of time. This list\n@@ -99,35 +95,35 @@ enum Status {\n \n /// A set of features to be used by later passes.\n pub struct Features {\n-    pub default_type_params: Cell<bool>,\n-    pub overloaded_calls: Cell<bool>,\n-    pub rustc_diagnostic_macros: Cell<bool>,\n-    pub import_shadowing: Cell<bool>,\n+    pub default_type_params: bool,\n+    pub overloaded_calls: bool,\n+    pub rustc_diagnostic_macros: bool,\n+    pub import_shadowing: bool,\n }\n \n impl Features {\n     pub fn new() -> Features {\n         Features {\n-            default_type_params: Cell::new(false),\n-            overloaded_calls: Cell::new(false),\n-            rustc_diagnostic_macros: Cell::new(false),\n-            import_shadowing: Cell::new(false),\n+            default_type_params: false,\n+            overloaded_calls: false,\n+            rustc_diagnostic_macros: false,\n+            import_shadowing: false,\n         }\n     }\n }\n \n struct Context<'a> {\n     features: Vec<&'static str>,\n-    sess: &'a Session,\n+    span_handler: &'a SpanHandler,\n }\n \n impl<'a> Context<'a> {\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n         if !self.has_feature(feature) {\n-            self.sess.span_err(span, explain);\n-            self.sess.span_note(span, format!(\"add #![feature({})] to the \\\n-                                               crate attributes to enable\",\n-                                              feature).as_slice());\n+            self.span_handler.span_err(span, explain);\n+            self.span_handler.span_note(span, format!(\"add #![feature({})] to the \\\n+                                                       crate attributes to enable\",\n+                                                      feature).as_slice());\n         }\n     }\n \n@@ -404,48 +400,47 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n     }\n }\n \n-pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n+pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features, Vec<Span>) {\n     let mut cx = Context {\n         features: Vec::new(),\n-        sess: sess,\n+        span_handler: span_handler,\n     };\n \n+    let mut unknown_features = Vec::new();\n+\n     for attr in krate.attrs.iter() {\n         if !attr.check_name(\"feature\") {\n             continue\n         }\n \n         match attr.meta_item_list() {\n             None => {\n-                sess.span_err(attr.span, \"malformed feature attribute, \\\n-                                          expected #![feature(...)]\");\n+                span_handler.span_err(attr.span, \"malformed feature attribute, \\\n+                                                  expected #![feature(...)]\");\n             }\n             Some(list) => {\n                 for mi in list.iter() {\n                     let name = match mi.node {\n                         ast::MetaWord(ref word) => (*word).clone(),\n                         _ => {\n-                            sess.span_err(mi.span,\n-                                          \"malformed feature, expected just \\\n-                                           one word\");\n+                            span_handler.span_err(mi.span,\n+                                                  \"malformed feature, expected just \\\n+                                                   one word\");\n                             continue\n                         }\n                     };\n                     match KNOWN_FEATURES.iter()\n                                         .find(|& &(n, _)| name.equiv(&n)) {\n                         Some(&(name, Active)) => { cx.features.push(name); }\n                         Some(&(_, Removed)) => {\n-                            sess.span_err(mi.span, \"feature has been removed\");\n+                            span_handler.span_err(mi.span, \"feature has been removed\");\n                         }\n                         Some(&(_, Accepted)) => {\n-                            sess.span_warn(mi.span, \"feature has been added to Rust, \\\n-                                                     directive not necessary\");\n+                            span_handler.span_warn(mi.span, \"feature has been added to Rust, \\\n+                                                             directive not necessary\");\n                         }\n                         None => {\n-                            sess.add_lint(lint::builtin::UNKNOWN_FEATURES,\n-                                          ast::CRATE_NODE_ID,\n-                                          mi.span,\n-                                          \"unknown feature\".to_string());\n+                            unknown_features.push(mi.span);\n                         }\n                     }\n                 }\n@@ -455,11 +450,12 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n \n     visit::walk_crate(&mut cx, krate);\n \n-    sess.abort_if_errors();\n-\n-    sess.features.default_type_params.set(cx.has_feature(\"default_type_params\"));\n-    sess.features.overloaded_calls.set(cx.has_feature(\"overloaded_calls\"));\n-    sess.features.rustc_diagnostic_macros.set(cx.has_feature(\"rustc_diagnostic_macros\"));\n-    sess.features.import_shadowing.set(cx.has_feature(\"import_shadowing\"));\n+    (Features {\n+        default_type_params: cx.has_feature(\"default_type_params\"),\n+        overloaded_calls: cx.has_feature(\"overloaded_calls\"),\n+        rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n+        import_shadowing: cx.has_feature(\"import_shadowing\"),\n+    },\n+    unknown_features)\n }\n ", "previous_filename": "src/librustc/front/feature_gate.rs"}, {"sha": "457d77efb708e2846d2ac5c8af602046650aee79", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db87b99d48f318e96acb91482599b906be0a7e/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=74db87b99d48f318e96acb91482599b906be0a7e", "patch": "@@ -62,6 +62,7 @@ pub mod codemap;\n pub mod config;\n pub mod crateid;\n pub mod diagnostic;\n+pub mod feature_gate;\n pub mod fold;\n pub mod owned_slice;\n pub mod parse;"}]}