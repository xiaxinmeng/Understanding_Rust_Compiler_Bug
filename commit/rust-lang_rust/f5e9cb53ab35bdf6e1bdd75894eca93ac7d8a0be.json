{"sha": "f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "node_id": "C_kwDOAAsO6NoAKGY1ZTljYjUzYWIzNWJkZjZlMWJkZDc1ODk0ZWNhOTNhYzdkOGEwYmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-14T08:44:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-14T08:44:19Z"}, "message": "Rollup merge of #97720 - cjgillot:all-fresh, r=petrochenkov\n\nAlways create elided lifetime parameters for functions\n\nAnonymous and elided lifetimes in functions are sometimes (async fns) --and sometimes not (regular fns)-- desugared to implicit generic parameters.\n\nThis difference of treatment makes it some downstream analyses more complicated to handle.  This step is a pre-requisite to perform lifetime elision resolution on AST.\n\nThere is currently an inconsistency in the treatment of argument-position impl-trait for functions and async fns:\n```rust\ntrait Foo<'a> {}\nfn foo(t: impl Foo<'_>) {} //~ ERROR missing lifetime specifier\nasync fn async_foo(t: impl Foo<'_>) {} //~ OK\nfn bar(t: impl Iterator<Item = &'_ u8>) {} //~ ERROR missing lifetime specifier\nasync fn async_bar(t: impl Iterator<Item = &'_ u8>) {} //~ OK\n```\n\nThe current implementation reports \"missing lifetime specifier\" on `foo`, but **accepts it** in `async_foo`.\nThis PR **proposes to accept** the anonymous lifetime in both cases as an extra generic lifetime parameter.\nThis change would be insta-stable, so let's ping t-lang.\nAnonymous lifetimes in GAT bindings keep being forbidden:\n```rust\nfn foo(t: impl Foo<Assoc<'_> = Bar<'_>>) {}\n                         ^^        ^^\n                       forbidden   ok\n```\nI started a discussion here: https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Anonymous.20lifetimes.20in.20universal.20impl-trait/near/284968606\n\nr? ``@petrochenkov``", "tree": {"sha": "130660a53abebbf1450e43db702db9406861b626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130660a53abebbf1450e43db702db9406861b626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiz9djCRBK7hj4Ov3rIwAAJmwIAHPeR+RAFIWlNHbBI9OSOXFC\nE/FaEl/u0BLiAQ0M4dImeaO4LKh33YeDEPKmg/3JWWmeHhHWzCbOWC5t+Znx9ovG\n7VsLpDetiW4dNWpNIg0We7AiOb+vB1b5u47YOngLKJAsQR1avGXuxSZN/EjzRKqo\nVbxcZkjTajnH12ObBg1R4PTanbrzT8FrL49mmBYsaE6ERe+OSNVtJHwk8osZMUVH\naPudMniDfMJ4Qlm+8iaAlG2AemZVn00QB1iX2NTf2d+Z1NFykNr+V+hqubQDzKsl\nkmO6Zx+7dBzC5hQ+YX+9NF96JMQb2ho9bXjVS5SszMJ9699NdEQpteraxvke9i4=\n=Qkwm\n-----END PGP SIGNATURE-----\n", "payload": "tree 130660a53abebbf1450e43db702db9406861b626\nparent 431c6f84990cdd08b68d46efff2efc75549934fe\nparent 5a20834884f653e84485fb905785fdbca98b7e02\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657788259 +0530\ncommitter GitHub <noreply@github.com> 1657788259 +0530\n\nRollup merge of #97720 - cjgillot:all-fresh, r=petrochenkov\n\nAlways create elided lifetime parameters for functions\n\nAnonymous and elided lifetimes in functions are sometimes (async fns) --and sometimes not (regular fns)-- desugared to implicit generic parameters.\n\nThis difference of treatment makes it some downstream analyses more complicated to handle.  This step is a pre-requisite to perform lifetime elision resolution on AST.\n\nThere is currently an inconsistency in the treatment of argument-position impl-trait for functions and async fns:\n```rust\ntrait Foo<'a> {}\nfn foo(t: impl Foo<'_>) {} //~ ERROR missing lifetime specifier\nasync fn async_foo(t: impl Foo<'_>) {} //~ OK\nfn bar(t: impl Iterator<Item = &'_ u8>) {} //~ ERROR missing lifetime specifier\nasync fn async_bar(t: impl Iterator<Item = &'_ u8>) {} //~ OK\n```\n\nThe current implementation reports \"missing lifetime specifier\" on `foo`, but **accepts it** in `async_foo`.\nThis PR **proposes to accept** the anonymous lifetime in both cases as an extra generic lifetime parameter.\nThis change would be insta-stable, so let's ping t-lang.\nAnonymous lifetimes in GAT bindings keep being forbidden:\n```rust\nfn foo(t: impl Foo<Assoc<'_> = Bar<'_>>) {}\n                         ^^        ^^\n                       forbidden   ok\n```\nI started a discussion here: https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Anonymous.20lifetimes.20in.20universal.20impl-trait/near/284968606\n\nr? ``@petrochenkov``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "html_url": "https://github.com/rust-lang/rust/commit/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431c6f84990cdd08b68d46efff2efc75549934fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/431c6f84990cdd08b68d46efff2efc75549934fe", "html_url": "https://github.com/rust-lang/rust/commit/431c6f84990cdd08b68d46efff2efc75549934fe"}, {"sha": "5a20834884f653e84485fb905785fdbca98b7e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a20834884f653e84485fb905785fdbca98b7e02", "html_url": "https://github.com/rust-lang/rust/commit/5a20834884f653e84485fb905785fdbca98b7e02"}], "stats": {"total": 219, "additions": 163, "deletions": 56}, "files": [{"sha": "abd2bc3fd47a4bddbfdf56d5c1f96fd5e7ddf66b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -148,6 +148,8 @@ declare_features! (\n     /// below (it has to be checked before expansion possibly makes\n     /// macros disappear).\n     (active, allow_internal_unstable, \"1.0.0\", None, None),\n+    /// Allows using anonymous lifetimes in argument-position impl-trait.\n+    (active, anonymous_lifetime_in_impl_trait, \"1.63.0\", None, None),\n     /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n     /// Outputs useful `assert!` messages"}, {"sha": "3b3717400224a2ae4d7f1f761e43b830074d95e2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -758,7 +758,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 // We don't need to deal with patterns in parameters, because\n                 // they are not possible for foreign or bodiless functions.\n                 self.with_lifetime_rib(\n-                    LifetimeRibKind::AnonymousPassThrough(fn_id, false),\n+                    LifetimeRibKind::AnonymousCreateParameter {\n+                        binder: fn_id,\n+                        report_in_path: false,\n+                    },\n                     |this| walk_list!(this, visit_param, &sig.decl.inputs),\n                 );\n                 self.with_lifetime_rib(\n@@ -792,18 +795,13 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         // generic parameters.  This is especially useful for `async fn`, where\n                         // these fresh generic parameters can be applied to the opaque `impl Trait`\n                         // return type.\n-                        let rib = if async_node_id.is_some() {\n-                            // Only emit a hard error for `async fn`, since this kind of\n-                            // elision has always been allowed in regular `fn`s.\n+                        this.with_lifetime_rib(\n                             LifetimeRibKind::AnonymousCreateParameter {\n                                 binder: fn_id,\n-                                report_in_path: true,\n-                            }\n-                        } else {\n-                            LifetimeRibKind::AnonymousPassThrough(fn_id, false)\n-                        };\n-                        this.with_lifetime_rib(\n-                            rib,\n+                                // Only emit a hard error for `async fn`, since this kind of\n+                                // elision has always been allowed in regular `fn`s.\n+                                report_in_path: async_node_id.is_some(),\n+                            },\n                             // Add each argument to the rib.\n                             |this| this.resolve_params(&declaration.inputs),\n                         );"}, {"sha": "796885290820419508aa0ed292743b930103a9cd", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -1677,14 +1677,29 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     break None;\n                 }\n \n-                Scope::Binder { ref lifetimes, scope_type, s, .. } => {\n+                Scope::Binder { ref lifetimes, scope_type, s, where_bound_origin, .. } => {\n                     if let Some(&def) = lifetimes.get(&region_def_id) {\n                         break Some(def.shifted(late_depth));\n                     }\n                     match scope_type {\n                         BinderScopeType::Normal => late_depth += 1,\n                         BinderScopeType::Concatenating => {}\n                     }\n+                    // Fresh lifetimes in APIT used to be allowed in async fns and forbidden in\n+                    // regular fns.\n+                    if let Some(hir::PredicateOrigin::ImplTrait) = where_bound_origin\n+                        && let hir::LifetimeName::Param(_, hir::ParamName::Fresh) = lifetime_ref.name\n+                        && let hir::IsAsync::NotAsync = self.tcx.asyncness(lifetime_ref.hir_id.owner)\n+                        && !self.tcx.features().anonymous_lifetime_in_impl_trait\n+                    {\n+                        rustc_session::parse::feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            sym::anonymous_lifetime_in_impl_trait,\n+                            lifetime_ref.span,\n+                            \"anonymous lifetimes in `impl Trait` are unstable\",\n+                        ).emit();\n+                        return;\n+                    }\n                     scope = s;\n                 }\n "}, {"sha": "95c0ad91fd21adcef2bd366d12fe4bed62495c65", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -341,6 +341,7 @@ symbols! {\n         always,\n         and,\n         and_then,\n+        anonymous_lifetime_in_impl_trait,\n         any,\n         append_const_msg,\n         arbitrary_enum_discriminant,"}, {"sha": "10bab2d889a60a00e6b5d85a73be2c2baa41601a", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -93,7 +93,7 @@ impl CustomStruct {\n \n     fn test_alias(\n         value: CustomAlias,\n-        reference: &CustomAlias, //~ ERROR passing `CustomAlias<>` by reference\n+        reference: &CustomAlias, //~ ERROR passing `CustomAlias<'_>` by reference\n     ) {\n     }\n }"}, {"sha": "69cf20656d7b14dc8ea9503733e2f21e0e386780", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -94,11 +94,11 @@ error: passing `CustomStruct` by reference\n LL |         reference: &CustomStruct,\n    |                    ^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n \n-error: passing `CustomAlias<>` by reference\n+error: passing `CustomAlias<'_>` by reference\n   --> $DIR/rustc_pass_by_value.rs:96:20\n    |\n LL |         reference: &CustomAlias,\n-   |                    ^^^^^^^^^^^^ help: try passing by value: `CustomAlias<>`\n+   |                    ^^^^^^^^^^^^ help: try passing by value: `CustomAlias<'_>`\n \n error: passing `WithParameters<T, 1>` by reference\n   --> $DIR/rustc_pass_by_value.rs:110:20"}, {"sha": "ac197dfe6ff69ec3bcd8b64508b2f658d24af2ed", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the anonymous lifetime #2 defined here\n+note: lifetime parameter instantiated with the anonymous lifetime as defined here\n   --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n-note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n+note: but lifetime parameter must outlive the anonymous lifetime as defined here\n   --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}"}, {"sha": "e2f1710fa281c0b358028b05745bcd64f5d7df9c", "filename": "src/test/ui/generic-associated-types/issue-95305.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -3,15 +3,18 @@\n // at some point in the future.\n \n #![feature(generic_associated_types)]\n-\n+#![feature(anonymous_lifetime_in_impl_trait)]\n trait Foo {\n     type Item<'a>;\n }\n \n fn foo(x: &impl Foo<Item<'_> = u32>) { }\n                        //~^ ERROR `'_` cannot be used here [E0637]\n \n+// Ok: the anonymous lifetime is bound to the function.\n fn bar(x: &impl for<'a> Foo<Item<'a> = &'_ u32>) { }\n-                                      //~^ ERROR missing lifetime specifier\n+\n+// Ok: the anonymous lifetime is bound to the function.\n+fn baz(x: &impl for<'a> Foo<Item<'a> = &u32>) { }\n \n fn main() {}"}, {"sha": "d8557525f54ed589d7a1fbcc80b60ca24576c514", "filename": "src/test/ui/generic-associated-types/issue-95305.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -4,18 +4,6 @@ error[E0637]: `'_` cannot be used here\n LL | fn foo(x: &impl Foo<Item<'_> = u32>) { }\n    |                          ^^ `'_` is a reserved lifetime name\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-95305.rs:14:41\n-   |\n-LL | fn bar(x: &impl for<'a> Foo<Item<'a> = &'_ u32>) { }\n-   |                                         ^^ expected named lifetime parameter\n-   |\n-help: consider using the `'a` lifetime\n-   |\n-LL | fn bar(x: &impl for<'a> Foo<Item<'a> = &'a u32>) { }\n-   |                                         ~~\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0106, E0637.\n-For more information about an error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "e9f50b41f6acd9207133c17325dfaa4b02e240ac", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -6,7 +6,7 @@ LL |     fn next(&'a mut self) -> Option<Self::Item>\n    |\n    = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n               found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n-note: the anonymous lifetime #1 defined here...\n+note: the anonymous lifetime as defined here...\n   --> $DIR/issue-37884.rs:6:5\n    |\n LL |     fn next(&'a mut self) -> Option<Self::Item>"}, {"sha": "06256ebbc29a30fb3f351f6dbdea5ca525d706a9", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -2,14 +2,14 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n+   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrAnon(0)) {\n-   |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:13 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n+   |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "fe291e021bc54ee7ffa47794297f5be089a4baae", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+// gate-test-anonymous_lifetime_in_impl_trait\n+// Verify the behaviour of `feature(anonymous_lifetime_in_impl_trait)`.\n+\n+fn f(_: impl Iterator<Item = &'_ ()>) {}\n+//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+//~| ERROR missing lifetime specifier\n+\n+// Anonymous lifetimes in async fn are already allowed.\n+// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+\n+// Anonymous lifetimes in async fn are already allowed.\n+// But that lifetime does not participate in resolution.\n+async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "9adc9679eee479d6777ca20e1f02383ed996fef5", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -0,0 +1,44 @@\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:5:31\n+   |\n+LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n+   |                               ^^\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:50\n+   |\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                  ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                  ~~~~~~~\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:31\n+   |\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                               ^^\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:18:56\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                        ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                        ~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0106, E0658.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "dcc716f56b70510ac6b39960b47a2de4dcfb0e16", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -1,2 +1,19 @@\n-fn f(_: impl Iterator<Item = &'_ ()>) {} //~ ERROR missing lifetime specifier\n+// edition:2021\n+\n+#![feature(anonymous_lifetime_in_impl_trait)]\n+\n+// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+fn f(_: impl Iterator<Item = &'_ ()>) {}\n+\n+// But that lifetime does not participate in resolution.\n+fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR missing lifetime specifier\n+\n+// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+\n+// But that lifetime does not participate in resolution.\n+async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR missing lifetime specifier\n+\n fn main() {}"}, {"sha": "d3c64cb466d74089f643c86791db05cbe4741dbf", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -1,14 +1,27 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime.rs:1:31\n+  --> $DIR/impl-trait-missing-lifetime.rs:9:50\n    |\n-LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n-   |                               ^^ expected named lifetime parameter\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                  ^^ expected named lifetime parameter\n    |\n-help: consider introducing a named lifetime parameter\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n    |\n-LL | fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n-   |     ++++                          ~~\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                  ~~~~~~~\n \n-error: aborting due to previous error\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime.rs:16:56\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                        ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                        ~~~~~~~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}, {"sha": "94f6dc266245a11e4ca722b9df9d660ec027edb0", "filename": "src/test/ui/wf/wf-in-foreign-fn-decls-issue-80468.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-foreign-fn-decls-issue-80468.stderr?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -21,11 +21,11 @@ note: because this has an unmet lifetime requirement\n    |\n LL | pub struct Wrapper<T: Trait>(T);\n    |                       ^^^^^ introduces a `'static` lifetime requirement\n-note: the anonymous lifetime #1 defined here...\n-  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:5\n+note: the anonymous lifetime as defined here...\n+  --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:16:29\n    |\n LL |     pub fn repro(_: Wrapper<Ref>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^\n note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n   --> $DIR/wf-in-foreign-fn-decls-issue-80468.rs:13:1\n    |"}, {"sha": "94db1773fda69b081ca6b62230f5aacb3659491c", "filename": "src/tools/clippy/clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{get_trait_def_id, paths, return_ty, trait_ref_of_method};\n use if_chain::if_chain;\n-use rustc_hir::{ImplItem, ImplItemKind};\n+use rustc_hir::{GenericParamKind, ImplItem, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             let decl = &signature.decl;\n             if decl.implicit_self.has_implicit_self();\n             if decl.inputs.len() == 1;\n-            if impl_item.generics.params.is_empty();\n+            if impl_item.generics.params.iter().all(|p| matches!(p.kind, GenericParamKind::Lifetime { .. }));\n \n             // Check if return type is String\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);"}, {"sha": "083c437a293c0937b6be1cdc9f3431bc8ec631f0", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n-    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, LifetimeParamKind, ParamName, PolyTraitRef,\n+    PredicateOrigin, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -338,7 +338,10 @@ fn could_use_elision<'tcx>(\n fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     let mut allowed_lts = FxHashSet::default();\n     for par in named_generics.iter() {\n-        if let GenericParamKind::Lifetime { .. } = par.kind {\n+        if let GenericParamKind::Lifetime {\n+            kind: LifetimeParamKind::Explicit,\n+        } = par.kind\n+        {\n             allowed_lts.insert(RefLt::Named(par.name.ident().name));\n         }\n     }\n@@ -379,6 +382,7 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n                 self.lts.push(RefLt::Static);\n             } else if let LifetimeName::Param(_, ParamName::Fresh) = lt.name {\n                 // Fresh lifetimes generated should be ignored.\n+                self.lts.push(RefLt::Unnamed);\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n             } else {"}, {"sha": "8571607054a0070bed5709fe483b66b8008b3394", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -495,12 +495,13 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n     if let FnRetTy::Return(ty) = sig.decl.output\n         && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n     {\n+        let out_region = cx.tcx.named_region(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n             .filter_map(get_rptr_lm)\n-            .filter(|&(lt, _, _)| lt.name == out.name)\n+            .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then(|| span))\n             .collect();\n         if let Some(args) = args"}, {"sha": "94945b2e1a9e250fe64c6a4958108dd79d9070e6", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=f5e9cb53ab35bdf6e1bdd75894eca93ac7d8a0be", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                         return false;\n                     }\n \n-                    let ltopt = if lt.is_elided() {\n+                    let ltopt = if lt.name.is_anonymous() {\n                         String::new()\n                     } else {\n                         format!(\"{} \", lt.name.ident().as_str())"}]}