{"sha": "6568b086a27c750c9ac69a00f5146a3b51881fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NjhiMDg2YTI3Yzc1MGM5YWM2OWEwMGY1MTQ2YTNiNTE4ODFmYjc=", "commit": {"author": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-08-16T13:39:17Z"}, "committer": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-09-04T07:46:44Z"}, "message": "Polonius: don't emit `var_maybe_initialized_on_exit`", "tree": {"sha": "9d03df6e5823b4d4535a910d149dda6d6a4f5416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d03df6e5823b4d4535a910d149dda6d6a4f5416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6568b086a27c750c9ac69a00f5146a3b51881fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6568b086a27c750c9ac69a00f5146a3b51881fb7", "html_url": "https://github.com/rust-lang/rust/commit/6568b086a27c750c9ac69a00f5146a3b51881fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6568b086a27c750c9ac69a00f5146a3b51881fb7/comments", "author": null, "committer": null, "parents": [{"sha": "9f39e001df1f665ce4f2bdbc38576f5fcc02f898", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f39e001df1f665ce4f2bdbc38576f5fcc02f898", "html_url": "https://github.com/rust-lang/rust/commit/9f39e001df1f665ce4f2bdbc38576f5fcc02f898"}], "stats": {"total": 63, "additions": 0, "deletions": 63}, "files": [{"sha": "0990074c990d08f447bf88bd575b6e52c8e91fb0", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6568b086a27c750c9ac69a00f5146a3b51881fb7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6568b086a27c750c9ac69a00f5146a3b51881fb7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=6568b086a27c750c9ac69a00f5146a3b51881fb7", "patch": "@@ -131,12 +131,6 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         for local in live_locals {\n             self.reset_local_state();\n             self.add_defs_for(local);\n-\n-            // FIXME: this is temporary until we can generate our own initialization\n-            if self.cx.typeck.borrowck_context.all_facts.is_some() {\n-                self.add_polonius_var_maybe_initialized_on_exit_for(local)\n-            }\n-\n             self.compute_use_live_points_for(local);\n             self.compute_drop_live_points_for(local);\n \n@@ -157,63 +151,6 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n     }\n \n-    // WARNING: panics if self.cx.typeck.borrowck_context.all_facts != None\n-    //\n-    // FIXME: this analysis (the initialization tracking) should be\n-    // done in Polonius, but isn't yet.\n-    fn add_polonius_var_maybe_initialized_on_exit_for(&mut self, local: Local) {\n-        let move_path = self.cx.move_data.rev_lookup.find_local(local);\n-        let facts = self.cx.typeck.borrowck_context.all_facts.as_mut().unwrap();\n-        for block in self.cx.body.basic_blocks().indices() {\n-            debug!(\"polonius: generating initialization facts for {:?} in {:?}\", local, block);\n-\n-            // iterate through the block, applying the effects of each statement\n-            // up to and including location, and populate `var_maybe_initialized_on_exit`\n-            self.cx.flow_inits.reset_to_entry_of(block);\n-            let start_location = Location { block, statement_index: 0 };\n-            self.cx.flow_inits.apply_local_effect(start_location);\n-\n-            for statement_index in 0..self.cx.body[block].statements.len() {\n-                let current_location = Location { block, statement_index };\n-\n-                self.cx.flow_inits.reconstruct_statement_effect(current_location);\n-\n-                // statement has not yet taken effect:\n-                if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                    facts\n-                        .var_maybe_initialized_on_exit\n-                        .push((local, self.cx.location_table.start_index(current_location)));\n-                }\n-\n-                // statement has now taken effect\n-                self.cx.flow_inits.apply_local_effect(current_location);\n-\n-                if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                    facts\n-                        .var_maybe_initialized_on_exit\n-                        .push((local, self.cx.location_table.mid_index(current_location)));\n-                }\n-            }\n-\n-            let terminator_location = self.cx.body.terminator_loc(block);\n-\n-            if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                facts\n-                    .var_maybe_initialized_on_exit\n-                    .push((local, self.cx.location_table.start_index(terminator_location)));\n-            }\n-\n-            // apply the effects of the terminator and push it if needed\n-            self.cx.flow_inits.reset_to_exit_of(block);\n-\n-            if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n-                facts\n-                    .var_maybe_initialized_on_exit\n-                    .push((local, self.cx.location_table.mid_index(terminator_location)));\n-            }\n-        }\n-    }\n-\n     /// Clear the value of fields that are \"per local variable\".\n     fn reset_local_state(&mut self) {\n         self.defs.clear();"}]}