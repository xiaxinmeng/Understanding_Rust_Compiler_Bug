{"sha": "c287afb2fa530d22563391737ac1d44faf2f9b2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyODdhZmIyZmE1MzBkMjI1NjMzOTE3MzdhYzFkNDRmYWYyZjliMmU=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-05T15:18:32Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-20T08:05:00Z"}, "message": "libcore: DSTify ops traits, Equiv\n\nThis commit relaxes constraints on generics and traits within the\n`core::ops` module and for the `Equiv` trait.", "tree": {"sha": "3d27cfbe8ff9dfe89d4ebe1827807483d9f2cf4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d27cfbe8ff9dfe89d4ebe1827807483d9f2cf4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c287afb2fa530d22563391737ac1d44faf2f9b2e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c287afb2fa530d22563391737ac1d44faf2f9b2e", "html_url": "https://github.com/rust-lang/rust/commit/c287afb2fa530d22563391737ac1d44faf2f9b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c287afb2fa530d22563391737ac1d44faf2f9b2e/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004db80afe08b28d79741c486ceb8398e6725829", "url": "https://api.github.com/repos/rust-lang/rust/commits/004db80afe08b28d79741c486ceb8398e6725829", "html_url": "https://github.com/rust-lang/rust/commit/004db80afe08b28d79741c486ceb8398e6725829"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "51122d0a17023196d9d1c5200bcc6d86632f2b7c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c287afb2fa530d22563391737ac1d44faf2f9b2e/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c287afb2fa530d22563391737ac1d44faf2f9b2e/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c287afb2fa530d22563391737ac1d44faf2f9b2e", "patch": "@@ -241,7 +241,7 @@ pub trait PartialOrd for Sized?: PartialEq {\n /// container types; e.g. it is often desirable to be able to use `&str`\n /// values to look up entries in a container with `String` keys.\n #[experimental = \"Better solutions may be discovered.\"]\n-pub trait Equiv<T> for Sized? {\n+pub trait Equiv<Sized? T> for Sized? {\n     /// Implement this function to decide equivalent values.\n     fn equiv(&self, other: &T) -> bool;\n }"}, {"sha": "185c937eb6b37b610300215c791ec9f6ae103e6b", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c287afb2fa530d22563391737ac1d44faf2f9b2e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c287afb2fa530d22563391737ac1d44faf2f9b2e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=c287afb2fa530d22563391737ac1d44faf2f9b2e", "patch": "@@ -112,7 +112,7 @@ pub trait Drop {\n  * ```\n  */\n #[lang=\"add\"]\n-pub trait Add<RHS,Result> {\n+pub trait Add<Sized? RHS,Result> for Sized? {\n     /// The method for the `+` operator\n     fn add(&self, rhs: &RHS) -> Result;\n }\n@@ -153,7 +153,7 @@ add_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"sub\"]\n-pub trait Sub<RHS,Result> {\n+pub trait Sub<Sized? RHS, Result> for Sized? {\n     /// The method for the `-` operator\n     fn sub(&self, rhs: &RHS) -> Result;\n }\n@@ -194,7 +194,7 @@ sub_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"mul\"]\n-pub trait Mul<RHS,Result> {\n+pub trait Mul<Sized? RHS, Result>  for Sized? {\n     /// The method for the `*` operator\n     fn mul(&self, rhs: &RHS) -> Result;\n }\n@@ -235,7 +235,7 @@ mul_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"div\"]\n-pub trait Div<RHS,Result> {\n+pub trait Div<Sized? RHS, Result> for Sized? {\n     /// The method for the `/` operator\n     fn div(&self, rhs: &RHS) -> Result;\n }\n@@ -276,7 +276,7 @@ div_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n  * ```\n  */\n #[lang=\"rem\"]\n-pub trait Rem<RHS,Result> {\n+pub trait Rem<Sized? RHS, Result>  for Sized? {\n     /// The method for the `%` operator\n     fn rem(&self, rhs: &RHS) -> Result;\n }\n@@ -331,7 +331,7 @@ rem_float_impl!(f64, fmod)\n  * ```\n  */\n #[lang=\"neg\"]\n-pub trait Neg<Result> {\n+pub trait Neg<Result> for Sized? {\n     /// The method for the unary `-` operator\n     fn neg(&self) -> Result;\n }\n@@ -388,7 +388,7 @@ neg_uint_impl!(u64, i64)\n  * ```\n  */\n #[lang=\"not\"]\n-pub trait Not<Result> {\n+pub trait Not<Result> for Sized? {\n     /// The method for the unary `!` operator\n     fn not(&self) -> Result;\n }\n@@ -430,7 +430,7 @@ not_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"bitand\"]\n-pub trait BitAnd<RHS,Result> {\n+pub trait BitAnd<Sized? RHS, Result> for Sized? {\n     /// The method for the `&` operator\n     fn bitand(&self, rhs: &RHS) -> Result;\n }\n@@ -471,7 +471,7 @@ bitand_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"bitor\"]\n-pub trait BitOr<RHS,Result> {\n+pub trait BitOr<Sized? RHS, Result> for Sized? {\n     /// The method for the `|` operator\n     fn bitor(&self, rhs: &RHS) -> Result;\n }\n@@ -512,7 +512,7 @@ bitor_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"bitxor\"]\n-pub trait BitXor<RHS,Result> {\n+pub trait BitXor<Sized? RHS, Result> for Sized? {\n     /// The method for the `^` operator\n     fn bitxor(&self, rhs: &RHS) -> Result;\n }\n@@ -553,7 +553,7 @@ bitxor_impl!(bool uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"shl\"]\n-pub trait Shl<RHS,Result> {\n+pub trait Shl<Sized? RHS, Result> for Sized? {\n     /// The method for the `<<` operator\n     fn shl(&self, rhs: &RHS) -> Result;\n }\n@@ -596,7 +596,7 @@ shl_impl!(uint u8 u16 u32 u64 int i8 i16 i32 i64)\n  * ```\n  */\n #[lang=\"shr\"]\n-pub trait Shr<RHS,Result> {\n+pub trait Shr<Sized? RHS, Result> for Sized? {\n     /// The method for the `>>` operator\n     fn shr(&self, rhs: &RHS) -> Result;\n }\n@@ -669,7 +669,7 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n  * ```\n  */\n #[lang=\"index_mut\"]\n-pub trait IndexMut<Sized? Index, Result> for Sized? {\n+pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n     /// The method for the indexing (`Foo[Bar]`) operation\n     fn index_mut<'a>(&'a mut self, index: &Index) -> &'a mut Result;\n }\n@@ -712,7 +712,7 @@ pub trait IndexMut<Sized? Index, Result> for Sized? {\n  * ```\n  */\n #[lang=\"slice\"]\n-pub trait Slice<Idx, Sized? Result> for Sized? {\n+pub trait Slice<Sized? Idx, Sized? Result> for Sized? {\n     /// The method for the slicing operation foo[]\n     fn as_slice_<'a>(&'a self) -> &'a Result;\n     /// The method for the slicing operation foo[from..]\n@@ -761,7 +761,7 @@ pub trait Slice<Idx, Sized? Result> for Sized? {\n  * ```\n  */\n #[lang=\"slice_mut\"]\n-pub trait SliceMut<Idx, Sized? Result> for Sized? {\n+pub trait SliceMut<Sized? Idx, Sized? Result> for Sized? {\n     /// The method for the slicing operation foo[]\n     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Result;\n     /// The method for the slicing operation foo[from..]\n@@ -800,7 +800,7 @@ pub trait SliceMut<Idx, Sized? Result> for Sized? {\n  * ```\n  */\n #[lang=\"deref\"]\n-pub trait Deref<Sized? Result> {\n+pub trait Deref<Sized? Result> for Sized? {\n     /// The method called to dereference a value\n     fn deref<'a>(&'a self) -> &'a Result;\n }\n@@ -859,21 +859,21 @@ impl<'a, Sized? T> DerefMut<T> for &'a mut T {\n \n /// A version of the call operator that takes an immutable receiver.\n #[lang=\"fn\"]\n-pub trait Fn<Args,Result> {\n+pub trait Fn<Args,Result> for Sized? {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call(&self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a mutable receiver.\n #[lang=\"fn_mut\"]\n-pub trait FnMut<Args,Result> {\n+pub trait FnMut<Args,Result> for Sized? {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Result;\n }\n \n /// A version of the call operator that takes a by-value receiver.\n #[lang=\"fn_once\"]\n-pub trait FnOnce<Args,Result> {\n+pub trait FnOnce<Args,Result> for Sized? {\n     /// This is called when the call operator is used.\n     extern \"rust-call\" fn call_once(self, args: Args) -> Result;\n }"}]}