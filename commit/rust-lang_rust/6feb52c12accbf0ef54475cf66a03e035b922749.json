{"sha": "6feb52c12accbf0ef54475cf66a03e035b922749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZWI1MmMxMmFjY2JmMGVmNTQ0NzVjZjY2YTAzZTAzNWI5MjI3NDk=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T22:55:21Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-12T22:55:21Z"}, "message": "Add more patterns, tests and fix keywords", "tree": {"sha": "62af8c1e8c781e672f6cc9a498ccb2a5abb17274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62af8c1e8c781e672f6cc9a498ccb2a5abb17274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6feb52c12accbf0ef54475cf66a03e035b922749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6feb52c12accbf0ef54475cf66a03e035b922749", "html_url": "https://github.com/rust-lang/rust/commit/6feb52c12accbf0ef54475cf66a03e035b922749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6feb52c12accbf0ef54475cf66a03e035b922749/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357667104371d446cc029267e8095365c17ba085", "url": "https://api.github.com/repos/rust-lang/rust/commits/357667104371d446cc029267e8095365c17ba085", "html_url": "https://github.com/rust-lang/rust/commit/357667104371d446cc029267e8095365c17ba085"}], "stats": {"total": 770, "additions": 297, "deletions": 473}, "files": [{"sha": "79432113c0abc8bc6208cb3ac65eb662b0d7a1a8", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 237, "deletions": 453, "changes": 690, "blob_url": "https://github.com/rust-lang/rust/blob/6feb52c12accbf0ef54475cf66a03e035b922749/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6feb52c12accbf0ef54475cf66a03e035b922749/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=6feb52c12accbf0ef54475cf66a03e035b922749", "patch": "@@ -60,32 +60,104 @@ fn add_keyword(\n }\n \n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n+    let has_trait_or_impl_parent = ctx.has_impl_parent || ctx.has_trait_parent;\n+    if ctx.trait_as_prev_sibling || ctx.impl_as_prev_sibling {\n+        add_keyword(ctx, acc, \"where\", \"where \", true);\n+        return;\n+    }\n+    if ctx.unsafe_is_prev {\n+        add_keyword(ctx, acc, \"fn\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n+        add_keyword(\n+            ctx,\n+            acc,\n+            \"trait\",\n+            \"trait $0 {}\",\n+            (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        );\n+        add_keyword(\n+            ctx,\n+            acc,\n+            \"impl\",\n+            \"impl $0 {}\",\n+            (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        );\n+        return;\n+    }\n     add_keyword(ctx, acc, \"fn\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"use\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"impl\", \"impl $0 {}\", ctx.is_new_item);\n-    add_keyword(ctx, acc, \"trait\", \"impl $0 {}\", ctx.is_new_item);\n-    add_keyword(ctx, acc, \"enum\", \"enum $0 {}\", ctx.is_new_item && !ctx.unsafe_is_prev);\n-    add_keyword(ctx, acc, \"struct\", \"struct $0 {}\", ctx.is_new_item && !ctx.unsafe_is_prev);\n-    add_keyword(ctx, acc, \"union\", \"union $0 {}\", ctx.is_new_item && !ctx.unsafe_is_prev);\n-    add_keyword(ctx, acc, \"match\", \"match $0 {}\", ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"loop\", \"loop {$0}\", ctx.block_expr_parent);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"use\",\n+        \"use \",\n+        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"impl\",\n+        \"impl $0 {}\",\n+        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"trait\",\n+        \"trait $0 {}\",\n+        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+    );\n+    add_keyword(ctx, acc, \"enum\", \"enum $0 {}\", ctx.is_new_item && !has_trait_or_impl_parent);\n+    add_keyword(ctx, acc, \"struct\", \"struct $0 {}\", ctx.is_new_item && !has_trait_or_impl_parent);\n+    add_keyword(ctx, acc, \"union\", \"union $0 {}\", ctx.is_new_item && !has_trait_or_impl_parent);\n+    add_keyword(ctx, acc, \"match\", \"match $0 {}\", ctx.block_expr_parent || ctx.is_match_arm);\n+    add_keyword(ctx, acc, \"loop\", \"loop {$0}\", ctx.block_expr_parent || ctx.is_match_arm);\n     add_keyword(ctx, acc, \"while\", \"while $0 {}\", ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"let\", \"let \", ctx.if_is_prev || ctx.block_expr_parent);\n+    add_keyword(ctx, acc, \"if\", \"if \", ctx.if_is_prev || ctx.block_expr_parent || ctx.is_match_arm);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"if let\",\n+        \"if let \",\n+        ctx.if_is_prev || ctx.block_expr_parent || ctx.is_match_arm,\n+    );\n     add_keyword(ctx, acc, \"else\", \"else {$0}\", ctx.after_if);\n     add_keyword(ctx, acc, \"else if\", \"else if $0 {}\", ctx.after_if);\n-    add_keyword(ctx, acc, \"mod\", \"mod $0 {}\", ctx.is_new_item || ctx.block_expr_parent);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"mod\",\n+        \"mod $0 {}\",\n+        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+    );\n     add_keyword(ctx, acc, \"mut\", \"mut \", ctx.bind_pat_parent || ctx.ref_pat_parent);\n     add_keyword(ctx, acc, \"const\", \"const \", ctx.is_new_item || ctx.block_expr_parent);\n     add_keyword(ctx, acc, \"type\", \"type \", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"static\", \"static \", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"extern\", \"extern \", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"unsafe\", \"unsafe \", ctx.is_new_item || ctx.block_expr_parent);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"static\",\n+        \"static \",\n+        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"extern\",\n+        \"extern \",\n+        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"unsafe\",\n+        \"unsafe \",\n+        ctx.is_new_item || ctx.block_expr_parent || ctx.is_match_arm,\n+    );\n     add_keyword(ctx, acc, \"continue\", \"continue;\", ctx.in_loop_body && ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"break\", \"break;\", ctx.in_loop_body && ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"continue\", \"continue\", ctx.in_loop_body && !ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"break\", \"break\", ctx.in_loop_body && !ctx.can_be_stmt);\n-    add_keyword(ctx, acc, \"pub\", \"pub \", ctx.is_new_item && !ctx.inside_trait);\n-    add_keyword(ctx, acc, \"where\", \"where \", ctx.trait_as_prev_sibling || ctx.impl_as_prev_sibling);\n+    add_keyword(ctx, acc, \"pub\", \"pub \", ctx.is_new_item && !ctx.has_trait_parent);\n \n     let fn_def = match &ctx.function_syntax {\n         Some(it) => it,\n@@ -111,21 +183,17 @@ fn complete_return(\n #[cfg(test)]\n mod tests {\n     use crate::completion::{\n-        test_utils::{do_completion, get_completions},\n-        CompletionItem, CompletionKind,\n+        test_utils::get_completions,\n+        CompletionKind,\n     };\n     use insta::assert_debug_snapshot;\n \n-    fn do_keyword_completion(code: &str) -> Vec<CompletionItem> {\n-        do_completion(code, CompletionKind::Keyword)\n-    }\n-\n     fn get_keyword_completions(code: &str) -> Vec<String> {\n         get_completions(code, CompletionKind::Keyword)\n     }\n \n     #[test]\n-    fn completes_keywords_in_use_stmt() {\n+    fn test_keywords_in_use_stmt() {\n         assert_debug_snapshot!(\n             get_keyword_completions(r\"use <|>\"),\n             @r###\"\n@@ -159,20 +227,24 @@ mod tests {\n     }\n \n     #[test]\n-    fn completes_various_keywords_in_function() {\n+    fn test_keywords_in_function() {\n         assert_debug_snapshot!(\n             get_keyword_completions(r\"fn quux() { <|> }\"),\n             @r###\"\n         [\n             \"kw const\",\n             \"kw extern\",\n             \"kw fn\",\n+            \"kw if\",\n+            \"kw if let\",\n+            \"kw impl\",\n             \"kw let\",\n             \"kw loop\",\n             \"kw match\",\n             \"kw mod\",\n             \"kw return\",\n             \"kw static\",\n+            \"kw trait\",\n             \"kw type\",\n             \"kw unsafe\",\n             \"kw use\",\n@@ -183,9 +255,37 @@ mod tests {\n     }\n \n     #[test]\n-    fn completes_else_after_if() {\n+    fn test_keywords_inside_block() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n+            get_keyword_completions(r\"fn quux() { if true { <|> } }\"),\n+            @r###\"\n+        [\n+            \"kw const\",\n+            \"kw extern\",\n+            \"kw fn\",\n+            \"kw if\",\n+            \"kw if let\",\n+            \"kw impl\",\n+            \"kw let\",\n+            \"kw loop\",\n+            \"kw match\",\n+            \"kw mod\",\n+            \"kw return\",\n+            \"kw static\",\n+            \"kw trait\",\n+            \"kw type\",\n+            \"kw unsafe\",\n+            \"kw use\",\n+            \"kw while\",\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn test_keywords_after_if() {\n+        assert_debug_snapshot!(\n+            get_keyword_completions(\n                 r\"\n                 fn quux() {\n                     if true {\n@@ -196,505 +296,189 @@ mod tests {\n             ),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"else\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"else {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"else if\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"else if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"return;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 108..108,\n-                delete: 108..108,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw const\",\n+            \"kw else\",\n+            \"kw else if\",\n+            \"kw extern\",\n+            \"kw fn\",\n+            \"kw if\",\n+            \"kw if let\",\n+            \"kw impl\",\n+            \"kw let\",\n+            \"kw loop\",\n+            \"kw match\",\n+            \"kw mod\",\n+            \"kw return\",\n+            \"kw static\",\n+            \"kw trait\",\n+            \"kw type\",\n+            \"kw unsafe\",\n+            \"kw use\",\n+            \"kw while\",\n         ]\n         \"###\n         );\n     }\n \n     #[test]\n-    fn test_completion_return_value() {\n+    fn test_keywords_in_match_arm() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n+            get_keyword_completions(\n                 r\"\n                 fn quux() -> i32 {\n-                    <|>\n-                    92\n+                    match () {\n+                        () => <|>\n+                    }\n                 }\n                 \",\n             ),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 56..56,\n-                delete: 56..56,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 56..56,\n-                delete: 56..56,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 56..56,\n-                delete: 56..56,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 56..56,\n-                delete: 56..56,\n-                insert: \"return $0;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 56..56,\n-                delete: 56..56,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw if\",\n+            \"kw if let\",\n+            \"kw loop\",\n+            \"kw match\",\n+            \"kw return\",\n+            \"kw unsafe\",\n         ]\n         \"###\n         );\n+    }\n+\n+    #[test]\n+    fn test_keywords_in_trait_def() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() {\n-                    <|>\n-                    92\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"trait My { <|> }\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"return;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 49..49,\n-                delete: 49..49,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw const\",\n+            \"kw fn\",\n+            \"kw type\",\n+            \"kw unsafe\",\n         ]\n         \"###\n         );\n     }\n \n     #[test]\n-    fn dont_add_semi_after_return_if_not_a_statement() {\n+    fn test_keywords_in_impl_def() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() -> i32 {\n-                    match () {\n-                        () => <|>\n-                    }\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"impl My { <|> }\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 97..97,\n-                delete: 97..97,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 97..97,\n-                delete: 97..97,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 97..97,\n-                delete: 97..97,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 97..97,\n-                delete: 97..97,\n-                insert: \"return $0\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 97..97,\n-                delete: 97..97,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw const\",\n+            \"kw fn\",\n+            \"kw pub\",\n+            \"kw type\",\n+            \"kw unsafe\",\n         ]\n         \"###\n         );\n     }\n \n     #[test]\n-    fn last_return_in_block_has_semi() {\n+    fn test_keywords_in_loop() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() -> i32 {\n-                    if condition {\n-                        <|>\n-                    }\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"fn my() { loop { <|> } }\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"return $0;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw break\",\n+            \"kw const\",\n+            \"kw continue\",\n+            \"kw extern\",\n+            \"kw fn\",\n+            \"kw if\",\n+            \"kw if let\",\n+            \"kw impl\",\n+            \"kw let\",\n+            \"kw loop\",\n+            \"kw match\",\n+            \"kw mod\",\n+            \"kw return\",\n+            \"kw static\",\n+            \"kw trait\",\n+            \"kw type\",\n+            \"kw unsafe\",\n+            \"kw use\",\n+            \"kw while\",\n         ]\n         \"###\n         );\n+    }\n+\n+    #[test]\n+    fn test_keywords_after_unsafe_in_item_list() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() -> i32 {\n-                    if condition {\n-                        <|>\n-                    }\n-                    let x = 92;\n-                    x\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"unsafe <|>\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"return $0;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 95..95,\n-                delete: 95..95,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw fn\",\n+            \"kw impl\",\n+            \"kw trait\",\n         ]\n         \"###\n         );\n     }\n \n     #[test]\n-    fn completes_break_and_continue_in_loops() {\n+    fn test_keywords_after_unsafe_in_block_expr() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() -> i32 {\n-                    loop { <|> }\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"fn my_fn() { unsafe <|> }\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"break\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"break;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"continue\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"continue;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"return $0;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 63..63,\n-                delete: 63..63,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw fn\",\n+            \"kw impl\",\n+            \"kw trait\",\n         ]\n         \"###\n         );\n+    }\n \n-        // No completion: lambda isolates control flow\n+    #[test]\n+    fn test_mut_in_ref_and_in_fn_parameters_list() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn quux() -> i32 {\n-                    loop { || { <|> } }\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"fn my_fn(&<|>) {}\"),\n+            @r###\"\n+        [\n+            \"kw mut\",\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            get_keyword_completions(r\"fn my_fn(<|>) {}\"),\n+            @r###\"\n+        [\n+            \"kw mut\",\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            get_keyword_completions(r\"fn my_fn() { let &<|> }\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 68..68,\n-                delete: 68..68,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 68..68,\n-                delete: 68..68,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 68..68,\n-                delete: 68..68,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 68..68,\n-                delete: 68..68,\n-                insert: \"return $0;\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 68..68,\n-                delete: 68..68,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw mut\",\n         ]\n         \"###\n         );\n     }\n \n     #[test]\n-    fn no_semi_after_break_continue_in_expr() {\n+    fn test_where_keyword() {\n         assert_debug_snapshot!(\n-            do_keyword_completion(\n-                r\"\n-                fn f() {\n-                    loop {\n-                        match () {\n-                            () => br<|>\n-                        }\n-                    }\n-                }\n-                \",\n-            ),\n+            get_keyword_completions(r\"trait A <|>\"),\n+            @r###\"\n+        [\n+            \"kw where\",\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            get_keyword_completions(r\"impl A <|>\"),\n             @r###\"\n         [\n-            CompletionItem {\n-                label: \"break\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"break\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"continue\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"continue\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"if\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"if $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"loop\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"loop {$0}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"match\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"match $0 {}\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"return\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"return\",\n-                kind: Keyword,\n-            },\n-            CompletionItem {\n-                label: \"while\",\n-                source_range: 122..124,\n-                delete: 122..124,\n-                insert: \"while $0 {}\",\n-                kind: Keyword,\n-            },\n+            \"kw where\",\n         ]\n         \"###\n-        )\n+        );\n     }\n }"}, {"sha": "2f96861ca0c3e0fa67d5e8522edc2092f2bb502d", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6feb52c12accbf0ef54475cf66a03e035b922749/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6feb52c12accbf0ef54475cf66a03e035b922749/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=6feb52c12accbf0ef54475cf66a03e035b922749", "patch": "@@ -12,8 +12,9 @@ use ra_syntax::{\n use ra_text_edit::Indel;\n \n use super::patterns::{\n-    has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_ref_pat_parent,\n-    has_trait_as_prev_sibling, if_is_prev, inside_trait, is_in_loop_body, unsafe_is_prev,\n+    has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_impl_parent,\n+    has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev, is_in_loop_body,\n+    is_match_arm, unsafe_is_prev,\n };\n use crate::{call_info::ActiveParameter, completion::CompletionConfig, FilePosition};\n use test_utils::mark;\n@@ -70,9 +71,11 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) bind_pat_parent: bool,\n     pub(super) ref_pat_parent: bool,\n     pub(super) in_loop_body: bool,\n-    pub(super) inside_trait: bool,\n+    pub(super) has_trait_parent: bool,\n+    pub(super) has_impl_parent: bool,\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n+    pub(super) is_match_arm: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -136,10 +139,12 @@ impl<'a> CompletionContext<'a> {\n             ref_pat_parent: false,\n             bind_pat_parent: false,\n             block_expr_parent: false,\n-            inside_trait: false,\n+            has_trait_parent: false,\n+            has_impl_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n             if_is_prev: false,\n+            is_match_arm: false,\n         };\n \n         let mut original_file = original_file.syntax().clone();\n@@ -217,11 +222,13 @@ impl<'a> CompletionContext<'a> {\n         self.unsafe_is_prev = unsafe_is_prev(syntax_element.clone());\n         self.if_is_prev = if_is_prev(syntax_element.clone());\n         self.bind_pat_parent = has_bind_pat_parent(syntax_element.clone());\n-        self.ref_pat_parent = has_ref_pat_parent(syntax_element.clone());\n+        self.ref_pat_parent = has_ref_parent(syntax_element.clone());\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n-        self.inside_trait = inside_trait(syntax_element.clone());\n+        self.has_trait_parent = has_trait_parent(syntax_element.clone());\n+        self.has_impl_parent = has_impl_parent(syntax_element.clone());\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());\n+        self.is_match_arm = is_match_arm(syntax_element.clone());\n     }\n \n     fn fill("}, {"sha": "bc37196d53619a95a1c5dd9d3df8582cb1d15eb6", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6feb52c12accbf0ef54475cf66a03e035b922749/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6feb52c12accbf0ef54475cf66a03e035b922749/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=6feb52c12accbf0ef54475cf66a03e035b922749", "patch": "@@ -6,16 +6,42 @@ use ra_syntax::{\n     SyntaxNode, SyntaxToken,\n };\n \n-pub(crate) fn inside_trait(element: SyntaxElement) -> bool {\n-    element.ancestors().find(|it| it.kind() == TRAIT_DEF).is_some()\n+pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element)\n+        .filter(|it| it.kind() == ITEM_LIST)\n+        .and_then(|it| it.parent())\n+        .filter(|it| it.kind() == TRAIT_DEF)\n+        .is_some()\n+}\n+\n+pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element)\n+        .filter(|it| it.kind() == ITEM_LIST)\n+        .and_then(|it| it.parent())\n+        .filter(|it| it.kind() == IMPL_DEF)\n+        .is_some()\n+}\n+\n+pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n }\n \n pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n     element.ancestors().find(|it| it.kind() == BIND_PAT).is_some()\n }\n \n-pub(crate) fn has_ref_pat_parent(element: SyntaxElement) -> bool {\n-    element.ancestors().find(|it| it.kind() == REF_PAT).is_some()\n+pub(crate) fn has_ref_parent(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element)\n+        .filter(|it| it.kind() == REF_PAT || it.kind() == REF_EXPR)\n+        .is_some()\n+}\n+\n+pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n+    not_same_range_ancestor(element.clone()).filter(|it| it.kind() == MATCH_ARM).is_some()\n+        && previous_sibling_or_ancestor_sibling(element)\n+            .and_then(|it| it.into_token())\n+            .filter(|it| it.kind() == FAT_ARROW)\n+            .is_some()\n }\n \n pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n@@ -34,10 +60,6 @@ pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n         .is_some()\n }\n \n-pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n-    not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n-}\n-\n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT_DEF).is_some()\n }\n@@ -114,8 +136,9 @@ fn previous_sibling_or_ancestor_sibling(element: SyntaxElement) -> Option<Syntax\n #[cfg(test)]\n mod tests {\n     use super::{\n-        has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_ref_pat_parent,\n-        has_trait_as_prev_sibling, if_is_prev, inside_trait, unsafe_is_prev,\n+        has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_impl_parent,\n+        has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev, is_match_arm,\n+        unsafe_is_prev,\n     };\n     use crate::completion::test_utils::check_pattern_is_applicable;\n \n@@ -130,8 +153,13 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_inside_trait() {\n-        check_pattern_is_applicable(r\"trait A { fn<|> }\", inside_trait);\n+    fn test_has_trait_parent() {\n+        check_pattern_is_applicable(r\"trait A { f<|> }\", has_trait_parent);\n+    }\n+\n+    #[test]\n+    fn test_has_impl_parent() {\n+        check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n     }\n \n     #[test]\n@@ -151,12 +179,12 @@ mod tests {\n \n     #[test]\n     fn test_has_ref_pat_parent_in_func_parameters() {\n-        check_pattern_is_applicable(r\"fn my_fn(&<|>) {}\", has_ref_pat_parent);\n+        check_pattern_is_applicable(r\"fn my_fn(&m<|>) {}\", has_ref_parent);\n     }\n \n     #[test]\n     fn test_has_ref_pat_parent_in_let_statement() {\n-        check_pattern_is_applicable(r\"fn my_fn() { let &<|> }\", has_ref_pat_parent);\n+        check_pattern_is_applicable(r\"fn my() { let &m<|> }\", has_ref_parent);\n     }\n \n     #[test]\n@@ -168,4 +196,9 @@ mod tests {\n     fn test_has_bind_pat_parent_in_let_statement() {\n         check_pattern_is_applicable(r\"fn my_fn() { let m<|> }\", has_bind_pat_parent);\n     }\n+\n+    #[test]\n+    fn test_is_match_arm() {\n+        check_pattern_is_applicable(r\"fn my_fn() { match () { () => m<|> } }\", is_match_arm);\n+    }\n }"}]}