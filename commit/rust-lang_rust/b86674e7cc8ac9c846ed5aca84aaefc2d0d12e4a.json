{"sha": "b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NjY3NGU3Y2M4YWM5Yzg0NmVkNWFjYTg0YWFlZmMyZDBkMTJlNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-14T04:53:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-14T04:53:24Z"}, "message": "Auto merge of #81956 - ssomers:btree_post_75200, r=Mark-Simulacrum\n\nBTree: remove outdated traces of coercions\n\nThe introduction of `marker::ValMut` (#75200) meant iterators no longer see mutable keys but their code still pretends it does. And settle on the majority style `Some(unsafe {\u2026})` over `unsafe { Some(\u2026) }`.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "6117f79ca9d0a680f1b10acd6c2b65a64aa4ccdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6117f79ca9d0a680f1b10acd6c2b65a64aa4ccdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "html_url": "https://github.com/rust-lang/rust/commit/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e54a21139ae96a2aca3129100b057662e2799b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e54a21139ae96a2aca3129100b057662e2799b9", "html_url": "https://github.com/rust-lang/rust/commit/8e54a21139ae96a2aca3129100b057662e2799b9"}, {"sha": "f81358d5788f28ed50dd6cb18c275aa6612317ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f81358d5788f28ed50dd6cb18c275aa6612317ce", "html_url": "https://github.com/rust-lang/rust/commit/f81358d5788f28ed50dd6cb18c275aa6612317ce"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "801615b3dc261f8665b59f173f5e562f29463154", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=b86674e7cc8ac9c846ed5aca84aaefc2d0d12e4a", "patch": "@@ -1279,7 +1279,7 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            unsafe { Some(self.range.next_unchecked()) }\n+            Some(unsafe { self.range.next_unchecked() })\n         }\n     }\n \n@@ -1310,7 +1310,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            unsafe { Some(self.range.next_back_unchecked()) }\n+            Some(unsafe { self.range.next_back_unchecked() })\n         }\n     }\n }\n@@ -1348,8 +1348,7 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            let (k, v) = unsafe { self.range.next_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n+            Some(unsafe { self.range.next_unchecked() })\n         }\n     }\n \n@@ -1377,8 +1376,7 @@ impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> {\n             None\n         } else {\n             self.length -= 1;\n-            let (k, v) = unsafe { self.range.next_back_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n+            Some(unsafe { self.range.next_back_unchecked() })\n         }\n     }\n }\n@@ -1700,7 +1698,7 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     type Item = (&'a K, &'a V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a V)> {\n-        if self.is_empty() { None } else { unsafe { Some(self.next_unchecked()) } }\n+        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n@@ -1864,12 +1862,7 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     type Item = (&'a K, &'a mut V);\n \n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() {\n-            None\n-        } else {\n-            let (k, v) = unsafe { self.next_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n-        }\n+        if self.is_empty() { None } else { Some(unsafe { self.next_unchecked() }) }\n     }\n \n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n@@ -1907,12 +1900,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> {\n-        if self.is_empty() {\n-            None\n-        } else {\n-            let (k, v) = unsafe { self.next_back_unchecked() };\n-            Some((k, v)) // coerce k from `&mut K` to `&K`\n-        }\n+        if self.is_empty() { None } else { Some(unsafe { self.next_back_unchecked() }) }\n     }\n }\n "}]}