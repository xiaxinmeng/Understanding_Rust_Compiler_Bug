{"sha": "c244dd10343ff96a73879c593bd9253c4073cb90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNDRkZDEwMzQzZmY5NmE3Mzg3OWM1OTNiZDkyNTNjNDA3M2NiOTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T09:26:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T09:26:19Z"}, "message": "Call expr", "tree": {"sha": "a804c3945b9959396be32c7bf8d09d5c0d8cef66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a804c3945b9959396be32c7bf8d09d5c0d8cef66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c244dd10343ff96a73879c593bd9253c4073cb90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c244dd10343ff96a73879c593bd9253c4073cb90", "html_url": "https://github.com/rust-lang/rust/commit/c244dd10343ff96a73879c593bd9253c4073cb90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c244dd10343ff96a73879c593bd9253c4073cb90/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea86d154ec5adde6adb05088a50f01380ffb8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea86d154ec5adde6adb05088a50f01380ffb8bf", "html_url": "https://github.com/rust-lang/rust/commit/aea86d154ec5adde6adb05088a50f01380ffb8bf"}], "stats": {"total": 139, "additions": 122, "deletions": 17}, "files": [{"sha": "5b8a9219c248d02c6e79ed84746957b37e974a20", "filename": "src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -125,6 +125,7 @@ Grammar(\n \n         \"TUPLE_EXPR\",\n         \"PATH_EXPR\",\n+        \"CALL_EXPR\",\n \n         \"EXTERN_BLOCK\",\n         \"ENUM_VARIANT\","}, {"sha": "c411d4d7f387922b0a0b0b62ca625aa687c29aba", "filename": "src/parser/grammar/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fparser%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fparser%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fattributes.rs?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -36,7 +36,7 @@ fn meta_item(p: &mut Parser) {\n         match p.current() {\n             EQ => {\n                 p.bump();\n-                if !expressions::literal(p) {\n+                if expressions::literal(p).is_none() {\n                     p.error(\"expected literal\");\n                 }\n             }\n@@ -56,7 +56,7 @@ fn meta_item_arg_list(p: &mut Parser) {\n         match p.current() {\n             EOF | R_PAREN => break,\n             IDENT => meta_item(p),\n-            c => if !expressions::literal(p) {\n+            c => if expressions::literal(p).is_none() {\n                 let message = \"expected attribute\";\n \n                 if items::ITEM_FIRST.contains(c) {"}, {"sha": "92aaafa3ddf36a306997da3ee4c8c5a91ccd6775", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -13,39 +13,72 @@ use super::*;\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n // }\n-pub(super) fn literal(p: &mut Parser) -> bool {\n+pub(super) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     match p.current() {\n         TRUE_KW | FALSE_KW | INT_NUMBER | FLOAT_NUMBER | BYTE | CHAR | STRING | RAW_STRING\n         | BYTE_STRING | RAW_BYTE_STRING => {\n-            let lit = p.start();\n+            let m = p.start();\n             p.bump();\n-            lit.complete(p, LITERAL);\n-            true\n+            Some(m.complete(p, LITERAL))\n         }\n-        _ => false,\n+        _ => None,\n     }\n }\n \n pub(super) fn expr(p: &mut Parser) {\n-    if literal(p) {\n-        return;\n+    let mut lhs = atom_expr(p);\n+\n+    while let Some(m) = lhs {\n+        match p.current() {\n+            L_PAREN => lhs = Some(call_expr(p, m)),\n+            _ => break,\n+        }\n+    }\n+}\n+\n+fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n+    match literal(p) {\n+        Some(m) => return Some(m),\n+        None => (),\n     }\n     if paths::is_path_start(p) {\n-        return path_expr(p);\n+        return Some(path_expr(p));\n     }\n \n     match p.current() {\n-        L_PAREN => tuple_expr(p),\n-        _ => p.error(\"expected expression\"),\n+        L_PAREN => Some(tuple_expr(p)),\n+        _ => {\n+            p.error(\"expected expression\");\n+            None\n+        }\n     }\n }\n \n-fn tuple_expr(p: &mut Parser) {\n+fn tuple_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(L_PAREN));\n     let m = p.start();\n     p.expect(L_PAREN);\n     p.expect(R_PAREN);\n-    m.complete(p, TUPLE_EXPR);\n+    m.complete(p, TUPLE_EXPR)\n+}\n+\n+// test call_expr\n+// fn foo() {\n+//     let _ = f();\n+//     let _ = f()(1)(1, 2,);\n+// }\n+fn call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n+    assert!(p.at(L_PAREN));\n+    let m = lhs.precede(p);\n+    p.bump();\n+    while !p.at(R_PAREN) && !p.at(EOF) {\n+        expr(p);\n+        if !p.at(R_PAREN) && !p.expect(COMMA) {\n+            break;\n+        }\n+    }\n+    p.eat(R_PAREN);\n+    m.complete(p, CALL_EXPR)\n }\n \n // test path_expr\n@@ -54,9 +87,9 @@ fn tuple_expr(p: &mut Parser) {\n //     let _ = a::b;\n //     let _ = ::a::<b>;\n // }\n-fn path_expr(p: &mut Parser) {\n+fn path_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n-    m.complete(p, PATH_EXPR);\n+    m.complete(p, PATH_EXPR)\n }"}, {"sha": "63ad2782ee17d0135d6c76e8448372c198d84942", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -31,7 +31,7 @@ mod type_args;\n mod types;\n \n use {\n-    parser::{parser::Parser, token_set::TokenSet},\n+    parser::{parser::{Parser, CompletedMarker}, token_set::TokenSet},\n     SyntaxKind::{self, *},\n };\n "}, {"sha": "1d0f1b7240e8b1f401a54c34a8a87f1cda4201a7", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -116,6 +116,7 @@ pub enum SyntaxKind {\n     PLACEHOLDER_PAT,\n     TUPLE_EXPR,\n     PATH_EXPR,\n+    CALL_EXPR,\n     EXTERN_BLOCK,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -262,6 +263,7 @@ impl SyntaxKind {\n             PLACEHOLDER_PAT => &SyntaxInfo { name: \"PLACEHOLDER_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n             PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n+            CALL_EXPR => &SyntaxInfo { name: \"CALL_EXPR\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },"}, {"sha": "0c9a20718a1649fa253f61cceaa35f4e56350b9e", "filename": "tests/data/parser/inline/0043_call_expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/tests%2Fdata%2Fparser%2Finline%2F0043_call_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/tests%2Fdata%2Fparser%2Finline%2F0043_call_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0043_call_expr.rs?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    let _ = f();\n+    let _ = f()(1)(1, 2,);\n+}"}, {"sha": "418d86270f1a34164b08b138346664a4f8d4fe30", "filename": "tests/data/parser/inline/0043_call_expr.txt", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c244dd10343ff96a73879c593bd9253c4073cb90/tests%2Fdata%2Fparser%2Finline%2F0043_call_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c244dd10343ff96a73879c593bd9253c4073cb90/tests%2Fdata%2Fparser%2Finline%2F0043_call_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0043_call_expr.txt?ref=c244dd10343ff96a73879c593bd9253c4073cb90", "patch": "@@ -0,0 +1,65 @@\n+FILE@[0; 57)\n+  FN_ITEM@[0; 57)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    L_PAREN@[6; 7)\n+    R_PAREN@[7; 8)\n+    BLOCK@[8; 57)\n+      WHITESPACE@[8; 9)\n+      L_CURLY@[9; 10)\n+      LET_STMT@[10; 32)\n+        WHITESPACE@[10; 15)\n+        LET_KW@[15; 18)\n+        PLACEHOLDER_PAT@[18; 21)\n+          WHITESPACE@[18; 19)\n+          UNDERSCORE@[19; 20)\n+          WHITESPACE@[20; 21)\n+        EQ@[21; 22)\n+        CALL_EXPR@[22; 26)\n+          PATH_EXPR@[22; 24)\n+            PATH@[22; 24)\n+              PATH_SEGMENT@[22; 24)\n+                NAME_REF@[22; 24)\n+                  WHITESPACE@[22; 23)\n+                  IDENT@[23; 24) \"f\"\n+          L_PAREN@[24; 25)\n+          R_PAREN@[25; 26)\n+        SEMI@[26; 27)\n+        WHITESPACE@[27; 32)\n+      LET_STMT@[32; 55)\n+        LET_KW@[32; 35)\n+        PLACEHOLDER_PAT@[35; 38)\n+          WHITESPACE@[35; 36)\n+          UNDERSCORE@[36; 37)\n+          WHITESPACE@[37; 38)\n+        EQ@[38; 39)\n+        CALL_EXPR@[39; 53)\n+          CALL_EXPR@[39; 46)\n+            CALL_EXPR@[39; 43)\n+              PATH_EXPR@[39; 41)\n+                PATH@[39; 41)\n+                  PATH_SEGMENT@[39; 41)\n+                    NAME_REF@[39; 41)\n+                      WHITESPACE@[39; 40)\n+                      IDENT@[40; 41) \"f\"\n+              L_PAREN@[41; 42)\n+              R_PAREN@[42; 43)\n+            L_PAREN@[43; 44)\n+            LITERAL@[44; 45)\n+              INT_NUMBER@[44; 45)\n+            R_PAREN@[45; 46)\n+          L_PAREN@[46; 47)\n+          LITERAL@[47; 48)\n+            INT_NUMBER@[47; 48)\n+          COMMA@[48; 49)\n+          LITERAL@[49; 51)\n+            WHITESPACE@[49; 50)\n+            INT_NUMBER@[50; 51)\n+          COMMA@[51; 52)\n+          R_PAREN@[52; 53)\n+        SEMI@[53; 54)\n+        WHITESPACE@[54; 55)\n+      R_CURLY@[55; 56)\n+      WHITESPACE@[56; 57)"}]}