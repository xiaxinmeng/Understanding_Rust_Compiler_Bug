{"sha": "2d5f62fb48536d69aa7de0d7504df278271ccf25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNWY2MmZiNDg1MzZkNjlhYTdkZTBkNzUwNGRmMjc4MjcxY2NmMjU=", "commit": {"author": {"name": "David Craven", "email": "david@craven.ch", "date": "2018-07-24T10:03:28Z"}, "committer": {"name": "David Craven", "email": "david@craven.ch", "date": "2018-08-01T13:32:22Z"}, "message": "[RISCV] Enable LLVM backend.", "tree": {"sha": "15b42735137e3a28b827d6c5e7adff3c4dc9d458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15b42735137e3a28b827d6c5e7adff3c4dc9d458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d5f62fb48536d69aa7de0d7504df278271ccf25", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEX0O2gQQ3L0uomKZLM7np/eKNLCMFAlthtmYACgkQM7np/eKN\nLCOWYAf/RPu7syHymuLTT0SXbXVONcR+st2RgvhZfjuDFohLqa/2bz0xdCG0MzZ6\nvh99trFI84qxAgq4O9iJIlP2QQSAcnuYQxZ8b5o70iVZx40AigDpR1XYb9HLnuwJ\n7gz63UUG8xt+uU5R8eqHCk36XBi6f4ODy8/VqmSkJo80YYW4QrvHL1QpHN6WNPj5\nG4nW26dFcC5vfsc0PfPoDQeZ22Ah2etl5Ca+P1x4HcVqBpe5JP+ETbQ9ihIMaXeE\nX1naverkX9qXitG6F18Sgv1TVaHGRXgMQBkgg1QpUFPHcmomfq6GhG5sgSLuBf32\ngAVZVx0CJkYyMaujPbCGbZm2Ml2BvQ==\n=JmkZ\n-----END PGP SIGNATURE-----", "payload": "tree 15b42735137e3a28b827d6c5e7adff3c4dc9d458\nparent 8c069ceba81a0fffc1ce95aaf7e8339e11bf2796\nauthor David Craven <david@craven.ch> 1532426608 +0200\ncommitter David Craven <david@craven.ch> 1533130342 +0200\n\n[RISCV] Enable LLVM backend.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5f62fb48536d69aa7de0d7504df278271ccf25", "html_url": "https://github.com/rust-lang/rust/commit/2d5f62fb48536d69aa7de0d7504df278271ccf25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d5f62fb48536d69aa7de0d7504df278271ccf25/comments", "author": {"login": "dvc94ch", "id": 741807, "node_id": "MDQ6VXNlcjc0MTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/741807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvc94ch", "html_url": "https://github.com/dvc94ch", "followers_url": "https://api.github.com/users/dvc94ch/followers", "following_url": "https://api.github.com/users/dvc94ch/following{/other_user}", "gists_url": "https://api.github.com/users/dvc94ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvc94ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvc94ch/subscriptions", "organizations_url": "https://api.github.com/users/dvc94ch/orgs", "repos_url": "https://api.github.com/users/dvc94ch/repos", "events_url": "https://api.github.com/users/dvc94ch/events{/privacy}", "received_events_url": "https://api.github.com/users/dvc94ch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvc94ch", "id": 741807, "node_id": "MDQ6VXNlcjc0MTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/741807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvc94ch", "html_url": "https://github.com/dvc94ch", "followers_url": "https://api.github.com/users/dvc94ch/followers", "following_url": "https://api.github.com/users/dvc94ch/following{/other_user}", "gists_url": "https://api.github.com/users/dvc94ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvc94ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvc94ch/subscriptions", "organizations_url": "https://api.github.com/users/dvc94ch/orgs", "repos_url": "https://api.github.com/users/dvc94ch/repos", "events_url": "https://api.github.com/users/dvc94ch/events{/privacy}", "received_events_url": "https://api.github.com/users/dvc94ch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c069ceba81a0fffc1ce95aaf7e8339e11bf2796", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796", "html_url": "https://github.com/rust-lang/rust/commit/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "cc40e96b316787ff8741ed23fe7a857f0a8adc3d", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d5f62fb48536d69aa7de0d7504df278271ccf25/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/2d5f62fb48536d69aa7de0d7504df278271ccf25/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=2d5f62fb48536d69aa7de0d7504df278271ccf25", "patch": "@@ -62,7 +62,7 @@\n # not built by default and the experimental Rust compilation targets that depend\n # on them will not work unless the user opts in to building them. By default the\n # `WebAssembly` target is enabled when compiling LLVM from scratch.\n-#experimental-targets = \"WebAssembly\"\n+#experimental-targets = \"WebAssembly;RISCV\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "4e24a26983d48754a9a84dd78cb2d1b083f18866", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d5f62fb48536d69aa7de0d7504df278271ccf25/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5f62fb48536d69aa7de0d7504df278271ccf25/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=2d5f62fb48536d69aa7de0d7504df278271ccf25", "patch": "@@ -100,6 +100,10 @@ fn main() {\n         optional_components.push(\"hexagon\");\n     }\n \n+    if major > 6 {\n+        optional_components.push(\"riscv\");\n+    }\n+\n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n     let required_components = &[\"ipo\","}, {"sha": "ffa97bd6fa59d3a385d5738440a54d8527134871", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d5f62fb48536d69aa7de0d7504df278271ccf25/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d5f62fb48536d69aa7de0d7504df278271ccf25/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=2d5f62fb48536d69aa7de0d7504df278271ccf25", "patch": "@@ -90,6 +90,12 @@ pub fn initialize_available_targets() {\n                  LLVMInitializeMSP430Target,\n                  LLVMInitializeMSP430TargetMC,\n                  LLVMInitializeMSP430AsmPrinter);\n+    init_target!(llvm_component = \"riscv\",\n+                 LLVMInitializeRISCVTargetInfo,\n+                 LLVMInitializeRISCVTarget,\n+                 LLVMInitializeRISCVTargetMC,\n+                 LLVMInitializeRISCVAsmPrinter,\n+                 LLVMInitializeRISCVAsmParser);\n     init_target!(llvm_component = \"sparc\",\n                  LLVMInitializeSparcTargetInfo,\n                  LLVMInitializeSparcTarget,"}, {"sha": "7305dc71cbf63fa5bd14fc2b8d6e7edb74e4b832", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d5f62fb48536d69aa7de0d7504df278271ccf25/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2d5f62fb48536d69aa7de0d7504df278271ccf25/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=2d5f62fb48536d69aa7de0d7504df278271ccf25", "patch": "@@ -171,6 +171,12 @@ bool LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n #define SUBTARGET_MSP430\n #endif\n \n+#ifdef LLVM_COMPONENT_RISCV\n+#define SUBTARGET_RISCV SUBTARGET(RISCV)\n+#else\n+#define SUBTARGET_RISCV\n+#endif\n+\n #ifdef LLVM_COMPONENT_SPARC\n #define SUBTARGET_SPARC SUBTARGET(Sparc)\n #else\n@@ -192,7 +198,8 @@ bool LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n   SUBTARGET_SYSTEMZ                                                            \\\n   SUBTARGET_MSP430                                                             \\\n   SUBTARGET_SPARC                                                              \\\n-  SUBTARGET_HEXAGON\n+  SUBTARGET_HEXAGON                                                            \\\n+  SUBTARGET_RISCV                                                              \\\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}]}