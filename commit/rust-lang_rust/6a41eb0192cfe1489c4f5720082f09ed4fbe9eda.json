{"sha": "6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNDFlYjAxOTJjZmUxNDg5YzRmNTcyMDA4MmYwOWVkNGZiZTllZGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-17T04:50:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-17T04:50:34Z"}, "message": "rustc: Break a dependency between metadata and resolve", "tree": {"sha": "5e7edbdf5c7ae32e661f57214626d8e2d453bce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7edbdf5c7ae32e661f57214626d8e2d453bce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "html_url": "https://github.com/rust-lang/rust/commit/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b329e1c719164c3d69aa840b4da12e1920b75f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b329e1c719164c3d69aa840b4da12e1920b75f4b", "html_url": "https://github.com/rust-lang/rust/commit/b329e1c719164c3d69aa840b4da12e1920b75f4b"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "c897767d2b76e892122b2c6a08fca3ef45bd84a6", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "patch": "@@ -48,7 +48,7 @@ type encode_parms = {\n     diag: span_handler,\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n-    exp_map: resolve::exp_map,\n+    reexports: [(str, def_id)],\n     impl_map: resolve::impl_map,\n     item_symbols: hashmap<ast::node_id, str>,\n     discrim_symbols: hashmap<ast::node_id, str>,\n@@ -61,7 +61,7 @@ enum encode_ctxt = {\n     diag: span_handler,\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n-    exp_map: resolve::exp_map,\n+    reexports: [(str, def_id)],\n     impl_map: resolve::impl_map,\n     item_symbols: hashmap<ast::node_id, str>,\n     discrim_symbols: hashmap<ast::node_id, str>,\n@@ -260,19 +260,13 @@ fn encode_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt, crate: @crate)\n \n fn encode_reexport_paths(ebml_w: ebml::writer,\n                          ecx: @encode_ctxt, &index: [entry<str>]) {\n-    let tcx = ecx.tcx;\n-    for ecx.exp_map.each {|exp_id, defs|\n-        for defs.each {|def|\n-            if !def.reexp { cont; }\n-            let path = alt check tcx.items.get(exp_id) {\n-              ast_map::node_export(_, path) { ast_map::path_to_str(*path) }\n-            };\n-            index += [{val: path, pos: ebml_w.writer.tell()}];\n-            ebml_w.start_tag(tag_paths_data_item);\n-            encode_name(ebml_w, path);\n-            encode_def_id(ebml_w, def.id);\n-            ebml_w.end_tag();\n-        }\n+    for ecx.reexports.each {|reexport|\n+        let (path, def_id) = reexport;\n+        index += [{val: path, pos: ebml_w.writer.tell()}];\n+        ebml_w.start_tag(tag_paths_data_item);\n+        encode_name(ebml_w, path);\n+        encode_def_id(ebml_w, def_id);\n+        ebml_w.end_tag();\n     }\n }\n \n@@ -1071,7 +1065,7 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> [u8] {\n         diag: parms.diag,\n         tcx: parms.tcx,\n         reachable: parms.reachable,\n-        exp_map: parms.exp_map,\n+        reexports: parms.reexports,\n         impl_map: parms.impl_map,\n         item_symbols: parms.item_symbols,\n         discrim_symbols: parms.discrim_symbols,"}, {"sha": "41c065bb025b894bd0ce0c7561d33d01bc7f8977", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "patch": "@@ -5197,17 +5197,33 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n     let encode_inlined_item =\n         bind astencode::encode_inlined_item(_, _, _, _, cx.maps);\n \n-    {\n+    ret {\n         diag: cx.sess.diagnostic(),\n         tcx: cx.tcx,\n         reachable: cx.reachable,\n-        exp_map: cx.exp_map,\n+        reexports: reexports(cx),\n         impl_map: cx.maps.impl_map,\n         item_symbols: cx.item_symbols,\n         discrim_symbols: cx.discrim_symbols,\n         link_meta: cx.link_meta,\n         cstore: cx.sess.cstore,\n         encode_inlined_item: encode_inlined_item\n+    };\n+\n+    fn reexports(cx: @crate_ctxt) -> [(str, ast::def_id)] {\n+        let mut reexports = [];\n+        for cx.exp_map.each {|exp_id, defs|\n+            for defs.each {|def|\n+                if !def.reexp { cont; }\n+                let path = alt check cx.tcx.items.get(exp_id) {\n+                  ast_map::node_export(_, path) {\n+                    ast_map::path_to_str(*path)\n+                  }\n+                };\n+                reexports += [(path, def.id)];\n+            }\n+        }\n+        ret reexports;\n     }\n \n }"}]}