{"sha": "b66dfaaa6428314066307cfc76f2f3e140555db8", "node_id": "C_kwDOAAsO6NoAKGI2NmRmYWFhNjQyODMxNDA2NjMwN2NmYzc2ZjJmM2UxNDA1NTVkYjg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-19T21:03:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-03T14:08:50Z"}, "message": "Move some HashStable impls.", "tree": {"sha": "ba20107720500825d4f10f33ac62f1bc22e4658c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba20107720500825d4f10f33ac62f1bc22e4658c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66dfaaa6428314066307cfc76f2f3e140555db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66dfaaa6428314066307cfc76f2f3e140555db8", "html_url": "https://github.com/rust-lang/rust/commit/b66dfaaa6428314066307cfc76f2f3e140555db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66dfaaa6428314066307cfc76f2f3e140555db8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24c9067eec3aec8dd2013d24f6cd0dff3ecec4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24c9067eec3aec8dd2013d24f6cd0dff3ecec4c", "html_url": "https://github.com/rust-lang/rust/commit/c24c9067eec3aec8dd2013d24f6cd0dff3ecec4c"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "8d7f2b65c5a828951fec06833818a621bedee592", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b66dfaaa6428314066307cfc76f2f3e140555db8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66dfaaa6428314066307cfc76f2f3e140555db8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=b66dfaaa6428314066307cfc76f2f3e140555db8", "patch": "@@ -66,21 +66,21 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum InlineAttr {\n     None,\n     Hint,\n     Always,\n     Never,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug, PartialEq, Eq)]\n+#[derive(Clone, Encodable, Decodable, Debug, PartialEq, Eq, HashStable_Generic)]\n pub enum InstructionSetAttr {\n     ArmA32,\n     ArmT32,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug)]\n+#[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum OptimizeAttr {\n     None,\n     Speed,"}, {"sha": "9d5ef279dd784cff501452d63af5bf70658f9a75", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b66dfaaa6428314066307cfc76f2f3e140555db8/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66dfaaa6428314066307cfc76f2f3e140555db8/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=b66dfaaa6428314066307cfc76f2f3e140555db8", "patch": "@@ -33,6 +33,25 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n     }\n }\n \n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemLocalId {\n+    type KeyType = ItemLocalId;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HirCtx) -> ItemLocalId {\n+        *self\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for BodyId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        let BodyId { hir_id } = *self;\n+        hir_id.to_stable_hash_key(hcx)\n+    }\n+}\n+\n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemId {\n     type KeyType = DefPathHash;\n "}, {"sha": "3c3e7e0d173e0ca9f6fb230d7e387626b1ad3536", "filename": "compiler/rustc_middle/src/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b66dfaaa6428314066307cfc76f2f3e140555db8/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66dfaaa6428314066307cfc76f2f3e140555db8/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs?ref=b66dfaaa6428314066307cfc76f2f3e140555db8", "patch": "@@ -2,7 +2,6 @@\n //! types in no particular order.\n \n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n-use rustc_attr as attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n@@ -114,15 +113,6 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::ItemLocalId {\n-    type KeyType = hir::ItemLocalId;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &StableHashingContext<'a>) -> hir::ItemLocalId {\n-        *self\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Body { params, value, generator_kind } = self;\n@@ -135,19 +125,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::BodyId {\n-    type KeyType = (DefPathHash, hir::ItemLocalId);\n-\n-    #[inline]\n-    fn to_stable_hash_key(\n-        &self,\n-        hcx: &StableHashingContext<'a>,\n-    ) -> (DefPathHash, hir::ItemLocalId) {\n-        let hir::BodyId { hir_id } = *self;\n-        hir_id.to_stable_hash_key(hcx)\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitCandidate {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -171,21 +148,3 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n         )\n     }\n }\n-\n-impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InlineAttr {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InstructionSetAttr {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'hir> HashStable<StableHashingContext<'hir>> for attr::OptimizeAttr {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-    }\n-}"}]}