{"sha": "8b94bf7b2dd4743ce87d12b9892405cab48ac6da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTRiZjdiMmRkNDc0M2NlODdkMTJiOTg5MjQwNWNhYjQ4YWM2ZGE=", "commit": {"author": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-04T19:03:35Z"}, "committer": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-04T19:04:19Z"}, "message": "Complete enum variants through type aliases", "tree": {"sha": "e95c9da7956c823f79205af57d134c1a7753331f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e95c9da7956c823f79205af57d134c1a7753331f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b94bf7b2dd4743ce87d12b9892405cab48ac6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b94bf7b2dd4743ce87d12b9892405cab48ac6da", "html_url": "https://github.com/rust-lang/rust/commit/8b94bf7b2dd4743ce87d12b9892405cab48ac6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b94bf7b2dd4743ce87d12b9892405cab48ac6da/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d812efcd9e632a47ba85086c0a9dc72d13ff732", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d812efcd9e632a47ba85086c0a9dc72d13ff732", "html_url": "https://github.com/rust-lang/rust/commit/6d812efcd9e632a47ba85086c0a9dc72d13ff732"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "d2ebba65ff8be17a7e909711a0febe8d2268b266", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8b94bf7b2dd4743ce87d12b9892405cab48ac6da/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b94bf7b2dd4743ce87d12b9892405cab48ac6da/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=8b94bf7b2dd4743ce87d12b9892405cab48ac6da", "patch": "@@ -52,13 +52,17 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         | PathResolution::Def(def @ hir::ModuleDef::TypeAlias(_))\n         | PathResolution::Def(def @ hir::ModuleDef::BuiltinType(_)) => {\n             if let hir::ModuleDef::Adt(Adt::Enum(e)) = def {\n-                for variant in e.variants(ctx.db) {\n-                    acc.add_enum_variant(ctx, variant, None);\n-                }\n+                add_enum_variants(ctx, acc, e);\n             }\n             let ty = match def {\n                 hir::ModuleDef::Adt(adt) => adt.ty(ctx.db),\n-                hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n+                hir::ModuleDef::TypeAlias(a) => {\n+                    let ty = a.ty(ctx.db);\n+                    if let Some(Adt::Enum(e)) = ty.as_adt() {\n+                        add_enum_variants(ctx, acc, e);\n+                    }\n+                    ty\n+                }\n                 hir::ModuleDef::BuiltinType(builtin) => {\n                     let module = match ctx.scope.module() {\n                         Some(it) => it,\n@@ -122,9 +126,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 };\n \n                 if let Some(Adt::Enum(e)) = ty.as_adt() {\n-                    for variant in e.variants(ctx.db) {\n-                        acc.add_enum_variant(ctx, variant, None);\n-                    }\n+                    add_enum_variants(ctx, acc, e);\n                 }\n \n                 let traits_in_scope = ctx.scope.traits_in_scope();\n@@ -151,6 +153,12 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     }\n }\n \n+fn add_enum_variants(ctx: &CompletionContext, acc: &mut Completions, e: hir::Enum) {\n+    for variant in e.variants(ctx.db) {\n+        acc.add_enum_variant(ctx, variant, None);\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -782,4 +790,22 @@ impl u8 {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_through_alias() {\n+        check(\n+            r#\"\n+enum Foo {\n+    Bar\n+}\n+type Foo2 = Foo;\n+fn main() {\n+    Foo2::$0\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Bar ()\n+            \"#]],\n+        );\n+    }\n }"}]}