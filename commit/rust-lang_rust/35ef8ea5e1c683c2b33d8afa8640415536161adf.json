{"sha": "35ef8ea5e1c683c2b33d8afa8640415536161adf", "node_id": "C_kwDOAAsO6NoAKDM1ZWY4ZWE1ZTFjNjgzYzJiMzNkOGFmYTg2NDA0MTU1MzYxNjFhZGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-01T00:21:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T00:21:57Z"}, "message": "Rollup merge of #108520 - compiler-errors:one-bound-nit, r=jackh726\n\nSmall cleanup to `one_bound_for_assoc_type`\n\nUse fewer closures :)", "tree": {"sha": "8007db263367b0b52a96c0d556e3a9fe6f90d296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8007db263367b0b52a96c0d556e3a9fe6f90d296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ef8ea5e1c683c2b33d8afa8640415536161adf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/pqlCRBK7hj4Ov3rIwAA7IUIAHyWZ309z+zoLvayJZK2ICdq\n7bSYxLcOJZ0F0M7HyL2+oz2bZrdmvwqjSxJsJDyYkO39ad0aGZNi3LioL7axU2co\nKRgy+Q8ppW5zxdxOFmabzX9CXfFMaUtIkWyMvnEj9pc4QXpj8acaUhJmJ+nS+jjs\nwHOtRan0kGdI6r17mEOIwdQHeDzZ4AgvFSg0l8HSepcSU9+pQjMZaT3R6Vh8dLSp\noLwmygI4STIovkzlIe0tBtyljL8p9QBoQEUeFRBF2tkxE0hrnoKlLoqk5J2g6ngC\nsXfQc77HccFtrEZZZv0YDNhD6/v8KMqP0IaAn6KwhDqnjb1grMYX9zOCnky82RU=\n=lZoR\n-----END PGP SIGNATURE-----\n", "payload": "tree 8007db263367b0b52a96c0d556e3a9fe6f90d296\nparent 5af16c1655f3f674064ecdabbbe24205cdb5f04d\nparent ff336aa6f9cd3f7e3176bbc56c475e66b86bd377\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677630117 +0100\ncommitter GitHub <noreply@github.com> 1677630117 +0100\n\nRollup merge of #108520 - compiler-errors:one-bound-nit, r=jackh726\n\nSmall cleanup to `one_bound_for_assoc_type`\n\nUse fewer closures :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef8ea5e1c683c2b33d8afa8640415536161adf", "html_url": "https://github.com/rust-lang/rust/commit/35ef8ea5e1c683c2b33d8afa8640415536161adf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ef8ea5e1c683c2b33d8afa8640415536161adf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af16c1655f3f674064ecdabbbe24205cdb5f04d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af16c1655f3f674064ecdabbbe24205cdb5f04d", "html_url": "https://github.com/rust-lang/rust/commit/5af16c1655f3f674064ecdabbbe24205cdb5f04d"}, {"sha": "ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "html_url": "https://github.com/rust-lang/rust/commit/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "25c467bfd2bd604ed9f8f050fe8894820f8a4f1d", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/35ef8ea5e1c683c2b33d8afa8640415536161adf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef8ea5e1c683c2b33d8afa8640415536161adf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=35ef8ea5e1c683c2b33d8afa8640415536161adf", "patch": "@@ -50,6 +50,7 @@ use rustc_trait_selection::traits::{self, astconv_object_safety_violations, Obli\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n+use std::fmt::Display;\n use std::slice;\n \n #[derive(Debug)]\n@@ -1095,11 +1096,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // those that do.\n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, trait_ref),\n-                    || trait_ref.print_only_trait_path().to_string(),\n+                    trait_ref.print_only_trait_path(),\n                     binding.item_name,\n                     path_span,\n-                    || match binding.kind {\n-                        ConvertedBindingKind::Equality(ty) => Some(ty.to_string()),\n+                    match binding.kind {\n+                        ConvertedBindingKind::Equality(term) => Some(term),\n                         _ => None,\n                     },\n                 )?\n@@ -1789,10 +1790,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     assoc_name,\n                 )\n             },\n-            || param_name.to_string(),\n+            param_name,\n             assoc_name,\n             span,\n-            || None,\n+            None,\n         )\n     }\n \n@@ -1802,10 +1803,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn one_bound_for_assoc_type<I>(\n         &self,\n         all_candidates: impl Fn() -> I,\n-        ty_param_name: impl Fn() -> String,\n+        ty_param_name: impl Display,\n         assoc_name: Ident,\n         span: Span,\n-        is_equality: impl Fn() -> Option<String>,\n+        is_equality: Option<ty::Term<'tcx>>,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorGuaranteed>\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n@@ -1821,7 +1822,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             (None, None) => {\n                 let reported = self.complain_about_assoc_type_not_found(\n                     all_candidates,\n-                    &ty_param_name(),\n+                    &ty_param_name.to_string(),\n                     assoc_name,\n                     span,\n                 );\n@@ -1833,7 +1834,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(bound2) = next_cand {\n             debug!(?bound2);\n \n-            let is_equality = is_equality();\n             let bounds = IntoIterator::into_iter([bound, bound2]).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n@@ -1843,7 +1843,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0222,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name()\n+                    ty_param_name\n                 )\n             } else {\n                 struct_span_err!(\n@@ -1852,7 +1852,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0221,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name()\n+                    ty_param_name\n                 )\n             };\n             err.span_label(span, format!(\"ambiguous associated type `{}`\", assoc_name));\n@@ -1886,18 +1886,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_suggestion_verbose(\n                             span.with_hi(assoc_name.span.lo()),\n                             \"use fully qualified syntax to disambiguate\",\n-                            format!(\n-                                \"<{} as {}>::\",\n-                                ty_param_name(),\n-                                bound.print_only_trait_path(),\n-                            ),\n+                            format!(\"<{} as {}>::\", ty_param_name, bound.print_only_trait_path()),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n                 } else {\n                     err.note(&format!(\n                         \"associated type `{}` could derive from `{}`\",\n-                        ty_param_name(),\n+                        ty_param_name,\n                         bound.print_only_trait_path(),\n                     ));\n                 }\n@@ -1906,7 +1902,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.help(&format!(\n                     \"consider introducing a new type parameter `T` and adding `where` constraints:\\\n                      \\n    where\\n        T: {},\\n{}\",\n-                    ty_param_name(),\n+                    ty_param_name,\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n@@ -2070,10 +2066,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, ty::Binder::dummy(trait_ref.subst_identity())),\n-                    || \"Self\".to_string(),\n+                    kw::SelfUpper,\n                     assoc_ident,\n                     span,\n-                    || None,\n+                    None,\n                 )?\n             }\n             ("}]}