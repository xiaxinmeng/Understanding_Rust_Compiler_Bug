{"sha": "738174671ae40092684d7a9a543f939e318051e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczODE3NDY3MWFlNDAwOTI2ODRkN2E5YTU0M2Y5MzllMzE4MDUxZTU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:25:40Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:58:03Z"}, "message": "Binders::wrap_empty -> wrap_empty_binders", "tree": {"sha": "e1d4acc12a28b25b1b87f107d7f200d07f50d0d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d4acc12a28b25b1b87f107d7f200d07f50d0d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738174671ae40092684d7a9a543f939e318051e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738174671ae40092684d7a9a543f939e318051e5", "html_url": "https://github.com/rust-lang/rust/commit/738174671ae40092684d7a9a543f939e318051e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738174671ae40092684d7a9a543f939e318051e5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f5a77658baafad1fe3551971ebbcdce87760847", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5a77658baafad1fe3551971ebbcdce87760847", "html_url": "https://github.com/rust-lang/rust/commit/2f5a77658baafad1fe3551971ebbcdce87760847"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "61f5adbc4fe92866342db2202ec404ed114ee774", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/738174671ae40092684d7a9a543f939e318051e5/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738174671ae40092684d7a9a543f939e318051e5/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=738174671ae40092684d7a9a543f939e318051e5", "patch": "@@ -92,13 +92,11 @@ pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n     generics(db.upcast(), id.parent).param_idx(id)\n }\n \n-impl<T> Binders<T> {\n-    pub fn wrap_empty(value: T) -> Self\n-    where\n-        T: TypeWalk,\n-    {\n-        Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n-    }\n+pub fn wrap_empty_binders<T>(value: T) -> Binders<T>\n+where\n+    T: TypeWalk,\n+{\n+    Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n }\n \n impl<T: TypeWalk> Binders<T> {"}, {"sha": "6cef8095f143d0a82a4c9d1b47e7178cb6555a68", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/738174671ae40092684d7a9a543f939e318051e5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738174671ae40092684d7a9a543f939e318051e5/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=738174671ae40092684d7a9a543f939e318051e5", "patch": "@@ -384,7 +384,9 @@ impl<'a> TyLoweringContext<'a> {\n                             1,\n                             QuantifiedWhereClauses::from_iter(\n                                 &Interner,\n-                                Some(Binders::wrap_empty(WhereClause::Implemented(trait_ref))),\n+                                Some(crate::wrap_empty_binders(WhereClause::Implemented(\n+                                    trait_ref,\n+                                ))),\n                             ),\n                         ),\n                     };\n@@ -720,7 +722,7 @@ impl<'a> TyLoweringContext<'a> {\n         let trait_ref = match bound {\n             TypeBound::Path(path) => {\n                 bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n-                bindings.clone().map(WhereClause::Implemented).map(|b| Binders::wrap_empty(b))\n+                bindings.clone().map(WhereClause::Implemented).map(|b| crate::wrap_empty_binders(b))\n             }\n             TypeBound::Lifetime(_) => None,\n             TypeBound::Error => None,\n@@ -767,7 +769,7 @@ impl<'a> TyLoweringContext<'a> {\n                     let ty = self.lower_ty(type_ref);\n                     let alias_eq =\n                         AliasEq { alias: AliasTy::Projection(projection_ty.clone()), ty };\n-                    preds.push(Binders::wrap_empty(WhereClause::AliasEq(alias_eq)));\n+                    preds.push(crate::wrap_empty_binders(WhereClause::AliasEq(alias_eq)));\n                 }\n                 for bound in &binding.bounds {\n                     preds.extend(self.lower_type_bound("}, {"sha": "5a8b5cd861c3b21788653cf345d1aa925e67e52c", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/738174671ae40092684d7a9a543f939e318051e5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738174671ae40092684d7a9a543f939e318051e5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=738174671ae40092684d7a9a543f939e318051e5", "patch": "@@ -246,8 +246,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                     let bound = OpaqueTyDatumBound {\n                         bounds: make_binders(\n                             vec![\n-                                wrap_in_empty_binders(impl_bound).to_chalk(self.db),\n-                                wrap_in_empty_binders(proj_bound).to_chalk(self.db),\n+                                crate::wrap_empty_binders(impl_bound).to_chalk(self.db),\n+                                crate::wrap_empty_binders(proj_bound).to_chalk(self.db),\n                             ],\n                             1,\n                         ),\n@@ -723,7 +723,3 @@ impl From<crate::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {\n         chalk_ir::ClosureId(id.as_intern_id())\n     }\n }\n-\n-fn wrap_in_empty_binders<T: crate::TypeWalk>(value: T) -> crate::Binders<T> {\n-    crate::Binders::wrap_empty(value)\n-}"}]}