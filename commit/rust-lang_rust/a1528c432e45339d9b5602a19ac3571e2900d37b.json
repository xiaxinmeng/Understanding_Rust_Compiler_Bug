{"sha": "a1528c432e45339d9b5602a19ac3571e2900d37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNTI4YzQzMmU0NTMzOWQ5YjU2MDJhMTlhYzM1NzFlMjkwMGQzN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-29T21:42:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-29T21:42:43Z"}, "message": "Auto merge of #73374 - alexcrichton:compiler-bulitins-debug-assertions, r=Mark-Simulacrum\n\nrustbuild: Move compiler-builtins build logic to manifest\n\nThis commit moves the compiler-builtins-specific build logic from\n`src/bootstrap/bin/rustc.rs` into the workspace `Cargo.toml`'s\n`[profile]` configuration. Now that rust-lang/cargo#7253 is fixed we can\nensure that Cargo knows about debug assertions settings, and it can also\nbe configured to specifically disable debug assertions unconditionally\nfor compiler-builtins. This should improve rebuild logic when\ndebug-assertions settings change and also improve build-std integration\nwhere Cargo externally now has an avenue to learn how to build\ncompiler-builtins as well.", "tree": {"sha": "82ce175759ab6af1f3b2707e4ed783a9e4005753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ce175759ab6af1f3b2707e4ed783a9e4005753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1528c432e45339d9b5602a19ac3571e2900d37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1528c432e45339d9b5602a19ac3571e2900d37b", "html_url": "https://github.com/rust-lang/rust/commit/a1528c432e45339d9b5602a19ac3571e2900d37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1528c432e45339d9b5602a19ac3571e2900d37b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "html_url": "https://github.com/rust-lang/rust/commit/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741"}, {"sha": "3dfbf0bc738d1ba4ee0f084ce3f32074fceee3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfbf0bc738d1ba4ee0f084ce3f32074fceee3bb", "html_url": "https://github.com/rust-lang/rust/commit/3dfbf0bc738d1ba4ee0f084ce3f32074fceee3bb"}], "stats": {"total": 56, "additions": 16, "deletions": 40}, "files": [{"sha": "be15e50e2bcca07d92d6615542914b4c0ba112f7", "filename": "Cargo.toml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1528c432e45339d9b5602a19ac3571e2900d37b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a1528c432e45339d9b5602a19ac3571e2900d37b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a1528c432e45339d9b5602a19ac3571e2900d37b", "patch": "@@ -33,16 +33,16 @@ exclude = [\n   \"obj\",\n ]\n \n-# These options are controlled from our rustc wrapper script, so turn them off\n-# here and have them controlled elsewhere.\n-[profile.dev]\n-debug = false\n-debug-assertions = false\n-[profile.test]\n-debug = false\n+[profile.release.package.compiler_builtins]\n+# The compiler-builtins crate cannot reference libcore, and it's own CI will\n+# verify that this is the case. This requires, however, that the crate is built\n+# without overflow checks and debug assertions. Forcefully disable debug\n+# assertions and overflow checks here which should ensure that even if these\n+# assertions are enabled for libstd we won't enable then for compiler_builtins\n+# which should ensure we still link everything correctly.\n debug-assertions = false\n+overflow-checks = false\n \n-[profile.release.package.compiler_builtins]\n # For compiler-builtins we always use a high number of codegen units.\n # The goal here is to place every single intrinsic into its own object\n # file to avoid symbol clashes with the system libgcc if possible. Note"}, {"sha": "3072a4a1ae7c035c987c06332b63dc32e91bbe51", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1528c432e45339d9b5602a19ac3571e2900d37b/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1528c432e45339d9b5602a19ac3571e2900d37b/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=a1528c432e45339d9b5602a19ac3571e2900d37b", "patch": "@@ -101,30 +101,6 @@ fn main() {\n         {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n-\n-        // Set various options from config.toml to configure how we're building\n-        // code.\n-        let debug_assertions = match env::var(\"RUSTC_DEBUG_ASSERTIONS\") {\n-            Ok(s) => {\n-                if s == \"true\" {\n-                    \"y\"\n-                } else {\n-                    \"n\"\n-                }\n-            }\n-            Err(..) => \"n\",\n-        };\n-\n-        // The compiler builtins are pretty sensitive to symbols referenced in\n-        // libcore and such, so we never compile them with debug assertions.\n-        //\n-        // FIXME(rust-lang/cargo#7253) we should be doing this in `builder.rs`\n-        // with env vars instead of doing it here in this script.\n-        if crate_name == Some(\"compiler_builtins\") {\n-            cmd.arg(\"-C\").arg(\"debug-assertions=no\");\n-        } else {\n-            cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n-        }\n     } else {\n         // FIXME(rust-lang/cargo#5754) we shouldn't be using special env vars\n         // here, but rather Cargo should know what flags to pass rustc itself."}, {"sha": "c5e2a4a38cff5487a092bb59476ac6e6c3960e2e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1528c432e45339d9b5602a19ac3571e2900d37b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1528c432e45339d9b5602a19ac3571e2900d37b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a1528c432e45339d9b5602a19ac3571e2900d37b", "patch": "@@ -950,14 +950,6 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n             .env(\"RUSTC_REAL\", self.rustc(compiler))\n             .env(\"RUSTC_STAGE\", stage.to_string())\n-            .env(\n-                \"RUSTC_DEBUG_ASSERTIONS\",\n-                if mode == Mode::Std {\n-                    self.config.rust_debug_assertions_std.to_string()\n-                } else {\n-                    self.config.rust_debug_assertions.to_string()\n-                },\n-            )\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n             .env(\"RUSTC_LIBDIR\", &libdir)\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n@@ -1041,6 +1033,14 @@ impl<'a> Builder<'a> {\n             }\n         };\n         cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n+        cargo.env(\n+            profile_var(\"DEBUG_ASSERTIONS\"),\n+            if mode == Mode::Std {\n+                self.config.rust_debug_assertions_std.to_string()\n+            } else {\n+                self.config.rust_debug_assertions.to_string()\n+            },\n+        );\n \n         if !mode.is_tool() {\n             cargo.env(\"RUSTC_FORCE_UNSTABLE\", \"1\");"}]}