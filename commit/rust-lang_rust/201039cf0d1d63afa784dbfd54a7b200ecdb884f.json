{"sha": "201039cf0d1d63afa784dbfd54a7b200ecdb884f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMTAzOWNmMGQxZDYzYWZhNzg0ZGJmZDU0YTdiMjAwZWNkYjg4NGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-20T11:43:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:32:43Z"}, "message": "tutorial: Discuss the primitive types along with their literals", "tree": {"sha": "40c5ce3f0342a074ad9e705600e24b209f1fbe6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40c5ce3f0342a074ad9e705600e24b209f1fbe6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201039cf0d1d63afa784dbfd54a7b200ecdb884f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201039cf0d1d63afa784dbfd54a7b200ecdb884f", "html_url": "https://github.com/rust-lang/rust/commit/201039cf0d1d63afa784dbfd54a7b200ecdb884f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201039cf0d1d63afa784dbfd54a7b200ecdb884f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107b2e5348c21a1824d4f3659c66125eb137546e", "url": "https://api.github.com/repos/rust-lang/rust/commits/107b2e5348c21a1824d4f3659c66125eb137546e", "html_url": "https://github.com/rust-lang/rust/commit/107b2e5348c21a1824d4f3659c66125eb137546e"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "0a50bcc45b495d8e073a9771e92ff43e1b0aaad4", "filename": "doc/tutorial.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/201039cf0d1d63afa784dbfd54a7b200ecdb884f/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/201039cf0d1d63afa784dbfd54a7b200ecdb884f/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=201039cf0d1d63afa784dbfd54a7b200ecdb884f", "patch": "@@ -249,7 +249,7 @@ let my_variable = 100;\n type MyType = int;     // some built-in types are _not_ camel case\n ~~~\n \n-## Expression syntax\n+## Expressions and semicolons\n \n Though it isn't apparent in all code, there is a fundamental\n difference between Rust's syntax and predecessors like C.\n@@ -308,12 +308,14 @@ fn is_four(x: int) -> bool {\n }\n ~~~~\n \n-## Literals\n+## Primitive types and literals\n \n+There are general signed and unsigned integer types, `int`, and `uint`,\n+as well as 8-, 16-, 32-, and 64-bit variations, `i8`, `u16`, etc.\n Integers can be written in decimal (`144`), hexadecimal (`0x90`), or\n binary (`0b10010000`) base. Each integral type has a corresponding literal\n suffix that can be used to indicate the type of a literal: `i` for `int`,\n-`u` for `uint`, and `i8` for the `i8` type, etc.\n+`u` for `uint`, `i8` for the `i8` type.\n \n In the absence of an integer literal suffix, Rust will infer the\n integer type based on type annotations and function signatures in the\n@@ -328,19 +330,21 @@ let c = 100u;    // c is a uint\n let d = 1000i32; // d is an i32\n ~~~~\n \n-Floating point numbers are written `0.0`, `1e6`, or `2.1e-4`. Without\n-a suffix, the literal is assumed to be of type `float`. Suffixes `f32`\n-(32-bit) and `f64` (64-bit) can be used to create literals of a\n-specific type.\n+There are three floating point types, `float`, `f32`, and `f64`.\n+Floating point numbers are written `0.0`, `1e6`, or `2.1e-4`.\n+Like integers, floating point literals are inferred to the correct type.\n+Suffixes `f`, `f32` and `f64` can be used to create literals of a specific type.\n \n-The unit literal is written just like the type: `()`. The keywords\n-`true` and `false` produce the boolean literals.\n+The keywords `true` and `false` produce literals of type `bool`.\n \n-Character literals are written between single quotes, as in `'x'`. Just like\n-C, Rust understands a number of character escapes, using the backslash\n+Characters, the `char` type, are 4-byte unicode codepoints,\n+whose literals are written between single quotes, as in `'x'`.\n+Just like C, Rust understands a number of character escapes, using the backslash\n character, such as `\\n`, `\\r`, and `\\t`. String literals,\n-written between double quotes, allow the same escape sequences. Rust strings\n-may contain newlines.\n+written between double quotes, allow the same escape sequences.\n+More on strings [later](#vectors-and-strings).\n+\n+The nil type, written `()`, has a single value, also written `()`.\n \n ## Operators\n "}]}