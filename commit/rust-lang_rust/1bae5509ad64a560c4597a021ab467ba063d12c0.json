{"sha": "1bae5509ad64a560c4597a021ab467ba063d12c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYWU1NTA5YWQ2NGE1NjBjNDU5N2EwMjFhYjQ2N2JhMDYzZDEyYzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-04T12:45:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-04T12:45:40Z"}, "message": "Merge #7554\n\n7554: Don't keep the parent DefMap alive via Arc r=jonas-schievink a=jonas-schievink\n\nThis seems like it could easily leak a lot of memory since we don't\r\ncurrently run GC\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "c1a3bbed8832b554c6991802f728d99ea6ced088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a3bbed8832b554c6991802f728d99ea6ced088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bae5509ad64a560c4597a021ab467ba063d12c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgG+x0CRBK7hj4Ov3rIwAAdHIIADOYXSyMI40T5uzZR/wmGW4L\nB63FsQbERD1yAhsr2vE87NaJO7Dak5VN87IGkk03vUhHMMSeFgfNwhhqlBa5PKkl\nvqXt4zavCM1Bil+WXzvtZo2DecPG5V/jJh/37XbwKSCPtvuuWmf6iOfCkB9gGI3K\n7uUY1LrIxBHX0/y79ZQGIcjm0xlgMgOyAR66pfCG3o3icwq4h+w8fn9x2Y9JWeXs\nHbIeGmvEibdOVOmaw6WINwdEZiXmLXTEGWbn93eS9vuZZ2G4wsRAq1YqCFIWDv/v\nqb8xN/rfvspKWc/Cv4Kcz6Udzg8/EkCUYFTXrjGboQDsuFJY0/wNM/9uuwjSlac=\n=nQc4\n-----END PGP SIGNATURE-----\n", "payload": "tree c1a3bbed8832b554c6991802f728d99ea6ced088\nparent 01bc1fdff8b04d373e794af29b18243eb9d15e34\nparent 26a2a2433c7bae1533d07a38a6003e6f40fa97d9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612442740 +0000\ncommitter GitHub <noreply@github.com> 1612442740 +0000\n\nMerge #7554\n\n7554: Don't keep the parent DefMap alive via Arc r=jonas-schievink a=jonas-schievink\n\nThis seems like it could easily leak a lot of memory since we don't\r\ncurrently run GC\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bae5509ad64a560c4597a021ab467ba063d12c0", "html_url": "https://github.com/rust-lang/rust/commit/1bae5509ad64a560c4597a021ab467ba063d12c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bae5509ad64a560c4597a021ab467ba063d12c0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bc1fdff8b04d373e794af29b18243eb9d15e34", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bc1fdff8b04d373e794af29b18243eb9d15e34", "html_url": "https://github.com/rust-lang/rust/commit/01bc1fdff8b04d373e794af29b18243eb9d15e34"}, {"sha": "26a2a2433c7bae1533d07a38a6003e6f40fa97d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a2a2433c7bae1533d07a38a6003e6f40fa97d9", "html_url": "https://github.com/rust-lang/rust/commit/26a2a2433c7bae1533d07a38a6003e6f40fa97d9"}], "stats": {"total": 103, "additions": 67, "deletions": 36}, "files": [{"sha": "a92134ba7ba27403b9f9b9869c16bc3c7191f873", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=1bae5509ad64a560c4597a021ab467ba063d12c0", "patch": "@@ -34,7 +34,7 @@ fn check_diagnostics(ra_fixture: &str) {\n     db.check_diagnostics();\n }\n \n-fn block_def_map_at(ra_fixture: &str) -> Arc<DefMap> {\n+fn block_def_map_at(ra_fixture: &str) -> String {\n     let (db, position) = crate::test_db::TestDB::with_position(ra_fixture);\n \n     let krate = db.crate_graph().iter().next().unwrap();\n@@ -51,7 +51,7 @@ fn block_def_map_at(ra_fixture: &str) -> Arc<DefMap> {\n                 block = new_block;\n             }\n             None => {\n-                return def_map;\n+                return def_map.dump(&db);\n             }\n         }\n     }\n@@ -138,8 +138,7 @@ fn block_at_pos(db: &dyn DefDatabase, def_map: &DefMap, position: FilePosition)\n }\n \n fn check_at(ra_fixture: &str, expect: Expect) {\n-    let def_map = block_def_map_at(ra_fixture);\n-    let actual = def_map.dump();\n+    let actual = block_def_map_at(ra_fixture);\n     expect.assert_eq(&actual);\n }\n "}, {"sha": "ad2e9bcac3902691d88be5e584f0cc37f87e948b", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=1bae5509ad64a560c4597a021ab467ba063d12c0", "patch": "@@ -100,11 +100,12 @@ pub struct DefMap {\n }\n \n /// For `DefMap`s computed for a block expression, this stores its location in the parent map.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n struct BlockInfo {\n+    /// The `BlockId` this `DefMap` was created from.\n     block: BlockId,\n-    parent: Arc<DefMap>,\n-    parent_module: LocalModuleId,\n+    /// The containing module.\n+    parent: ModuleId,\n }\n \n impl std::ops::Index<LocalModuleId> for DefMap {\n@@ -211,17 +212,16 @@ impl DefMap {\n         block_id: BlockId,\n     ) -> Option<Arc<DefMap>> {\n         let block: BlockLoc = db.lookup_intern_block(block_id);\n-        let parent = block.module.def_map(db);\n \n         let item_tree = db.item_tree(block.ast_id.file_id);\n         if item_tree.inner_items_of_block(block.ast_id.value).is_empty() {\n             return None;\n         }\n \n-        let block_info =\n-            BlockInfo { block: block_id, parent, parent_module: block.module.local_id };\n+        let block_info = BlockInfo { block: block_id, parent: block.module };\n \n-        let mut def_map = DefMap::empty(block.module.krate, block_info.parent.edition);\n+        let parent_map = block.module.def_map(db);\n+        let mut def_map = DefMap::empty(block.module.krate, parent_map.edition);\n         def_map.block = Some(block_info);\n \n         let def_map = collector::collect_defs(db, def_map, Some(block.ast_id));\n@@ -289,9 +289,15 @@ impl DefMap {\n         ModuleId { krate: self.krate, local_id, block }\n     }\n \n-    pub(crate) fn crate_root(&self) -> ModuleId {\n-        let (root_map, _) = self.ancestor_maps(self.root).last().unwrap();\n-        root_map.module_id(root_map.root)\n+    pub(crate) fn crate_root(&self, db: &dyn DefDatabase) -> ModuleId {\n+        self.with_ancestor_maps(db, self.root, &mut |def_map, _module| {\n+            if def_map.block.is_none() {\n+                Some(def_map.module_id(def_map.root))\n+            } else {\n+                None\n+            }\n+        })\n+        .expect(\"DefMap chain without root\")\n     }\n \n     pub(crate) fn resolve_path(\n@@ -306,26 +312,42 @@ impl DefMap {\n         (res.resolved_def, res.segment_index)\n     }\n \n-    /// Iterates over the containing `DefMap`s, if `self` is a `DefMap` corresponding to a block\n-    /// expression.\n-    fn ancestor_maps(\n+    /// Ascends the `DefMap` hierarchy and calls `f` with every `DefMap` and containing module.\n+    ///\n+    /// If `f` returns `Some(val)`, iteration is stopped and `Some(val)` is returned. If `f` returns\n+    /// `None`, iteration continues.\n+    fn with_ancestor_maps<T>(\n         &self,\n+        db: &dyn DefDatabase,\n         local_mod: LocalModuleId,\n-    ) -> impl Iterator<Item = (&DefMap, LocalModuleId)> {\n-        std::iter::successors(Some((self, local_mod)), |(map, _)| {\n-            map.block.as_ref().map(|block| (&*block.parent, block.parent_module))\n-        })\n+        f: &mut dyn FnMut(&DefMap, LocalModuleId) -> Option<T>,\n+    ) -> Option<T> {\n+        if let Some(it) = f(self, local_mod) {\n+            return Some(it);\n+        }\n+        let mut block = self.block;\n+        while let Some(block_info) = block {\n+            let parent = block_info.parent.def_map(db);\n+            if let Some(it) = f(&parent, block_info.parent.local_id) {\n+                return Some(it);\n+            }\n+            block = parent.block;\n+        }\n+\n+        None\n     }\n \n     // FIXME: this can use some more human-readable format (ideally, an IR\n     // even), as this should be a great debugging aid.\n-    pub fn dump(&self) -> String {\n+    pub fn dump(&self, db: &dyn DefDatabase) -> String {\n         let mut buf = String::new();\n+        let mut arc;\n         let mut current_map = self;\n         while let Some(block) = &current_map.block {\n             go(&mut buf, current_map, \"block scope\", current_map.root);\n             buf.push('\\n');\n-            current_map = &*block.parent;\n+            arc = block.parent.def_map(db);\n+            current_map = &*arc;\n         }\n         go(&mut buf, current_map, \"crate\", current_map.root);\n         return buf;"}, {"sha": "f904a97de23b6ba18210174c0e5ef9ecf724bf95", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1bae5509ad64a560c4597a021ab467ba063d12c0", "patch": "@@ -1449,10 +1449,11 @@ impl ModCollector<'_, '_> {\n         if let Some(macro_call_id) =\n             ast_id.as_call_id(self.def_collector.db, self.def_collector.def_map.krate, |path| {\n                 path.as_ident().and_then(|name| {\n-                    self.def_collector\n-                        .def_map\n-                        .ancestor_maps(self.module_id)\n-                        .find_map(|(map, module)| map[module].scope.get_legacy_macro(&name))\n+                    self.def_collector.def_map.with_ancestor_maps(\n+                        self.def_collector.db,\n+                        self.module_id,\n+                        &mut |map, module| map[module].scope.get_legacy_macro(&name),\n+                    )\n                 })\n             })\n         {"}, {"sha": "2a3ac5d7b441fcacdc0a865c07230cb918b0b400", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=1bae5509ad64a560c4597a021ab467ba063d12c0", "patch": "@@ -110,6 +110,7 @@ impl DefMap {\n         let mut result = ResolvePathResult::empty(ReachedFixedPoint::No);\n         result.segment_index = Some(usize::max_value());\n \n+        let mut arc;\n         let mut current_map = self;\n         loop {\n             let new = current_map.resolve_path_fp_with_macro_single(\n@@ -131,8 +132,9 @@ impl DefMap {\n \n             match &current_map.block {\n                 Some(block) => {\n-                    current_map = &block.parent;\n-                    original_module = block.parent_module;\n+                    original_module = block.parent.local_id;\n+                    arc = block.parent.def_map(db);\n+                    current_map = &*arc;\n                 }\n                 None => return result,\n             }\n@@ -152,15 +154,15 @@ impl DefMap {\n             PathKind::DollarCrate(krate) => {\n                 if krate == self.krate {\n                     mark::hit!(macro_dollar_crate_self);\n-                    PerNs::types(self.crate_root().into(), Visibility::Public)\n+                    PerNs::types(self.crate_root(db).into(), Visibility::Public)\n                 } else {\n                     let def_map = db.crate_def_map(krate);\n                     let module = def_map.module_id(def_map.root);\n                     mark::hit!(macro_dollar_crate_other);\n                     PerNs::types(module.into(), Visibility::Public)\n                 }\n             }\n-            PathKind::Crate => PerNs::types(self.crate_root().into(), Visibility::Public),\n+            PathKind::Crate => PerNs::types(self.crate_root(db).into(), Visibility::Public),\n             // plain import or absolute path in 2015: crate-relative with\n             // fallback to extern prelude (with the simplification in\n             // rust-lang/rust#57745)\n@@ -206,10 +208,10 @@ impl DefMap {\n                                     segments: path.segments.clone(),\n                                 };\n                                 log::debug!(\"`super` path: {} -> {} in parent map\", path, new_path);\n-                                return block.parent.resolve_path_fp_with_macro(\n+                                return block.parent.def_map(db).resolve_path_fp_with_macro(\n                                     db,\n                                     mode,\n-                                    block.parent_module,\n+                                    block.parent.local_id,\n                                     &new_path,\n                                     shadow,\n                                 );"}, {"sha": "bd3e2701bb798267abc667ad62961336073584d0", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bae5509ad64a560c4597a021ab467ba063d12c0/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=1bae5509ad64a560c4597a021ab467ba063d12c0", "patch": "@@ -11,17 +11,24 @@ use base_db::{fixture::WithFixture, SourceDatabase};\n use expect_test::{expect, Expect};\n use test_utils::mark;\n \n-use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n+use crate::{db::DefDatabase, test_db::TestDB};\n+\n+use super::DefMap;\n \n fn compute_crate_def_map(ra_fixture: &str) -> Arc<DefMap> {\n     let db = TestDB::with_files(ra_fixture);\n     let krate = db.crate_graph().iter().next().unwrap();\n     db.crate_def_map(krate)\n }\n \n+fn render_crate_def_map(ra_fixture: &str) -> String {\n+    let db = TestDB::with_files(ra_fixture);\n+    let krate = db.crate_graph().iter().next().unwrap();\n+    db.crate_def_map(krate).dump(&db)\n+}\n+\n fn check(ra_fixture: &str, expect: Expect) {\n-    let def_map = compute_crate_def_map(ra_fixture);\n-    let actual = def_map.dump();\n+    let actual = render_crate_def_map(ra_fixture);\n     expect.assert_eq(&actual);\n }\n "}]}