{"sha": "40a18a1df52ad3b499b002e4493590f553aae954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYTE4YTFkZjUyYWQzYjQ5OWIwMDJlNDQ5MzU5MGY1NTNhYWU5NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-22T01:47:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T01:47:32Z"}, "message": "Rollup merge of #60963 - blkerby:boxed_docs, r=alexcrichton\n\nUpdate boxed::Box docs on memory layout\n\nThe existing docs for the `Box` type state that \"the way `Box` allocates and releases memory is unspecified\", and that therefore the only valid pointer to pass to `Box::from_raw` is one obtained from `Box::into_raw`. This is inconsistent with the module-level docs which specify,\n\n> It is valid to convert both ways between a Box and a raw pointer allocated with the Global allocator, given that the Layout used with the allocator is correct for the type. More precisely, a value: *mut T that has been allocated with the Global allocator with Layout::for_value(&*value) may be converted into a box using Box::<T>::from_raw(value). Conversely, the memory backing a value: *mut T obtained from Box::<T>::into_raw may be deallocated using the Global allocator with Layout::for_value(&*value).\n\nThis pull request updates the docs for `Box` to make them consistent with the module-level docs and adds some examples of how to use the global allocator in conjunction with `Box::from_raw` and `Box::into_raw`.", "tree": {"sha": "e0c21d74d83469fec34a1f5cf92cf7952e551681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c21d74d83469fec34a1f5cf92cf7952e551681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40a18a1df52ad3b499b002e4493590f553aae954", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5Ko0CRBK7hj4Ov3rIwAAdHIIAGP1kdPimUNHKMIUv6dvItaP\nX7/MYBEDsG8REqEn+YTocxYKO4QYUp4rb41nTMNvQpysOSmKT/sPCfdYSIVECxSK\ngNTbHR3RJNNfbqQvkKKUR50dNajY8GT/0uIQ3zo7slAs19pk6El3WLliRT33O7k4\n731SFCqxgNHq6MeBDu7FIYYZu/cLEmzddcnXH1Xsrw++PAR3bsVwOnpLVsqU2DAK\nRSoZ2//pUmOl9fVjlgcjDPvVtAM5ju5brfB/U58BOjQFFSm0x7nk5JcApDDL9FXE\n8be/nwmbKzjvvNCmxsyfOuujF+telw72ahwEY+Lw2Gyqv4zrMp5WeErAxKUO1R0=\n=mPsA\n-----END PGP SIGNATURE-----\n", "payload": "tree e0c21d74d83469fec34a1f5cf92cf7952e551681\nparent d69ef04af59b4e4c4c50fb2cc09d958ae879556a\nparent 4e37785c7d6ef85d00833e93943cdee28baf97b3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558489652 +0200\ncommitter GitHub <noreply@github.com> 1558489652 +0200\n\nRollup merge of #60963 - blkerby:boxed_docs, r=alexcrichton\n\nUpdate boxed::Box docs on memory layout\n\nThe existing docs for the `Box` type state that \"the way `Box` allocates and releases memory is unspecified\", and that therefore the only valid pointer to pass to `Box::from_raw` is one obtained from `Box::into_raw`. This is inconsistent with the module-level docs which specify,\n\n> It is valid to convert both ways between a Box and a raw pointer allocated with the Global allocator, given that the Layout used with the allocator is correct for the type. More precisely, a value: *mut T that has been allocated with the Global allocator with Layout::for_value(&*value) may be converted into a box using Box::<T>::from_raw(value). Conversely, the memory backing a value: *mut T obtained from Box::<T>::into_raw may be deallocated using the Global allocator with Layout::for_value(&*value).\n\nThis pull request updates the docs for `Box` to make them consistent with the module-level docs and adds some examples of how to use the global allocator in conjunction with `Box::from_raw` and `Box::into_raw`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40a18a1df52ad3b499b002e4493590f553aae954", "html_url": "https://github.com/rust-lang/rust/commit/40a18a1df52ad3b499b002e4493590f553aae954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40a18a1df52ad3b499b002e4493590f553aae954/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69ef04af59b4e4c4c50fb2cc09d958ae879556a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69ef04af59b4e4c4c50fb2cc09d958ae879556a", "html_url": "https://github.com/rust-lang/rust/commit/d69ef04af59b4e4c4c50fb2cc09d958ae879556a"}, {"sha": "4e37785c7d6ef85d00833e93943cdee28baf97b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e37785c7d6ef85d00833e93943cdee28baf97b3", "html_url": "https://github.com/rust-lang/rust/commit/4e37785c7d6ef85d00833e93943cdee28baf97b3"}], "stats": {"total": 89, "additions": 64, "deletions": 25}, "files": [{"sha": "024594517d9884bfa636789086d6e570c44d4611", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 64, "deletions": 25, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/40a18a1df52ad3b499b002e4493590f553aae954/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a18a1df52ad3b499b002e4493590f553aae954/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=40a18a1df52ad3b499b002e4493590f553aae954", "patch": "@@ -4,16 +4,6 @@\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n //! drop their contents when they go out of scope.\n //!\n-//! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\n-//! its allocation. It is valid to convert both ways between a [`Box`] and a\n-//! raw pointer allocated with the [`Global`] allocator, given that the\n-//! [`Layout`] used with the allocator is correct for the type. More precisely,\n-//! a `value: *mut T` that has been allocated with the [`Global`] allocator\n-//! with `Layout::for_value(&*value)` may be converted into a box using\n-//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n-//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n-//! [`Global`] allocator with `Layout::for_value(&*value)`.\n-//!\n //! # Examples\n //!\n //! Move a value from the stack to the heap by creating a [`Box`]:\n@@ -61,6 +51,19 @@\n //! for a `Cons`. By introducing a `Box`, which has a defined size, we know how\n //! big `Cons` needs to be.\n //!\n+//! # Memory layout\n+//!\n+//! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\n+//! its allocation. It is valid to convert both ways between a [`Box`] and a\n+//! raw pointer allocated with the [`Global`] allocator, given that the\n+//! [`Layout`] used with the allocator is correct for the type. More precisely,\n+//! a `value: *mut T` that has been allocated with the [`Global`] allocator\n+//! with `Layout::for_value(&*value)` may be converted into a box using\n+//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n+//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n+//! [`Global`] allocator with `Layout::for_value(&*value)`.\n+//!\n+//!\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html\n //! [`Global`]: ../alloc/struct.Global.html\n@@ -127,24 +130,38 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// After calling this function, the raw pointer is owned by the\n     /// resulting `Box`. Specifically, the `Box` destructor will call\n-    /// the destructor of `T` and free the allocated memory. Since the\n-    /// way `Box` allocates and releases memory is unspecified, the\n-    /// only valid pointer to pass to this function is the one taken\n-    /// from another `Box` via the [`Box::into_raw`] function.\n+    /// the destructor of `T` and free the allocated memory. For this\n+    /// to be safe, the memory must have been allocated in accordance\n+    /// with the [memory layout] used by `Box` .\n+    ///\n+    /// # Safety\n     ///\n     /// This function is unsafe because improper use may lead to\n     /// memory problems. For example, a double-free may occur if the\n     /// function is called twice on the same raw pointer.\n     ///\n-    /// [`Box::into_raw`]: struct.Box.html#method.into_raw\n-    ///\n     /// # Examples\n-    ///\n+    /// Recreate a `Box` which was previously converted to a raw pointer\n+    /// using [`Box::into_raw`]:\n     /// ```\n     /// let x = Box::new(5);\n     /// let ptr = Box::into_raw(x);\n     /// let x = unsafe { Box::from_raw(ptr) };\n     /// ```\n+    /// Manually create a `Box` from scratch by using the global allocator:\n+    /// ```\n+    /// use std::alloc::{alloc, Layout};\n+    ///\n+    /// unsafe {\n+    ///     let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n+    ///     *ptr = 5;\n+    ///     let x = Box::from_raw(ptr);\n+    /// }\n+    /// ```\n+    ///\n+    /// [memory layout]: index.html#memory-layout\n+    /// [`Layout`]: ../alloc/struct.Layout.html\n+    /// [`Box::into_raw`]: struct.Box.html#method.into_raw\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -157,22 +174,40 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n-    /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the raw pointer back into a\n-    /// `Box` with the [`Box::from_raw`] function.\n+    /// caller should properly destroy `T` and release the memory, taking\n+    /// into account the [memory layout] used by `Box`. The easiest way to\n+    /// do this is to convert the raw pointer back into a `Box` with the\n+    /// [`Box::from_raw`] function, allowing the `Box` destructor to perform\n+    /// the cleanup.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n-    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n-    ///\n     /// # Examples\n-    ///\n+    /// Converting the raw pointer back into a `Box` with [`Box::from_raw`]\n+    /// for automatic cleanup:\n     /// ```\n-    /// let x = Box::new(5);\n+    /// let x = Box::new(String::from(\"Hello\"));\n     /// let ptr = Box::into_raw(x);\n+    /// let x = unsafe { Box::from_raw(ptr) };\n+    /// ```\n+    /// Manual cleanup by explicitly running the destructor and deallocating\n+    /// the memory:\n     /// ```\n+    /// use std::alloc::{dealloc, Layout};\n+    /// use std::ptr;\n+    ///\n+    /// let x = Box::new(String::from(\"Hello\"));\n+    /// let p = Box::into_raw(x);\n+    /// unsafe {\n+    ///     ptr::drop_in_place(p);\n+    ///     dealloc(p as *mut u8, Layout::new::<String>());\n+    /// }\n+    /// ```\n+    ///\n+    /// [memory layout]: index.html#memory-layout\n+    /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n@@ -184,7 +219,7 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the `NonNull<T>` pointer\n+    /// easiest way to do so is to convert the `NonNull<T>` pointer\n     /// into a raw pointer and back into a `Box` with the [`Box::from_raw`]\n     /// function.\n     ///\n@@ -203,6 +238,10 @@ impl<T: ?Sized> Box<T> {\n     /// fn main() {\n     ///     let x = Box::new(5);\n     ///     let ptr = Box::into_raw_non_null(x);\n+    ///\n+    ///     // Clean up the memory by converting the NonNull pointer back\n+    ///     // into a Box and letting the Box be dropped.\n+    ///     let x = unsafe { Box::from_raw(ptr.as_ptr()) };\n     /// }\n     /// ```\n     #[unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")]"}]}