{"sha": "4311c0660edfb8c124b4e04873d8291bcf0fb7c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTFjMDY2MGVkZmI4YzEyNGI0ZTA0ODczZDgyOTFiY2YwZmI3YzA=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-06-04T16:43:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T16:43:48Z"}, "message": "Merge pull request #122 from miguelraz/nbodyexample\n\nnbody example", "tree": {"sha": "09f183bebc7c19e752a4f9e937f15b834f925347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f183bebc7c19e752a4f9e937f15b834f925347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4311c0660edfb8c124b4e04873d8291bcf0fb7c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgulhECRBK7hj4Ov3rIwAAgO0IADymKTJ1RPoZwBgVFhn9IBQM\nvtFaurEA/Rn31X3mAG+h+U87iB0cju7vR0DLumvREprzdN1U3kiJHYPBG7xOTsWG\nHX5BuNKKjbeejRhEIwSYym2FWu69cXX3A4ftt9UEB53+Kl2fFtaQGO13jVA5mJE5\ndPJSXKlq/sRiMt+rUgI1E9SX6fSDDiJwfetHHNtwC0OLDyoqE+JPVCcBA8tYIlXR\nf6RZLUyF/BA0lVulyT8dqvgaLhhcf6JWCun/f6vTfHXoR3aof3HeXW+VUAexeit7\nPwXM2XuDs4VNI4XglFA8yVu4m/IrGTYrLdTywB7JbHJkr/GJ5fx3kUDg07wQf2M=\n=Brjs\n-----END PGP SIGNATURE-----\n", "payload": "tree 09f183bebc7c19e752a4f9e937f15b834f925347\nparent 93ee641b509e34ab154de58e9f46774f58311667\nparent be121c93ffc443a82735321edd793ef1e3ee3a00\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1622825028 -0700\ncommitter GitHub <noreply@github.com> 1622825028 -0700\n\nMerge pull request #122 from miguelraz/nbodyexample\n\nnbody example"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4311c0660edfb8c124b4e04873d8291bcf0fb7c0", "html_url": "https://github.com/rust-lang/rust/commit/4311c0660edfb8c124b4e04873d8291bcf0fb7c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4311c0660edfb8c124b4e04873d8291bcf0fb7c0/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ee641b509e34ab154de58e9f46774f58311667", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ee641b509e34ab154de58e9f46774f58311667", "html_url": "https://github.com/rust-lang/rust/commit/93ee641b509e34ab154de58e9f46774f58311667"}, {"sha": "be121c93ffc443a82735321edd793ef1e3ee3a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/be121c93ffc443a82735321edd793ef1e3ee3a00", "html_url": "https://github.com/rust-lang/rust/commit/be121c93ffc443a82735321edd793ef1e3ee3a00"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "44e1c6e87d0e3f15d948e63c3ab9a88668e50df2", "filename": "crates/core_simd/examples/nbody.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/4311c0660edfb8c124b4e04873d8291bcf0fb7c0/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4311c0660edfb8c124b4e04873d8291bcf0fb7c0/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fnbody.rs?ref=4311c0660edfb8c124b4e04873d8291bcf0fb7c0", "patch": "@@ -0,0 +1,182 @@\n+/// Benchmarks game nbody code\n+/// Taken from the `packed_simd` crate\n+/// Run this benchmark with `cargo test --example nbody`\n+use core_simd::*;\n+\n+use std::f64::consts::PI;\n+const SOLAR_MASS: f64 = 4.0 * PI * PI;\n+const DAYS_PER_YEAR: f64 = 365.24;\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct Body {\n+    pub x: f64x4,\n+    pub v: f64x4,\n+    pub mass: f64,\n+}\n+\n+const N_BODIES: usize = 5;\n+const BODIES: [Body; N_BODIES] = [\n+    // sun:\n+    Body {\n+        x: f64x4::from_array([0., 0., 0., 0.]),\n+        v: f64x4::from_array([0., 0., 0., 0.]),\n+        mass: SOLAR_MASS,\n+    },\n+    // jupiter:\n+    Body {\n+        x: f64x4::from_array([\n+            4.84143144246472090e+00,\n+            -1.16032004402742839e+00,\n+            -1.03622044471123109e-01,\n+            0.,\n+        ]),\n+        v: f64x4::from_array([\n+            1.66007664274403694e-03 * DAYS_PER_YEAR,\n+            7.69901118419740425e-03 * DAYS_PER_YEAR,\n+            -6.90460016972063023e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ]),\n+        mass: 9.54791938424326609e-04 * SOLAR_MASS,\n+    },\n+    // saturn:\n+    Body {\n+        x: f64x4::from_array([\n+            8.34336671824457987e+00,\n+            4.12479856412430479e+00,\n+            -4.03523417114321381e-01,\n+            0.,\n+        ]),\n+        v: f64x4::from_array([\n+            -2.76742510726862411e-03 * DAYS_PER_YEAR,\n+            4.99852801234917238e-03 * DAYS_PER_YEAR,\n+            2.30417297573763929e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ]),\n+        mass: 2.85885980666130812e-04 * SOLAR_MASS,\n+    },\n+    // uranus:\n+    Body {\n+        x: f64x4::from_array([\n+            1.28943695621391310e+01,\n+            -1.51111514016986312e+01,\n+            -2.23307578892655734e-01,\n+            0.,\n+        ]),\n+        v: f64x4::from_array([\n+            2.96460137564761618e-03 * DAYS_PER_YEAR,\n+            2.37847173959480950e-03 * DAYS_PER_YEAR,\n+            -2.96589568540237556e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ]),\n+        mass: 4.36624404335156298e-05 * SOLAR_MASS,\n+    },\n+    // neptune:\n+    Body {\n+        x: f64x4::from_array([\n+            1.53796971148509165e+01,\n+            -2.59193146099879641e+01,\n+            1.79258772950371181e-01,\n+            0.,\n+        ]),\n+        v: f64x4::from_array([\n+            2.68067772490389322e-03 * DAYS_PER_YEAR,\n+            1.62824170038242295e-03 * DAYS_PER_YEAR,\n+            -9.51592254519715870e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ]),\n+        mass: 5.15138902046611451e-05 * SOLAR_MASS,\n+    },\n+];\n+\n+pub fn offset_momentum(bodies: &mut [Body; N_BODIES]) {\n+    let (sun, rest) = bodies.split_at_mut(1);\n+    let sun = &mut sun[0];\n+    for body in rest {\n+        let m_ratio = body.mass / SOLAR_MASS;\n+        sun.v -= body.v * m_ratio;\n+    }\n+}\n+\n+pub fn energy(bodies: &[Body; N_BODIES]) -> f64 {\n+    let mut e = 0.;\n+    for i in 0..N_BODIES {\n+        let bi = &bodies[i];\n+        e += bi.mass * (bi.v * bi.v).horizontal_sum() * 0.5;\n+        for bj in bodies.iter().take(N_BODIES).skip(i + 1) {\n+            let dx = bi.x - bj.x;\n+            e -= bi.mass * bj.mass / (dx * dx).horizontal_sum().sqrt()\n+        }\n+    }\n+    e\n+}\n+\n+pub fn advance(bodies: &mut [Body; N_BODIES], dt: f64) {\n+    const N: usize = N_BODIES * (N_BODIES - 1) / 2;\n+\n+    // compute distance between bodies:\n+    let mut r = [f64x4::splat(0.); N];\n+    {\n+        let mut i = 0;\n+        for j in 0..N_BODIES {\n+            for k in j + 1..N_BODIES {\n+                r[i] = bodies[j].x - bodies[k].x;\n+                i += 1;\n+            }\n+        }\n+    }\n+\n+    let mut mag = [0.0; N];\n+    for i in (0..N).step_by(2) {\n+        let d2s = f64x2::from_array([\n+            (r[i] * r[i]).horizontal_sum(),\n+            (r[i + 1] * r[i + 1]).horizontal_sum(),\n+        ]);\n+        let dmags = f64x2::splat(dt) / (d2s * d2s.sqrt());\n+        mag[i] = dmags[0];\n+        mag[i + 1] = dmags[1];\n+    }\n+\n+    let mut i = 0;\n+    for j in 0..N_BODIES {\n+        for k in j + 1..N_BODIES {\n+            let f = r[i] * mag[i];\n+            bodies[j].v -= f * bodies[k].mass;\n+            bodies[k].v += f * bodies[j].mass;\n+            i += 1\n+        }\n+    }\n+    for body in bodies {\n+        body.x += dt * body.v\n+    }\n+}\n+\n+pub fn run(n: usize) -> (f64, f64) {\n+    let mut bodies = BODIES;\n+    offset_momentum(&mut bodies);\n+    let energy_before = energy(&bodies);\n+    for _ in 0..n {\n+        advance(&mut bodies, 0.01);\n+    }\n+    let energy_after = energy(&bodies);\n+\n+    (energy_before, energy_after)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    // Good enough for demonstration purposes, not going for strictness here.\n+    fn approx_eq_f64(a: f64, b: f64) -> bool {\n+        (a - b).abs() < 0.00001\n+    }\n+    #[test]\n+    fn test() {\n+        const OUTPUT: [f64; 2] = [-0.169075164, -0.169087605];\n+        let (energy_before, energy_after) = super::run(1000);\n+        assert!(approx_eq_f64(energy_before, OUTPUT[0]));\n+        assert!(approx_eq_f64(energy_after, OUTPUT[1]));\n+    }\n+}\n+\n+fn main() {\n+    // empty main to pass CI\n+}"}]}