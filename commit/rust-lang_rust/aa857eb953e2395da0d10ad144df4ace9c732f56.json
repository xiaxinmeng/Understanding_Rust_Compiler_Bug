{"sha": "aa857eb953e2395da0d10ad144df4ace9c732f56", "node_id": "C_kwDOAAsO6NoAKGFhODU3ZWI5NTNlMjM5NWRhMGQxMGFkMTQ0ZGY0YWNlOWM3MzJmNTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T03:13:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T03:13:46Z"}, "message": "Auto merge of #100537 - petrochenkov:piccheck, r=oli-obk\n\nrustc_target: Add some more target spec sanity checking", "tree": {"sha": "56a4771edb18af6bfe6f039db822b85c2b2b4dbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56a4771edb18af6bfe6f039db822b85c2b2b4dbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa857eb953e2395da0d10ad144df4ace9c732f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa857eb953e2395da0d10ad144df4ace9c732f56", "html_url": "https://github.com/rust-lang/rust/commit/aa857eb953e2395da0d10ad144df4ace9c732f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa857eb953e2395da0d10ad144df4ace9c732f56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "html_url": "https://github.com/rust-lang/rust/commit/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7"}, {"sha": "f7eb7ef2caa3236487980d0127998ab03bafb42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eb7ef2caa3236487980d0127998ab03bafb42d", "html_url": "https://github.com/rust-lang/rust/commit/f7eb7ef2caa3236487980d0127998ab03bafb42d"}], "stats": {"total": 139, "additions": 85, "deletions": 54}, "files": [{"sha": "b301ce68a1ce10ba20b877f904059a91c85299dd", "filename": "compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             position_independent_executables: true,\n             dynamic_linking: true,\n-            executables: true,\n             relro_level: RelroLevel::Off,\n             ..Default::default()\n         },"}, {"sha": "9f3e0bd5ef0e3ac8b74484d418e249f44740abca", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -4,7 +4,6 @@ pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n     base.os = \"android\".into();\n     base.default_dwarf_version = 2;\n-    base.position_independent_executables = true;\n     base.has_thread_local = false;\n     // This is for backward compatibility, see https://github.com/rust-lang/rust/issues/49867\n     // for context. (At that time, there was no `-C force-unwind-tables`, so the only solution"}, {"sha": "2c72bf88a41e8b03b881d8d97e822a7658b2c00e", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -1,40 +1,37 @@\n use std::{borrow::Cow, env};\n \n-use crate::spec::{cvs, DebuginfoKind, FramePointer, SplitDebuginfo, TargetOptions};\n+use crate::spec::{cvs, DebuginfoKind, FramePointer, SplitDebuginfo, StaticCow, TargetOptions};\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor};\n \n fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n-    let mut args = LinkArgs::new();\n-\n-    let platform_name = match abi {\n-        \"sim\" => format!(\"{}-simulator\", os),\n-        \"macabi\" => \"mac-catalyst\".to_string(),\n-        _ => os.to_string(),\n+    let platform_name: StaticCow<str> = match abi {\n+        \"sim\" => format!(\"{}-simulator\", os).into(),\n+        \"macabi\" => \"mac-catalyst\".into(),\n+        _ => os.into(),\n     };\n \n-    let platform_version = match os.as_ref() {\n+    let platform_version: StaticCow<str> = match os.as_ref() {\n         \"ios\" => ios_lld_platform_version(),\n         \"tvos\" => tvos_lld_platform_version(),\n         \"watchos\" => watchos_lld_platform_version(),\n         \"macos\" => macos_lld_platform_version(arch),\n         _ => unreachable!(),\n-    };\n-\n-    if abi != \"macabi\" {\n-        args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), arch.into()]);\n     }\n+    .into();\n \n-    args.insert(\n+    let mut args = TargetOptions::link_args(\n         LinkerFlavor::Lld(LldFlavor::Ld64),\n-        vec![\n-            \"-arch\".into(),\n-            arch.into(),\n-            \"-platform_version\".into(),\n-            platform_name.into(),\n-            platform_version.clone().into(),\n-            platform_version.into(),\n-        ],\n+        &[\"-arch\", arch, \"-platform_version\"],\n     );\n+    // Manually add owned args unsupported by link arg building helpers.\n+    args.entry(LinkerFlavor::Lld(LldFlavor::Ld64)).or_default().extend([\n+        platform_name,\n+        platform_version.clone(),\n+        platform_version,\n+    ]);\n+    if abi != \"macabi\" {\n+        super::add_link_args(&mut args, LinkerFlavor::Gcc, &[\"-arch\", arch]);\n+    }\n \n     args\n }\n@@ -127,7 +124,7 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-pub fn macos_link_env_remove() -> Vec<Cow<'static, str>> {\n+pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {\n     let mut env_remove = Vec::with_capacity(2);\n     // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n     // may occur when we're linking a custom build script while targeting iOS for example."}, {"sha": "8cca33cc43b358e1a55cf56f23ce8c2bf5c31f51", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, RelocModel, Target, TargetOptions};\n \n /// A base target for AVR devices using the GNU toolchain.\n ///\n@@ -21,6 +21,7 @@ pub fn target(target_cpu: &'static str, mmcu: &'static str) -> Target {\n             late_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-lgcc\"]),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n+            relocation_model: RelocModel::Static,\n             ..TargetOptions::default()\n         },\n     }"}, {"sha": "2a24e4459c553c65ceb35feb37d8afb5fc8ba597", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n     base.crt_static_default = false;\n     base.has_rpath = true;\n     base.linker_is_gnu = false;\n-    base.dynamic_linking = true;\n \n     base.c_enum_min_bits = 8;\n "}, {"sha": "cab4dd333d43dbc5edb34d0f634616d7af6597bb", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -9,6 +9,7 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,\n         families: cvs![\"unix\"],\n+        relocation_model: RelocModel::Static,\n         ..Default::default()\n     }\n }"}, {"sha": "85f1da8ed09ff8a6fcb1c75b69971906aee3ee46", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -837,15 +837,15 @@ impl fmt::Display for StackProtector {\n }\n \n macro_rules! supported_targets {\n-    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n+    ( $(($triple:literal, $module:ident ),)+ ) => {\n         $(mod $module;)+\n \n         /// List of supported targets\n-        pub const TARGETS: &[&str] = &[$($($triple),+),+];\n+        pub const TARGETS: &[&str] = &[$($triple),+];\n \n         fn load_builtin(target: &str) -> Option<Target> {\n             let mut t = match target {\n-                $( $($triple)|+ => $module::target(), )+\n+                $( $triple => $module::target(), )+\n                 _ => return None,\n             };\n             t.is_builtin = true;\n@@ -861,7 +861,7 @@ macro_rules! supported_targets {\n             $(\n                 #[test] // `#[test]`\n                 fn $module() {\n-                    tests_impl::test_target(super::$module::target());\n+                    tests_impl::test_target(super::$module::target(), $triple);\n                 }\n             )+\n         }\n@@ -1528,7 +1528,7 @@ fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'stati\n     match flavor {\n         LinkerFlavor::Ld => insert(LinkerFlavor::Lld(LldFlavor::Ld)),\n         LinkerFlavor::Msvc => insert(LinkerFlavor::Lld(LldFlavor::Link)),\n-        LinkerFlavor::Lld(LldFlavor::Wasm) => {}\n+        LinkerFlavor::Lld(LldFlavor::Ld64) | LinkerFlavor::Lld(LldFlavor::Wasm) => {}\n         LinkerFlavor::Lld(lld_flavor) => {\n             panic!(\"add_link_args: use non-LLD flavor for {:?}\", lld_flavor)\n         }"}, {"sha": "75ac66c276d57c72b454b721c95d252d2280ac1f", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::Endian;\n-use crate::spec::{LinkerFlavor, RelocModel, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n@@ -15,7 +15,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             endian: Endian::Big,\n             features: \"+secure-plt\".into(),\n-            relocation_model: RelocModel::Pic,\n             mcount: \"_mcount\".into(),\n             ..base\n         },"}, {"sha": "4a53b9c173d1ff43b492e886e3313ab410c23530", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -2,18 +2,20 @@ use super::super::*;\n use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n-pub(super) fn test_target(target: Target) {\n-    target.check_consistency();\n+pub(super) fn test_target(target: Target, triple: &str) {\n+    target.check_consistency(triple);\n     assert_eq!(Target::from_json(target.to_json()).map(|(j, _)| j), Ok(target));\n }\n \n impl Target {\n-    fn check_consistency(&self) {\n+    fn check_consistency(&self, triple: &str) {\n         assert_eq!(self.is_like_osx, self.vendor == \"apple\");\n         assert_eq!(self.is_like_solaris, self.os == \"solaris\" || self.os == \"illumos\");\n         assert_eq!(self.is_like_windows, self.os == \"windows\" || self.os == \"uefi\");\n         assert_eq!(self.is_like_wasm, self.arch == \"wasm32\" || self.arch == \"wasm64\");\n-        assert!(self.is_like_windows || !self.is_like_msvc);\n+        if self.is_like_msvc {\n+            assert!(self.is_like_windows);\n+        }\n \n         // Check that default linker flavor and lld flavor are compatible\n         // with some other key properties.\n@@ -94,8 +96,9 @@ impl Target {\n                             check_noncc(LinkerFlavor::Ld);\n                             check_noncc(LinkerFlavor::Lld(LldFlavor::Ld));\n                         }\n+                        LldFlavor::Ld64 => check_noncc(LinkerFlavor::Lld(LldFlavor::Ld64)),\n                         LldFlavor::Wasm => check_noncc(LinkerFlavor::Lld(LldFlavor::Wasm)),\n-                        LldFlavor::Ld64 | LldFlavor::Link => {}\n+                        LldFlavor::Link => {}\n                     },\n                     _ => {}\n                 }\n@@ -109,20 +112,56 @@ impl Target {\n             );\n         }\n \n-        assert!(\n-            (self.pre_link_objects_self_contained.is_empty()\n-                && self.post_link_objects_self_contained.is_empty())\n-                || self.link_self_contained != LinkSelfContainedDefault::False\n-        );\n+        if self.link_self_contained == LinkSelfContainedDefault::False {\n+            assert!(\n+                self.pre_link_objects_self_contained.is_empty()\n+                    && self.post_link_objects_self_contained.is_empty()\n+            );\n+        }\n \n         // If your target really needs to deviate from the rules below,\n         // except it and document the reasons.\n         // Keep the default \"unknown\" vendor instead.\n         assert_ne!(self.vendor, \"\");\n+        assert_ne!(self.os, \"\");\n         if !self.can_use_os_unknown() {\n             // Keep the default \"none\" for bare metal targets instead.\n             assert_ne!(self.os, \"unknown\");\n         }\n+\n+        // Check dynamic linking stuff\n+        // BPF: when targeting user space vms (like rbpf), those can load dynamic libraries.\n+        if self.os == \"none\" && self.arch != \"bpf\" {\n+            assert!(!self.dynamic_linking);\n+        }\n+        if self.only_cdylib\n+            || self.crt_static_allows_dylibs\n+            || !self.late_link_args_dynamic.is_empty()\n+        {\n+            assert!(self.dynamic_linking);\n+        }\n+        // Apparently PIC was slow on wasm at some point, see comments in wasm_base.rs\n+        if self.dynamic_linking && !(self.is_like_wasm && self.os != \"emscripten\") {\n+            assert_eq!(self.relocation_model, RelocModel::Pic);\n+        }\n+        // PIEs are supported but not enabled by default with linuxkernel target.\n+        if self.position_independent_executables && !triple.ends_with(\"-linuxkernel\") {\n+            assert_eq!(self.relocation_model, RelocModel::Pic);\n+        }\n+        if self.relocation_model == RelocModel::Pic {\n+            assert!(self.dynamic_linking || self.position_independent_executables);\n+        }\n+        if self.static_position_independent_executables {\n+            assert!(self.position_independent_executables);\n+        }\n+        if self.position_independent_executables {\n+            assert!(self.executables);\n+        }\n+\n+        // Check crt static stuff\n+        if self.crt_static_default || self.crt_static_allows_dylibs {\n+            assert!(self.crt_static_respected);\n+        }\n     }\n \n     // Add your target to the whitelist if it has `std` library"}, {"sha": "250da03cbd2b656af8fa21df4a369f6a33c82f2d", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -9,7 +9,8 @@\n // the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n // code runs in the same environment, no process separation is supported.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, StackProbeType, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy};\n+use crate::spec::{RelocModel, StackProbeType, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::msvc_base::opts();\n@@ -46,6 +47,7 @@ pub fn opts() -> TargetOptions {\n         stack_probes: StackProbeType::Call,\n         singlethread: true,\n         linker: Some(\"rust-lld\".into()),\n+        relocation_model: RelocModel::Static,\n         ..base\n     }\n }"}, {"sha": "26da7e800114a17994a709771348c6c3585da4d3", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -4,8 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.crt_static_allows_dylibs = false;\n-    base.dynamic_linking = false;\n     base.panic_strategy = PanicStrategy::Abort;\n \n     Target {"}, {"sha": "b9a345127e3724d736c13be060afaae504890c03", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -4,10 +4,8 @@\n // `target-cpu` compiler flags to opt-in more hardware-specific\n // features.\n \n-use super::{\n-    CodeModel, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, RelroLevel, StackProbeType,\n-    Target, TargetOptions,\n-};\n+use super::{CodeModel, LinkerFlavor, LldFlavor, PanicStrategy};\n+use super::{RelroLevel, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n@@ -18,7 +16,6 @@ pub fn target() -> Target {\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        relocation_model: RelocModel::Pic,\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".into()),\n         features:"}, {"sha": "4dc9d183b0b20d2d1515e1a092057a411eee80f1", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -24,7 +24,7 @@ trait Freeze { }\n #[lang=\"copy\"]\n trait Copy { }\n \n-//x86_64: define win64cc void @has_efiapi\n+//x86_64: define dso_local win64cc void @has_efiapi\n //i686: define void @has_efiapi\n //aarch64: define dso_local void @has_efiapi\n //arm: define dso_local void @has_efiapi"}, {"sha": "a038dfe76f7077dbb59134f3f5d9ea4f36c36db5", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa857eb953e2395da0d10ad144df4ace9c732f56/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa857eb953e2395da0d10ad144df4ace9c732f56/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=aa857eb953e2395da0d10ad144df4ace9c732f56", "patch": "@@ -77,7 +77,7 @@ fn update_bar_value() {\n     }\n }\n \n-// CHECK: define void @test(){{.+}}addrspace(1)\n+// CHECK: define dso_local void @test(){{.+}}addrspace(1)\n #[no_mangle]\n pub extern \"C\" fn test() {\n     let mut buf = 7;"}]}