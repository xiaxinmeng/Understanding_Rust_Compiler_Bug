{"sha": "1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYjg0OGQ0YWMyMTFmZjBlODFlZTVhZTRkOTJiYjQyYjdmYWFjOGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T16:58:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T16:58:38Z"}, "message": "Re-use cranelift_codegen::ir::Function for every function\n\nFixes #844", "tree": {"sha": "45036371c1d1ac41a2ad55f19e2d785880ec6d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45036371c1d1ac41a2ad55f19e2d785880ec6d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "html_url": "https://github.com/rust-lang/rust/commit/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a7fca527961f1992afed245f02dc9c27e5049d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a7fca527961f1992afed245f02dc9c27e5049d", "html_url": "https://github.com/rust-lang/rust/commit/c5a7fca527961f1992afed245f02dc9c27e5049d"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "0d71438cee92a1c05dffe90fd78f5f66ad05e998", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "patch": "@@ -21,10 +21,13 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n         .map(|debug_context| FunctionDebugContext::new(debug_context, instance, func_id, &name));\n \n     // Make FunctionBuilder\n-    let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n-    func.collect_debug_info();\n+    let context = &mut cx.cached_context;\n+    context.clear();\n+    context.func.name = ExternalName::user(0, func_id.as_u32());\n+    context.func.signature = sig;\n+    context.func.collect_debug_info();\n     let mut func_ctx = FunctionBuilderContext::new();\n-    let mut bcx = FunctionBuilder::new(&mut func, &mut func_ctx);\n+    let mut bcx = FunctionBuilder::new(&mut context.func, &mut func_ctx);\n \n     // Predefine ebb's\n     let start_ebb = bcx.create_ebb();\n@@ -48,7 +51,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n         clif_comments,\n         constants_cx: &mut cx.constants_cx,\n-        caches: &mut cx.caches,\n+        vtables: &mut cx.vtables,\n         source_info_set: indexmap::IndexSet::new(),\n     };\n \n@@ -69,13 +72,10 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let local_map = fx.local_map;\n \n     #[cfg(debug_assertions)]\n-    crate::pretty_clif::write_clif_file(cx.tcx, \"unopt\", instance, &func, &clif_comments, None);\n+    crate::pretty_clif::write_clif_file(cx.tcx, \"unopt\", instance, &context.func, &clif_comments, None);\n \n     // Verify function\n-    verify_func(tcx, &clif_comments, &func);\n-\n-    let context = &mut cx.caches.context;\n-    context.func = func;\n+    verify_func(tcx, &clif_comments, &context.func);\n \n     // Perform rust specific optimizations\n     crate::optimize::optimize_function(cx.tcx, instance, context, &mut clif_comments);"}, {"sha": "3543df9cb865e20705671d30d41e63543fae098d", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "patch": "@@ -269,7 +269,7 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n \n     pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants_cx: &'clif mut crate::constant::ConstantCx,\n-    pub caches: &'clif mut Caches<'tcx>,\n+    pub vtables: &'clif mut HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n \n     pub source_info_set: indexmap::IndexSet<SourceInfo>,\n }"}, {"sha": "c318b868ff5046b6cc659ffa88a7098f8f28e986", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "patch": "@@ -114,7 +114,7 @@ mod prelude {\n     pub use crate::trap::*;\n     pub use crate::unimpl::unimpl;\n     pub use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n-    pub use crate::{Caches, CodegenCx};\n+    pub use crate::CodegenCx;\n \n     pub struct PrintOnPanic<F: Fn() -> String>(pub F);\n     impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n@@ -126,25 +126,12 @@ mod prelude {\n     }\n }\n \n-pub struct Caches<'tcx> {\n-    pub context: Context,\n-    pub vtables: HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n-}\n-\n-impl Default for Caches<'_> {\n-    fn default() -> Self {\n-        Caches {\n-            context: Context::new(),\n-            vtables: HashMap::new(),\n-        }\n-    }\n-}\n-\n pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n     tcx: TyCtxt<'tcx>,\n     module: &'clif mut Module<B>,\n     constants_cx: ConstantCx,\n-    caches: Caches<'tcx>,\n+    cached_context: Context,\n+    vtables: HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n     debug_context: Option<&'clif mut DebugContext<'tcx>>,\n }\n \n@@ -158,7 +145,8 @@ impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n             tcx,\n             module,\n             constants_cx: ConstantCx::default(),\n-            caches: Caches::default(),\n+            cached_context: Context::new(),\n+            vtables: HashMap::new(),\n             debug_context,\n         }\n     }"}, {"sha": "913bb712da3cb9ab47e9334d1d53c60c6c7685dc", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=1bb848d4ac211ff0e81ee5ae4d92bb42b7faac8a", "patch": "@@ -63,11 +63,11 @@ pub fn get_vtable<'tcx>(\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n-    let data_id = if let Some(data_id) = fx.caches.vtables.get(&(ty, trait_ref)) {\n+    let data_id = if let Some(data_id) = fx.vtables.get(&(ty, trait_ref)) {\n         *data_id\n     } else {\n         let data_id = build_vtable(fx, ty, trait_ref);\n-        fx.caches.vtables.insert((ty, trait_ref), data_id);\n+        fx.vtables.insert((ty, trait_ref), data_id);\n         data_id\n     };\n "}]}