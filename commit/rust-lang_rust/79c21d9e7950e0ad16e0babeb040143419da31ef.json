{"sha": "79c21d9e7950e0ad16e0babeb040143419da31ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YzIxZDllNzk1MGUwYWQxNmUwYmFiZWIwNDAxNDM0MTlkYTMxZWY=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-10-04T22:57:03Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-10-05T17:35:16Z"}, "message": "adding iterator benches to tree-based maps for comparison purposes", "tree": {"sha": "5c1e4cf7cd5cf0d8316b5f402e579a684a5fce88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1e4cf7cd5cf0d8316b5f402e579a684a5fce88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c21d9e7950e0ad16e0babeb040143419da31ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c21d9e7950e0ad16e0babeb040143419da31ef", "html_url": "https://github.com/rust-lang/rust/commit/79c21d9e7950e0ad16e0babeb040143419da31ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c21d9e7950e0ad16e0babeb040143419da31ef/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2e7c4da9b331d337fba0b3911c6d3d7f48e8305", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e7c4da9b331d337fba0b3911c6d3d7f48e8305", "html_url": "https://github.com/rust-lang/rust/commit/a2e7c4da9b331d337fba0b3911c6d3d7f48e8305"}], "stats": {"total": 110, "additions": 92, "deletions": 18}, "files": [{"sha": "956c3279d047585a698ec0b546471101b3ec5703", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/79c21d9e7950e0ad16e0babeb040143419da31ef/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c21d9e7950e0ad16e0babeb040143419da31ef/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=79c21d9e7950e0ad16e0babeb040143419da31ef", "patch": "@@ -1145,9 +1145,12 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use test::Bencher;\n+    use std::prelude::*;\n+    use std::rand::{weak_rng, Rng};\n+    use test::{Bencher, black_box};\n \n     use super::BTreeMap;\n+    use MutableMap;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     #[bench]\n@@ -1200,4 +1203,34 @@ mod bench {\n         let mut m : BTreeMap<uint,uint> = BTreeMap::new();\n         find_seq_n(10_000, &mut m, b);\n     }\n+\n+    fn bench_iter(b: &mut Bencher, size: uint) {\n+        let mut map = BTreeMap::<uint, uint>::new();\n+        let mut rng = weak_rng();\n+\n+        for _ in range(0, size) {\n+            map.swap(rng.gen(), rng.gen());\n+        }\n+\n+        b.iter(|| {\n+            for entry in map.iter() {\n+                black_box(entry);\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    pub fn iter_20(b: &mut Bencher) {\n+        bench_iter(b, 20);\n+    }\n+\n+    #[bench]\n+    pub fn iter_1000(b: &mut Bencher) {\n+        bench_iter(b, 1000);\n+    }\n+\n+    #[bench]\n+    pub fn iter_100000(b: &mut Bencher) {\n+        bench_iter(b, 100000);\n+    }\n }"}, {"sha": "a86e7386eddd8c07b55369721e030d07c5055f4a", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/79c21d9e7950e0ad16e0babeb040143419da31ef/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c21d9e7950e0ad16e0babeb040143419da31ef/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=79c21d9e7950e0ad16e0babeb040143419da31ef", "patch": "@@ -2232,9 +2232,12 @@ mod test_treemap {\n \n #[cfg(test)]\n mod bench {\n-    use test::Bencher;\n+    use std::prelude::*;\n+    use std::rand::{weak_rng, Rng};\n+    use test::{Bencher, black_box};\n \n     use super::TreeMap;\n+    use MutableMap;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n     // Find seq\n@@ -2288,6 +2291,36 @@ mod bench {\n         let mut m : TreeMap<uint,uint> = TreeMap::new();\n         find_seq_n(10_000, &mut m, b);\n     }\n+\n+    fn bench_iter(b: &mut Bencher, size: uint) {\n+        let mut map = TreeMap::<uint, uint>::new();\n+        let mut rng = weak_rng();\n+\n+        for _ in range(0, size) {\n+            map.swap(rng.gen(), rng.gen());\n+        }\n+\n+        b.iter(|| {\n+            for entry in map.iter() {\n+                black_box(entry);\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    pub fn iter_20(b: &mut Bencher) {\n+        bench_iter(b, 20);\n+    }\n+\n+    #[bench]\n+    pub fn iter_1000(b: &mut Bencher) {\n+        bench_iter(b, 1000);\n+    }\n+\n+    #[bench]\n+    pub fn iter_100000(b: &mut Bencher) {\n+        bench_iter(b, 100000);\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "63bb8b0c53c1f6e0373b660fadb82edd8c4173f8", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/79c21d9e7950e0ad16e0babeb040143419da31ef/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c21d9e7950e0ad16e0babeb040143419da31ef/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=79c21d9e7950e0ad16e0babeb040143419da31ef", "patch": "@@ -948,8 +948,8 @@ macro_rules! iterator_impl {\n                 // rules, and are just manipulating raw pointers like there's no\n                 // such thing as invalid pointers and memory unsafety. The\n                 // reason is performance, without doing this we can get the\n-                // bench_iter_large microbenchmark down to about 30000 ns/iter\n-                // (using .unsafe_get to index self.stack directly, 38000\n+                // (now replaced) bench_iter_large microbenchmark down to about\n+                // 30000 ns/iter (using .unsafe_get to index self.stack directly, 38000\n                 // ns/iter with [] checked indexing), but this smashes that down\n                 // to 13500 ns/iter.\n                 //\n@@ -1458,31 +1458,39 @@ mod test_map {\n mod bench_map {\n     use std::prelude::*;\n     use std::rand::{weak_rng, Rng};\n-    use test::Bencher;\n+    use test::{Bencher, black_box};\n \n     use MutableMap;\n     use super::TrieMap;\n \n-    #[bench]\n-    fn bench_iter_small(b: &mut Bencher) {\n-        let mut m = TrieMap::<uint>::new();\n+    fn bench_iter(b: &mut Bencher, size: uint) {\n+        let mut map = TrieMap::<uint>::new();\n         let mut rng = weak_rng();\n-        for _ in range(0u, 20) {\n-            m.insert(rng.gen(), rng.gen());\n+\n+        for _ in range(0, size) {\n+            map.swap(rng.gen(), rng.gen());\n         }\n \n-        b.iter(|| for _ in m.iter() {})\n+        b.iter(|| {\n+            for entry in map.iter() {\n+                black_box(entry);\n+            }\n+        });\n     }\n \n     #[bench]\n-    fn bench_iter_large(b: &mut Bencher) {\n-        let mut m = TrieMap::<uint>::new();\n-        let mut rng = weak_rng();\n-        for _ in range(0u, 1000) {\n-            m.insert(rng.gen(), rng.gen());\n-        }\n+    pub fn iter_20(b: &mut Bencher) {\n+        bench_iter(b, 20);\n+    }\n \n-        b.iter(|| for _ in m.iter() {})\n+    #[bench]\n+    pub fn iter_1000(b: &mut Bencher) {\n+        bench_iter(b, 1000);\n+    }\n+\n+    #[bench]\n+    pub fn iter_100000(b: &mut Bencher) {\n+        bench_iter(b, 100000);\n     }\n \n     #[bench]"}]}