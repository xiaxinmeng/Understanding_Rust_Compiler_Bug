{"sha": "043991662c648d86876be44bc3405ee3a60c37a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Mzk5MTY2MmM2NDhkODY4NzZiZTQ0YmMzNDA1ZWUzYTYwYzM3YTE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-24T12:52:44Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-24T12:52:44Z"}, "message": "Merge #889\n\n889: Refactor assits r=matklad a=matklad\n\n* assign unique IDs to assists so that clients could do custom stuff\r\n* specify kinds for assists, \r\n* make introduce_variable a `refactoring.extract` and make it available only when expression is selected\r\n* introduce marks to assists\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "45fcbfb58cce8650f67ce4f41e1b5564ef49bfb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45fcbfb58cce8650f67ce4f41e1b5564ef49bfb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/043991662c648d86876be44bc3405ee3a60c37a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/043991662c648d86876be44bc3405ee3a60c37a1", "html_url": "https://github.com/rust-lang/rust/commit/043991662c648d86876be44bc3405ee3a60c37a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/043991662c648d86876be44bc3405ee3a60c37a1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f6f160391db945a0dcc2f73b38926d6919f7c566", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f160391db945a0dcc2f73b38926d6919f7c566", "html_url": "https://github.com/rust-lang/rust/commit/f6f160391db945a0dcc2f73b38926d6919f7c566"}, {"sha": "c110e72a115bbec36413bd440812dfe9194c58e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c110e72a115bbec36413bd440812dfe9194c58e2", "html_url": "https://github.com/rust-lang/rust/commit/c110e72a115bbec36413bd440812dfe9194c58e2"}], "stats": {"total": 315, "additions": 182, "deletions": 133}, "files": [{"sha": "d4056a349f2cf37cb62197cb6d8ad93429c63f22", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -13,6 +13,4 @@ ra_text_edit = { path = \"../ra_text_edit\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_db = { path = \"../ra_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n-\n-[dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "e91b5eb8d6c09e9d82626ca433097d6f0b26ff44", "filename": "crates/ra_assists/src/add_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -5,12 +5,12 @@ use ra_syntax::{\n     TextUnit,\n };\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(nominal)?;\n-    ctx.add_action(\"add `#[derive]`\", |edit| {\n+    ctx.add_action(AssistId(\"add_derive\"), \"add `#[derive]`\", |edit| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_call())"}, {"sha": "b292f188daac6839727d707cbee0190d72d5006c", "filename": "crates/ra_assists/src/add_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -5,12 +5,12 @@ use ra_syntax::{\n     TextUnit,\n };\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n-    ctx.add_action(\"add impl\", |edit| {\n+    ctx.add_action(AssistId(\"add_impl\"), \"add impl\", |edit| {\n         edit.target(nominal.syntax().range());\n         let type_params = nominal.type_param_list();\n         let start_offset = nominal.syntax().range().end();"}, {"sha": "4ad21c74b37462e6fab2110a3d95ce9be43ded28", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n };\n use ra_fmt::{leading_indent, reindent};\n \n-use crate::{AssistLabel, AssistAction};\n+use crate::{AssistLabel, AssistAction, AssistId};\n \n #[derive(Clone, Debug)]\n pub(crate) enum Assist {\n@@ -81,10 +81,11 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n \n     pub(crate) fn add_action(\n         &mut self,\n+        id: AssistId,\n         label: impl Into<String>,\n         f: impl FnOnce(&mut AssistBuilder),\n     ) -> &mut Self {\n-        let label = AssistLabel { label: label.into() };\n+        let label = AssistLabel { label: label.into(), id };\n         match &mut self.assist {\n             Assist::Unresolved(labels) => labels.push(label),\n             Assist::Resolved(labels_actions) => {"}, {"sha": "685dbed0643192c0b5ebf4af6d244be36911bae2", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -4,7 +4,10 @@ use ra_syntax::{\n     ast::{ self, NameOwner }, AstNode, SyntaxNode, Direction, TextRange,\n     SyntaxKind::{ PATH, PATH_SEGMENT, COLONCOLON, COMMA }\n };\n-use crate::assist_ctx::{AssistCtx, Assist, AssistBuilder};\n+use crate::{\n+    AssistId,\n+    assist_ctx::{AssistCtx, Assist, AssistBuilder},\n+};\n \n fn collect_path_segments(path: &ast::Path) -> Option<Vec<&ast::PathSegment>> {\n     let mut v = Vec::new();\n@@ -526,6 +529,7 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n     if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n         if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n             ctx.add_action(\n+                AssistId(\"auto_import\"),\n                 format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n                 |edit| {\n                     apply_auto_import(item_list.syntax(), path, &segments, edit);\n@@ -534,9 +538,13 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n         }\n     } else {\n         let current_file = node.ancestors().find_map(ast::SourceFile::cast)?;\n-        ctx.add_action(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n-            apply_auto_import(current_file.syntax(), path, &segments, edit);\n-        });\n+        ctx.add_action(\n+            AssistId(\"auto_import\"),\n+            format!(\"import {} in the current file\", fmt_segments(&segments)),\n+            |edit| {\n+                apply_auto_import(current_file.syntax(), path, &segments, edit);\n+            },\n+        );\n     }\n \n     ctx.build()"}, {"sha": "50c1be5ae8b763a52ae69c9419f42344c8cbcbfd", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     SyntaxKind::{VISIBILITY, FN_KW, MOD_KW, STRUCT_KW, ENUM_KW, TRAIT_KW, FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF, IDENT, WHITESPACE, COMMENT, ATTR},\n };\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     if let Some(vis) = ctx.node_at_offset::<ast::Visibility>() {\n@@ -41,7 +41,7 @@ fn add_vis(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         (vis_offset(field.syntax()), ident.range())\n     };\n \n-    ctx.add_action(\"make pub(crate)\", |edit| {\n+    ctx.add_action(AssistId(\"change_visibility\"), \"make pub(crate)\", |edit| {\n         edit.target(target);\n         edit.insert(offset, \"pub(crate) \");\n         edit.set_cursor(offset);\n@@ -63,7 +63,7 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n \n fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n-        ctx.add_action(\"change to pub(crate)\", |edit| {\n+        ctx.add_action(AssistId(\"change_visibility\"), \"change to pub(crate)\", |edit| {\n             edit.target(vis.syntax().range());\n             edit.replace(vis.syntax().range(), \"pub(crate)\");\n             edit.set_cursor(vis.syntax().range().start())\n@@ -72,7 +72,7 @@ fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Op\n         return ctx.build();\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        ctx.add_action(\"change to pub\", |edit| {\n+        ctx.add_action(AssistId(\"change_visibility\"), \"change to pub\", |edit| {\n             edit.target(vis.syntax().range());\n             edit.replace(vis.syntax().range(), \"pub\");\n             edit.set_cursor(vis.syntax().range().start());"}, {"sha": "30020b56e3c4c8a34639d3c5cd1ebf050c8e5d80", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -6,7 +6,7 @@ use hir::{\n };\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n@@ -37,7 +37,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let enum_name = enum_def.name(ctx.db)?;\n     let db = ctx.db;\n \n-    ctx.add_action(\"fill match arms\", |edit| {\n+    ctx.add_action(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n         let mut buf = format!(\"match {} {{\\n\", expr.syntax().text().to_string());\n         let variants = enum_def.variants(db);\n         for variant in variants {"}, {"sha": "6b98cac68f635c001750f38e10f85bde6715ed84", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -5,13 +5,13 @@ use ra_syntax::{\n     algo::non_trivia_sibling,\n };\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.leaf_at_offset().find(|leaf| leaf.kind() == COMMA)?;\n     let prev = non_trivia_sibling(comma, Direction::Prev)?;\n     let next = non_trivia_sibling(comma, Direction::Next)?;\n-    ctx.add_action(\"flip comma\", |edit| {\n+    ctx.add_action(AssistId(\"flip_comma\"), \"flip comma\", |edit| {\n         edit.target(comma.range());\n         edit.replace(prev.range(), next.text());\n         edit.replace(next.range(), prev.text());"}, {"sha": "353bc41050adbb07c82a3abdc1b6bea25f9e08c2", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 61, "deletions": 85, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -1,3 +1,4 @@\n+use test_utils::tested_by;\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -6,20 +7,24 @@ use ra_syntax::{\n     }, SyntaxNode, TextUnit,\n };\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    if ctx.frange.range.is_empty() {\n+        return None;\n+    }\n     let node = ctx.covering_node();\n-    if !valid_covering_node(node) {\n+    if node.kind() == COMMENT {\n+        tested_by!(introduce_var_in_comment_is_not_applicable);\n         return None;\n     }\n-    let expr = node.ancestors().filter_map(valid_target_expr).next()?;\n+    let expr = node.ancestors().find_map(valid_target_expr)?;\n     let (anchor_stmt, wrap_in_block) = anchor_stmt(expr)?;\n     let indent = anchor_stmt.prev_sibling()?;\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    ctx.add_action(\"introduce variable\", move |edit| {\n+    ctx.add_action(AssistId(\"introduce_variable\"), \"introduce variable\", move |edit| {\n         let mut buf = String::new();\n \n         let cursor_offset = if wrap_in_block {\n@@ -38,6 +43,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             false\n         };\n         if is_full_stmt {\n+            tested_by!(test_introduce_var_expr_stmt);\n             if !full_stmt.unwrap().has_semi() {\n                 buf.push_str(\";\");\n             }\n@@ -73,9 +79,6 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n     ctx.build()\n }\n \n-fn valid_covering_node(node: &SyntaxNode) -> bool {\n-    node.kind() != COMMENT\n-}\n /// Check whether the node is a valid expression which can be extracted to a variable.\n /// In general that's true for any expression, but in some cases that would produce invalid code.\n fn valid_target_expr(node: &SyntaxNode) -> Option<&ast::Expr> {\n@@ -101,6 +104,7 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n \n         if let Some(expr) = node.parent().and_then(ast::Block::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == node {\n+                tested_by!(test_introduce_var_last_expr);\n                 return Some((node, false));\n             }\n         }\n@@ -117,8 +121,11 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::covers;\n+\n+    use crate::helpers::{check_assist_range_not_applicable, check_assist_range, check_assist_range_target};\n+\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_range, check_assist_target, check_assist_range_target};\n \n     #[test]\n     fn test_introduce_var_simple() {\n@@ -136,8 +143,18 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn introduce_var_in_comment_is_not_applicable() {\n+        covers!(introduce_var_in_comment_is_not_applicable);\n+        check_assist_range_not_applicable(\n+            introduce_variable,\n+            \"fn main() { 1 + /* <|>comment<|> */ 1; }\",\n+        );\n+    }\n+\n     #[test]\n     fn test_introduce_var_expr_stmt() {\n+        covers!(test_introduce_var_expr_stmt);\n         check_assist_range(\n             introduce_variable,\n             \"\n@@ -147,6 +164,19 @@ fn foo() {\n             \"\n fn foo() {\n     let <|>var_name = 1 + 1;\n+}\",\n+        );\n+        check_assist_range(\n+            introduce_variable,\n+            \"\n+fn foo() {\n+    <|>{ let x = 0; x }<|>\n+    something_else();\n+}\",\n+            \"\n+fn foo() {\n+    let <|>var_name = { let x = 0; x };\n+    something_else();\n }\",\n         );\n     }\n@@ -169,6 +199,7 @@ fn foo() {\n \n     #[test]\n     fn test_introduce_var_last_expr() {\n+        covers!(test_introduce_var_last_expr);\n         check_assist_range(\n             introduce_variable,\n             \"\n@@ -181,10 +212,6 @@ fn foo() {\n     bar(var_name)\n }\",\n         );\n-    }\n-\n-    #[test]\n-    fn test_introduce_var_last_full_expr() {\n         check_assist_range(\n             introduce_variable,\n             \"\n@@ -196,24 +223,7 @@ fn foo() {\n     let <|>var_name = bar(1 + 1);\n     var_name\n }\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_introduce_var_block_expr_second_to_last() {\n-        check_assist_range(\n-            introduce_variable,\n-            \"\n-fn foo() {\n-    <|>{ let x = 0; x }<|>\n-    something_else();\n-}\",\n-            \"\n-fn foo() {\n-    let <|>var_name = { let x = 0; x };\n-    something_else();\n-}\",\n-        );\n+        )\n     }\n \n     #[test]\n@@ -309,11 +319,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_path_simple() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n-    let o = S<|>ome(true);\n+    let o = <|>Some(true)<|>;\n }\n \",\n             \"\n@@ -327,11 +337,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_path_method() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n-    let v = b<|>ar.foo();\n+    let v = <|>bar.foo()<|>;\n }\n \",\n             \"\n@@ -345,11 +355,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_return() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n-    r<|>eturn 2 + 2;\n+    <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -363,13 +373,13 @@ fn foo() -> u32 {\n \n     #[test]\n     fn test_introduce_var_does_not_add_extra_whitespace() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n \n \n-    r<|>eturn 2 + 2;\n+    <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -382,12 +392,12 @@ fn foo() -> u32 {\n \",\n         );\n \n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n \n-        r<|>eturn 2 + 2;\n+        <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -399,7 +409,7 @@ fn foo() -> u32 {\n \",\n         );\n \n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n@@ -408,7 +418,7 @@ fn foo() -> u32 {\n     // bar\n \n \n-    r<|>eturn 2 + 2;\n+    <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -427,12 +437,12 @@ fn foo() -> u32 {\n \n     #[test]\n     fn test_introduce_var_break() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n     let result = loop {\n-        b<|>reak 2 + 2;\n+        <|>break 2 + 2<|>;\n     };\n }\n \",\n@@ -449,11 +459,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_for_cast() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n-    let v = 0f32 a<|>s u32;\n+    let v = <|>0f32 as u32<|>;\n }\n \",\n             \"\n@@ -467,57 +477,23 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_for_return_not_applicable() {\n-        check_assist_not_applicable(\n-            introduce_variable,\n-            \"\n-fn foo() {\n-    r<|>eturn;\n-}\n-\",\n-        );\n+        check_assist_range_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");\n     }\n \n     #[test]\n     fn test_introduce_var_for_break_not_applicable() {\n-        check_assist_not_applicable(\n-            introduce_variable,\n-            \"\n-fn main() {\n-    loop {\n-        b<|>reak;\n-    };\n-}\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_introduce_var_in_comment_not_applicable() {\n-        check_assist_not_applicable(\n+        check_assist_range_not_applicable(\n             introduce_variable,\n-            \"\n-fn main() {\n-    let x = true;\n-    let tuple = match x {\n-        // c<|>omment\n-        true => (2 + 2, true)\n-        _ => (0, false)\n-    };\n-}\n-\",\n+            \"fn main() { loop { <|>break<|>; }; }\",\n         );\n     }\n \n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n     fn introduce_var_target() {\n-        check_assist_target(\n+        check_assist_range_target(\n             introduce_variable,\n-            \"\n-fn foo() -> u32 {\n-    r<|>eturn 2 + 2;\n-}\n-\",\n+            \"fn foo() -> u32 { <|>return 2 + 2<|>; }\",\n             \"2 + 2\",\n         );\n "}, {"sha": "6c3d75d798f29f95668b98a9c87374dfc75a6f4f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -6,6 +6,7 @@\n //! becomes available.\n \n mod assist_ctx;\n+mod marks;\n \n use itertools::Itertools;\n \n@@ -16,10 +17,16 @@ use hir::db::HirDatabase;\n \n pub(crate) use crate::assist_ctx::{AssistCtx, Assist};\n \n+/// Unique identifier of the assist, should not be shown to the user\n+/// directly.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub struct AssistId(pub &'static str);\n+\n #[derive(Debug, Clone)]\n pub struct AssistLabel {\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n+    pub id: AssistId,\n }\n \n #[derive(Debug, Clone)]\n@@ -253,14 +260,25 @@ mod helpers {\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n     }\n+\n+    pub(crate) fn check_assist_range_not_applicable(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+    ) {\n+        let (range, before) = extract_range(before);\n+        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let frange = FileRange { file_id, range };\n+        let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n+        assert!(assist.is_none());\n+    }\n }\n \n #[cfg(test)]\n mod tests {\n     use hir::mock::MockDatabase;\n     use ra_syntax::TextRange;\n     use ra_db::FileRange;\n-    use test_utils::{extract_offset};\n+    use test_utils::{extract_offset, extract_range};\n \n     #[test]\n     fn assist_order_field_struct() {\n@@ -280,16 +298,15 @@ mod tests {\n     fn assist_order_if_expr() {\n         let before = \"\n         pub fn test_some_range(a: int) -> bool {\n-            if let 2..6 = 5<|> {\n+            if let 2..6 = <|>5<|> {\n                 true\n             } else {\n                 false\n             }\n         }\";\n-        let (before_cursor_pos, before) = extract_offset(before);\n+        let (range, before) = extract_range(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+        let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();\n "}, {"sha": "a29f9f6586ad1579bca10ea4e851550f1f753561", "filename": "crates/ra_assists/src/marks.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -0,0 +1,5 @@\n+test_utils::marks!(\n+    introduce_var_in_comment_is_not_applicable\n+    test_introduce_var_expr_stmt\n+    test_introduce_var_last_expr\n+);"}, {"sha": "6ea48d909b07f0784daedd803ef41c988c0a5264", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n         L_PAREN, R_PAREN, L_CURLY, R_CURLY, L_BRACK, R_BRACK, EXCL\n     },\n };\n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let macro_call = ctx.node_at_offset::<ast::MacroCall>()?;\n@@ -46,7 +46,7 @@ pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         macro_args.text().slice(start..end).to_string()\n     };\n \n-    ctx.add_action(\"remove dbg!()\", |edit| {\n+    ctx.add_action(AssistId(\"remove_dbg\"), \"remove dbg!()\", |edit| {\n         edit.target(macro_call.syntax().range());\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);"}, {"sha": "230573499d0c011f2d1854b66b2d274b3bda21f3", "filename": "crates/ra_assists/src/replace_if_let_with_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -2,7 +2,7 @@ use ra_syntax::{AstNode, ast};\n use ra_fmt::extract_trivial_expression;\n use hir::db::HirDatabase;\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: &ast::IfExpr = ctx.node_at_offset()?;\n@@ -15,7 +15,7 @@ pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) ->\n         ast::ElseBranchFlavor::IfExpr(_) => return None,\n     };\n \n-    ctx.add_action(\"replace with match\", |edit| {\n+    ctx.add_action(AssistId(\"replace_if_let_with_match\"), \"replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n         edit.target(if_expr.syntax().range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);"}, {"sha": "dd5be4e91db94ec9243eb427d5c4fa9de26f786b", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     algo::generate,\n };\n \n-use crate::{AssistCtx, Assist};\n+use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let colon_colon = ctx.leaf_at_offset().find(|leaf| leaf.kind() == COLONCOLON)?;\n@@ -23,7 +23,7 @@ pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         None => top_path.syntax().range().end(),\n     };\n \n-    ctx.add_action(\"split import\", |edit| {\n+    ctx.add_action(AssistId(\"split_import\"), \"split import\", |edit| {\n         edit.target(colon_colon.range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");"}, {"sha": "3c0475a51c7f735b881cd41ccdfb8ac3d77469b1", "filename": "crates/ra_ide_api/src/assists.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_ide_api%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_ide_api%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fassists.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -2,20 +2,30 @@ use ra_db::{FileRange, FilePosition};\n \n use crate::{SourceFileEdit, SourceChange, db::RootDatabase};\n \n-pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<SourceChange> {\n+pub use ra_assists::AssistId;\n+\n+#[derive(Debug)]\n+pub struct Assist {\n+    pub id: AssistId,\n+    pub change: SourceChange,\n+}\n+\n+pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n     ra_assists::assists(db, frange)\n         .into_iter()\n         .map(|(label, action)| {\n             let file_id = frange.file_id;\n             let file_edit = SourceFileEdit { file_id, edit: action.edit };\n-            SourceChange {\n+            let id = label.id;\n+            let change = SourceChange {\n                 label: label.label,\n                 source_file_edits: vec![file_edit],\n                 file_system_edits: vec![],\n                 cursor_position: action\n                     .cursor_position\n                     .map(|offset| FilePosition { offset, file_id }),\n-            }\n+            };\n+            Assist { id, change }\n         })\n         .collect()\n }"}, {"sha": "076a8396c6ff1b73adb8bf7dd68732cdb7c99add", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -57,6 +57,7 @@ pub use crate::{\n     runnables::{Runnable, RunnableKind},\n     navigation_target::NavigationTarget,\n     references::ReferenceSearchResult,\n+    assists::{Assist, AssistId},\n };\n pub use ra_ide_api_light::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode, LocalEdit,\n@@ -368,7 +369,7 @@ impl Analysis {\n \n     /// Computes assists (aks code actons aka intentions) for the given\n     /// position.\n-    pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<SourceChange>> {\n+    pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| assists::assists(db, frange))\n     }\n "}, {"sha": "5da7318011f5e0ce600f626420df14ab6479a96e", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -1,6 +1,6 @@\n use gen_lsp_server::ErrorCode;\n use lsp_types::{\n-    CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity,\n+    CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity, CodeAction,\n     DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n     MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n@@ -9,6 +9,7 @@ use lsp_types::{\n };\n use ra_ide_api::{\n     FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity, Cancelable,\n+    AssistId,\n };\n use ra_syntax::{AstNode, SyntaxKind, TextUnit};\n use rustc_hash::FxHashMap;\n@@ -576,28 +577,57 @@ pub fn handle_code_action(\n     let range = params.range.conv_with(&line_index);\n \n     let assists = world.analysis().assists(FileRange { file_id, range })?.into_iter();\n-    let fixes = world\n-        .analysis()\n-        .diagnostics(file_id)?\n+    let diagnostics = world.analysis().diagnostics(file_id)?;\n+    let mut res: Vec<CodeAction> = Vec::new();\n+\n+    let fixes_from_diagnostics = diagnostics\n         .into_iter()\n         .filter_map(|d| Some((d.range, d.fix?)))\n         .filter(|(diag_range, _fix)| diag_range.intersection(&range).is_some())\n         .map(|(_range, fix)| fix);\n \n-    let mut res = Vec::new();\n-    for source_edit in assists.chain(fixes) {\n+    for source_edit in fixes_from_diagnostics {\n         let title = source_edit.label.clone();\n         let edit = source_edit.try_conv_with(&world)?;\n \n-        let cmd = Command {\n+        let command = Command {\n+            title,\n+            command: \"rust-analyzer.applySourceChange\".to_string(),\n+            arguments: Some(vec![to_value(edit).unwrap()]),\n+        };\n+        let action = CodeAction {\n+            title: command.title.clone(),\n+            kind: None,\n+            diagnostics: None,\n+            edit: None,\n+            command: Some(command),\n+        };\n+        res.push(action);\n+    }\n+\n+    for assist in assists {\n+        let title = assist.change.label.clone();\n+        let edit = assist.change.try_conv_with(&world)?;\n+\n+        let command = Command {\n             title,\n             command: \"rust-analyzer.applySourceChange\".to_string(),\n             arguments: Some(vec![to_value(edit).unwrap()]),\n         };\n-        res.push(cmd);\n+        let action = CodeAction {\n+            title: command.title.clone(),\n+            kind: match assist.id {\n+                AssistId(\"introduce_variable\") => Some(\"refactor.extract.variable\".to_string()),\n+                _ => None,\n+            },\n+            diagnostics: None,\n+            edit: None,\n+            command: Some(command),\n+        };\n+        res.push(action);\n     }\n \n-    Ok(Some(CodeActionResponse::Commands(res)))\n+    Ok(Some(CodeActionResponse::Actions(res)))\n }\n \n pub fn handle_code_lens("}, {"sha": "996bf8e018ba21a07ec8efba3bc069ac173f7241", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043991662c648d86876be44bc3405ee3a60c37a1/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=043991662c648d86876be44bc3405ee3a60c37a1", "patch": "@@ -225,24 +225,27 @@ fn main() {}\n             context: empty_context(),\n         },\n         json!([\n-            {\n+          {\n+            \"command\": {\n               \"arguments\": [\n                 {\n                   \"cursorPosition\": null,\n+                  \"label\": \"create module\",\n                   \"workspaceEdit\": {\n                     \"documentChanges\": [\n                       {\n                         \"kind\": \"create\",\n                         \"uri\": \"file:///[..]/src/bar.rs\"\n                       }\n                     ]\n-                  },\n-                  \"label\": \"create module\"\n+                  }\n                 }\n               ],\n               \"command\": \"rust-analyzer.applySourceChange\",\n               \"title\": \"create module\"\n-            }\n+            },\n+            \"title\": \"create module\"\n+          }\n         ]),\n     );\n "}]}