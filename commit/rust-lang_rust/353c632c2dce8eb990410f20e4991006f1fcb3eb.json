{"sha": "353c632c2dce8eb990410f20e4991006f1fcb3eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1M2M2MzJjMmRjZThlYjk5MDQxMGYyMGU0OTkxMDA2ZjFmY2IzZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-15T17:58:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-15T23:20:34Z"}, "message": "libsyntax: Parse nested enums", "tree": {"sha": "7dbffb2cfd19cc75007e9534f33c1fd5756866b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dbffb2cfd19cc75007e9534f33c1fd5756866b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353c632c2dce8eb990410f20e4991006f1fcb3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353c632c2dce8eb990410f20e4991006f1fcb3eb", "html_url": "https://github.com/rust-lang/rust/commit/353c632c2dce8eb990410f20e4991006f1fcb3eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353c632c2dce8eb990410f20e4991006f1fcb3eb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb206f2855cc6f7d3d79379633f7429b7327fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb206f2855cc6f7d3d79379633f7429b7327fec", "html_url": "https://github.com/rust-lang/rust/commit/bdb206f2855cc6f7d3d79379633f7429b7327fec"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "4b8707d6858e9cb18475b0ef034612520a1fbd6c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/353c632c2dce8eb990410f20e4991006f1fcb3eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353c632c2dce8eb990410f20e4991006f1fcb3eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=353c632c2dce8eb990410f20e4991006f1fcb3eb", "patch": "@@ -2950,38 +2950,49 @@ class parser {\n             }\n \n             let vis = self.parse_visibility();\n-            let ident = self.parse_value_ident();\n+\n+            // Is this a nested enum declaration?\n+            let ident, needs_comma, kind;\n             let mut args = ~[], disr_expr = none;\n-            let kind;\n-            if self.eat(token::LBRACE) {\n-                // Parse a struct variant.\n-                all_nullary = false;\n-                let path = self.ident_to_path_tys(ident, ty_params);\n-                kind = struct_variant_kind(self.parse_struct_def(path));\n-            } else if self.token == token::LPAREN {\n-                all_nullary = false;\n-                let arg_tys = self.parse_unspanned_seq(\n-                    token::LPAREN, token::RPAREN,\n-                    seq_sep_trailing_disallowed(token::COMMA),\n-                    |p| p.parse_ty(false));\n-                for arg_tys.each |ty| {\n-                    vec::push(args, {ty: ty, id: self.get_id()});\n-                }\n-                kind = tuple_variant_kind(args);\n-            } else if self.eat(token::EQ) {\n-                have_disr = true;\n-                disr_expr = some(self.parse_expr());\n-                kind = tuple_variant_kind(args);\n+            if self.eat_keyword(~\"enum\") {\n+                ident = self.parse_ident();\n+                self.expect(token::LBRACE);\n+                let nested_enum_def = self.parse_enum_def(ident, ty_params);\n+                kind = enum_variant_kind(move nested_enum_def);\n+                needs_comma = false;\n             } else {\n-                kind = tuple_variant_kind(~[]);\n+                ident = self.parse_value_ident();\n+                if self.eat(token::LBRACE) {\n+                    // Parse a struct variant.\n+                    all_nullary = false;\n+                    let path = self.ident_to_path_tys(ident, ty_params);\n+                    kind = struct_variant_kind(self.parse_struct_def(path));\n+                } else if self.token == token::LPAREN {\n+                    all_nullary = false;\n+                    let arg_tys = self.parse_unspanned_seq(\n+                        token::LPAREN, token::RPAREN,\n+                        seq_sep_trailing_disallowed(token::COMMA),\n+                        |p| p.parse_ty(false));\n+                    for arg_tys.each |ty| {\n+                        vec::push(args, {ty: ty, id: self.get_id()});\n+                    }\n+                    kind = tuple_variant_kind(args);\n+                } else if self.eat(token::EQ) {\n+                    have_disr = true;\n+                    disr_expr = some(self.parse_expr());\n+                    kind = tuple_variant_kind(args);\n+                } else {\n+                    kind = tuple_variant_kind(~[]);\n+                }\n+                needs_comma = true;\n             }\n \n             let vr = {name: ident, attrs: variant_attrs,\n                       kind: kind, id: self.get_id(),\n                       disr_expr: disr_expr, vis: vis};\n             vec::push(variants, spanned(vlo, self.last_span.hi, vr));\n \n-            if !self.eat(token::COMMA) { break; }\n+            if needs_comma && !self.eat(token::COMMA) { break; }\n         }\n         self.expect(token::RBRACE);\n         if (have_disr && !all_nullary) {"}]}