{"sha": "efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYTA5ZWE1NTQ1NzVjZDBiNGNlMDFhZGE0NGZjZTczMGMwZjdhYzQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-31T18:46:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-03T10:10:54Z"}, "message": "on_unimplemented: add method-name checks and use them in Try", "tree": {"sha": "896816568ac690f302bad2440a353a0f13eb91ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896816568ac690f302bad2440a353a0f13eb91ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "html_url": "https://github.com/rust-lang/rust/commit/efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dec953c5ad7357a9f2d90626e56bc0dc30127a9", "html_url": "https://github.com/rust-lang/rust/commit/6dec953c5ad7357a9f2d90626e56bc0dc30127a9"}], "stats": {"total": 81, "additions": 69, "deletions": 12}, "files": [{"sha": "28e84d2fba69f2447f923c3f0141683ac7066446", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "patch": "@@ -21,7 +21,9 @@\n                                      (or another type that implements `{Try}`)\")]\n #[cfg_attr(not(stage0),\n            rustc_on_unimplemented(\n-               on(all(direct, from_desugaring=\"?\"),\n+               on(all(\n+                   any(from_method=\"from_error\", from_method=\"from_ok\"),\n+                   from_desugaring=\"?\"),\n                   message=\"the `?` operator can only be used in a \\\n                            function that returns `Result` \\\n                            (or another type that implements `{Try}`)\","}, {"sha": "ce6da55fec36b850277896f6f2d1f7828bd7af5a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "patch": "@@ -327,7 +327,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n \n-        let s;\n+        let desugaring;\n+        let method;\n         let mut flags = vec![];\n         let direct = match obligation.cause.code {\n             ObligationCauseCode::BuiltinDerivedObligation(..) |\n@@ -340,10 +341,23 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"direct\", None));\n         }\n \n+        if let ObligationCauseCode::ItemObligation(item) = obligation.cause.code {\n+            // FIXME: maybe also have some way of handling methods\n+            // from other traits? That would require name resolution,\n+            // which we might want to be some sort of hygienic.\n+            //\n+            // Currently I'm leaving it for what I need for `try`.\n+            if self.tcx.trait_of_item(item) == Some(trait_ref.def_id) {\n+                method = self.tcx.item_name(item).as_str();\n+                flags.push((\"from_method\", None));\n+                flags.push((\"from_method\", Some(&*method)));\n+            }\n+        }\n+\n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {\n-            s = k.as_symbol().as_str();\n+            desugaring = k.as_symbol().as_str();\n             flags.push((\"from_desugaring\", None));\n-            flags.push((\"from_desugaring\", Some(&*s)));\n+            flags.push((\"from_desugaring\", Some(&*desugaring)));\n         }\n \n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item("}, {"sha": "7dd3fc70b1e3fbf18852932d0c58fe5426eb4df5", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "patch": "@@ -176,6 +176,8 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n     {\n         let mut message = None;\n         let mut label = None;\n+        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\",\n+              self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n@@ -191,8 +193,13 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                 }\n             }\n             debug!(\"evaluate: {:?} succeeded\", command);\n-            message = command.message.clone();\n-            label = command.label.clone();\n+            if let Some(ref message_) = command.message {\n+                message = Some(message_.clone());\n+            }\n+\n+            if let Some(ref label_) = command.label {\n+                label = Some(label_.clone());\n+            }\n         }\n \n         OnUnimplementedNote {"}, {"sha": "473efea54de3492e0e4571c130f75bc0b65db278", "filename": "src/test/ui/suggestions/try-operator-on-main.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.rs?ref=efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "patch": "@@ -13,9 +13,21 @@\n use std::ops::Try;\n \n fn main() {\n+    // error for a `Try` type on a non-`Try` fn\n     std::fs::File::open(\"foo\")?;\n \n+    // a non-`Try` type on a `Try` fn\n+    ()?;\n+\n+    // an unrelated use of `Try`\n     try_trait_generic::<()>();\n }\n \n-fn try_trait_generic<T: Try>() {}\n+\n+\n+fn try_trait_generic<T: Try>() -> T {\n+    // and a non-`Try` object on a `Try` fn.\n+    ()?;\n+\n+    loop {}\n+}"}, {"sha": "5fc24e46fa7674c4a98441dd2f49aaf70bb62f42", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efa09ea554575cd0b4ce01ada44fce730c0f7ac4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=efa09ea554575cd0b4ce01ada44fce730c0f7ac4", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n-  --> $DIR/try-operator-on-main.rs:16:5\n+  --> $DIR/try-operator-on-main.rs:17:5\n    |\n-16 |     std::fs::File::open(\"foo\")?;\n+17 |     std::fs::File::open(\"foo\")?;\n    |     ---------------------------\n    |     |\n    |     cannot use the `?` operator in a function that returns `()`\n@@ -11,12 +11,34 @@ error[E0277]: the `?` operator can only be used in a function that returns `Resu\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:18:5\n+  --> $DIR/try-operator-on-main.rs:20:5\n    |\n-18 |     try_trait_generic::<()>();\n+20 |     ()?;\n+   |     ---\n+   |     |\n+   |     the trait `std::ops::Try` is not implemented for `()`\n+   |     in this macro invocation\n+   |\n+   = note: required by `std::ops::Try::into_result`\n+\n+error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n+  --> $DIR/try-operator-on-main.rs:23:5\n+   |\n+23 |     try_trait_generic::<()>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n    = note: required by `try_trait_generic`\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n+  --> $DIR/try-operator-on-main.rs:30:5\n+   |\n+30 |     ()?;\n+   |     ---\n+   |     |\n+   |     the trait `std::ops::Try` is not implemented for `()`\n+   |     in this macro invocation\n+   |\n+   = note: required by `std::ops::Try::into_result`\n+\n+error: aborting due to 4 previous errors\n "}]}