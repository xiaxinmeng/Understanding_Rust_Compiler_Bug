{"sha": "915460544ae1d830e227f4c07e02d11d5e0f6a78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTQ2MDU0NGFlMWQ4MzBlMjI3ZjRjMDdlMDJkMTFkNWUwZjZhNzg=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-07T17:44:59Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-07T17:44:59Z"}, "message": "Merge branch 'master' of https://github.com/rust-analyzer/rust-analyzer into feature/themes", "tree": {"sha": "6f6f709b0931ef0ff491c78c0b2b06c254c63ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6f709b0931ef0ff491c78c0b2b06c254c63ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915460544ae1d830e227f4c07e02d11d5e0f6a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915460544ae1d830e227f4c07e02d11d5e0f6a78", "html_url": "https://github.com/rust-lang/rust/commit/915460544ae1d830e227f4c07e02d11d5e0f6a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915460544ae1d830e227f4c07e02d11d5e0f6a78/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae45677fa9a32e4933c747bc3eb8b438f8f8a0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae45677fa9a32e4933c747bc3eb8b438f8f8a0a", "html_url": "https://github.com/rust-lang/rust/commit/cae45677fa9a32e4933c747bc3eb8b438f8f8a0a"}, {"sha": "2a8d48d8a9a83c46ca60bdf6e49a4690383b236a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8d48d8a9a83c46ca60bdf6e49a4690383b236a", "html_url": "https://github.com/rust-lang/rust/commit/2a8d48d8a9a83c46ca60bdf6e49a4690383b236a"}], "stats": {"total": 248, "additions": 177, "deletions": 71}, "files": [{"sha": "9d0db8024945e5ca26a8edfa9fc94968e64db7cd", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -2,6 +2,7 @@\n \n pub(crate) mod src;\n pub(crate) mod docs;\n+pub(crate) mod attrs;\n \n use std::sync::Arc;\n "}, {"sha": "f7db36b6681491a8ca6f9147809586a41c891dec", "filename": "crates/ra_hir/src/code_model/attrs.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -0,0 +1,92 @@\n+//! FIXME: write short doc here\n+\n+use crate::{\n+    db::{AstDatabase, DefDatabase, HirDatabase},\n+    Adt, Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static,\n+    Struct, StructField, Trait, TypeAlias, Union,\n+};\n+use hir_def::attr::Attr;\n+use hir_expand::hygiene::Hygiene;\n+use ra_syntax::ast;\n+use std::sync::Arc;\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AttrDef {\n+    Module(Module),\n+    StructField(StructField),\n+    Adt(Adt),\n+    Function(Function),\n+    EnumVariant(EnumVariant),\n+    Static(Static),\n+    Const(Const),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+    MacroDef(MacroDef),\n+}\n+\n+impl_froms!(\n+    AttrDef: Module,\n+    StructField,\n+    Adt(Struct, Enum, Union),\n+    EnumVariant,\n+    Static,\n+    Const,\n+    Function,\n+    Trait,\n+    TypeAlias,\n+    MacroDef\n+);\n+\n+pub trait Attrs {\n+    fn attrs(&self, db: &impl HirDatabase) -> Option<Arc<[Attr]>>;\n+}\n+\n+pub(crate) fn attributes_query(\n+    db: &(impl DefDatabase + AstDatabase),\n+    def: AttrDef,\n+) -> Option<Arc<[Attr]>> {\n+    match def {\n+        AttrDef::Module(it) => {\n+            let src = it.declaration_source(db)?;\n+            let hygiene = Hygiene::new(db, src.file_id);\n+            Attr::from_attrs_owner(&src.ast, &hygiene)\n+        }\n+        AttrDef::StructField(it) => match it.source(db).ast {\n+            FieldSource::Named(named) => {\n+                let src = it.source(db);\n+                let hygiene = Hygiene::new(db, src.file_id);\n+                Attr::from_attrs_owner(&named, &hygiene)\n+            }\n+            FieldSource::Pos(..) => None,\n+        },\n+        AttrDef::Adt(it) => match it {\n+            Adt::Struct(it) => attrs_from_ast(it, db),\n+            Adt::Enum(it) => attrs_from_ast(it, db),\n+            Adt::Union(it) => attrs_from_ast(it, db),\n+        },\n+        AttrDef::EnumVariant(it) => attrs_from_ast(it, db),\n+        AttrDef::Static(it) => attrs_from_ast(it, db),\n+        AttrDef::Const(it) => attrs_from_ast(it, db),\n+        AttrDef::Function(it) => attrs_from_ast(it, db),\n+        AttrDef::Trait(it) => attrs_from_ast(it, db),\n+        AttrDef::TypeAlias(it) => attrs_from_ast(it, db),\n+        AttrDef::MacroDef(it) => attrs_from_ast(it, db),\n+    }\n+}\n+\n+fn attrs_from_ast<T, D>(node: T, db: &D) -> Option<Arc<[Attr]>>\n+where\n+    T: HasSource,\n+    T::Ast: ast::AttrsOwner,\n+    D: DefDatabase + AstDatabase,\n+{\n+    let src = node.source(db);\n+    let hygiene = Hygiene::new(db, src.file_id);\n+    Attr::from_attrs_owner(&src.ast, &hygiene)\n+}\n+\n+impl<T: Into<AttrDef> + Copy> Attrs for T {\n+    fn attrs(&self, db: &impl HirDatabase) -> Option<Arc<[Attr]>> {\n+        db.attrs((*self).into())\n+    }\n+}"}, {"sha": "75c322c999935428f0264aef4102c9d8e36c781d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use hir_def::attr::Attr;\n use ra_db::salsa;\n use ra_syntax::SmolStr;\n \n@@ -75,6 +76,9 @@ pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n \n     #[salsa::invoke(crate::code_model::docs::documentation_query)]\n     fn documentation(&self, def: crate::DocDef) -> Option<crate::Documentation>;\n+\n+    #[salsa::invoke(crate::code_model::attrs::attributes_query)]\n+    fn attrs(&self, def: crate::AttrDef) -> Option<Arc<[Attr]>>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "131f6c797aae6aeabe7b7bbb5dc2f2fa1ff0d6ee", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -61,6 +61,7 @@ use crate::{ids::MacroFileKind, resolve::Resolver};\n pub use crate::{\n     adt::VariantDef,\n     code_model::{\n+        attrs::{AttrDef, Attrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,"}, {"sha": "4f95654419772c5c0d28b8d3672fc123d19012cf", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 57, "deletions": 52, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -1,15 +1,63 @@\n //! FIXME: write short doc here\n \n+use hir::{Ty, TypeCtor};\n+use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n+use ra_text_edit::TextEdit;\n+\n use crate::{\n     completion::{\n         completion_context::CompletionContext,\n         completion_item::{Builder, CompletionKind, Completions},\n     },\n     CompletionItem,\n };\n-use hir::{Ty, TypeCtor};\n-use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n-use ra_text_edit::TextEdit;\n+\n+pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n+    let dot_receiver = match &ctx.dot_receiver {\n+        Some(it) => it,\n+        None => return,\n+    };\n+\n+    let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n+        let text = dot_receiver.syntax().text();\n+        let without_dot = ..text.len() - TextUnit::of_char('.');\n+        text.slice(without_dot).to_string()\n+    } else {\n+        dot_receiver.syntax().text().to_string()\n+    };\n+\n+    let receiver_ty = ctx.analyzer.type_of(ctx.db, &dot_receiver);\n+\n+    if is_bool_or_unknown(receiver_ty) {\n+        postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n+            .add_to(acc);\n+        postfix_snippet(\n+            ctx,\n+            \"while\",\n+            \"while expr {}\",\n+            &format!(\"while {} {{\\n$0\\n}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+    }\n+\n+    postfix_snippet(ctx, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n+\n+    postfix_snippet(ctx, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n+\n+    postfix_snippet(\n+        ctx,\n+        \"match\",\n+        \"match expr {}\",\n+        &format!(\"match {} {{\\n    ${{1:_}} => {{$0\\\\}},\\n}}\", receiver_text),\n+    )\n+    .add_to(acc);\n+\n+    postfix_snippet(ctx, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc);\n+\n+    postfix_snippet(ctx, \"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text))\n+        .add_to(acc);\n+}\n \n fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n     let edit = {\n@@ -24,62 +72,19 @@ fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet:\n }\n \n fn is_bool_or_unknown(ty: Option<Ty>) -> bool {\n-    if let Some(ty) = ty {\n-        match ty {\n-            Ty::Apply(at) => match at.ctor {\n-                TypeCtor::Bool => true,\n-                _ => false,\n-            },\n-            Ty::Unknown => true,\n-            _ => false,\n-        }\n-    } else {\n-        true\n-    }\n-}\n-\n-pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n-    if let Some(dot_receiver) = &ctx.dot_receiver {\n-        let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n-            let text = dot_receiver.syntax().text();\n-            let without_dot = ..text.len() - TextUnit::of_char('.');\n-            text.slice(without_dot).to_string()\n-        } else {\n-            dot_receiver.syntax().text().to_string()\n-        };\n-        let receiver_ty = ctx.analyzer.type_of(ctx.db, &dot_receiver);\n-        if is_bool_or_unknown(receiver_ty) {\n-            postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n-                .add_to(acc);\n-            postfix_snippet(\n-                ctx,\n-                \"while\",\n-                \"while expr {}\",\n-                &format!(\"while {} {{\\n$0\\n}}\", receiver_text),\n-            )\n-            .add_to(acc);\n-        }\n-        postfix_snippet(ctx, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n-        postfix_snippet(ctx, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n-        postfix_snippet(ctx, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n-        postfix_snippet(\n-            ctx,\n-            \"match\",\n-            \"match expr {}\",\n-            &format!(\"match {} {{\\n    ${{1:_}} => {{$0\\\\}},\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n-        postfix_snippet(ctx, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc);\n-        postfix_snippet(ctx, \"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text))\n-            .add_to(acc);\n+    match &ty {\n+        Some(Ty::Apply(app)) if app.ctor == TypeCtor::Bool => true,\n+        Some(Ty::Unknown) | None => true,\n+        Some(_) => false,\n     }\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot;\n \n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+\n     fn do_postfix_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Postfix)\n     }"}, {"sha": "d861303b75e13163e29a2b4ea8a2549be086b727", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -1,8 +1,8 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{db::HirDatabase, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n+use hir::{db::HirDatabase, Attrs, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n use join_to_string::join;\n-use ra_syntax::ast::{AttrsOwner, NameOwner};\n+use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n \n use crate::completion::{\n@@ -18,11 +18,7 @@ impl Completions {\n         field: hir::StructField,\n         substs: &hir::Substs,\n     ) {\n-        let ast_node = field.source(ctx.db).ast;\n-        let is_deprecated = match ast_node {\n-            hir::FieldSource::Named(m) => is_deprecated(m),\n-            hir::FieldSource::Pos(m) => is_deprecated(m),\n-        };\n+        let is_deprecated = is_deprecated(field, ctx.db);\n         CompletionItem::new(\n             CompletionKind::Reference,\n             ctx.source_range(),\n@@ -185,7 +181,7 @@ impl Completions {\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), &macro_declaration)\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(docs.clone())\n-                .set_deprecated(is_deprecated(ast_node))\n+                .set_deprecated(is_deprecated(macro_, ctx.db))\n                 .detail(detail);\n \n         builder = if ctx.use_item_syntax.is_some() {\n@@ -218,7 +214,7 @@ impl Completions {\n                     CompletionItemKind::Function\n                 })\n                 .set_documentation(func.docs(ctx.db))\n-                .set_deprecated(is_deprecated(ast_node))\n+                .set_deprecated(is_deprecated(func, ctx.db))\n                 .detail(detail);\n \n         // Add `<>` for generic types\n@@ -250,7 +246,7 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n             .kind(CompletionItemKind::Const)\n             .set_documentation(constant.docs(ctx.db))\n-            .set_deprecated(is_deprecated(ast_node))\n+            .set_deprecated(is_deprecated(constant, ctx.db))\n             .detail(detail)\n             .add_to(self);\n     }\n@@ -266,13 +262,13 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n             .kind(CompletionItemKind::TypeAlias)\n             .set_documentation(type_alias.docs(ctx.db))\n-            .set_deprecated(is_deprecated(type_def))\n+            .set_deprecated(is_deprecated(type_alias, ctx.db))\n             .detail(detail)\n             .add_to(self);\n     }\n \n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n-        let is_deprecated = is_deprecated(variant.source(ctx.db).ast);\n+        let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = match variant.name(ctx.db) {\n             Some(it) => it,\n             None => return,\n@@ -291,8 +287,11 @@ impl Completions {\n     }\n }\n \n-fn is_deprecated(node: impl AttrsOwner) -> bool {\n-    node.attrs().filter_map(|x| x.simple_name()).any(|x| x == \"deprecated\")\n+fn is_deprecated(node: impl Attrs, db: &impl HirDatabase) -> bool {\n+    match node.attrs(db) {\n+        None => false,\n+        Some(attrs) => attrs.iter().any(|x| x.is_simple_atom(\"deprecated\")),\n+    }\n }\n \n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {"}, {"sha": "9b2e440fb9c21a6eb5a19fced114bc7dca06695b", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -28,7 +28,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n         T![fn] | T![unsafe] | T![extern] => fn_pointer_type(p),\n         T![for] => for_type(p),\n         T![impl] => impl_trait_type(p),\n-        T![dyn ] => dyn_trait_type(p),\n+        T![dyn] => dyn_trait_type(p),\n         // Some path types are not allowed to have bounds (no plus)\n         T![<] => path_type_(p, allow_bounds),\n         _ if paths::is_use_path_start(p) => path_or_macro_type_(p, allow_bounds),\n@@ -234,9 +234,9 @@ fn impl_trait_type(p: &mut Parser) {\n // test dyn_trait_type\n // type A = dyn Iterator<Item=Foo<'a>> + 'a;\n fn dyn_trait_type(p: &mut Parser) {\n-    assert!(p.at(T![dyn ]));\n+    assert!(p.at(T![dyn]));\n     let m = p.start();\n-    p.bump(T![dyn ]);\n+    p.bump(T![dyn]);\n     type_params::bounds_without_colon(p);\n     m.complete(p, DYN_TRAIT_TYPE);\n }"}, {"sha": "770b55a9ac8308b307ec72f061168a4c8d692623", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/915460544ae1d830e227f4c07e02d11d5e0f6a78/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915460544ae1d830e227f4c07e02d11d5e0f6a78/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=915460544ae1d830e227f4c07e02d11d5e0f6a78", "patch": "@@ -46,7 +46,7 @@ pub enum Mode {\n /// With verify = false,\n fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     match fs::read_to_string(path) {\n-        Ok(ref old_contents) if old_contents == contents => {\n+        Ok(ref old_contents) if normalize(old_contents) == normalize(contents) => {\n             return Ok(());\n         }\n         _ => (),\n@@ -56,7 +56,11 @@ fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     }\n     eprintln!(\"updating {}\", path.display());\n     fs::write(path, contents)?;\n-    Ok(())\n+    return Ok(());\n+\n+    fn normalize(s: &str) -> String {\n+        s.replace(\"\\r\\n\", \"\\n\")\n+    }\n }\n \n fn reformat(text: impl std::fmt::Display) -> Result<String> {"}]}