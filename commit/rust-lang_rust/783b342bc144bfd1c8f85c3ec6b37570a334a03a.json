{"sha": "783b342bc144bfd1c8f85c3ec6b37570a334a03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4M2IzNDJiYzE0NGJmZDFjOGY4NWMzZWM2YjM3NTcwYTMzNGEwM2E=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-28T20:25:59Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-28T20:25:59Z"}, "message": "Merge pull request #586 from mcarton/print\n\nAdd a lint to warn about use of `print{,ln}!`", "tree": {"sha": "cd0500dbd680ef529d755e924b2fdba49b161582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0500dbd680ef529d755e924b2fdba49b161582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783b342bc144bfd1c8f85c3ec6b37570a334a03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783b342bc144bfd1c8f85c3ec6b37570a334a03a", "html_url": "https://github.com/rust-lang/rust/commit/783b342bc144bfd1c8f85c3ec6b37570a334a03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783b342bc144bfd1c8f85c3ec6b37570a334a03a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edba6db9ed00c85a5b1a682781157a0daaff8a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edba6db9ed00c85a5b1a682781157a0daaff8a0", "html_url": "https://github.com/rust-lang/rust/commit/3edba6db9ed00c85a5b1a682781157a0daaff8a0"}, {"sha": "da93643357128faf432d2d03c29d87e81084dce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/da93643357128faf432d2d03c29d87e81084dce2", "html_url": "https://github.com/rust-lang/rust/commit/da93643357128faf432d2d03c29d87e81084dce2"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "2673d81f8080835d8d44a209049a70e732385da9", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/783b342bc144bfd1c8f85c3ec6b37570a334a03a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/783b342bc144bfd1c8f85c3ec6b37570a334a03a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=783b342bc144bfd1c8f85c3ec6b37570a334a03a", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 100 lints included in this crate:\n+There are 101 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -73,6 +73,7 @@ name\n [out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)               | deny    | out of bound constant indexing\n [panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                   | warn    | missing parameters in `panic!`\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                       | warn    | catches operations where precedence may be unclear. See the wiki for a list of cases caught\n+[print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                   | allow   | printing on stdout\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                             | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                       | warn    | using Range::step_by(0), which produces an infinite iterator\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                       | warn    | zipping iterator with a range when enumerate() would do"}, {"sha": "8b115a304e9f6bfc4c9fdd6dc74a5496afce2fb6", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/783b342bc144bfd1c8f85c3ec6b37570a334a03a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b342bc144bfd1c8f85c3ec6b37570a334a03a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=783b342bc144bfd1c8f85c3ec6b37570a334a03a", "patch": "@@ -6,6 +6,7 @@\n \n // this only exists to allow the \"dogfood\" integration test to work\n #[allow(dead_code)]\n+#[allow(print_stdout)]\n fn main() {\n     println!(\"What are you doing? Don't run clippy as an executable\");\n }\n@@ -77,6 +78,7 @@ pub mod misc_early;\n pub mod array_indexing;\n pub mod panic;\n pub mod derive;\n+pub mod print;\n \n mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n@@ -141,6 +143,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box strings::StringLitAsBytes);\n     reg.register_late_lint_pass(box derive::Derive);\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n+    reg.register_late_lint_pass(box print::PrintLint);\n \n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n@@ -149,6 +152,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         methods::WRONG_PUB_SELF_CONVENTION,\n         mut_mut::MUT_MUT,\n         mutex_atomic::MUTEX_INTEGER,\n+        print::PRINT_STDOUT,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,\n         shadow::SHADOW_UNRELATED,"}, {"sha": "a47fa69b2e88c01c27a80925fcdd0285b0a92933", "filename": "src/print.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/783b342bc144bfd1c8f85c3ec6b37570a334a03a/src%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b342bc144bfd1c8f85c3ec6b37570a334a03a/src%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprint.rs?ref=783b342bc144bfd1c8f85c3ec6b37570a334a03a", "patch": "@@ -0,0 +1,49 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::{IO_PRINT_PATH, is_expn_of, match_path, span_lint};\n+\n+/// **What it does:** This lint warns whenever you print on *stdout*. This lint is `Allow` by\n+/// default, the purpose is to catch debugging remnants.\n+///\n+/// **Why is this bad?** People often print on *stdout* while debugging an application and might\n+/// forget to remove those prints afterward.\n+///\n+/// **Known problems:** Only catches `print!` and `println!` calls.\n+///\n+/// **Example:** `println!(\"Hello world!\");`\n+declare_lint! {\n+    pub PRINT_STDOUT,\n+    Allow,\n+    \"printing on stdout\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct PrintLint;\n+\n+impl LintPass for PrintLint {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(PRINT_STDOUT)\n+    }\n+}\n+\n+impl LateLintPass for PrintLint {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let ExprCall(ref fun, _) = expr.node {\n+            if let ExprPath(_, ref path) = fun.node {\n+                if match_path(path, &IO_PRINT_PATH) {\n+                    if let Some(span) = is_expn_of(cx, expr.span, \"print\") {\n+                        let (span, name) = match is_expn_of(cx, span, \"println\") {\n+                            Some(span) => (span, \"println\"),\n+                            None => (span, \"print\"),\n+                        };\n+\n+                        span_lint(cx,\n+                                  PRINT_STDOUT,\n+                                  span,\n+                                  &format!(\"use of `{}!`\", name));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "c59e35c5c5b875b1baaf0327c934f2c8404f80bc", "filename": "src/utils.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/783b342bc144bfd1c8f85c3ec6b37570a334a03a/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b342bc144bfd1c8f85c3ec6b37570a334a03a/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=783b342bc144bfd1c8f85c3ec6b37570a334a03a", "patch": "@@ -29,6 +29,7 @@ pub const DEFAULT_TRAIT_PATH: [&'static str; 3] = [\"core\", \"default\", \"Default\"]\n pub const HASHMAP_ENTRY_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASH_PATH: [&'static str; 2] = [\"hash\", \"Hash\"];\n+pub const IO_PRINT_PATH: [&'static str; 3] = [\"std\", \"io\", \"_print\"];\n pub const LL_PATH: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n pub const MUTEX_PATH: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS_PATH: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n@@ -645,3 +646,29 @@ fn is_cast_ty_equal(left: &Ty, right: &Ty) -> bool {\n         _ => false,\n     }\n }\n+\n+/// Return the pre-expansion span is this comes from a expansion of the macro `name`.\n+pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span> {\n+    loop {\n+        let span_name_span = cx.tcx.sess.codemap().with_expn_info(span.expn_id, |expn| {\n+            expn.map(|ei| {\n+                (ei.callee.name(), ei.call_site)\n+            })\n+        });\n+\n+        return match span_name_span {\n+            Some((mac_name, new_span)) => {\n+                if mac_name.as_str() == name {\n+                    Some(new_span)\n+                }\n+                else {\n+                    span = new_span;\n+                    continue;\n+                }\n+            }\n+            None => {\n+                None\n+            }\n+        };\n+    }\n+}"}, {"sha": "8141cdd2645a960b08511430db9d081317adca2e", "filename": "tests/compile-fail/print.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/783b342bc144bfd1c8f85c3ec6b37570a334a03a/tests%2Fcompile-fail%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783b342bc144bfd1c8f85c3ec6b37570a334a03a/tests%2Fcompile-fail%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprint.rs?ref=783b342bc144bfd1c8f85c3ec6b37570a334a03a", "patch": "@@ -0,0 +1,11 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(print_stdout)]\n+\n+fn main() {\n+    println!(\"Hello\"); //~ERROR use of `println!`\n+    print!(\"Hello\"); //~ERROR use of `print!`\n+\n+    vec![1, 2];\n+}"}]}