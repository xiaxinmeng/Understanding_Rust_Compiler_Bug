{"sha": "35e5056b6a89d97d386416da44058cc736994ba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTUwNTZiNmE4OWQ5N2QzODY0MTZkYTQ0MDU4Y2M3MzY5OTRiYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-16T17:06:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-16T17:06:38Z"}, "message": "auto merge of #11000 : cmr/rust/auto_encode, r=alexcrichton\n\nCloses #6122", "tree": {"sha": "45038b14fd65527421b210df2164d2f56ab4585d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45038b14fd65527421b210df2164d2f56ab4585d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e5056b6a89d97d386416da44058cc736994ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e5056b6a89d97d386416da44058cc736994ba9", "html_url": "https://github.com/rust-lang/rust/commit/35e5056b6a89d97d386416da44058cc736994ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e5056b6a89d97d386416da44058cc736994ba9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e77c1148f0cf702310e5c2cd85b369100ff8ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e77c1148f0cf702310e5c2cd85b369100ff8ec6", "html_url": "https://github.com/rust-lang/rust/commit/4e77c1148f0cf702310e5c2cd85b369100ff8ec6"}, {"sha": "b1fcba6024adeb290e17e48be8184722dacf9261", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1fcba6024adeb290e17e48be8184722dacf9261", "html_url": "https://github.com/rust-lang/rust/commit/b1fcba6024adeb290e17e48be8184722dacf9261"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "86af60e736000b02318e171129c6a300df2ff2fe", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/35e5056b6a89d97d386416da44058cc736994ba9/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5056b6a89d97d386416da44058cc736994ba9/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=35e5056b6a89d97d386416da44058cc736994ba9", "patch": "@@ -1,6 +1,6 @@\n // xfail-fast\n \n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,14 +10,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test #6122\n+#[feature(managed_boxes)];\n \n extern mod extra;\n \n // These tests used to be separate files, but I wanted to refactor all\n // the common code.\n \n use std::hashmap::{HashMap, HashSet};\n+use std::io::Decorator;\n \n use EBReader = extra::ebml::reader;\n use EBWriter = extra::ebml::writer;\n@@ -32,17 +33,14 @@ fn test_ebml<A:\n     Encodable<EBWriter::Encoder> +\n     Decodable<EBReader::Decoder>\n >(a1: &A) {\n-    let bytes = do io::with_bytes_writer |wr| {\n-        let mut ebml_w = EBWriter::Encoder(wr);\n-        a1.encode(&mut ebml_w)\n-    };\n+    let mut wr = @mut std::io::mem::MemWriter::new();\n+    let mut ebml_w = EBWriter::Encoder(wr);\n+    a1.encode(&mut ebml_w);\n+    let bytes = wr.inner_ref().to_owned();\n+\n     let d = EBReader::Doc(@bytes);\n     let mut decoder = EBReader::Decoder(d);\n     let a2: A = Decodable::decode(&mut decoder);\n-    if !(*a1 == a2) {\n-        ::std::sys::FailWithCause::fail_with(~\"explicit failure\" + \"foo\",\n-                                             \"auto-encode.rs\", 43u);\n-    }\n     assert!(*a1 == a2);\n }\n \n@@ -139,47 +137,41 @@ pub fn main() {\n     let a = &Plus(@Minus(@Val(3u), @Val(10u)), @Plus(@Val(22u), @Val(5u)));\n     test_ebml(a);\n \n-//    let a = &Spanned {lo: 0u, hi: 5u, node: 22u};\n-//    test_ebml(a);\n+    let a = &Spanned {lo: 0u, hi: 5u, node: 22u};\n+    test_ebml(a);\n \n-//    let a = &Point {x: 3u, y: 5u};\n-//    test_ebml(a);\n-//\n-//    let a = &@[1u, 2u, 3u];\n-//    test_ebml(a);\n-//\n-//    let a = &Top(22u);\n-//    test_ebml(a);\n-//\n-//    let a = &Bottom(222u);\n-//    test_ebml(a);\n-//\n-//    let a = &A;\n-//    test_ebml(a);\n-//\n-//    let a = &B;\n-//    test_ebml(a);\n+    let a = &Point {x: 3u, y: 5u};\n+    test_ebml(a);\n+\n+    let a = &@[1u, 2u, 3u];\n+    test_ebml(a);\n+\n+    let a = &Top(22u);\n+    test_ebml(a);\n+\n+    let a = &Bottom(222u);\n+    test_ebml(a);\n+\n+    let a = &A;\n+    test_ebml(a);\n+\n+    let a = &B;\n+    test_ebml(a);\n \n-    println(\"Hi1\");\n     let a = &time::now();\n     test_ebml(a);\n \n-    println(\"Hi2\");\n-//    test_ebml(&1.0f32);\n-//    test_ebml(&1.0f64);\n-    test_ebml(&1.0f);\n-//    println(\"Hi3\");\n-//    test_ebml(&'a');\n+    test_ebml(&1.0f32);\n+    test_ebml(&1.0f64);\n+    test_ebml(&'a');\n \n-    println(\"Hi4\");\n     let mut a = HashMap::new();\n     test_ebml(&a);\n     a.insert(1, 2);\n-    println(\"Hi4\");\n     test_ebml(&a);\n \n-//    let mut a = HashSet::new();\n-//    test_ebml(&a);\n-//    a.insert(1);\n-//    test_ebml(&a);\n+    let mut a = HashSet::new();\n+    test_ebml(&a);\n+    a.insert(1);\n+    test_ebml(&a);\n }"}]}