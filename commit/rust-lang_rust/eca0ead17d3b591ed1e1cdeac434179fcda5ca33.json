{"sha": "eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "node_id": "C_kwDOAAsO6NoAKGVjYTBlYWQxN2QzYjU5MWVkMWUxY2RlYWM0MzQxNzlmY2RhNWNhMzM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-31T13:52:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-31T13:52:40Z"}, "message": "Enforce well formedness for type alias impl trait's hidden type", "tree": {"sha": "787208501919c098c75806cbf0c9d129c2ed5fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787208501919c098c75806cbf0c9d129c2ed5fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "html_url": "https://github.com/rust-lang/rust/commit/eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e50ff9b4521234e56ff46f8ed0372d5cb5689654", "url": "https://api.github.com/repos/rust-lang/rust/commits/e50ff9b4521234e56ff46f8ed0372d5cb5689654", "html_url": "https://github.com/rust-lang/rust/commit/e50ff9b4521234e56ff46f8ed0372d5cb5689654"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "336821772535f362f9eebc6ef2699b0e9c1d68c9", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "patch": "@@ -12,12 +12,13 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{def::Res, ItemKind, Node, PathSegment};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n+use rustc_infer::traits::Obligation;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnv, ToPredicate, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, MultiSpan, Span};\n@@ -674,6 +675,13 @@ fn check_opaque_meets_bounds<'tcx>(\n             }\n         }\n \n+        // Additionally require the hidden type to be well-formed with only the generics of the opaque type.\n+        // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n+        // hidden type is well formed even without those bounds.\n+        let predicate =\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_type.into())).to_predicate(tcx);\n+        inh.register_predicate(Obligation::new(misc_cause, param_env, predicate));\n+\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);"}, {"sha": "e18cb31acbdf089908d37945d97772dd854ad278", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "patch": "@@ -171,8 +171,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Region checking during the WF phase for items. `wf_tys` are the\n     /// types from which we should derive implied bounds, if any.\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {\n-        debug!(\"regionck_item(item.id={:?}, wf_tys={:?})\", item_id, wf_tys);\n         let subject = self.tcx.hir().local_def_id(item_id);\n         let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);\n         rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);"}, {"sha": "22264670f37cad5865cb7b81eef995368c8b7918", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_generic.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.rs?ref=eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "patch": "@@ -0,0 +1,28 @@\n+#![feature(type_alias_impl_trait)]\n+\n+use std::marker::PhantomData;\n+\n+trait Trait {\n+    fn foo<T, U>(t: T) -> U;\n+}\n+\n+trait ProofForConversion<X> {\n+    fn convert<T, U>(_: PhantomData<Self>, r: T) -> U;\n+}\n+\n+impl<X: Trait> ProofForConversion<X> for () {\n+    fn convert<T, U>(_: PhantomData<Self>, r: T) -> U {\n+        X::foo(r)\n+    }\n+}\n+\n+type Converter<T> = impl ProofForConversion<T>;\n+//~^ ERROR the trait bound `T: Trait` is not satisfied\n+\n+fn _defining_use<T: Trait>() -> Converter<T> {\n+    ()\n+}\n+\n+\n+fn main() {\n+}"}, {"sha": "1c305abcfeb27e7fc37f831d9b3ea02172de6a9e", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_generic.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr?ref=eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/underconstrained_generic.rs:19:21\n+   |\n+LL | type Converter<T> = impl ProofForConversion<T>;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+note: required because of the requirements on the impl of `ProofForConversion<T>` for `()`\n+  --> $DIR/underconstrained_generic.rs:13:16\n+   |\n+LL | impl<X: Trait> ProofForConversion<X> for () {\n+   |                ^^^^^^^^^^^^^^^^^^^^^     ^^\n+help: consider restricting type parameter `T`\n+   |\n+LL | type Converter<T: Trait> = impl ProofForConversion<T>;\n+   |                 +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c5b2e8a1c5eed918e85990c96b9c2b112d2f13c9", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_lifetime.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_lifetime.rs?ref=eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "patch": "@@ -0,0 +1,34 @@\n+#![feature(type_alias_impl_trait)]\n+\n+use std::marker::PhantomData;\n+\n+trait ProofForConversion<'a, 'b> {\n+    fn convert<T: ?Sized>(_: PhantomData<Self>, r: &'a T) -> &'b T;\n+}\n+\n+impl<'a, 'b> ProofForConversion<'a, 'b> for &'b &'a () {\n+    fn convert<T: ?Sized>(_: PhantomData<Self>, r: &'a T) -> &'b T {\n+        r\n+    }\n+}\n+\n+type Converter<'a, 'b> = impl ProofForConversion<'a, 'b>;\n+//~^ ERROR reference has a longer lifetime than the data it references\n+\n+// Even _defining_use with an explicit `'a: 'b` compiles fine, too.\n+fn _defining_use<'a, 'b>(x: &'b &'a ()) -> Converter<'a, 'b> {\n+    x\n+}\n+\n+fn extend_lifetime<'a, 'b, T: ?Sized>(x: &'a T) -> &'b T {\n+    Converter::<'a, 'b>::convert(PhantomData, x)\n+}\n+\n+fn main() {\n+    let d;\n+    {\n+        let x = \"Hello World\".to_string();\n+        d = extend_lifetime(&x);\n+    }\n+    println!(\"{}\", d);\n+}"}, {"sha": "12d85a49d01c81972eef06e5e6d4cbc85d3a3cd8", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_lifetime.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eca0ead17d3b591ed1e1cdeac434179fcda5ca33/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_lifetime.stderr?ref=eca0ead17d3b591ed1e1cdeac434179fcda5ca33", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'b &'a ()`, reference has a longer lifetime than the data it references\n+  --> $DIR/underconstrained_lifetime.rs:15:26\n+   |\n+LL | type Converter<'a, 'b> = impl ProofForConversion<'a, 'b>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime `'b` as defined here\n+  --> $DIR/underconstrained_lifetime.rs:15:20\n+   |\n+LL | type Converter<'a, 'b> = impl ProofForConversion<'a, 'b>;\n+   |                    ^^\n+note: but the referenced data is only valid for the lifetime `'a` as defined here\n+  --> $DIR/underconstrained_lifetime.rs:15:16\n+   |\n+LL | type Converter<'a, 'b> = impl ProofForConversion<'a, 'b>;\n+   |                ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}]}