{"sha": "5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODFjZTZjMTBhZTBiNGU2NTAzZGIwMDgxZTJkZWZkN2VmODI5ZmY=", "commit": {"author": {"name": "Dylan McKay", "email": "me@dylanmckay.io", "date": "2020-06-19T07:04:30Z"}, "committer": {"name": "Dylan McKay", "email": "me@dylanmckay.io", "date": "2020-07-21T17:16:26Z"}, "message": "[AVR] Ensure that function pointers stored within aggregates are annotated with the correct space\n\nBefore this patch, a function pointer stored within an aggregate like a\nstruct or an enum would always have the default address space `0`.\n\nThis patch removes this assumption and instead, introspects the inner\ntype being pointed at, storing the target address space in the PointeeInfo\nstruct so that downstream users may query it.", "tree": {"sha": "7a0f333cc5588a3dbbd5f664301539ba1ef33407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a0f333cc5588a3dbbd5f664301539ba1ef33407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "html_url": "https://github.com/rust-lang/rust/commit/5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/comments", "author": {"login": "dylanmckay", "id": 7722159, "node_id": "MDQ6VXNlcjc3MjIxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/7722159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylanmckay", "html_url": "https://github.com/dylanmckay", "followers_url": "https://api.github.com/users/dylanmckay/followers", "following_url": "https://api.github.com/users/dylanmckay/following{/other_user}", "gists_url": "https://api.github.com/users/dylanmckay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylanmckay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylanmckay/subscriptions", "organizations_url": "https://api.github.com/users/dylanmckay/orgs", "repos_url": "https://api.github.com/users/dylanmckay/repos", "events_url": "https://api.github.com/users/dylanmckay/events{/privacy}", "received_events_url": "https://api.github.com/users/dylanmckay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dylanmckay", "id": 7722159, "node_id": "MDQ6VXNlcjc3MjIxNTk=", "avatar_url": "https://avatars.githubusercontent.com/u/7722159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylanmckay", "html_url": "https://github.com/dylanmckay", "followers_url": "https://api.github.com/users/dylanmckay/followers", "following_url": "https://api.github.com/users/dylanmckay/following{/other_user}", "gists_url": "https://api.github.com/users/dylanmckay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylanmckay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylanmckay/subscriptions", "organizations_url": "https://api.github.com/users/dylanmckay/orgs", "repos_url": "https://api.github.com/users/dylanmckay/repos", "events_url": "https://api.github.com/users/dylanmckay/events{/privacy}", "received_events_url": "https://api.github.com/users/dylanmckay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae5eadb22f378b6b1d277c4e7e978639b47838c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae5eadb22f378b6b1d277c4e7e978639b47838c", "html_url": "https://github.com/rust-lang/rust/commit/8ae5eadb22f378b6b1d277c4e7e978639b47838c"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "1d0adc5783f3d74dc99836108f59889fe23d1ce9", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::layout::{FnAbiExt, TyAndLayout};\n use rustc_middle::ty::print::obsolete::DefPathBasedNames;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n-use rustc_target::abi::{Abi, Align, FieldsShape};\n+use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{LayoutOf, PointeeInfo, Scalar, Size, TyAndLayoutMethods, Variants};\n \n@@ -310,12 +310,13 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n             F64 => cx.type_f64(),\n             Pointer => {\n                 // If we know the alignment, pick something better than i8.\n-                let pointee = if let Some(pointee) = self.pointee_info_at(cx, offset) {\n-                    cx.type_pointee_for_align(pointee.align)\n-                } else {\n-                    cx.type_i8()\n-                };\n-                cx.type_ptr_to(pointee)\n+                let (pointee, address_space) =\n+                    if let Some(pointee) = self.pointee_info_at(cx, offset) {\n+                        (cx.type_pointee_for_align(pointee.align), pointee.address_space)\n+                    } else {\n+                        (cx.type_i8(), AddressSpace::DATA)\n+                    };\n+                cx.type_ptr_to_ext(pointee, address_space)\n             }\n         }\n     }"}, {"sha": "dc775b15927fa2edaf2fa09c4194a4f27e79d96e", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "patch": "@@ -2166,16 +2166,31 @@ where\n     }\n \n     fn pointee_info_at(this: TyAndLayout<'tcx>, cx: &C, offset: Size) -> Option<PointeeInfo> {\n-        match this.ty.kind {\n+        let addr_space_of_ty = |ty: Ty<'tcx>| {\n+            if ty.is_fn() { cx.data_layout().instruction_address_space } else { AddressSpace::DATA }\n+        };\n+\n+        let pointee_info = match this.ty.kind {\n             ty::RawPtr(mt) if offset.bytes() == 0 => {\n                 cx.layout_of(mt.ty).to_result().ok().map(|layout| PointeeInfo {\n                     size: layout.size,\n                     align: layout.align.abi,\n                     safe: None,\n+                    address_space: addr_space_of_ty(mt.ty),\n+                })\n+            }\n+            ty::FnPtr(fn_sig) if offset.bytes() == 0 => {\n+                cx.layout_of(cx.tcx().mk_fn_ptr(fn_sig)).to_result().ok().map(|layout| {\n+                    PointeeInfo {\n+                        size: layout.size,\n+                        align: layout.align.abi,\n+                        safe: None,\n+                        address_space: cx.data_layout().instruction_address_space,\n+                    }\n                 })\n             }\n-\n             ty::Ref(_, ty, mt) if offset.bytes() == 0 => {\n+                let address_space = addr_space_of_ty(ty);\n                 let tcx = cx.tcx();\n                 let is_freeze = ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env());\n                 let kind = match mt {\n@@ -2210,6 +2225,7 @@ where\n                     size: layout.size,\n                     align: layout.align.abi,\n                     safe: Some(kind),\n+                    address_space,\n                 })\n             }\n \n@@ -2254,7 +2270,9 @@ where\n                             result = field.to_result().ok().and_then(|field| {\n                                 if ptr_end <= field_start + field.size {\n                                     // We found the right field, look inside it.\n-                                    field.pointee_info_at(cx, offset - field_start)\n+                                    let field_info =\n+                                        field.pointee_info_at(cx, offset - field_start);\n+                                    field_info\n                                 } else {\n                                     None\n                                 }\n@@ -2277,7 +2295,14 @@ where\n \n                 result\n             }\n-        }\n+        };\n+\n+        debug!(\n+            \"pointee_info_at (offset={:?}, type kind: {:?}) => {:?}\",\n+            offset, this.ty.kind, pointee_info\n+        );\n+\n+        pointee_info\n     }\n }\n "}, {"sha": "b3e5f5c0c74b163e90d55d521ac17a93e1050059", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5581ce6c10ae0b4e6503db0081e2defd7ef829ff/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=5581ce6c10ae0b4e6503db0081e2defd7ef829ff", "patch": "@@ -1024,7 +1024,7 @@ impl<T, E> MaybeResult<T> for Result<T, E> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n     Shared,\n@@ -1039,11 +1039,12 @@ pub enum PointerKind {\n     UniqueOwned,\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub struct PointeeInfo {\n     pub size: Size,\n     pub align: Align,\n     pub safe: Option<PointerKind>,\n+    pub address_space: AddressSpace,\n }\n \n pub trait TyAndLayoutMethods<'a, C: LayoutOf<Ty = Self>>: Sized {"}]}