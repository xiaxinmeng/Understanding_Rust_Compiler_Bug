{"sha": "e1afa519e820a93e4d24a9265f46fa4275b93c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYWZhNTE5ZTgyMGE5M2U0ZDI0YTkyNjVmNDZmYTQyNzViOTNjMmE=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-09-28T17:49:48Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Fix Mir visitor macro to ensure it calls the proper method to invalidate the predecessors cache", "tree": {"sha": "d67d3698f69bb26753a12ae4ce7e49afc257841e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67d3698f69bb26753a12ae4ce7e49afc257841e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1afa519e820a93e4d24a9265f46fa4275b93c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1afa519e820a93e4d24a9265f46fa4275b93c2a", "html_url": "https://github.com/rust-lang/rust/commit/e1afa519e820a93e4d24a9265f46fa4275b93c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1afa519e820a93e4d24a9265f46fa4275b93c2a/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b3145606827d1bd2b78004c6012fc060dee3d08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3145606827d1bd2b78004c6012fc060dee3d08", "html_url": "https://github.com/rust-lang/rust/commit/2b3145606827d1bd2b78004c6012fc060dee3d08"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "df231ef73e6dbccfd2ab633e1060b988a07faa8a", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e1afa519e820a93e4d24a9265f46fa4275b93c2a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1afa519e820a93e4d24a9265f46fa4275b93c2a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e1afa519e820a93e4d24a9265f46fa4275b93c2a", "patch": "@@ -789,19 +789,31 @@ macro_rules! make_mir_visitor {\n             }\n \n             // Convenience methods\n-\n-            fn visit_location(&mut self, body: & $($mutability)? Body<'tcx>, location: Location) {\n-                let basic_block = & $($mutability)? body[location.block];\n-                if basic_block.statements.len() == location.statement_index {\n-                    // TODO(nashenas88) how to ensure we clear the cache only in the mutable case...\n-                    if let Some(ref $($mutability)? terminator) = basic_block.terminator {\n-                        self.visit_terminator(terminator, location)\n-                    }\n-                } else {\n-                    let statement = & $($mutability)?\n-                        basic_block.statements[location.statement_index];\n-                    self.visit_statement(statement, location)\n+            make_mir_visitor!{@make_visit_location, $($mutability)?}\n+        }\n+    };\n+    (@make_visit_location, mut) => {\n+       fn visit_location(&mut self, body: &mut Body<'tcx>, location: Location) {\n+          if body[location.block].statements.len() == location.statement_index {\n+            if let Some(ref mut terminator) = body.basic_block_terminator_opt_mut(location.block) {\n+                self.visit_terminator(terminator, location)\n+            }\n+          } else {\n+            let statement = &mut body[location.block].statements[location.statement_index];\n+            self.visit_statement(statement, location)\n+          }\n+       }\n+    };\n+    (@make_visit_location, ) => {\n+        fn visit_location(&mut self, body: &Body<'tcx>, location: Location) {\n+            let basic_block = &body[location.block];\n+            if basic_block.statements.len() == location.statement_index {\n+                if let Some(ref terminator) = basic_block.terminator_opt() {\n+                    self.visit_terminator(terminator, location)\n                 }\n+            } else {\n+                let statement = &basic_block.statements[location.statement_index];\n+                self.visit_statement(statement, location)\n             }\n         }\n     }"}]}