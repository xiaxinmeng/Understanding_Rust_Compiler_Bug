{"sha": "22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyODM3YjA3NDgzYzkxZjhmYmRhMmJkMWRmM2UyYmI4M2FmNWM0OGQ=", "commit": {"author": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-19T07:53:25Z"}, "committer": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-19T20:23:56Z"}, "message": "Combine block utilities", "tree": {"sha": "4828fa58b7ecede1fb27b9e08adb483e9bcff26a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4828fa58b7ecede1fb27b9e08adb483e9bcff26a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "html_url": "https://github.com/rust-lang/rust/commit/22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22837b07483c91f8fbda2bd1df3e2bb83af5c48d/comments", "author": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7de5a16e230d8cf533c1cafee574862f06b968", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7de5a16e230d8cf533c1cafee574862f06b968", "html_url": "https://github.com/rust-lang/rust/commit/4d7de5a16e230d8cf533c1cafee574862f06b968"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "7616ef0c328ea62fad01f76f20ed2c3893c49a03", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/22837b07483c91f8fbda2bd1df3e2bb83af5c48d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22837b07483c91f8fbda2bd1df3e2bb83af5c48d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "patch": "@@ -688,6 +688,27 @@ fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n     !contains_comment(&snippet)\n }\n \n+/// Checks whether a block contains at most one statement or expression, and no comments.\n+pub fn is_simple_block_stmt(block: &ast::Block, codemap: &CodeMap) -> bool {\n+    if (!block.stmts.is_empty() && block.expr.is_some()) ||\n+       (block.stmts.len() != 1 && block.expr.is_none()) {\n+        return false;\n+    }\n+\n+    let snippet = codemap.span_to_snippet(block.span).unwrap();\n+    !contains_comment(&snippet)\n+}\n+\n+/// Checks whether a block contains no statements, expressions, or comments.\n+pub fn is_empty_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n+    if !block.stmts.is_empty() || block.expr.is_some() {\n+        return false;\n+    }\n+\n+    let snippet = codemap.span_to_snippet(block.span).unwrap();\n+    !contains_comment(&snippet)\n+}\n+\n // inter-match-arm-comment-rules:\n //  - all comments following a match arm before the start of the next arm\n //    are about the second arm"}, {"sha": "f16f5b50e6d7fd6738ee613e173c25e848ef3d43", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/22837b07483c91f8fbda2bd1df3e2bb83af5c48d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22837b07483c91f8fbda2bd1df3e2bb83af5c48d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "patch": "@@ -15,14 +15,14 @@ use utils::{format_mutability, format_visibility, contains_skip, span_after, end\n             wrap_str, last_line_width, semicolon_for_expr, semicolon_for_stmt};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n-use expr::rewrite_assign_rhs;\n-use comment::{FindUncommented, contains_comment};\n+use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n+use comment::FindUncommented;\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n \n use syntax::{ast, abi};\n-use syntax::codemap::{Span, BytePos, CodeMap, mk_sp};\n+use syntax::codemap::{Span, BytePos, mk_sp};\n use syntax::print::pprust;\n use syntax::parse::token;\n \n@@ -1392,23 +1392,3 @@ fn span_for_where_pred(pred: &ast::WherePredicate) -> Span {\n         ast::WherePredicate::EqPredicate(ref p) => p.span,\n     }\n }\n-\n-// Checks whether a block contains at most one statement or expression, and no comments.\n-fn is_simple_block_stmt(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    if (!block.stmts.is_empty() && block.expr.is_some()) ||\n-       (block.stmts.len() != 1 && block.expr.is_none()) {\n-        return false;\n-    }\n-\n-    let snippet = codemap.span_to_snippet(block.span).unwrap();\n-    !contains_comment(&snippet)\n-}\n-\n-fn is_empty_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    if !block.stmts.is_empty() || block.expr.is_some() {\n-        return false;\n-    }\n-\n-    let snippet = codemap.span_to_snippet(block.span).unwrap();\n-    !contains_comment(&snippet)\n-}"}]}