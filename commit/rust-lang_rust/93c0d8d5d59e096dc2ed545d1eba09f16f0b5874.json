{"sha": "93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "node_id": "C_kwDOAAsO6NoAKDkzYzBkOGQ1ZDU5ZTA5NmRjMmVkNTQ1ZDFlYmEwOWYxNmYwYjU4NzQ", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-08T01:46:01Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-08T01:47:12Z"}, "message": "remove unreachable error code `E0313`", "tree": {"sha": "1b15db9db91603dc1797ef582ef91afa20614573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b15db9db91603dc1797ef582ef91afa20614573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmO6IKAVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNETksP/RwR47NVKT1in76QECNKFOMT3axf\nWA9YXP1oSH9n6TV8/49kB+LZo/Lynb5VDs5jTmoj4Mxo+xIg5M+TI91AcSTxLCER\nOJowfbqzgt277Cx9Hbe8gFdMshjcp74wu8TYVoXLBpnrEkOVch5M3Komam8V13cy\n0wAwUygjSIqifleQ7LKoJWSFYVaIXRBhypF3ZxNFqpHd0xvR8C1FRTNDQfUHfj2y\n90eUl4mQNoWukDkUfvtxay1rv/h2lNMkzxjBnbbIMWgLBwO2frhlkmVI0DEcFlGi\nhHzGmv4G3pwy1hRW86k7HE3pwzmFFqB1G6prq9sOMH/RgdWt581zDY6uMig/zhiB\nMz8S7xBFyxfiDzYHLFCUz83uz0P80n+dMD/nKc7Qno5j02IwRKpOPCWcst0PL0hj\nKBbbR598EsoNjYhMy3cZ8pbyGfIDTLMoQVE1YNsHlA0JIbo3QTwtXapIcjjtbksi\nU60dHHBmQt5hwatuOB5J9NRI/okpArYBN15c+MnWWJpDoL0YsXbnFCNLAn1RjuGQ\nIAeIkVP17ZQGqihWJWyWB+8UcVAPoAwZg15N3b2ZNYry3MkFw3pryTFgTeA1Y+bO\ncnYDAossoyksRLFMKo87ONv/fBUiw4jY/3Rs1R3NpTX/yBemMEawykzD0szEfxAb\n63ETdx6wE625mmEx\n=YzXQ\n-----END PGP SIGNATURE-----", "payload": "tree 1b15db9db91603dc1797ef582ef91afa20614573\nparent e5d46a5bdac3f19793297914d4ada432024fbe95\nauthor Ezra Shaw <ezrasure@outlook.com> 1673142361 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1673142432 +1300\n\nremove unreachable error code `E0313`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "html_url": "https://github.com/rust-lang/rust/commit/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d46a5bdac3f19793297914d4ada432024fbe95", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d46a5bdac3f19793297914d4ada432024fbe95", "html_url": "https://github.com/rust-lang/rust/commit/e5d46a5bdac3f19793297914d4ada432024fbe95"}], "stats": {"total": 49, "additions": 3, "deletions": 46}, "files": [{"sha": "76d5da19399ed9bb58776ed01b066ad90e3496d2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "patch": "@@ -579,8 +579,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0300, // unexpanded macro\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n-    E0313, // lifetime of borrowed pointer outlives lifetime of captured\n-           // variable\n+//  E0313, // removed: found unreachable\n //  E0314, // closure outlives stack frame\n //  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums"}, {"sha": "b02e7d73c51f863e33390d59ef320b1f24e07302", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-filelength\n //! Error Reporting Code for the inference engine\n //!\n //! Because of the way inference, and in particular region inference,"}, {"sha": "7bb79d7bda8ddf5e2954803da34046a212a45a91", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "patch": "@@ -25,16 +25,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             infer::Reborrow(span) => {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_reborrow }.add_to_diagnostic(err)\n             }\n-            infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                RegionOriginNote::WithName {\n-                    span,\n-                    msg: fluent::infer_reborrow,\n-                    name: &var_name.to_string(),\n-                    continues: false,\n-                }\n-                .add_to_diagnostic(err);\n-            }\n             infer::RelateObjectBound(span) => {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_relate_object_bound }\n                     .add_to_diagnostic(err);\n@@ -162,33 +152,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0313,\n-                    \"lifetime of borrowed pointer outlives lifetime of captured variable `{}`...\",\n-                    var_name\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"...the borrowed pointer is valid for \",\n-                    sub,\n-                    \"...\",\n-                    None,\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    &format!(\"...but `{}` is only valid for \", var_name),\n-                    sup,\n-                    \"\",\n-                    None,\n-                );\n-                err\n-            }\n             infer::RelateObjectBound(span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "bc8bbd4be6ae19105f2bf84d2e5defd17d0c96ef", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "patch": "@@ -409,9 +409,6 @@ pub enum SubregionOrigin<'tcx> {\n     /// Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n-    /// Creating a pointer `b` to contents of an upvar\n-    ReborrowUpvar(Span, ty::UpvarId),\n-\n     /// Data with type `Ty<'tcx>` was borrowed\n     DataBorrowed(Ty<'tcx>, Span),\n \n@@ -1954,7 +1951,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             RelateParamBound(a, ..) => a,\n             RelateRegionParamBound(a) => a,\n             Reborrow(a) => a,\n-            ReborrowUpvar(a, _) => a,\n             DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplItemObligation { span, .. } => span,"}, {"sha": "adc074467416b74d9d28ea58187c702aaecac444", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "patch": "@@ -33,8 +33,8 @@ const IGNORE_DOCTEST_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\"];\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n const IGNORE_UI_TEST_CHECK: &[&str] = &[\n-    \"E0313\", \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\",\n-    \"E0729\", \"E0789\",\n+    \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0789\",\n ];\n \n macro_rules! verbose_print {"}]}