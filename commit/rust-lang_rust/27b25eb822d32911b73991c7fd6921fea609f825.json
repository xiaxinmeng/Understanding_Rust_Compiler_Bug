{"sha": "27b25eb822d32911b73991c7fd6921fea609f825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YjI1ZWI4MjJkMzI5MTFiNzM5OTFjN2ZkNjkyMWZlYTYwOWY4MjU=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-03T13:44:49Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-04T18:02:17Z"}, "message": "Restrict visibility of location_triple_for_span.", "tree": {"sha": "0932382c5f919a46a0df48777d358bf2ee5cca88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0932382c5f919a46a0df48777d358bf2ee5cca88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b25eb822d32911b73991c7fd6921fea609f825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b25eb822d32911b73991c7fd6921fea609f825", "html_url": "https://github.com/rust-lang/rust/commit/27b25eb822d32911b73991c7fd6921fea609f825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b25eb822d32911b73991c7fd6921fea609f825/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d", "html_url": "https://github.com/rust-lang/rust/commit/b76a5be18f69b79ddad8a6b72faf8ae9f2bb5e6d"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "0525108d2d129a928dee79aa1bdd7ef06c49ba9e", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27b25eb822d32911b73991c7fd6921fea609f825/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b25eb822d32911b73991c7fd6921fea609f825/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=27b25eb822d32911b73991c7fd6921fea609f825", "patch": "@@ -59,7 +59,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.alloc_caller_location(file, line, column)\n     }\n \n-    pub fn location_triple_for_span(&self, span: Span) -> (Symbol, u32, u32) {\n+    pub(super) fn location_triple_for_span(&self, span: Span) -> (Symbol, u32, u32) {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         ("}]}