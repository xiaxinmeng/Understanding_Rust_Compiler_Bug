{"sha": "1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYWQ3NTQxZGI5MGE0ZDcwYjAxYTBlNGM5ZDQxZjllNjgzZjhlOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T17:40:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T17:40:48Z"}, "message": "Auto merge of #7223 - ThibsG:FpUselessConversion7205, r=camsteffen\n\nFix FPs about generic args\n\nFix 2 false positives in [`use_self`] and [`useless_conversion`] lints, by taking into account generic args and comparing them.\n\nFixes: #7205\nFixes: #7206\n\nchangelog: Fix FPs about generic args in [`use_self`] and [`useless_conversion`] lints", "tree": {"sha": "4c8e90521300922f354dfb558ddc402d50039a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8e90521300922f354dfb558ddc402d50039a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "html_url": "https://github.com/rust-lang/rust/commit/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec8d957291644ded59b29a08414112e8a3c42ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec8d957291644ded59b29a08414112e8a3c42ec", "html_url": "https://github.com/rust-lang/rust/commit/cec8d957291644ded59b29a08414112e8a3c42ec"}, {"sha": "2fb35ce4f0ea8d33bbe207c8a1c8822ebb90c813", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb35ce4f0ea8d33bbe207c8a1c8822ebb90c813", "html_url": "https://github.com/rust-lang/rust/commit/2fb35ce4f0ea8d33bbe207c8a1c8822ebb90c813"}], "stats": {"total": 175, "additions": 161, "deletions": 14}, "files": [{"sha": "2ad6fa77f4818ed8c93c890def8c5b52cf3a425e", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -1,20 +1,20 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::same_type_and_consts;\n use clippy_utils::{in_macro, meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n use rustc_hir::{\n-    def,\n+    self as hir,\n+    def::{self, DefKind},\n     def_id::LocalDefId,\n     intravisit::{walk_ty, NestedVisitorMap, Visitor},\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, PathSegment,\n     QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::{AssocKind, Ty, TyS};\n+use rustc_middle::ty::{AssocKind, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{BytePos, Span};\n@@ -459,7 +459,7 @@ fn in_impl(cx: &LateContext<'tcx>, hir_ty: &hir::Ty<'_>) -> bool {\n \n fn should_lint_ty(hir_ty: &hir::Ty<'_>, ty: Ty<'_>, self_ty: Ty<'_>) -> bool {\n     if_chain! {\n-        if TyS::same_type(ty, self_ty);\n+        if same_type_and_consts(ty, self_ty);\n         if let TyKind::Path(QPath::Resolved(_, path)) = hir_ty.kind;\n         then {\n             !matches!(path.res, def::Res::SelfTy(..))"}, {"sha": "2be99fb761b18be18a119e8cfc48a8e1a4ca2831", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{get_parent_expr, match_def_path, match_trait_method, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, TyS};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 if match_trait_method(cx, e, &paths::INTO) && &*name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n-                    if TyS::same_type(a, b) {\n+                    if same_type_and_consts(a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n                         span_lint_and_sugg(\n                             cx,\n@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     }\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n-                    if TyS::same_type(a, b) {\n+                    if same_type_and_consts(a, b) {\n                         let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n                         span_lint_and_sugg(\n                             cx,\n@@ -110,7 +110,8 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     if is_type_diagnostic_item(cx, a, sym::result_type);\n                     if let ty::Adt(_, substs) = a.kind();\n                     if let Some(a_type) = substs.types().next();\n-                    if TyS::same_type(a_type, b);\n+                    if same_type_and_consts(a_type, b);\n+\n                     then {\n                         span_lint_and_help(\n                             cx,\n@@ -137,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             if is_type_diagnostic_item(cx, a, sym::result_type);\n                             if let ty::Adt(_, substs) = a.kind();\n                             if let Some(a_type) = substs.types().next();\n-                            if TyS::same_type(a_type, b);\n+                            if same_type_and_consts(a_type, b);\n \n                             then {\n                                 let hint = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"TryFrom::try_from\"));\n@@ -154,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n \n                         if_chain! {\n                             if match_def_path(cx, def_id, &paths::FROM_FROM);\n-                            if TyS::same_type(a, b);\n+                            if same_type_and_consts(a, b);\n \n                             then {\n                                 let sugg = Sugg::hir_with_macro_callsite(cx, &args[0], \"<expr>\").maybe_par();"}, {"sha": "e1f8aff3740d292d900e738a8101252ead5896fc", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -322,3 +322,27 @@ pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {\n     }\n     inner(ty, 0)\n }\n+\n+/// Returns `true` if types `a` and `b` are same types having same `Const` generic args,\n+/// otherwise returns `false`\n+pub fn same_type_and_consts(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+    match (&a.kind(), &b.kind()) {\n+        (&ty::Adt(did_a, substs_a), &ty::Adt(did_b, substs_b)) => {\n+            if did_a != did_b {\n+                return false;\n+            }\n+\n+            substs_a\n+                .iter()\n+                .zip(substs_b.iter())\n+                .all(|(arg_a, arg_b)| match (arg_a.unpack(), arg_b.unpack()) {\n+                    (GenericArgKind::Const(inner_a), GenericArgKind::Const(inner_b)) => inner_a == inner_b,\n+                    (GenericArgKind::Type(type_a), GenericArgKind::Type(type_b)) => {\n+                        same_type_and_consts(type_a, type_b)\n+                    },\n+                    _ => true,\n+                })\n+        },\n+        _ => a == b,\n+    }\n+}"}, {"sha": "631da6fe066dde1703ee467b7d7e56a837e44d54", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -462,3 +462,33 @@ mod issue6818 {\n         a: i32,\n     }\n }\n+\n+mod issue7206 {\n+    struct MyStruct<const C: char>;\n+    impl From<MyStruct<'a'>> for MyStruct<'b'> {\n+        fn from(_s: MyStruct<'a'>) -> Self {\n+            Self\n+        }\n+    }\n+\n+    // keep linting non-`Const` generic args\n+    struct S<'a> {\n+        inner: &'a str,\n+    }\n+\n+    struct S2<T> {\n+        inner: T,\n+    }\n+\n+    impl<T> S2<T> {\n+        fn new() -> Self {\n+            unimplemented!();\n+        }\n+    }\n+\n+    impl<'a> S2<S<'a>> {\n+        fn new_again() -> Self {\n+            Self::new()\n+        }\n+    }\n+}"}, {"sha": "7a10d755faa18e0ad96c21939b2694bc6c3ae27d", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -462,3 +462,33 @@ mod issue6818 {\n         a: i32,\n     }\n }\n+\n+mod issue7206 {\n+    struct MyStruct<const C: char>;\n+    impl From<MyStruct<'a'>> for MyStruct<'b'> {\n+        fn from(_s: MyStruct<'a'>) -> Self {\n+            Self\n+        }\n+    }\n+\n+    // keep linting non-`Const` generic args\n+    struct S<'a> {\n+        inner: &'a str,\n+    }\n+\n+    struct S2<T> {\n+        inner: T,\n+    }\n+\n+    impl<T> S2<T> {\n+        fn new() -> Self {\n+            unimplemented!();\n+        }\n+    }\n+\n+    impl<'a> S2<S<'a>> {\n+        fn new_again() -> Self {\n+            S2::new()\n+        }\n+    }\n+}"}, {"sha": "cf6222c9b453235e2eb8d068495e7d6843da097a", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -162,5 +162,11 @@ error: unnecessary structure name repetition\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 27 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:491:13\n+   |\n+LL |             S2::new()\n+   |             ^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "76aa82068d62e67bff5fbe7fc73c6a42e05f98a7", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -70,4 +70,23 @@ fn main() {\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = (a + b) * 3;\n+\n+    // see #7205\n+    let s: Foo<'a'> = Foo;\n+    let _: Foo<'b'> = s.into();\n+    let s2: Foo<'a'> = Foo;\n+    let _: Foo<'a'> = s2;\n+    let s3: Foo<'a'> = Foo;\n+    let _ = s3;\n+    let s4: Foo<'a'> = Foo;\n+    let _ = vec![s4, s4, s4].into_iter();\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Foo<const C: char>;\n+\n+impl From<Foo<'a'>> for Foo<'b'> {\n+    fn from(_s: Foo<'a'>) -> Self {\n+        Foo\n+    }\n }"}, {"sha": "ccee7abb404e68aa3f993d917b70536b5acdf62f", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -70,4 +70,23 @@ fn main() {\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = i32::from(a + b) * 3;\n+\n+    // see #7205\n+    let s: Foo<'a'> = Foo;\n+    let _: Foo<'b'> = s.into();\n+    let s2: Foo<'a'> = Foo;\n+    let _: Foo<'a'> = s2.into();\n+    let s3: Foo<'a'> = Foo;\n+    let _ = Foo::<'a'>::from(s3);\n+    let s4: Foo<'a'> = Foo;\n+    let _ = vec![s4, s4, s4].into_iter().into_iter();\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Foo<const C: char>;\n+\n+impl From<Foo<'a'>> for Foo<'b'> {\n+    fn from(_s: Foo<'a'>) -> Self {\n+        Foo\n+    }\n }"}, {"sha": "e6760f700f3423b1320e5dc01ed88733d247c56c", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "patch": "@@ -70,5 +70,23 @@ error: useless conversion to the same type: `i32`\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n-error: aborting due to 11 previous errors\n+error: useless conversion to the same type: `Foo<'a'>`\n+  --> $DIR/useless_conversion.rs:78:23\n+   |\n+LL |     let _: Foo<'a'> = s2.into();\n+   |                       ^^^^^^^^^ help: consider removing `.into()`: `s2`\n+\n+error: useless conversion to the same type: `Foo<'a'>`\n+  --> $DIR/useless_conversion.rs:80:13\n+   |\n+LL |     let _ = Foo::<'a'>::from(s3);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider removing `Foo::<'a'>::from()`: `s3`\n+\n+error: useless conversion to the same type: `std::vec::IntoIter<Foo<'a'>>`\n+  --> $DIR/useless_conversion.rs:82:13\n+   |\n+LL |     let _ = vec![s4, s4, s4].into_iter().into_iter();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![s4, s4, s4].into_iter()`\n+\n+error: aborting due to 14 previous errors\n "}]}