{"sha": "4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODdjN2UzYjQxOTM0NWUyZDBmZDM1OTg3YTJlMDEyYjFlOTVhNWU=", "commit": {"author": {"name": "philipp", "email": "philipp", "date": "2016-08-20T13:12:50Z"}, "committer": {"name": "philipp", "email": "philipp", "date": "2016-08-20T15:30:48Z"}, "message": "Introduce max_by/min_by on iterators", "tree": {"sha": "e888a69791409abe6782468f860afbe25f897d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e888a69791409abe6782468f860afbe25f897d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "html_url": "https://github.com/rust-lang/rust/commit/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/comments", "author": null, "committer": null, "parents": [{"sha": "7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "html_url": "https://github.com/rust-lang/rust/commit/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "e25920fae0744cdd2d332958e7a69474cb5a7e60", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "patch": "@@ -1664,6 +1664,31 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n+    /// Returns the element that gives the maximum value with respect to the\n+    /// specified comparison function.\n+    ///\n+    /// Returns the rightmost element if the comparison determines two elements\n+    /// to be equally maximum.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let a = [-3_i32, 0, 1, 5, -10];\n+    /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_max_by\", issue=\"1722\")]\n+    fn max_by<F>(self, mut compare: F) -> Option<Self::Item>\n+        where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n+    {\n+        select_fold1(self,\n+                     |_| (),\n+                     // switch to y even if it is only equal, to preserve\n+                     // stability.\n+                     |_, x, _, y| Ordering::Greater != compare(x, y))\n+            .map(|(_, x)| x)\n+    }\n+\n     /// Returns the element that gives the minimum value from the\n     /// specified function.\n     ///\n@@ -1688,6 +1713,32 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n+    /// Returns the element that gives the minimum value with respect to the\n+    /// specified comparison function.\n+    ///\n+    /// Returns the latest element if the comparison determines two elements\n+    /// to be equally minimum.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let a = [-3_i32, 0, 1, 5, -10];\n+    /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_min_by\", issue=\"1722\")]\n+    fn min_by<F>(self, mut compare: F) -> Option<Self::Item>\n+        where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n+    {\n+        select_fold1(self,\n+                     |_| (),\n+                     // switch to y even if it is strictly smaller, to\n+                     // preserve stability.\n+                     |_, x, _, y| Ordering::Greater == compare(x, y))\n+            .map(|(_, x)| x)\n+    }\n+\n+\n     /// Reverses an iterator's direction.\n     ///\n     /// Usually, iterators iterate from left to right. After using `rev()`,"}, {"sha": "27eb25537f31bde549db5cc266b55b4bacc2027c", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "patch": "@@ -664,12 +664,24 @@ fn test_max_by_key() {\n     assert_eq!(*xs.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n }\n \n+#[test]\n+fn test_max_by() {\n+    let xs: &[isize] = &[-3, 0, 1, 5, -10];\n+    assert_eq!(*xs.iter().max_by(|x, y| x.abs().cmp(&y.abs())).unwrap(), -10);\n+}\n+\n #[test]\n fn test_min_by_key() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n }\n \n+#[test]\n+fn test_min_by() {\n+    let xs: &[isize] = &[-3, 0, 1, 5, -10];\n+    assert_eq!(*xs.iter().min_by(|x, y| x.abs().cmp(&y.abs())).unwrap(), 0);\n+}\n+\n #[test]\n fn test_by_ref() {\n     let mut xs = 0..10;"}, {"sha": "b4c94509477a31097ee489948f374ad1fe2b817c", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b87c7e3b419345e2d0fd35987a2e012b1e95a5e/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=4b87c7e3b419345e2d0fd35987a2e012b1e95a5e", "patch": "@@ -33,6 +33,8 @@\n #![feature(try_from)]\n #![feature(unicode)]\n #![feature(unique)]\n+#![feature(iter_max_by)]\n+#![feature(iter_min_by)]\n \n extern crate core;\n extern crate test;"}]}