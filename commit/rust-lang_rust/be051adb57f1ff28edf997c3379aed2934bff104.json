{"sha": "be051adb57f1ff28edf997c3379aed2934bff104", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDUxYWRiNTdmMWZmMjhlZGY5OTdjMzM3OWFlZDI5MzRiZmYxMDQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-23T20:58:55Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-06T23:57:54Z"}, "message": "Create benchmarks for BTreeMap::range", "tree": {"sha": "902c2fed33da4d4bd0450d6423f3c0d49b4ebe57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/902c2fed33da4d4bd0450d6423f3c0d49b4ebe57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be051adb57f1ff28edf997c3379aed2934bff104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be051adb57f1ff28edf997c3379aed2934bff104", "html_url": "https://github.com/rust-lang/rust/commit/be051adb57f1ff28edf997c3379aed2934bff104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be051adb57f1ff28edf997c3379aed2934bff104/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc07615c49259b16e1d1789e23050e71b744c652", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc07615c49259b16e1d1789e23050e71b744c652", "html_url": "https://github.com/rust-lang/rust/commit/fc07615c49259b16e1d1789e23050e71b744c652"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "83cdebf0e3f4a7d89e5c6b7e30aac80d55b65185", "filename": "src/liballoc/benches/btree/map.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/be051adb57f1ff28edf997c3379aed2934bff104/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be051adb57f1ff28edf997c3379aed2934bff104/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs?ref=be051adb57f1ff28edf997c3379aed2934bff104", "patch": "@@ -1,5 +1,6 @@\n use std::collections::BTreeMap;\n use std::iter::Iterator;\n+use std::ops::Bound::{Excluded, Unbounded};\n use std::vec::Vec;\n \n use rand::{seq::SliceRandom, thread_rng, Rng};\n@@ -200,3 +201,58 @@ pub fn first_and_last_100(b: &mut Bencher) {\n pub fn first_and_last_10k(b: &mut Bencher) {\n     bench_first_and_last(b, 10_000);\n }\n+\n+#[bench]\n+pub fn range_excluded_excluded(b: &mut Bencher) {\n+    let size = 144;\n+    let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n+    b.iter(|| {\n+        for first in 0..size {\n+            for last in first + 1..size {\n+                black_box(map.range((Excluded(first), Excluded(last))));\n+            }\n+        }\n+    });\n+}\n+\n+#[bench]\n+pub fn range_excluded_unbounded(b: &mut Bencher) {\n+    let size = 144;\n+    let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n+    b.iter(|| {\n+        for first in 0..size {\n+            black_box(map.range((Excluded(first), Unbounded)));\n+        }\n+    });\n+}\n+\n+#[bench]\n+pub fn range_included_included(b: &mut Bencher) {\n+    let size = 144;\n+    let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n+    b.iter(|| {\n+        for first in 0..size {\n+            for last in first..size {\n+                black_box(map.range(first..=last));\n+            }\n+        }\n+    });\n+}\n+\n+#[bench]\n+pub fn range_included_unbounded(b: &mut Bencher) {\n+    let size = 144;\n+    let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n+    b.iter(|| {\n+        for first in 0..size {\n+            black_box(map.range(first..));\n+        }\n+    });\n+}\n+\n+#[bench]\n+pub fn range_unbounded_unbounded(b: &mut Bencher) {\n+    let size = 144;\n+    let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n+    b.iter(|| map.range(..));\n+}"}]}