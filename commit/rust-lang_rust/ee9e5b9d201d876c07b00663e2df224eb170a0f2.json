{"sha": "ee9e5b9d201d876c07b00663e2df224eb170a0f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOWU1YjlkMjAxZDg3NmMwN2IwMDY2M2UyZGYyMjRlYjE3MGEwZjI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-06-18T23:30:09Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-06-19T00:36:25Z"}, "message": "Avoid extra get_current_task()s in many upcalls (performance)", "tree": {"sha": "153d6d795fe51c3a0368e837f52e803e3929ea93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153d6d795fe51c3a0368e837f52e803e3929ea93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee9e5b9d201d876c07b00663e2df224eb170a0f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9e5b9d201d876c07b00663e2df224eb170a0f2", "html_url": "https://github.com/rust-lang/rust/commit/ee9e5b9d201d876c07b00663e2df224eb170a0f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee9e5b9d201d876c07b00663e2df224eb170a0f2/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30dd32d4db0834a9bb965cfceaee3211f09a5344", "url": "https://api.github.com/repos/rust-lang/rust/commits/30dd32d4db0834a9bb965cfceaee3211f09a5344", "html_url": "https://github.com/rust-lang/rust/commit/30dd32d4db0834a9bb965cfceaee3211f09a5344"}], "stats": {"total": 115, "additions": 71, "deletions": 44}, "files": [{"sha": "3bd705b669084ab873c7cb3703fde934cbc23c1e", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 71, "deletions": 44, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ee9e5b9d201d876c07b00663e2df224eb170a0f2/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ee9e5b9d201d876c07b00663e2df224eb170a0f2/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=ee9e5b9d201d876c07b00663e2df224eb170a0f2", "patch": "@@ -28,11 +28,11 @@\n         (task)->name, (task));\n #endif\n \n-#define UPCALL_SWITCH_STACK(A, F) call_upcall_on_c_stack((void*)A, (void*)F)\n+#define UPCALL_SWITCH_STACK(T, A, F) \\\n+    call_upcall_on_c_stack(T, (void*)A, (void*)F)\n \n inline void\n-call_upcall_on_c_stack(void *args, void *fn_ptr) {\n-    rust_task *task = rust_get_current_task();\n+call_upcall_on_c_stack(rust_task *task, void *args, void *fn_ptr) {\n     task->call_on_c_stack(args, fn_ptr);\n }\n \n@@ -93,14 +93,15 @@ upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n /**********************************************************************/\n \n struct s_fail_args {\n+    rust_task *task;\n     char const *expr;\n     char const *file;\n     size_t line;\n };\n \n extern \"C\" CDECL void\n upcall_s_fail(s_fail_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n     task->fail(args->expr, args->file, args->line);\n }\n@@ -109,19 +110,21 @@ extern \"C\" CDECL void\n upcall_fail(char const *expr,\n             char const *file,\n             size_t line) {\n-    s_fail_args args = {expr,file,line};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_fail);\n+    rust_task *task = rust_get_current_task();\n+    s_fail_args args = {task,expr,file,line};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_fail);\n }\n \n struct s_trace_args {\n+    rust_task *task;\n     char const *msg;\n     char const *file;\n     size_t line;\n };\n \n extern \"C\" CDECL void\n upcall_s_trace(s_trace_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n     LOG(task, trace, \"Trace %s:%d: %s\",\n         args->file, args->line, args->msg);\n@@ -131,8 +134,9 @@ extern \"C\" CDECL void\n upcall_trace(char const *msg,\n              char const *file,\n              size_t line) {\n-    s_trace_args args = {msg,file,line};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_trace);\n+    rust_task *task = rust_get_current_task();\n+    s_trace_args args = {task,msg,file,line};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_trace);\n }\n \n /**********************************************************************\n@@ -158,61 +162,67 @@ exchange_malloc(rust_task *task, type_desc *td, uintptr_t size) {\n \n // FIXME: remove after snapshot (6/13/12)\n struct s_exchange_malloc_args {\n+    rust_task *task;\n     uintptr_t retval;\n     type_desc *td;\n };\n \n extern \"C\" CDECL void\n upcall_s_exchange_malloc(s_exchange_malloc_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n \n     args->retval = exchange_malloc(task, args->td, args->td->size);\n }\n \n extern \"C\" CDECL uintptr_t\n upcall_exchange_malloc(type_desc *td) {\n-    s_exchange_malloc_args args = {0, td};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_exchange_malloc);\n+    rust_task *task = rust_get_current_task();\n+    s_exchange_malloc_args args = {task, 0, td};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_malloc);\n     return args.retval;\n }\n \n struct s_exchange_malloc_dyn_args {\n+    rust_task *task;\n     uintptr_t retval;\n     type_desc *td;\n     uintptr_t size;\n };\n \n extern \"C\" CDECL void\n upcall_s_exchange_malloc_dyn(s_exchange_malloc_dyn_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n \n     args->retval = exchange_malloc(task, args->td, args->size);\n }\n \n extern \"C\" CDECL uintptr_t\n upcall_exchange_malloc_dyn(type_desc *td, uintptr_t size) {\n-    s_exchange_malloc_dyn_args args = {0, td, size};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_exchange_malloc_dyn);\n+    rust_task *task = rust_get_current_task();\n+    s_exchange_malloc_dyn_args args = {task, 0, td, size};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_malloc_dyn);\n     return args.retval;\n }\n \n struct s_exchange_free_args {\n+    rust_task *task;\n     void *ptr;\n };\n \n extern \"C\" CDECL void\n upcall_s_exchange_free(s_exchange_free_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n     task->kernel->free(args->ptr);\n }\n \n extern \"C\" CDECL void\n upcall_exchange_free(void *ptr) {\n-    s_exchange_free_args args = {ptr};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_exchange_free);\n+    rust_task *task = rust_get_current_task();\n+    s_exchange_free_args args = {task,ptr};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_exchange_free);\n }\n \n /**********************************************************************\n@@ -241,43 +251,47 @@ shared_malloc(rust_task *task, type_desc *td, uintptr_t size) {\n \n // FIXME: remove after snapshot (6/13/12)\n struct s_malloc_args {\n+    rust_task *task;\n     uintptr_t retval;\n     type_desc *td;\n };\n \n extern \"C\" CDECL void\n upcall_s_malloc(s_malloc_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n \n     args->retval = shared_malloc(task, args->td, args->td->size);\n }\n \n extern \"C\" CDECL uintptr_t\n upcall_malloc(type_desc *td) {\n-    s_malloc_args args = {0, td};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_malloc);\n+    rust_task *task = rust_get_current_task();\n+    s_malloc_args args = {task, 0, td};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_malloc);\n     return args.retval;\n }\n \n struct s_malloc_dyn_args {\n+    rust_task *task;\n     uintptr_t retval;\n     type_desc *td;\n     uintptr_t size;\n };\n \n extern \"C\" CDECL void\n upcall_s_malloc_dyn(s_malloc_dyn_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n \n     args->retval = shared_malloc(task, args->td, args->size);\n }\n \n extern \"C\" CDECL uintptr_t\n upcall_malloc_dyn(type_desc *td, uintptr_t size) {\n-    s_malloc_dyn_args args = {0, td, size};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_malloc_dyn);\n+    rust_task *task = rust_get_current_task();\n+    s_malloc_dyn_args args = {task, 0, td, size};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_malloc_dyn);\n     return args.retval;\n }\n \n@@ -287,12 +301,13 @@ upcall_malloc_dyn(type_desc *td, uintptr_t size) {\n  */\n \n struct s_free_args {\n+    rust_task *task;\n     void *ptr;\n };\n \n extern \"C\" CDECL void\n upcall_s_free(s_free_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n \n     rust_sched_loop *sched_loop = task->sched_loop;\n@@ -308,8 +323,9 @@ upcall_s_free(s_free_args *args) {\n \n extern \"C\" CDECL void\n upcall_free(void* ptr) {\n-    s_free_args args = {ptr};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_free);\n+    rust_task *task = rust_get_current_task();\n+    s_free_args args = {task,ptr};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_free);\n }\n \n /**********************************************************************\n@@ -330,44 +346,48 @@ upcall_validate_box(rust_opaque_box* ptr) {\n /**********************************************************************/\n \n struct s_str_new_uniq_args {\n+    rust_task *task;\n     const char *cstr;\n     size_t len;\n     rust_str *retval;\n };\n \n extern \"C\" CDECL void\n upcall_s_str_new_uniq(s_str_new_uniq_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n     args->retval = make_str(task->kernel, args->cstr, args->len,\n                             \"str_new_uniq\");\n }\n \n extern \"C\" CDECL rust_str*\n upcall_str_new_uniq(const char *cstr, size_t len) {\n-    s_str_new_uniq_args args = { cstr, len, 0 };\n-    UPCALL_SWITCH_STACK(&args, upcall_s_str_new_uniq);\n+    rust_task *task = rust_get_current_task();\n+    s_str_new_uniq_args args = { task, cstr, len, 0 };\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_str_new_uniq);\n     return args.retval;\n }\n \n extern \"C\" CDECL rust_str*\n upcall_str_new(const char *cstr, size_t len) {\n-    s_str_new_uniq_args args = { cstr, len, 0 };\n-    UPCALL_SWITCH_STACK(&args, upcall_s_str_new_uniq);\n+    rust_task *task = rust_get_current_task();\n+    s_str_new_uniq_args args = { task, cstr, len, 0 };\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_str_new_uniq);\n     return args.retval;\n }\n \n \n \n struct s_str_new_shared_args {\n+    rust_task *task;\n     const char *cstr;\n     size_t len;\n     rust_opaque_box *retval;\n };\n \n extern \"C\" CDECL void\n upcall_s_str_new_shared(s_str_new_shared_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n \n     size_t str_fill = args->len + 1;\n@@ -384,32 +404,36 @@ upcall_s_str_new_shared(s_str_new_shared_args *args) {\n \n extern \"C\" CDECL rust_opaque_box*\n upcall_str_new_shared(const char *cstr, size_t len) {\n-    s_str_new_shared_args args = { cstr, len, 0 };\n-    UPCALL_SWITCH_STACK(&args, upcall_s_str_new_shared);\n+    rust_task *task = rust_get_current_task();\n+    s_str_new_shared_args args = { task, cstr, len, 0 };\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_str_new_shared);\n     return args.retval;\n }\n \n \n struct s_vec_grow_args {\n+    rust_task *task;\n     rust_vec_box** vp;\n     size_t new_sz;\n };\n \n extern \"C\" CDECL void\n upcall_s_vec_grow(s_vec_grow_args *args) {\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     LOG_UPCALL_ENTRY(task);\n     reserve_vec(task, args->vp, args->new_sz);\n     (*args->vp)->body.fill = args->new_sz;\n }\n \n extern \"C\" CDECL void\n upcall_vec_grow(rust_vec_box** vp, size_t new_sz) {\n-    s_vec_grow_args args = {vp, new_sz};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_vec_grow);\n+    rust_task *task = rust_get_current_task();\n+    s_vec_grow_args args = {task, vp, new_sz};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_vec_grow);\n }\n \n struct s_str_concat_args {\n+    rust_task *task;\n     rust_vec_box* lhs;\n     rust_vec_box* rhs;\n     rust_vec_box* retval;\n@@ -419,7 +443,7 @@ extern \"C\" CDECL void\n upcall_s_str_concat(s_str_concat_args *args) {\n     rust_vec *lhs = &args->lhs->body;\n     rust_vec *rhs = &args->rhs->body;\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = args->task;\n     size_t fill = lhs->fill + rhs->fill - 1;\n     rust_vec_box* v = (rust_vec_box*)\n         task->kernel->malloc(fill + sizeof(rust_vec_box),\n@@ -433,8 +457,9 @@ upcall_s_str_concat(s_str_concat_args *args) {\n \n extern \"C\" CDECL rust_vec_box*\n upcall_str_concat(rust_vec_box* lhs, rust_vec_box* rhs) {\n-    s_str_concat_args args = {lhs, rhs, 0};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_str_concat);\n+    rust_task *task = rust_get_current_task();\n+    s_str_concat_args args = {task, lhs, rhs, 0};\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_str_concat);\n     return args.retval;\n }\n \n@@ -486,7 +511,7 @@ upcall_rust_personality(int version,\n     // then switch to the C stack.\n \n     if (task->on_rust_stack()) {\n-        UPCALL_SWITCH_STACK(&args, upcall_s_rust_personality);\n+        UPCALL_SWITCH_STACK(task, &args, upcall_s_rust_personality);\n     } else {\n         upcall_s_rust_personality(&args);\n     }\n@@ -517,9 +542,10 @@ extern \"C\" void\n upcall_cmp_type(int8_t *result, const type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n+    rust_task *task = rust_get_current_task();\n     s_cmp_type_args args = {result, tydesc, subtydescs,\n                             data_0, data_1, cmp_type};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_cmp_type);\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_cmp_type);\n }\n \n extern \"C\" void\n@@ -538,8 +564,9 @@ upcall_s_log_type(s_log_type_args *args) {\n \n extern \"C\" void\n upcall_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n+    rust_task *task = rust_get_current_task();\n     s_log_type_args args = {tydesc, data, level};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_log_type);\n+    UPCALL_SWITCH_STACK(task, &args, upcall_s_log_type);\n }\n \n // NB: This needs to be blazing fast. Don't switch stacks"}]}