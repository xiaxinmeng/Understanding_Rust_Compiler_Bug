{"sha": "5d06c890fececc6f6779cd65ca83cef4647b8fdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDZjODkwZmVjZWNjNmY2Nzc5Y2Q2NWNhODNjZWY0NjQ3YjhmZGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-08T11:27:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-17T19:08:07Z"}, "message": "syntax: Make `_` an identifier", "tree": {"sha": "7ffd581b7c7b9ac7294ecb6f28994b1afe753659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ffd581b7c7b9ac7294ecb6f28994b1afe753659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d06c890fececc6f6779cd65ca83cef4647b8fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d06c890fececc6f6779cd65ca83cef4647b8fdd", "html_url": "https://github.com/rust-lang/rust/commit/5d06c890fececc6f6779cd65ca83cef4647b8fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d06c890fececc6f6779cd65ca83cef4647b8fdd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b6bf54fdf56195baf9a8ee7383551b0d468c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b6bf54fdf56195baf9a8ee7383551b0d468c81", "html_url": "https://github.com/rust-lang/rust/commit/61b6bf54fdf56195baf9a8ee7383551b0d468c81"}], "stats": {"total": 228, "additions": 109, "deletions": 119}, "files": [{"sha": "b239f8018bebb9207b22527fcb834efddf33c9e0", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -680,7 +680,6 @@ impl TokenTree {\n             Pound => op!('#'),\n             Dollar => op!('$'),\n             Question => op!('?'),\n-            Underscore => op!('_'),\n \n             Ident(ident) | Lifetime(ident) => TokenNode::Term(Term(ident.name)),\n             Literal(..) | DocComment(..) => TokenNode::Literal(self::Literal(token)),\n@@ -743,7 +742,6 @@ impl TokenTree {\n             '#' => Pound,\n             '$' => Dollar,\n             '?' => Question,\n-            '_' => Underscore,\n             _ => panic!(\"unsupported character {}\", op),\n         };\n "}, {"sha": "83e855178dbe720149f83b5cb6b8b14a47ec7577", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -214,7 +214,7 @@ impl LifetimeName {\n         use self::LifetimeName::*;\n         match *self {\n             Implicit => keywords::Invalid.name(),\n-            Underscore => Symbol::intern(\"'_\"),\n+            Underscore => keywords::UnderscoreLifetime.name(),\n             Static => keywords::StaticLifetime.name(),\n             Name(name) => name,\n         }"}, {"sha": "513b6c835f982337cb3b9f72b85e9a473446eab2", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -287,7 +287,6 @@ fn hash_token<'a, 'gcx, W: StableHasherResult>(\n         token::Token::Pound |\n         token::Token::Dollar |\n         token::Token::Question |\n-        token::Token::Underscore |\n         token::Token::Whitespace |\n         token::Token::Comment |\n         token::Token::Eof => {}"}, {"sha": "4215bf306a4fd9306ea3f0e89bbcc45054d1e6ad", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -37,15 +37,17 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn check_lifetime(&self, lifetime: &Lifetime) {\n-        let valid_names = [keywords::StaticLifetime.name(), keywords::Invalid.name()];\n+        let valid_names = [keywords::UnderscoreLifetime.name(),\n+                           keywords::StaticLifetime.name(),\n+                           keywords::Invalid.name()];\n         if !valid_names.contains(&lifetime.ident.name) &&\n             token::Ident(lifetime.ident.without_first_quote()).is_reserved_ident() {\n             self.err_handler().span_err(lifetime.span, \"lifetimes cannot use keyword names\");\n         }\n     }\n \n     fn check_label(&self, label: Ident, span: Span) {\n-        if token::Ident(label.without_first_quote()).is_reserved_ident() || label.name == \"'_\" {\n+        if token::Ident(label.without_first_quote()).is_reserved_ident() {\n             self.err_handler().span_err(span, &format!(\"invalid label name `{}`\", label.name));\n         }\n     }"}, {"sha": "659ec8a993dc8e3f60e5b3ea6db95f11e38b5c87", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -352,7 +352,7 @@ impl<'a> Classifier<'a> {\n \n             token::Lifetime(..) => Class::Lifetime,\n \n-            token::Underscore | token::Eof | token::Interpolated(..) |\n+            token::Eof | token::Interpolated(..) |\n             token::Tilde | token::At | token::DotEq => Class::None,\n         };\n "}, {"sha": "6c0fe525f55b08c4b9eacc18802b2727cee2811c", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -19,7 +19,7 @@ use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n use parse::token;\n use ptr::P;\n-use symbol::Symbol;\n+use symbol::{keywords, Symbol};\n use tokenstream::{TokenTree};\n use util::small_vector::SmallVector;\n \n@@ -192,7 +192,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n         });\n \n-    let static_ = ecx.lifetime(span, Ident::from_str(\"'static\"));\n+    let static_ = ecx.lifetime(span, keywords::StaticLifetime.ident());\n     let ty_str = ecx.ty_rptr(\n         span,\n         ecx.ty_ident(span, ecx.ident_of(\"str\")),"}, {"sha": "d6642b7b6c260f09f20c66c7fca401e7d47a5c92", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -709,7 +709,6 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         token::Pound        => \"Pound\",\n         token::Dollar       => \"Dollar\",\n         token::Question     => \"Question\",\n-        token::Underscore   => \"Underscore\",\n         token::Eof          => \"Eof\",\n \n         token::Whitespace | token::Comment | token::Shebang(_) => {"}, {"sha": "beefdb3a6eac4eda796553d2be8a3696eb8eb205", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -765,8 +765,7 @@ fn may_begin_with(name: &str, token: &Token) -> bool {\n             Token::DotDotDot |                  // range pattern (future compat)\n             Token::ModSep |                     // path\n             Token::Lt |                         // path (UFCS constant)\n-            Token::BinOp(token::Shl) |          // path (double UFCS)\n-            Token::Underscore => true,          // placeholder\n+            Token::BinOp(token::Shl) => true,   // path (double UFCS)\n             Token::Interpolated(ref nt) => may_be_ident(&nt.0),\n             _ => false,\n         },"}, {"sha": "0098f2ae89b55c7796ecaf170358ff84514fe3dd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -1790,7 +1790,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_lifetime(&mut self, lt: &'a ast::Lifetime) {\n-        if lt.ident.name == \"'_\" {\n+        if lt.ident.name == keywords::UnderscoreLifetime.name() {\n             gate_feature_post!(&self, underscore_lifetimes, lt.span,\n                                \"underscore lifetimes are unstable\");\n         }"}, {"sha": "9d1bfba7b94462d7ccfc964a7e5aa4946e648ecb", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -34,7 +34,7 @@ pub struct TokenAndSpan {\n \n impl Default for TokenAndSpan {\n     fn default() -> Self {\n-        TokenAndSpan { tok: token::Underscore, sp: syntax_pos::DUMMY_SP }\n+        TokenAndSpan { tok: token::Whitespace, sp: syntax_pos::DUMMY_SP }\n     }\n }\n \n@@ -126,7 +126,7 @@ impl<'a> StringReader<'a> {\n     pub fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n         assert!(self.fatal_errs.is_empty());\n         let ret_val = TokenAndSpan {\n-            tok: replace(&mut self.peek_tok, token::Underscore),\n+            tok: replace(&mut self.peek_tok, token::Whitespace),\n             sp: self.peek_span,\n         };\n         self.advance_token()?;\n@@ -1133,14 +1133,8 @@ impl<'a> StringReader<'a> {\n                 self.bump();\n             }\n \n-            return Ok(self.with_str_from(start, |string| {\n-                if string == \"_\" {\n-                    token::Underscore\n-                } else {\n-                    // FIXME: perform NFKC normalization here. (Issue #2253)\n-                    token::Ident(self.mk_ident(string))\n-                }\n-            }));\n+            // FIXME: perform NFKC normalization here. (Issue #2253)\n+            return Ok(self.with_str_from(start, |string| token::Ident(self.mk_ident(string))));\n         }\n \n         if is_dec_digit(c) {"}, {"sha": "aa2a6f1cb47f112205ef723a94960141daf8161f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -549,7 +549,7 @@ impl<'a> Parser<'a> {\n                -> Self {\n         let mut parser = Parser {\n             sess,\n-            token: token::Underscore,\n+            token: token::Whitespace,\n             span: syntax_pos::DUMMY_SP,\n             prev_span: syntax_pos::DUMMY_SP,\n             meta_var_span: None,\n@@ -800,11 +800,7 @@ impl<'a> Parser<'a> {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n                         self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n                     } else {\n-                        let mut err = self.expected_ident_found();\n-                        if self.token == token::Underscore {\n-                            err.note(\"`_` is a wildcard pattern, not an identifier\");\n-                        }\n-                        err\n+                        self.expected_ident_found()\n                     })\n             }\n         }\n@@ -1602,7 +1598,7 @@ impl<'a> Parser<'a> {\n             let e = self.parse_expr()?;\n             self.expect(&token::CloseDelim(token::Paren))?;\n             TyKind::Typeof(e)\n-        } else if self.eat(&token::Underscore) {\n+        } else if self.eat_keyword(keywords::Underscore) {\n             // A type to be inferred `_`\n             TyKind::Infer\n         } else if self.token_is_bare_fn_keyword() {\n@@ -1796,7 +1792,7 @@ impl<'a> Parser<'a> {\n             _ => 0,\n         };\n \n-        self.look_ahead(offset, |t| t.is_ident() || t == &token::Underscore) &&\n+        self.look_ahead(offset, |t| t.is_ident()) &&\n         self.look_ahead(offset + 1, |t| t == &token::Colon)\n     }\n \n@@ -2782,7 +2778,7 @@ impl<'a> Parser<'a> {\n             },\n             token::CloseDelim(_) | token::Eof => unreachable!(),\n             _ => {\n-                let (token, span) = (mem::replace(&mut self.token, token::Underscore), self.span);\n+                let (token, span) = (mem::replace(&mut self.token, token::Whitespace), self.span);\n                 self.bump();\n                 TokenTree::Token(span, token)\n             }\n@@ -3815,11 +3811,6 @@ impl<'a> Parser<'a> {\n         let lo = self.span;\n         let pat;\n         match self.token {\n-            token::Underscore => {\n-                // Parse _\n-                self.bump();\n-                pat = PatKind::Wild;\n-            }\n             token::BinOp(token::And) | token::AndAnd => {\n                 // Parse &pat / &mut pat\n                 self.expect_and()?;\n@@ -3849,8 +3840,11 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::CloseDelim(token::Bracket))?;\n                 pat = PatKind::Slice(before, slice, after);\n             }\n-            // At this point, token != _, &, &&, (, [\n-            _ => if self.eat_keyword(keywords::Mut) {\n+            // At this point, token != &, &&, (, [\n+            _ => if self.eat_keyword(keywords::Underscore) {\n+                // Parse _\n+                pat = PatKind::Wild;\n+            } else if self.eat_keyword(keywords::Mut) {\n                 // Parse mut ident @ pat / mut ref ident @ pat\n                 let mutref_span = self.prev_span.to(self.span);\n                 let binding_mode = if self.eat_keyword(keywords::Ref) {\n@@ -7065,10 +7059,12 @@ impl<'a> Parser<'a> {\n \n     fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> {\n         if self.eat_keyword(keywords::As) {\n-            if self.eat(&token::Underscore) {\n-                Ok(Some(Ident::with_empty_ctxt(Symbol::gensym(\"_\"))))\n-            } else {\n-                self.parse_ident().map(Some)\n+            match self.token {\n+                token::Ident(ident) if ident.name == keywords::Underscore.name() => {\n+                    self.bump(); // `_`\n+                    Ok(Some(Ident { name: ident.name.gensymed(), ..ident }))\n+                }\n+                _ => self.parse_ident().map(Some),\n             }\n         } else {\n             Ok(None)"}, {"sha": "5c051e9b3584d721e9c37936b5dce875d9a915fa", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -122,6 +122,7 @@ fn ident_can_begin_type(ident: ast::Ident) -> bool {\n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n     [\n+        keywords::Underscore.name(),\n         keywords::For.name(),\n         keywords::Impl.name(),\n         keywords::Fn.name(),\n@@ -175,7 +176,6 @@ pub enum Token {\n \n     /* Name components */\n     Ident(ast::Ident),\n-    Underscore,\n     Lifetime(ast::Ident),\n \n     // The `LazyTokenStream` is a pure function of the `Nonterminal`,\n@@ -242,7 +242,6 @@ impl Token {\n             Ident(ident)                => ident_can_begin_type(ident), // type name or keyword\n             OpenDelim(Paren)            | // tuple\n             OpenDelim(Bracket)          | // array\n-            Underscore                  | // placeholder\n             Not                         | // never\n             BinOp(Star)                 | // raw pointer\n             BinOp(And)                  | // reference\n@@ -371,7 +370,7 @@ impl Token {\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special_ident(&self) -> bool {\n         match self.ident() {\n-            Some(id) => id.name <= keywords::DollarCrate.name(),\n+            Some(id) => id.name <= keywords::Underscore.name(),\n             _ => false,\n         }\n     }\n@@ -441,7 +440,7 @@ impl Token {\n \n             Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot | DotEq |\n             DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar |\n-            Question | OpenDelim(..) | CloseDelim(..) | Underscore => return None,\n+            Question | OpenDelim(..) | CloseDelim(..) => return None,\n \n             Literal(..) | Ident(..) | Lifetime(..) | Interpolated(..) | DocComment(..) |\n             Whitespace | Comment | Shebang(..) | Eof => return None,\n@@ -573,7 +572,7 @@ impl fmt::Debug for Nonterminal {\n pub fn is_op(tok: &Token) -> bool {\n     match *tok {\n         OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) |\n-        Ident(..) | Underscore | Lifetime(..) | Interpolated(..) |\n+        Ident(..) | Lifetime(..) | Interpolated(..) |\n         Whitespace | Comment | Shebang(..) | Eof => false,\n         _ => true,\n     }"}, {"sha": "36698a8637451a2a77c5dc4d6c3efeed63ba3d9e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -252,7 +252,6 @@ pub fn token_to_string(tok: &Token) -> String {\n         /* Name components */\n         token::Ident(s)             => s.to_string(),\n         token::Lifetime(s)          => s.to_string(),\n-        token::Underscore           => \"_\".to_string(),\n \n         /* Other */\n         token::DocComment(s)        => s.to_string(),"}, {"sha": "ba6d25f7a60a4bf8647d0f22608cec67ba868b3d", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -17,7 +17,7 @@ use syntax::ast::{self, Ident};\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{keywords, Symbol};\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n@@ -35,14 +35,14 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n     let sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n     let e = match env::var(&*var.as_str()) {\n         Err(..) => {\n+            let lt = cx.lifetime(sp, keywords::StaticLifetime.ident());\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n                                      Vec::new(),\n                                      vec![cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp, Ident::from_str(\"str\")),\n-                                                     Some(cx.lifetime(sp,\n-                                                                      Ident::from_str(\"'static\"))),\n+                                                     Some(lt),\n                                                      ast::Mutability::Immutable)],\n                                      Vec::new()))\n         }"}, {"sha": "0cba094da641d234b6d7bbcd8c61614714a2a02e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 65, "deletions": 61, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -261,73 +261,77 @@ macro_rules! declare_keywords {(\n declare_keywords! {\n     // Special reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n-    (0,  Invalid,        \"\")\n-    (1,  CrateRoot,      \"{{root}}\")\n-    (2,  DollarCrate,    \"$crate\")\n+    (0,  Invalid,            \"\")\n+    (1,  CrateRoot,          \"{{root}}\")\n+    (2,  DollarCrate,        \"$crate\")\n+    (3,  Underscore,         \"_\")\n \n     // Keywords used in the language.\n-    (3,  As,             \"as\")\n-    (4,  Box,            \"box\")\n-    (5,  Break,          \"break\")\n-    (6,  Const,          \"const\")\n-    (7,  Continue,       \"continue\")\n-    (8,  Crate,          \"crate\")\n-    (9,  Else,           \"else\")\n-    (10, Enum,           \"enum\")\n-    (11, Extern,         \"extern\")\n-    (12, False,          \"false\")\n-    (13, Fn,             \"fn\")\n-    (14, For,            \"for\")\n-    (15, If,             \"if\")\n-    (16, Impl,           \"impl\")\n-    (17, In,             \"in\")\n-    (18, Let,            \"let\")\n-    (19, Loop,           \"loop\")\n-    (20, Match,          \"match\")\n-    (21, Mod,            \"mod\")\n-    (22, Move,           \"move\")\n-    (23, Mut,            \"mut\")\n-    (24, Pub,            \"pub\")\n-    (25, Ref,            \"ref\")\n-    (26, Return,         \"return\")\n-    (27, SelfValue,      \"self\")\n-    (28, SelfType,       \"Self\")\n-    (29, Static,         \"static\")\n-    (30, Struct,         \"struct\")\n-    (31, Super,          \"super\")\n-    (32, Trait,          \"trait\")\n-    (33, True,           \"true\")\n-    (34, Type,           \"type\")\n-    (35, Unsafe,         \"unsafe\")\n-    (36, Use,            \"use\")\n-    (37, Where,          \"where\")\n-    (38, While,          \"while\")\n+    (4,  As,                 \"as\")\n+    (5,  Box,                \"box\")\n+    (6,  Break,              \"break\")\n+    (7,  Const,              \"const\")\n+    (8,  Continue,           \"continue\")\n+    (9,  Crate,              \"crate\")\n+    (10, Else,               \"else\")\n+    (11, Enum,               \"enum\")\n+    (12, Extern,             \"extern\")\n+    (13, False,              \"false\")\n+    (14, Fn,                 \"fn\")\n+    (15, For,                \"for\")\n+    (16, If,                 \"if\")\n+    (17, Impl,               \"impl\")\n+    (18, In,                 \"in\")\n+    (19, Let,                \"let\")\n+    (20, Loop,               \"loop\")\n+    (21, Match,              \"match\")\n+    (22, Mod,                \"mod\")\n+    (23, Move,               \"move\")\n+    (24, Mut,                \"mut\")\n+    (25, Pub,                \"pub\")\n+    (26, Ref,                \"ref\")\n+    (27, Return,             \"return\")\n+    (28, SelfValue,          \"self\")\n+    (29, SelfType,           \"Self\")\n+    (30, Static,             \"static\")\n+    (31, Struct,             \"struct\")\n+    (32, Super,              \"super\")\n+    (33, Trait,              \"trait\")\n+    (34, True,               \"true\")\n+    (35, Type,               \"type\")\n+    (36, Unsafe,             \"unsafe\")\n+    (37, Use,                \"use\")\n+    (38, Where,              \"where\")\n+    (39, While,              \"while\")\n \n     // Keywords reserved for future use.\n-    (39, Abstract,       \"abstract\")\n-    (40, Alignof,        \"alignof\")\n-    (41, Become,         \"become\")\n-    (42, Do,             \"do\")\n-    (43, Final,          \"final\")\n-    (44, Macro,          \"macro\")\n-    (45, Offsetof,       \"offsetof\")\n-    (46, Override,       \"override\")\n-    (47, Priv,           \"priv\")\n-    (48, Proc,           \"proc\")\n-    (49, Pure,           \"pure\")\n-    (50, Sizeof,         \"sizeof\")\n-    (51, Typeof,         \"typeof\")\n-    (52, Unsized,        \"unsized\")\n-    (53, Virtual,        \"virtual\")\n-    (54, Yield,          \"yield\")\n+    (40, Abstract,           \"abstract\")\n+    (41, Alignof,            \"alignof\")\n+    (42, Become,             \"become\")\n+    (43, Do,                 \"do\")\n+    (44, Final,              \"final\")\n+    (45, Macro,              \"macro\")\n+    (46, Offsetof,           \"offsetof\")\n+    (47, Override,           \"override\")\n+    (48, Priv,               \"priv\")\n+    (49, Proc,               \"proc\")\n+    (50, Pure,               \"pure\")\n+    (51, Sizeof,             \"sizeof\")\n+    (52, Typeof,             \"typeof\")\n+    (53, Unsized,            \"unsized\")\n+    (54, Virtual,            \"virtual\")\n+    (55, Yield,              \"yield\")\n+\n+    // Special lifetime names\n+    (56, UnderscoreLifetime, \"'_\")\n+    (57, StaticLifetime,     \"'static\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (55, Auto,           \"auto\")\n-    (56, Catch,          \"catch\")\n-    (57, Default,        \"default\")\n-    (58, Dyn,            \"dyn\")\n-    (59, StaticLifetime, \"'static\")\n-    (60, Union,          \"union\")\n+    (58, Auto,               \"auto\")\n+    (59, Catch,              \"catch\")\n+    (60, Default,            \"default\")\n+    (61, Dyn,                \"dyn\")\n+    (62, Union,              \"union\")\n }\n \n // If an interner exists, return it. Otherwise, prepare a fresh one."}, {"sha": "21db2f5051703dffd4c3582b3d874150bdc8da93", "filename": "src/test/parse-fail/issue-32501.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fparse-fail%2Fissue-32501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fparse-fail%2Fissue-32501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-32501.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -16,7 +16,5 @@ fn main() {\n     let _ = 0;\n     let mut b = 0;\n     let mut _b = 0;\n-    let mut _ = 0; //~ ERROR expected identifier, found `_`\n-    //~^ NOTE `_` is a wildcard pattern, not an identifier\n-    //~| NOTE expected identifier\n+    let mut _ = 0; //~ ERROR expected identifier, found reserved identifier `_`\n }"}, {"sha": "6fd32f842f1353131e9b1e4913ffa9549d0512a1", "filename": "src/test/parse-fail/recover-enum2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fparse-fail%2Frecover-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fparse-fail%2Frecover-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frecover-enum2.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -39,5 +39,5 @@ fn main() {\n         }\n     }\n     // still recover later\n-    let bad_syntax = _; //~ ERROR: found `_`\n+    let bad_syntax = _; //~ ERROR: expected expression, found reserved identifier `_`\n }"}, {"sha": "8327217e6f286bb3cf4c98b33669c05a8d5f50c1", "filename": "src/test/parse-fail/underscore-suffix-for-float.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fparse-fail%2Funderscore-suffix-for-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fparse-fail%2Funderscore-suffix-for-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Funderscore-suffix-for-float.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let a = 42._; //~ ERROR unexpected token: `_`\n+    let a = 42._; //~ ERROR expected identifier, found reserved identifier `_`\n+                  //~^ ERROR `{integer}` is a primitive type and therefore doesn't have fields\n }"}, {"sha": "8de3996245f86421b07715eeec4b734f0c860805", "filename": "src/test/run-pass/macro-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat.rs?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -71,4 +71,6 @@ pub fn main() {\n         let ident_pat!(x) = 2;\n         x+1\n     });\n+\n+    let ident_pat!(_) = 2; // OK\n }"}, {"sha": "41a2172d2958024535d5e9e542e01f8e6305087b", "filename": "src/test/ui/cross-file-errors/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d06c890fececc6f6779cd65ca83cef4647b8fdd/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr?ref=5d06c890fececc6f6779cd65ca83cef4647b8fdd", "patch": "@@ -1,4 +1,4 @@\n-error: expected expression, found `_`\n+error: expected expression, found reserved identifier `_`\n   --> $DIR/underscore.rs:18:9\n    |\n LL |         _"}]}