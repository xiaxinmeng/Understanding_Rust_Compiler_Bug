{"sha": "d4e0951fff2161827e7fb83e346af37718759a2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTA5NTFmZmYyMTYxODI3ZTdmYjgzZTM0NmFmMzc3MTg3NTlhMmI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:16:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Add `CanonicalVarKind::Const`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "bb6246bd9f58a1bdfbf93766818412c342399eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb6246bd9f58a1bdfbf93766818412c342399eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e0951fff2161827e7fb83e346af37718759a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e0951fff2161827e7fb83e346af37718759a2b", "html_url": "https://github.com/rust-lang/rust/commit/d4e0951fff2161827e7fb83e346af37718759a2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e0951fff2161827e7fb83e346af37718759a2b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f906f24e616c749e9056511e81c464f3c6df25", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f906f24e616c749e9056511e81c464f3c6df25", "html_url": "https://github.com/rust-lang/rust/commit/14f906f24e616c749e9056511e81c464f3c6df25"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "e8c881fcae7efbd5c06a716a534a27910aed1fea", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0951fff2161827e7fb83e346af37718759a2b/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0951fff2161827e7fb83e346af37718759a2b/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=d4e0951fff2161827e7fb83e346af37718759a2b", "patch": "@@ -21,7 +21,8 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n+use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, ConstVariableOrigin};\n+use crate::mir::interpret::ConstValue;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_macros::HashStable;\n use serialize::UseSpecializedDecodable;\n@@ -30,7 +31,7 @@ use std::ops::Index;\n use syntax::source_map::Span;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::Kind;\n-use crate::ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n+use crate::ty::{self, BoundVar, InferConst, Lift, List, Region, TyCtxt};\n \n mod canonicalizer;\n \n@@ -115,6 +116,7 @@ impl CanonicalVarInfo {\n             CanonicalVarKind::PlaceholderTy(_) => false,\n             CanonicalVarKind::Region(_) => true,\n             CanonicalVarKind::PlaceholderRegion(..) => false,\n+            CanonicalVarKind::Const(_) => true,\n         }\n     }\n }\n@@ -137,6 +139,9 @@ pub enum CanonicalVarKind {\n     /// are solving a goal like `for<'a> T: Foo<'a>` to represent the\n     /// bound region `'a`.\n     PlaceholderRegion(ty::PlaceholderRegion),\n+\n+    /// Some kind of const inference variable.\n+    Const(ty::UniverseIndex),\n }\n \n impl CanonicalVarKind {\n@@ -150,6 +155,7 @@ impl CanonicalVarKind {\n             CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.universe,\n             CanonicalVarKind::Region(ui) => ui,\n             CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.universe,\n+            CanonicalVarKind::Const(ui) => ui,\n         }\n     }\n }\n@@ -388,6 +394,17 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 };\n                 self.tcx.mk_region(ty::RePlaceholder(placeholder_mapped)).into()\n             }\n+\n+            CanonicalVarKind::Const(ui) => {\n+                self.next_const_var_in_universe(\n+                    self.next_ty_var_in_universe(\n+                        TypeVariableOrigin::MiscVariable(span),\n+                        universe_map(ui),\n+                    ),\n+                    ConstVariableOrigin::MiscVariable(span),\n+                    universe_map(ui),\n+                ).into()\n+            }\n         }\n     }\n }\n@@ -443,8 +460,19 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                     UnpackedKind::Lifetime(..) => tcx.mk_region(\n                         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(i))\n                     ).into(),\n-                    UnpackedKind::Const(..) => {\n-                        unimplemented!() // FIXME(const_generics)\n+                    UnpackedKind::Const(ct) => {\n+                        let ty = match ct {\n+                            ty::LazyConst::Unevaluated(def_id, _) => {\n+                                tcx.type_of(*def_id)\n+                            }\n+                            ty::LazyConst::Evaluated(ty::Const { ty, .. }) => ty,\n+                        };\n+                        tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const {\n+                            ty: ty,\n+                            val: ConstValue::Infer(\n+                                InferConst::Canonical(ty::INNERMOST, ty::BoundVar::from_u32(i))\n+                            ),\n+                        })).into()\n                     }\n                 })\n                 .collect()"}]}