{"sha": "74d6b850fd731597fe2f03408a0397a972c13641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDZiODUwZmQ3MzE1OTdmZTJmMDM0MDhhMDM5N2E5NzJjMTM2NDE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T10:14:52Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T10:14:52Z"}, "message": "incr.comp.: Fix rebase fallout.", "tree": {"sha": "8bad0564fefd57cc91f7efa63cb7a6801fa5cc61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bad0564fefd57cc91f7efa63cb7a6801fa5cc61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d6b850fd731597fe2f03408a0397a972c13641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d6b850fd731597fe2f03408a0397a972c13641", "html_url": "https://github.com/rust-lang/rust/commit/74d6b850fd731597fe2f03408a0397a972c13641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d6b850fd731597fe2f03408a0397a972c13641/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b1fee6fd658bf464902d46f9a6c9c2f8ab87d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b1fee6fd658bf464902d46f9a6c9c2f8ab87d7", "html_url": "https://github.com/rust-lang/rust/commit/d5b1fee6fd658bf464902d46f9a6c9c2f8ab87d7"}], "stats": {"total": 169, "additions": 138, "deletions": 31}, "files": [{"sha": "64fc63002da1f49badb6caffd2e3b383063066c5", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -15,7 +15,7 @@ use hir::map::definitions::Definitions;\n use ich::{self, CachingCodemapView};\n use middle::cstore::CrateStore;\n use session::config::DebugInfoLevel::NoDebugInfo;\n-use ty::{self, TyCtxt, fast_reject};\n+use ty::{TyCtxt, fast_reject};\n use session::Session;\n \n use std::cmp::Ord;\n@@ -252,7 +252,7 @@ impl<'gcx> StableHashingContext<'gcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'lcx> StableHashingContextProvider for ty::TyCtxt<'a, 'gcx, 'lcx> {\n+impl<'a, 'gcx, 'lcx> StableHashingContextProvider for TyCtxt<'a, 'gcx, 'lcx> {\n     type ContextType = StableHashingContext<'gcx>;\n     fn create_stable_hashing_context(&self) -> Self::ContextType {\n         (*self).create_stable_hashing_context()"}, {"sha": "6c57130a9955f62197651ca4277b1117e93cd821", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -332,10 +332,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n \n             (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"EarlyBound self.infcx.tcx.hir.local_def_id(id)={:?} \\\n-                                        def_id={:?}\",\n-                       self.infcx.tcx.hir.local_def_id(id),\n-                       def_id);\n-                if self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                                        def_id={:?}\", id, def_id);\n+                if id == def_id {\n                     self.found_it = true;\n                     return; // we can stop visiting now\n                 }\n@@ -344,11 +342,9 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n             (Some(rl::Region::LateBound(debruijn_index, id)), ty::BrNamed(def_id, _)) => {\n                 debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n                        debruijn_index.depth);\n-                debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n-                       self.infcx.tcx.hir.local_def_id(id));\n+                debug!(\"id={:?}\", id);\n                 debug!(\"def_id={:?}\", def_id);\n-                if debruijn_index.depth == self.depth &&\n-                   self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                if debruijn_index.depth == self.depth && id == def_id {\n                     self.found_it = true;\n                     return; // we can stop visiting now\n                 }"}, {"sha": "d650dbe88b5c89a736198613ecd3d4dd5c201077", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -19,6 +19,11 @@ pub enum SymbolExportLevel {\n     Rust,\n }\n \n+impl_stable_hash_for!(enum self::SymbolExportLevel {\n+    C,\n+    Rust\n+});\n+\n impl SymbolExportLevel {\n     pub fn is_below_threshold(self, threshold: SymbolExportLevel) -> bool {\n         if threshold == SymbolExportLevel::Rust {"}, {"sha": "7744c9c3d1238aac16c558eb0a9297f501d424e3", "filename": "src/librustc/middle/trans.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -12,6 +12,9 @@ use syntax::ast::NodeId;\n use syntax::symbol::InternedString;\n use ty::Instance;\n use util::nodemap::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n+                                           StableHasher};\n+use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n \n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum TransItem<'tcx> {\n@@ -20,6 +23,26 @@ pub enum TransItem<'tcx> {\n     GlobalAsm(NodeId),\n }\n \n+impl<'tcx> HashStable<StableHashingContext<'tcx>> for TransItem<'tcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                           hcx: &mut StableHashingContext<'tcx>,\n+                                           hasher: &mut StableHasher<W>) {\n+        ::std::mem::discriminant(self).hash_stable(hcx, hasher);\n+\n+        match *self {\n+            TransItem::Fn(ref instance) => {\n+                instance.hash_stable(hcx, hasher);\n+            }\n+            TransItem::Static(node_id)    |\n+            TransItem::GlobalAsm(node_id) => {\n+                hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                    node_id.hash_stable(hcx, hasher);\n+                })\n+            }\n+        }\n+    }\n+}\n+\n pub struct CodegenUnit<'tcx> {\n     /// A name for this CGU. Incremental compilation requires that\n     /// name be unique amongst **all** crates.  Therefore, it should\n@@ -44,13 +67,33 @@ pub enum Linkage {\n     Common,\n }\n \n+impl_stable_hash_for!(enum self::Linkage {\n+    External,\n+    AvailableExternally,\n+    LinkOnceAny,\n+    LinkOnceODR,\n+    WeakAny,\n+    WeakODR,\n+    Appending,\n+    Internal,\n+    Private,\n+    ExternalWeak,\n+    Common\n+});\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Visibility {\n     Default,\n     Hidden,\n     Protected,\n }\n \n+impl_stable_hash_for!(enum self::Visibility {\n+    Default,\n+    Hidden,\n+    Protected\n+});\n+\n impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: InternedString) -> CodegenUnit<'tcx> {\n         CodegenUnit {\n@@ -78,6 +121,29 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n }\n \n+impl<'tcx> HashStable<StableHashingContext<'tcx>> for CodegenUnit<'tcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                           hcx: &mut StableHashingContext<'tcx>,\n+                                           hasher: &mut StableHasher<W>) {\n+        let CodegenUnit {\n+            ref items,\n+            name,\n+        } = *self;\n+\n+        name.hash_stable(hcx, hasher);\n+\n+        let mut items: Vec<(Fingerprint, _)> = items.iter().map(|(trans_item, &attrs)| {\n+            let mut hasher = StableHasher::new();\n+            trans_item.hash_stable(hcx, &mut hasher);\n+            let trans_item_fingerprint = hasher.finish();\n+            (trans_item_fingerprint, attrs)\n+        }).collect();\n+\n+        items.sort_unstable_by_key(|i| i.0);\n+        items.hash_stable(hcx, hasher);\n+    }\n+}\n+\n #[derive(Clone, Default)]\n pub struct Stats {\n     pub n_glues_created: usize,\n@@ -92,6 +158,18 @@ pub struct Stats {\n     pub fn_stats: Vec<(String, usize)>,\n }\n \n+impl_stable_hash_for!(struct self::Stats {\n+    n_glues_created,\n+    n_null_glues,\n+    n_real_glues,\n+    n_fns,\n+    n_inlines,\n+    n_closures,\n+    n_llvm_insns,\n+    llvm_insns,\n+    fn_stats\n+});\n+\n impl Stats {\n     pub fn extend(&mut self, stats: Stats) {\n         self.n_glues_created += stats.n_glues_created;\n@@ -108,3 +186,4 @@ impl Stats {\n         self.fn_stats.extend(stats.fn_stats);\n     }\n }\n+"}, {"sha": "f079d7d43389afe5f46a08a0f7b0c03b69af552d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -19,8 +19,10 @@ pub use self::DebugInfoLevel::*;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n+use ich::StableHashingContext;\n use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n use rustc_back::target::Target;\n+use rustc_data_structures::stable_hasher::ToStableHashKey;\n use lint;\n use middle::cstore;\n \n@@ -90,6 +92,25 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+impl_stable_hash_for!(enum self::OutputType {\n+    Bitcode,\n+    Assembly,\n+    LlvmAssembly,\n+    Mir,\n+    Metadata,\n+    Object,\n+    Exe,\n+    DepInfo\n+});\n+\n+impl<'tcx> ToStableHashKey<StableHashingContext<'tcx>> for OutputType {\n+    type KeyType = OutputType;\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &StableHashingContext<'tcx>) -> Self::KeyType {\n+        *self\n+    }\n+}\n+\n impl OutputType {\n     fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n         match *self {\n@@ -149,6 +170,10 @@ impl Default for ErrorOutputType {\n #[derive(Clone, Hash)]\n pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n \n+impl_stable_hash_for!(tuple_struct self::OutputTypes {\n+    map\n+});\n+\n impl OutputTypes {\n     pub fn new(entries: &[(OutputType, Option<PathBuf>)]) -> OutputTypes {\n         OutputTypes(BTreeMap::from_iter(entries.iter()\n@@ -373,6 +398,14 @@ pub struct OutputFilenames {\n     pub outputs: OutputTypes,\n }\n \n+impl_stable_hash_for!(struct self::OutputFilenames {\n+    out_directory,\n+    out_filestem,\n+    single_output_file,\n+    extra,\n+    outputs\n+});\n+\n /// Codegen unit names generated by the numbered naming scheme will contain this\n /// marker right before the index of the codegen unit.\n pub const NUMBERED_CODEGEN_UNIT_MARKER: &'static str = \".cgu-\";"}, {"sha": "f6b23af2f73746b74dbbe101a365c695be71b5a2", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -386,6 +386,14 @@ impl<CTX> HashStable<CTX> for String {\n     }\n }\n \n+impl<HCX> ToStableHashKey<HCX> for String {\n+    type KeyType = String;\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {\n+        self.clone()\n+    }\n+}\n+\n impl<CTX> HashStable<CTX> for bool {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "ba15f3522ac1fffd38c25bcca6239dc55b567890", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -41,7 +41,6 @@ use rustc::middle::trans::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata, EncodedMetadataHashes};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::hir::map as hir_map;\n use rustc::util::common::{time, print_time_passes_entry};\n@@ -894,7 +893,7 @@ fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter {\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n-    tcx.reachable_set(LOCAL_CRATE).iter().cloned().filter(|&id| {\n+    tcx.reachable_set(LOCAL_CRATE).0.iter().cloned().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n         // categories:\n@@ -1370,8 +1369,8 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let dep_node = cgu.work_product_dep_node();\n     let ((stats, module), _) =\n         tcx.dep_graph.with_task(dep_node,\n-                                AssertDepGraphSafe(tcx),\n-                                AssertDepGraphSafe(cgu),\n+                                tcx,\n+                                cgu,\n                                 module_translation);\n     let time_to_translate = start_time.elapsed();\n \n@@ -1392,14 +1391,10 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     return stats;\n \n     fn module_translation<'a, 'tcx>(\n-        tcx: AssertDepGraphSafe<TyCtxt<'a, 'tcx, 'tcx>>,\n-        args: AssertDepGraphSafe<Arc<CodegenUnit<'tcx>>>)\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        cgu: Arc<CodegenUnit<'tcx>>)\n         -> (Stats, ModuleTranslation)\n     {\n-        // FIXME(#40304): We ought to be using the id as a key and some queries, I think.\n-        let AssertDepGraphSafe(tcx) = tcx;\n-        let AssertDepGraphSafe(cgu) = args;\n-\n         let cgu_name = cgu.name().to_string();\n         let cgu_id = cgu.work_product_id();\n         let symbol_name_hash = cgu.compute_symbol_name_hash(tcx);\n@@ -1564,6 +1559,7 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n         Visibility::Default => llvm::Visibility::Default,\n         Visibility::Hidden => llvm::Visibility::Hidden,\n         Visibility::Protected => llvm::Visibility::Protected,\n+    }\n }\n \n // FIXME(mw): Anything that is produced via DepGraph::with_task() must implement\n@@ -1577,17 +1573,8 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n mod temp_stable_hash_impls {\n     use rustc_data_structures::stable_hasher::{StableHasherResult, StableHasher,\n                                                HashStable};\n-    use context::Stats;\n     use ModuleTranslation;\n \n-    impl<HCX> HashStable<HCX> for Stats {\n-        fn hash_stable<W: StableHasherResult>(&self,\n-                                              _: &mut HCX,\n-                                              _: &mut StableHasher<W>) {\n-            // do nothing\n-        }\n-    }\n-\n     impl<HCX> HashStable<HCX> for ModuleTranslation {\n         fn hash_stable<W: StableHasherResult>(&self,\n                                               _: &mut HCX,"}, {"sha": "b394911c9234df9a65c0b67f73bfcc874fc9bb24", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d6b850fd731597fe2f03408a0397a972c13641/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=74d6b850fd731597fe2f03408a0397a972c13641", "patch": "@@ -27,9 +27,8 @@ use type_::Type;\n use rustc_data_structures::base_n;\n use rustc::middle::trans::Stats;\n use rustc_data_structures::stable_hasher::StableHashingContextProvider;\n-use rustc::session::config::{self, NoDebugInfo, OutputFilenames};\n-use rustc::session::Session;\n use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::Session;\n use rustc::ty::layout::{LayoutCx, LayoutError, LayoutTyper, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;"}]}