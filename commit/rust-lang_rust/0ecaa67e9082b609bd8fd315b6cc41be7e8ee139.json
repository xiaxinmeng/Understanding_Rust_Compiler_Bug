{"sha": "0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlY2FhNjdlOTA4MmI2MDliZDhmZDMxNWI2Y2M0MWJlN2U4ZWUxMzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-08T21:43:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-14T00:07:13Z"}, "message": "rustc: Refactor attribute checking to operate on HIR\n\nThis'll enable running queries that could be cached and overall be more amenable\nto the query infastructure.", "tree": {"sha": "52ec33dd42e044de23a02791ced2315bc1cf56bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ec33dd42e044de23a02791ced2315bc1cf56bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "html_url": "https://github.com/rust-lang/rust/commit/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f006cebfc5939195f6df6d1f50f02f079233928", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f006cebfc5939195f6df6d1f50f02f079233928", "html_url": "https://github.com/rust-lang/rust/commit/5f006cebfc5939195f6df6d1f50f02f079233928"}], "stats": {"total": 100, "additions": 56, "deletions": 44}, "files": [{"sha": "4b528a0fdc7781c1c55dfa57f6858608bf241b66", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "patch": "@@ -14,11 +14,10 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use session::Session;\n+use ty::TyCtxt;\n \n-use syntax::ast;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n+use hir;\n+use hir::intravisit::{self, Visitor, NestedVisitorMap};\n \n #[derive(Copy, Clone, PartialEq)]\n enum Target {\n@@ -30,45 +29,51 @@ enum Target {\n }\n \n impl Target {\n-    fn from_item(item: &ast::Item) -> Target {\n+    fn from_item(item: &hir::Item) -> Target {\n         match item.node {\n-            ast::ItemKind::Fn(..) => Target::Fn,\n-            ast::ItemKind::Struct(..) => Target::Struct,\n-            ast::ItemKind::Union(..) => Target::Union,\n-            ast::ItemKind::Enum(..) => Target::Enum,\n+            hir::ItemFn(..) => Target::Fn,\n+            hir::ItemStruct(..) => Target::Struct,\n+            hir::ItemUnion(..) => Target::Union,\n+            hir::ItemEnum(..) => Target::Enum,\n             _ => Target::Other,\n         }\n     }\n }\n \n-struct CheckAttrVisitor<'a> {\n-    sess: &'a Session,\n+struct CheckAttrVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n-impl<'a> CheckAttrVisitor<'a> {\n+impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n     /// Check any attribute.\n-    fn check_attributes(&self, item: &ast::Item, target: Target) {\n+    fn check_attributes(&self, item: &hir::Item, target: Target) {\n+        self.tcx.target_features_enabled(self.tcx.hir.local_def_id(item.id));\n+\n         for attr in &item.attrs {\n             if let Some(name) = attr.name() {\n                 if name == \"inline\" {\n                     self.check_inline(attr, item, target)\n                 }\n             }\n         }\n+\n         self.check_repr(item, target);\n     }\n \n     /// Check if an `#[inline]` is applied to a function.\n-    fn check_inline(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n+    fn check_inline(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n         if target != Target::Fn {\n-            struct_span_err!(self.sess, attr.span, E0518, \"attribute should be applied to function\")\n+            struct_span_err!(self.tcx.sess,\n+                             attr.span,\n+                             E0518,\n+                             \"attribute should be applied to function\")\n                 .span_label(item.span, \"not a function\")\n                 .emit();\n         }\n     }\n \n     /// Check if the `#[repr]` attributes on `item` are valid.\n-    fn check_repr(&self, item: &ast::Item, target: Target) {\n+    fn check_repr(&self, item: &hir::Item, target: Target) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n         // ```\n         // #[repr(foo)]\n@@ -144,7 +149,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                 }\n                 _ => continue,\n             };\n-            struct_span_err!(self.sess, hint.span, E0517,\n+            struct_span_err!(self.tcx.sess, hint.span, E0517,\n                              \"attribute should be applied to {}\", allowed_targets)\n                 .span_label(item.span, format!(\"not {} {}\", article, allowed_targets))\n                 .emit();\n@@ -154,32 +159,37 @@ impl<'a> CheckAttrVisitor<'a> {\n         if (int_reprs > 1)\n            || (is_simd && is_c)\n            || (int_reprs == 1 && is_c && is_c_like_enum(item)) {\n-            // Just point at all repr hints. This is not ideal, but tracking precisely which ones\n-            // are at fault is a huge hassle.\n+            // Just point at all repr hints. This is not ideal, but tracking\n+            // precisely which ones are at fault is a huge hassle.\n             let spans: Vec<_> = hints.iter().map(|hint| hint.span).collect();\n-            span_warn!(self.sess, spans, E0566,\n+            span_warn!(self.tcx.sess, spans, E0566,\n                        \"conflicting representation hints\");\n         }\n     }\n }\n \n-impl<'a> Visitor<'a> for CheckAttrVisitor<'a> {\n-    fn visit_item(&mut self, item: &'a ast::Item) {\n+impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let target = Target::from_item(item);\n         self.check_attributes(item, target);\n-        visit::walk_item(self, item);\n+        intravisit::walk_item(self, item);\n     }\n }\n \n-pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n-    visit::walk_crate(&mut CheckAttrVisitor { sess: sess }, krate);\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    let mut checker = CheckAttrVisitor { tcx };\n+    tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n \n-fn is_c_like_enum(item: &ast::Item) -> bool {\n-    if let ast::ItemKind::Enum(ref def, _) = item.node {\n+fn is_c_like_enum(item: &hir::Item) -> bool {\n+    if let hir::ItemEnum(ref def, _) = item.node {\n         for variant in &def.variants {\n             match variant.node.data {\n-                ast::VariantData::Unit(_) => { /* continue */ }\n+                hir::VariantData::Unit(_) => { /* continue */ }\n                 _ => { return false; }\n             }\n         }"}, {"sha": "73c1b698087fceb8f80c99e6b38c0dec1dc0db0d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "patch": "@@ -210,10 +210,6 @@ pub fn compile_input(sess: &Session,\n                                     Ok(()));\n         }\n \n-        time(sess.time_passes(), \"attribute checking\", || {\n-            hir::check_attr::check_crate(sess, &expanded_crate);\n-        });\n-\n         let opt_crate = if control.keep_ast {\n             Some(&expanded_crate)\n         } else {\n@@ -1038,6 +1034,10 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(control: &CompileController,\n         // tcx available.\n         rustc_incremental::dep_graph_tcx_init(tcx);\n \n+        time(sess.time_passes(), \"attribute checking\", || {\n+            hir::check_attr::check_crate(tcx)\n+        });\n+\n         time(time_passes,\n              \"stability checking\",\n              || stability::check_unstable_api_usage(tcx));"}, {"sha": "444c4176994c593a1eeee61592294e373f289a0c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "patch": "@@ -1,3 +1,5 @@\n+error[E0601]: main function not found\n+\n error[E0518]: attribute should be applied to function\n   --> $DIR/issue-43106-gating-of-inline.rs:21:1\n    |\n@@ -37,7 +39,5 @@ error[E0518]: attribute should be applied to function\n 35 |     #[inline = \"2100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^ ---------- not a function\n \n-error[E0601]: main function not found\n-\n error: aborting due to 6 previous errors\n "}, {"sha": "e70d549ed573a43ea9dd095f8d7f272342a4f6d3", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-arm\n // ignore-aarch64\n+// ignore-wasm\n+// ignore-emscripten\n \n #![feature(target_feature)]\n "}, {"sha": "c5534bf147d5c53ba55259dadb67515265ba845c", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ecaa67e9082b609bd8fd315b6cc41be7e8ee139/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=0ecaa67e9082b609bd8fd315b6cc41be7e8ee139", "patch": "@@ -1,31 +1,31 @@\n warning: #[target_feature = \"..\"] is deprecated and will eventually be removed, use #[target_feature(enable = \"..\")] instead\n-  --> $DIR/target-feature-wrong.rs:16:1\n+  --> $DIR/target-feature-wrong.rs:18:1\n    |\n-16 | #[target_feature = \"+sse2\"]\n+18 | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/target-feature-wrong.rs:18:18\n+  --> $DIR/target-feature-wrong.rs:20:18\n    |\n-18 | #[target_feature(enable = \"foo\")]\n+20 | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^\n \n error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:20:18\n+  --> $DIR/target-feature-wrong.rs:22:18\n    |\n-20 | #[target_feature(bar)]\n+22 | #[target_feature(bar)]\n    |                  ^^^\n \n error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:22:18\n+  --> $DIR/target-feature-wrong.rs:24:18\n    |\n-22 | #[target_feature(disable = \"baz\")]\n+24 | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^\n \n error: #[target_feature(..)] can only be applied to `unsafe` function\n-  --> $DIR/target-feature-wrong.rs:26:1\n+  --> $DIR/target-feature-wrong.rs:28:1\n    |\n-26 | #[target_feature(enable = \"sse2\")]\n+28 | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors"}]}