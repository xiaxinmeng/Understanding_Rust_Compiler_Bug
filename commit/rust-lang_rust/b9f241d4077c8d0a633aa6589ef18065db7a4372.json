{"sha": "b9f241d4077c8d0a633aa6589ef18065db7a4372", "node_id": "C_kwDOAAsO6NoAKGI5ZjI0MWQ0MDc3YzhkMGE2MzNhYTY1ODllZjE4MDY1ZGI3YTQzNzI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T17:15:53Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:26Z"}, "message": "Use revisions for NLL in impl-trait", "tree": {"sha": "dfcde1207eb948888eaec566c04a61d1f97e3951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfcde1207eb948888eaec566c04a61d1f97e3951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f241d4077c8d0a633aa6589ef18065db7a4372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f241d4077c8d0a633aa6589ef18065db7a4372", "html_url": "https://github.com/rust-lang/rust/commit/b9f241d4077c8d0a633aa6589ef18065db7a4372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f241d4077c8d0a633aa6589ef18065db7a4372/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "707d2ebb5be0512271ee7c2039d29d6f2c0e2f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/707d2ebb5be0512271ee7c2039d29d6f2c0e2f0e", "html_url": "https://github.com/rust-lang/rust/commit/707d2ebb5be0512271ee7c2039d29d6f2c0e2f0e"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "5251eeee8bb26e5f212e94e2653b8d5697b233b1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n // check-pass\n-// revisions: migrate mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}"}, {"sha": "45cc935b7ccd1e81cb6bc28b873a7beb47035832", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.base.stderr", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.base.stderr?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----                 ^\n@@ -12,7 +12,7 @@ LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n+  --> $DIR/must_outlive_least_region_or_bound.rs:10:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                             ^\n@@ -25,15 +25,15 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----                           ^ ...is used here...\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |                        ^^^^^^^^^^^^^^^^^^^\n@@ -47,15 +47,15 @@ LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------                           ^ ...is used here...\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:33\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:33\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                                 ^^^^^^^^^^^^^^^^^^^\n@@ -69,15 +69,15 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:24\n+  --> $DIR/must_outlive_least_region_or_bound.rs:21:24\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:65\n+  --> $DIR/must_outlive_least_region_or_bound.rs:36:65\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               ---- this data with an anonymous lifetime `'_`... ^ ...is used and required to live as long as `'static` here\n@@ -92,13 +92,13 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      ------- this data with lifetime `'a`...        ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:34\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:34\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,10 +112,10 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ~~~~~~~~~~~~\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:50:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:34:5: 34:31]` captures the lifetime `'b` as defined here\n+   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:50:5: 50:31]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -125,7 +125,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:38:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:54:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n@@ -136,15 +136,15 @@ LL | fn ty_param_wont_outlive_static<T:Debug + 'static>(x: T) -> impl Debug + 's\n    |                                         +++++++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:50\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |               ----                               ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:28\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:28\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n    |                            ^^^^^^^^^    ----------- because of this returned expression\n@@ -156,15 +156,15 @@ LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ++++\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:59\n+  --> $DIR/must_outlive_least_region_or_bound.rs:27:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                     -------                               ^ ...is used and required to live as long as `'static` here\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:18:37\n+  --> $DIR/must_outlive_least_region_or_bound.rs:27:37\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n    |                                     ^^^^^^^^^    ----------- because of this returned expression\n@@ -176,15 +176,15 @@ LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:20:60\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ----                                         ^ ...is used and required to live as long as `'static` here\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:20:40\n+  --> $DIR/must_outlive_least_region_or_bound.rs:30:40\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                                        ^^^^^^^    ----------- because of this returned expression\n@@ -200,13 +200,13 @@ LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ~~~~~~~~~~~~\n \n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:49\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:49\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                                                 ^^^^^^^    ----------- because of this returned expression", "previous_filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr"}, {"sha": "0252e546fb0f2b42a7dfe3f62de82002af6ad9be", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n+  --> $DIR/must_outlive_least_region_or_bound.rs:7:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----                 ^\n@@ -12,7 +12,7 @@ LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n+  --> $DIR/must_outlive_least_region_or_bound.rs:10:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                             ^\n@@ -25,7 +25,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+  --> $DIR/must_outlive_least_region_or_bound.rs:13:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               -                              ^ returning this value requires that `'1` must outlive `'static`\n@@ -42,7 +42,7 @@ LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ~~~~~~~~~~~~\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:11:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:17:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n@@ -57,15 +57,15 @@ LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n    |                     ~~~~~~~~~~~~\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:41\n+  --> $DIR/must_outlive_least_region_or_bound.rs:21:41\n    |\n LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               ----                      ^ lifetime `'a` required\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:24:55\n+  --> $DIR/must_outlive_least_region_or_bound.rs:36:55\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n    |               -                                       ^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n@@ -82,7 +82,7 @@ LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x)\n    |                                                    ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n@@ -97,10 +97,10 @@ LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x\n    |                      ~~~~~~~~~~~~\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:50:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:34:5: 34:31]` captures the lifetime `'b` as defined here\n+   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:50:5: 50:31]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -110,7 +110,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                                              ++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:40:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:56:5\n    |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds"}, {"sha": "6bb3141b0125ab299f6a7bb7cfe385ece082b81e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n@@ -6,27 +10,39 @@ fn elided(x: &i32) -> impl Copy { x }\n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR: captures lifetime that does not appear in bounds\n \n-fn elided2(x: &i32) -> impl Copy + 'static { x } //~ ERROR E0759\n+fn elided2(x: &i32) -> impl Copy + 'static { x }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n-fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x } //~ ERROR E0759\n+fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n //~^ ERROR explicit lifetime required in the type of `x`\n \n-fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) } //~ ERROR E0759\n+fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) } //~ ERROR E0759\n+fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n+fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) } //~ ERROR E0759\n+fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+//[base]~^ ERROR E0759\n \n-fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) } //~ ERROR E0759\n+fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug) { (Box::new(x), x) }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n \n-fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x } //~ ERROR E0759\n+fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+//[base]~^ ERROR E0759\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n // Tests that a closure type containing 'b cannot be returned from a type where\n // only 'a was expected.\n@@ -36,8 +52,9 @@ fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n }\n \n fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //[base]~^ ERROR the parameter type `T` may not live long enough\n     x\n+    //[nll]~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "cfa1d93d57143f78d4f4e78afaae52db18ccc562", "filename": "src/test/ui/impl-trait/type_parameters_captured.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.base.stderr?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:7:20\n+  --> $DIR/type_parameters_captured.rs:11:20\n    |\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n    |                    ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds", "previous_filename": "src/test/ui/impl-trait/type_parameters_captured.stderr"}, {"sha": "a07ba564490a9fde8b8ee724e9da08a6b68fa8ca", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:9:5\n+  --> $DIR/type_parameters_captured.rs:13:5\n    |\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds"}, {"sha": "0618beeef976361cd22d9a95013f4ac35deb4482", "filename": "src/test/ui/impl-trait/type_parameters_captured.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f241d4077c8d0a633aa6589ef18065db7a4372/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.rs?ref=b9f241d4077c8d0a633aa6589ef18065db7a4372", "patch": "@@ -1,12 +1,17 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n use std::fmt::Debug;\n \n trait Any {}\n impl<T> Any for T {}\n \n // Check that type parameters are captured and not considered 'static\n fn foo<T>(x: T) -> impl Any + 'static {\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //[base]~^ ERROR the parameter type `T` may not live long enough\n     x\n+    //[nll]~^ ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}]}