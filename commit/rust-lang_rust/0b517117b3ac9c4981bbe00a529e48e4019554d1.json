{"sha": "0b517117b3ac9c4981bbe00a529e48e4019554d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNTE3MTE3YjNhYzljNDk4MWJiZTAwYTUyOWU0OGU0MDE5NTU0ZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T18:59:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T23:36:07Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "54da1e9acb4a56f0a6bdf86ad8e3a2cc9e5a0130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54da1e9acb4a56f0a6bdf86ad8e3a2cc9e5a0130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b517117b3ac9c4981bbe00a529e48e4019554d1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b517117b3ac9c4981bbe00a529e48e4019554d1", "html_url": "https://github.com/rust-lang/rust/commit/0b517117b3ac9c4981bbe00a529e48e4019554d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b517117b3ac9c4981bbe00a529e48e4019554d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e8f41212a04b702596f4261b89f2c3254338d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e8f41212a04b702596f4261b89f2c3254338d7", "html_url": "https://github.com/rust-lang/rust/commit/a3e8f41212a04b702596f4261b89f2c3254338d7"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "067a31166a50043399e6e350b702178545cbcaf5", "filename": "src/libnative/io/c_windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b517117b3ac9c4981bbe00a529e48e4019554d1/src%2Flibnative%2Fio%2Fc_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b517117b3ac9c4981bbe00a529e48e4019554d1/src%2Flibnative%2Fio%2Fc_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_windows.rs?ref=0b517117b3ac9c4981bbe00a529e48e4019554d1", "patch": "@@ -17,7 +17,7 @@ use libc;\n pub const WSADESCRIPTION_LEN: uint = 256;\n pub const WSASYS_STATUS_LEN: uint = 128;\n pub const FIONBIO: libc::c_long = 0x8004667e;\n-static FD_SETSIZE: uint = 64;\n+pub const FD_SETSIZE: uint = 64;\n pub const MSG_DONTWAIT: libc::c_int = 0;\n pub const ERROR_ILLEGAL_CHARACTER: libc::c_int = 582;\n pub const ENABLE_ECHO_INPUT: libc::DWORD = 0x4;"}, {"sha": "bd47874d6472058665d46d5c71cd386d44c28044", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b517117b3ac9c4981bbe00a529e48e4019554d1/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b517117b3ac9c4981bbe00a529e48e4019554d1/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=0b517117b3ac9c4981bbe00a529e48e4019554d1", "patch": "@@ -364,20 +364,20 @@ mod imp {\n         use libc;\n \n         #[cfg(target_arch = \"x86_64\")]\n-        static __PTHREAD_MUTEX_SIZE__: uint = 56;\n+        const __PTHREAD_MUTEX_SIZE__: uint = 56;\n         #[cfg(target_arch = \"x86_64\")]\n-        static __PTHREAD_COND_SIZE__: uint = 40;\n+        const __PTHREAD_COND_SIZE__: uint = 40;\n         #[cfg(target_arch = \"x86\")]\n-        static __PTHREAD_MUTEX_SIZE__: uint = 40;\n+        const __PTHREAD_MUTEX_SIZE__: uint = 40;\n         #[cfg(target_arch = \"x86\")]\n-        static __PTHREAD_COND_SIZE__: uint = 24;\n+        const __PTHREAD_COND_SIZE__: uint = 24;\n         #[cfg(target_arch = \"arm\")]\n-        static __PTHREAD_MUTEX_SIZE__: uint = 40;\n+        const __PTHREAD_MUTEX_SIZE__: uint = 40;\n         #[cfg(target_arch = \"arm\")]\n-        static __PTHREAD_COND_SIZE__: uint = 24;\n+        const __PTHREAD_COND_SIZE__: uint = 24;\n \n-        static _PTHREAD_MUTEX_SIG_INIT: libc::c_long = 0x32AAABA7;\n-        static _PTHREAD_COND_SIG_INIT: libc::c_long = 0x3CB0B1BB;\n+        const _PTHREAD_MUTEX_SIG_INIT: libc::c_long = 0x32AAABA7;\n+        const _PTHREAD_COND_SIG_INIT: libc::c_long = 0x3CB0B1BB;\n \n         #[repr(C)]\n         pub struct pthread_mutex_t {"}, {"sha": "6cbbc0af3909e4e7ea9afefcc91b934466ab9ddf", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b517117b3ac9c4981bbe00a529e48e4019554d1/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b517117b3ac9c4981bbe00a529e48e4019554d1/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=0b517117b3ac9c4981bbe00a529e48e4019554d1", "patch": "@@ -45,8 +45,8 @@ pub fn log_enabled() -> bool {\n     val == 2\n }\n \n-#[cfg(target_word_size = \"64\")] static HEX_WIDTH: uint = 18;\n-#[cfg(target_word_size = \"32\")] static HEX_WIDTH: uint = 10;\n+#[cfg(target_word_size = \"64\")] const HEX_WIDTH: uint = 18;\n+#[cfg(target_word_size = \"32\")] const HEX_WIDTH: uint = 10;\n \n // All rust symbols are in theory lists of \"::\"-separated identifiers. Some\n // assemblers, however, can't handle these characters in symbol names. To get\n@@ -273,7 +273,7 @@ mod imp {\n \n         try!(writeln!(w, \"stack backtrace:\"));\n         // 100 lines should be enough\n-        static SIZE: uint = 100;\n+        const SIZE: uint = 100;\n         let mut buf: [*mut libc::c_void, ..SIZE] = unsafe {mem::zeroed()};\n         let cnt = unsafe { backtrace(buf.as_mut_ptr(), SIZE as libc::c_int) as uint};\n \n@@ -697,10 +697,10 @@ mod imp {\n                            *mut libc::c_void, *mut libc::c_void,\n                            *mut libc::c_void, *mut libc::c_void) -> libc::BOOL;\n \n-    static MAX_SYM_NAME: uint = 2000;\n-    static IMAGE_FILE_MACHINE_I386: libc::DWORD = 0x014c;\n-    static IMAGE_FILE_MACHINE_IA64: libc::DWORD = 0x0200;\n-    static IMAGE_FILE_MACHINE_AMD64: libc::DWORD = 0x8664;\n+    const MAX_SYM_NAME: uint = 2000;\n+    const IMAGE_FILE_MACHINE_I386: libc::DWORD = 0x014c;\n+    const IMAGE_FILE_MACHINE_IA64: libc::DWORD = 0x0200;\n+    const IMAGE_FILE_MACHINE_AMD64: libc::DWORD = 0x8664;\n \n     #[repr(C)]\n     struct SYMBOL_INFO {\n@@ -772,7 +772,7 @@ mod imp {\n     mod arch {\n         use libc;\n \n-        static MAXIMUM_SUPPORTED_EXTENSION: uint = 512;\n+        const MAXIMUM_SUPPORTED_EXTENSION: uint = 512;\n \n         #[repr(C)]\n         pub struct CONTEXT {"}]}