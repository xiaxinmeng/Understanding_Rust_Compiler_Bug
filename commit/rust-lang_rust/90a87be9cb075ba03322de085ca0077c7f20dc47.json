{"sha": "90a87be9cb075ba03322de085ca0077c7f20dc47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTg3YmU5Y2IwNzViYTAzMzIyZGUwODVjYTAwNzdjN2YyMGRjNDc=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-10T19:18:00Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-16T15:45:06Z"}, "message": "make `compose_and_run_compiler` take `Command`", "tree": {"sha": "6fa81a4a2cca6589ae163925d059ff69b07889e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa81a4a2cca6589ae163925d059ff69b07889e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a87be9cb075ba03322de085ca0077c7f20dc47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJ9c9OhXB85uXPmbOeLE+KEl68t8FAlmUaIIACgkQeLE+KEl6\n8t/5yg/9ERQbSwB81FJoF4LDv1a0t4CTm10TA65BPt4cKJSsvA1KEnax4aNWqTfz\n1+3zweMHpvN5CqIPT2IPh8DrNoY2lrfqDWneyEEsGT83uhEktuRA7fr8kEdRG1V1\nDO9gZCpwE/ooS759jH3Vra536itvKZniA/v1BlFbal/gFGSjebCruYCnizSYa/zX\nU+TRCE8QGOVHfYu4AuW3vtxSs6X653VIuSeBmJDborCh3/5vH1O8rW5XFQr5WdY7\ngFfsHdfA7o9ggEvLSb0v2fCKX3WStETiF8VmXbGP5mvVr4xGvqwp3RIX1und5PoR\nSRrkt4927SoQV8eDTO/NTFmff10jvUDkLvjLl01kS5nnKU1xg1bbxeHgb8C7qgJ8\nQdtpvDDBzClQNXq1gjZL0+gCGezobWJik/g8E4dSFWpTMTsBNAM2fz9Bz3V+ceUB\n99JiAeNLwEH5gbx9z+u8CiaRxjAkesTsXfHh1cpbCVuD2OG2RKUv6TyRUpMUNISC\nzPwCbQRKLm4jMqFbqt9mF5F4gHFGiv04HwZdR/4ttTpWuU4219XFKDrplcg0Ro+N\nuzEJ3KDptFPgZZJhPRyNjvv/FdOQfitkAe49jwkLATJgky8KPlWoOfAdYQCC5qXK\nHZ9P7f0rMIWnB09WI3IPGqg0+O+nY3qWx2+3BVepmElAGNW6/nk=\n=+TJx\n-----END PGP SIGNATURE-----", "payload": "tree 6fa81a4a2cca6589ae163925d059ff69b07889e0\nparent 0a666f87caa3590d2dad54b30ac752e01c6b372c\nauthor Andy Russell <arussell123@gmail.com> 1502392680 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1502898306 -0400\n\nmake `compose_and_run_compiler` take `Command`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a87be9cb075ba03322de085ca0077c7f20dc47", "html_url": "https://github.com/rust-lang/rust/commit/90a87be9cb075ba03322de085ca0077c7f20dc47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a87be9cb075ba03322de085ca0077c7f20dc47/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a666f87caa3590d2dad54b30ac752e01c6b372c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a666f87caa3590d2dad54b30ac752e01c6b372c", "html_url": "https://github.com/rust-lang/rust/commit/0a666f87caa3590d2dad54b30ac752e01c6b372c"}], "stats": {"total": 92, "additions": 40, "deletions": 52}, "files": [{"sha": "4d54d5d0d0c082ad3ad473729ab287b6e067c7f4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 40, "deletions": 52, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/90a87be9cb075ba03322de085ca0077c7f20dc47/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a87be9cb075ba03322de085ca0077c7f20dc47/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=90a87be9cb075ba03322de085ca0077c7f20dc47", "patch": "@@ -365,45 +365,35 @@ actual:\\n\\\n     }\n \n     fn typecheck_source(&self, src: String) -> ProcRes {\n-        let args = self.make_typecheck_args();\n-        self.compose_and_run_compiler(args, Some(src))\n-    }\n+        let mut rustc = Command::new(&self.config.rustc_path);\n+\n+        let out_dir = self.output_base_name().with_extension(\"pretty-out\");\n+        let _ = fs::remove_dir_all(&out_dir);\n+        create_dir_all(&out_dir).unwrap();\n \n-    fn make_typecheck_args(&self) -> ProcArgs {\n-        let aux_dir = self.aux_output_dir_name();\n         let target = if self.props.force_host {\n             &*self.config.host\n         } else {\n             &*self.config.target\n         };\n \n-        let out_dir = self.output_base_name().with_extension(\"pretty-out\");\n-        let _ = fs::remove_dir_all(&out_dir);\n-        create_dir_all(&out_dir).unwrap();\n+        let aux_dir = self.aux_output_dir_name();\n+\n+        rustc.arg(\"-\")\n+            .arg(\"-Zno-trans\")\n+            .arg(\"--out-dir\").arg(&out_dir)\n+            .arg(&format!(\"--target={}\", target))\n+            .arg(\"-L\").arg(&self.config.build_base)\n+            .arg(\"-L\").arg(aux_dir);\n \n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut args = vec![\"-\".to_owned(),\n-                            \"-Zno-trans\".to_owned(),\n-                            \"--out-dir\".to_owned(),\n-                            out_dir.to_str().unwrap().to_owned(),\n-                            format!(\"--target={}\", target),\n-                            \"-L\".to_owned(),\n-                            self.config.build_base.to_str().unwrap().to_owned(),\n-                            \"-L\".to_owned(),\n-                            aux_dir.to_str().unwrap().to_owned()];\n         if let Some(revision) = self.revision {\n-            args.extend(vec![\n-                \"--cfg\".to_string(),\n-                revision.to_string(),\n-            ]);\n-        }\n-        args.extend(self.split_maybe_args(&self.config.target_rustcflags));\n-        args.extend(self.props.compile_flags.iter().cloned());\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        ProcArgs {\n-            prog: self.config.rustc_path.to_str().unwrap().to_owned(),\n-            args,\n+            rustc.args(&[\"--cfg\", revision]);\n         }\n+\n+        rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n+        rustc.args(&self.props.compile_flags);\n+\n+        self.compose_and_run_compiler(rustc, Some(src))\n     }\n \n     fn run_debuginfo_gdb_test(&self) {\n@@ -1126,10 +1116,11 @@ actual:\\n\\\n             }\n             _ => {}\n         }\n-        let args = self.make_compile_args(extra_args,\n-                                          &self.testpaths.file,\n-                                          TargetLocation::ThisFile(self.make_exe_name()));\n-        self.compose_and_run_compiler(args, None)\n+        let ProcArgs { prog, args } = self.make_compile_args(\n+            extra_args, &self.testpaths.file, TargetLocation::ThisFile(self.make_exe_name()));\n+        let mut rustc = Command::new(prog);\n+        rustc.args(args);\n+        self.compose_and_run_compiler(rustc, None)\n     }\n \n     fn document(&self, out_dir: &Path) -> ProcRes {\n@@ -1153,18 +1144,16 @@ actual:\\n\\\n         }\n \n         let aux_dir = self.aux_output_dir_name();\n-        let mut args = vec![\"-L\".to_owned(),\n-                            aux_dir.to_str().unwrap().to_owned(),\n-                            \"-o\".to_owned(),\n-                            out_dir.to_str().unwrap().to_owned(),\n-                            self.testpaths.file.to_str().unwrap().to_owned()];\n-        args.extend(self.props.compile_flags.iter().cloned());\n-        let args = ProcArgs {\n-            prog: self.config.rustdoc_path\n-                .as_ref().expect(\"--rustdoc-path passed\").to_str().unwrap().to_owned(),\n-            args,\n-        };\n-        self.compose_and_run_compiler(args, None)\n+\n+        let rustdoc_path = self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path passed\");\n+        let mut rustdoc = Command::new(rustdoc_path);\n+\n+        rustdoc.arg(\"-L\").arg(aux_dir)\n+            .arg(\"-o\").arg(out_dir)\n+            .arg(&self.testpaths.file)\n+            .args(&self.props.compile_flags);\n+\n+        self.compose_and_run_compiler(rustdoc, None)\n     }\n \n     fn exec_compiled_test(&self) -> ProcRes {\n@@ -1247,7 +1236,7 @@ actual:\\n\\\n         }\n     }\n \n-    fn compose_and_run_compiler(&self, args: ProcArgs, input: Option<String>) -> ProcRes {\n+    fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n         if !self.props.aux_builds.is_empty() {\n             create_dir_all(&self.aux_output_dir_name()).unwrap();\n         }\n@@ -1307,11 +1296,7 @@ actual:\\n\\\n             }\n         }\n \n-        let ProcArgs { prog, args } = args;\n-        let mut rustc = Command::new(prog);\n-        rustc.args(args)\n-            .envs(self.props.rustc_env.clone());\n-\n+        rustc.envs(self.props.rustc_env.clone());\n         self.compose_and_run(rustc,\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n@@ -1681,7 +1666,10 @@ actual:\\n\\\n                                               self.output_base_name().parent()\n                                                                      .unwrap()\n                                                                      .to_path_buf()));\n-        self.compose_and_run_compiler(args, None)\n+        let ProcArgs { prog, args } = args;\n+        let mut rustc = Command::new(prog);\n+        rustc.args(args);\n+        self.compose_and_run_compiler(rustc, None)\n     }\n \n     fn check_ir_with_filecheck(&self) -> ProcRes {"}]}