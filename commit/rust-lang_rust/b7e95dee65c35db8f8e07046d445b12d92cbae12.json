{"sha": "b7e95dee65c35db8f8e07046d445b12d92cbae12", "node_id": "C_kwDOAAsO6NoAKGI3ZTk1ZGVlNjVjMzVkYjhmOGUwNzA0NmQ0NDViMTJkOTJjYmFlMTI", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-27T09:44:25Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-02-23T06:38:52Z"}, "message": "rustc_errors: let `DiagnosticBuilder::emit` return a \"guarantee of emission\".", "tree": {"sha": "af9131de515325e67c68ab9bbd3c514298ca57f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9131de515325e67c68ab9bbd3c514298ca57f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e95dee65c35db8f8e07046d445b12d92cbae12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e95dee65c35db8f8e07046d445b12d92cbae12", "html_url": "https://github.com/rust-lang/rust/commit/b7e95dee65c35db8f8e07046d445b12d92cbae12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e95dee65c35db8f8e07046d445b12d92cbae12/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9d70cf6d47df456280f83b58c04c96aa58e89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9d70cf6d47df456280f83b58c04c96aa58e89e", "html_url": "https://github.com/rust-lang/rust/commit/0b9d70cf6d47df456280f83b58c04c96aa58e89e"}], "stats": {"total": 1313, "additions": 842, "deletions": 471}, "files": [{"sha": "e2b6a48a9e867772ce0e9aad159d9a9f35a47fb4", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,9 +1,13 @@\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n \n impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n-    crate fn cannot_move_when_borrowed(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n+    crate fn cannot_move_when_borrowed(\n+        &self,\n+        span: Span,\n+        desc: &str,\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, span, E0505, \"cannot move out of {} because it is borrowed\", desc,)\n     }\n \n@@ -13,7 +17,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         borrow_span: Span,\n         borrow_desc: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -32,7 +36,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         verb: &str,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(\n             self,\n             span,\n@@ -51,7 +55,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         old_loan_span: Span,\n         old_opt_via: &str,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let via =\n             |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n@@ -99,7 +103,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         old_loan_span: Span,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -132,7 +136,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         noun_old: &str,\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -164,7 +168,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         old_opt_via: &str,\n         previous_end_span: Option<Span>,\n         second_borrow_desc: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -200,7 +204,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         kind_old: &str,\n         msg_old: &str,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let via =\n             |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n@@ -243,7 +247,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         borrow_span: Span,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -262,20 +266,20 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         desc: &str,\n         is_arg: bool,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let msg = if is_arg { \"to immutable argument\" } else { \"twice to immutable variable\" };\n         struct_span_err!(self, span, E0384, \"cannot assign {} {}\", msg, desc)\n     }\n \n-    crate fn cannot_assign(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n+    crate fn cannot_assign(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n     crate fn cannot_move_out_of(\n         &self,\n         move_from_span: Span,\n         move_from_desc: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, move_from_span, E0507, \"cannot move out of {}\", move_from_desc,)\n     }\n \n@@ -287,7 +291,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         move_from_span: Span,\n         ty: Ty<'_>,\n         is_index: Option<bool>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let type_name = match (&ty.kind(), is_index) {\n             (&ty::Array(_, _), Some(true)) | (&ty::Array(_, _), None) => \"array\",\n             (&ty::Slice(_), _) => \"slice\",\n@@ -309,7 +313,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         move_from_span: Span,\n         container_ty: Ty<'_>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             move_from_span,\n@@ -327,7 +331,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         verb: &str,\n         optional_adverb_for_moved: &str,\n         moved_path: Option<String>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let moved_path = moved_path.map(|mp| format!(\": `{}`\", mp)).unwrap_or_default();\n \n         struct_span_err!(\n@@ -346,7 +350,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         path: &str,\n         reason: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, span, E0596, \"cannot borrow {} as mutable{}\", path, reason,)\n     }\n \n@@ -357,7 +361,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         immutable_place: &str,\n         immutable_section: &str,\n         action: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             mutate_span,\n@@ -376,7 +380,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         yield_span: Span,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -387,7 +391,10 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    crate fn cannot_borrow_across_destructor(&self, borrow_span: Span) -> DiagnosticBuilder<'cx> {\n+    crate fn cannot_borrow_across_destructor(\n+        &self,\n+        borrow_span: Span,\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(\n             self,\n             borrow_span,\n@@ -400,7 +407,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         path: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, span, E0597, \"{} does not live long enough\", path,)\n     }\n \n@@ -410,7 +417,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -435,7 +442,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n@@ -454,11 +461,14 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn thread_local_value_does_not_live_long_enough(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, span, E0712, \"thread-local variable borrowed past end of function\",)\n     }\n \n-    crate fn temporary_value_borrowed_for_too_long(&self, span: Span) -> DiagnosticBuilder<'cx> {\n+    crate fn temporary_value_borrowed_for_too_long(\n+        &self,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n \n@@ -467,7 +477,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         self.infcx.tcx.sess.struct_span_err_with_code(sp, msg, code)\n     }\n }\n@@ -476,7 +486,7 @@ crate fn borrowed_data_escapes_closure<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     escape_span: Span,\n     escapes_from: &str,\n-) -> DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'tcx, ErrorReported> {\n     struct_span_err!(\n         tcx.sess,\n         escape_span,"}, {"sha": "3ef002bf7402715fb24b5663b1d85a6f413b3615", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{DiagnosticBuilder, ErrorReported};\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_infer::infer::region_constraints::Constraint;\n@@ -120,7 +120,11 @@ impl<'tcx, F, G> ToUniverseInfo<'tcx> for Canonical<'tcx, type_op::custom::Custo\n trait TypeOpInfo<'tcx> {\n     /// Returns an error to be reported if rerunning the type op fails to\n     /// recover the error's cause.\n-    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n+    fn fallback_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n \n     fn base_universe(&self) -> ty::UniverseIndex;\n \n@@ -130,7 +134,7 @@ trait TypeOpInfo<'tcx> {\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx>>;\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>>;\n \n     fn report_error(\n         &self,\n@@ -188,7 +192,11 @@ struct PredicateQuery<'tcx> {\n }\n \n impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n-    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn fallback_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n         err.note(&format!(\"could not prove {}\", self.canonical_query.value.value.predicate));\n         err\n@@ -204,7 +212,7 @@ impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         tcx.infer_ctxt().enter_with_canonical(\n             cause.span,\n             &self.canonical_query,\n@@ -231,7 +239,11 @@ impl<'tcx, T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n where\n     T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx,\n {\n-    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn fallback_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n         err.note(&format!(\"could not normalize `{}`\", self.canonical_query.value.value.value));\n         err\n@@ -247,7 +259,7 @@ where\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         tcx.infer_ctxt().enter_with_canonical(\n             cause.span,\n             &self.canonical_query,\n@@ -288,7 +300,11 @@ struct AscribeUserTypeQuery<'tcx> {\n }\n \n impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n-    fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn fallback_error(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n         // and is only the fallback when the nice error fails. Consider improving this some more.\n         tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\")\n@@ -304,7 +320,7 @@ impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n         cause: ObligationCause<'tcx>,\n         placeholder_region: ty::Region<'tcx>,\n         error_region: Option<ty::Region<'tcx>>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         tcx.infer_ctxt().enter_with_canonical(\n             cause.span,\n             &self.canonical_query,\n@@ -329,7 +345,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     placeholder_region: ty::Region<'tcx>,\n     error_region: Option<ty::Region<'tcx>>,\n-) -> Option<DiagnosticBuilder<'tcx>> {\n+) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n     let tcx = infcx.tcx;\n \n     // We generally shouldn't have errors here because the query was"}, {"sha": "cd1f73d52981879fea12a24433044479f2e9d390", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_const_eval::util::{CallDesugaringKind, CallKind};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n@@ -507,7 +507,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         (place, _span): (Place<'tcx>, Span),\n         borrow: &BorrowData<'tcx>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.args_or_use();\n \n@@ -554,7 +554,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         (place, span): (Place<'tcx>, Span),\n         gen_borrow_kind: BorrowKind,\n         issued_borrow: &BorrowData<'tcx>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let issued_spans = self.retrieve_borrow_spans(issued_borrow);\n         let issued_span = issued_spans.args_or_use();\n \n@@ -1120,7 +1120,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n         explanation: BorrowExplanation,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}, {:?}\\\n@@ -1298,7 +1298,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         drop_span: Span,\n         borrow_span: Span,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         debug!(\n             \"report_thread_local_value_does_not_live_long_enough(\\\n              {:?}, {:?}\\\n@@ -1325,7 +1325,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow_spans: UseSpans<'tcx>,\n         proper_span: Span,\n         explanation: BorrowExplanation,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         debug!(\n             \"report_temporary_value_does_not_live_long_enough(\\\n              {:?}, {:?}, {:?}, {:?}\\\n@@ -1384,7 +1384,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         return_span: Span,\n         category: ConstraintCategory,\n         opt_place_desc: Option<&String>,\n-    ) -> Option<DiagnosticBuilder<'cx>> {\n+    ) -> Option<DiagnosticBuilder<'cx, ErrorReported>> {\n         let return_kind = match category {\n             ConstraintCategory::Return(_) => \"return\",\n             ConstraintCategory::Yield => \"yield\",\n@@ -1483,7 +1483,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         category: ConstraintCategory,\n         constraint_span: Span,\n         captured_var: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let tcx = self.infcx.tcx;\n         let args_span = use_span.args_or_use();\n \n@@ -1560,7 +1560,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         upvar_span: Span,\n         upvar_name: &str,\n         escape_span: Span,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> DiagnosticBuilder<'cx, ErrorReported> {\n         let tcx = self.infcx.tcx;\n \n         let (_, escapes_from) = tcx.article_and_description(self.mir_def_id().to_def_id());"}, {"sha": "66f4c28a36d6644ff0a175b966a37b91c08351e3", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,5 +1,5 @@\n use rustc_const_eval::util::CallDesugaringKind;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n@@ -271,7 +271,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &mut self,\n         place: Place<'tcx>,\n         span: Span,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         let description = if place.projection.len() == 1 {\n             format!(\"static item {}\", self.describe_any_place(place.as_ref()))\n         } else {\n@@ -293,7 +293,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         deref_target_place: Place<'tcx>,\n         span: Span,\n         use_spans: Option<UseSpans<'tcx>>,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n         // was a move rather than a copy."}, {"sha": "de50f907eff6f982b4d514d206afbd6dfd8bea0a", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -256,6 +256,6 @@ impl OutlivesSuggestionBuilder {\n         diag.sort_span = mir_span.shrink_to_hi();\n \n         // Buffer the diagnostic\n-        mbcx.buffer_error(diag);\n+        mbcx.buffer_non_error_diag(diag);\n     }\n }"}, {"sha": "64f05f6004f530760ff202c58af3f79c81b2ad95", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,6 +1,6 @@\n //! Error reporting machinery for lifetime errors.\n \n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n@@ -392,7 +392,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &self,\n         errci: &ErrorConstraintInfo,\n         kind: ReturnConstraint,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n \n         let mut diag = self\n@@ -469,7 +469,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// LL |     ref_obj(x)\n     ///    |     ^^^^^^^^^^ `x` escapes the function body here\n     /// ```\n-    fn report_escaping_data_error(&self, errci: &ErrorConstraintInfo) -> DiagnosticBuilder<'tcx> {\n+    fn report_escaping_data_error(\n+        &self,\n+        errci: &ErrorConstraintInfo,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let ErrorConstraintInfo { span, category, .. } = errci;\n \n         let fr_name_and_span = self.regioncx.get_var_name_and_span_for_region(\n@@ -570,7 +573,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     ///    |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it\n     ///    |                    is returning data with lifetime `'b`\n     /// ```\n-    fn report_general_error(&self, errci: &ErrorConstraintInfo) -> DiagnosticBuilder<'tcx> {\n+    fn report_general_error(\n+        &self,\n+        errci: &ErrorConstraintInfo,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let ErrorConstraintInfo {\n             fr,\n             fr_is_local,"}, {"sha": "d9dcc27da0a783a30f25a64023fd604d70adca31", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -398,7 +398,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 diag.message = initial_diag.styled_message().clone();\n                 diag.span = initial_diag.span.clone();\n \n-                mbcx.buffer_error(diag);\n+                mbcx.buffer_non_error_diag(diag);\n             },\n         );\n         initial_diag.cancel();\n@@ -2293,8 +2293,8 @@ mod error {\n         /// when errors in the map are being re-added to the error buffer so that errors with the\n         /// same primary span come out in a consistent order.\n         buffered_move_errors:\n-            BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx>)>,\n-        /// Errors to be reported buffer\n+            BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorReported>)>,\n+        /// Diagnostics to be reported buffer.\n         buffered: Vec<Diagnostic>,\n         /// Set to Some if we emit an error during borrowck\n         tainted_by_errors: Option<ErrorReported>,\n@@ -2309,25 +2309,35 @@ mod error {\n             }\n         }\n \n-        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_>) {\n+        // FIXME(eddyb) this is a suboptimal API because `tainted_by_errors` is\n+        // set before any emission actually happens (weakening the guarantee).\n+        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorReported>) {\n             self.tainted_by_errors = Some(ErrorReported {});\n             t.buffer(&mut self.buffered);\n         }\n \n+        pub fn buffer_non_error_diag(&mut self, t: DiagnosticBuilder<'_, ()>) {\n+            t.buffer(&mut self.buffered);\n+        }\n+\n         pub fn set_tainted_by_errors(&mut self) {\n             self.tainted_by_errors = Some(ErrorReported {});\n         }\n     }\n \n     impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_>) {\n+        pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorReported>) {\n             self.errors.buffer_error(t);\n         }\n \n+        pub fn buffer_non_error_diag(&mut self, t: DiagnosticBuilder<'_, ()>) {\n+            self.errors.buffer_non_error_diag(t);\n+        }\n+\n         pub fn buffer_move_error(\n             &mut self,\n             move_out_indices: Vec<MoveOutIndex>,\n-            place_and_err: (PlaceRef<'tcx>, DiagnosticBuilder<'tcx>),\n+            place_and_err: (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorReported>),\n         ) -> bool {\n             if let Some((_, diag)) =\n                 self.errors.buffered_move_errors.insert(move_out_indices, place_and_err)\n@@ -2365,7 +2375,7 @@ mod error {\n         pub fn has_move_error(\n             &self,\n             move_out_indices: &[MoveOutIndex],\n-        ) -> Option<&(PlaceRef<'tcx>, DiagnosticBuilder<'cx>)> {\n+        ) -> Option<&(PlaceRef<'tcx>, DiagnosticBuilder<'cx, ErrorReported>)> {\n             self.errors.buffered_move_errors.get(move_out_indices)\n         }\n     }"}, {"sha": "a2736fd1156646f02443be87f8e30fd4b1b0dbd9", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -417,7 +417,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n         err.note(&format!(\"Inferred opaque type values:\\n{:#?}\", opaque_type_values));\n     }\n \n-    errors.buffer_error(err);\n+    errors.buffer_non_error_diag(err);\n }\n \n fn for_each_region_constraint("}, {"sha": "57ef46475ddd860e3f4423bf37cba037b0f04596", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, PResult};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n@@ -30,7 +30,7 @@ fn parse_args<'a>(\n     sp: Span,\n     tts: TokenStream,\n     is_global_asm: bool,\n-) -> Result<AsmArgs, DiagnosticBuilder<'a>> {\n+) -> PResult<'a, AsmArgs> {\n     let mut p = ecx.new_parser_from_tts(tts);\n     let sess = &ecx.sess.parse_sess;\n     parse_asm_args(&mut p, sess, sp, is_global_asm)\n@@ -43,7 +43,7 @@ pub fn parse_asm_args<'a>(\n     sess: &'a ParseSess,\n     sp: Span,\n     is_global_asm: bool,\n-) -> Result<AsmArgs, DiagnosticBuilder<'a>> {\n+) -> PResult<'a, AsmArgs> {\n     let diag = &sess.span_diagnostic;\n \n     if p.token == token::Eof {\n@@ -390,7 +390,7 @@ fn parse_options<'a>(\n     p: &mut Parser<'a>,\n     args: &mut AsmArgs,\n     is_global_asm: bool,\n-) -> Result<(), DiagnosticBuilder<'a>> {\n+) -> PResult<'a, ()> {\n     let span_start = p.prev_token.span;\n \n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n@@ -431,10 +431,7 @@ fn parse_options<'a>(\n     Ok(())\n }\n \n-fn parse_clobber_abi<'a>(\n-    p: &mut Parser<'a>,\n-    args: &mut AsmArgs,\n-) -> Result<(), DiagnosticBuilder<'a>> {\n+fn parse_clobber_abi<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> PResult<'a, ()> {\n     let span_start = p.prev_token.span;\n \n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n@@ -501,7 +498,7 @@ fn parse_clobber_abi<'a>(\n fn parse_reg<'a>(\n     p: &mut Parser<'a>,\n     explicit_reg: &mut bool,\n-) -> Result<ast::InlineAsmRegOrRegClass, DiagnosticBuilder<'a>> {\n+) -> PResult<'a, ast::InlineAsmRegOrRegClass> {\n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n     let result = match p.token.uninterpolate().kind {\n         token::Ident(name, false) => ast::InlineAsmRegOrRegClass::RegClass(name),"}, {"sha": "a984980dea9bf79fbb8f2bb91286d0fbf315aa03", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, PResult};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -83,11 +83,7 @@ struct Assert {\n     custom_message: Option<TokenStream>,\n }\n \n-fn parse_assert<'a>(\n-    cx: &mut ExtCtxt<'a>,\n-    sp: Span,\n-    stream: TokenStream,\n-) -> Result<Assert, DiagnosticBuilder<'a>> {\n+fn parse_assert<'a>(cx: &mut ExtCtxt<'a>, sp: Span, stream: TokenStream) -> PResult<'a, Assert> {\n     let mut parser = cx.new_parser_from_tts(stream);\n \n     if parser.token == token::Eof {"}, {"sha": "1e1cf917c6093942c358e2711013113183b8b22a", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -6,7 +6,7 @@ use rustc_ast as ast;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n use rustc_span::Span;\n \n@@ -29,11 +29,7 @@ pub fn expand_cfg(\n     }\n }\n \n-fn parse_cfg<'a>(\n-    cx: &mut ExtCtxt<'a>,\n-    sp: Span,\n-    tts: TokenStream,\n-) -> Result<ast::MetaItem, DiagnosticBuilder<'a>> {\n+fn parse_cfg<'a>(cx: &mut ExtCtxt<'a>, sp: Span, tts: TokenStream) -> PResult<'a, ast::MetaItem> {\n     let mut p = cx.new_parser_from_tts(tts);\n \n     if p.token == token::Eof {"}, {"sha": "31213412d45f209e069d979dc8e6a8d839a8817d", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{token, BlockCheckMode, UnsafeSource};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_expand::base::{self, *};\n use rustc_parse_format as parse;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -130,7 +130,7 @@ fn parse_args<'a>(\n     ecx: &mut ExtCtxt<'a>,\n     sp: Span,\n     tts: TokenStream,\n-) -> Result<(P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<Symbol, usize>), DiagnosticBuilder<'a>> {\n+) -> PResult<'a, (P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<Symbol, usize>)> {\n     let mut args = Vec::<P<ast::Expr>>::new();\n     let mut names = FxHashMap::<Symbol, usize>::default();\n "}, {"sha": "7ee0fb9b817caab2fb49c397160484abc5248156", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -376,9 +376,13 @@ fn get_test_runner(\n     match &*meta_list {\n         [single] => match single.meta_item() {\n             Some(meta_item) if meta_item.is_word() => return Some(meta_item.path.clone()),\n-            _ => sd.struct_span_err(span, \"`test_runner` argument must be a path\").emit(),\n+            _ => {\n+                sd.struct_span_err(span, \"`test_runner` argument must be a path\").emit();\n+            }\n         },\n-        _ => sd.struct_span_err(span, \"`#![test_runner(..)]` accepts exactly 1 argument\").emit(),\n+        _ => {\n+            sd.struct_span_err(span, \"`#![test_runner(..)]` accepts exactly 1 argument\").emit();\n+        }\n     }\n     None\n }"}, {"sha": "55ea0c4d7270607a3272a945214b9655206404c8", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1753,7 +1753,7 @@ impl SharedEmitterMain {\n                     let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg);\n \n                     let mut err = match level {\n-                        Level::Error { lint: false } => sess.struct_err(&msg),\n+                        Level::Error { lint: false } => sess.struct_err(&msg).forget_guarantee(),\n                         Level::Warning => sess.struct_warn(&msg),\n                         Level::Note => sess.struct_note_without_error(&msg),\n                         _ => bug!(\"Invalid inline asm diagnostic level\"),"}, {"sha": "3bd092263c13aec01f72892102c50e22b98d047d", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,7 +1,7 @@\n use std::error::Error;\n use std::fmt;\n \n-use rustc_errors::{DiagnosticBuilder, ErrorReported};\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::ty::{layout::LayoutError, query::TyCtxtAt, ConstInt};\n@@ -94,13 +94,13 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         &self,\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n-        emit: impl FnOnce(DiagnosticBuilder<'_>),\n+        decorate: impl FnOnce(&mut Diagnostic),\n     ) -> ErrorHandled {\n-        self.struct_generic(tcx, message, emit, None)\n+        self.struct_generic(tcx, message, decorate, None)\n     }\n \n     pub fn report_as_error(&self, tcx: TyCtxtAt<'tcx>, message: &str) -> ErrorHandled {\n-        self.struct_error(tcx, message, |mut e| e.emit())\n+        self.struct_error(tcx, message, |_| {})\n     }\n \n     pub fn report_as_lint(\n@@ -113,7 +113,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         self.struct_generic(\n             tcx,\n             message,\n-            |mut lint: DiagnosticBuilder<'_>| {\n+            |lint: &mut Diagnostic| {\n                 // Apply the span.\n                 if let Some(span) = span {\n                     let primary_spans = lint.span.primary_spans().to_vec();\n@@ -127,7 +127,6 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                         }\n                     }\n                 }\n-                lint.emit();\n             },\n             Some(lint_root),\n         )\n@@ -136,20 +135,19 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     /// Create a diagnostic for this const eval error.\n     ///\n     /// Sets the message passed in via `message` and adds span labels with detailed error\n-    /// information before handing control back to `emit` to do any final processing.\n-    /// It's the caller's responsibility to call emit(), stash(), etc. within the `emit`\n-    /// function to dispose of the diagnostic properly.\n+    /// information before handing control back to `decorate` to do any final annotations,\n+    /// after which the diagnostic is emitted.\n     ///\n     /// If `lint_root.is_some()` report it as a lint, else report it as a hard error.\n     /// (Except that for some errors, we ignore all that -- see `must_error` below.)\n     fn struct_generic(\n         &self,\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n-        emit: impl FnOnce(DiagnosticBuilder<'_>),\n+        decorate: impl FnOnce(&mut Diagnostic),\n         lint_root: Option<hir::HirId>,\n     ) -> ErrorHandled {\n-        let finish = |mut err: DiagnosticBuilder<'_>, span_msg: Option<String>| {\n+        let finish = |err: &mut Diagnostic, span_msg: Option<String>| {\n             trace!(\"reporting const eval failure at {:?}\", self.span);\n             if let Some(span_msg) = span_msg {\n                 err.span_label(self.span, span_msg);\n@@ -188,8 +186,8 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 }\n                 flush_last_line(last_frame, times);\n             }\n-            // Let the caller finish the job.\n-            emit(err)\n+            // Let the caller attach any additional information it wants.\n+            decorate(err);\n         };\n \n         // Special handling for certain errors\n@@ -206,8 +204,9 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 // The `message` makes little sense here, this is a more serious error than the\n                 // caller thinks anyway.\n                 // See <https://github.com/rust-lang/rust/pull/63152>.\n-                finish(struct_error(tcx, &self.error.to_string()), None);\n-                return ErrorHandled::Reported(ErrorReported);\n+                let mut err = struct_error(tcx, &self.error.to_string());\n+                finish(&mut err, None);\n+                return ErrorHandled::Reported(err.emit());\n             }\n             _ => {}\n         };\n@@ -223,13 +222,18 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 rustc_session::lint::builtin::CONST_ERR,\n                 hir_id,\n                 tcx.span,\n-                |lint| finish(lint.build(message), Some(err_msg)),\n+                |lint| {\n+                    let mut lint = lint.build(message);\n+                    finish(&mut lint, Some(err_msg));\n+                    lint.emit();\n+                },\n             );\n             ErrorHandled::Linted\n         } else {\n             // Report as hard error.\n-            finish(struct_error(tcx, message), Some(err_msg));\n-            ErrorHandled::Reported(ErrorReported)\n+            let mut err = struct_error(tcx, message);\n+            finish(&mut err, Some(err_msg));\n+            ErrorHandled::Reported(err.emit())\n         }\n     }\n }"}, {"sha": "dad572741049b1aac840648f1865fb5418a068ff", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -361,7 +361,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                 Err(err.struct_error(\n                     ecx.tcx,\n                     \"it is undefined behavior to use this value\",\n-                    |mut diag| {\n+                    |diag| {\n                         diag.note(note_on_undefined_behavior_error());\n                         diag.note(&format!(\n                             \"the raw bytes of the constant ({}\",\n@@ -370,7 +370,6 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                                 ecx.tcx.global_alloc(alloc_id).unwrap_memory()\n                             )\n                         ));\n-                        diag.emit();\n                     },\n                 ))\n             } else {"}, {"sha": "5738b38d443a0e31d15b2791cfab3e889f4f7c0d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 136, "deletions": 28, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,6 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -47,7 +47,11 @@ pub trait NonConstOp<'tcx>: std::fmt::Debug {\n         DiagnosticImportance::Primary\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n }\n \n #[derive(Debug)]\n@@ -61,7 +65,11 @@ impl<'tcx> NonConstOp<'tcx> for FloatingPointOp {\n         }\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_floating_point_arithmetic,\n@@ -75,7 +83,11 @@ impl<'tcx> NonConstOp<'tcx> for FloatingPointOp {\n #[derive(Debug)]\n pub struct FnCallIndirect;\n impl<'tcx> NonConstOp<'tcx> for FnCallIndirect {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\")\n     }\n }\n@@ -91,7 +103,11 @@ pub struct FnCallNonConst<'tcx> {\n }\n \n impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, _: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        _: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let FnCallNonConst { caller, callee, substs, span, from_hir_call } = *self;\n         let ConstCx { tcx, param_env, .. } = *ccx;\n \n@@ -312,7 +328,11 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n pub struct FnCallUnstable(pub DefId, pub Option<Symbol>);\n \n impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let FnCallUnstable(def_id, feature) = *self;\n \n         let mut err = ccx.tcx.sess.struct_span_err(\n@@ -346,7 +366,11 @@ impl<'tcx> NonConstOp<'tcx> for FnPtrCast {\n         }\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_fn_ptr_basics,\n@@ -367,7 +391,11 @@ impl<'tcx> NonConstOp<'tcx> for Generator {\n         }\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let msg = format!(\"{}s are not allowed in {}s\", self.0, ccx.const_kind());\n         if let hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) = self.0 {\n             feature_err(&ccx.tcx.sess.parse_sess, sym::const_async_blocks, span, &msg)\n@@ -380,7 +408,11 @@ impl<'tcx> NonConstOp<'tcx> for Generator {\n #[derive(Debug)]\n pub struct HeapAllocation;\n impl<'tcx> NonConstOp<'tcx> for HeapAllocation {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -404,7 +436,11 @@ impl<'tcx> NonConstOp<'tcx> for HeapAllocation {\n #[derive(Debug)]\n pub struct InlineAsm;\n impl<'tcx> NonConstOp<'tcx> for InlineAsm {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -420,7 +456,11 @@ pub struct LiveDrop {\n     pub dropped_at: Option<Span>,\n }\n impl<'tcx> NonConstOp<'tcx> for LiveDrop {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -448,7 +488,11 @@ impl<'tcx> NonConstOp<'tcx> for TransientCellBorrow {\n         // not additionally emit a feature gate error if activating the feature gate won't work.\n         DiagnosticImportance::Secondary\n     }\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_refs_to_cell,\n@@ -464,7 +508,11 @@ impl<'tcx> NonConstOp<'tcx> for TransientCellBorrow {\n /// it in the future for static items.\n pub struct CellBorrow;\n impl<'tcx> NonConstOp<'tcx> for CellBorrow {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -511,7 +559,11 @@ impl<'tcx> NonConstOp<'tcx> for MutBorrow {\n         DiagnosticImportance::Secondary\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let raw = match self.0 {\n             hir::BorrowKind::Raw => \"raw \",\n             hir::BorrowKind::Ref => \"\",\n@@ -550,7 +602,11 @@ impl<'tcx> NonConstOp<'tcx> for TransientMutBorrow {\n         Status::Unstable(sym::const_mut_refs)\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let raw = match self.0 {\n             hir::BorrowKind::Raw => \"raw \",\n             hir::BorrowKind::Ref => \"\",\n@@ -577,7 +633,11 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n         DiagnosticImportance::Secondary\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n@@ -591,7 +651,11 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n #[derive(Debug)]\n pub struct PanicNonStr;\n impl<'tcx> NonConstOp<'tcx> for PanicNonStr {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         ccx.tcx.sess.struct_span_err(\n             span,\n             \"argument to `panic!()` in a const context must have type `&str`\",\n@@ -605,7 +669,11 @@ impl<'tcx> NonConstOp<'tcx> for PanicNonStr {\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl<'tcx> NonConstOp<'tcx> for RawPtrComparison {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = ccx\n             .tcx\n             .sess\n@@ -625,7 +693,11 @@ impl<'tcx> NonConstOp<'tcx> for RawMutPtrDeref {\n         Status::Unstable(sym::const_mut_refs)\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n@@ -641,7 +713,11 @@ impl<'tcx> NonConstOp<'tcx> for RawMutPtrDeref {\n #[derive(Debug)]\n pub struct RawPtrToIntCast;\n impl<'tcx> NonConstOp<'tcx> for RawPtrToIntCast {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = ccx\n             .tcx\n             .sess\n@@ -666,7 +742,11 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n         }\n     }\n \n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -692,7 +772,11 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n #[derive(Debug)]\n pub struct ThreadLocalAccess;\n impl<'tcx> NonConstOp<'tcx> for ThreadLocalAccess {\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+    fn build_error(\n+        &self,\n+        ccx: &ConstCx<'_, 'tcx>,\n+        span: Span,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -723,7 +807,11 @@ pub mod ty {\n             }\n         }\n \n-        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        fn build_error(\n+            &self,\n+            ccx: &ConstCx<'_, 'tcx>,\n+            span: Span,\n+        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n@@ -753,7 +841,11 @@ pub mod ty {\n             }\n         }\n \n-        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        fn build_error(\n+            &self,\n+            ccx: &ConstCx<'_, 'tcx>,\n+            span: Span,\n+        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_fn_ptr_basics,\n@@ -770,7 +862,11 @@ pub mod ty {\n             Status::Unstable(sym::const_impl_trait)\n         }\n \n-        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        fn build_error(\n+            &self,\n+            ccx: &ConstCx<'_, 'tcx>,\n+            span: Span,\n+        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_impl_trait,\n@@ -800,7 +896,11 @@ pub mod ty {\n             }\n         }\n \n-        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        fn build_error(\n+            &self,\n+            ccx: &ConstCx<'_, 'tcx>,\n+            span: Span,\n+        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n             let mut err = feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_trait_bound,\n@@ -839,7 +939,11 @@ pub mod ty {\n             }\n         }\n \n-        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        fn build_error(\n+            &self,\n+            ccx: &ConstCx<'_, 'tcx>,\n+            span: Span,\n+        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n             let mut err = feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_trait_bound,\n@@ -866,7 +970,11 @@ pub mod ty {\n             Status::Unstable(sym::const_trait_bound_opt_out)\n         }\n \n-        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        fn build_error(\n+            &self,\n+            ccx: &ConstCx<'_, 'tcx>,\n+            span: Span,\n+        ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_trait_bound_opt_out,"}, {"sha": "49305d22684176e93da3578977b957c2de43dcc7", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 170, "deletions": 64, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,9 +1,10 @@\n-use crate::{Diagnostic, DiagnosticId, DiagnosticStyledString};\n+use crate::{Diagnostic, DiagnosticId, DiagnosticStyledString, ErrorReported};\n use crate::{Handler, Level, StashKey};\n use rustc_lint_defs::Applicability;\n \n use rustc_span::{MultiSpan, Span};\n use std::fmt::{self, Debug};\n+use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n use tracing::debug;\n@@ -15,7 +16,24 @@ use tracing::debug;\n /// extending `HandlerFlags`, accessed via `self.handler.flags`.\n #[must_use]\n #[derive(Clone)]\n-pub struct DiagnosticBuilder<'a> {\n+pub struct DiagnosticBuilder<'a, G: EmissionGuarantee> {\n+    inner: DiagnosticBuilderInner<'a>,\n+    _marker: PhantomData<G>,\n+}\n+\n+/// This type exists only for `DiagnosticBuilder::forget_guarantee`, because it:\n+/// 1. lacks the `G` parameter and therefore `DiagnosticBuilder<G1>` can be\n+///    converted into `DiagnosticBuilder<G2>` while reusing the `inner` field\n+/// 2. can implement the `Drop` \"bomb\" instead of `DiagnosticBuilder`, as it\n+///    contains all of the data (`state` + `diagnostic`) of `DiagnosticBuilder`\n+///\n+/// The `diagnostic` field is not `Copy` and can't be moved out of whichever\n+/// type implements the `Drop` \"bomb\", but because of the above two facts, that\n+/// never needs to happen - instead, the whole `inner: DiagnosticBuilderInner`\n+/// can be moved out of a `DiagnosticBuilder` and into another.\n+#[must_use]\n+#[derive(Clone)]\n+struct DiagnosticBuilderInner<'a> {\n     state: DiagnosticBuilderState<'a>,\n \n     /// `Diagnostic` is a large type, and `DiagnosticBuilder` is often used as a\n@@ -38,8 +56,8 @@ enum DiagnosticBuilderState<'a> {\n     /// assumed that `.emit()` was previously called, to end up in this state.\n     ///\n     /// While this is also used by `.cancel()`, this state is only observed by\n-    /// the `Drop` `impl` of `DiagnosticBuilder`, as `.cancel()` takes `self`\n-    /// by-value specifically to prevent any attempts to `.emit()`.\n+    /// the `Drop` `impl` of `DiagnosticBuilderInner`, as `.cancel()` takes\n+    /// `self` by-value specifically to prevent any attempts to `.emit()`.\n     ///\n     // FIXME(eddyb) currently this doesn't prevent extending the `Diagnostic`,\n     // despite that being potentially lossy, if important information is added\n@@ -53,6 +71,133 @@ rustc_data_structures::static_assert_size!(\n     std::mem::size_of::<&Handler>()\n );\n \n+/// Trait for types that `DiagnosticBuilder::emit` can return as a \"guarantee\"\n+/// (or \"proof\") token that the emission happened.\n+pub trait EmissionGuarantee: Sized {\n+    /// Implementation of `DiagnosticBuilder::emit`, fully controlled by each\n+    /// `impl` of `EmissionGuarantee`, to make it impossible to create a value\n+    /// of `Self` without actually performing the emission.\n+    #[track_caller]\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self;\n+}\n+\n+/// Private module for sealing the `IsError` helper trait.\n+mod sealed_level_is_error {\n+    use crate::Level;\n+\n+    /// Sealed helper trait for statically checking that a `Level` is an error.\n+    crate trait IsError<const L: Level> {}\n+\n+    impl IsError<{ Level::Bug }> for () {}\n+    impl IsError<{ Level::DelayedBug }> for () {}\n+    impl IsError<{ Level::Fatal }> for () {}\n+    // NOTE(eddyb) `Level::Error { lint: true }` is also an error, but lints\n+    // don't need error guarantees, as their levels are always dynamic.\n+    impl IsError<{ Level::Error { lint: false } }> for () {}\n+}\n+\n+impl<'a> DiagnosticBuilder<'a, ErrorReported> {\n+    /// Convenience function for internal use, clients should use one of the\n+    /// `struct_*` methods on [`Handler`].\n+    crate fn new_guaranteeing_error<const L: Level>(handler: &'a Handler, message: &str) -> Self\n+    where\n+        (): sealed_level_is_error::IsError<L>,\n+    {\n+        Self {\n+            inner: DiagnosticBuilderInner {\n+                state: DiagnosticBuilderState::Emittable(handler),\n+                diagnostic: Box::new(Diagnostic::new_with_code(L, None, message)),\n+            },\n+            _marker: PhantomData,\n+        }\n+    }\n+\n+    /// Discard the guarantee `.emit()` would return, in favor of having the\n+    /// type `DiagnosticBuilder<'a, ()>`. This may be necessary whenever there\n+    /// is a common codepath handling both errors and warnings.\n+    pub fn forget_guarantee(self) -> DiagnosticBuilder<'a, ()> {\n+        DiagnosticBuilder { inner: self.inner, _marker: PhantomData }\n+    }\n+}\n+\n+// FIXME(eddyb) make `ErrorReported` impossible to create outside `.emit()`.\n+impl EmissionGuarantee for ErrorReported {\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n+        match db.inner.state {\n+            // First `.emit()` call, the `&Handler` is still available.\n+            DiagnosticBuilderState::Emittable(handler) => {\n+                db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+\n+                handler.emit_diagnostic(&db.inner.diagnostic);\n+\n+                // Only allow a guarantee if the `level` wasn't switched to a\n+                // non-error - the field isn't `pub`, but the whole `Diagnostic`\n+                // can be overwritten with a new one, thanks to `DerefMut`.\n+                assert!(\n+                    db.inner.diagnostic.is_error(),\n+                    \"emitted non-error ({:?}) diagnostic \\\n+                     from `DiagnosticBuilder<ErrorReported>`\",\n+                    db.inner.diagnostic.level,\n+                );\n+                ErrorReported\n+            }\n+            // `.emit()` was previously called, disallowed from repeating it,\n+            // but can take advantage of the previous `.emit()`'s guarantee\n+            // still being applicable (i.e. as a form of idempotency).\n+            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {\n+                // Only allow a guarantee if the `level` wasn't switched to a\n+                // non-error - the field isn't `pub`, but the whole `Diagnostic`\n+                // can be overwritten with a new one, thanks to `DerefMut`.\n+                assert!(\n+                    db.inner.diagnostic.is_error(),\n+                    \"`DiagnosticBuilder<ErrorReported>`'s diagnostic \\\n+                     became non-error ({:?}), after original `.emit()`\",\n+                    db.inner.diagnostic.level,\n+                );\n+                ErrorReported\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a> DiagnosticBuilder<'a, ()> {\n+    /// Convenience function for internal use, clients should use one of the\n+    /// `struct_*` methods on [`Handler`].\n+    crate fn new(handler: &'a Handler, level: Level, message: &str) -> Self {\n+        let diagnostic = Diagnostic::new_with_code(level, None, message);\n+        Self::new_diagnostic(handler, diagnostic)\n+    }\n+\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    crate fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> Self {\n+        debug!(\"Created new diagnostic\");\n+        Self {\n+            inner: DiagnosticBuilderInner {\n+                state: DiagnosticBuilderState::Emittable(handler),\n+                diagnostic: Box::new(diagnostic),\n+            },\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+// FIXME(eddyb) should there be a `Option<ErrorReported>` impl as well?\n+impl EmissionGuarantee for () {\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n+        match db.inner.state {\n+            // First `.emit()` call, the `&Handler` is still available.\n+            DiagnosticBuilderState::Emittable(handler) => {\n+                db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+\n+                handler.emit_diagnostic(&db.inner.diagnostic);\n+            }\n+            // `.emit()` was previously called, disallowed from repeating it.\n+            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n+        }\n+    }\n+}\n+\n /// In general, the `DiagnosticBuilder` uses deref to allow access to\n /// the fields and methods of the embedded `diagnostic` in a\n /// transparent way. *However,* many of the methods are intended to\n@@ -83,52 +228,43 @@ macro_rules! forward {\n         $(#[$attrs])*\n         #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n-            self.diagnostic.$n($($name),*);\n+            self.inner.diagnostic.$n($($name),*);\n             self\n         }\n     };\n }\n \n-impl<'a> Deref for DiagnosticBuilder<'a> {\n+impl<G: EmissionGuarantee> Deref for DiagnosticBuilder<'_, G> {\n     type Target = Diagnostic;\n \n     fn deref(&self) -> &Diagnostic {\n-        &self.diagnostic\n+        &self.inner.diagnostic\n     }\n }\n \n-impl<'a> DerefMut for DiagnosticBuilder<'a> {\n+impl<G: EmissionGuarantee> DerefMut for DiagnosticBuilder<'_, G> {\n     fn deref_mut(&mut self) -> &mut Diagnostic {\n-        &mut self.diagnostic\n+        &mut self.inner.diagnostic\n     }\n }\n \n-impl<'a> DiagnosticBuilder<'a> {\n+impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     /// Emit the diagnostic.\n-    pub fn emit(&mut self) {\n-        match self.state {\n-            // First `.emit()` call, the `&Handler` is still available.\n-            DiagnosticBuilderState::Emittable(handler) => {\n-                handler.emit_diagnostic(&self);\n-                self.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n-            }\n-            // `.emit()` was previously called, disallowed from repeating it.\n-            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {\n-                // FIXME(eddyb) rely on this to return a \"proof\" that an error\n-                // was/will be emitted, despite doing no emission *here and now*.\n-            }\n-        }\n+    #[track_caller]\n+    pub fn emit(&mut self) -> G {\n+        G::diagnostic_builder_emit_producing_guarantee(self)\n     }\n \n     /// Emit the diagnostic unless `delay` is true,\n     /// in which case the emission will be delayed as a bug.\n     ///\n     /// See `emit` and `delay_as_bug` for details.\n-    pub fn emit_unless(&mut self, delay: bool) {\n+    #[track_caller]\n+    pub fn emit_unless(&mut self, delay: bool) -> G {\n         if delay {\n             self.downgrade_to_delayed_bug();\n         }\n-        self.emit();\n+        self.emit()\n     }\n \n     /// Cancel the diagnostic (a structured diagnostic must either be emitted or\n@@ -138,7 +274,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// which may be expected to *guarantee* the emission of an error, either\n     /// at the time of the call, or through a prior `.emit()` call.\n     pub fn cancel(mut self) {\n-        self.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+        self.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n         drop(self);\n     }\n \n@@ -156,7 +292,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// Converts the builder to a `Diagnostic` for later emission,\n     /// unless handler has disabled such buffering, or `.emit()` was called.\n     pub fn into_diagnostic(mut self) -> Option<(Diagnostic, &'a Handler)> {\n-        let handler = match self.state {\n+        let handler = match self.inner.state {\n             // No `.emit()` calls, the `&Handler` is still available.\n             DiagnosticBuilderState::Emittable(handler) => handler,\n             // `.emit()` was previously called, nothing we can do.\n@@ -172,7 +308,7 @@ impl<'a> DiagnosticBuilder<'a> {\n \n         // Take the `Diagnostic` by replacing it with a dummy.\n         let dummy = Diagnostic::new(Level::Allow, \"\");\n-        let diagnostic = std::mem::replace(&mut *self.diagnostic, dummy);\n+        let diagnostic = std::mem::replace(&mut *self.inner.diagnostic, dummy);\n \n         // Disable the ICE on `Drop`.\n         self.cancel();\n@@ -347,57 +483,27 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn set_primary_message(&mut self, msg: impl Into<String>) -> &mut Self);\n     forward!(pub fn set_span(&mut self, sp: impl Into<MultiSpan>) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n-\n-    /// Convenience function for internal use, clients should use one of the\n-    /// `struct_*` methods on [`Handler`].\n-    crate fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n-        DiagnosticBuilder::new_with_code(handler, level, None, message)\n-    }\n-\n-    /// Convenience function for internal use, clients should use one of the\n-    /// `struct_*` methods on [`Handler`].\n-    crate fn new_with_code(\n-        handler: &'a Handler,\n-        level: Level,\n-        code: Option<DiagnosticId>,\n-        message: &str,\n-    ) -> DiagnosticBuilder<'a> {\n-        let diagnostic = Diagnostic::new_with_code(level, code, message);\n-        DiagnosticBuilder::new_diagnostic(handler, diagnostic)\n-    }\n-\n-    /// Creates a new `DiagnosticBuilder` with an already constructed\n-    /// diagnostic.\n-    crate fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n-        debug!(\"Created new diagnostic\");\n-        DiagnosticBuilder {\n-            state: DiagnosticBuilderState::Emittable(handler),\n-            diagnostic: Box::new(diagnostic),\n-        }\n-    }\n }\n \n-impl<'a> Debug for DiagnosticBuilder<'a> {\n+impl<G: EmissionGuarantee> Debug for DiagnosticBuilder<'_, G> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.diagnostic.fmt(f)\n+        self.inner.diagnostic.fmt(f)\n     }\n }\n \n /// Destructor bomb - a `DiagnosticBuilder` must be either emitted or cancelled\n /// or we emit a bug.\n-impl<'a> Drop for DiagnosticBuilder<'a> {\n+impl Drop for DiagnosticBuilderInner<'_> {\n     fn drop(&mut self) {\n         match self.state {\n             // No `.emit()` or `.cancel()` calls.\n             DiagnosticBuilderState::Emittable(handler) => {\n                 if !panicking() {\n-                    let mut db = DiagnosticBuilder::new(\n-                        handler,\n+                    handler.emit_diagnostic(&Diagnostic::new(\n                         Level::Bug,\n                         \"the following error was constructed but not emitted\",\n-                    );\n-                    db.emit();\n-                    handler.emit_diagnostic(&self);\n+                    ));\n+                    handler.emit_diagnostic(&self.diagnostic);\n                     panic!();\n                 }\n             }"}, {"sha": "463308c27b25a92e62d9fbe3b951fab1970f41e6", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -9,6 +9,8 @@\n #![feature(let_else)]\n #![feature(nll)]\n #![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -52,7 +54,7 @@ mod snippet;\n mod styled_buffer;\n pub use snippet::Style;\n \n-pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n+pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorReported>>;\n \n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n // (See also the comment on `DiagnosticBuilder`'s `diagnostic` field.)\n@@ -609,7 +611,7 @@ impl Handler {\n     }\n \n     /// Steal a previously stashed diagnostic with the given `Span` and `StashKey` as the key.\n-    pub fn steal_diagnostic(&self, span: Span, key: StashKey) -> Option<DiagnosticBuilder<'_>> {\n+    pub fn steal_diagnostic(&self, span: Span, key: StashKey) -> Option<DiagnosticBuilder<'_, ()>> {\n         self.inner\n             .borrow_mut()\n             .stashed_diagnostics\n@@ -627,7 +629,11 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n-    pub fn struct_span_warn(&self, span: impl Into<MultiSpan>, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_span_warn(\n+        &self,\n+        span: impl Into<MultiSpan>,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_, ()> {\n         let mut result = self.struct_warn(msg);\n         result.set_span(span);\n         result\n@@ -638,7 +644,7 @@ impl Handler {\n         &self,\n         span: impl Into<MultiSpan>,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ()> {\n         let mut result = self.struct_allow(msg);\n         result.set_span(span);\n         result\n@@ -651,7 +657,7 @@ impl Handler {\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ()> {\n         let mut result = self.struct_span_warn(span, msg);\n         result.code(code);\n         result\n@@ -662,17 +668,21 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n-    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning, msg)\n     }\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n-    pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n-    pub fn struct_span_err(&self, span: impl Into<MultiSpan>, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_span_err(\n+        &self,\n+        span: impl Into<MultiSpan>,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         let mut result = self.struct_err(msg);\n         result.set_span(span);\n         result\n@@ -684,26 +694,30 @@ impl Handler {\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         let mut result = self.struct_span_err(span, msg);\n         result.code(code);\n         result\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n-        DiagnosticBuilder::new(self, Level::Error { lint: false }, msg)\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n+        DiagnosticBuilder::new_guaranteeing_error::<{ Level::Error { lint: false } }>(self, msg)\n     }\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors.\n     #[doc(hidden)]\n-    pub fn struct_err_lint(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_err_lint(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Error { lint: true }, msg)\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n-    pub fn struct_err_with_code(&self, msg: &str, code: DiagnosticId) -> DiagnosticBuilder<'_> {\n+    pub fn struct_err_with_code(\n+        &self,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         let mut result = self.struct_err(msg);\n         result.code(code);\n         result\n@@ -714,7 +728,7 @@ impl Handler {\n         &self,\n         span: impl Into<MultiSpan>,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         let mut result = self.struct_fatal(msg);\n         result.set_span(span);\n         result\n@@ -726,24 +740,24 @@ impl Handler {\n         span: impl Into<MultiSpan>,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         let mut result = self.struct_span_fatal(span, msg);\n         result.code(code);\n         result\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n-    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n-        DiagnosticBuilder::new(self, Level::Fatal, msg)\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n+        DiagnosticBuilder::new_guaranteeing_error::<{ Level::Fatal }>(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`.\n-    pub fn struct_help(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_help(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n     /// Construct a builder at the `Note` level with the `msg`.\n-    pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Note, msg)\n     }\n \n@@ -804,7 +818,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new(Note, msg), span);\n     }\n \n-    pub fn span_note_diag(&self, span: Span, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn span_note_diag(&self, span: Span, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.set_span(span);\n         db\n@@ -1222,7 +1236,7 @@ impl DelayedDiagnostic {\n     }\n }\n \n-#[derive(Copy, PartialEq, Clone, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, PartialEq, Eq, Clone, Hash, Debug, Encodable, Decodable)]\n pub enum Level {\n     Bug,\n     DelayedBug,"}, {"sha": "4e951ad9d4b6d062df5d58f86ec28c7bdee516e2", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported, PResult};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -1072,7 +1072,11 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expansion_cause()\n     }\n \n-    pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         self.sess.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n \n@@ -1130,11 +1134,7 @@ impl<'a> ExtCtxt<'a> {\n     /// This unifies the logic used for resolving `include_X!`.\n     ///\n     /// FIXME: move this to `rustc_builtin_macros` and make it private.\n-    pub fn resolve_path(\n-        &self,\n-        path: impl Into<PathBuf>,\n-        span: Span,\n-    ) -> Result<PathBuf, DiagnosticBuilder<'a>> {\n+    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PResult<'a, PathBuf> {\n         let path = path.into();\n \n         // Relative paths are resolved relative to the file in which they are found\n@@ -1174,7 +1174,7 @@ pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a>, bool)>> {\n+) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a, ErrorReported>, bool)>> {\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();\n@@ -1233,7 +1233,9 @@ pub fn check_zero_tts(cx: &ExtCtxt<'_>, sp: Span, tts: TokenStream, name: &str)\n pub fn parse_expr(p: &mut parser::Parser<'_>) -> Option<P<ast::Expr>> {\n     match p.parse_expr() {\n         Ok(e) => return Some(e),\n-        Err(mut err) => err.emit(),\n+        Err(mut err) => {\n+            err.emit();\n+        }\n     }\n     while p.token != token::Eof {\n         p.bump();"}, {"sha": "4af7d2b7ec6fd1905faeba009795b4ebc0d759e2", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -62,7 +62,7 @@ crate fn annotate_err_with_kind(err: &mut Diagnostic, kind: AstFragmentKind, spa\n }\n \n fn emit_frag_parse_err(\n-    mut e: DiagnosticBuilder<'_>,\n+    mut e: DiagnosticBuilder<'_, rustc_errors::ErrorReported>,\n     parser: &Parser<'_>,\n     orig_parser: &mut Parser<'_>,\n     site_span: Span,"}, {"sha": "1ce3766579bd9f1e4990a9f804bc8ac6c7eb6250", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,7 +1,7 @@\n use crate::base::ModuleData;\n use rustc_ast::ptr::P;\n use rustc_ast::{token, Attribute, Inline, Item};\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n use rustc_parse::new_parser_from_file;\n use rustc_parse::validate_attr;\n use rustc_session::parse::ParseSess;\n@@ -39,7 +39,7 @@ pub enum ModError<'a> {\n     ModInBlock(Option<Ident>),\n     FileNotFound(Ident, PathBuf, PathBuf),\n     MultipleCandidates(Ident, PathBuf, PathBuf),\n-    ParserError(DiagnosticBuilder<'a>),\n+    ParserError(DiagnosticBuilder<'a, ErrorReported>),\n }\n \n crate fn parse_external_mod(\n@@ -242,7 +242,7 @@ pub fn default_submod_path<'a>(\n }\n \n impl ModError<'_> {\n-    fn report(self, sess: &Session, span: Span) {\n+    fn report(self, sess: &Session, span: Span) -> ErrorReported {\n         let diag = &sess.parse_sess.span_diagnostic;\n         match self {\n             ModError::CircularInclusion(file_paths) => {"}, {"sha": "869cada400f0fe8069b8cfffb034c3e4c104c266", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -446,7 +446,9 @@ impl server::TokenStream for Rustc<'_, '_> {\n             }\n             expr\n         };\n-        let expr = expr.map_err(|mut err| err.emit())?;\n+        let expr = expr.map_err(|mut err| {\n+            err.emit();\n+        })?;\n \n         // Perform eager expansion on the expression.\n         let expr = self"}, {"sha": "9da287c959a441435a6a402239ed887f9557306b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -58,7 +58,7 @@ use crate::traits::{\n };\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorReported};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -230,7 +230,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     span: Span,\n     hidden_ty: Ty<'tcx>,\n     hidden_region: ty::Region<'tcx>,\n-) -> DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'tcx, ErrorReported> {\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n@@ -2014,7 +2014,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         trace: TypeTrace<'tcx>,\n         terr: &TypeError<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         use crate::traits::ObligationCauseCode::MatchExpressionArm;\n \n         debug!(\"report_and_explain_type_error(trace={:?}, terr={:?})\", trace, terr);\n@@ -2222,7 +2222,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n@@ -2648,7 +2648,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn report_inference_failure(\n         &self,\n         var_origin: RegionVariableOrigin,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let br_string = |br: ty::BoundRegionKind| {\n             let mut s = match br {\n                 ty::BrNamed(_, name) => name.to_string(),"}, {"sha": "8876c3ecd540d51c1aff18e1a839507e6c62052b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,6 +1,8 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::{InferCtxt, Symbol};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n@@ -491,7 +493,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         arg: GenericArg<'tcx>,\n         impl_candidates: Vec<ty::TraitRef<'tcx>>,\n         error_code: TypeAnnotationNeeded,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let arg = self.resolve_vars_if_possible(arg);\n         let arg_data = self.extract_inference_diagnostics_data(arg, None);\n \n@@ -918,7 +920,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         kind: hir::GeneratorKind,\n         span: Span,\n         ty: Ty<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let ty = self.resolve_vars_if_possible(ty);\n         let data = self.extract_inference_diagnostics_data(ty.into(), None);\n "}, {"sha": "a8b878ae344a21024fb57dfe9340c8848b66e241", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -46,7 +46,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'tcx>> {\n+    pub fn try_report_from_nll(&self) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         // Due to the improved diagnostics returned by the MIR borrow checker, only a subset of\n         // the nice region errors are required when running under the MIR borrow checker.\n         self.try_report_named_anon_conflict().or_else(|| self.try_report_placeholder_conflict())"}, {"sha": "825aadaad9a0cf3526223d2ebd02f849fa84a9d6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -2,13 +2,15 @@\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_middle::ty;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with parameters containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n-    pub(super) fn try_report_named_anon_conflict(&self) -> Option<DiagnosticBuilder<'tcx>> {\n+    pub(super) fn try_report_named_anon_conflict(\n+        &self,\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         let (span, sub, sup) = self.regions()?;\n \n         debug!("}, {"sha": "8b786e6e85aaf33e2ad196c65ab8a5858d224641", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -4,7 +4,7 @@ use crate::infer::ValuePairs;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -17,7 +17,9 @@ use std::fmt::{self, Write};\n impl<'tcx> NiceRegionError<'_, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit a descriptive diagnostic error.\n-    pub(super) fn try_report_placeholder_conflict(&self) -> Option<DiagnosticBuilder<'tcx>> {\n+    pub(super) fn try_report_placeholder_conflict(\n+        &self,\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         match &self.error {\n             ///////////////////////////////////////////////////////////////////////////\n             // NB. The ordering of cases in this match is very\n@@ -153,7 +155,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         sub_placeholder: Option<Region<'tcx>>,\n         sup_placeholder: Option<Region<'tcx>>,\n         value_pairs: &ValuePairs<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         let (expected_substs, found_substs, trait_def_id) = match value_pairs {\n             ValuePairs::TraitRefs(ExpectedFound { expected, found })\n                 if expected.def_id == found.def_id =>\n@@ -201,7 +203,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         trait_def_id: DefId,\n         expected_substs: SubstsRef<'tcx>,\n         actual_substs: SubstsRef<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let span = cause.span(self.tcx());\n         let msg = format!(\n             \"implementation of `{}` is not general enough\","}, {"sha": "5dc8c8946085661b7a427902c8684d6589305286", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n-use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         sub: Region<'tcx>,\n         sup: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         match origin {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         placeholder_origin: SubregionOrigin<'tcx>,\n         sub: Region<'tcx>,\n         sup: Region<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         // I can't think how to do better than this right now. -nikomatsakis\n         debug!(?placeholder_origin, ?sub, ?sup, \"report_placeholder_failure\");\n         match placeholder_origin {"}, {"sha": "95608f413d5389bd62be29bc7ff4a1aac5dbec9b", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::Rollback;\n use rustc_data_structures::unify as ut;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n@@ -1475,9 +1475,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         sp: Span,\n         mk_diag: M,\n         actual_ty: Ty<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx>\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported>\n     where\n-        M: FnOnce(String) -> DiagnosticBuilder<'tcx>,\n+        M: FnOnce(String) -> DiagnosticBuilder<'tcx, ErrorReported>,\n     {\n         let actual_ty = self.resolve_vars_if_possible(actual_ty);\n         debug!(\"type_error_struct_with_diag({:?}, {:?})\", sp, actual_ty);\n@@ -1498,7 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         err: TypeError<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let trace = TypeTrace::types(cause, true, expected, actual);\n         self.report_and_explain_type_error(trace, &err)\n     }\n@@ -1509,7 +1509,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         expected: ty::Const<'tcx>,\n         actual: ty::Const<'tcx>,\n         err: TypeError<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let trace = TypeTrace::consts(cause, true, expected, actual);\n         self.report_and_explain_type_error(trace, &err)\n     }"}, {"sha": "35430849290e78982321ae89b8a8dfe817f28fe0", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -2,7 +2,7 @@ use super::ObjectSafetyViolation;\n \n use crate::infer::InferCtxt;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n@@ -17,7 +17,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n         requirement: &dyn fmt::Display,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let msg = \"impl has stricter requirements than trait\";\n         let sp = self.tcx.sess.source_map().guess_head_span(error_span);\n \n@@ -40,7 +40,7 @@ pub fn report_object_safety_error<'tcx>(\n     span: Span,\n     trait_def_id: DefId,\n     violations: &[ObjectSafetyViolation],\n-) -> DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'tcx, ErrorReported> {\n     let trait_str = tcx.def_path_str(trait_def_id);\n     let trait_span = tcx.hir().get_if_local(trait_def_id).and_then(|node| match node {\n         hir::Node::Item(item) => Some(item.ident.span),"}, {"sha": "c93028d621ed7f73a273e5e8397a5f99f771c9b8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -319,14 +319,15 @@ impl LintStore {\n     ) {\n         let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n         if lint_name_only == crate::WARNINGS.name_lower() && level == Level::ForceWarn {\n-            return struct_span_err!(\n+            struct_span_err!(\n                 sess,\n                 DUMMY_SP,\n                 E0602,\n                 \"`{}` lint group is not supported with \u00b4--force-warn\u00b4\",\n                 crate::WARNINGS.name_lower()\n             )\n             .emit();\n+            return;\n         }\n         let db = match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n             CheckLintNameResult::Ok(_) => None,\n@@ -339,7 +340,7 @@ impl LintStore {\n                     err.help(&format!(\"did you mean: `{}`\", suggestion));\n                 }\n \n-                Some(err)\n+                Some(err.forget_guarantee())\n             }\n             CheckLintNameResult::Tool(result) => match result {\n                 Err((Some(_), new_name)) => Some(sess.struct_warn(&format!(\n@@ -350,13 +351,16 @@ impl LintStore {\n                 ))),\n                 _ => None,\n             },\n-            CheckLintNameResult::NoTool => Some(struct_span_err!(\n-                sess,\n-                DUMMY_SP,\n-                E0602,\n-                \"unknown lint tool: `{}`\",\n-                tool_name.unwrap()\n-            )),\n+            CheckLintNameResult::NoTool => Some(\n+                struct_span_err!(\n+                    sess,\n+                    DUMMY_SP,\n+                    E0602,\n+                    \"unknown lint tool: `{}`\",\n+                    tool_name.unwrap()\n+                )\n+                .forget_guarantee(),\n+            ),\n         };\n \n         if let Some(mut db) = db {"}, {"sha": "d7cdb08d81714c3cc940832ebd96a23784775e1c", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -3,7 +3,7 @@ use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n@@ -150,48 +150,49 @@ impl<'s> LintLevelsBuilder<'s> {\n                     fcw_warning, specs, old_src, id_name\n                 );\n \n-                let decorate_diag_builder = |mut diag_builder: DiagnosticBuilder<'_>| {\n-                    diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n+                let decorate_diag = |diag: &mut Diagnostic| {\n+                    diag.span_label(src.span(), \"overruled by previous forbid\");\n                     match old_src {\n                         LintLevelSource::Default => {\n-                            diag_builder.note(&format!(\n+                            diag.note(&format!(\n                                 \"`forbid` lint level is the default for {}\",\n                                 id.to_string()\n                             ));\n                         }\n                         LintLevelSource::Node(_, forbid_source_span, reason) => {\n-                            diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n+                            diag.span_label(forbid_source_span, \"`forbid` level set here\");\n                             if let Some(rationale) = reason {\n-                                diag_builder.note(rationale.as_str());\n+                                diag.note(rationale.as_str());\n                             }\n                         }\n                         LintLevelSource::CommandLine(_, _) => {\n-                            diag_builder.note(\"`forbid` lint level was set on command line\");\n+                            diag.note(\"`forbid` lint level was set on command line\");\n                         }\n                     }\n-                    diag_builder.emit();\n                 };\n                 if !fcw_warning {\n-                    let diag_builder = struct_span_err!(\n+                    let mut diag_builder = struct_span_err!(\n                         self.sess,\n                         src.span(),\n                         E0453,\n                         \"{}({}) incompatible with previous forbid\",\n                         level.as_str(),\n                         src.name(),\n                     );\n-                    decorate_diag_builder(diag_builder);\n+                    decorate_diag(&mut diag_builder);\n+                    diag_builder.emit();\n                 } else {\n                     self.struct_lint(\n                         FORBIDDEN_LINT_GROUPS,\n                         Some(src.span().into()),\n                         |diag_builder| {\n-                            let diag_builder = diag_builder.build(&format!(\n+                            let mut diag_builder = diag_builder.build(&format!(\n                                 \"{}({}) incompatible with previous forbid\",\n                                 level.as_str(),\n                                 src.name(),\n                             ));\n-                            decorate_diag_builder(diag_builder);\n+                            decorate_diag(&mut diag_builder);\n+                            diag_builder.emit();\n                         },\n                     );\n                 }"}, {"sha": "9a7784ca72fc61488549e97bf527142ffac5f4c9", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -232,7 +232,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                 fn into_diagnostic(\n                     self,\n                     #sess: &'__session_diagnostic_sess rustc_session::Session\n-                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess> {\n+                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, rustc_errors::ErrorReported> {\n                     #implementation\n                 }\n             }"}, {"sha": "dce1b35c6b8897084c8ad06384278f9b75ee9590", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -243,7 +243,9 @@ impl Collector<'_> {\n         if matches!(lib.kind, NativeLibKind::Framework { .. }) && !is_osx {\n             let msg = \"native frameworks are only available on macOS targets\";\n             match span {\n-                Some(span) => struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit(),\n+                Some(span) => {\n+                    struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit();\n+                }\n                 None => self.tcx.sess.err(msg),\n             }\n         }"}, {"sha": "35e1558600d5b3fc2b76f37601fea1aacf6d2737", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -186,18 +186,18 @@ impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n     }\n }\n \n-pub struct LintDiagnosticBuilder<'a>(DiagnosticBuilder<'a>);\n+pub struct LintDiagnosticBuilder<'a>(DiagnosticBuilder<'a, ()>);\n \n impl<'a> LintDiagnosticBuilder<'a> {\n     /// Return the inner DiagnosticBuilder, first setting the primary message to `msg`.\n-    pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a, ()> {\n         self.0.set_primary_message(msg);\n         self.0.set_is_lint();\n         self.0\n     }\n \n     /// Create a LintDiagnosticBuilder from some existing DiagnosticBuilder.\n-    pub fn new(err: DiagnosticBuilder<'a>) -> LintDiagnosticBuilder<'a> {\n+    pub fn new(err: DiagnosticBuilder<'a, ()>) -> LintDiagnosticBuilder<'a> {\n         LintDiagnosticBuilder(err)\n     }\n }"}, {"sha": "31468ce73bfc5b4fc162286e3d5ed14c9b2d4bc1", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -36,7 +36,10 @@ TrivialTypeFoldableAndLiftImpls! {\n pub type EvalToAllocationRawResult<'tcx> = Result<ConstAlloc<'tcx>, ErrorHandled>;\n pub type EvalToConstValueResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n \n-pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'tcx> {\n+pub fn struct_error<'tcx>(\n+    tcx: TyCtxtAt<'tcx>,\n+    msg: &str,\n+) -> DiagnosticBuilder<'tcx, ErrorReported> {\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n }\n "}, {"sha": "2663ed9049da93ec455c2face64c6d8cd94574e4", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -6,7 +6,9 @@ use super::{PatCtxt, PatternError};\n \n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n-use rustc_errors::{error_code, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{\n+    error_code, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n@@ -36,7 +38,11 @@ crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     visitor.visit_body(tcx.hir().body(body_id));\n }\n \n-fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBuilder<'_> {\n+fn create_e0004(\n+    sess: &Session,\n+    sp: Span,\n+    error_message: String,\n+) -> DiagnosticBuilder<'_, ErrorReported> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n "}, {"sha": "8731669b10958cae895d4ed66593b20f76e7cfbc", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n         place: &Place<'tcx>,\n         const_item: DefId,\n         location: Location,\n-        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b>,\n+        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b, ()>,\n     ) {\n         // Don't lint on borrowing/assigning when a dereference is involved.\n         // If we 'leave' the temporary via a dereference, we must"}, {"sha": "3212fc39fb9c253e4eeadda60637065d92b7f95b", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -3,7 +3,9 @@ use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n use rustc_ast::util::unicode::contains_text_flow_control_chars;\n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PResult};\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticBuilder, ErrorReported, FatalError, PResult,\n+};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n use rustc_session::lint::builtin::{\n@@ -127,7 +129,7 @@ impl<'a> StringReader<'a> {\n         to_pos: BytePos,\n         m: &str,\n         c: char,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         self.sess\n             .span_diagnostic\n             .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))"}, {"sha": "c7d166319eac8621af1a56109eb99ab1ac4f52c5", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn emit_unescape_error(\n                     c.escape_default().to_string(),\n                     Applicability::MachineApplicable,\n                 )\n-                .emit()\n+                .emit();\n         }\n         EscapeError::BareCarriageReturn => {\n             let msg = if mode.in_double_quotes() {\n@@ -292,16 +292,18 @@ pub(crate) fn emit_unescape_error(\n                 .span_label(span, \"must have at most 6 hex digits\")\n                 .emit();\n         }\n-        EscapeError::UnclosedUnicodeEscape => handler\n-            .struct_span_err(span, \"unterminated unicode escape\")\n-            .span_label(span, \"missing a closing `}`\")\n-            .span_suggestion_verbose(\n-                span.shrink_to_hi(),\n-                \"terminate the unicode escape\",\n-                \"}\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            )\n-            .emit(),\n+        EscapeError::UnclosedUnicodeEscape => {\n+            handler\n+                .struct_span_err(span, \"unterminated unicode escape\")\n+                .span_label(span, \"missing a closing `}`\")\n+                .span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n+                    \"terminate the unicode escape\",\n+                    \"}\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+        }\n         EscapeError::NoBraceInUnicodeEscape => {\n             let msg = \"incorrect unicode escape sequence\";\n             let mut diag = handler.struct_span_err(span, msg);\n@@ -347,7 +349,7 @@ pub(crate) fn emit_unescape_error(\n         }\n         EscapeError::ZeroChars => {\n             let msg = \"empty character literal\";\n-            handler.struct_span_err(span, msg).span_label(span, msg).emit()\n+            handler.struct_span_err(span, msg).span_label(span, msg).emit();\n         }\n         EscapeError::LoneSlash => {\n             let msg = \"invalid trailing slash in literal\";"}, {"sha": "f1c2dcf10e8696b52513690405f01bb06bc65e67", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorReported};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n@@ -53,7 +53,11 @@ pub enum Error {\n }\n \n impl Error {\n-    fn span_err(self, sp: impl Into<MultiSpan>, handler: &Handler) -> DiagnosticBuilder<'_> {\n+    fn span_err(\n+        self,\n+        sp: impl Into<MultiSpan>,\n+        handler: &Handler,\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         match self {\n             Error::UselessDocComment => {\n                 let mut err = struct_span_err!(\n@@ -151,11 +155,19 @@ impl AttemptLocalParseRecovery {\n }\n \n impl<'a> Parser<'a> {\n-    pub(super) fn span_err<S: Into<MultiSpan>>(&self, sp: S, err: Error) -> DiagnosticBuilder<'a> {\n+    pub(super) fn span_err<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        err: Error,\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         err.span_err(sp, self.diagnostic())\n     }\n \n-    pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        m: &str,\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         self.sess.span_diagnostic.struct_span_err(sp, m)\n     }\n \n@@ -171,7 +183,7 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n-    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a> {\n+    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorReported> {\n         let mut err = self.struct_span_err(\n             self.token.span,\n             &format!(\"expected identifier, found {}\", super::token_descr(&self.token)),\n@@ -717,7 +729,7 @@ impl<'a> Parser<'a> {\n     /// encounter a parse error when encountering the first `,`.\n     pub(super) fn check_mistyped_turbofish_with_multiple_type_params(\n         &mut self,\n-        mut e: DiagnosticBuilder<'a>,\n+        mut e: DiagnosticBuilder<'a, ErrorReported>,\n         expr: &mut P<Expr>,\n     ) -> PResult<'a, ()> {\n         if let ExprKind::Binary(binop, _, _) = &expr.kind {\n@@ -1439,7 +1451,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn recover_closing_delimiter(\n         &mut self,\n         tokens: &[TokenKind],\n-        mut err: DiagnosticBuilder<'a>,\n+        mut err: DiagnosticBuilder<'a, ErrorReported>,\n     ) -> PResult<'a, bool> {\n         let mut pos = None;\n         // We want to use the last closing delim that would apply.\n@@ -1810,7 +1822,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn expected_expression_found(&self) -> DiagnosticBuilder<'a> {\n+    pub(super) fn expected_expression_found(&self) -> DiagnosticBuilder<'a, ErrorReported> {\n         let (span, msg) = match (&self.token.kind, self.subparser_name) {\n             (&token::Eof, Some(origin)) => {\n                 let sp = self.sess.source_map().next_point(self.prev_token.span);\n@@ -2016,7 +2028,7 @@ impl<'a> Parser<'a> {\n     pub fn recover_const_arg(\n         &mut self,\n         start: Span,\n-        mut err: DiagnosticBuilder<'a>,\n+        mut err: DiagnosticBuilder<'a, ErrorReported>,\n     ) -> PResult<'a, GenericArg> {\n         let is_op = AssocOp::from_token(&self.token)\n             .and_then(|op| {\n@@ -2096,7 +2108,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn incorrect_move_async_order_found(\n         &self,\n         move_async_span: Span,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         let mut err =\n             self.struct_span_err(move_async_span, \"the order of `move` and `async` is incorrect\");\n         err.span_suggestion_verbose("}, {"sha": "c6919779ffd35e7c1c693c89315377d050c79766", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, PResult};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n@@ -1167,7 +1167,9 @@ impl<'a> Parser<'a> {\n                         return Some(self.mk_expr_err(span));\n                     }\n                     Ok(_) => {}\n-                    Err(mut err) => err.emit(),\n+                    Err(mut err) => {\n+                        err.emit();\n+                    }\n                 }\n             }\n             _ => {}\n@@ -1819,6 +1821,7 @@ impl<'a> Parser<'a> {\n                 err\n             } else {\n                 self.struct_span_err(sp, &format!(\"suffixes on {} are invalid\", kind))\n+                    .forget_guarantee()\n             };\n             err.span_label(sp, format!(\"invalid suffix `{}`\", suf));\n             err.emit();\n@@ -2100,9 +2103,9 @@ impl<'a> Parser<'a> {\n     fn error_missing_if_then_block(\n         &self,\n         if_span: Span,\n-        err: Option<DiagnosticBuilder<'a>>,\n+        err: Option<DiagnosticBuilder<'a, ErrorReported>>,\n         binop_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         let msg = \"this `if` expression has a condition, but no block\";\n \n         let mut err = if let Some(mut err) = err {"}, {"sha": "bd349e89482efbe6e52b875c0ff32f04e8fc3385", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::{EnumDef, FieldDef, Generics, TraitRef, Ty, TyKind, Variant, Vari\n use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported, PResult, StashKey};\n use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n@@ -801,7 +801,7 @@ impl<'a> Parser<'a> {\n         before_where_clause_span: Span,\n         after_predicates: &[WherePredicate],\n         after_where_clause_span: Span,\n-    ) {\n+    ) -> ErrorReported {\n         let mut err =\n             self.struct_span_err(after_where_clause_span, \"where clause not allowed here\");\n         if !after_predicates.is_empty() {"}, {"sha": "d8e6d5037bbd81d79cef0501809b02ac7b89b3aa", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -32,7 +32,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::PResult;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported, FatalError};\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -877,7 +877,7 @@ impl<'a> Parser<'a> {\n     fn recover_missing_braces_around_closure_body(\n         &mut self,\n         closure_spans: ClosureSpans,\n-        mut expect_err: DiagnosticBuilder<'_>,\n+        mut expect_err: DiagnosticBuilder<'_, ErrorReported>,\n     ) -> PResult<'a, ()> {\n         let initial_semicolon = self.token.span;\n \n@@ -1429,7 +1429,7 @@ impl<'a> Parser<'a> {\n crate fn make_unclosed_delims_error(\n     unmatched: UnmatchedBrace,\n     sess: &ParseSess,\n-) -> Option<DiagnosticBuilder<'_>> {\n+) -> Option<DiagnosticBuilder<'_, ErrorReported>> {\n     // `None` here means an `Eof` was found. We already emit those errors elsewhere, we add them to\n     // `unmatched_braces` only for error recovery in the `Parser`.\n     let found_delim = unmatched.found_delim?;"}, {"sha": "d41298711459f961c167b73252ad9dd777365389", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::{\n     PatField, PatKind, Path, QSelf, RangeEnd, RangeSyntax,\n };\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported, PResult};\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n \n@@ -655,7 +655,7 @@ impl<'a> Parser<'a> {\n \n     fn fatal_unexpected_non_pat(\n         &mut self,\n-        err: DiagnosticBuilder<'a>,\n+        err: DiagnosticBuilder<'a, ErrorReported>,\n         expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n         err.cancel();\n@@ -886,7 +886,7 @@ impl<'a> Parser<'a> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut ate_comma = true;\n-        let mut delayed_err: Option<DiagnosticBuilder<'a>> = None;\n+        let mut delayed_err: Option<DiagnosticBuilder<'a, ErrorReported>> = None;\n         let mut etc_span = None;\n \n         while self.token != token::CloseDelim(token::Brace) {"}, {"sha": "6b195285243fd7a7fe9ea1d2f3693a3ff114604a", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -18,7 +18,7 @@ use rustc_ast::{\n };\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n-use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n \n@@ -414,7 +414,10 @@ impl<'a> Parser<'a> {\n         Ok(block)\n     }\n \n-    fn error_block_no_opening_brace_msg(&mut self, msg: &str) -> DiagnosticBuilder<'a> {\n+    fn error_block_no_opening_brace_msg(\n+        &mut self,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         let sp = self.token.span;\n         let mut e = self.struct_span_err(sp, msg);\n         let do_not_suggest_help = self.token.is_keyword(kw::In) || self.token == token::Colon;"}, {"sha": "0b01f9e927f33e77d520e8e8a40fd554e5d5bc44", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -345,7 +345,8 @@ impl<'a> Parser<'a> {\n         let lt_no_plus = self.check_lifetime() && !self.look_ahead(1, |t| t.is_like_plus());\n         let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n         if lt_no_plus {\n-            self.struct_span_err(lo, \"lifetime in trait object type must be followed by `+`\").emit()\n+            self.struct_span_err(lo, \"lifetime in trait object type must be followed by `+`\")\n+                .emit();\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }"}, {"sha": "0786a42fc113a156f008918c454f25937a8f5209", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -2095,7 +2095,7 @@ fn check_invalid_crate_level_attr(tcx: TyCtxt<'_>, attrs: &[Attribute]) {\n                             rustc_errors::Applicability::MachineApplicable,\n                         );\n                     }\n-                    err.emit()\n+                    err.emit();\n                 }\n             }\n         }"}, {"sha": "0fdbdb7b08d0083b80f7a31ac9fb0f160a6266e4", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -219,7 +219,9 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             required_gates.iter().copied().filter(|&g| !features.enabled(g)).collect();\n \n         match missing_gates.as_slice() {\n-            [] => struct_span_err!(tcx.sess, span, E0744, \"{}\", msg).emit(),\n+            [] => {\n+                struct_span_err!(tcx.sess, span, E0744, \"{}\", msg).emit();\n+            }\n \n             [missing_primary, ref missing_secondary @ ..] => {\n                 let mut err = feature_err(&tcx.sess.parse_sess, *missing_primary, span, &msg);"}, {"sha": "b2129ce9f24fc63a149cea3798e4cf194f2de907", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n             err.note(&format!(\"source type: `{}` ({})\", from, skeleton_string(from, sk_from)))\n                 .note(&format!(\"target type: `{}` ({})\", to, skeleton_string(to, sk_to)));\n         }\n-        err.emit()\n+        err.emit();\n     }\n \n     fn is_thin_ptr_ty(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "91b6ea038350793eec9d0635820a3243e4458167", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -7,7 +7,7 @@ use crate::query::caches::QueryCache;\n use crate::query::{QueryCacheStore, QueryContext, QueryState};\n \n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{DiagnosticBuilder, ErrorReported};\n use std::fmt::Debug;\n use std::hash::Hash;\n \n@@ -27,7 +27,7 @@ pub struct QueryVtable<CTX: QueryContext, K, V> {\n \n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n-    pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n+    pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorReported>) -> V,\n     pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n "}, {"sha": "260fc3bff4471968ea5314aaee61d1cd120990c4", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -4,7 +4,7 @@ use crate::query::{QueryContext, QueryStackFrame};\n use rustc_hir::def::DefKind;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorReported, Handler, Level};\n use rustc_session::Session;\n use rustc_span::Span;\n \n@@ -530,7 +530,7 @@ pub fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n pub(crate) fn report_cycle<'a>(\n     sess: &'a Session,\n     CycleError { usage, cycle: stack }: CycleError,\n-) -> DiagnosticBuilder<'a> {\n+) -> DiagnosticBuilder<'a, ErrorReported> {\n     assert!(!stack.is_empty());\n \n     let fix_span = |span: Span, query: &QueryStackFrame| {"}, {"sha": "23df0d4dcd439b81fa203fc144d56ec8a5a5bc29", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::sharded::{get_shard_index_by_hash, Sharded};\n use rustc_data_structures::sync::{Lock, LockGuard};\n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_errors::{DiagnosticBuilder, FatalError};\n+use rustc_errors::{DiagnosticBuilder, ErrorReported, FatalError};\n use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n use std::cell::Cell;\n@@ -143,7 +143,7 @@ where\n fn mk_cycle<CTX, V, R>(\n     tcx: CTX,\n     error: CycleError,\n-    handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n+    handle_cycle_error: fn(CTX, DiagnosticBuilder<'_, ErrorReported>) -> V,\n     cache: &dyn crate::query::QueryStorage<Value = V, Stored = R>,\n ) -> R\n where"}, {"sha": "6a3d998a25838c333623f06ce93008a6ef07eff2", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1068,8 +1068,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             .emit();\n                     }\n                 }\n-                let ill_formed =\n-                    |span| struct_span_err!(self.r.session, span, E0466, \"bad macro import\").emit();\n+                let ill_formed = |span| {\n+                    struct_span_err!(self.r.session, span, E0466, \"bad macro import\").emit();\n+                };\n                 match attr.meta() {\n                     Some(meta) => match meta.kind {\n                         MetaItemKind::Word => {"}, {"sha": "b366473cb30c08c4d312ecc0b508078ac93d775b", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -3,7 +3,7 @@ use std::ptr;\n use rustc_ast::{self as ast, Path};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n@@ -110,7 +110,7 @@ impl<'a> Resolver<'a> {\n         &self,\n         span: Span,\n         resolution_error: ResolutionError<'_>,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         match resolution_error {\n             ResolutionError::GenericParamsFromOuterFunction(outer_res, has_generic_params) => {\n                 let mut err = struct_span_err!(\n@@ -624,7 +624,10 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    crate fn report_vis_error(&self, vis_resolution_error: VisResolutionError<'_>) {\n+    crate fn report_vis_error(\n+        &self,\n+        vis_resolution_error: VisResolutionError<'_>,\n+    ) -> ErrorReported {\n         match vis_resolution_error {\n             VisResolutionError::Relative2018(span, path) => {\n                 let mut err = self.session.struct_span_err("}, {"sha": "b71776c161531ec270f9afe3a3cadd6d2297cfa4", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -12,7 +12,9 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n@@ -133,7 +135,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         span: Span,\n         source: PathSource<'_>,\n         res: Option<Res>,\n-    ) -> (DiagnosticBuilder<'a>, Vec<ImportSuggestion>) {\n+    ) -> (DiagnosticBuilder<'a, ErrorReported>, Vec<ImportSuggestion>) {\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n@@ -1817,7 +1819,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         &self,\n         spans: Vec<Span>,\n         count: usize,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         struct_span_err!(\n             self.tcx.sess,\n             spans,"}, {"sha": "23a8189f62fd83c3e53578623317b71784eb0703", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1572,6 +1572,7 @@ fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: Symbol, orig: Original, shado\n             name,\n             orig.kind.desc()\n         )\n+        .forget_guarantee()\n     } else {\n         // shadowing involving a label is only a warning, due to issues with\n         // labels and lifetimes not being macro-hygienic."}, {"sha": "65431d27638c05e02c1f3b26af4997b386d78317", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -40,7 +40,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n@@ -713,7 +713,7 @@ struct PrivacyError<'a> {\n }\n \n struct UseError<'a> {\n-    err: DiagnosticBuilder<'a>,\n+    err: DiagnosticBuilder<'a, ErrorReported>,\n     /// Candidates which user could `use` to access the missing type.\n     candidates: Vec<ImportSuggestion>,\n     /// The `DefId` of the module to place the use-statements in."}, {"sha": "e287764a52abcc4aaf64420c3df1beac2c419168", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n-use rustc_errors::{error_code, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{error_code, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n@@ -82,7 +82,7 @@ pub fn feature_err<'a>(\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     explain: &str,\n-) -> DiagnosticBuilder<'a> {\n+) -> DiagnosticBuilder<'a, ErrorReported> {\n     feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n@@ -96,7 +96,7 @@ pub fn feature_err_issue<'a>(\n     span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: &str,\n-) -> DiagnosticBuilder<'a> {\n+) -> DiagnosticBuilder<'a, ErrorReported> {\n     let mut err = sess.span_diagnostic.struct_span_err_with_code(span, explain, error_code!(E0658));\n \n     if let Some(n) = find_feature_issue(feature, issue) {"}, {"sha": "b72be735ce485088b1992b4dbd2b84dfb4c5c9df", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -221,7 +221,7 @@ enum DiagnosticBuilderMethod {\n pub trait SessionDiagnostic<'a> {\n     /// Write out as a diagnostic out of `sess`.\n     #[must_use]\n-    fn into_diagnostic(self, sess: &'a Session) -> DiagnosticBuilder<'a>;\n+    fn into_diagnostic(self, sess: &'a Session) -> DiagnosticBuilder<'a, ErrorReported>;\n }\n \n /// Diagnostic message ID, used by `Session.one_time_diagnostics` to avoid\n@@ -303,56 +303,76 @@ impl Session {\n         self.crate_types.set(crate_types).expect(\"`crate_types` was initialized twice\")\n     }\n \n-    pub fn struct_span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n-    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n-    pub fn struct_span_allow<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_span_allow<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n-    pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n-    pub fn struct_span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_err(msg)\n     }\n-    pub fn struct_err_with_code(&self, msg: &str, code: DiagnosticId) -> DiagnosticBuilder<'_> {\n+    pub fn struct_err_with_code(\n+        &self,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n-    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_, ErrorReported> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n@@ -386,7 +406,7 @@ impl Session {\n     pub fn err(&self, msg: &str) {\n         self.diagnostic().err(msg)\n     }\n-    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) {\n+    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorReported {\n         err.into_diagnostic(self).emit()\n     }\n     #[inline]\n@@ -457,7 +477,7 @@ impl Session {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n-    pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_> {\n+    pub fn struct_note_without_error(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_note_without_error(msg)\n     }\n "}, {"sha": "f26f32aabda1d0dfdd434280856f0545111ec183", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -102,7 +102,7 @@ pub trait InferCtxtExt<'tcx> {\n         expected_args: Vec<ArgKind>,\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n-    ) -> DiagnosticBuilder<'tcx>;\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n }\n \n impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n@@ -1019,7 +1019,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         expected_args: Vec<ArgKind>,\n         found_args: Vec<ArgKind>,\n         is_closure: bool,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let kind = if is_closure { \"closure\" } else { \"function\" };\n \n         let args_str = |arguments: &[ArgKind], other: &[ArgKind]| {"}, {"sha": "c4fbd25b8338bd523406959034215ca08f53f550", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -10,7 +10,8 @@ use crate::traits::normalize_projection_type;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n-    error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, Style,\n+    error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n+    ErrorReported, Style,\n };\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -122,7 +123,7 @@ pub trait InferCtxtExt<'tcx> {\n         found_span: Option<Span>,\n         expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx>;\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported>;\n \n     fn suggest_fully_qualified_path(\n         &self,\n@@ -1271,7 +1272,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         found_span: Option<Span>,\n         expected_ref: ty::PolyTraitRef<'tcx>,\n         found: ty::PolyTraitRef<'tcx>,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         crate fn build_fn_sig_string<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             trait_ref: ty::PolyTraitRef<'tcx>,"}, {"sha": "acf1c976afcd9c855703e72c6414d014f244307e", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -450,7 +450,7 @@ fn report_conflicting_impls(\n             sg.has_errored = true;\n             if overlap.with_impl.is_local() || !tcx.orphan_check_crate(()).contains(&impl_def_id) {\n                 let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n-                decorate(LintDiagnosticBuilder::new(err));\n+                decorate(LintDiagnosticBuilder::new(err.forget_guarantee()));\n             } else {\n                 tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\");\n             }"}, {"sha": "efa50375c95ea01614c4c17ed8396b75465f637e", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -15,7 +15,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, Applicability, ErrorReported, FatalError};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -2618,7 +2618,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         constrained_regions: FxHashSet<ty::BoundRegionKind>,\n         referenced_regions: FxHashSet<ty::BoundRegionKind>,\n-        generate_err: impl Fn(&str) -> rustc_errors::DiagnosticBuilder<'tcx>,\n+        generate_err: impl Fn(&str) -> DiagnosticBuilder<'tcx, ErrorReported>,\n     ) {\n         for br in referenced_regions.difference(&constrained_regions) {\n             let br_name = match *br {"}, {"sha": "cd24969bf283b9de5444cd6f29635d9294766e85", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -179,7 +179,7 @@ fn make_invalid_casting_error<'a, 'tcx>(\n     expr_ty: Ty<'tcx>,\n     cast_ty: Ty<'tcx>,\n     fcx: &FnCtxt<'a, 'tcx>,\n-) -> DiagnosticBuilder<'a> {\n+) -> DiagnosticBuilder<'a, ErrorReported> {\n     type_error_struct!(\n         sess,\n         span,"}, {"sha": "7dca95ebdd613970d5f964fc6440bc45696c4cfe", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -37,14 +37,16 @@ pub fn check_wf_new(tcx: TyCtxt<'_>) {\n pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Abi) {\n     match tcx.sess.target.is_abi_supported(abi) {\n         Some(true) => (),\n-        Some(false) => struct_span_err!(\n-            tcx.sess,\n-            span,\n-            E0570,\n-            \"`{}` is not a supported ABI for the current target\",\n-            abi\n-        )\n-        .emit(),\n+        Some(false) => {\n+            struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0570,\n+                \"`{}` is not a supported ABI for the current target\",\n+                abi\n+            )\n+            .emit();\n+        }\n         None => {\n             tcx.struct_span_lint_hir(UNSUPPORTED_CALLING_CONVENTIONS, hir_id, span, |lint| {\n                 lint.build(\"use of calling convention not supported on this target\").emit()\n@@ -60,7 +62,7 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Ab\n             E0781,\n             \"the `\\\"C-cmse-nonsecure-call\\\"` ABI is only allowed on function pointers\"\n         )\n-        .emit()\n+        .emit();\n     }\n }\n "}, {"sha": "8ca27b010b6af647c59750f0d51c2884107c5031", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -37,7 +37,7 @@\n \n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1520,7 +1520,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         fcx: &FnCtxt<'a, 'tcx>,\n         id: hir::HirId,\n         expression: Option<(&'tcx hir::Expr<'tcx>, hir::HirId)>,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'a, ErrorReported> {\n         let mut err = fcx.report_mismatched_types(cause, expected, found, ty_err);\n \n         let mut pointing_at_return_type = false;"}, {"sha": "80096b90f953097d806b1fba84e1167f127490e7", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -4,7 +4,7 @@ use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCause;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n@@ -57,7 +57,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sp: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         self.demand_suptype_with_origin(&self.misc(sp), expected, actual)\n     }\n \n@@ -67,7 +67,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         match self.at(cause, self.param_env).sup(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n@@ -88,7 +88,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sp: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         self.demand_eqtype_with_origin(&self.misc(sp), expected, actual)\n     }\n \n@@ -97,7 +97,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         match self.at(cause, self.param_env).eq(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n@@ -134,7 +134,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n         allow_two_phase: AllowTwoPhase,\n-    ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n+    ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx, ErrorReported>>) {\n         let expected = self.resolve_vars_with_obligations(expected);\n \n         let e = match self.try_coerce(expr, checked_ty, expected, allow_two_phase, None) {"}, {"sha": "f84036a7a39909a21f6c058d8ce10f01bc5414c4", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -486,7 +486,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .map_or(false, |x| x.iter().any(|adj| matches!(adj.kind, Adjust::Deref(_))))\n         });\n         if !is_named {\n-            self.tcx.sess.emit_err(AddressOfTemporaryTaken { span: oprnd.span })\n+            self.tcx.sess.emit_err(AddressOfTemporaryTaken { span: oprnd.span });\n         }\n     }\n \n@@ -1470,37 +1470,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                     self.register_predicates(obligations)\n                                                 }\n                                                 // FIXME: Need better diagnostics for `FieldMisMatch` error\n-                                                Err(_) => self\n-                                                    .report_mismatched_types(\n+                                                Err(_) => {\n+                                                    self.report_mismatched_types(\n                                                         &cause,\n                                                         target_ty,\n                                                         fru_ty,\n                                                         FieldMisMatch(variant.name, ident.name),\n                                                     )\n-                                                    .emit(),\n+                                                    .emit();\n+                                                }\n                                             }\n                                         }\n                                         fru_ty\n                                     })\n                                     .collect()\n                             }\n                             _ => {\n-                                return self\n-                                    .report_mismatched_types(\n-                                        &self.misc(base_expr.span),\n-                                        adt_ty,\n-                                        base_ty,\n-                                        Sorts(ExpectedFound::new(true, adt_ty, base_ty)),\n-                                    )\n-                                    .emit();\n+                                self.report_mismatched_types(\n+                                    &self.misc(base_expr.span),\n+                                    adt_ty,\n+                                    base_ty,\n+                                    Sorts(ExpectedFound::new(true, adt_ty, base_ty)),\n+                                )\n+                                .emit();\n+                                return;\n                             }\n                         }\n                     }\n                     _ => {\n-                        return self\n-                            .tcx\n+                        self.tcx\n                             .sess\n                             .emit_err(FunctionalRecordUpdateOnNonStruct { span: base_expr.span });\n+                        return;\n                     }\n                 }\n             } else {\n@@ -1529,10 +1530,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         })\n                         .collect(),\n                     _ => {\n-                        return self\n-                            .tcx\n+                        self.tcx\n                             .sess\n                             .emit_err(FunctionalRecordUpdateOnNonStruct { span: base_expr.span });\n+                        return;\n                     }\n                 }\n             };\n@@ -2213,7 +2214,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: Ident,\n         expr_t: Ty<'tcx>,\n         id: HirId,\n-    ) -> DiagnosticBuilder<'_> {\n+    ) -> DiagnosticBuilder<'_, ErrorReported> {\n         let span = field.span;\n         debug!(\"no_such_field_err(span: {:?}, field: {:?}, expr_t: {:?})\", span, field, expr_t);\n "}, {"sha": "4b6460b62b77a5c7baf827bf269ff3b4e2d8052d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n                 use crate::structured_errors::MissingCastForVariadicArg;\n \n-                MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit()\n+                MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n             }\n \n             for arg in provided_args.iter().skip(expected_arg_count) {"}, {"sha": "ccaea10233dc136d7572710098071c4161f1c8ad", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -3,7 +3,9 @@\n \n use crate::check::FnCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -91,7 +93,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         source: SelfSource<'tcx>,\n         error: MethodError<'tcx>,\n         args: Option<&'tcx [hir::Expr<'tcx>]>,\n-    ) -> Option<DiagnosticBuilder<'_>> {\n+    ) -> Option<DiagnosticBuilder<'_, ErrorReported>> {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return None;"}, {"sha": "7c6917734b2ae16030b359de40a69cd8997fd2b9", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -2,7 +2,9 @@ use crate::check::FnCtxt;\n use rustc_ast as ast;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n@@ -98,7 +100,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)\n     }\n \n@@ -817,7 +819,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn emit_bad_pat_path<'b>(\n         &self,\n-        mut e: DiagnosticBuilder<'_>,\n+        mut e: DiagnosticBuilder<'_, ErrorReported>,\n         pat_span: Span,\n         res: Res,\n         pat_res: Res,\n@@ -1368,7 +1370,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         variant: &VariantDef,\n         pat: &'_ Pat<'_>,\n         fields: &[hir::PatField<'_>],\n-    ) -> Option<DiagnosticBuilder<'_>> {\n+    ) -> Option<DiagnosticBuilder<'_, ErrorReported>> {\n         // if this is a tuple struct, then all field names will be numbers\n         // so if any fields in a struct pattern use shorthand syntax, they will\n         // be invalid identifiers (for example, Foo { 0, 1 }).\n@@ -1441,7 +1443,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         inexistent_fields: &[Ident],\n         unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let tcx = self.tcx;\n         let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n             (format!(\"a field named `{}`\", inexistent_fields[0]), \"this\", \"\")\n@@ -1537,7 +1539,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &Pat<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n         variant: &ty::VariantDef,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Option<DiagnosticBuilder<'tcx, ErrorReported>> {\n         if let (CtorKind::Fn, PatKind::Struct(qpath, ..)) = (variant.ctor_kind, &pat.kind) {\n             let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n                 s.print_qpath(qpath, false)\n@@ -1619,7 +1621,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &Pat<'_>,\n         fields: &'tcx [hir::PatField<'tcx>],\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = self\n             .tcx\n             .sess\n@@ -1711,7 +1713,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         unmentioned_fields: &[(&ty::FieldDef, Ident)],\n         have_inaccessible_fields: bool,\n         fields: &'tcx [hir::PatField<'tcx>],\n-    ) -> DiagnosticBuilder<'tcx> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let inaccessible = if have_inaccessible_fields { \" and inaccessible fields\" } else { \"\" };\n         let field_names = if unmentioned_fields.len() == 1 {\n             format!(\"field `{}`{}\", unmentioned_fields[0].1, inaccessible)"}, {"sha": "4ab654560ea0d70373b60cfa7d64433717636834", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -4,7 +4,7 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit as hir_visit;\n@@ -448,7 +448,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                  for more information\",\n             );\n \n-            err.emit()\n+            err.emit();\n         }\n     }\n }\n@@ -843,7 +843,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                             \"using {} as const generic parameters is forbidden\",\n                             unsupported_type\n                         ),\n-                    )\n+                    );\n                 } else {\n                     let mut err = tcx.sess.struct_span_err(\n                         hir_ty.span,\n@@ -858,7 +858,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                             \"more complex types are supported with `#![feature(adt_const_params)]`\",\n                         );\n                     }\n-                    err.emit()\n+                    err.emit();\n                 }\n             };\n \n@@ -1729,12 +1729,14 @@ fn check_variances_for_type_defn<'tcx>(\n \n         match param.name {\n             hir::ParamName::Error => {}\n-            _ => report_bivariance(tcx, param),\n+            _ => {\n+                report_bivariance(tcx, param);\n+            }\n         }\n     }\n }\n \n-fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) {\n+fn report_bivariance(tcx: TyCtxt<'_>, param: &rustc_hir::GenericParam<'_>) -> ErrorReported {\n     let span = param.span;\n     let param_name = param.name.ident().name;\n     let mut err = error_392(tcx, span, param_name);\n@@ -1943,7 +1945,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn error_392(tcx: TyCtxt<'_>, span: Span, param_name: Symbol) -> DiagnosticBuilder<'_> {\n+fn error_392(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    param_name: Symbol,\n+) -> DiagnosticBuilder<'_, ErrorReported> {\n     let mut err =\n         struct_span_err!(tcx.sess, span, E0392, \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");"}, {"sha": "d058bca04a7660d7b74e67e2153692257b60467d", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -93,7 +93,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n             for span in fields.iter().map(|f| tcx.def_span(f.did)) {\n                 err.span_label(span, \"this field does not implement `Copy`\");\n             }\n-            err.emit()\n+            err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n             let item = tcx.hir().expect_item(impl_did);"}, {"sha": "c72f3ecab9d13e58c18ee5a8c7e84ab885cc18c4", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -159,7 +159,7 @@ fn emit_orphan_check_error<'tcx>(\n     generics: &hir::Generics<'tcx>,\n     err: traits::OrphanCheckErr<'tcx>,\n ) -> Result<!, ErrorReported> {\n-    match err {\n+    Err(match err {\n         traits::OrphanCheckErr::NonLocalInputType(tys) => {\n             let mut err = struct_span_err!(\n                 tcx.sess,\n@@ -269,9 +269,7 @@ fn emit_orphan_check_error<'tcx>(\n                 .emit(),\n             }\n         }\n-    }\n-\n-    Err(ErrorReported)\n+    })\n }\n \n #[derive(Default)]"}, {"sha": "139bac72ac23f2c3bbe73b6acba95a8016a77a1d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -26,7 +26,7 @@ use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -321,7 +321,7 @@ fn bad_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n-) -> rustc_errors::DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'tcx, ErrorReported> {\n     let kind = if kind.ends_with('s') { format!(\"{}es\", kind) } else { format!(\"{}s\", kind) };\n \n     spans.sort();\n@@ -1277,19 +1277,21 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n \n                         return None;\n                     }\n-                    Some(item) => tcx\n-                        .sess\n-                        .struct_span_err(item.span, \"Not a function\")\n-                        .span_note(attr_span, \"required by this annotation\")\n-                        .note(\n-                            \"All `#[rustc_must_implement_one_of]` arguments \\\n+                    Some(item) => {\n+                        tcx.sess\n+                            .struct_span_err(item.span, \"Not a function\")\n+                            .span_note(attr_span, \"required by this annotation\")\n+                            .note(\n+                                \"All `#[rustc_must_implement_one_of]` arguments \\\n                             must be associated function names\",\n-                        )\n-                        .emit(),\n-                    None => tcx\n-                        .sess\n-                        .struct_span_err(ident.span, \"Function not found in this trait\")\n-                        .emit(),\n+                            )\n+                            .emit();\n+                    }\n+                    None => {\n+                        tcx.sess\n+                            .struct_span_err(ident.span, \"Function not found in this trait\")\n+                            .emit();\n+                    }\n                 }\n \n                 Some(())"}, {"sha": "6cef3e9d9409eb1750595df7047d20b8240a6ed7", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -393,13 +393,14 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n                             tcx.def_path_str(trait_ref.def_id),\n                         ),\n                     )\n-                    .emit()\n+                    .emit();\n             }\n         }\n-        _ => tcx\n-            .sess\n-            .struct_span_err(span, &format!(\"cannot specialize on `{:?}`\", predicate))\n-            .emit(),\n+        _ => {\n+            tcx.sess\n+                .struct_span_err(span, &format!(\"cannot specialize on `{:?}`\", predicate))\n+                .emit();\n+        }\n     }\n }\n "}, {"sha": "8621375fc63e0b6a4a3d2ff94e97e5acea93a0e3", "filename": "compiler/rustc_typeck/src/structured_errors.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -6,15 +6,15 @@ pub use self::{\n     missing_cast_for_variadic_arg::*, sized_unsized_cast::*, wrong_number_of_generic_args::*,\n };\n \n-use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_session::Session;\n \n pub trait StructuredDiagnostic<'tcx> {\n     fn session(&self) -> &Session;\n \n     fn code(&self) -> DiagnosticId;\n \n-    fn diagnostic(&self) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let err = self.diagnostic_common();\n \n         if self.session().teach(&self.code()) {\n@@ -24,13 +24,19 @@ pub trait StructuredDiagnostic<'tcx> {\n         }\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx>;\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported>;\n \n-    fn diagnostic_regular(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_regular(\n+        &self,\n+        err: DiagnosticBuilder<'tcx, ErrorReported>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         err\n     }\n \n-    fn diagnostic_extended(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_extended(\n+        &self,\n+        err: DiagnosticBuilder<'tcx, ErrorReported>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         err\n     }\n }"}, {"sha": "2dc9f26004cf824b7d7cead8a34c7cc502f4e0cf", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,5 +1,5 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_session::Session;\n use rustc_span::Span;\n@@ -20,7 +20,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n         rustc_errors::error_code!(E0617)\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = self.sess.struct_span_fatal_with_code(\n             self.span,\n             &format!(\"can't pass `{}` to variadic function\", self.ty),\n@@ -45,7 +45,10 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n         err\n     }\n \n-    fn diagnostic_extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_extended(\n+        &self,\n+        mut err: DiagnosticBuilder<'tcx, ErrorReported>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         err.note(&format!(\n             \"certain types, like `{}`, must be casted before passing them to a \\\n                 variadic function, because of arcane ABI rules dictated by the C \\"}, {"sha": "8d2cdbb170b985a70d769de4640c85660ff03f6b", "filename": "compiler/rustc_typeck/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,5 +1,5 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_session::Session;\n use rustc_span::Span;\n@@ -20,7 +20,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n         rustc_errors::error_code!(E0607)\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = self.sess.struct_span_fatal_with_code(\n             self.span,\n             &format!(\n@@ -37,7 +37,10 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n         err\n     }\n \n-    fn diagnostic_extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_extended(\n+        &self,\n+        mut err: DiagnosticBuilder<'tcx, ErrorReported>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         err.help(\n             \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n memory address."}, {"sha": "b763b51dd01434050980dd1116cc8eafaaa4f094", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -1,5 +1,7 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{\n+    pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_middle::hir::map::fn_sig;\n use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n@@ -362,7 +364,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n-    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx> {\n+    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let span = self.path_segment.ident.span;\n         let msg = self.create_error_message();\n \n@@ -789,7 +791,7 @@ impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n         rustc_errors::error_code!(E0107)\n     }\n \n-    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorReported> {\n         let mut err = self.start_diagnostics();\n \n         self.notify(&mut err);"}, {"sha": "9d3e58a3a66fc7ca5300f697da42016982d381fb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e95dee65c35db8f8e07046d445b12d92cbae12/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e95dee65c35db8f8e07046d445b12d92cbae12/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b7e95dee65c35db8f8e07046d445b12d92cbae12", "patch": "@@ -720,12 +720,10 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n             let mut msg =\n                 tcx.sess.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n             let file = e.file.display().to_string();\n-            if file.is_empty() {\n-                msg.emit()\n-            } else {\n-                msg.note(&format!(\"failed to create or modify \\\"{}\\\"\", file)).emit()\n+            if !file.is_empty() {\n+                msg.note(&format!(\"failed to create or modify \\\"{}\\\"\", file));\n             }\n-            Err(ErrorReported)\n+            Err(msg.emit())\n         }\n     }\n }"}]}