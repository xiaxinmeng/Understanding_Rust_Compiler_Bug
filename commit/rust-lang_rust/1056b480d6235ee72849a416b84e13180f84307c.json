{"sha": "1056b480d6235ee72849a416b84e13180f84307c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNTZiNDgwZDYyMzVlZTcyODQ5YTQxNmI4NGUxMzE4MGY4NDMwN2M=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-03T22:23:22Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-04T20:49:34Z"}, "message": "Make extern crates in the root module add to the extern prelude\n\nTo accomplish this, separate the extern prelude from the per-module item maps.", "tree": {"sha": "7c9cf6822357bff4bd4d2055f464bf9991c8e4a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9cf6822357bff4bd4d2055f464bf9991c8e4a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1056b480d6235ee72849a416b84e13180f84307c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1056b480d6235ee72849a416b84e13180f84307c", "html_url": "https://github.com/rust-lang/rust/commit/1056b480d6235ee72849a416b84e13180f84307c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1056b480d6235ee72849a416b84e13180f84307c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69023fc72b26e64ebf1f96fc322a2f7377a5f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69023fc72b26e64ebf1f96fc322a2f7377a5f4d", "html_url": "https://github.com/rust-lang/rust/commit/d69023fc72b26e64ebf1f96fc322a2f7377a5f4d"}], "stats": {"total": 107, "additions": 68, "deletions": 39}, "files": [{"sha": "a58bf8f87bbb412b32f41845bce91197d4fdad91", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=1056b480d6235ee72849a416b84e13180f84307c", "patch": "@@ -134,7 +134,7 @@ impl Module {\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, _db: &impl HirDatabase) -> Option<Crate> {\n+    pub fn krate(&self, _db: &impl PersistentHirDatabase) -> Option<Crate> {\n         Some(self.krate)\n     }\n "}, {"sha": "68df083d8c40dce2c127fa001ed713cb166cd3a0", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=1056b480d6235ee72849a416b84e13180f84307c", "patch": "@@ -34,6 +34,7 @@ use crate::{\n /// module, the set of visible items.\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ItemMap {\n+    extern_prelude: FxHashMap<Name, ModuleDef>,\n     per_module: ArenaMap<ModuleId, ModuleScope>,\n }\n \n@@ -204,6 +205,7 @@ where\n     }\n \n     pub(crate) fn resolve(mut self) -> ItemMap {\n+        self.populate_extern_prelude();\n         for (&module_id, items) in self.input.iter() {\n             self.populate_module(module_id, Arc::clone(items));\n         }\n@@ -227,29 +229,19 @@ where\n         self.result\n     }\n \n+    fn populate_extern_prelude(&mut self) {\n+        for dep in self.krate.dependencies(self.db) {\n+            log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.krate);\n+            if let Some(module) = dep.krate.root_module(self.db) {\n+                self.result\n+                    .extern_prelude\n+                    .insert(dep.name.clone(), module.into());\n+            }\n+        }\n+    }\n+\n     fn populate_module(&mut self, module_id: ModuleId, input: Arc<LoweredModule>) {\n         let mut module_items = ModuleScope::default();\n-\n-        // Populate extern crates prelude\n-        {\n-            let root_id = module_id.crate_root(&self.module_tree);\n-            let file_id = root_id.file_id(&self.module_tree);\n-            let crate_graph = self.db.crate_graph();\n-            if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id.as_original_file())\n-            {\n-                let krate = Crate { crate_id };\n-                for dep in krate.dependencies(self.db) {\n-                    if let Some(module) = dep.krate.root_module(self.db) {\n-                        let def = module.into();\n-                        self.add_module_item(\n-                            &mut module_items,\n-                            dep.name.clone(),\n-                            PerNs::types(def),\n-                        );\n-                    }\n-                }\n-            };\n-        }\n         for (import_id, import_data) in input.imports.iter() {\n             if let Some(last_segment) = import_data.path.segments.iter().last() {\n                 if !import_data.is_glob {\n@@ -327,7 +319,16 @@ where\n                 .alias\n                 .clone()\n                 .unwrap_or_else(|| last_segment.name.clone());\n-            log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def,);\n+            log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n+\n+            // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658\n+            if let Some(root_module) = self.krate.root_module(self.db) {\n+                if import.is_extern_crate && module_id == root_module.module_id {\n+                    if let Some(def) = def.take_types() {\n+                        self.result.extern_prelude.insert(name.clone(), def);\n+                    }\n+                }\n+            }\n             self.update(module_id, |items| {\n                 let res = Resolution {\n                     def,\n@@ -389,24 +390,53 @@ impl ItemMap {\n         original_module: Module,\n         path: &Path,\n     ) -> (PerNs<ModuleDef>, ReachedFixedPoint) {\n-        let mut curr_per_ns: PerNs<ModuleDef> = PerNs::types(match path.kind {\n-            PathKind::Crate => original_module.crate_root(db).into(),\n-            PathKind::Self_ | PathKind::Plain => original_module.into(),\n+        let mut segments = path.segments.iter().enumerate();\n+        let mut curr_per_ns: PerNs<ModuleDef> = match path.kind {\n+            PathKind::Crate => PerNs::types(original_module.crate_root(db).into()),\n+            PathKind::Self_ => PerNs::types(original_module.into()),\n+            PathKind::Plain => {\n+                let segment = match segments.next() {\n+                    Some((_, segment)) => segment,\n+                    None => return (PerNs::none(), ReachedFixedPoint::Yes),\n+                };\n+                // Resolve in:\n+                //  - current module / scope\n+                //  - extern prelude\n+                match self[original_module.module_id].items.get(&segment.name) {\n+                    Some(res) if !res.def.is_none() => res.def,\n+                    _ => {\n+                        if let Some(def) = self.extern_prelude.get(&segment.name) {\n+                            PerNs::types(*def)\n+                        } else {\n+                            return (PerNs::none(), ReachedFixedPoint::No);\n+                        }\n+                    }\n+                }\n+            }\n             PathKind::Super => {\n                 if let Some(p) = original_module.parent(db) {\n-                    p.into()\n+                    PerNs::types(p.into())\n                 } else {\n                     log::debug!(\"super path in root module\");\n                     return (PerNs::none(), ReachedFixedPoint::Yes);\n                 }\n             }\n             PathKind::Abs => {\n-                // TODO: absolute use is not supported\n-                return (PerNs::none(), ReachedFixedPoint::Yes);\n+                // 2018-style absolute path -- only extern prelude\n+                let segment = match segments.next() {\n+                    Some((_, segment)) => segment,\n+                    None => return (PerNs::none(), ReachedFixedPoint::Yes),\n+                };\n+                if let Some(def) = self.extern_prelude.get(&segment.name) {\n+                    log::debug!(\"absolute path {:?} resolved to crate {:?}\", path, def);\n+                    PerNs::types(*def)\n+                } else {\n+                    return (PerNs::none(), ReachedFixedPoint::Yes);\n+                }\n             }\n-        });\n+        };\n \n-        for (i, segment) in path.segments.iter().enumerate() {\n+        for (i, segment) in segments {\n             let curr = match curr_per_ns.as_ref().take_types() {\n                 Some(r) => r,\n                 None => {"}, {"sha": "7e6e48ae00d35ac10a20dc7a95ff883635b9d57b", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=1056b480d6235ee72849a416b84e13180f84307c", "patch": "@@ -23,6 +23,7 @@ pub(super) struct ImportData {\n     pub(super) path: Path,\n     pub(super) alias: Option<Name>,\n     pub(super) is_glob: bool,\n+    pub(super) is_extern_crate: bool,\n }\n \n /// A set of items and imports declared inside a module, without relation to\n@@ -199,6 +200,7 @@ impl LoweredModule {\n                         path,\n                         alias,\n                         is_glob: false,\n+                        is_extern_crate: true,\n                     });\n                 }\n             }\n@@ -228,6 +230,7 @@ impl LoweredModule {\n                 path,\n                 alias,\n                 is_glob: segment.is_none(),\n+                is_extern_crate: false,\n             });\n             if let Some(segment) = segment {\n                 source_map.insert(import, segment)"}, {"sha": "0654dbaa13a01d2b46fcddc94a676ea6deadb6f9", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1056b480d6235ee72849a416b84e13180f84307c/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=1056b480d6235ee72849a416b84e13180f84307c", "patch": "@@ -329,7 +329,6 @@ fn item_map_across_crates() {\n         module.module_id,\n         \"\n             Baz: t v\n-            test_crate: t\n         \",\n     );\n }\n@@ -342,14 +341,17 @@ fn extern_crate_rename() {\n         extern crate alloc as alloc_crate;\n \n         mod alloc;\n+        mod sync;\n \n+        //- /sync.rs\n         use alloc_crate::Arc;\n \n         //- /lib.rs\n         struct Arc;\n     \",\n     );\n     let main_id = sr.files[RelativePath::new(\"/main.rs\")];\n+    let sync_id = sr.files[RelativePath::new(\"/sync.rs\")];\n     let lib_id = sr.files[RelativePath::new(\"/lib.rs\")];\n \n     let mut crate_graph = CrateGraph::default();\n@@ -361,7 +363,7 @@ fn extern_crate_rename() {\n \n     db.set_crate_graph(Arc::new(crate_graph));\n \n-    let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n+    let module = crate::source_binder::module_from_file_id(&db, sync_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n     let item_map = db.item_map(krate);\n \n@@ -370,8 +372,6 @@ fn extern_crate_rename() {\n         module.module_id,\n         \"\n             Arc: t v\n-            alloc: t\n-            alloc_crate: t\n         \",\n     );\n }\n@@ -403,8 +403,6 @@ fn import_across_source_roots() {\n \n     let main_id = sr2.files[RelativePath::new(\"/main.rs\")];\n \n-    eprintln!(\"lib = {:?}, main = {:?}\", lib_id, main_id);\n-\n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);\n     let lib_crate = crate_graph.add_crate_root(lib_id);\n@@ -423,7 +421,6 @@ fn import_across_source_roots() {\n         module.module_id,\n         \"\n             C: t v\n-            test_crate: t\n         \",\n     );\n }\n@@ -465,7 +462,6 @@ fn reexport_across_crates() {\n         module.module_id,\n         \"\n             Baz: t v\n-            test_crate: t\n         \",\n     );\n }"}]}