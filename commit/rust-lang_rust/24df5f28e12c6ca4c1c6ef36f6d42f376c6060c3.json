{"sha": "24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3", "node_id": "C_kwDOAAsO6NoAKDI0ZGY1ZjI4ZTEyYzZjYTRjMWM2ZWYzNmY2ZDQyZjM3NmM2MDYwYzM", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2022-07-16T17:25:50Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2022-07-16T17:25:50Z"}, "message": "Parametrize a few more things", "tree": {"sha": "9bbc07e5ec4217f7bb7c41de624db75314005ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bbc07e5ec4217f7bb7c41de624db75314005ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3", "html_url": "https://github.com/rust-lang/rust/commit/24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48b281468c90b09eed472cd3fb60539869585a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48b281468c90b09eed472cd3fb60539869585a2", "html_url": "https://github.com/rust-lang/rust/commit/d48b281468c90b09eed472cd3fb60539869585a2"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "c9f0e086495728853a471e9e9f04a17ba95aba23", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=24df5f28e12c6ca4c1c6ef36f6d42f376c6060c3", "patch": "@@ -1421,19 +1421,22 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct IntoIter<T> {\n-    iter: vec::IntoIter<T>,\n+pub struct IntoIter<\n+    T,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    iter: vec::IntoIter<T, A>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+impl<T: fmt::Debug, A: Allocator> fmt::Debug for IntoIter<T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IntoIter\").field(&self.iter.as_slice()).finish()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Iterator for IntoIter<T> {\n+impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1448,29 +1451,29 @@ impl<T> Iterator for IntoIter<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> DoubleEndedIterator for IntoIter<T> {\n+impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> ExactSizeIterator for IntoIter<T> {\n+impl<T, A: Allocator> ExactSizeIterator for IntoIter<T, A> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<T> FusedIterator for IntoIter<T> {}\n+impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n \n // In addition to the SAFETY invariants of the following three unsafe traits\n // also refer to the vec::in_place_collect module documentation to get an overview\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n-unsafe impl<T> SourceIter for IntoIter<T> {\n-    type Source = IntoIter<T>;\n+unsafe impl<T, A: Allocator> SourceIter for IntoIter<T, A> {\n+    type Source = IntoIter<T, A>;\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut Self::Source {\n@@ -1480,9 +1483,9 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n-unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n+unsafe impl<I, A: Allocator> InPlaceIterable for IntoIter<I, A> {}\n \n-unsafe impl<I> AsVecIntoIter for IntoIter<I> {\n+unsafe impl<I> AsVecIntoIter for IntoIter<I, Global> {\n     type Item = I;\n \n     fn as_into_iter(&mut self) -> &mut vec::IntoIter<Self::Item> {\n@@ -1682,9 +1685,9 @@ impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> IntoIterator for BinaryHeap<T> {\n+impl<T, A: Allocator> IntoIterator for BinaryHeap<T, A> {\n     type Item = T;\n-    type IntoIter = IntoIter<T>;\n+    type IntoIter = IntoIter<T, A>;\n \n     /// Creates a consuming iterator, that is, one that moves each value out of\n     /// the binary heap in arbitrary order. The binary heap cannot be used\n@@ -1704,7 +1707,7 @@ impl<T> IntoIterator for BinaryHeap<T> {\n     ///     println!(\"{x}\");\n     /// }\n     /// ```\n-    fn into_iter(self) -> IntoIter<T> {\n+    fn into_iter(self) -> IntoIter<T, A> {\n         IntoIter { iter: self.data.into_iter() }\n     }\n }\n@@ -1720,7 +1723,7 @@ impl<'a, T, A: Allocator + 'a> IntoIterator for &'a BinaryHeap<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Ord> Extend<T> for BinaryHeap<T> {\n+impl<T: Ord, A: Allocator> Extend<T> for BinaryHeap<T, A> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         <Self as SpecExtend<I>>::spec_extend(self, iter);\n@@ -1737,7 +1740,7 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     }\n }\n \n-impl<T: Ord, I: IntoIterator<Item = T>> SpecExtend<I> for BinaryHeap<T> {\n+impl<T: Ord, A: Allocator, I: IntoIterator<Item = T>> SpecExtend<I> for BinaryHeap<T, A> {\n     default fn spec_extend(&mut self, iter: I) {\n         self.extend_desugared(iter.into_iter());\n     }"}]}