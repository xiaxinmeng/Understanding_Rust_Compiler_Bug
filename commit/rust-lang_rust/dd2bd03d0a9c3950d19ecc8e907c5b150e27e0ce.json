{"sha": "dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "node_id": "C_kwDOAAsO6NoAKGRkMmJkMDNkMGE5YzM5NTBkMTllY2M4ZTkwN2M1YjE1MGUyN2UwY2U", "commit": {"author": {"name": "Grisha Vartanyan", "email": "grisha@vartanyan.com", "date": "2023-06-04T06:06:25Z"}, "committer": {"name": "Grisha Vartanyan", "email": "grisha@vartanyan.com", "date": "2023-06-04T13:55:34Z"}, "message": "Remove ExtendWith and ExtendElement", "tree": {"sha": "ad586c9ee2c72c8b18557b4d3820122be5e11e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad586c9ee2c72c8b18557b4d3820122be5e11e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "html_url": "https://github.com/rust-lang/rust/commit/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce/comments", "author": {"login": "GrishaVar", "id": 33952698, "node_id": "MDQ6VXNlcjMzOTUyNjk4", "avatar_url": "https://avatars.githubusercontent.com/u/33952698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrishaVar", "html_url": "https://github.com/GrishaVar", "followers_url": "https://api.github.com/users/GrishaVar/followers", "following_url": "https://api.github.com/users/GrishaVar/following{/other_user}", "gists_url": "https://api.github.com/users/GrishaVar/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrishaVar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrishaVar/subscriptions", "organizations_url": "https://api.github.com/users/GrishaVar/orgs", "repos_url": "https://api.github.com/users/GrishaVar/repos", "events_url": "https://api.github.com/users/GrishaVar/events{/privacy}", "received_events_url": "https://api.github.com/users/GrishaVar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GrishaVar", "id": 33952698, "node_id": "MDQ6VXNlcjMzOTUyNjk4", "avatar_url": "https://avatars.githubusercontent.com/u/33952698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrishaVar", "html_url": "https://github.com/GrishaVar", "followers_url": "https://api.github.com/users/GrishaVar/followers", "following_url": "https://api.github.com/users/GrishaVar/following{/other_user}", "gists_url": "https://api.github.com/users/GrishaVar/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrishaVar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrishaVar/subscriptions", "organizations_url": "https://api.github.com/users/GrishaVar/orgs", "repos_url": "https://api.github.com/users/GrishaVar/repos", "events_url": "https://api.github.com/users/GrishaVar/events{/privacy}", "received_events_url": "https://api.github.com/users/GrishaVar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4f0417aa190bec347c53a147ca1cd134a832f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4f0417aa190bec347c53a147ca1cd134a832f6", "html_url": "https://github.com/rust-lang/rust/commit/4e4f0417aa190bec347c53a147ca1cd134a832f6"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "d89cdff8e366cc0f8b32185348f67e58ea786e8b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "patch": "@@ -2355,7 +2355,7 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n         let len = self.len();\n \n         if new_len > len {\n-            self.extend_with(new_len - len, ExtendElement(value))\n+            self.extend_with(new_len - len, value)\n         } else {\n             self.truncate(new_len);\n         }\n@@ -2469,26 +2469,10 @@ impl<T, A: Allocator, const N: usize> Vec<[T; N], A> {\n     }\n }\n \n-// This code generalizes `extend_with_{element,default}`.\n-trait ExtendWith<T> {\n-    fn next(&mut self) -> T;\n-    fn last(self) -> T;\n-}\n-\n-struct ExtendElement<T>(T);\n-impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n-    fn next(&mut self) -> T {\n-        self.0.clone()\n-    }\n-    fn last(self) -> T {\n-        self.0\n-    }\n-}\n-\n-impl<T, A: Allocator> Vec<T, A> {\n+impl<T: Clone, A: Allocator> Vec<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n-    /// Extend the vector by `n` values, using the given generator.\n-    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {\n+    /// Extend the vector by `n` clones of value.\n+    fn extend_with(&mut self, n: usize, value: T) {\n         self.reserve(n);\n \n         unsafe {\n@@ -2500,15 +2484,15 @@ impl<T, A: Allocator> Vec<T, A> {\n \n             // Write all elements except the last one\n             for _ in 1..n {\n-                ptr::write(ptr, value.next());\n+                ptr::write(ptr, value.clone());\n                 ptr = ptr.add(1);\n-                // Increment the length in every step in case next() panics\n+                // Increment the length in every step in case clone() panics\n                 local_len.increment_len(1);\n             }\n \n             if n > 0 {\n                 // We can write the last element directly without cloning needlessly\n-                ptr::write(ptr, value.last());\n+                ptr::write(ptr, value);\n                 local_len.increment_len(1);\n             }\n "}, {"sha": "da43d17bf36243086e631ba1bca2f7dd0c040bf0", "filename": "library/alloc/src/vec/spec_from_elem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs?ref=dd2bd03d0a9c3950d19ecc8e907c5b150e27e0ce", "patch": "@@ -3,7 +3,7 @@ use core::ptr;\n use crate::alloc::Allocator;\n use crate::raw_vec::RawVec;\n \n-use super::{ExtendElement, IsZero, Vec};\n+use super::{IsZero, Vec};\n \n // Specialization trait used for Vec::from_elem\n pub(super) trait SpecFromElem: Sized {\n@@ -13,7 +13,7 @@ pub(super) trait SpecFromElem: Sized {\n impl<T: Clone> SpecFromElem for T {\n     default fn from_elem<A: Allocator>(elem: Self, n: usize, alloc: A) -> Vec<Self, A> {\n         let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n+        v.extend_with(n, elem);\n         v\n     }\n }\n@@ -25,7 +25,7 @@ impl<T: Clone + IsZero> SpecFromElem for T {\n             return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n         }\n         let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n+        v.extend_with(n, elem);\n         v\n     }\n }"}]}