{"sha": "b7929cafe188b691a8e41021d3883d1a93dbb313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTI5Y2FmZTE4OGI2OTFhOGU0MTAyMWQzODgzZDFhOTNkYmIzMTM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-03-29T19:14:53Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-03-30T10:36:50Z"}, "message": "Fix false positive in empty_line_after_outer_attr\n\nBefore, when you had a block comment between an attribute and the\nfollowing item like this:\n\n```rust\n\\#[crate_type = \"lib\"]\n/*\n\n*/\npub struct Rust;\n```\n\nIt would cause a false positive on the lint, because there is an empty\nline inside the block comment.\n\nThis makes sure that basic block comments are detected and removed from\nthe snippet that was created before.", "tree": {"sha": "20fe0b5956bf0856fb1d76a4d74f14294778ee69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20fe0b5956bf0856fb1d76a4d74f14294778ee69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7929cafe188b691a8e41021d3883d1a93dbb313", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQItBAABCAAXBQJavhNCEBxkZXZAcGhhbnNjaC5uZXQACgkQk/szRZ0xHl6yzBAA\ni4GbbJb5pRk3Vv/bz83OJQacvh5YjoUTmAbfa78kN7RUyiFxx9El66sIsGDUCUZd\nTvT/M0D+IYmbDmlio5LdlMYli/DkOidwPPmIe4a1g5GvpNYRT3f0udlI9d/KOSQu\nAAtasxXFuRVjjj3VKHMwWfO3R1tA/HukfpelUx+V2Nuj47VVcoc84pzxjUddxhSV\nBV6XGA2YzTDAH7k/9QQLF5qUmA/WAYODELbyNTlROtofmVZXh98/6CE/lO9I8ALy\nWRMYXbqfeZxYKbIKRuOcLqYb0RigQ/H5N2SGZ/ENDVs9IlqZJ71hbF+zDkhvjUDt\n5xgz3Dv+eO2SlQkUAiMkvid4nMa01l5dQK8zC6el1gQ/XQq1HdUHyhi8hMvWfACm\n8KnAhAkPELkhhfX0kriCX/oArbjlz8tJOIjXya4UYs8XId74EmIhOvrTcVDCHiZG\nrdbrgTzwfDEkrYMbdQ9OQ+FqnX7a4LyJoP9KWuyOCtOgTXqPxNMKHUACxeY+nU1H\nfcHarWP1Zx5jCvxKo5exfSQ7uxjCy3Pn+60FFff5ZuVbM2K3Di1gKXNUqyK4JdBr\nvbbu2ih8QbPBILsyjVQ/ieS9qEzz5pFy87TIxg7nDMcQFAasObrV4J0I7XK8/5yx\nVvrgNtAJ2qEOPn4hYocvnoDLwO3ZKADfOV4pVWBclCg=\n=32Ie\n-----END PGP SIGNATURE-----", "payload": "tree 20fe0b5956bf0856fb1d76a4d74f14294778ee69\nparent b45801ff192e6f1bd3504c05e612a1004f52a24e\nauthor Philipp Hansch <dev@phansch.net> 1522350893 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1522406210 +0200\n\nFix false positive in empty_line_after_outer_attr\n\nBefore, when you had a block comment between an attribute and the\nfollowing item like this:\n\n```rust\n\\#[crate_type = \"lib\"]\n/*\n\n*/\npub struct Rust;\n```\n\nIt would cause a false positive on the lint, because there is an empty\nline inside the block comment.\n\nThis makes sure that basic block comments are detected and removed from\nthe snippet that was created before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7929cafe188b691a8e41021d3883d1a93dbb313", "html_url": "https://github.com/rust-lang/rust/commit/b7929cafe188b691a8e41021d3883d1a93dbb313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7929cafe188b691a8e41021d3883d1a93dbb313/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b45801ff192e6f1bd3504c05e612a1004f52a24e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45801ff192e6f1bd3504c05e612a1004f52a24e", "html_url": "https://github.com/rust-lang/rust/commit/b45801ff192e6f1bd3504c05e612a1004f52a24e"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "1de64683e883bfcbc65c7482b46db99d6a00cdd9", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7929cafe188b691a8e41021d3883d1a93dbb313/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7929cafe188b691a8e41021d3883d1a93dbb313/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=b7929cafe188b691a8e41021d3883d1a93dbb313", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::{self, TyCtxt};\n use semver::Version;\n use syntax::ast::{Attribute, AttrStyle, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n-use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then};\n+use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then, without_block_comments};\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -276,6 +276,8 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n \n             if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();\n+                let lines = without_block_comments(lines);\n+\n                 if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n                     span_lint(\n                         cx,"}, {"sha": "e3202eed67970d2d8ebe6e150802141696cd531b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b7929cafe188b691a8e41021d3883d1a93dbb313/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7929cafe188b691a8e41021d3883d1a93dbb313/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b7929cafe188b691a8e41021d3883d1a93dbb313", "patch": "@@ -1086,3 +1086,37 @@ pub fn clip(tcx: TyCtxt, u: u128, ity: ast::UintTy) -> u128 {\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }\n+\n+/// Remove block comments from the given Vec of lines\n+///\n+/// # Examples\n+///\n+/// ```rust,ignore\n+/// without_block_comments(vec![\"/*\", \"foo\", \"*/\"]);\n+/// // => vec![]\n+///\n+/// without_block_comments(vec![\"bar\", \"/*\", \"foo\", \"*/\"]);\n+/// // => vec![\"bar\"]\n+/// ```\n+pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n+    let mut without = vec![];\n+\n+    // naive approach for block comments\n+    let mut inside_comment = false;\n+\n+    for line in lines.into_iter() {\n+        if line.contains(\"/*\") {\n+            inside_comment = true;\n+            continue;\n+        } else if line.contains(\"*/\") {\n+            inside_comment = false;\n+            continue;\n+        }\n+\n+        if !inside_comment {\n+            without.push(line);\n+        }\n+    }\n+\n+    without\n+}"}, {"sha": "99e55b2760dcd44d4c051fba057b84840d40ee0c", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7929cafe188b691a8e41021d3883d1a93dbb313/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7929cafe188b691a8e41021d3883d1a93dbb313/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=b7929cafe188b691a8e41021d3883d1a93dbb313", "patch": "@@ -79,4 +79,11 @@ pub enum FooFighter {\n     Bar4\n }\n \n+// This should not produce a warning because there is a comment in between\n+#[crate_type = \"lib\"]\n+/*\n+\n+*/\n+pub struct S;\n+\n fn main() { }"}, {"sha": "525a357bdc7513f8e5c50125e34a4f2c5481eb0b", "filename": "tests/without_block_comments.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7929cafe188b691a8e41021d3883d1a93dbb313/tests%2Fwithout_block_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7929cafe188b691a8e41021d3883d1a93dbb313/tests%2Fwithout_block_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwithout_block_comments.rs?ref=b7929cafe188b691a8e41021d3883d1a93dbb313", "patch": "@@ -0,0 +1,20 @@\n+extern crate clippy_lints;\n+use clippy_lints::utils::without_block_comments;\n+\n+#[test]\n+fn test_lines_without_block_comments() {\n+    let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n+    println!(\"result: {:?}\", result);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(\n+        vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]\n+    );\n+    assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n+\n+    let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n+    assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n+}"}]}