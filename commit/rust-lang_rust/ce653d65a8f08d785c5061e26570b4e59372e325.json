{"sha": "ce653d65a8f08d785c5061e26570b4e59372e325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNjUzZDY1YThmMDhkNzg1YzUwNjFlMjY1NzBiNGU1OTM3MmUzMjU=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-07-01T00:22:16Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T21:02:05Z"}, "message": "use `#[derive]` instead of the manual implementation", "tree": {"sha": "013d5928862e8a3788d57f068c62f85b400eb448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013d5928862e8a3788d57f068c62f85b400eb448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce653d65a8f08d785c5061e26570b4e59372e325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce653d65a8f08d785c5061e26570b4e59372e325", "html_url": "https://github.com/rust-lang/rust/commit/ce653d65a8f08d785c5061e26570b4e59372e325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce653d65a8f08d785c5061e26570b4e59372e325/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f410df3c4810e80b6703dcfdbc4d48f812eb4889", "url": "https://api.github.com/repos/rust-lang/rust/commits/f410df3c4810e80b6703dcfdbc4d48f812eb4889", "html_url": "https://github.com/rust-lang/rust/commit/f410df3c4810e80b6703dcfdbc4d48f812eb4889"}], "stats": {"total": 41, "additions": 1, "deletions": 40}, "files": [{"sha": "062b273c0f40f124dbfd5100e0a38b79b9560565", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ce653d65a8f08d785c5061e26570b4e59372e325/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce653d65a8f08d785c5061e26570b4e59372e325/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=ce653d65a8f08d785c5061e26570b4e59372e325", "patch": "@@ -16,6 +16,7 @@ use std::fmt::Display;\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n+#[derive(Clone)]\n pub enum Sugg<'a> {\n     /// An expression that never needs parenthesis such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n@@ -37,46 +38,6 @@ impl Display for Sugg<'_> {\n     }\n }\n \n-// It's impossible to derive Clone due to the lack of the impl Clone for AssocOp\n-impl Clone for Sugg<'_> {\n-    fn clone(&self) -> Self {\n-        /// manually cloning AssocOp\n-        fn clone_assoc_op(this: &AssocOp) -> AssocOp {\n-            match this {\n-                AssocOp::Add => AssocOp::Add,\n-                AssocOp::Subtract => AssocOp::Subtract,\n-                AssocOp::Multiply => AssocOp::Multiply,\n-                AssocOp::Divide => AssocOp::Divide,\n-                AssocOp::Modulus => AssocOp::Modulus,\n-                AssocOp::LAnd => AssocOp::LAnd,\n-                AssocOp::LOr => AssocOp::LOr,\n-                AssocOp::BitXor => AssocOp::BitXor,\n-                AssocOp::BitAnd => AssocOp::BitAnd,\n-                AssocOp::BitOr => AssocOp::BitOr,\n-                AssocOp::ShiftLeft => AssocOp::ShiftLeft,\n-                AssocOp::ShiftRight => AssocOp::ShiftRight,\n-                AssocOp::Equal => AssocOp::Equal,\n-                AssocOp::Less => AssocOp::Less,\n-                AssocOp::LessEqual => AssocOp::LessEqual,\n-                AssocOp::NotEqual => AssocOp::NotEqual,\n-                AssocOp::Greater => AssocOp::Greater,\n-                AssocOp::GreaterEqual => AssocOp::GreaterEqual,\n-                AssocOp::Assign => AssocOp::Assign,\n-                AssocOp::AssignOp(t) => AssocOp::AssignOp(*t),\n-                AssocOp::As => AssocOp::As,\n-                AssocOp::DotDot => AssocOp::DotDot,\n-                AssocOp::DotDotEq => AssocOp::DotDotEq,\n-                AssocOp::Colon => AssocOp::Colon,\n-            }\n-        }\n-        match self {\n-            Sugg::NonParen(x) => Sugg::NonParen(x.clone()),\n-            Sugg::MaybeParen(x) => Sugg::MaybeParen(x.clone()),\n-            Sugg::BinOp(op, x) => Sugg::BinOp(clone_assoc_op(op), x.clone()),\n-        }\n-    }\n-}\n-\n #[allow(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression."}]}