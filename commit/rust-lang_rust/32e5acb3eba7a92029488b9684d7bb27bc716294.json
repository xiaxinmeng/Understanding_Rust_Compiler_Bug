{"sha": "32e5acb3eba7a92029488b9684d7bb27bc716294", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZTVhY2IzZWJhN2E5MjAyOTQ4OGI5Njg0ZDdiYjI3YmM3MTYyOTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-19T23:26:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-26T21:37:13Z"}, "message": "proc_macro: Turn `quote` into a regular built-in macro\n\nPreviously in was implemented using a special hack in the metadata loader", "tree": {"sha": "1f6a56126f5967fd44bf6b579bc9641bbb95a22d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6a56126f5967fd44bf6b579bc9641bbb95a22d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32e5acb3eba7a92029488b9684d7bb27bc716294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32e5acb3eba7a92029488b9684d7bb27bc716294", "html_url": "https://github.com/rust-lang/rust/commit/32e5acb3eba7a92029488b9684d7bb27bc716294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32e5acb3eba7a92029488b9684d7bb27bc716294/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "html_url": "https://github.com/rust-lang/rust/commit/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "d408fef75153e2f83c597d9bfa6547b66585b1e2", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=32e5acb3eba7a92029488b9684d7bb27bc716294", "patch": "@@ -19,12 +19,15 @@\n \n #![feature(nll)]\n #![feature(staged_api)]\n+#![feature(allow_internal_unstable)]\n #![feature(const_fn)]\n+#![feature(decl_macro)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(optin_builtin_traits)]\n #![feature(mem_take)]\n #![feature(non_exhaustive)]\n+#![feature(rustc_attrs)]\n #![feature(specialization)]\n \n #![recursion_limit=\"256\"]\n@@ -222,11 +225,10 @@ pub mod token_stream {\n ///\n /// Unquoting is done with `$`, and works by taking the single next ident as the unquoted term.\n /// To quote `$` itself, use `$$`.\n-///\n-/// This is a dummy macro, the actual implementation is in `quote::quote`.`\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n-#[macro_export]\n-macro_rules! quote { () => {} }\n+#[allow_internal_unstable(proc_macro_def_site)]\n+#[cfg_attr(not(bootstrap), rustc_builtin_macro)]\n+pub macro quote ($($t:tt)*) { /* compiler built-in */ }\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n #[doc(hidden)]"}, {"sha": "144e2d6bac43bb3061ecbb3c785965732e56c7e5", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=32e5acb3eba7a92029488b9684d7bb27bc716294", "patch": "@@ -57,9 +57,9 @@ macro_rules! quote {\n }\n \n /// Quote a `TokenStream` into a `TokenStream`.\n-/// This is the actual `quote!()` proc macro.\n+/// This is the actual implementation of the `quote!()` proc macro.\n ///\n-/// It is manually loaded in `CStore::load_macro_untracked`.\n+/// It is loaded by the compiler in `register_builtin_macros`.\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote(stream: TokenStream) -> TokenStream {\n     if stream.is_empty() {"}, {"sha": "f4c04770c1505453e6067141e6974aabea0afd0c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=32e5acb3eba7a92029488b9684d7bb27bc716294", "patch": "@@ -30,11 +30,9 @@ use syntax::ast;\n use syntax::attr;\n use syntax::source_map;\n use syntax::edition::Edition;\n-use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n-use syntax::ext::proc_macro::BangProcMacro;\n use syntax::parse::source_file_to_stream;\n use syntax::parse::parser::emit_unclosed_delims;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::Symbol;\n use syntax_pos::{Span, FileName};\n use rustc_data_structures::bit_set::BitSet;\n \n@@ -437,14 +435,6 @@ impl cstore::CStore {\n         let data = self.get_crate_data(id.krate);\n         if data.is_proc_macro_crate() {\n             return LoadedMacro::ProcMacro(data.get_proc_macro(id.index, sess).ext);\n-        } else if data.name == sym::proc_macro && data.item_name(id.index) == sym::quote {\n-            let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n-            let kind = SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client }));\n-            let ext = SyntaxExtension {\n-                allow_internal_unstable: Some([sym::proc_macro_def_site][..].into()),\n-                ..SyntaxExtension::default(kind, data.root.edition)\n-            };\n-            return LoadedMacro::ProcMacro(Lrc::new(ext));\n         }\n \n         let def = data.get_macro(id.index);"}, {"sha": "1a6176916623b1017b3c2438c34e1d8eb03072c0", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=32e5acb3eba7a92029488b9684d7bb27bc716294", "patch": "@@ -7,13 +7,18 @@\n #![feature(decl_macro)]\n #![feature(mem_take)]\n #![feature(nll)]\n+#![feature(proc_macro_internals)]\n+#![feature(proc_macro_quote)]\n #![feature(rustc_diagnostic_macros)]\n \n+extern crate proc_macro;\n+\n use crate::deriving::*;\n \n use syntax::ast::Ident;\n use syntax::edition::Edition;\n use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind, MacroExpanderFn};\n+use syntax::ext::proc_macro::BangProcMacro;\n use syntax::symbol::sym;\n \n mod error_codes;\n@@ -100,4 +105,7 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n         RustcDecodable: decodable::expand_deriving_rustc_decodable,\n         RustcEncodable: encodable::expand_deriving_rustc_encodable,\n     }\n+\n+    let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n+    register(sym::quote, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })));\n }"}, {"sha": "2819541bf6966127d538908cf0e18879f5a30433", "filename": "src/test/ui/auxiliary/cond_plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Ftest%2Fui%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Ftest%2Fui%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fcond_plugin.rs?ref=32e5acb3eba7a92029488b9684d7bb27bc716294", "patch": "@@ -3,6 +3,7 @@\n \n #![crate_type = \"proc-macro\"]\n #![feature(proc_macro_hygiene)]\n+#![feature(proc_macro_quote)]\n \n extern crate proc_macro;\n "}, {"sha": "49cfb5518ba9c88bf1ef27959be5905127f8ea00", "filename": "src/test/ui/auxiliary/proc_macro_def.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Ftest%2Fui%2Fauxiliary%2Fproc_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e5acb3eba7a92029488b9684d7bb27bc716294/src%2Ftest%2Fui%2Fauxiliary%2Fproc_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fproc_macro_def.rs?ref=32e5acb3eba7a92029488b9684d7bb27bc716294", "patch": "@@ -3,6 +3,7 @@\n \n #![crate_type = \"proc-macro\"]\n #![feature(proc_macro_hygiene)]\n+#![feature(proc_macro_quote)]\n \n extern crate proc_macro;\n "}]}