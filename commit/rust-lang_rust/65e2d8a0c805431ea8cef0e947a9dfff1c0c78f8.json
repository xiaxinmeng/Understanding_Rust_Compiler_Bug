{"sha": "65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTJkOGEwYzgwNTQzMWVhOGNlZjBlOTQ3YTlkZmZmMWMwYzc4Zjg=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-23T23:00:57Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-23T23:00:57Z"}, "message": "vscode: simplify and refactor config", "tree": {"sha": "6b62d9b372bb9aea84e129584f8c676fce7ddf49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b62d9b372bb9aea84e129584f8c676fce7ddf49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "html_url": "https://github.com/rust-lang/rust/commit/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff1b3fe4d17dcecf0ec9a30c35d6c88715cb8ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff1b3fe4d17dcecf0ec9a30c35d6c88715cb8ea", "html_url": "https://github.com/rust-lang/rust/commit/eff1b3fe4d17dcecf0ec9a30c35d6c88715cb8ea"}], "stats": {"total": 106, "additions": 45, "deletions": 61}, "files": [{"sha": "16ac50a0a8218fbb62adc55b4870458ce413c36d", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 45, "deletions": 61, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=65e2d8a0c805431ea8cef0e947a9dfff1c0c78f8", "patch": "@@ -1,29 +1,10 @@\n import * as vscode from 'vscode';\n import { log } from \"./util\";\n \n-export interface InlayHintOptions {\n-    typeHints: boolean;\n-    parameterHints: boolean;\n-    maxLength: number | null;\n-}\n-\n-export interface CargoWatchOptions {\n-    enable: boolean;\n-    arguments: string[];\n-    command: string;\n-    allTargets: boolean;\n-}\n-\n-export interface CargoFeatures {\n-    noDefaultFeatures: boolean;\n-    allFeatures: boolean;\n-    features: string[];\n-    loadOutDirsFromCheck: boolean;\n-}\n-\n export type UpdatesChannel = \"stable\" | \"nightly\";\n \n export const NIGHTLY_TAG = \"nightly\";\n+\n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n \n@@ -50,25 +31,24 @@ export class Config {\n         .packageJSON\n         .releaseTag ?? undefined;\n \n-    private cfg!: vscode.WorkspaceConfiguration;\n+    readonly globalStoragePath: string;\n \n-    constructor(private readonly ctx: vscode.ExtensionContext) {\n-        vscode.workspace.onDidChangeConfiguration(this.onConfigChange, this, ctx.subscriptions);\n-        this.refreshConfig();\n+    constructor(ctx: vscode.ExtensionContext) {\n+        this.globalStoragePath = ctx.globalStoragePath;\n+        vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n+        this.refreshLogging();\n     }\n \n-    private refreshConfig() {\n-        this.cfg = vscode.workspace.getConfiguration(this.rootSection);\n-        const enableLogging = this.cfg.get(\"trace.extension\") as boolean;\n-        log.setEnabled(enableLogging);\n+    private refreshLogging() {\n+        log.setEnabled(this.traceExtension);\n         log.debug(\n             \"Extension version:\", this.packageJsonVersion,\n             \"using configuration:\", this.cfg\n         );\n     }\n \n-    private async onConfigChange(event: vscode.ConfigurationChangeEvent) {\n-        this.refreshConfig();\n+    private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {\n+        this.refreshLogging();\n \n         const requiresReloadOpt = this.requiresReloadOpts.find(\n             opt => event.affectsConfiguration(opt)\n@@ -86,49 +66,53 @@ export class Config {\n         }\n     }\n \n-    get globalStoragePath(): string { return this.ctx.globalStoragePath; }\n-\n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n     // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n-    get serverPath() { return this.cfg.get(\"serverPath\") as null | string; }\n-    get channel() { return this.cfg.get<\"stable\" | \"nightly\">(\"updates.channel\")!; }\n-    get askBeforeDownload() { return this.cfg.get(\"updates.askBeforeDownload\") as boolean; }\n-    get highlightingSemanticTokens() { return this.cfg.get(\"highlighting.semanticTokens\") as boolean; }\n-    get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n-    get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n-    get lruCapacity() { return this.cfg.get(\"lruCapacity\") as null | number; }\n-    get inlayHints(): InlayHintOptions {\n+    private get cfg(): vscode.WorkspaceConfiguration {\n+        return vscode.workspace.getConfiguration(this.rootSection);\n+    }\n+\n+    get serverPath() { return this.cfg.get<null | string>(\"serverPath\")!; }\n+    get channel() { return this.cfg.get<UpdatesChannel>(\"updates.channel\")!; }\n+    get askBeforeDownload() { return this.cfg.get<boolean>(\"updates.askBeforeDownload\")!; }\n+    get highlightingSemanticTokens() { return this.cfg.get<boolean>(\"highlighting.semanticTokens\")!; }\n+    get highlightingOn() { return this.cfg.get<boolean>(\"highlightingOn\")!; }\n+    get rainbowHighlightingOn() { return this.cfg.get<boolean>(\"rainbowHighlightingOn\")!; }\n+    get lruCapacity() { return this.cfg.get<null | number>(\"lruCapacity\")!; }\n+    get excludeGlobs() { return this.cfg.get<string[]>(\"excludeGlobs\")!; }\n+    get useClientWatching() { return this.cfg.get<boolean>(\"useClientWatching\")!; }\n+    get featureFlags() { return this.cfg.get<Record<string, boolean>>(\"featureFlags\")!; }\n+    get rustfmtArgs() { return this.cfg.get<string[]>(\"rustfmtArgs\")!; }\n+    get loadOutDirsFromCheck() { return this.cfg.get<boolean>(\"loadOutDirsFromCheck\")!; }\n+    get traceExtension() { return this.cfg.get<boolean>(\"trace.extension\")!; }\n+\n+    // for internal use\n+    get withSysroot() { return this.cfg.get<boolean>(\"withSysroot\", true)!; }\n+\n+    get inlayHints() {\n         return {\n-            typeHints: this.cfg.get(\"inlayHints.typeHints\") as boolean,\n-            parameterHints: this.cfg.get(\"inlayHints.parameterHints\") as boolean,\n-            maxLength: this.cfg.get(\"inlayHints.maxLength\") as null | number,\n+            typeHints: this.cfg.get<boolean>(\"inlayHints.typeHints\")!,\n+            parameterHints: this.cfg.get<boolean>(\"inlayHints.parameterHints\")!,\n+            maxLength: this.cfg.get<null | number>(\"inlayHints.maxLength\")!,\n         };\n     }\n-    get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }\n-    get useClientWatching() { return this.cfg.get(\"useClientWatching\") as boolean; }\n-    get featureFlags() { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n-    get rustfmtArgs() { return this.cfg.get(\"rustfmtArgs\") as string[]; }\n-    get loadOutDirsFromCheck() { return this.cfg.get(\"loadOutDirsFromCheck\") as boolean; }\n \n-    get cargoWatchOptions(): CargoWatchOptions {\n+    get cargoWatchOptions() {\n         return {\n-            enable: this.cfg.get(\"cargo-watch.enable\") as boolean,\n-            arguments: this.cfg.get(\"cargo-watch.arguments\") as string[],\n-            allTargets: this.cfg.get(\"cargo-watch.allTargets\") as boolean,\n-            command: this.cfg.get(\"cargo-watch.command\") as string,\n+            enable: this.cfg.get<boolean>(\"cargo-watch.enable\")!,\n+            arguments: this.cfg.get<string[]>(\"cargo-watch.arguments\")!,\n+            allTargets: this.cfg.get<boolean>(\"cargo-watch.allTargets\")!,\n+            command: this.cfg.get<string>(\"cargo-watch.command\")!,\n         };\n     }\n \n-    get cargoFeatures(): CargoFeatures {\n+    get cargoFeatures() {\n         return {\n-            noDefaultFeatures: this.cfg.get(\"cargoFeatures.noDefaultFeatures\") as boolean,\n-            allFeatures: this.cfg.get(\"cargoFeatures.allFeatures\") as boolean,\n-            features: this.cfg.get(\"cargoFeatures.features\") as string[],\n-            loadOutDirsFromCheck: this.cfg.get(\"cargoFeatures.loadOutDirsFromCheck\") as boolean,\n+            noDefaultFeatures: this.cfg.get<boolean>(\"cargoFeatures.noDefaultFeatures\")!,\n+            allFeatures: this.cfg.get<boolean>(\"cargoFeatures.allFeatures\")!,\n+            features: this.cfg.get<string[]>(\"cargoFeatures.features\")!,\n+            loadOutDirsFromCheck: this.cfg.get<boolean>(\"cargoFeatures.loadOutDirsFromCheck\")!,\n         };\n     }\n-\n-    // for internal use\n-    get withSysroot() { return this.cfg.get(\"withSysroot\", true) as boolean; }\n }"}]}