{"sha": "669e75163957f8f2408d515ce2da3516cb31f747", "node_id": "C_kwDOAAsO6NoAKDY2OWU3NTE2Mzk1N2Y4ZjI0MDhkNTE1Y2UyZGEzNTE2Y2IzMWY3NDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T10:12:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T10:12:58Z"}, "message": "Auto merge of #104833 - Swatinem:async-identity-future, r=compiler-errors\n\nRemove `identity_future` indirection\n\nThis was previously needed because the indirection used to hide some unexplained lifetime errors, which it turned out were related to the `min_choice` algorithm.\n\nRemoving the indirection also solves a couple of cycle errors, large moves and makes async blocks support the `#[track_caller]`annotation.\n\nFixes https://github.com/rust-lang/rust/issues/104826.", "tree": {"sha": "e3c54495a9d4d36d84369db4b556a3faf560200d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3c54495a9d4d36d84369db4b556a3faf560200d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669e75163957f8f2408d515ce2da3516cb31f747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669e75163957f8f2408d515ce2da3516cb31f747", "html_url": "https://github.com/rust-lang/rust/commit/669e75163957f8f2408d515ce2da3516cb31f747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669e75163957f8f2408d515ce2da3516cb31f747/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0058748944abb3282aba0e0a74823c6411703565", "url": "https://api.github.com/repos/rust-lang/rust/commits/0058748944abb3282aba0e0a74823c6411703565", "html_url": "https://github.com/rust-lang/rust/commit/0058748944abb3282aba0e0a74823c6411703565"}, {"sha": "9f03cfc20712946725138c29dd6c78b64ee2bc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f03cfc20712946725138c29dd6c78b64ee2bc90", "html_url": "https://github.com/rust-lang/rust/commit/9f03cfc20712946725138c29dd6c78b64ee2bc90"}], "stats": {"total": 502, "additions": 145, "deletions": 357}, "files": [{"sha": "181f94ab74f93320110f2532557f6f80d721051d", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -32,7 +32,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {\n         ensure_sufficient_stack(|| {\n             match &e.kind {\n-                // Paranthesis expression does not have a HirId and is handled specially.\n+                // Parenthesis expression does not have a HirId and is handled specially.\n                 ExprKind::Paren(ex) => {\n                     let mut ex = self.lower_expr_mut(ex);\n                     // Include parens in span, but only if it is a super-span.\n@@ -63,6 +63,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::ForLoop(pat, head, body, opt_label) => {\n                     return self.lower_expr_for(e, pat, head, body, *opt_label);\n                 }\n+                // Similarly, async blocks do not use `e.id` but rather `closure_node_id`.\n+                ExprKind::Async(capture_clause, closure_node_id, block) => {\n+                    let hir_id = self.lower_node_id(*closure_node_id);\n+                    self.lower_attrs(hir_id, &e.attrs);\n+                    return self.make_async_expr(\n+                        *capture_clause,\n+                        hir_id,\n+                        *closure_node_id,\n+                        None,\n+                        e.span,\n+                        hir::AsyncGeneratorKind::Block,\n+                        |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n+                    );\n+                }\n                 _ => (),\n             }\n \n@@ -173,15 +187,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.arena.alloc_from_iter(arms.iter().map(|x| self.lower_arm(x))),\n                     hir::MatchSource::Normal,\n                 ),\n-                ExprKind::Async(capture_clause, closure_node_id, block) => self.make_async_expr(\n-                    *capture_clause,\n-                    hir_id,\n-                    *closure_node_id,\n-                    None,\n-                    e.span,\n-                    hir::AsyncGeneratorKind::Block,\n-                    |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n-                ),\n                 ExprKind::Await(expr) => {\n                     let dot_await_span = if expr.span.hi() < e.span.hi() {\n                         let span_with_whitespace = self\n@@ -315,7 +320,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n \n-                ExprKind::Paren(_) | ExprKind::ForLoop(..) => unreachable!(\"already handled\"),\n+                ExprKind::Paren(_) | ExprKind::ForLoop(..) | ExprKind::Async(..) => {\n+                    unreachable!(\"already handled\")\n+                }\n \n                 ExprKind::MacCall(_) => panic!(\"{:?} shouldn't exist here\", e.span),\n             };\n@@ -577,9 +584,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// This results in:\n     ///\n     /// ```text\n-    /// std::future::identity_future(static move? |_task_context| -> <ret_ty> {\n+    /// static move? |_task_context| -> <ret_ty> {\n     ///     <body>\n-    /// })\n+    /// }\n     /// ```\n     pub(super) fn make_async_expr(\n         &mut self,\n@@ -590,7 +597,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n-    ) -> hir::ExprKind<'hir> {\n+    ) -> hir::Expr<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n         // Resume argument type: `ResumeTy`\n@@ -655,13 +662,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         let hir_id = self.lower_node_id(closure_node_id);\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n-\n         if self.tcx.features().closure_track_caller\n             && let Some(attrs) = self.attrs.get(&outer_hir_id.local_id)\n             && attrs.into_iter().any(|attr| attr.has_name(sym::track_caller))\n         {\n+            let unstable_span =\n+                self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n             self.lower_attrs(\n                 hir_id,\n                 &[Attribute {\n@@ -680,22 +686,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             );\n         }\n \n-        let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };\n-\n-        // FIXME(swatinem):\n-        // For some reason, the async block needs to flow through *any*\n-        // call (like the identity function), as otherwise type and lifetime\n-        // inference have a hard time figuring things out.\n-        // Without this, we would get:\n-        // E0720 in tests/ui/impl-trait/in-trait/default-body-with-rpit.rs\n-        // E0700 in tests/ui/self/self_lifetime-async.rs\n-\n-        // `future::identity_future`:\n-        let identity_future =\n-            self.expr_lang_item_path(unstable_span, hir::LangItem::IdentityFuture, None);\n-\n-        // `future::identity_future(generator)`:\n-        hir::ExprKind::Call(self.arena.alloc(identity_future), arena_vec![self; generator])\n+        hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) }\n     }\n \n     /// Desugar `<expr>.await` into:\n@@ -1001,7 +992,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n \n             // Transform `async |x: u8| -> X { ... }` into\n-            // `|x: u8| identity_future(|| -> X { ... })`.\n+            // `|x: u8| || -> X { ... }`.\n             let body_id = this.lower_fn_body(&outer_decl, |this| {\n                 let async_ret_ty = if let FnRetTy::Ty(ty) = &decl.output {\n                     let itctx = ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock);\n@@ -1010,16 +1001,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     None\n                 };\n \n-                let async_body = this.make_async_expr(\n+                this.make_async_expr(\n                     capture_clause,\n                     closure_hir_id,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,\n                     hir::AsyncGeneratorKind::Closure,\n                     |this| this.with_new_scopes(|this| this.lower_expr_mut(body)),\n-                );\n-                this.expr(fn_decl_span, async_body)\n+                )\n             });\n             body_id\n         });"}, {"sha": "9a117ac9a3cf7c1fcef0d314859bccbbe5b15225", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1180,7 +1180,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 },\n             );\n \n-            (this.arena.alloc_from_iter(parameters), this.expr(body.span, async_expr))\n+            (this.arena.alloc_from_iter(parameters), async_expr)\n         })\n     }\n "}, {"sha": "72ff317d45d6ec8a798275623a55734f74f054c0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -296,7 +296,6 @@ language_item_table! {\n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n     ResumeTy,                sym::ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n-    IdentityFuture,          sym::identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n     GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n     Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;"}, {"sha": "ecbe4a97dd96750fc6f6ed77516863d0046a2fef", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -311,9 +311,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let fn_decl_span = if hir.body(body).generator_kind\n                 == Some(hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure))\n             {\n-                // Actually need to unwrap a few more layers of HIR to get to\n+                // Actually need to unwrap one more layer of HIR to get to\n                 // the _real_ closure...\n-                let async_closure = hir.parent_id(hir.parent_id(parent_hir_id));\n+                let async_closure = hir.parent_id(parent_hir_id);\n                 if let hir::Node::Expr(hir::Expr {\n                     kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                     .."}, {"sha": "4720306e159e5b8dbf1673eeebce287660afb373", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -924,12 +924,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir_id,\n                 kind: hir::ExprKind::Closure(..),\n                 ..\n-            }) if let Some(Node::Expr(&hir::Expr {\n-                hir_id,\n-                kind: hir::ExprKind::Call(..),\n-                ..\n-            })) = self.tcx.hir().find_parent(hir_id) &&\n-            let Some(Node::Item(&hir::Item {\n+            }) if let Some(Node::Item(&hir::Item {\n                 ident,\n                 kind: hir::ItemKind::Fn(ref sig, ..),\n                 .."}, {"sha": "d8b5b25aaeebdc39de681c401476291f8ea54d54", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -792,7 +792,6 @@ symbols! {\n         i64,\n         i8,\n         ident,\n-        identity_future,\n         if_let,\n         if_let_guard,\n         if_while_or_patterns,"}, {"sha": "5541c0850753d2d26025a628b3f59fb3702c2cbb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -3033,8 +3033,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n                 };\n \n-                let identity_future = tcx.require_lang_item(LangItem::IdentityFuture, None);\n-\n                 // Don't print the tuple of capture types\n                 'print: {\n                     if !is_upvar_tys_infer_tuple {\n@@ -3047,12 +3045,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 None => err.note(&msg),\n                             },\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-                                // Avoid printing the future from `core::future::identity_future`, it's not helpful\n-                                if tcx.parent(*def_id) == identity_future {\n-                                    break 'print;\n-                                }\n-\n-                                // If the previous type is `identity_future`, this is the future generated by the body of an async function.\n+                                // If the previous type is async fn, this is the future generated by the body of an async function.\n                                 // Avoid printing it twice (it was already printed in the `ty::Generator` arm below).\n                                 let is_future = tcx.ty_is_opaque_future(ty);\n                                 debug!("}, {"sha": "04f02d47f92cb058f9aa84154f8675f6b7838db4", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -67,14 +67,10 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n \n-// FIXME(swatinem): This fn is currently needed to work around shortcomings\n-// in type and lifetime inference.\n-// See the comment at the bottom of `LoweringContext::make_async_expr` and\n-// <https://github.com/rust-lang/rust/issues/104826>.\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n-#[lang = \"identity_future\"]\n+#[cfg_attr(bootstrap, lang = \"identity_future\")]\n pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n     f\n }"}, {"sha": "f97c6bcb5d18c3354d67ce761ccc24cb62a4d8b4", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::match_function_call_with_def_id;\n use clippy_utils::source::{position_before_rarrow, snippet_block, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -175,16 +174,10 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) -> Option<&'tcx Body<'tcx>> {\n     if_chain! {\n         if let Some(block_expr) = block.expr;\n-        if let Some(args) = cx\n-            .tcx\n-            .lang_items()\n-            .identity_future_fn()\n-            .and_then(|def_id| match_function_call_with_def_id(cx, block_expr, def_id));\n-        if args.len() == 1;\n         if let Expr {\n             kind: ExprKind::Closure(&Closure { body, .. }),\n             ..\n-        } = args[0];\n+        } = block_expr;\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "29830557a4454bcaf0e9df7e52719ecc95ebdf94", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1904,16 +1904,7 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n \n /// Peels away all the compiler generated code surrounding the body of an async function,\n pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    if let ExprKind::Call(\n-        _,\n-        &[\n-            Expr {\n-                kind: ExprKind::Closure(&Closure { body, .. }),\n-                ..\n-            },\n-        ],\n-    ) = body.value.kind\n-    {\n+    if let ExprKind::Closure(&Closure { body, .. }) = body.value.kind {\n         if let ExprKind::Block(\n             Block {\n                 stmts: [],"}, {"sha": "eb3e5189c823847c61ba3bf87df69d6dafd3e908", "filename": "src/tools/clippy/tests/ui/author/blocks.stdout", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Fblocks.stdout?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -43,11 +43,7 @@ if let ExprKind::Block(block, None) = expr.kind\n if let ExprKind::Closure(CaptureBy::Value, fn_decl, body_id, _, None) = expr.kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl.output\n     && expr1 = &cx.tcx.hir().body(body_id).value\n-    && let ExprKind::Call(func, args) = expr1.kind\n-    && let ExprKind::Path(ref qpath) = func.kind\n-    && matches!(qpath, QPath::LangItem(LangItem::IdentityFuture, _))\n-    && args.len() == 1\n-    && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = args[0].kind\n+    && let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = expr1.kind\n     && let FnRetTy::DefaultReturn(_) = fn_decl1.output\n     && expr2 = &cx.tcx.hir().body(body_id1).value\n     && let ExprKind::Block(block, None) = expr2.kind"}, {"sha": "9ad8a70a2ce61e1b7bf197109cf9fa522fd6fbee", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -4,15 +4,15 @@\n         _0: GeneratorSavedTy {\n             ty: impl std::future::Future<Output = ()>,\n             source_info: SourceInfo {\n-                span: $DIR/async_await.rs:15:8: 15:14 (#9),\n+                span: $DIR/async_await.rs:15:8: 15:14 (#8),\n                 scope: scope[0],\n             },\n             ignore_for_traits: false,\n         },\n         _1: GeneratorSavedTy {\n             ty: impl std::future::Future<Output = ()>,\n             source_info: SourceInfo {\n-                span: $DIR/async_await.rs:16:8: 16:14 (#12),\n+                span: $DIR/async_await.rs:16:8: 16:14 (#11),\n                 scope: scope[0],\n             },\n             ignore_for_traits: false,"}, {"sha": "042766f19ca904d24d8cc1cd13fa2a7eecd2fc15", "filename": "tests/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -2,16 +2,18 @@ error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:10:19\n    |\n LL |     fun(async {}, async {});\n-   |         --------  ^^^^^^^^\n-   |         |         |\n-   |         |         expected `async` block, found a different `async` block\n-   |         |         arguments to this function are incorrect\n-   |         the expected `async` block\n+   |     --- --------  ^^^^^^^^ expected `async` block, found a different `async` block\n+   |     |   |\n+   |     |   the expected `async` block\n+   |     arguments to this function are incorrect\n    |\n    = note: expected `async` block `[async block@$DIR/generator-desc.rs:10:9: 10:17]`\n               found `async` block `[async block@$DIR/generator-desc.rs:10:19: 10:27]`\n note: function defined here\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+  --> $DIR/generator-desc.rs:8:4\n+   |\n+LL | fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n+   |    ^^^                                -----\n \n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16"}, {"sha": "94f61caa25ddd93312719a9d41d40bbbe2f719e1", "filename": "tests/ui/async-await/large_moves.attribute.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Flarge_moves.attribute.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,14 +1,8 @@\n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:13:13\n+  --> $DIR/large_moves.rs:19:14\n    |\n-LL |       let x = async {\n-   |  _____________^\n-LL | |         let y = [0; 9999];\n-LL | |         dbg!(y);\n-LL | |         thing(&y).await;\n-LL | |         dbg!(y);\n-LL | |     };\n-   | |_____^ value moved from here\n+LL |     let z = (x, 42);\n+   |              ^ value moved from here\n    |\n    = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n note: the lint level is defined here\n@@ -17,14 +11,6 @@ note: the lint level is defined here\n LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:19:14\n-   |\n-LL |     let z = (x, 42);\n-   |              ^ value moved from here\n-   |\n-   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n-\n error: moving 10024 bytes\n   --> $DIR/large_moves.rs:19:13\n    |\n@@ -41,5 +27,5 @@ LL |     let a = z.0;\n    |\n    = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "94f61caa25ddd93312719a9d41d40bbbe2f719e1", "filename": "tests/ui/async-await/large_moves.option.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Flarge_moves.option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Flarge_moves.option.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,14 +1,8 @@\n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:13:13\n+  --> $DIR/large_moves.rs:19:14\n    |\n-LL |       let x = async {\n-   |  _____________^\n-LL | |         let y = [0; 9999];\n-LL | |         dbg!(y);\n-LL | |         thing(&y).await;\n-LL | |         dbg!(y);\n-LL | |     };\n-   | |_____^ value moved from here\n+LL |     let z = (x, 42);\n+   |              ^ value moved from here\n    |\n    = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n note: the lint level is defined here\n@@ -17,14 +11,6 @@ note: the lint level is defined here\n LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:19:14\n-   |\n-LL |     let z = (x, 42);\n-   |              ^ value moved from here\n-   |\n-   = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n-\n error: moving 10024 bytes\n   --> $DIR/large_moves.rs:19:13\n    |\n@@ -41,5 +27,5 @@ LL |     let a = z.0;\n    |\n    = note: The current maximum size is 1000, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "c8ed6bafe9c6d6be641d0545b2164f495f5c583d", "filename": "tests/ui/async-await/large_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Flarge_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Flarge_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Flarge_moves.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -10,7 +10,7 @@\n // compile-flags: -Zmir-opt-level=0\n \n fn main() {\n-    let x = async { //~ ERROR large_assignments\n+    let x = async {\n         let y = [0; 9999];\n         dbg!(y);\n         thing(&y).await;"}, {"sha": "b3c59734e036f7b0a57b729d99c3cd6f3026cc75", "filename": "tests/ui/async-await/no-const-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fno-const-async.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -3,4 +3,3 @@\n \n pub const async fn x() {}\n //~^ ERROR functions cannot be both `const` and `async`\n-//~| ERROR cycle detected"}, {"sha": "90ec646c8c09cbb6a8e9477fdbb830e8ee313f6e", "filename": "tests/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -7,36 +7,5 @@ LL | pub const async fn x() {}\n    |     |     `async` because of this\n    |     `const` because of this\n \n-error[E0391]: cycle detected when computing type of `x::{opaque#0}`\n-  --> $DIR/no-const-async.rs:4:24\n-   |\n-LL | pub const async fn x() {}\n-   |                        ^\n-   |\n-note: ...which requires borrow-checking `x`...\n-  --> $DIR/no-const-async.rs:4:1\n-   |\n-LL | pub const async fn x() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `x`...\n-  --> $DIR/no-const-async.rs:4:1\n-   |\n-LL | pub const async fn x() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `x`...\n-  --> $DIR/no-const-async.rs:4:1\n-   |\n-LL | pub const async fn x() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `x::{opaque#0}` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `x::{opaque#0}: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `x::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/no-const-async.rs:4:1\n-   |\n-LL | pub const async fn x() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "8ddd4ab11861522f9ad0bab78bb22b318d8b225c", "filename": "tests/ui/async-await/track-caller/async-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,9 +1,9 @@\n // edition:2021\n \n-#![feature(closure_track_caller, stmt_expr_attributes)]\n+#![feature(stmt_expr_attributes)]\n \n fn main() {\n     let _ = #[track_caller] async {\n-        //~^ ERROR attribute should be applied to a function definition [E0739]\n+        //~^ ERROR `#[track_caller]` on closures is currently unstable [E0658]\n     };\n }"}, {"sha": "21d1054d2206684da1faef75e4890494a890a2bf", "filename": "tests/ui/async-await/track-caller/async-block.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fasync-block.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,12 +1,12 @@\n-error[E0739]: attribute should be applied to a function definition\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n   --> $DIR/async-block.rs:6:13\n    |\n-LL |       let _ = #[track_caller] async {\n-   |  _____________^^^^^^^^^^^^^^^_-\n-LL | |\n-LL | |     };\n-   | |_____- not a function definition\n+LL |     let _ = #[track_caller] async {\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0739`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "65bb23e0b4b9ec7c1d3b8c8d631713ff2119d551", "filename": "tests/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -79,6 +79,16 @@ async fn foo_closure() {\n     c().await\n }\n \n+// Since compilation is expected to fail for this fn when using\n+// `nofeat`, we test that separately in `async-block.rs`\n+#[cfg(feat)]\n+async fn foo_block() {\n+    let a = #[track_caller] async {\n+        panic!();\n+    };\n+    a.await\n+}\n+\n fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n     let loc = Arc::new(Mutex::new(None));\n \n@@ -110,4 +120,7 @@ fn main() {\n \n     #[cfg(feat)]\n     assert_eq!(panicked_at(|| block_on(foo_closure())), 79);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_block())), 89);\n }"}, {"sha": "a1ef4732b631354edbec1b573e7716566768071f", "filename": "tests/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -4,7 +4,7 @@\n // compile-flags:-Z trait-solver=chalk\n // error-pattern:internal compiler error\n // failure-status:101\n-// normalize-stderr-test \"DefId([^)]*)\" -> \"...\"\n+// normalize-stderr-test \"DefId\\([^)]*\\)\" -> \"...\"\n // normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\""}, {"sha": "9c559640b23085550279e8beae950d322fd7a9ea", "filename": "tests/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,33 +1,3 @@\n-error[E0277]: `[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n-  --> $DIR/async.rs:23:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________-\n-LL | |     x\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_`[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n-   |   required by a bound introduced by this call\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:23:29: 25:2]`\n-   = note: [async fn body@$DIR/async.rs:23:29: 25:2] must be a future or must implement `IntoFuture` to be awaited\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:23:29: 25:2] as Future>::Output` cannot be known at compilation time\n-  --> $DIR/async.rs:23:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________^\n-LL | |     x\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:23:29: 25:2] as Future>::Output`\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n error[E0277]: `[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n   --> $DIR/async.rs:23:25\n    |\n@@ -37,7 +7,7 @@ LL | async fn foo(x: u32) -> u32 {\n    = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:23:29: 25:2]`\n    = note: [async fn body@$DIR/async.rs:23:29: 25:2] must be a future or must implement `IntoFuture` to be awaited\n \n-error: internal compiler error: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:23:29: 25:2]], def_id: ...) }, Term::Ty(u32)), []), depth=0)`\n+error: internal compiler error: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:23:29: 25:2]], def_id: ... }, Term::Ty(u32)), []), depth=0)`\n   --> $DIR/async.rs:23:25\n    |\n LL | async fn foo(x: u32) -> u32 {\n@@ -53,6 +23,6 @@ LL | async fn foo(x: u32) -> u32 {\n #8 [check_mod_item_types] checking item types in top-level module\n #9 [analysis] running analysis passes on this crate\n end of query stack\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a4c91f3bc1880334506cb6a564a65bc2e1a07661", "filename": "tests/ui/feature-gates/feature-gate-closure_track_caller.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,7 +1,9 @@\n+// edition:2021\n #![feature(stmt_expr_attributes)]\n #![feature(generators)]\n \n fn main() {\n     let _closure = #[track_caller] || {}; //~ `#[track_caller]` on closures\n     let _generator = #[track_caller] || { yield; }; //~ `#[track_caller]` on closures\n+    let _future = #[track_caller] async {}; //~ `#[track_caller]` on closures\n }"}, {"sha": "cf2ea5fe1cac36d30613582191d25cdd4e7b8052", "filename": "tests/ui/feature-gates/feature-gate-closure_track_caller.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-closure_track_caller.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `#[track_caller]` on closures is currently unstable\n-  --> $DIR/feature-gate-closure_track_caller.rs:5:20\n+  --> $DIR/feature-gate-closure_track_caller.rs:6:20\n    |\n LL |     let _closure = #[track_caller] || {};\n    |                    ^^^^^^^^^^^^^^^\n@@ -8,14 +8,23 @@ LL |     let _closure = #[track_caller] || {};\n    = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n \n error[E0658]: `#[track_caller]` on closures is currently unstable\n-  --> $DIR/feature-gate-closure_track_caller.rs:6:22\n+  --> $DIR/feature-gate-closure_track_caller.rs:7:22\n    |\n LL |     let _generator = #[track_caller] || { yield; };\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n    = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/feature-gate-closure_track_caller.rs:8:19\n+   |\n+LL |     let _future = #[track_caller] async {};\n+   |                   ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0558d95128f4a15c03025b27dbaa38fbaebd7bc7", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -1,5 +1,5 @@\n-// check-pass\n // edition:2021\n+// known-bug: #108304\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "b5fc9d44d36876eb3e6f35541c4d06b14d5f120c", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -0,0 +1,24 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/default-body-with-rpit.rs:11:9\n+   |\n+LL |         \"\"\n+   |         ^^ expected `impl Debug`, got `&'static str`\n+   |\n+note: previous use here\n+  --> $DIR/default-body-with-rpit.rs:10:39\n+   |\n+LL |       async fn baz(&self) -> impl Debug {\n+   |  _______________________________________^\n+LL | |         \"\"\n+LL | |     }\n+   | |_____^\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/default-body-with-rpit.rs:10:28\n+   |\n+LL |     async fn baz(&self) -> impl Debug {\n+   |                            ^^^^^^^^^^ cannot resolve opaque type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "7b5ab5f229835cd4c021c0d53ce4a9efbf8f7088", "filename": "tests/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -12,7 +12,6 @@ struct Bug {\n         }\n         let f: F = async { 1 };\n         //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructor of\n         1\n     }],\n }"}, {"sha": "05a2c135cf7c75baef5df18cd2676fe1dbad1d74", "filename": "tests/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -7,22 +7,13 @@ LL |         let f: F = async { 1 };\n    = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n    = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n \n-error[E0493]: destructor of `F` cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:13:13\n-   |\n-LL |         let f: F = async { 1 };\n-   |             ^ the destructor for this type cannot be evaluated in constants\n-...\n-LL |     }],\n-   |     - value is dropped here\n-\n error[E0271]: expected `[async block@$DIR/issue-78722.rs:11:13: 11:21]` to be a future that resolves to `u8`, but it resolves to `()`\n   --> $DIR/issue-78722.rs:9:30\n    |\n LL |         fn concrete_use() -> F {\n    |                              ^ expected `()`, found `u8`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0271, E0493, E0658.\n+Some errors have detailed explanations: E0271, E0658.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "71f18a27e7c119db1872c187ea215c14ec05507b", "filename": "tests/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -11,7 +11,6 @@ fn main() {\n     extern \"C\" fn ff4() {} // OK.\n     const async unsafe extern \"C\" fn ff5() {}\n     //~^ ERROR functions cannot be both `const` and `async`\n-    //~| ERROR cycle detected\n \n     trait X {\n         async fn ft1(); //~ ERROR functions in traits cannot be declared `async`\n@@ -34,7 +33,6 @@ fn main() {\n         //~^ ERROR functions in traits cannot be declared `async`\n         //~| ERROR functions in traits cannot be declared const\n         //~| ERROR functions cannot be both `const` and `async`\n-        //~| ERROR cycle detected\n     }\n \n     impl Y {\n@@ -44,7 +42,6 @@ fn main() {\n         extern \"C\" fn fi4() {} // OK.\n         const async unsafe extern \"C\" fn fi5() {}\n         //~^ ERROR functions cannot be both `const` and `async`\n-        //~| ERROR cycle detected\n     }\n \n     extern \"C\" {"}, {"sha": "7f7b7e835f82405e857806ea7c10e4190e76928f", "filename": "tests/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 19, "deletions": 127, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -8,19 +8,19 @@ LL |     const async unsafe extern \"C\" fn ff5() {}\n    |     `const` because of this\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:19:9\n+  --> $DIR/fn-header-semantic-fail.rs:18:9\n    |\n LL |         const fn ft3();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^ functions in traits cannot be const\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -29,19 +29,19 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    |         `const` because of this\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:31:9\n+  --> $DIR/fn-header-semantic-fail.rs:30:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -50,7 +50,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n+  --> $DIR/fn-header-semantic-fail.rs:43:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -59,7 +59,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:51:18\n+  --> $DIR/fn-header-semantic-fail.rs:48:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -72,7 +72,7 @@ LL |         fn fe1();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:52:19\n+  --> $DIR/fn-header-semantic-fail.rs:49:19\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -86,7 +86,7 @@ LL |         fn fe2();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:18\n+  --> $DIR/fn-header-semantic-fail.rs:50:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -100,7 +100,7 @@ LL |         fn fe3();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:23\n+  --> $DIR/fn-header-semantic-fail.rs:51:23\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -114,7 +114,7 @@ LL |         fn fe4();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:42\n+  --> $DIR/fn-header-semantic-fail.rs:52:42\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -128,7 +128,7 @@ LL |         fn fe5();\n    |         ~~\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:55:9\n+  --> $DIR/fn-header-semantic-fail.rs:52:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -137,7 +137,7 @@ LL |         const async unsafe extern \"C\" fn fe5();\n    |         `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:17:9\n+  --> $DIR/fn-header-semantic-fail.rs:16:9\n    |\n LL |         async fn ft1();\n    |         -----^^^^^^^^^^\n@@ -150,7 +150,7 @@ LL |         async fn ft1();\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:29:9\n+  --> $DIR/fn-header-semantic-fail.rs:28:9\n    |\n LL |         async fn ft1() {}\n    |         -----^^^^^^^^^\n@@ -176,7 +176,7 @@ LL |         async fn ft1() {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -188,115 +188,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n-error[E0391]: cycle detected when computing type of `main::ff5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:12:44\n-   |\n-LL |     const async unsafe extern \"C\" fn ff5() {}\n-   |                                            ^\n-   |\n-note: ...which requires borrow-checking `main::ff5`...\n-  --> $DIR/fn-header-semantic-fail.rs:12:5\n-   |\n-LL |     const async unsafe extern \"C\" fn ff5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `main::ff5`...\n-  --> $DIR/fn-header-semantic-fail.rs:12:5\n-   |\n-LL |     const async unsafe extern \"C\" fn ff5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::ff5`...\n-  --> $DIR/fn-header-semantic-fail.rs:12:5\n-   |\n-LL |     const async unsafe extern \"C\" fn ff5() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `main::ff5::{opaque#0}` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `main::ff5::{opaque#0}: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::ff5::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/fn-header-semantic-fail.rs:5:1\n-   |\n-LL | / #![feature(const_extern_fn)]\n-LL | |\n-LL | | fn main() {\n-LL | |     async fn ff1() {} // OK.\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:33:48\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |                                                ^\n-   |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/fn-header-semantic-fail.rs:5:1\n-   |\n-LL | / #![feature(const_extern_fn)]\n-LL | |\n-LL | | fn main() {\n-LL | |     async fn ff1() {} // OK.\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:45:48\n-   |\n-LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |                                                ^\n-   |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n-   |\n-LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n-   |\n-LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:45:9\n-   |\n-LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires computing whether `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}` is freeze...\n-   = note: ...which requires evaluating trait selection obligation `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/fn-header-semantic-fail.rs:5:1\n-   |\n-LL | / #![feature(const_extern_fn)]\n-LL | |\n-LL | | fn main() {\n-LL | |     async fn ff1() {} // OK.\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 21 previous errors\n+error: aborting due to 18 previous errors\n \n-Some errors have detailed explanations: E0379, E0391, E0706.\n+Some errors have detailed explanations: E0379, E0706.\n For more information about an error, try `rustc --explain E0379`."}, {"sha": "b827beb504d5c974ca1a71414fee3e06c6958564", "filename": "tests/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/669e75163957f8f2408d515ce2da3516cb31f747/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=669e75163957f8f2408d515ce2da3516cb31f747", "patch": "@@ -69,18 +69,15 @@ note: required by a bound in `Pin::<P>::new`\n error[E0308]: mismatched types\n   --> $DIR/expected-boxed-future-isnt-pinned.rs:28:5\n    |\n+LL |   fn zap() -> BoxFuture<'static, i32> {\n+   |               ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type\n LL | /     async {\n LL | |         42\n LL | |     }\n-   | |     ^\n-   | |     |\n-   | |_____expected `Pin<Box<...>>`, found `async` block\n-   |       arguments to this function are incorrect\n+   | |_____^ expected `Pin<Box<...>>`, found `async` block\n    |\n-   = note:     expected struct `Pin<Box<dyn Future<Output = i32> + Send>>`\n+   = note:     expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n            found `async` block `[async block@$DIR/expected-boxed-future-isnt-pinned.rs:28:5: 30:6]`\n-note: function defined here\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}]}