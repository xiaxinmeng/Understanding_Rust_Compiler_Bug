{"sha": "35e3b4d1d879851610cff152f0996a895da7cae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTNiNGQxZDg3OTg1MTYxMGNmZjE1MmYwOTk2YTg5NWRhN2NhZTE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-01-22T23:50:38Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-02-10T19:44:12Z"}, "message": "tests for `#[repr(no_niche)]`.", "tree": {"sha": "ae95c9024bd3c7ee2ca38969ff99e437c9fd38f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae95c9024bd3c7ee2ca38969ff99e437c9fd38f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e3b4d1d879851610cff152f0996a895da7cae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e3b4d1d879851610cff152f0996a895da7cae1", "html_url": "https://github.com/rust-lang/rust/commit/35e3b4d1d879851610cff152f0996a895da7cae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e3b4d1d879851610cff152f0996a895da7cae1/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88747ffe6344e074b52727d8bcf2416032c2d3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/88747ffe6344e074b52727d8bcf2416032c2d3f2", "html_url": "https://github.com/rust-lang/rust/commit/88747ffe6344e074b52727d8bcf2416032c2d3f2"}], "stats": {"total": 417, "additions": 417, "deletions": 0}, "files": [{"sha": "8872ee7119e4a399bba16b4895b5d6bc6026f4a4", "filename": "src/test/ui/repr/feature-gate-no-niche.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs?ref=35e3b4d1d879851610cff152f0996a895da7cae1", "patch": "@@ -0,0 +1,20 @@\n+use std::num::NonZeroU8 as N8;\n+use std::num::NonZeroU16 as N16;\n+\n+#[repr(no_niche)]\n+pub struct Cloaked(N16);\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+#[repr(transparent, no_niche)]\n+pub struct Shadowy(N16);\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+#[repr(no_niche)]\n+pub enum Cloaked1 { _A(N16), }\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+#[repr(no_niche)]\n+pub enum Cloaked2 { _A(N16), _B(u8, N8) }\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+fn main() { }"}, {"sha": "34fd417cc99a2e0c4f7e085cf3b6fe82d4e9f49e", "filename": "src/test/ui/repr/feature-gate-no-niche.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr?ref=35e3b4d1d879851610cff152f0996a895da7cae1", "patch": "@@ -0,0 +1,35 @@\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:4:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:8:21\n+   |\n+LL | #[repr(transparent, no_niche)]\n+   |                     ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:12:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:16:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "308634651a384151eb8ee9a6d3dfc064ea8f7188", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs?ref=35e3b4d1d879851610cff152f0996a895da7cae1", "patch": "@@ -0,0 +1,14 @@\n+#![feature(no_niche)]\n+\n+use std::num::NonZeroU8 as N8;\n+use std::num::NonZeroU16 as N16;\n+\n+#[repr(no_niche)]\n+pub union Cloaked1 { _A: N16 }\n+//~^^ ERROR attribute should be applied to struct or enum [E0517]\n+\n+#[repr(no_niche)]\n+pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n+//~^^ ERROR attribute should be applied to struct or enum [E0517]\n+\n+fn main() { }"}, {"sha": "4c542c5f0da6438381ce2a8221cc37408c82c684", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr?ref=35e3b4d1d879851610cff152f0996a895da7cae1", "patch": "@@ -0,0 +1,19 @@\n+error[E0517]: attribute should be applied to struct or enum\n+  --> $DIR/repr-no-niche-inapplicable-to-unions.rs:6:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+LL | pub union Cloaked1 { _A: N16 }\n+   | ------------------------------ not a struct or enum\n+\n+error[E0517]: attribute should be applied to struct or enum\n+  --> $DIR/repr-no-niche-inapplicable-to-unions.rs:10:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+LL | pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n+   | -------------------------------------------- not a struct or enum\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0517`."}, {"sha": "a7f0d509af52169e39a6c343bd1db2ba026bb89e", "filename": "src/test/ui/repr/repr-no-niche.rs", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e3b4d1d879851610cff152f0996a895da7cae1/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs?ref=35e3b4d1d879851610cff152f0996a895da7cae1", "patch": "@@ -0,0 +1,329 @@\n+// run-pass\n+\n+// This file tests repr(no_niche), which causes an struct/enum to hide\n+// any niche space that may exist in its internal state from the\n+// context it appears in.\n+\n+// Here are the axes this test is seeking to cover:\n+//\n+// repr annotation:\n+// visible: (); cloaked: (no_niche); transparent: (transparent); shadowy: (transparent, no_niche)\n+//\n+// enum vs struct\n+//\n+// niche-type via type-parameter vs inline declaration\n+\n+#![feature(decl_macro)]\n+#![feature(no_niche)]\n+\n+use std::mem::size_of;\n+use std::num::{NonZeroU8, NonZeroU16};\n+\n+mod struct_inline {\n+    use std::num::NonZeroU16 as N16;\n+\n+    #[derive(Debug)] pub struct Visible(N16);\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub struct Cloaked(N16);\n+\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub struct Transparent(N16);\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub struct Shadowy(N16);\n+}\n+\n+mod struct_param {\n+    #[derive(Debug)] pub struct Visible<T>(T);\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub struct Cloaked<T>(T);\n+\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub struct Transparent<T>(T);\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub struct Shadowy<T>(T);\n+}\n+\n+mod enum_inline {\n+    use crate::two_fifty_six_variant_enum;\n+    use std::num::{NonZeroU8 as N8, NonZeroU16 as N16};\n+\n+    #[derive(Debug)] pub enum Visible1 { _A(N16), }\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub enum Cloaked1 { _A(N16), }\n+\n+    // (N.B.: transparent enums must be univariant)\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub enum Transparent { _A(N16), }\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub enum Shadowy { _A(N16), }\n+\n+    // including multivariant enums for completeness. Payload and\n+    // number of variants (i.e. discriminant size) have been chosen so\n+    // that layout including discriminant is 4 bytes, with no space in\n+    // padding to hide another discrimnant from the surrounding\n+    // context.\n+    //\n+    // (Note that multivariant enums cannot usefully expose a niche in\n+    // general; this test is relying on that.)\n+    two_fifty_six_variant_enum!(Visible2, N8);\n+\n+    #[repr(no_niche)]\n+    two_fifty_six_variant_enum!(Cloaked2, N8);\n+}\n+\n+mod enum_param {\n+    use super::two_fifty_six_variant_enum;\n+\n+    #[derive(Debug)] pub enum Visible1<T> { _A(T), }\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub enum Cloaked1<T> { _A(T), }\n+\n+    // (N.B.: transparent enums must be univariant)\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub enum Transparent<T> { _A(T), }\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub enum Shadowy<T> { _A(T), }\n+\n+    // including multivariant enums for completeness. Same notes apply\n+    // here as above (assuming `T` is instantiated with `NonZeroU8`).\n+    two_fifty_six_variant_enum!(Visible2<T>);\n+\n+    #[repr(no_niche)]\n+    two_fifty_six_variant_enum!(Cloaked2<T>);\n+}\n+\n+fn main() {\n+    // sanity-checks\n+    assert_eq!(size_of::<struct_inline::Visible>(),               2);\n+    assert_eq!(size_of::<struct_inline::Cloaked>(),               2);\n+    assert_eq!(size_of::<struct_inline::Transparent>(),           2);\n+    assert_eq!(size_of::<struct_inline::Shadowy>(),               2);\n+\n+    assert_eq!(size_of::<struct_param::Visible<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<struct_param::Cloaked<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<struct_param::Transparent<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<struct_param::Shadowy<NonZeroU16>>(), 2);\n+\n+    assert_eq!(size_of::<enum_inline::Visible1>(),    2);\n+    assert_eq!(size_of::<enum_inline::Cloaked1>(),    2);\n+    assert_eq!(size_of::<enum_inline::Transparent>(), 2); // transparent enums are univariant\n+    assert_eq!(size_of::<enum_inline::Shadowy>(),     2);\n+    assert_eq!(size_of::<enum_inline::Visible2>(),    4);\n+    assert_eq!(size_of::<enum_inline::Cloaked2>(),    4);\n+\n+    assert_eq!(size_of::<enum_param::Visible1<NonZeroU16>>(),    2);\n+    assert_eq!(size_of::<enum_param::Cloaked1<NonZeroU16>>(),    2);\n+    assert_eq!(size_of::<enum_param::Transparent<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<enum_param::Shadowy<NonZeroU16>>(),     2);\n+    assert_eq!(size_of::<enum_param::Visible2<NonZeroU8>>(),     4);\n+    assert_eq!(size_of::<enum_param::Cloaked2<NonZeroU8>>(),     4);\n+\n+    // now the actual tests of no_niche: how do inputs above compose\n+    // with `Option` type constructor. The cases with a `_+2` are the\n+    // ones where no_niche fires.\n+    assert_eq!(size_of::<Option<struct_inline::Visible>>(),       2);\n+    assert_eq!(size_of::<Option<struct_inline::Cloaked>>(),       2+2);\n+    assert_eq!(size_of::<Option<struct_inline::Transparent>>(),   2);\n+    assert_eq!(size_of::<Option<struct_inline::Shadowy>>(),       2+2);\n+\n+    assert_eq!(size_of::<Option<struct_param::Visible<NonZeroU16>>>(),     2);\n+    assert_eq!(size_of::<Option<struct_param::Cloaked<NonZeroU16>>>(),     2+2);\n+    assert_eq!(size_of::<Option<struct_param::Transparent<NonZeroU16>>>(), 2);\n+    assert_eq!(size_of::<Option<struct_param::Shadowy<NonZeroU16>>>(),     2+2);\n+\n+    assert_eq!(size_of::<Option<enum_inline::Visible1>>(),    2);\n+    assert_eq!(size_of::<Option<enum_inline::Cloaked1>>(),    2+2);\n+    assert_eq!(size_of::<Option<enum_inline::Transparent>>(), 2);\n+    assert_eq!(size_of::<Option<enum_inline::Shadowy>>(),     2+2);\n+    // cannot use niche of multivariant payload\n+    assert_eq!(size_of::<Option<enum_inline::Visible2>>(),    4+2);\n+    assert_eq!(size_of::<Option<enum_inline::Cloaked2>>(),    4+2);\n+\n+    assert_eq!(size_of::<Option<enum_param::Visible1<NonZeroU16>>>(),    2);\n+    assert_eq!(size_of::<Option<enum_param::Cloaked1<NonZeroU16>>>(),    2+2);\n+    assert_eq!(size_of::<Option<enum_param::Transparent<NonZeroU16>>>(), 2);\n+    assert_eq!(size_of::<Option<enum_param::Shadowy<NonZeroU16>>>(),     2+2);\n+    // cannot use niche of multivariant payload\n+    assert_eq!(size_of::<Option<enum_param::Visible2<NonZeroU8>>>(),    4+2);\n+    assert_eq!(size_of::<Option<enum_param::Cloaked2<NonZeroU8>>>(),    4+2);\n+}\n+\n+macro two_fifty_six_variant_enum {\n+    ($name:ident<$param:ident>) => {\n+        #[derive(Debug)]\n+        pub enum $name<$param> {\n+            _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n+            _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n+            _V08($param, u16), _V09(u16, $param), _V0a($param, u16), _V0b(u16, $param),\n+            _V0c($param, u16), _V0d(u16, $param), _V0e($param, u16), _V0f(u16, $param),\n+\n+            _V10($param, u16), _V11(u16, $param), _V12($param, u16), _V13(u16, $param),\n+            _V14($param, u16), _V15(u16, $param), _V16($param, u16), _V17(u16, $param),\n+            _V18($param, u16), _V19(u16, $param), _V1a($param, u16), _V1b(u16, $param),\n+            _V1c($param, u16), _V1d(u16, $param), _V1e($param, u16), _V1f(u16, $param),\n+\n+            _V20($param, u16), _V21(u16, $param), _V22($param, u16), _V23(u16, $param),\n+            _V24($param, u16), _V25(u16, $param), _V26($param, u16), _V27(u16, $param),\n+            _V28($param, u16), _V29(u16, $param), _V2a($param, u16), _V2b(u16, $param),\n+            _V2c($param, u16), _V2d(u16, $param), _V2e($param, u16), _V2f(u16, $param),\n+\n+            _V30($param, u16), _V31(u16, $param), _V32($param, u16), _V33(u16, $param),\n+            _V34($param, u16), _V35(u16, $param), _V36($param, u16), _V37(u16, $param),\n+            _V38($param, u16), _V39(u16, $param), _V3a($param, u16), _V3b(u16, $param),\n+            _V3c($param, u16), _V3d(u16, $param), _V3e($param, u16), _V3f(u16, $param),\n+\n+            _V40($param, u16), _V41(u16, $param), _V42($param, u16), _V43(u16, $param),\n+            _V44($param, u16), _V45(u16, $param), _V46($param, u16), _V47(u16, $param),\n+            _V48($param, u16), _V49(u16, $param), _V4a($param, u16), _V4b(u16, $param),\n+            _V4c($param, u16), _V4d(u16, $param), _V4e($param, u16), _V4f(u16, $param),\n+\n+            _V50($param, u16), _V51(u16, $param), _V52($param, u16), _V53(u16, $param),\n+            _V54($param, u16), _V55(u16, $param), _V56($param, u16), _V57(u16, $param),\n+            _V58($param, u16), _V59(u16, $param), _V5a($param, u16), _V5b(u16, $param),\n+            _V5c($param, u16), _V5d(u16, $param), _V5e($param, u16), _V5f(u16, $param),\n+\n+            _V60($param, u16), _V61(u16, $param), _V62($param, u16), _V63(u16, $param),\n+            _V64($param, u16), _V65(u16, $param), _V66($param, u16), _V67(u16, $param),\n+            _V68($param, u16), _V69(u16, $param), _V6a($param, u16), _V6b(u16, $param),\n+            _V6c($param, u16), _V6d(u16, $param), _V6e($param, u16), _V6f(u16, $param),\n+\n+            _V70($param, u16), _V71(u16, $param), _V72($param, u16), _V73(u16, $param),\n+            _V74($param, u16), _V75(u16, $param), _V76($param, u16), _V77(u16, $param),\n+            _V78($param, u16), _V79(u16, $param), _V7a($param, u16), _V7b(u16, $param),\n+            _V7c($param, u16), _V7d(u16, $param), _V7e($param, u16), _V7f(u16, $param),\n+\n+            _V80($param, u16), _V81(u16, $param), _V82($param, u16), _V83(u16, $param),\n+            _V84($param, u16), _V85(u16, $param), _V86($param, u16), _V87(u16, $param),\n+            _V88($param, u16), _V89(u16, $param), _V8a($param, u16), _V8b(u16, $param),\n+            _V8c($param, u16), _V8d(u16, $param), _V8e($param, u16), _V8f(u16, $param),\n+\n+            _V90($param, u16), _V91(u16, $param), _V92($param, u16), _V93(u16, $param),\n+            _V94($param, u16), _V95(u16, $param), _V96($param, u16), _V97(u16, $param),\n+            _V98($param, u16), _V99(u16, $param), _V9a($param, u16), _V9b(u16, $param),\n+            _V9c($param, u16), _V9d(u16, $param), _V9e($param, u16), _V9f(u16, $param),\n+\n+            _Va0($param, u16), _Va1(u16, $param), _Va2($param, u16), _Va3(u16, $param),\n+            _Va4($param, u16), _Va5(u16, $param), _Va6($param, u16), _Va7(u16, $param),\n+            _Va8($param, u16), _Va9(u16, $param), _Vaa($param, u16), _Vab(u16, $param),\n+            _Vac($param, u16), _Vad(u16, $param), _Vae($param, u16), _Vaf(u16, $param),\n+\n+            _Vb0($param, u16), _Vb1(u16, $param), _Vb2($param, u16), _Vb3(u16, $param),\n+            _Vb4($param, u16), _Vb5(u16, $param), _Vb6($param, u16), _Vb7(u16, $param),\n+            _Vb8($param, u16), _Vb9(u16, $param), _Vba($param, u16), _Vbb(u16, $param),\n+            _Vbc($param, u16), _Vbd(u16, $param), _Vbe($param, u16), _Vbf(u16, $param),\n+\n+            _Vc0($param, u16), _Vc1(u16, $param), _Vc2($param, u16), _Vc3(u16, $param),\n+            _Vc4($param, u16), _Vc5(u16, $param), _Vc6($param, u16), _Vc7(u16, $param),\n+            _Vc8($param, u16), _Vc9(u16, $param), _Vca($param, u16), _Vcb(u16, $param),\n+            _Vcc($param, u16), _Vcd(u16, $param), _Vce($param, u16), _Vcf(u16, $param),\n+\n+            _Vd0($param, u16), _Vd1(u16, $param), _Vd2($param, u16), _Vd3(u16, $param),\n+            _Vd4($param, u16), _Vd5(u16, $param), _Vd6($param, u16), _Vd7(u16, $param),\n+            _Vd8($param, u16), _Vd9(u16, $param), _Vda($param, u16), _Vdb(u16, $param),\n+            _Vdc($param, u16), _Vdd(u16, $param), _Vde($param, u16), _Vdf(u16, $param),\n+\n+            _Ve0($param, u16), _Ve1(u16, $param), _Ve2($param, u16), _Ve3(u16, $param),\n+            _Ve4($param, u16), _Ve5(u16, $param), _Ve6($param, u16), _Ve7(u16, $param),\n+            _Ve8($param, u16), _Ve9(u16, $param), _Vea($param, u16), _Veb(u16, $param),\n+            _Vec($param, u16), _Ved(u16, $param), _Vee($param, u16), _Vef(u16, $param),\n+\n+            _Vf0($param, u16), _Vf1(u16, $param), _Vf2($param, u16), _Vf3(u16, $param),\n+            _Vf4($param, u16), _Vf5(u16, $param), _Vf6($param, u16), _Vf7(u16, $param),\n+            _Vf8($param, u16), _Vf9(u16, $param), _Vfa($param, u16), _Vfb(u16, $param),\n+            _Vfc($param, u16), _Vfd(u16, $param), _Vfe($param, u16), _Vff(u16, $param),\n+        }\n+    },\n+\n+    ($name:ident, $param:ty) => {\n+        #[derive(Debug)]\n+        pub enum $name {\n+            _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n+            _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n+            _V08($param, u16), _V09(u16, $param), _V0a($param, u16), _V0b(u16, $param),\n+            _V0c($param, u16), _V0d(u16, $param), _V0e($param, u16), _V0f(u16, $param),\n+\n+            _V10($param, u16), _V11(u16, $param), _V12($param, u16), _V13(u16, $param),\n+            _V14($param, u16), _V15(u16, $param), _V16($param, u16), _V17(u16, $param),\n+            _V18($param, u16), _V19(u16, $param), _V1a($param, u16), _V1b(u16, $param),\n+            _V1c($param, u16), _V1d(u16, $param), _V1e($param, u16), _V1f(u16, $param),\n+\n+            _V20($param, u16), _V21(u16, $param), _V22($param, u16), _V23(u16, $param),\n+            _V24($param, u16), _V25(u16, $param), _V26($param, u16), _V27(u16, $param),\n+            _V28($param, u16), _V29(u16, $param), _V2a($param, u16), _V2b(u16, $param),\n+            _V2c($param, u16), _V2d(u16, $param), _V2e($param, u16), _V2f(u16, $param),\n+\n+            _V30($param, u16), _V31(u16, $param), _V32($param, u16), _V33(u16, $param),\n+            _V34($param, u16), _V35(u16, $param), _V36($param, u16), _V37(u16, $param),\n+            _V38($param, u16), _V39(u16, $param), _V3a($param, u16), _V3b(u16, $param),\n+            _V3c($param, u16), _V3d(u16, $param), _V3e($param, u16), _V3f(u16, $param),\n+\n+            _V40($param, u16), _V41(u16, $param), _V42($param, u16), _V43(u16, $param),\n+            _V44($param, u16), _V45(u16, $param), _V46($param, u16), _V47(u16, $param),\n+            _V48($param, u16), _V49(u16, $param), _V4a($param, u16), _V4b(u16, $param),\n+            _V4c($param, u16), _V4d(u16, $param), _V4e($param, u16), _V4f(u16, $param),\n+\n+            _V50($param, u16), _V51(u16, $param), _V52($param, u16), _V53(u16, $param),\n+            _V54($param, u16), _V55(u16, $param), _V56($param, u16), _V57(u16, $param),\n+            _V58($param, u16), _V59(u16, $param), _V5a($param, u16), _V5b(u16, $param),\n+            _V5c($param, u16), _V5d(u16, $param), _V5e($param, u16), _V5f(u16, $param),\n+\n+            _V60($param, u16), _V61(u16, $param), _V62($param, u16), _V63(u16, $param),\n+            _V64($param, u16), _V65(u16, $param), _V66($param, u16), _V67(u16, $param),\n+            _V68($param, u16), _V69(u16, $param), _V6a($param, u16), _V6b(u16, $param),\n+            _V6c($param, u16), _V6d(u16, $param), _V6e($param, u16), _V6f(u16, $param),\n+\n+            _V70($param, u16), _V71(u16, $param), _V72($param, u16), _V73(u16, $param),\n+            _V74($param, u16), _V75(u16, $param), _V76($param, u16), _V77(u16, $param),\n+            _V78($param, u16), _V79(u16, $param), _V7a($param, u16), _V7b(u16, $param),\n+            _V7c($param, u16), _V7d(u16, $param), _V7e($param, u16), _V7f(u16, $param),\n+\n+            _V80($param, u16), _V81(u16, $param), _V82($param, u16), _V83(u16, $param),\n+            _V84($param, u16), _V85(u16, $param), _V86($param, u16), _V87(u16, $param),\n+            _V88($param, u16), _V89(u16, $param), _V8a($param, u16), _V8b(u16, $param),\n+            _V8c($param, u16), _V8d(u16, $param), _V8e($param, u16), _V8f(u16, $param),\n+\n+            _V90($param, u16), _V91(u16, $param), _V92($param, u16), _V93(u16, $param),\n+            _V94($param, u16), _V95(u16, $param), _V96($param, u16), _V97(u16, $param),\n+            _V98($param, u16), _V99(u16, $param), _V9a($param, u16), _V9b(u16, $param),\n+            _V9c($param, u16), _V9d(u16, $param), _V9e($param, u16), _V9f(u16, $param),\n+\n+            _Va0($param, u16), _Va1(u16, $param), _Va2($param, u16), _Va3(u16, $param),\n+            _Va4($param, u16), _Va5(u16, $param), _Va6($param, u16), _Va7(u16, $param),\n+            _Va8($param, u16), _Va9(u16, $param), _Vaa($param, u16), _Vab(u16, $param),\n+            _Vac($param, u16), _Vad(u16, $param), _Vae($param, u16), _Vaf(u16, $param),\n+\n+            _Vb0($param, u16), _Vb1(u16, $param), _Vb2($param, u16), _Vb3(u16, $param),\n+            _Vb4($param, u16), _Vb5(u16, $param), _Vb6($param, u16), _Vb7(u16, $param),\n+            _Vb8($param, u16), _Vb9(u16, $param), _Vba($param, u16), _Vbb(u16, $param),\n+            _Vbc($param, u16), _Vbd(u16, $param), _Vbe($param, u16), _Vbf(u16, $param),\n+\n+            _Vc0($param, u16), _Vc1(u16, $param), _Vc2($param, u16), _Vc3(u16, $param),\n+            _Vc4($param, u16), _Vc5(u16, $param), _Vc6($param, u16), _Vc7(u16, $param),\n+            _Vc8($param, u16), _Vc9(u16, $param), _Vca($param, u16), _Vcb(u16, $param),\n+            _Vcc($param, u16), _Vcd(u16, $param), _Vce($param, u16), _Vcf(u16, $param),\n+\n+            _Vd0($param, u16), _Vd1(u16, $param), _Vd2($param, u16), _Vd3(u16, $param),\n+            _Vd4($param, u16), _Vd5(u16, $param), _Vd6($param, u16), _Vd7(u16, $param),\n+            _Vd8($param, u16), _Vd9(u16, $param), _Vda($param, u16), _Vdb(u16, $param),\n+            _Vdc($param, u16), _Vdd(u16, $param), _Vde($param, u16), _Vdf(u16, $param),\n+\n+            _Ve0($param, u16), _Ve1(u16, $param), _Ve2($param, u16), _Ve3(u16, $param),\n+            _Ve4($param, u16), _Ve5(u16, $param), _Ve6($param, u16), _Ve7(u16, $param),\n+            _Ve8($param, u16), _Ve9(u16, $param), _Vea($param, u16), _Veb(u16, $param),\n+            _Vec($param, u16), _Ved(u16, $param), _Vee($param, u16), _Vef(u16, $param),\n+\n+            _Vf0($param, u16), _Vf1(u16, $param), _Vf2($param, u16), _Vf3(u16, $param),\n+            _Vf4($param, u16), _Vf5(u16, $param), _Vf6($param, u16), _Vf7(u16, $param),\n+            _Vf8($param, u16), _Vf9(u16, $param), _Vfa($param, u16), _Vfb(u16, $param),\n+            _Vfc($param, u16), _Vfd(u16, $param), _Vfe($param, u16), _Vff(u16, $param),\n+        }\n+    }\n+}"}]}