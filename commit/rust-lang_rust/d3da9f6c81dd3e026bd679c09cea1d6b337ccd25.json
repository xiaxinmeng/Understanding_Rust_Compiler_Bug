{"sha": "d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZGE5ZjZjODFkZDNlMDI2YmQ2NzljMDljZWExZDZiMzM3Y2NkMjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-31T09:36:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-31T09:36:53Z"}, "message": "Merge branch 'pr-260'\n\nConflicts:\n\tsrc/lib.rs", "tree": {"sha": "f4e1dc62da8f6d5bf74f573c8595ff22d067e396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e1dc62da8f6d5bf74f573c8595ff22d067e396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "html_url": "https://github.com/rust-lang/rust/commit/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994124521e45cedde4f099677b27ca24977dc142", "url": "https://api.github.com/repos/rust-lang/rust/commits/994124521e45cedde4f099677b27ca24977dc142", "html_url": "https://github.com/rust-lang/rust/commit/994124521e45cedde4f099677b27ca24977dc142"}, {"sha": "03abe275b212890416b3015da8c2b323e946f424", "url": "https://api.github.com/repos/rust-lang/rust/commits/03abe275b212890416b3015da8c2b323e946f424", "html_url": "https://github.com/rust-lang/rust/commit/03abe275b212890416b3015da8c2b323e946f424"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "27be09c612783e3e1518a48b6a2ac92ae95c9b28", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "patch": "@@ -4,7 +4,7 @@\n A collection of lints that give helpful tips to newbies and catch oversights.\n \n ##Lints\n-There are 51 lints included in this crate:\n+There are 52 lints included in this crate:\n \n name                                                                                                 | default | meaning\n -----------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -43,6 +43,7 @@ name\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                   | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)             | warn    | using Range::step_by(0), which produces an infinite iterator\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)               | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+[redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)               | warn    | using `name @ _` in a pattern\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)             | allow   | using `Result.unwrap()`, which might be better handled\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                         | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                           | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`"}, {"sha": "7d6876ad839dd58c94ebad8935104cc1759fd866", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "patch": "@@ -75,6 +75,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::CastPass as LintPassObject);\n     reg.register_lint_pass(box types::TypeComplexityPass as LintPassObject);\n     reg.register_lint_pass(box matches::MatchPass as LintPassObject);\n+    reg.register_lint_pass(box misc::PatternPass as LintPassObject);\n \n     reg.register_lint_group(\"shadow\", vec![\n         shadow::SHADOW_REUSE,\n@@ -110,6 +111,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::CMP_OWNED,\n         misc::FLOAT_CMP,\n         misc::MODULO_ONE,\n+        misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n         mut_mut::MUT_MUT,\n         needless_bool::NEEDLESS_BOOL,"}, {"sha": "26493080d8738f98575c532f7fa50d94b1efba54", "filename": "src/misc.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "patch": "@@ -191,3 +191,24 @@ fn is_lit_one(expr: &Expr) -> bool {\n     }\n     false\n }\n+\n+declare_lint!(pub REDUNDANT_PATTERN, Warn, \"using `name @ _` in a pattern\");\n+\n+#[derive(Copy,Clone)]\n+pub struct PatternPass;\n+\n+impl LintPass for PatternPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(REDUNDANT_PATTERN)\n+    }\n+\n+    fn check_pat(&mut self, cx: &Context, pat: &Pat) {\n+        if let PatIdent(_, ref ident, Some(ref right)) = pat.node {\n+            if right.node == PatWild(PatWildSingle) {\n+                cx.span_lint(REDUNDANT_PATTERN, pat.span, &format!(\n+                    \"the `{} @ _` pattern can be written as just `{}`\",\n+                    ident.node.name, ident.node.name));\n+            }\n+        }\n+    }\n+}"}, {"sha": "62bd2c43cc1487a2c3f0dd1fd253674c0b4564db", "filename": "tests/compile-fail/patterns.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/tests%2Fcompile-fail%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3da9f6c81dd3e026bd679c09cea1d6b337ccd25/tests%2Fcompile-fail%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpatterns.rs?ref=d3da9f6c81dd3e026bd679c09cea1d6b337ccd25", "patch": "@@ -0,0 +1,16 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused)]\n+#![deny(clippy)]\n+\n+fn main() {\n+    let v = Some(true);\n+    match v {\n+        Some(x) => (),\n+        y @ _   => (),  //~ERROR the `y @ _` pattern can be written as just `y`\n+    }\n+    match v {\n+        Some(x)  => (),\n+        y @ None => (),  // no error\n+    }\n+}"}]}