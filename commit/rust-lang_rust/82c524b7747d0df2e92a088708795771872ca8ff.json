{"sha": "82c524b7747d0df2e92a088708795771872ca8ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYzUyNGI3NzQ3ZDBkZjJlOTJhMDg4NzA4Nzk1NzcxODcyY2E4ZmY=", "commit": {"author": {"name": "swgillespie", "email": "sean.william.g@gmail.com", "date": "2015-09-15T00:19:05Z"}, "committer": {"name": "swgillespie", "email": "sean.william.g@gmail.com", "date": "2015-09-15T00:19:05Z"}, "message": "implement empty range lint as described in #330", "tree": {"sha": "0d3a8b0d04cc4426f6188a028565f3b51e38dce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3a8b0d04cc4426f6188a028565f3b51e38dce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82c524b7747d0df2e92a088708795771872ca8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82c524b7747d0df2e92a088708795771872ca8ff", "html_url": "https://github.com/rust-lang/rust/commit/82c524b7747d0df2e92a088708795771872ca8ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82c524b7747d0df2e92a088708795771872ca8ff/comments", "author": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b86ebad0e77aa4b87b9b8ae23fce5179d106a079", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86ebad0e77aa4b87b9b8ae23fce5179d106a079", "html_url": "https://github.com/rust-lang/rust/commit/b86ebad0e77aa4b87b9b8ae23fce5179d106a079"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "ae7113579017a6824c1e1003110398730d0e860b", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82c524b7747d0df2e92a088708795771872ca8ff/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/82c524b7747d0df2e92a088708795771872ca8ff/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=82c524b7747d0df2e92a088708795771872ca8ff", "patch": "@@ -6,7 +6,7 @@ A collection of lints that give helpful tips to newbies and catch oversights.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 56 lints included in this crate:\n+There are 57 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -48,6 +48,7 @@ name\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                 | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                 | warn    | using `name @ _` in a pattern\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)               | allow   | using `Result.unwrap()`, which might be better handled\n+[reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)               | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                           | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                             | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                   | allow   | The name is re-bound without even using the original value"}, {"sha": "9cb9eb30561a5d35a0bf078300801f5e7c8523dc", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82c524b7747d0df2e92a088708795771872ca8ff/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82c524b7747d0df2e92a088708795771872ca8ff/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=82c524b7747d0df2e92a088708795771872ca8ff", "patch": "@@ -122,6 +122,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EXPLICIT_ITER_LOOP,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,\n         matches::MATCH_REF_PATS,"}, {"sha": "3b71948121782dea998039616e14c34dc726d28a", "filename": "src/loops.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/82c524b7747d0df2e92a088708795771872ca8ff/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82c524b7747d0df2e92a088708795771872ca8ff/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=82c524b7747d0df2e92a088708795771872ca8ff", "patch": "@@ -25,13 +25,16 @@ declare_lint!{ pub UNUSED_COLLECT, Warn,\n                \"`collect()`ing an iterator without using the result; this is usually better \\\n                 written as a for loop\" }\n \n+declare_lint!{ pub REVERSE_RANGE_LOOP, Warn,\n+               \"Iterating over an empty range, such as `10..0` or `5..5`\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP, ITER_NEXT_LOOP,\n-                    WHILE_LET_LOOP, UNUSED_COLLECT)\n+                    WHILE_LET_LOOP, UNUSED_COLLECT, REVERSE_RANGE_LOOP)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -69,6 +72,37 @@ impl LintPass for LoopsPass {\n                 }\n             }\n \n+            // if this for-loop is iterating over a two-sided range...\n+            if let ExprRange(Some(ref start_expr), Some(ref stop_expr)) = arg.node {\n+                // and both sides are literals...\n+                if let ExprLit(ref start_lit) = start_expr.node {\n+                    if let ExprLit(ref stop_lit) = stop_expr.node {\n+                        // and they are both integers...\n+                        if let LitInt(start_idx, _) = start_lit.node {\n+                            if let LitInt(stop_idx, _) = stop_lit.node {\n+                                // and the start index is greater than the stop index,\n+                                // this loop will never run. This is often confusing for developers\n+                                // who think that this will iterate from the larger value to the\n+                                // smaller value.\n+                                if start_idx > stop_idx {\n+                                    span_lint(cx, REVERSE_RANGE_LOOP, expr.span, &format!(\n+                                        \"this range is empty and this for loop will never run. \\\n+                                         Consider using `({}..{}).rev()` if you are attempting to \\\n+                                         iterate over this range in reverse\", stop_idx, start_idx));\n+                                }\n+\n+                                // if they are equal, it's also problematic - this loop\n+                                // will never run.\n+                                if start_idx == stop_idx {\n+                                    span_lint(cx, REVERSE_RANGE_LOOP, expr.span,\n+                                        \"this range is empty and this for loop will never run\");\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n             if let ExprMethodCall(ref method, _, ref args) = arg.node {\n                 // just the receiver, no arguments\n                 if args.len() == 1 {\n@@ -126,7 +160,7 @@ impl LintPass for LoopsPass {\n     fn check_stmt(&mut self, cx: &Context, stmt: &Stmt) {\n         if let StmtSemi(ref expr, _) = stmt.node {\n             if let ExprMethodCall(ref method, _, ref args) = expr.node {\n-                if args.len() == 1 && method.node.name == \"collect\" && \n+                if args.len() == 1 && method.node.name == \"collect\" &&\n                         match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) {\n                     span_lint(cx, UNUSED_COLLECT, expr.span, &format!(\n                         \"you are collect()ing an iterator and throwing away the result. \\"}, {"sha": "d84b70025b82de5ee2152f9a7f463417c5f2b8e7", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82c524b7747d0df2e92a088708795771872ca8ff/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82c524b7747d0df2e92a088708795771872ca8ff/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=82c524b7747d0df2e92a088708795771872ca8ff", "patch": "@@ -14,7 +14,7 @@ impl Unrelated {\n     }\n }\n \n-#[deny(needless_range_loop, explicit_iter_loop, iter_next_loop)]\n+#[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop)]\n #[deny(unused_collect)]\n #[allow(linkedlist)]\n fn main() {\n@@ -34,6 +34,18 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 10..0 { //~ERROR this range is empty and this for loop will never run. Consider using `(0..10).rev()`\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..5 { //~ERROR this range is empty and this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 { // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n     for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n     for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n "}]}