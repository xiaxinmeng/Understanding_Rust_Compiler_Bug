{"sha": "8f3e876e522f9ecc8f855485bb4857163c0f86e4", "node_id": "C_kwDOAAsO6NoAKDhmM2U4NzZlNTIyZjllY2M4Zjg1NTQ4NWJiNDg1NzE2M2MwZjg2ZTQ", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-05-27T20:20:14Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-06-13T13:48:57Z"}, "message": "Add note about unsafe functions body not being unsafe", "tree": {"sha": "35cabbf833c365a1aacd372192ed1db970904469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35cabbf833c365a1aacd372192ed1db970904469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f3e876e522f9ecc8f855485bb4857163c0f86e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIYEABYIAC4WIQSil6aeYAADwGp0ncHG9XSMbdFgewUCZIhzyRAcZ2l0QG5lbW8x\nNTcuY29tAAoJEMb1dIxt0WB7pMYA/17KVJvAzno5pYU8HM9kMuQVCRkdHSp1e+V4\nMhlVU28TAQD7GS9SSSvx4PaiougYhvJYlEkpXcKcCXUPYp0K+qBhCA==\n=d4ss\n-----END PGP SIGNATURE-----", "payload": "tree 35cabbf833c365a1aacd372192ed1db970904469\nparent 62a712a8bbb29a5d2f4e82b74d1ee5aa0490a5a3\nauthor Wim Looman <git@nemo157.com> 1685218814 +0200\ncommitter Wim Looman <git@nemo157.com> 1686664137 +0200\n\nAdd note about unsafe functions body not being unsafe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3e876e522f9ecc8f855485bb4857163c0f86e4", "html_url": "https://github.com/rust-lang/rust/commit/8f3e876e522f9ecc8f855485bb4857163c0f86e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f3e876e522f9ecc8f855485bb4857163c0f86e4/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a712a8bbb29a5d2f4e82b74d1ee5aa0490a5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/62a712a8bbb29a5d2f4e82b74d1ee5aa0490a5a3", "html_url": "https://github.com/rust-lang/rust/commit/62a712a8bbb29a5d2f4e82b74d1ee5aa0490a5a3"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "2598eb2ed0968e2c806269a3b88b4ab91033d029", "filename": "compiler/rustc_mir_transform/messages.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/compiler%2Frustc_mir_transform%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/compiler%2Frustc_mir_transform%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fmessages.ftl?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -56,6 +56,7 @@ mir_transform_union_access_label = access to union field\n mir_transform_union_access_note = the field may not be properly initialized: using uninitialized data will cause undefined behavior\n mir_transform_unsafe_op_in_unsafe_fn = {$details} is unsafe and requires unsafe block (error E0133)\n     .suggestion = consider wrapping the function body in an unsafe block\n+    .note = an unsafe function restricts its caller, but its body is safe by default\n \n mir_transform_unused_unsafe = unnecessary `unsafe` block\n     .label = because it's nested under this `unsafe` block"}, {"sha": "41e31df77cb92bdeb98524d2a7de784835f7ca3c", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -571,11 +571,16 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     errors::UnsafeOpInUnsafeFn {\n                         details,\n                         suggest_unsafe_block: suggest_unsafe_block.then(|| {\n+                            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+                            let fn_sig = tcx\n+                                .hir()\n+                                .fn_sig_by_hir_id(hir_id)\n+                                .expect(\"this violation only occurs in fn\");\n                             let body = tcx.hir().body_owned_by(def_id);\n                             let body_span = tcx.hir().body(body).value.span;\n                             let start = tcx.sess.source_map().start_point(body_span).shrink_to_hi();\n                             let end = tcx.sess.source_map().end_point(body_span).shrink_to_lo();\n-                            (start, end)\n+                            (start, end, fn_sig.span)\n                         }),\n                     },\n                 );"}, {"sha": "05a27f853b87549df738a441c0cd4d7adb70bac1", "filename": "compiler/rustc_mir_transform/src/errors.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -131,7 +131,12 @@ impl RequiresUnsafeDetail {\n \n pub(crate) struct UnsafeOpInUnsafeFn {\n     pub details: RequiresUnsafeDetail,\n-    pub suggest_unsafe_block: Option<(Span, Span)>,\n+\n+    /// These spans point to:\n+    ///  1. the start of the function body\n+    ///  2. the end of the function body\n+    ///  3. the function signature\n+    pub suggest_unsafe_block: Option<(Span, Span, Span)>,\n }\n \n impl<'a> DecorateLint<'a, ()> for UnsafeOpInUnsafeFn {\n@@ -146,7 +151,8 @@ impl<'a> DecorateLint<'a, ()> for UnsafeOpInUnsafeFn {\n         diag.span_label(self.details.span, self.details.label());\n         diag.note(self.details.note());\n \n-        if let Some((start, end)) = self.suggest_unsafe_block {\n+        if let Some((start, end, fn_sig)) = self.suggest_unsafe_block {\n+            diag.span_note(fn_sig, crate::fluent_generated::mir_transform_note);\n             diag.tool_only_multipart_suggestion(\n                 crate::fluent_generated::mir_transform_suggestion,\n                 vec![(start, \" unsafe {\".into()), (end, \"}\".into())],"}, {"sha": "0c0826c1cfb39b2251c7229443f52d930aa013ae", "filename": "tests/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -5,6 +5,11 @@ LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:11:1\n+   |\n+LL | unsafe fn deny_level() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n    |\n@@ -46,6 +51,11 @@ LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:1\n+   |\n+LL | unsafe fn warning_level() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:8\n    |"}, {"sha": "8fdc21ee1091b65ecf01c1fc873c667d4f0b215b", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.fixed", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -1,23 +1,38 @@\n // run-rustfix\n \n-#![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(unsafe_op_in_unsafe_fn)] //~ NOTE\n \n unsafe fn unsf() {}\n \n pub unsafe fn foo() { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n     unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n     unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n }}\n \n pub unsafe fn bar(x: *const i32) -> i32 { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n     let y = *x; //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n     y + *x //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n }}\n \n static mut BAZ: i32 = 0;\n pub unsafe fn baz() -> i32 { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n     let y = BAZ; //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n     y + BAZ //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n }}\n \n fn main() {}"}, {"sha": "0c6feee4ff2c081bba7d2698d53c9380fc5d802c", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -1,23 +1,38 @@\n // run-rustfix\n \n-#![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(unsafe_op_in_unsafe_fn)] //~ NOTE\n \n unsafe fn unsf() {}\n \n pub unsafe fn foo() {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n     unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n     unsf(); //~ ERROR call to unsafe function is unsafe\n+    //~^ NOTE\n+    //~| NOTE\n }\n \n pub unsafe fn bar(x: *const i32) -> i32 {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n     let y = *x; //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n     y + *x //~ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n }\n \n static mut BAZ: i32 = 0;\n pub unsafe fn baz() -> i32 {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n     let y = BAZ; //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n     y + BAZ //~ ERROR use of mutable static is unsafe and requires unsafe block\n+    //~^ NOTE\n+    //~| NOTE\n }\n \n fn main() {}"}, {"sha": "76f86b09d68af3eb43ffb12bfd31aa572ef067c0", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.stderr", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f3e876e522f9ecc8f855485bb4857163c0f86e4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr?ref=8f3e876e522f9ecc8f855485bb4857163c0f86e4", "patch": "@@ -1,50 +1,65 @@\n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:8:5\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:9:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:7:1\n+   |\n+LL | pub unsafe fn foo() {\n+   | ^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n   --> $DIR/wrapping-unsafe-block-sugg.rs:3:9\n    |\n LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:9:5\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:12:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:13:13\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:19:13\n    |\n LL |     let y = *x;\n    |             ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:17:1\n+   |\n+LL | pub unsafe fn bar(x: *const i32) -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:14:9\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:22:9\n    |\n LL |     y + *x\n    |         ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:19:13\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:30:13\n    |\n LL |     let y = BAZ;\n    |             ^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:28:1\n+   |\n+LL | pub unsafe fn baz() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:20:9\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:33:9\n    |\n LL |     y + BAZ\n    |         ^^^ use of mutable static"}]}