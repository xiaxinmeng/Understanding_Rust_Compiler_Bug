{"sha": "5ffaae758e45cc87b435b1a929c8aae9d9ea5a69", "node_id": "C_kwDOAAsO6NoAKDVmZmFhZTc1OGU0NWNjODdiNDM1YjFhOTI5YzhhYWU5ZDllYTVhNjk", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-10-07T10:38:20Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `ImproperCTypes`", "tree": {"sha": "06ced97005aa84e6299af7de00503ab4b4246172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ced97005aa84e6299af7de00503ab4b4246172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69", "html_url": "https://github.com/rust-lang/rust/commit/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6100479404c194a4801f577be2e9f69b4c6fef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6100479404c194a4801f577be2e9f69b4c6fef9", "html_url": "https://github.com/rust-lang/rust/commit/e6100479404c194a4801f577be2e9f69b4c6fef9"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "a6e00c3e883f3d3319d0e10d43f761b42dc702c7", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=5ffaae758e45cc87b435b1a929c8aae9d9ea5a69", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage};\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n@@ -52,12 +52,12 @@ pub struct EnumIntrinsicsMemVariant<'a> {\n // let_underscore.rs\n #[derive(LintDiagnostic)]\n pub enum NonBindingLet {\n-    #[diag(lint::non_binding_let_on_sync_lock)]\n+    #[diag(lint_non_binding_let_on_sync_lock)]\n     SyncLock {\n         #[subdiagnostic]\n         sub: NonBindingLetSub,\n     },\n-    #[diag(lint::non_binding_let_on_drop_type)]\n+    #[diag(lint_non_binding_let_on_drop_type)]\n     DropType {\n         #[subdiagnostic]\n         sub: NonBindingLetSub,\n@@ -80,12 +80,12 @@ impl AddToDiagnostic for NonBindingLetSub {\n     {\n         diag.span_suggestion_verbose(\n             self.suggestion,\n-            fluent::lint::non_binding_let_suggestion,\n+            fluent::lint_non_binding_let_suggestion,\n             \"_unused\",\n             Applicability::MachineApplicable,\n         );\n         diag.multipart_suggestion(\n-            fluent::lint::non_binding_let_multi_suggestion,\n+            fluent::lint_non_binding_let_multi_suggestion,\n             vec![\n                 (self.multi_suggestion_start, \"drop(\".to_string()),\n                 (self.multi_suggestion_end, \")\".to_string()),\n@@ -568,6 +568,38 @@ pub struct OverflowingLiteral<'a> {\n #[diag(lint_unused_comparisons)]\n pub struct UnusedComparisons;\n \n+pub struct ImproperCTypes<'a> {\n+    pub ty: Ty<'a>,\n+    pub desc: &'a str,\n+    pub label: Span,\n+    pub help: Option<DiagnosticMessage>,\n+    pub note: DiagnosticMessage,\n+    pub span_note: Option<Span>,\n+}\n+\n+impl<'a> DecorateLint<'a, ()> for ImproperCTypes<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n+        diag.set_arg(\"ty\", self.ty);\n+        diag.set_arg(\"desc\", self.desc);\n+        diag.span_label(self.label, fluent::label);\n+        if let Some(help) = self.help {\n+            diag.help(help);\n+        }\n+        diag.note(self.note);\n+        if let Some(note) = self.span_note {\n+            diag.span_note(note, fluent::note);\n+        }\n+        diag\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_improper_ctypes\n+    }\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_variant_size_differences)]\n pub struct VariantSizeDifferencesDiag {"}, {"sha": "a112292eb1412cdf86140f05eb72b5226c683692", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffaae758e45cc87b435b1a929c8aae9d9ea5a69/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=5ffaae758e45cc87b435b1a929c8aae9d9ea5a69", "patch": "@@ -1,10 +1,10 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n use crate::lints::{\n-    AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, InvalidAtomicOrderingDiag,\n-    OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign, OverflowingBinHexSub,\n-    OverflowingInt, OverflowingLiteral, OverflowingUInt, RangeEndpointOutOfRange,\n-    UnusedComparisons, VariantSizeDifferencesDiag,\n+    AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n+    InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n+    OverflowingBinHexSub, OverflowingInt, OverflowingLiteral, OverflowingUInt,\n+    RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n };\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n@@ -1131,27 +1131,21 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             CItemKind::Declaration => IMPROPER_CTYPES,\n             CItemKind::Definition => IMPROPER_CTYPES_DEFINITIONS,\n         };\n-\n-        self.cx.struct_span_lint(lint, sp, fluent::lint_improper_ctypes, |lint| {\n-            let item_description = match self.mode {\n-                CItemKind::Declaration => \"block\",\n-                CItemKind::Definition => \"fn\",\n+        let desc = match self.mode {\n+            CItemKind::Declaration => \"block\",\n+            CItemKind::Definition => \"fn\",\n+        };\n+        let span_note = if let ty::Adt(def, _) = ty.kind()\n+            && let Some(sp) = self.cx.tcx.hir().span_if_local(def.did()) {\n+                Some(sp)\n+            } else {\n+                None\n             };\n-            #[allow(rustc::diagnostic_outside_of_impl)]\n-            lint.set_arg(\"ty\", ty);\n-            lint.set_arg(\"desc\", item_description);\n-            lint.span_label(sp, fluent::label);\n-            if let Some(help) = help {\n-                lint.help(help);\n-            }\n-            lint.note(note);\n-            if let ty::Adt(def, _) = ty.kind() {\n-                if let Some(sp) = self.cx.tcx.hir().span_if_local(def.did()) {\n-                    lint.span_note(sp, fluent::note);\n-                }\n-            }\n-            lint\n-        });\n+        self.cx.emit_spanned_lint(\n+            lint,\n+            sp,\n+            ImproperCTypes { ty, desc, label: sp, help, note, span_note },\n+        );\n     }\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {"}]}