{"sha": "8d57cee9ca0139110fb1da4199aed64ced41f4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTdjZWU5Y2EwMTM5MTEwZmIxZGE0MTk5YWVkNjRjZWQ0MWY0YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-25T23:06:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-25T23:06:39Z"}, "message": "Auto merge of #6617 - Manishearth:exhaustive_enums, r=camsteffen\n\nNew lint: exhaustive_enums, exhaustive_structs\n\nFixes #6616\n\nchangelog: Added restriction lint: `exhaustive_enums`, `exhaustive_structs`", "tree": {"sha": "9745b6e33492e3eddbd95fa66a5352064118ecd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9745b6e33492e3eddbd95fa66a5352064118ecd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d57cee9ca0139110fb1da4199aed64ced41f4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d57cee9ca0139110fb1da4199aed64ced41f4a3", "html_url": "https://github.com/rust-lang/rust/commit/8d57cee9ca0139110fb1da4199aed64ced41f4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d57cee9ca0139110fb1da4199aed64ced41f4a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b", "html_url": "https://github.com/rust-lang/rust/commit/c56b32899fd5144b4dcc4ca2185ed3721ac56c4b"}, {"sha": "3e3dff71357005556aba8d9a7893829f7510b079", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3dff71357005556aba8d9a7893829f7510b079", "html_url": "https://github.com/rust-lang/rust/commit/3e3dff71357005556aba8d9a7893829f7510b079"}], "stats": {"total": 332, "additions": 332, "deletions": 0}, "files": [{"sha": "dadb6832d1fd7c2587a898e9bb6483d5909e77b3", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d57cee9ca0139110fb1da4199aed64ced41f4a3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d57cee9ca0139110fb1da4199aed64ced41f4a3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8d57cee9ca0139110fb1da4199aed64ced41f4a3", "patch": "@@ -1938,6 +1938,8 @@ Released 2018-09-13\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n+[`exhaustive_enums`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums\n+[`exhaustive_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs\n [`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used"}, {"sha": "32b1299efce91d1fe44fdbac532f1ecf52dbd3c0", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/8d57cee9ca0139110fb1da4199aed64ced41f4a3/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57cee9ca0139110fb1da4199aed64ced41f4a3/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=8d57cee9ca0139110fb1da4199aed64ced41f4a3", "patch": "@@ -0,0 +1,102 @@\n+use crate::utils::{indent_of, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n+    ///\n+    /// **Why is this bad?** Exhaustive enums are typically fine, but a project which does\n+    /// not wish to make a stability commitment around exported enums may wish to\n+    /// disable them by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// enum Foo {\n+    ///     Bar,\n+    ///     Baz\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[non_exhaustive]\n+    /// enum Foo {\n+    ///     Bar,\n+    ///     Baz\n+    /// }\n+    /// ```\n+    pub EXHAUSTIVE_ENUMS,\n+    restriction,\n+    \"detects exported enums that have not been marked #[non_exhaustive]\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns on any exported `structs`s that are not tagged `#[non_exhaustive]`\n+    ///\n+    /// **Why is this bad?** Exhaustive structs are typically fine, but a project which does\n+    /// not wish to make a stability commitment around exported structs may wish to\n+    /// disable them by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct Foo {\n+    ///     bar: u8,\n+    ///     baz: String,\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[non_exhaustive]\n+    /// struct Foo {\n+    ///     bar: u8,\n+    ///     baz: String,\n+    /// }\n+    /// ```\n+    pub EXHAUSTIVE_STRUCTS,\n+    restriction,\n+    \"detects exported structs that have not been marked #[non_exhaustive]\"\n+}\n+\n+declare_lint_pass!(ExhaustiveItems => [EXHAUSTIVE_ENUMS, EXHAUSTIVE_STRUCTS]);\n+\n+impl LateLintPass<'_> for ExhaustiveItems {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if_chain! {\n+            if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n+            if cx.access_levels.is_exported(item.hir_id);\n+            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            then {\n+                let (lint, msg) = if let ItemKind::Enum(..) = item.kind {\n+                    (EXHAUSTIVE_ENUMS, \"exported enums should not be exhaustive\")\n+                } else {\n+                    (EXHAUSTIVE_STRUCTS, \"exported structs should not be exhaustive\")\n+                };\n+                let suggestion_span = item.span.shrink_to_lo();\n+                let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n+                span_lint_and_then(\n+                    cx,\n+                    lint,\n+                    item.span,\n+                    msg,\n+                    |diag| {\n+                        let sugg = format!(\"#[non_exhaustive]\\n{}\", indent);\n+                        diag.span_suggestion(suggestion_span,\n+                                             \"try adding #[non_exhaustive]\",\n+                                             sugg,\n+                                             Applicability::MaybeIncorrect);\n+                    }\n+                );\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "4c889b8a8bb7410359a21b1813350c794321b408", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d57cee9ca0139110fb1da4199aed64ced41f4a3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57cee9ca0139110fb1da4199aed64ced41f4a3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8d57cee9ca0139110fb1da4199aed64ced41f4a3", "patch": "@@ -200,6 +200,7 @@ mod escape;\n mod eta_reduction;\n mod eval_order_dependence;\n mod excessive_bools;\n+mod exhaustive_items;\n mod exit;\n mod explicit_write;\n mod fallible_impl_from;\n@@ -615,6 +616,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         &excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n         &excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n+        &exhaustive_items::EXHAUSTIVE_ENUMS,\n+        &exhaustive_items::EXHAUSTIVE_STRUCTS,\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n@@ -1101,6 +1104,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n     store.register_late_pass(|| box missing_doc::MissingDoc::new());\n     store.register_late_pass(|| box missing_inline::MissingInline);\n+    store.register_late_pass(move || box exhaustive_items::ExhaustiveItems);\n     store.register_late_pass(|| box if_let_some_result::OkIfLet);\n     store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n     store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n@@ -1251,6 +1255,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&create_dir::CREATE_DIR),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+        LintId::of(&exhaustive_items::EXHAUSTIVE_ENUMS),\n+        LintId::of(&exhaustive_items::EXHAUSTIVE_STRUCTS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),"}, {"sha": "8174a0175ab3228f02036746e97306fff403050a", "filename": "tests/ui/exhaustive_items.fixed", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8d57cee9ca0139110fb1da4199aed64ced41f4a3/tests%2Fui%2Fexhaustive_items.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d57cee9ca0139110fb1da4199aed64ced41f4a3/tests%2Fui%2Fexhaustive_items.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.fixed?ref=8d57cee9ca0139110fb1da4199aed64ced41f4a3", "patch": "@@ -0,0 +1,82 @@\n+// run-rustfix\n+\n+#![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    // nop\n+}\n+\n+pub mod enums {\n+    #[non_exhaustive]\n+    pub enum Exhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    /// Some docs\n+    #[repr(C)]\n+    #[non_exhaustive]\n+    pub enum ExhaustiveWithAttrs {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub enum NonExhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    enum ExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    enum NonExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+}\n+\n+pub mod structs {\n+    #[non_exhaustive]\n+    pub struct Exhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub struct NonExhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    struct ExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    struct NonExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+}"}, {"sha": "b476f09f8a0872178c1874b549c8bd3f18bedc20", "filename": "tests/ui/exhaustive_items.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8d57cee9ca0139110fb1da4199aed64ced41f4a3/tests%2Fui%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57cee9ca0139110fb1da4199aed64ced41f4a3/tests%2Fui%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.rs?ref=8d57cee9ca0139110fb1da4199aed64ced41f4a3", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+\n+#![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+#![allow(unused)]\n+\n+fn main() {\n+    // nop\n+}\n+\n+pub mod enums {\n+    pub enum Exhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    /// Some docs\n+    #[repr(C)]\n+    pub enum ExhaustiveWithAttrs {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub enum NonExhaustive {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    enum ExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    enum NonExhaustivePrivate {\n+        Foo,\n+        Bar,\n+        Baz,\n+        Quux(String),\n+    }\n+}\n+\n+pub mod structs {\n+    pub struct Exhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, already non_exhaustive\n+    #[non_exhaustive]\n+    pub struct NonExhaustive {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    struct ExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+\n+    // no warning, private\n+    #[non_exhaustive]\n+    struct NonExhaustivePrivate {\n+        foo: u8,\n+        bar: String,\n+    }\n+}"}, {"sha": "7369fe75a4f7408ade55119d57f141e8ac5b2e3c", "filename": "tests/ui/exhaustive_items.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8d57cee9ca0139110fb1da4199aed64ced41f4a3/tests%2Fui%2Fexhaustive_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d57cee9ca0139110fb1da4199aed64ced41f4a3/tests%2Fui%2Fexhaustive_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_items.stderr?ref=8d57cee9ca0139110fb1da4199aed64ced41f4a3", "patch": "@@ -0,0 +1,61 @@\n+error: exported enums should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:11:5\n+   |\n+LL | /     pub enum Exhaustive {\n+LL | |         Foo,\n+LL | |         Bar,\n+LL | |         Baz,\n+LL | |         Quux(String),\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/exhaustive_items.rs:3:9\n+   |\n+LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL |     pub enum Exhaustive {\n+   |\n+\n+error: exported enums should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:20:5\n+   |\n+LL | /     pub enum ExhaustiveWithAttrs {\n+LL | |         Foo,\n+LL | |         Bar,\n+LL | |         Baz,\n+LL | |         Quux(String),\n+LL | |     }\n+   | |_____^\n+   |\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL |     pub enum ExhaustiveWithAttrs {\n+   |\n+\n+error: exported structs should not be exhaustive\n+  --> $DIR/exhaustive_items.rs:55:5\n+   |\n+LL | /     pub struct Exhaustive {\n+LL | |         foo: u8,\n+LL | |         bar: String,\n+LL | |     }\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/exhaustive_items.rs:3:35\n+   |\n+LL | #![deny(clippy::exhaustive_enums, clippy::exhaustive_structs)]\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try adding #[non_exhaustive]\n+   |\n+LL |     #[non_exhaustive]\n+LL |     pub struct Exhaustive {\n+   |\n+\n+error: aborting due to 3 previous errors\n+"}]}