{"sha": "325b7d42ecdfb9236837387a9febb827c1576d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNWI3ZDQyZWNkZmI5MjM2ODM3Mzg3YTlmZWJiODI3YzE1NzZkNjY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-29T04:51:11Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T00:38:28Z"}, "message": "Continue const-checking after errors when easy\n\nThis doesn't change any UI test output", "tree": {"sha": "e3df7edf8ee3b7ca632b7dab6be6ce0df9cd200c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3df7edf8ee3b7ca632b7dab6be6ce0df9cd200c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/325b7d42ecdfb9236837387a9febb827c1576d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/325b7d42ecdfb9236837387a9febb827c1576d66", "html_url": "https://github.com/rust-lang/rust/commit/325b7d42ecdfb9236837387a9febb827c1576d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/325b7d42ecdfb9236837387a9febb827c1576d66/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d343a5e59502d62621526af5e204b541dccbb2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d343a5e59502d62621526af5e204b541dccbb2d", "html_url": "https://github.com/rust-lang/rust/commit/4d343a5e59502d62621526af5e204b541dccbb2d"}], "stats": {"total": 24, "additions": 0, "deletions": 24}, "files": [{"sha": "5c57f87103ed9caf27908c3010fcc9008062b779", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/325b7d42ecdfb9236837387a9febb827c1576d66/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325b7d42ecdfb9236837387a9febb827c1576d66/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=325b7d42ecdfb9236837387a9febb827c1576d66", "patch": "@@ -101,8 +101,6 @@ pub trait NonConstOp: std::fmt::Debug {\n #[derive(Debug)]\n pub struct Abort;\n impl NonConstOp for Abort {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         mcf_status_in_item(ccx)\n     }\n@@ -115,8 +113,6 @@ impl NonConstOp for Abort {\n #[derive(Debug)]\n pub struct FloatingPointOp;\n impl NonConstOp for FloatingPointOp {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         if ccx.const_kind() == hir::ConstContext::ConstFn {\n             Status::Unstable(sym::const_fn_floating_point_arithmetic)\n@@ -136,20 +132,6 @@ impl NonConstOp for FloatingPointOp {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct NonPrimitiveOp;\n-impl NonConstOp for NonPrimitiveOp {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        mcf_status_in_item(ccx)\n-    }\n-\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"only int, `bool` and `char` operations are stable in const fn\")\n-    }\n-}\n-\n /// A function call where the callee is a pointer.\n #[derive(Debug)]\n pub struct FnCallIndirect;\n@@ -234,8 +216,6 @@ impl NonConstOp for FnPtrCast {\n #[derive(Debug)]\n pub struct Generator;\n impl NonConstOp for Generator {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         // FIXME: This means generator-only MIR is only forbidden in const fn. This is for\n         // compatibility with the old code. Such MIR should be forbidden everywhere.\n@@ -512,8 +492,6 @@ impl NonConstOp for ThreadLocalAccess {\n #[derive(Debug)]\n pub struct Transmute;\n impl NonConstOp for Transmute {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         if ccx.const_kind() != hir::ConstContext::ConstFn {\n             Status::Allowed\n@@ -660,8 +638,6 @@ pub mod ty {\n     #[derive(Debug)]\n     pub struct TraitBoundNotConst;\n     impl NonConstOp for TraitBoundNotConst {\n-        const STOPS_CONST_CHECKING: bool = true;\n-\n         fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n             Status::Unstable(sym::const_trait_bound_opt_out)\n         }"}]}