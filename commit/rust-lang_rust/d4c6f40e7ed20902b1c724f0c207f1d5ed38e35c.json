{"sha": "d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YzZmNDBlN2VkMjA5MDJiMWM3MjRmMGMyMDdmMWQ1ZWQzOGUzNWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-23T21:46:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-23T21:46:59Z"}, "message": "Auto merge of #54485 - arielb1:avoid-ctor-attrs, r=eddyb\n\navoid loading constructor attributes in AdtDef decoding\n\nDuring metadata loading, the AdtDefs for every ADT in the universe need\nto be loaded (for example, for coherence of builtin traits). For that,\nthe attributes of the AdtDef need to be loaded too.\n\nThe attributes of a struct are duplicated between 2 def ids - the\nconstructor def-id, and the \"type\" def id. Loading attributes for both\ndef-ids, which was done in #53721, slowed the compilation of small\ncrates by 2-3%. This PR makes sure we only load the attributes for the\n\"type\" def-id, avoiding the slowdown.\n\nr? @eddyb & cc @nnethercote", "tree": {"sha": "724df340966887bb3c33e4f52a7d3a0c94a5735f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724df340966887bb3c33e4f52a7d3a0c94a5735f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "html_url": "https://github.com/rust-lang/rust/commit/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49f6e73a8a2dd6ec9f86df9922ccfa2210d9eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49f6e73a8a2dd6ec9f86df9922ccfa2210d9eda", "html_url": "https://github.com/rust-lang/rust/commit/f49f6e73a8a2dd6ec9f86df9922ccfa2210d9eda"}, {"sha": "2c28c4ed69fd99eea1972e7d796435b9bb0e171d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c28c4ed69fd99eea1972e7d796435b9bb0e171d", "html_url": "https://github.com/rust-lang/rust/commit/2c28c4ed69fd99eea1972e7d796435b9bb0e171d"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "9c91ecca8d9006cf30f795d8250885ce4a206a54", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "patch": "@@ -1724,19 +1724,29 @@ impl<'a, 'gcx, 'tcx> VariantDef {\n     /// - `did` is the DefId used for the variant - for tuple-structs, it is the constructor DefId,\n     /// and for everything else, it is the variant DefId.\n     /// - `attribute_def_id` is the DefId that has the variant's attributes.\n+    /// this is the struct DefId for structs, and the variant DefId for variants.\n+    ///\n+    /// Note that we *could* use the constructor DefId, because the constructor attributes\n+    /// redirect to the base attributes, but compiling a small crate requires\n+    /// loading the AdtDefs for all the structs in the universe (e.g. coherence for any\n+    /// built-in trait), and we do not want to load attributes twice.\n+    ///\n+    /// If someone speeds up attribute loading to not be a performance concern, they can\n+    /// remove this hack and use the constructor DefId everywhere.\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                did: DefId,\n                name: Name,\n                discr: VariantDiscr,\n                fields: Vec<FieldDef>,\n                adt_kind: AdtKind,\n-               ctor_kind: CtorKind)\n+               ctor_kind: CtorKind,\n+               attribute_def_id: DefId)\n                -> Self\n     {\n-        debug!(\"VariantDef::new({:?}, {:?}, {:?}, {:?}, {:?}, {:?})\", did, name, discr, fields,\n-               adt_kind, ctor_kind);\n+        debug!(\"VariantDef::new({:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?})\", did, name, discr,\n+               fields, adt_kind, ctor_kind, attribute_def_id);\n         let mut flags = VariantFlags::NO_VARIANT_FLAGS;\n-        if adt_kind == AdtKind::Struct && tcx.has_attr(did, \"non_exhaustive\") {\n+        if adt_kind == AdtKind::Struct && tcx.has_attr(attribute_def_id, \"non_exhaustive\") {\n             debug!(\"found non-exhaustive field list for {:?}\", did);\n             flags = flags | VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n         }"}, {"sha": "c2296e4f78b3f474ddbf31569eacebfdc487a147", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "patch": "@@ -556,9 +556,12 @@ impl<'a, 'tcx> CrateMetadata {\n             _ => bug!(),\n         };\n \n+        let def_id = self.local_def_id(data.struct_ctor.unwrap_or(index));\n+        let attribute_def_id = self.local_def_id(index);\n+\n         ty::VariantDef::new(\n             tcx,\n-            self.local_def_id(data.struct_ctor.unwrap_or(index)),\n+            def_id,\n             self.item_name(index).as_symbol(),\n             data.discr,\n             item.children.decode(self).map(|index| {\n@@ -570,7 +573,8 @@ impl<'a, 'tcx> CrateMetadata {\n                 }\n             }).collect(),\n             adt_kind,\n-            data.ctor_kind\n+            data.ctor_kind,\n+            attribute_def_id\n         )\n     }\n "}, {"sha": "7d627e8228a915814e0d1cbcb74d8d587c201e73", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d4c6f40e7ed20902b1c724f0c207f1d5ed38e35c", "patch": "@@ -555,7 +555,8 @@ fn convert_variant<'a, 'tcx>(\n     name: ast::Name,\n     discr: ty::VariantDiscr,\n     def: &hir::VariantData,\n-    adt_kind: ty::AdtKind\n+    adt_kind: ty::AdtKind,\n+    attribute_def_id: DefId\n ) -> ty::VariantDef {\n     let mut seen_fields: FxHashMap<ast::Ident, Span> = FxHashMap();\n     let node_id = tcx.hir.as_local_node_id(did).unwrap();\n@@ -592,7 +593,8 @@ fn convert_variant<'a, 'tcx>(\n         discr,\n         fields,\n         adt_kind,\n-        CtorKind::from_hir(def))\n+        CtorKind::from_hir(def),\n+        attribute_def_id)\n }\n \n fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n@@ -622,7 +624,8 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                         };\n                         distance_from_explicit += 1;\n \n-                        convert_variant(tcx, did, v.node.name, discr, &v.node.data, AdtKind::Enum)\n+                        convert_variant(tcx, did, v.node.name, discr, &v.node.data, AdtKind::Enum,\n+                                        did)\n                     })\n                     .collect(),\n             )\n@@ -642,7 +645,8 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                     item.name,\n                     ty::VariantDiscr::Relative(0),\n                     def,\n-                    AdtKind::Struct\n+                    AdtKind::Struct,\n+                    def_id\n                 )],\n             )\n         }\n@@ -654,7 +658,8 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                 item.name,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n-                AdtKind::Union\n+                AdtKind::Union,\n+                def_id\n             )],\n         ),\n         _ => bug!(),"}]}