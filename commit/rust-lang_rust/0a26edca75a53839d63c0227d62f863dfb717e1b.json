{"sha": "0a26edca75a53839d63c0227d62f863dfb717e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjZlZGNhNzVhNTM4MzlkNjNjMDIyN2Q2MmY4NjNkZmI3MTdlMWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-23T12:39:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-23T18:30:20Z"}, "message": "Fix trans for region patterns (&P)", "tree": {"sha": "099d68f80f0f0d32b675e0da949b8406c86f9690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099d68f80f0f0d32b675e0da949b8406c86f9690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a26edca75a53839d63c0227d62f863dfb717e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a26edca75a53839d63c0227d62f863dfb717e1b", "html_url": "https://github.com/rust-lang/rust/commit/0a26edca75a53839d63c0227d62f863dfb717e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a26edca75a53839d63c0227d62f863dfb717e1b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3eebd41db384c2a46535e8db8c7b2337d55f0b", "html_url": "https://github.com/rust-lang/rust/commit/ba3eebd41db384c2a46535e8db8c7b2337d55f0b"}], "stats": {"total": 139, "additions": 99, "deletions": 40}, "files": [{"sha": "37f2e6bd1898e3fbbcb0c7eaafd1370039709bdf", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -331,7 +331,7 @@ type ident_interner = util::interner::interner<@~str>;\n  * so we have to use a unique number. See taskgroup_key! in task.rs\n  * for another case of this. */\n macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint), &fn(+@@token::ident_interner)>(\n+    () => (cast::transmute::<(uint, uint), &fn(+v: @@token::ident_interner)>(\n         (-3 as uint, 0u)))\n )\n "}, {"sha": "0772711374195c466cd8168cd057cf92fe75a9b9", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -487,6 +487,31 @@ fn enter_uniq(bcx: block, dm: DefMap, m: &[@Match/&r],\n     }\n }\n \n+fn enter_region(bcx: block, dm: DefMap, m: &[@Match/&r],\n+                col: uint, val: ValueRef)\n+    -> ~[@Match/&r]\n+{\n+    debug!(\"enter_region(bcx=%s, m=%s, col=%u, val=%?)\",\n+           bcx.to_str(),\n+           matches_to_str(bcx, m),\n+           col,\n+           bcx.val_str(val));\n+    let _indenter = indenter();\n+\n+    let dummy = @{id: 0, node: ast::pat_wild, span: dummy_sp()};\n+    do enter_match(bcx, dm, m, col, val) |p| {\n+        match p.node {\n+            ast::pat_region(sub) => {\n+                Some(~[sub])\n+            }\n+            _ => {\n+                assert_is_binding_or_wild(bcx, p);\n+                Some(~[dummy])\n+            }\n+        }\n+    }\n+}\n+\n fn get_options(ccx: @crate_ctxt, m: &[@Match], col: uint) -> ~[Opt] {\n     fn add_to_set(tcx: ty::ctxt, set: &DVec<Opt>, val: Opt) {\n         if set.any(|l| opt_eq(tcx, &l, &val)) {return;}\n@@ -585,34 +610,35 @@ fn root_pats_as_necessary(bcx: block, m: &[@Match],\n     }\n }\n \n-fn any_box_pat(m: &[@Match], col: uint) -> bool {\n-    for vec::each(m) |br| {\n-        match br.pats[col].node {\n-          ast::pat_box(_) => return true,\n-          _ => ()\n-        }\n+// Macro for deciding whether any of the remaining matches fit a given kind of\n+// pattern.  Note that, because the macro is well-typed, either ALL of the\n+// matches should fit that sort of pattern or NONE (however, some of the\n+// matches may be wildcards like _ or identifiers).\n+macro_rules! any_pat (\n+    ($m:expr, $pattern:pat) => {\n+        vec::any($m, |br| {\n+            match br.pats[col].node {\n+                $pattern => true,\n+                _ => false\n+            }\n+        })\n     }\n-    return false;\n+)\n+\n+fn any_box_pat(m: &[@Match], col: uint) -> bool {\n+    any_pat!(m, ast::pat_box(_))\n }\n \n fn any_uniq_pat(m: &[@Match], col: uint) -> bool {\n-    for vec::each(m) |br| {\n-        match br.pats[col].node {\n-          ast::pat_uniq(_) => return true,\n-          _ => ()\n-        }\n-    }\n-    return false;\n+    any_pat!(m, ast::pat_uniq(_))\n+}\n+\n+fn any_region_pat(m: &[@Match], col: uint) -> bool {\n+    any_pat!(m, ast::pat_region(_))\n }\n \n fn any_tup_pat(m: &[@Match], col: uint) -> bool {\n-    for vec::each(m) |br| {\n-        match br.pats[col].node {\n-          ast::pat_tup(_) => return true,\n-          _ => ()\n-        }\n-    }\n-    return false;\n+    any_pat!(m, ast::pat_tup(_))\n }\n \n type mk_fail = fn@() -> BasicBlockRef;\n@@ -940,6 +966,13 @@ fn compile_submatch(bcx: block,\n         return;\n     }\n \n+    if any_region_pat(m, col) {\n+        let loaded_val = Load(bcx, val);\n+        compile_submatch(bcx, enter_region(bcx, dm, m, col, val),\n+                         vec::append(~[loaded_val], vals_left), chk);\n+        return;\n+    }\n+\n     // Decide what kind of branch we need\n     let opts = get_options(ccx, m, col);\n     let mut kind = no_branch;\n@@ -1248,12 +1281,15 @@ fn bind_irrefutable_pat(bcx: block, pat: @ast::pat, val: ValueRef,\n                 bcx = bind_irrefutable_pat(bcx, *elem, fldptr, make_copy);\n             }\n         }\n-        ast::pat_box(inner) | ast::pat_uniq(inner) |\n-        ast::pat_region(inner) => {\n+        ast::pat_box(inner) | ast::pat_uniq(inner) => {\n             let llbox = Load(bcx, val);\n             let unboxed = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n             bcx = bind_irrefutable_pat(bcx, inner, unboxed, true);\n         }\n+        ast::pat_region(inner) => {\n+            let loaded_val = Load(bcx, val);\n+            bcx = bind_irrefutable_pat(bcx, inner, loaded_val, true);\n+        }\n         ast::pat_wild | ast::pat_lit(_) | ast::pat_range(_, _) => ()\n     }\n     return bcx;"}, {"sha": "b8a13b712e5867bc0d9ad1e6dd3bb97a60c97db1", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -10,7 +10,7 @@ export from_srv, extract, to_str, interner;\n  * there. */\n macro_rules! interner_key (\n     () => (cast::transmute::<(uint, uint),\n-           &fn(+@@syntax::parse::token::ident_interner)>((-3 as uint, 0u)))\n+           &fn(+v: @@syntax::parse::token::ident_interner)>((-3 as uint, 0u)))\n )\n \n // Hack; rather than thread an interner through everywhere, rely on"}, {"sha": "998492630677355ea637cf898e879d75c03be907", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -14,7 +14,7 @@ enum WriteInstr {\n     Done\n }\n \n-type Writer = fn~(+WriteInstr);\n+type Writer = fn~(+v: WriteInstr);\n type WriterFactory = fn~(page: doc::Page) -> Writer;\n \n trait WriterUtils {"}, {"sha": "1cfe037c729e73e9852c7344040584810cbaa2b1", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -1,10 +1,11 @@\n-fn foo<T>(s: &str) {\n+fn foo(s: &~str) -> bool {\n     match s {\n-        &\"kitty\" => fail ~\"cat\",\n-        _ => ()\n+        &~\"kitty\" => true,\n+        _ => false\n     }\n }\n \n fn main() {\n-\n-}\n\\ No newline at end of file\n+    assert foo(&~\"kitty\");\n+    assert !foo(&~\"gata\");\n+}"}, {"sha": "8d95d84966e2945b689009c8a11ebc34bfe98e95", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -1,10 +1,11 @@\n-fn foo<T>(s: &r/uint) {\n+fn foo(s: &r/uint) -> bool {\n     match s {\n-        &3 => fail ~\"oh\",\n-        _ => ()\n+        &3 => true,\n+        _ => false\n     }\n }\n \n fn main() {\n-\n-}\n\\ No newline at end of file\n+    assert foo(&3);\n+    assert !foo(&4);\n+}"}, {"sha": "4b2006f51a2d1cbcf274ee148b89aeea5b205db6", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let (&x, &y, &z) = (&3, &'a', &@\"No pets!\");\n+    assert x == 3;\n+    assert y == 'a';\n+    assert z == @\"No pets!\";\n+}"}, {"sha": "9da88ff00068b6ff8ceea935281901ad4491e05c", "filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -0,0 +1,13 @@\n+fn select(x: &r/Option<int>, y: &r/Option<int>) -> &r/Option<int> {\n+    match (x, y) {\n+        (&None, &None) => x,\n+        (&Some(_), _) => x,\n+        (&None, &Some(_)) => y\n+    }\n+}\n+\n+fn main() {\n+    let x = None;\n+    let y = Some(3);\n+    assert select(&x, &y).get() == 3;\n+}\n\\ No newline at end of file"}, {"sha": "ae1c955be695652a9f0c63dc965923e7f76050d3", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a26edca75a53839d63c0227d62f863dfb717e1b/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=0a26edca75a53839d63c0227d62f863dfb717e1b", "patch": "@@ -1,9 +1,11 @@\n-fn foo<T>(x: &T) {\n+fn foo<T: Copy>(x: &T) -> T{\n     match x {\n-        &a => fail #fmt(\"%?\", a)\n+        &a => a\n     }\n }\n \n fn main() {\n-\n-}\n\\ No newline at end of file\n+    assert foo(&3) == 3;\n+    assert foo(&'a') == 'a';\n+    assert foo(&@\"Dogs rule, cats drool\") == @\"Dogs rule, cats drool\";\n+}"}]}