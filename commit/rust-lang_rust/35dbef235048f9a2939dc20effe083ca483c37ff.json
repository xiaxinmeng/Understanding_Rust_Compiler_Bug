{"sha": "35dbef235048f9a2939dc20effe083ca483c37ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZGJlZjIzNTA0OGY5YTI5MzlkYzIwZWZmZTA4M2NhNDgzYzM3ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T21:01:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T21:01:47Z"}, "message": "Auto merge of #82562 - llogiq:one-up-82248, r=oli-obk\n\nOptimize counting digits in line numbers during error reporting further\n\nThis one-ups #82248 by switching the strategy: Instead of dividing the value by 10 repeatedly, we compare with a limit that we multiply by 10 repeatedly. In my benchmarks, this took between 50% and 25% of the original time. The reasons for being faster are:\n\n1. While LLVM is able to replace a division by constant with a multiply + shift, a plain multiplication is still faster. However, this doesn't even factor, because\n2. Multiplication, unlike division, is const. We also use a simple for-loop instead of a more complex loop + break, which allows\n3. rustc to const-fold the whole loop, and indeed the assembly output simply shows a series of comparisons.", "tree": {"sha": "f25520c8f6358a010f853af91f6c44acd3060915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25520c8f6358a010f853af91f6c44acd3060915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35dbef235048f9a2939dc20effe083ca483c37ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35dbef235048f9a2939dc20effe083ca483c37ff", "html_url": "https://github.com/rust-lang/rust/commit/35dbef235048f9a2939dc20effe083ca483c37ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35dbef235048f9a2939dc20effe083ca483c37ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795a934b51cb481ea3cb1cc8c3835a043a9e0102", "url": "https://api.github.com/repos/rust-lang/rust/commits/795a934b51cb481ea3cb1cc8c3835a043a9e0102", "html_url": "https://github.com/rust-lang/rust/commit/795a934b51cb481ea3cb1cc8c3835a043a9e0102"}, {"sha": "8abc5fd3be35c39fdb93335acebf15dbbac180be", "url": "https://api.github.com/repos/rust-lang/rust/commits/8abc5fd3be35c39fdb93335acebf15dbbac180be", "html_url": "https://github.com/rust-lang/rust/commit/8abc5fd3be35c39fdb93335acebf15dbbac180be"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "9b6f67166bdaa7a4e2ce1640d108fa2e9a85e0c2", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/35dbef235048f9a2939dc20effe083ca483c37ff/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dbef235048f9a2939dc20effe083ca483c37ff/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=35dbef235048f9a2939dc20effe083ca483c37ff", "patch": "@@ -1713,18 +1713,8 @@ impl EmitterWriter {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n         } else {\n-            // Instead of using .to_string().len(), we iteratively count the\n-            // number of digits to avoid allocation. This strategy has sizable\n-            // performance gains over the old string strategy.\n-            let mut n = self.get_max_line_num(span, children);\n-            let mut num_digits = 0;\n-            loop {\n-                num_digits += 1;\n-                n /= 10;\n-                if n == 0 {\n-                    break num_digits;\n-                }\n-            }\n+            let n = self.get_max_line_num(span, children);\n+            num_decimal_digits(n)\n         };\n \n         match self.emit_message_default(span, message, code, level, max_line_num_len, false) {\n@@ -1952,6 +1942,30 @@ impl FileWithAnnotatedLines {\n     }\n }\n \n+// instead of taking the String length or dividing by 10 while > 0, we multiply a limit by 10 until\n+// we're higher. If the loop isn't exited by the `return`, the last multiplication will wrap, which\n+// is OK, because while we cannot fit a higher power of 10 in a usize, the loop will end anyway.\n+// This is also why we need the max number of decimal digits within a `usize`.\n+fn num_decimal_digits(num: usize) -> usize {\n+    #[cfg(target_pointer_width = \"64\")]\n+    const MAX_DIGITS: usize = 20;\n+\n+    #[cfg(target_pointer_width = \"32\")]\n+    const MAX_DIGITS: usize = 10;\n+\n+    #[cfg(target_pointer_width = \"16\")]\n+    const MAX_DIGITS: usize = 5;\n+\n+    let mut lim = 10;\n+    for num_digits in 1..MAX_DIGITS {\n+        if num < lim {\n+            return num_digits;\n+        }\n+        lim = lim.wrapping_mul(10);\n+    }\n+    MAX_DIGITS\n+}\n+\n fn replace_tabs(str: &str) -> String {\n     str.replace('\\t', \"    \")\n }"}]}