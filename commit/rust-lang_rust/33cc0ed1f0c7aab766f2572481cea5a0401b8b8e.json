{"sha": "33cc0ed1f0c7aab766f2572481cea5a0401b8b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzY2MwZWQxZjBjN2FhYjc2NmYyNTcyNDgxY2VhNWEwNDAxYjhiOGU=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-29T00:24:15Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:06:52Z"}, "message": "librustc: excise Session's now-unused bug methods", "tree": {"sha": "99455d3e9fe2641c477183580fade41237596dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99455d3e9fe2641c477183580fade41237596dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33cc0ed1f0c7aab766f2572481cea5a0401b8b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33cc0ed1f0c7aab766f2572481cea5a0401b8b8e", "html_url": "https://github.com/rust-lang/rust/commit/33cc0ed1f0c7aab766f2572481cea5a0401b8b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33cc0ed1f0c7aab766f2572481cea5a0401b8b8e/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89fcc00581fcde08924b8a13a43bb2387b67243e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fcc00581fcde08924b8a13a43bb2387b67243e", "html_url": "https://github.com/rust-lang/rust/commit/89fcc00581fcde08924b8a13a43bb2387b67243e"}], "stats": {"total": 17, "additions": 0, "deletions": 17}, "files": [{"sha": "d3005ff2ded251e4c68ea560d36febb8f16f953a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33cc0ed1f0c7aab766f2572481cea5a0401b8b8e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33cc0ed1f0c7aab766f2572481cea5a0401b8b8e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=33cc0ed1f0c7aab766f2572481cea5a0401b8b8e", "patch": "@@ -218,22 +218,10 @@ impl Session {\n             None => self.warn(msg),\n         }\n     }\n-    pub fn opt_span_bug<S: Into<MultiSpan>>(&self, opt_sp: Option<S>, msg: &str) -> ! {\n-        match opt_sp {\n-            Some(sp) => self.span_bug(sp, msg),\n-            None => self.bug(msg),\n-        }\n-    }\n     /// Delay a span_bug() call until abort_if_errors()\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().delay_span_bug(sp, msg)\n     }\n-    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.diagnostic().span_bug(sp, msg)\n-    }\n-    pub fn bug(&self, msg: &str) -> ! {\n-        self.diagnostic().bug(msg)\n-    }\n     pub fn note_without_error(&self, msg: &str) {\n         self.diagnostic().note_without_error(msg)\n     }\n@@ -281,11 +269,6 @@ impl Session {\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n         self.parse_sess.codemap()\n     }\n-    // This exists to help with refactoring to eliminate impossible\n-    // cases later on\n-    pub fn impossible_case<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.span_bug(sp, &format!(\"impossible case reached: {}\", msg));\n-    }\n     pub fn verbose(&self) -> bool { self.opts.debugging_opts.verbose }\n     pub fn time_passes(&self) -> bool { self.opts.debugging_opts.time_passes }\n     pub fn count_llvm_insns(&self) -> bool {"}]}