{"sha": "e8ed2d41505826df2c3c53131de401f69b1df427", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZWQyZDQxNTA1ODI2ZGYyYzNjNTMxMzFkZTQwMWY2OWIxZGY0Mjc=", "commit": {"author": {"name": "Dan Burkert", "email": "dan@danburkert.com", "date": "2015-03-06T08:24:47Z"}, "committer": {"name": "Dan Burkert", "email": "dan@danburkert.com", "date": "2015-03-06T17:50:05Z"}, "message": "Implement std::error::Error for std::sync::mpsc error types", "tree": {"sha": "dd986e068b62d4a936da09ad1dcfe433d78ec19b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd986e068b62d4a936da09ad1dcfe433d78ec19b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ed2d41505826df2c3c53131de401f69b1df427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ed2d41505826df2c3c53131de401f69b1df427", "html_url": "https://github.com/rust-lang/rust/commit/e8ed2d41505826df2c3c53131de401f69b1df427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ed2d41505826df2c3c53131de401f69b1df427/comments", "author": {"login": "danburkert", "id": 160242, "node_id": "MDQ6VXNlcjE2MDI0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danburkert", "html_url": "https://github.com/danburkert", "followers_url": "https://api.github.com/users/danburkert/followers", "following_url": "https://api.github.com/users/danburkert/following{/other_user}", "gists_url": "https://api.github.com/users/danburkert/gists{/gist_id}", "starred_url": "https://api.github.com/users/danburkert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danburkert/subscriptions", "organizations_url": "https://api.github.com/users/danburkert/orgs", "repos_url": "https://api.github.com/users/danburkert/repos", "events_url": "https://api.github.com/users/danburkert/events{/privacy}", "received_events_url": "https://api.github.com/users/danburkert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danburkert", "id": 160242, "node_id": "MDQ6VXNlcjE2MDI0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danburkert", "html_url": "https://github.com/danburkert", "followers_url": "https://api.github.com/users/danburkert/followers", "following_url": "https://api.github.com/users/danburkert/following{/other_user}", "gists_url": "https://api.github.com/users/danburkert/gists{/gist_id}", "starred_url": "https://api.github.com/users/danburkert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danburkert/subscriptions", "organizations_url": "https://api.github.com/users/danburkert/orgs", "repos_url": "https://api.github.com/users/danburkert/repos", "events_url": "https://api.github.com/users/danburkert/events{/privacy}", "received_events_url": "https://api.github.com/users/danburkert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe8f221450bad3ffb1351c6549f67c18ce0b94e", "html_url": "https://github.com/rust-lang/rust/commit/1fe8f221450bad3ffb1351c6549f67c18ce0b94e"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "2ae1d4a9d50bc42f7adc9b130052740c45cbdcc6", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e8ed2d41505826df2c3c53131de401f69b1df427/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ed2d41505826df2c3c53131de401f69b1df427/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=e8ed2d41505826df2c3c53131de401f69b1df427", "patch": "@@ -318,6 +318,7 @@\n use prelude::v1::*;\n \n use sync::Arc;\n+use error;\n use fmt;\n use mem;\n use cell::UnsafeCell;\n@@ -975,6 +976,18 @@ impl<T> fmt::Display for SendError<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> error::Error for SendError<T> {\n+\n+    fn description(&self) -> &str {\n+        \"sending on a closed channel\"\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for TrySendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -999,13 +1012,44 @@ impl<T> fmt::Display for TrySendError<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> error::Error for TrySendError<T> {\n+\n+    fn description(&self) -> &str {\n+        match *self {\n+            TrySendError::Full(..) => {\n+                \"sending on a full channel\"\n+            }\n+            TrySendError::Disconnected(..) => {\n+                \"sending on a closed channel\"\n+            }\n+        }\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for RecvError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"receiving on a closed channel\".fmt(f)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl error::Error for RecvError {\n+\n+    fn description(&self) -> &str {\n+        \"receiving on a closed channel\"\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for TryRecvError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -1020,6 +1064,25 @@ impl fmt::Display for TryRecvError {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl error::Error for TryRecvError {\n+\n+    fn description(&self) -> &str {\n+        match *self {\n+            TryRecvError::Empty => {\n+                \"receiving on an empty channel\"\n+            }\n+            TryRecvError::Disconnected => {\n+                \"receiving on a closed channel\"\n+            }\n+        }\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use prelude::v1::*;"}]}