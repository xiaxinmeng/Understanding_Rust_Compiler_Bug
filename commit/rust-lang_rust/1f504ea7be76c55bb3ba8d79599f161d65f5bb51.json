{"sha": "1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNTA0ZWE3YmU3NmM1NWJiM2JhOGQ3OTU5OWYxNjFkNjVmNWJiNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-14T18:58:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-14T18:58:06Z"}, "message": "Auto merge of #894 - christianpoveda:env-vars-communication, r=RalfJung\n\nEnable env communication\n\nrelated issue: https://github.com/rust-lang/miri/issues/800. r? @RalfJung", "tree": {"sha": "81b6d71afd6f5a72e1f520d959f6511fd995550e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b6d71afd6f5a72e1f520d959f6511fd995550e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "html_url": "https://github.com/rust-lang/rust/commit/1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b227e24a29f25a8d9c85345fdeac1d74175884", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b227e24a29f25a8d9c85345fdeac1d74175884", "html_url": "https://github.com/rust-lang/rust/commit/47b227e24a29f25a8d9c85345fdeac1d74175884"}, {"sha": "451a09a6857f7e7dabc918f09c78932b3de2e8f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/451a09a6857f7e7dabc918f09c78932b3de2e8f4", "html_url": "https://github.com/rust-lang/rust/commit/451a09a6857f7e7dabc918f09c78932b3de2e8f4"}], "stats": {"total": 158, "additions": 124, "deletions": 34}, "files": [{"sha": "f34569d865a823e91f1c0e22402fe91fbcd85bde", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -157,6 +157,9 @@ Several `-Z` flags are relevant for Miri:\n   is enforced by default.  This is mostly useful for debugging; it means Miri\n   will miss bugs in your program.  However, this can also help to make Miri run\n   faster.\n+* `-Zmiri-enable-communication` enables communication between the host\n+  environment and Miri, i.e., all the host environment variables are available\n+  during Miri runtime.\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away."}, {"sha": "5cb938659a6cd8184618d40c80f107a219a077ef", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -25,7 +25,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n             );\n \n             self.bencher.iter(|| {\n-                let config = miri::MiriConfig { validate: true, args: vec![], seed: None };\n+                let config = miri::MiriConfig {\n+                    validate: true,\n+                    communicate: false,\n+                    args: vec![],\n+                    seed: None,\n+                };\n                 eval_main(tcx, entry_def_id, config);\n             });\n         });"}, {"sha": "9ef64c38638b7033fd22e20c1d1c7342f3baf3e5", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -48,7 +48,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n                             if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {\n-                                let config = MiriConfig { validate: true, args: vec![], seed: None };\n+                                let config = MiriConfig {\n+                                    validate: true,\n+                                    communicate: false,\n+                                    args: vec![],\n+                                    seed: None,\n+                                };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                                 miri::eval_main(self.0, did, config);\n@@ -61,7 +66,12 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 }\n                 tcx.hir().krate().visit_all_item_likes(&mut Visitor(tcx));\n             } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-                let config = MiriConfig { validate: true, args: vec![], seed: None };\n+                let config = MiriConfig {\n+                    validate: true,\n+                    communicate: false,\n+                    args: vec![],\n+                    seed: None\n+                };\n                 miri::eval_main(tcx, entry_def_id, config);\n \n                 compiler.session().abort_if_errors();"}, {"sha": "1aa89fc5a6108ea958538fca364b32ef55d49995", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -130,6 +130,7 @@ fn main() {\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut validate = true;\n+    let mut communicate = false;\n     let mut seed: Option<u64> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n@@ -147,6 +148,9 @@ fn main() {\n                 \"-Zmiri-disable-validation\" => {\n                     validate = false;\n                 },\n+                \"-Zmiri-enable-communication\" => {\n+                    communicate = true;\n+                },\n                 \"--\" => {\n                     after_dashdash = true;\n                 }\n@@ -196,7 +200,7 @@ fn main() {\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n     debug!(\"miri arguments: {:?}\", miri_args);\n-    let miri_config = miri::MiriConfig { validate, args: miri_args, seed };\n+    let miri_config = miri::MiriConfig { validate, communicate, args: miri_args, seed };\n     let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n         rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n     }).and_then(|result| result);"}, {"sha": "0970edb2b75f3c0b88d0714ec803441431b5aa9a", "filename": "src/eval.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -12,16 +12,19 @@ use crate::{\n     InterpResult, InterpError, InterpCx, StackPopCleanup, struct_error,\n     Scalar, Tag, Pointer, FnVal,\n     MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt, HelpersEvalContextExt,\n+    EnvVars,\n };\n \n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n+    /// Determine if validity checking and Stacked Borrows are enabled.\n     pub validate: bool,\n+    /// Determines if communication with the host environment is enabled.\n+    pub communicate: bool,\n     pub args: Vec<String>,\n-\n-    // The seed to use when non-determinism is required (e.g. getrandom())\n-    pub seed: Option<u64>\n+    /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n+    pub seed: Option<u64>,\n }\n \n // Used by priroda.\n@@ -33,10 +36,14 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let mut ecx = InterpCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(),\n+        Evaluator::new(config.communicate),\n         MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n     );\n \n+    // Complete initialization.\n+    EnvVars::init(&mut ecx, config.communicate);\n+\n+    // Setup first stack-frame\n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;\n \n@@ -158,7 +165,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             cur_ptr = cur_ptr.offset(char_size, tcx)?;\n         }\n     }\n- \n+\n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n     Ok(ecx)"}, {"sha": "738419c2498b7819947f4c0b5ce407f62bfb2635", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -33,6 +33,7 @@ pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextEx\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n+pub use crate::shims::env::EnvVars;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};"}, {"sha": "b4aac147f94fb184dde74ae8469955877f8e08e5", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -3,7 +3,6 @@\n \n use std::rc::Rc;\n use std::borrow::Cow;\n-use std::collections::HashMap;\n use std::cell::RefCell;\n \n use rand::rngs::StdRng;\n@@ -79,7 +78,7 @@ impl MemoryExtra {\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`.\n     /// Miri does not expose env vars from the host to the emulated program.\n-    pub(crate) env_vars: HashMap<Vec<u8>, Pointer<Tag>>,\n+    pub(crate) env_vars: EnvVars,\n \n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n@@ -93,17 +92,23 @@ pub struct Evaluator<'tcx> {\n \n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,\n+\n+    /// If enabled, the `env_vars` field is populated with the host env vars during initialization.\n+    pub(crate) communicate: bool,\n }\n \n impl<'tcx> Evaluator<'tcx> {\n-    pub(crate) fn new() -> Self {\n+    pub(crate) fn new(communicate: bool) -> Self {\n         Evaluator {\n-            env_vars: HashMap::default(),\n+            // `env_vars` could be initialized properly here if `Memory` were available before\n+            // calling this method.\n+            env_vars: EnvVars::default(),\n             argc: None,\n             argv: None,\n             cmd_line: None,\n             last_error: 0,\n             tls: TlsData::default(),\n+            communicate,\n         }\n     }\n }"}, {"sha": "05c5fbb0430989444c07ff391128162f9ec2f3a2", "filename": "src/shims/env.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -0,0 +1,60 @@\n+use std::collections::HashMap;\n+\n+use rustc::ty::layout::{Size, Align};\n+use rustc_mir::interpret::{Pointer, Memory};\n+use crate::stacked_borrows::Tag;\n+use crate::*;\n+\n+#[derive(Default)]\n+pub struct EnvVars {\n+    map: HashMap<Vec<u8>, Pointer<Tag>>,\n+}\n+\n+impl EnvVars {\n+    pub(crate) fn init<'mir, 'tcx>(\n+        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+        communicate: bool,\n+    ) {\n+        if communicate {\n+            for (name, value) in std::env::vars() {\n+                let value = alloc_env_value(value.as_bytes(), ecx.memory_mut());\n+                ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n+            }\n+        }\n+    }\n+\n+    pub(crate) fn get(&self, name: &[u8]) -> Option<&Pointer<Tag>> {\n+        self.map.get(name)\n+    }\n+\n+    pub(crate) fn unset(&mut self, name: &[u8]) -> Option<Pointer<Tag>> {\n+        self.map.remove(name)\n+    }\n+\n+    pub(crate) fn set(&mut self, name: Vec<u8>, ptr: Pointer<Tag>) -> Option<Pointer<Tag>>{\n+        self.map.insert(name, ptr)\n+    }\n+}\n+\n+pub(crate) fn alloc_env_value<'mir, 'tcx>(\n+    bytes: &[u8],\n+    memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>,\n+) -> Pointer<Tag> {\n+    let tcx = {memory.tcx.tcx};\n+    let length = bytes.len() as u64;\n+    // `+1` for the null terminator.\n+    let ptr = memory.allocate(\n+        Size::from_bytes(length + 1),\n+        Align::from_bytes(1).unwrap(),\n+        MiriMemoryKind::Env.into(),\n+    );\n+    // We just allocated these, so the write cannot fail.\n+    let alloc = memory.get_mut(ptr.alloc_id).unwrap();\n+    alloc.write_bytes(&tcx, ptr, &bytes).unwrap();\n+    let trailing_zero_ptr = ptr.offset(\n+        Size::from_bytes(length),\n+        &tcx,\n+    ).unwrap();\n+    alloc.write_bytes(&tcx, trailing_zero_ptr, &[0]).unwrap();\n+    ptr\n+}"}, {"sha": "2d2b917eb2750c27d5459b0180f2424476d39f0a", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -8,6 +8,7 @@ use syntax::attr;\n use syntax::symbol::sym;\n \n use crate::*;\n+use crate::shims::env::alloc_env_value;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -440,7 +441,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     if !this.is_null(name_ptr)? {\n                         let name = this.memory().read_c_str(name_ptr)?.to_owned();\n                         if !name.is_empty() && !name.contains(&b'=') {\n-                            success = Some(this.machine.env_vars.remove(&name));\n+                            success = Some(this.machine.env_vars.unset(&name));\n                         }\n                     }\n                 }\n@@ -468,26 +469,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     }\n                 }\n                 if let Some((name, value)) = new {\n-                    // `+1` for the null terminator.\n-                    let value_copy = this.memory_mut().allocate(\n-                        Size::from_bytes((value.len() + 1) as u64),\n-                        Align::from_bytes(1).unwrap(),\n-                        MiriMemoryKind::Env.into(),\n-                    );\n-                    // We just allocated these, so the write cannot fail.\n-                    let alloc = this.memory_mut().get_mut(value_copy.alloc_id).unwrap();\n-                    alloc.write_bytes(tcx, value_copy, &value).unwrap();\n-                    let trailing_zero_ptr = value_copy.offset(\n-                        Size::from_bytes(value.len() as u64),\n-                        tcx,\n-                    ).unwrap();\n-                    alloc.write_bytes(tcx, trailing_zero_ptr, &[0]).unwrap();\n-\n-                    if let Some(var) = this.machine.env_vars.insert(\n-                        name.to_owned(),\n-                        value_copy,\n-                    )\n-                    {\n+                    let value_copy = alloc_env_value(&value, this.memory_mut());\n+                    if let Some(var) = this.machine.env_vars.set(name.to_owned(), value_copy) {\n                         this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n                     }\n                     this.write_null(dest)?;"}, {"sha": "96a1f34152b329d0d51ace78e08146d1b23c73fc", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -2,6 +2,7 @@ pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n pub mod dlsym;\n+pub mod env;\n \n use rustc::{ty, mir};\n "}, {"sha": "d0705b26b7a9d6ee943f5e413c083d9c1f3ef77a", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -116,6 +116,9 @@ fn compile_fail_miri(opt: bool) {\n }\n \n fn test_runner(_tests: &[&()]) {\n+    // Add a test env var to do environment communication tests\n+    std::env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n+\n     run_pass_miri(false);\n     run_pass_miri(true);\n "}, {"sha": "e3fb0c5bd5e09937732b4a325ddf9967a4ad0aeb", "filename": "tests/run-pass/communication.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Frun-pass%2Fcommunication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Frun-pass%2Fcommunication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcommunication.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -0,0 +1,6 @@\n+// ignore-windows: TODO env var emulation stubbed out on Windows\n+// compile-flags: -Zmiri-enable-communication\n+\n+fn main() {\n+    assert_eq!(std::env::var(\"MIRI_ENV_VAR_TEST\"), Ok(\"0\".to_owned()));\n+}"}, {"sha": "faf947420347d814ee445bbbf2c8d678ab6b38ab", "filename": "tests/run-pass/env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -6,4 +6,6 @@ fn main() {\n     assert_eq!(env::var(\"MIRI_TEST\"), Err(env::VarError::NotPresent));\n     env::set_var(\"MIRI_TEST\", \"the answer\");\n     assert_eq!(env::var(\"MIRI_TEST\"), Ok(\"the answer\".to_owned()));\n+    // Test that miri environment is isolated when communication is disabled.\n+    assert!(env::var(\"MIRI_ENV_VAR_TEST\").is_err());\n }"}]}