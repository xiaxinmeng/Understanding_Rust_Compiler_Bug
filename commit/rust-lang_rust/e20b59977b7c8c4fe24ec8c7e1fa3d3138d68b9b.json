{"sha": "e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "node_id": "C_kwDOAAsO6NoAKGUyMGI1OTk3N2I3YzhjNGZlMjRlYzhjN2UxZmEzZDMxMzhkNjhiOWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-02T15:17:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-02T15:17:31Z"}, "message": "Rollup merge of #100005 - GuillaumeGomez:cleanup-ast-attr-clean, r=notriddle\n\nRemove Clean trait for ast::Attribute and improve Attributes::from_ast\n\nI prefer to keep this commit on its own for this PR because I'm changing a bit more things than expected originally: I split `Attributes::from_ast` into two because there is only one location making use of its second parameter.\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`", "tree": {"sha": "6200966041b695551ee9b4487c999e2f55d3548f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6200966041b695551ee9b4487c999e2f55d3548f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6UALCRBK7hj4Ov3rIwAAmFEIAKkA12nBQdIlS52RngAWL4+4\nYB4L3WuSlR+s3d8WLgvRLMBSZcxXNOCkYeuaxygE12kxiomqbZ7Cru7QbtFVdYij\nyTBbix/VD9sAqAhM68pSfEfC0TAJ49eGCQcbn2Eb1UZxsO8nH7SvG3n7xAS4xghS\nowGBlZrbWhgpk/pUZeKHtQ+qxdcsJmfbYTto3C91nGuZQlD9uqFkMyh3MFa38TCE\n48H2E1U/nUiyqF+yPztkYgLj1OS4b4TR+KTgkXIJAH0iwXDq1nwg7cMsfkEcDMTv\nW68MxK1FSn7U8WQepOps9oCtQmYnIocFFt7zpBFzPw+FZRlO08fCGFfoZbZLQ/Y=\n=1bFf\n-----END PGP SIGNATURE-----\n", "payload": "tree 6200966041b695551ee9b4487c999e2f55d3548f\nparent a0991b8ba8ec5746af36c4912fd8895e33cf5fca\nparent 04f570aad0b89d4475fbf65c6f9567e6f11cad20\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659453451 +0200\ncommitter GitHub <noreply@github.com> 1659453451 +0200\n\nRollup merge of #100005 - GuillaumeGomez:cleanup-ast-attr-clean, r=notriddle\n\nRemove Clean trait for ast::Attribute and improve Attributes::from_ast\n\nI prefer to keep this commit on its own for this PR because I'm changing a bit more things than expected originally: I split `Attributes::from_ast` into two because there is only one location making use of its second parameter.\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "html_url": "https://github.com/rust-lang/rust/commit/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0991b8ba8ec5746af36c4912fd8895e33cf5fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0991b8ba8ec5746af36c4912fd8895e33cf5fca", "html_url": "https://github.com/rust-lang/rust/commit/a0991b8ba8ec5746af36c4912fd8895e33cf5fca"}, {"sha": "04f570aad0b89d4475fbf65c6f9567e6f11cad20", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f570aad0b89d4475fbf65c6f9567e6f11cad20", "html_url": "https://github.com/rust-lang/rust/commit/04f570aad0b89d4475fbf65c6f9567e6f11cad20"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "b586fb86b334b0c49de6904288ea7b6058557d0f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "patch": "@@ -304,14 +304,14 @@ fn merge_attrs(\n         both.extend_from_slice(old_attrs);\n         (\n             if let Some(new_id) = parent_module {\n-                Attributes::from_ast(old_attrs, Some((inner, new_id)))\n+                Attributes::from_ast_with_additional(old_attrs, (inner, new_id))\n             } else {\n-                Attributes::from_ast(&both, None)\n+                Attributes::from_ast(&both)\n             },\n             both.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )\n     } else {\n-        (old_attrs.clean(cx), old_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg))\n+        (Attributes::from_ast(&old_attrs), old_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg))\n     }\n }\n "}, {"sha": "d8515916b500d008d01c6e3ac98c73fd4ca3df36", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "patch": "@@ -121,12 +121,6 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Attributes> for [ast::Attribute] {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Attributes {\n-        Attributes::from_ast(self, None)\n-    }\n-}\n-\n impl<'tcx> Clean<'tcx, Option<GenericBound>> for hir::GenericBound<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<GenericBound> {\n         Some(match *self {\n@@ -2096,7 +2090,7 @@ fn clean_extern_crate<'tcx>(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: Box::new(attrs.clean(cx)),\n+        attrs: Box::new(Attributes::from_ast(attrs)),\n         item_id: crate_def_id.into(),\n         visibility: clean_visibility(ty_vis),\n         kind: Box::new(ExternCrateItem { src: orig_name }),"}, {"sha": "0e6de842cc267276dbc0bba4230a34e16ac1351a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "patch": "@@ -34,10 +34,10 @@ use rustc_target::spec::abi::Abi;\n use rustc_typeck::check::intrinsic::intrinsic_operation_unsafety;\n \n use crate::clean::cfg::Cfg;\n+use crate::clean::clean_visibility;\n use crate::clean::external_path;\n use crate::clean::inline::{self, print_inlined_const};\n use crate::clean::utils::{is_literal_expr, print_const_expr, print_evaluated_const};\n-use crate::clean::{clean_visibility, Clean};\n use crate::core::DocContext;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -469,7 +469,7 @@ impl Item {\n             def_id,\n             name,\n             kind,\n-            Box::new(ast_attrs.clean(cx)),\n+            Box::new(Attributes::from_ast(ast_attrs)),\n             cx,\n             ast_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n         )\n@@ -1161,14 +1161,16 @@ impl Attributes {\n         false\n     }\n \n-    pub(crate) fn from_ast(\n+    pub(crate) fn from_ast(attrs: &[ast::Attribute]) -> Attributes {\n+        Attributes::from_ast_iter(attrs.iter().map(|attr| (attr, None)), false)\n+    }\n+\n+    pub(crate) fn from_ast_with_additional(\n         attrs: &[ast::Attribute],\n-        additional_attrs: Option<(&[ast::Attribute], DefId)>,\n+        (additional_attrs, def_id): (&[ast::Attribute], DefId),\n     ) -> Attributes {\n         // Additional documentation should be shown before the original documentation.\n-        let attrs1 = additional_attrs\n-            .into_iter()\n-            .flat_map(|(attrs, def_id)| attrs.iter().map(move |attr| (attr, Some(def_id))));\n+        let attrs1 = additional_attrs.iter().map(|attr| (attr, Some(def_id)));\n         let attrs2 = attrs.iter().map(|attr| (attr, None));\n         Attributes::from_ast_iter(attrs1.chain(attrs2), false)\n     }"}, {"sha": "35964e3ba38e4ad284dd0d0cb3698c2f5abdbe7f", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "patch": "@@ -1222,7 +1222,7 @@ impl<'a, 'hir, 'tcx> HirCollector<'a, 'hir, 'tcx> {\n \n         // The collapse-docs pass won't combine sugared/raw doc attributes, or included files with\n         // anything else, this will combine them for us.\n-        let attrs = Attributes::from_ast(ast_attrs, None);\n+        let attrs = Attributes::from_ast(ast_attrs);\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             // Use the outermost invocation, so that doctest names come from where the docs were written.\n             let span = ast_attrs"}, {"sha": "99cf4291927fb3dc2d84c60548c529711c96994d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=e20b59977b7c8c4fe24ec8c7e1fa3d3138d68b9b", "patch": "@@ -345,7 +345,7 @@ fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items:\n             clean::ImportItem(ref import) => {\n                 let (stab, stab_tags) = if let Some(import_def_id) = import.source.did {\n                     let ast_attrs = cx.tcx().get_attrs_unchecked(import_def_id);\n-                    let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs, None));\n+                    let import_attrs = Box::new(clean::Attributes::from_ast(ast_attrs));\n \n                     // Just need an item with the correct def_id and attrs\n                     let import_item = clean::Item {"}]}