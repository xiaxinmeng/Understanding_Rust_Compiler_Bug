{"sha": "b1b005b8f0d5219bc2020b902390508b5858baee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjAwNWI4ZjBkNTIxOWJjMjAyMGI5MDIzOTA1MDhiNTg1OGJhZWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-27T23:35:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-27T23:35:58Z"}, "message": "Rollup merge of #65244 - seanmonstar:into-future, r=seanmonstar\n\nadd IntoFuture trait and support for await\n\nThe [async-await RFC](https://rust-lang.github.io/rfcs/2394-async_await.html#the-await-compiler-built-in) mentions being able to `await` anything implementing `IntoFuture`. Somewhere along the way, it was left out.", "tree": {"sha": "b66f8e42b5aecd102b611fdd2506d8c503148200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66f8e42b5aecd102b611fdd2506d8c503148200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b005b8f0d5219bc2020b902390508b5858baee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeBpVeCRBK7hj4Ov3rIwAAdHIIAFIigyzxmfFI7g498G2jI9lc\naKi0AK7ShfF0bf/gbNkBtSLIx0xvg6AhYYmS71Cjq33Lw6F8GmindYGQUAnATRZm\n6bIOmOB+Fvuz9V5+/1zELoW0CcptKahPmKhJ2pDSHEbdDiv5MGPT1mPquNDYVRDQ\nUXIAJhpSCFYr3GI5sMIQFxdBxmYjQcQSNlJcWUczEvhSOsXSlyuLhNUvzaZAwSDE\ndH0mpZEIXpGgLd7UfYNFUrd9RMIfLvTi2l+NbeHvq6hPq5xjfGMVm+16kVhCLvXM\niF8BLdqtIFhBcDv4nbiMLrfluBGKCGoqoS0cU8WEBYYCwCog1UGSk0VhlWBXNuU=\n=H/Ye\n-----END PGP SIGNATURE-----\n", "payload": "tree b66f8e42b5aecd102b611fdd2506d8c503148200\nparent 74c4e6a981d3150db8444c8d250e50bbe6b93b6b\nparent f35517ee861dc012ccc26083dd4520045e2c4f6f\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1577489758 +0100\ncommitter GitHub <noreply@github.com> 1577489758 +0100\n\nRollup merge of #65244 - seanmonstar:into-future, r=seanmonstar\n\nadd IntoFuture trait and support for await\n\nThe [async-await RFC](https://rust-lang.github.io/rfcs/2394-async_await.html#the-await-compiler-built-in) mentions being able to `await` anything implementing `IntoFuture`. Somewhere along the way, it was left out.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b005b8f0d5219bc2020b902390508b5858baee", "html_url": "https://github.com/rust-lang/rust/commit/b1b005b8f0d5219bc2020b902390508b5858baee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b005b8f0d5219bc2020b902390508b5858baee/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c4e6a981d3150db8444c8d250e50bbe6b93b6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c4e6a981d3150db8444c8d250e50bbe6b93b6b", "html_url": "https://github.com/rust-lang/rust/commit/74c4e6a981d3150db8444c8d250e50bbe6b93b6b"}, {"sha": "f35517ee861dc012ccc26083dd4520045e2c4f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f35517ee861dc012ccc26083dd4520045e2c4f6f", "html_url": "https://github.com/rust-lang/rust/commit/f35517ee861dc012ccc26083dd4520045e2c4f6f"}], "stats": {"total": 102, "additions": 90, "deletions": 12}, "files": [{"sha": "dcb819f9381a487e12ee32307429b7f31840dec6", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -99,6 +99,21 @@ pub trait Future {\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n }\n \n+/// Conversion into a `Future`.\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub trait IntoFuture {\n+    /// The output that the future will produce on completion.\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    type Output;\n+    /// Which kind of future are we turning this into?\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    type Future: Future<Output = Self::Output>;\n+\n+    /// Creates a future from a value.\n+    #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    fn into_future(self) -> Self::Future;\n+}\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for &mut F {\n     type Output = F::Output;\n@@ -119,3 +134,13 @@ where\n         Pin::get_mut(self).as_mut().poll(cx)\n     }\n }\n+\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+impl<F: Future> IntoFuture for F {\n+    type Output = F::Output;\n+    type Future = F;\n+\n+    fn into_future(self) -> Self::Future {\n+        self\n+    }\n+}"}, {"sha": "aecd57b9ce71a7260315fca5425ec5d4544bdd5b", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -5,3 +5,6 @@\n mod future;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n+\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub use self::future::IntoFuture;"}, {"sha": "5fca5f061caf2896fd82ed0db20bcb3d63e72426", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -168,6 +168,7 @@ pub struct LoweringContext<'a, 'hir: 'a> {\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n+    allow_into_future: Option<Lrc<[Symbol]>>,\n }\n \n pub trait Resolver {\n@@ -300,6 +301,7 @@ pub fn lower_crate<'a, 'hir>(\n         in_scope_lifetimes: Vec::new(),\n         allow_try_trait: Some([sym::try_trait][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n+        allow_into_future: Some([sym::into_future][..].into()),\n     }\n     .lower_crate(krate)\n }"}, {"sha": "dbfa351b918b248619c238735cace4ba5032effd", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -529,7 +529,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Desugar `<expr>.await` into:\n     /// ```rust\n-    /// match <expr> {\n+    /// match ::std::future::IntoFuture::into_future(<expr>) {\n     ///     mut pinned => loop {\n     ///         match ::std::future::poll_with_tls_context(unsafe {\n     ///             <::std::pin::Pin>::new_unchecked(&mut pinned)\n@@ -653,11 +653,27 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // mut pinned => loop { ... }\n         let pinned_arm = self.arm(pinned_pat, loop_expr);\n \n-        // match <expr> {\n+        // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n+        let into_future_span = self.mark_span_with_reason(\n+            DesugaringKind::Await,\n+            await_span,\n+            self.allow_into_future.clone(),\n+        );\n+        let expr = self.lower_expr_mut(expr);\n+        let into_future_expr = self.expr_call_std_path(\n+            into_future_span,\n+            &[sym::future, sym::IntoFuture, sym::into_future],\n+            arena_vec![self; expr],\n+        );\n+\n+        // match <into_future_expr> {\n         //     mut pinned => loop { .. }\n         // }\n-        let expr = self.lower_expr(expr);\n-        hir::ExprKind::Match(expr, arena_vec![self; pinned_arm], hir::MatchSource::AwaitDesugar)\n+        hir::ExprKind::Match(\n+            into_future_expr,\n+            arena_vec![self; pinned_arm],\n+            hir::MatchSource::AwaitDesugar,\n+        )\n     }\n \n     fn lower_expr_closure("}, {"sha": "908736c63931bcb2a6b6bb453eb4ba699116e3f9", "filename": "src/libstd/future.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -10,7 +10,11 @@ use core::task::{Context, Poll};\n \n #[doc(inline)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-pub use core::future::*;\n+pub use core::future::Future;\n+\n+#[doc(inline)]\n+#[unstable(feature = \"into_future\", issue = \"67644\")]\n+pub use core::future::IntoFuture;\n \n /// Wrap a generator in a future.\n ///"}, {"sha": "82c8dc1237e2cbcb3aa9b313948b4d45b2c65bf0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -269,6 +269,7 @@\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n #![feature(int_error_matching)]\n+#![feature(into_future)]\n #![feature(integer_atomics)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "7ae037faf151d260dd7a59c87b3fe277b5c7d607", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -379,6 +379,8 @@ symbols! {\n         infer_static_outlives_requirements,\n         inline,\n         intel,\n+        into_future,\n+        IntoFuture,\n         into_iter,\n         IntoIterator,\n         into_result,"}, {"sha": "f2469de7394b065eb71edc91ed9ebc5ec5454329", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -112,7 +112,7 @@ async fn mixed_sizes() {\n fn main() {\n     assert_eq!(1028, std::mem::size_of_val(&single()));\n     assert_eq!(1032, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined()));\n-    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(7188, std::mem::size_of_val(&mixed_sizes()));\n+    assert_eq!(3080, std::mem::size_of_val(&joined()));\n+    assert_eq!(3080, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(6164, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "d5ff0eb304937e3de6b8acbdd19cf0fc1f25ff6e", "filename": "src/test/ui/async-await/await-into-future.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+\n+// edition:2018\n+\n+#![feature(into_future)]\n+\n+use std::{future::{Future, IntoFuture}, pin::Pin};\n+\n+struct AwaitMe;\n+\n+impl IntoFuture for AwaitMe {\n+    type Output = i32;\n+    type Future = Pin<Box<dyn Future<Output = i32>>>;\n+\n+    fn into_future(self) -> Self::Future {\n+        Box::pin(me())\n+    }\n+}\n+\n+async fn me() -> i32 {\n+    41\n+}\n+\n+async fn run() {\n+    assert_eq!(AwaitMe.await, 41);\n+}\n+\n+fn main() {}"}, {"sha": "e31904b6c1f7bd8f4682667e33a6f2f15631b1d1", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1b005b8f0d5219bc2020b902390508b5858baee/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=b1b005b8f0d5219bc2020b902390508b5858baee", "patch": "@@ -32,11 +32,8 @@ error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:13:5: 13:15]: std:\n    |\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:13:5: 13:15]`\n-   | \n-  ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |\n-LL |     F: Future,\n-   |        ------ required by this bound in `std::future::poll_with_tls_context`\n+   = note: required by `std::future::IntoFuture::into_future`\n \n error: aborting due to 4 previous errors\n "}]}