{"sha": "327a15d58c06136794621315388959b390511834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyN2ExNWQ1OGMwNjEzNjc5NDYyMTMxNTM4ODk1OWIzOTA1MTE4MzQ=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-19T02:52:26Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-19T09:27:44Z"}, "message": "rustc: Add a usage pass to collect one-off analyses\n\nThis patch starts from move the analysis which checkes of probably\nincorrectly usage of `int|uint` in native fn.\n\nIssue #1543", "tree": {"sha": "07aae60c63c9453ff00087d0f0a28133333994b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07aae60c63c9453ff00087d0f0a28133333994b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/327a15d58c06136794621315388959b390511834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/327a15d58c06136794621315388959b390511834", "html_url": "https://github.com/rust-lang/rust/commit/327a15d58c06136794621315388959b390511834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/327a15d58c06136794621315388959b390511834/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45c0651a49d56972cd69c651eccba384e23839f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/45c0651a49d56972cd69c651eccba384e23839f7", "html_url": "https://github.com/rust-lang/rust/commit/45c0651a49d56972cd69c651eccba384e23839f7"}], "stats": {"total": 106, "additions": 75, "deletions": 31}, "files": [{"sha": "20f24a1307aa5b29b1752824a24520017ade7e2d", "filename": "man/rustc.1", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -123,6 +123,9 @@ Build a test harness.\n .TP\n \\fB--warn-unused-imports\\fR:\n Warn about unnecessary imports.\n+.TP\n+\\fB--no-check-usage\\fR:\n+Disables various one-off usage analyses.\n .SH \"BUGS\"\n See \\fBhttps://github.com/mozilla/rust/issues\\fR for a list of known bugs.\n .SH \"AUTHOR\""}, {"sha": "54ca5db4294914fd4419e9b0245584a803633b1e", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -6,7 +6,7 @@ import syntax::parse::{parser};\n import syntax::{ast, codemap};\n import front::attr;\n import middle::{trans, resolve, freevars, kind, ty, typeck, fn_usage,\n-                last_use};\n+                last_use, check_usage};\n import syntax::print::{pp, pprust};\n import util::{ppaux, filesearch};\n import back::link;\n@@ -203,6 +203,10 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n+    if sess.opts.check_usage {\n+        time(time_passes, \"usage analyses\",\n+             bind check_usage::check_crate(ty_cx, crate));\n+    }\n \n     if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n     let outputs = option::get(outputs);\n@@ -395,6 +399,7 @@ fn build_session_options(match: getopts::match,\n         } else { link::output_type_exe };\n     let libcore = !opt_present(match, \"no-core\");\n     let verify = !opt_present(match, \"no-verify\");\n+    let check_usage = !opt_present(match, \"no-usage-check\");\n     let save_temps = opt_present(match, \"save-temps\");\n     let extra_debuginfo = opt_present(match, \"xg\");\n     let debuginfo = opt_present(match, \"g\") || extra_debuginfo;\n@@ -446,6 +451,7 @@ fn build_session_options(match: getopts::match,\n           debuginfo: debuginfo,\n           extra_debuginfo: extra_debuginfo,\n           verify: verify,\n+          check_usage: check_usage,\n           save_temps: save_temps,\n           stats: stats,\n           time_passes: time_passes,\n@@ -514,6 +520,7 @@ fn opts() -> [getopts::opt] {\n          optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n          optflag(\"no-verify\"),\n+         optflag(\"no-usage-check\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"no-core\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),"}, {"sha": "fcd5f1852ae79e86096ff9fea226902d0ae9efd1", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -38,6 +38,7 @@ options:\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     --no-verify        suppress LLVM verification step (slight speedup)\n+    --no-check-usage   suppress various one-off usage analyses\n     --parse-only       parse only; do not compile, assemble, or link\n     --no-trans         run all passes except translation; no output\n     -g                 produce debug info"}, {"sha": "4b7154a5a99b0b9c6fe260a44c3028bb3c582f26", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -33,6 +33,7 @@ type options =\n      debuginfo: bool,\n      extra_debuginfo: bool,\n      verify: bool,\n+     check_usage: bool,\n      save_temps: bool,\n      stats: bool,\n      time_passes: bool,"}, {"sha": "227e563ed7c5ce86d821688299b80408a4ac3218", "filename": "src/comp/middle/check_usage.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fmiddle%2Fcheck_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fmiddle%2Fcheck_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_usage.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -0,0 +1,59 @@\n+import driver::session::session;\n+import middle::ty::ctxt;\n+import syntax::{ast, visit};\n+\n+type crate_ctxt = {tcx: ty::ctxt};\n+\n+fn check_native_fn(ccx: @crate_ctxt, decl: ast::fn_decl) {\n+    let tys = vec::map(decl.inputs) {|a| a.ty };\n+    for ty in (tys + [decl.output]) {\n+        alt ty.node {\n+          ast::ty_int(ast::ty_i.) {\n+            ccx.tcx.sess.span_warn(\n+                ty.span, \"found rust type `int` in native module, while \" +\n+                         \"ctypes::c_int or ctypes::long should be used\");\n+          }\n+          ast::ty_uint(ast::ty_u.) {\n+            ccx.tcx.sess.span_warn(\n+                ty.span, \"found rust type `uint` in native module, while \" +\n+                         \"ctypes::c_uint or ctypes::ulong should be used\");\n+          }\n+          _ { }\n+        }\n+    }\n+}\n+\n+fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n+    alt it.node {\n+      ast::item_native_mod(nmod) {\n+        for ni in nmod.items {\n+            alt ni.node {\n+              ast::native_item_fn(decl, tps) {\n+                check_native_fn(ccx, decl);\n+              }\n+              _ { }\n+            }\n+        }\n+      }\n+      _ {/* nothing to do */ }\n+    }\n+}\n+\n+fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n+    let ccx = @{tcx: tcx};\n+    let visit = visit::mk_simple_visitor(@{\n+        visit_item: bind check_item(ccx, _)\n+        with *visit::default_simple_visitor()\n+    });\n+    visit::visit_crate(*crate, (), visit);\n+    tcx.sess.abort_if_errors();\n+}\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "d16c0d315dd52a3cba437303c2a4c9cfd6ab6344", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -2680,25 +2680,6 @@ fn check_method(ccx: @crate_ctxt, method: @ast::method) {\n     check_fn(ccx, ast::proto_bare, method.decl, method.body, method.id, none);\n }\n \n-fn check_native_fn(ccx: @crate_ctxt, decl: ast::fn_decl) {\n-    let tys = vec::map(decl.inputs) {|a| a.ty };\n-    for ty in (tys + [decl.output]) {\n-        alt ty.node {\n-          ast::ty_int(ast::ty_i) {\n-            ccx.tcx.sess.span_warn(\n-                ty.span, \"found rust type `int` in native module, while \" +\n-                         \"ctypes::c_int or ctypes::long should be used\");\n-          }\n-          ast::ty_uint(ast::ty_u) {\n-            ccx.tcx.sess.span_warn(\n-                ty.span, \"found rust type `uint` in native module, while \" +\n-                         \"ctypes::c_uint or ctypes::ulong should be used\");\n-          }\n-          _ { }\n-        }\n-    }\n-}\n-\n fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     alt it.node {\n       ast::item_const(_, e) { check_const(ccx, it.span, e, it.id); }\n@@ -2709,16 +2690,6 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n       ast::item_res(decl, tps, body, dtor_id, _) {\n         check_fn(ccx, ast::proto_bare, decl, body, dtor_id, none);\n       }\n-      ast::item_native_mod(nmod) {\n-        for ni in nmod.items {\n-            alt ni.node {\n-              ast::native_item_fn(decl, tps) {\n-                check_native_fn(ccx, decl);\n-              }\n-              _ { }\n-            }\n-        }\n-      }\n       ast::item_impl(tps, _, ty, ms) {\n         ccx.self_infos += [self_impl(ast_ty_to_ty(ccx.tcx, m_check, ty))];\n         for m in ms { check_method(ccx, m); }"}, {"sha": "f6405b963bad999b48df7df388c88685dca7e919", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -29,6 +29,7 @@ mod middle {\n     mod fn_usage;\n     mod check_alt;\n     mod check_const;\n+    mod check_usage;\n     mod mut;\n     mod alias;\n     mod last_use;"}, {"sha": "882b3038e8af781cdd392a25fa2a328400a7fb24", "filename": "src/test/compile-fail/warn-native-int-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/327a15d58c06136794621315388959b390511834/src%2Ftest%2Fcompile-fail%2Fwarn-native-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327a15d58c06136794621315388959b390511834/src%2Ftest%2Fcompile-fail%2Fwarn-native-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-native-int-types.rs?ref=327a15d58c06136794621315388959b390511834", "patch": "@@ -5,5 +5,6 @@ native mod xx {\n }\n \n fn main() {\n-  \"let compile fail to verify warning message\" = 999;\n+  // let it fail to verify warning message\n+  fail\n }"}]}