{"sha": "0145d06515d990f8b7bf45e261674c265c52d858", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDVkMDY1MTVkOTkwZjhiN2JmNDVlMjYxNjc0YzI2NWM1MmQ4NTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T14:47:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "use Source for module, part 1", "tree": {"sha": "bddaf6d176e9d903503fbf2cd406f60f61dce2df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bddaf6d176e9d903503fbf2cd406f60f61dce2df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0145d06515d990f8b7bf45e261674c265c52d858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0145d06515d990f8b7bf45e261674c265c52d858", "html_url": "https://github.com/rust-lang/rust/commit/0145d06515d990f8b7bf45e261674c265c52d858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0145d06515d990f8b7bf45e261674c265c52d858/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178d8e96b5c810f40e7dd282ab06bb25d1fc8a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/178d8e96b5c810f40e7dd282ab06bb25d1fc8a2a", "html_url": "https://github.com/rust-lang/rust/commit/178d8e96b5c810f40e7dd282ab06bb25d1fc8a2a"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "e920256e57e28765b580ef6f7ea7e372ffbcf74b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -196,16 +196,13 @@ impl Module {\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, ModuleSource) {\n+    pub fn definition_source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ModuleSource> {\n         let def_map = db.crate_def_map(self.krate);\n         let decl_id = def_map[self.module_id].declaration;\n         let file_id = def_map[self.module_id].definition;\n         let module_source = ModuleSource::new(db, file_id, decl_id);\n         let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n-        (file_id, module_source)\n+        (file_id, module_source).into()\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n@@ -226,9 +223,9 @@ impl Module {\n         db: &impl HirDatabase,\n         import: ImportId,\n     ) -> Either<TreeArc<ast::UseTree>, TreeArc<ast::ExternCrateItem>> {\n-        let (file_id, source) = self.definition_source(db);\n-        let (_, source_map) = db.raw_items_with_source_map(file_id);\n-        source_map.get(&source, import)\n+        let src = self.definition_source(db);\n+        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n+        source_map.get(&src.ast, import)\n     }\n \n     /// Returns the crate this module is part of."}, {"sha": "646b603d3bb8a53be4965e5269fdc2f73c470b59", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -48,8 +48,8 @@ impl HasSource for ImplBlock {\n     type Ast = TreeArc<ast::ImplBlock>;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ImplBlock>> {\n         let source_map = db.impls_in_module_with_source_map(self.module).1;\n-        let (file_id, source) = self.module.definition_source(db);\n-        (file_id, source_map.get(&source, self.impl_id)).into()\n+        let src = self.module.definition_source(db);\n+        (src.file_id, source_map.get(&src.ast, self.impl_id)).into()\n     }\n }\n \n@@ -69,8 +69,8 @@ impl ImplBlock {\n     /// Returns the syntax of the impl block\n     pub fn source(&self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ImplBlock>> {\n         let source_map = db.impls_in_module_with_source_map(self.module).1;\n-        let (file_id, source) = self.module.definition_source(db);\n-        (file_id, source_map.get(&source, self.impl_id)).into()\n+        let src = self.module.definition_source(db);\n+        (src.file_id, source_map.get(&src.ast, self.impl_id)).into()\n     }\n \n     pub fn id(&self) -> ImplId {\n@@ -207,16 +207,16 @@ impl ModuleImplBlocks {\n             impls_by_def: FxHashMap::default(),\n         };\n \n-        let (file_id, module_source) = m.module.definition_source(db);\n-        let node = match &module_source {\n+        let src = m.module.definition_source(db);\n+        let node = match &src.ast {\n             ModuleSource::SourceFile(node) => node.syntax(),\n             ModuleSource::Module(node) => {\n                 node.item_list().expect(\"inline module should have item list\").syntax()\n             }\n         };\n \n         for impl_block_ast in node.children().filter_map(ast::ImplBlock::cast) {\n-            let impl_block = ImplData::from_ast(db, file_id, m.module, impl_block_ast);\n+            let impl_block = ImplData::from_ast(db, src.file_id, m.module, impl_block_ast);\n             let id = m.impls.alloc(impl_block);\n             for &impl_item in &m.impls[id].items {\n                 m.impls_by_def.insert(impl_item, id);"}, {"sha": "cdc9182d6b8776329f67a6c45b910c6cb25165df", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -84,7 +84,7 @@ impl LangItems {\n     ) {\n         // Look for impl targets\n         let (impl_blocks, source_map) = db.impls_in_module_with_source_map(module.clone());\n-        let source = module.definition_source(db).1;\n+        let source = module.definition_source(db).ast;\n         for (impl_id, _) in impl_blocks.impls.iter() {\n             let impl_block = source_map.get(&source, impl_id);\n             let lang_item_name = impl_block"}, {"sha": "4f9e8c5a9e76c02ca92c9b5022cc1aea18dd6992", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -97,13 +97,13 @@ pub fn struct_from_module(\n     module: Module,\n     struct_def: &ast::StructDef,\n ) -> Struct {\n-    let (file_id, _) = module.definition_source(db);\n+    let file_id = module.definition_source(db).file_id;\n     let ctx = LocationCtx::new(db, module, file_id);\n     Struct { id: ctx.to_def(struct_def) }\n }\n \n pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n-    let (file_id, _) = module.definition_source(db);\n+    let file_id = module.definition_source(db).file_id;\n     let ctx = LocationCtx::new(db, module, file_id);\n     Enum { id: ctx.to_def(enum_def) }\n }\n@@ -113,7 +113,7 @@ pub fn trait_from_module(\n     module: Module,\n     trait_def: &ast::TraitDef,\n ) -> Trait {\n-    let (file_id, _) = module.definition_source(db);\n+    let file_id = module.definition_source(db).file_id;\n     let ctx = LocationCtx::new(db, module, file_id);\n     Trait { id: ctx.to_def(trait_def) }\n }"}, {"sha": "4a92be71056f96ff207d0988371c881f1a60aa33", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -129,10 +129,10 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn from_module(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n-        let (file_id, source) = module.definition_source(db);\n-        let file_id = file_id.as_original_file();\n+        let src = module.definition_source(db);\n+        let file_id = src.file_id.as_original_file();\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match source {\n+        match src.ast {\n             ModuleSource::SourceFile(node) => {\n                 NavigationTarget::from_syntax(file_id, name, None, node.syntax(), None, None)\n             }"}, {"sha": "77657607ba49273b8280b827e79387c47acb3ed3", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -115,8 +115,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             Some(Def(it)) => {\n                 match it {\n                     hir::ModuleDef::Module(it) => {\n-                        let it = it.definition_source(db).1;\n-                        if let hir::ModuleSource::Module(it) = it {\n+                        if let hir::ModuleSource::Module(it) = it.definition_source(db).ast {\n                             res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                         }\n                     }"}, {"sha": "12cdc6a6d162244a73631108ab87f7429c08ce0d", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0145d06515d990f8b7bf45e261674c265c52d858/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=0145d06515d990f8b7bf45e261674c265c52d858", "patch": "@@ -148,9 +148,9 @@ fn rename_mod(\n     let mut file_system_edits = Vec::new();\n     if let Some(module) = source_binder::module_from_declaration(db, position.file_id, &ast_module)\n     {\n-        let (file_id, module_source) = module.definition_source(db);\n-        let file_id = file_id.as_original_file();\n-        match module_source {\n+        let src = module.definition_source(db);\n+        let file_id = src.file_id.as_original_file();\n+        match src.ast {\n             ModuleSource::SourceFile(..) => {\n                 let mod_path: RelativePathBuf = db.file_relative_path(file_id);\n                 // mod is defined in path/to/dir/mod.rs"}]}