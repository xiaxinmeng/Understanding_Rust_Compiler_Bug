{"sha": "b850046ca1474a2e6b7b039d5844616bbfa97015", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTAwNDZjYTE0NzRhMmU2YjdiMDM5ZDU4NDQ2MTZiYmZhOTcwMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-13T14:02:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-13T14:02:25Z"}, "message": "Auto merge of #26272 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26255, #26256, #26257, #26259, #26260\n- Failed merges:", "tree": {"sha": "b58b6fccac19583095a3c5b8fd3203181c25b112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58b6fccac19583095a3c5b8fd3203181c25b112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b850046ca1474a2e6b7b039d5844616bbfa97015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b850046ca1474a2e6b7b039d5844616bbfa97015", "html_url": "https://github.com/rust-lang/rust/commit/b850046ca1474a2e6b7b039d5844616bbfa97015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b850046ca1474a2e6b7b039d5844616bbfa97015/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a27982623c12e759c0d8d8e53c5290b76351bdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a27982623c12e759c0d8d8e53c5290b76351bdd3", "html_url": "https://github.com/rust-lang/rust/commit/a27982623c12e759c0d8d8e53c5290b76351bdd3"}, {"sha": "023f66103d5d245cfa6c900e13ef7f5f4dd80520", "url": "https://api.github.com/repos/rust-lang/rust/commits/023f66103d5d245cfa6c900e13ef7f5f4dd80520", "html_url": "https://github.com/rust-lang/rust/commit/023f66103d5d245cfa6c900e13ef7f5f4dd80520"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "fe4f27b9d954cb6e3b341c148f3e8b259cf445e2", "filename": "src/doc/trpl/associated-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fassociated-types.md?ref=b850046ca1474a2e6b7b039d5844616bbfa97015", "patch": "@@ -43,7 +43,7 @@ trait Graph {\n Now, our clients can be abstract over a given `Graph`:\n \n ```rust,ignore\n-fn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> usize { ... }\n+fn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> u32 { ... }\n ```\n \n No need to deal with the `E`dge type here!"}, {"sha": "1c574f02091f8574f956557d3b67c7a2a4d30413", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=b850046ca1474a2e6b7b039d5844616bbfa97015", "patch": "@@ -285,8 +285,7 @@ has no side effect on the original iterator. Let's try it out with our infinite\n iterator from before:\n \n ```rust\n-# #![feature(step_by)]\n-for i in (1..).step_by(5).take(5) {\n+for i in (1..).take(5) {\n     println!(\"{}\", i);\n }\n ```\n@@ -295,10 +294,10 @@ This will print\n \n ```text\n 1\n-6\n-11\n-16\n-21\n+2\n+3\n+4\n+5\n ```\n \n `filter()` is an adapter that takes a closure as an argument. This closure"}, {"sha": "11d651c5778e3ebdaad134184d11bcb3382c6fa2", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=b850046ca1474a2e6b7b039d5844616bbfa97015", "patch": "@@ -305,7 +305,7 @@ fn substr<'a>(s: &'a str, until: u32) -> &'a str; // expanded\n fn get_str() -> &str; // ILLEGAL, no inputs\n \n fn frob(s: &str, t: &str) -> &str; // ILLEGAL, two inputs\n-fn frob<'a, 'b>(s: &'a str, t: &'b str) -> &str; // Expanded: Output lifetime is unclear\n+fn frob<'a, 'b>(s: &'a str, t: &'b str) -> &str; // Expanded: Output lifetime is ambiguous\n \n fn get_mut(&mut self) -> &mut T; // elided\n fn get_mut<'a>(&'a mut self) -> &'a mut T; // expanded"}, {"sha": "a7ced76e10c18716c77583639137efc621739689", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b850046ca1474a2e6b7b039d5844616bbfa97015/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=b850046ca1474a2e6b7b039d5844616bbfa97015", "patch": "@@ -187,22 +187,16 @@ impl char {\n     /// # Examples\n     ///\n     /// ```\n-    /// for i in '\u2764'.escape_unicode() {\n-    ///     println!(\"{}\", i);\n+    /// for c in '\u2764'.escape_unicode() {\n+    ///     print!(\"{}\", c);\n     /// }\n+    /// println!(\"\");\n     /// ```\n     ///\n     /// This prints:\n     ///\n     /// ```text\n-    /// \\\n-    /// u\n-    /// {\n-    /// 2\n-    /// 7\n-    /// 6\n-    /// 4\n-    /// }\n+    /// \\u{2764}\n     /// ```\n     ///\n     /// Collecting into a `String`:\n@@ -467,6 +461,12 @@ impl char {\n     /// Returns an iterator which yields the characters corresponding to the\n     /// lowercase equivalent of the character. If no conversion is possible then\n     /// an iterator with just the input character is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Some('c'), 'C'.to_lowercase().next());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_lowercase(self) -> ToLowercase {\n@@ -515,6 +515,12 @@ impl char {\n     /// [`SpecialCasing.txt`]: ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt\n     ///\n     /// [2]: http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Some('C'), 'c'.to_uppercase().next());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_uppercase(self) -> ToUppercase {"}]}