{"sha": "5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjFhYTg3MzRkN2QxMjBhZDJlMDliMmIzZDdkYjZlMzEzYjNhNjM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-01T14:31:14Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-22T21:11:00Z"}, "message": "Added initial processing of UserAssertTy statements.", "tree": {"sha": "4a4401f2bd3502694251013011b54b8e33e800eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4401f2bd3502694251013011b54b8e33e800eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlq0G+QACgkQAXYLT59T\n8VSWFA//SmjUthsRJh86a3W9KtzurLZ3zUseUvTNNevqE68hxj+L5Jly57qgOkqS\nvaVLA8jIdspYSmn+l9rWp+QmrUSeZBgpe5+MA0srC968HBz7VjTiTDARE5tUcMLG\n9PlSMm0GOzSOiiSJRzdkVwlw66AWk0kthJIQ1pxHSLWa1jWm3vBRAP0DbSLamBIL\nZ44b58ppWnqx8rKReYKzD5nngIVEyauoZXPMmogpIkKXg0zqFXMlgUuq94/vXoKF\nxb0D+6btxYZedrGQOra/Z2/kfN/K8ErgYag6E++/z1rlQfVn6jv8uG6O1xwOOAkJ\n6oT+o0PSpR9Ntrwo4ccknHRuNx/mcGH9inj+oK14l25aifDKozRTVupc6EDBbFo1\nH7tmYnl8qheMMY2dd0k0380S3ZicowwzhKxRENXhLX9mKuSqEQvnbQ81zEikedfH\n2F17HtYrYgpy/0GYJnxODSDWtL8PH5jTnDV/g4CypsMSHlLQeRyUVotuoiwqexk0\n5SZOj7Xq1s0UxcvrCI85g157r/ZIPnXqfzqtrcfWFtXy54+c8hQpdT+WJVcOpsd0\nOc5/kZsktyR7U0wPT+uTk2W+WRh+cSpU3rpiTWOhdSw6EUGPQWRjMzlnnWsVICfj\nhSK8YHGGVVauutzhbrJer4E5pznOgQz/nf25eGRTkcozXVYpN3U=\n=iWhc\n-----END PGP SIGNATURE-----", "payload": "tree 4a4401f2bd3502694251013011b54b8e33e800eb\nparent 1331cd4a8c7655875de6b94119f80f26c631925d\nauthor David Wood <david@davidtw.co> 1519914674 +0000\ncommitter David Wood <david@davidtw.co> 1521753060 +0000\n\nAdded initial processing of UserAssertTy statements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "html_url": "https://github.com/rust-lang/rust/commit/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1331cd4a8c7655875de6b94119f80f26c631925d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1331cd4a8c7655875de6b94119f80f26c631925d", "html_url": "https://github.com/rust-lang/rust/commit/1331cd4a8c7655875de6b94119f80f26c631925d"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "147952d867197657b32f00a08f676b0811c30055", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "patch": "@@ -761,12 +761,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n+            StatementKind::UserAssertTy(ref ty, ref local) => {\n+                let local_ty = mir.local_decls()[*local].ty;\n+                debug!(\"check_stmt: user_assert_ty ty={:?} local_ty={:?}\", ty, local_ty);\n+                if let Err(terr) =\n+                    self.eq_types(ty, local_ty, location.at_successor_within_block())\n+                {\n+                    span_mirbug!(\n+                        self,\n+                        stmt,\n+                        \"bad type assert ({:?} = {:?}): {:?}\",\n+                        ty,\n+                        local_ty,\n+                        terr\n+                    );\n+                }\n+            }\n             StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::InlineAsm { .. }\n             | StatementKind::EndRegion(_)\n             | StatementKind::Validate(..)\n-            | StatementKind::UserAssertTy(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "256b1fd66e9a749310c976e0ae3be482cf84220d", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "patch": "@@ -38,7 +38,7 @@ use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n use transform::{MirPass, MirSource};\n \n-pub struct CleanupPostBorrowck;\n+pub struct CleanEndRegions;\n \n struct GatherBorrowedRegions {\n     seen_regions: FxHashSet<region::Scope>,\n@@ -48,24 +48,19 @@ struct DeleteTrivialEndRegions<'a> {\n     seen_regions: &'a FxHashSet<region::Scope>,\n }\n \n-pub struct DeleteUserAssertTy;\n-\n-impl MirPass for CleanupPostBorrowck {\n+impl MirPass for CleanEndRegions {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        if tcx.emit_end_regions() {\n-            let mut gather = GatherBorrowedRegions {\n-                seen_regions: FxHashSet()\n-            };\n-            gather.visit_mir(mir);\n-\n-            let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n-            delete.visit_mir(mir);\n-        }\n+        if !tcx.emit_end_regions() { return; }\n \n-        let mut delete = DeleteUserAssertTy;\n+        let mut gather = GatherBorrowedRegions {\n+            seen_regions: FxHashSet()\n+        };\n+        gather.visit_mir(mir);\n+\n+        let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n         delete.visit_mir(mir);\n     }\n }\n@@ -115,6 +110,20 @@ impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> {\n     }\n }\n \n+pub struct CleanUserAssertTy;\n+\n+pub struct DeleteUserAssertTy;\n+\n+impl MirPass for CleanUserAssertTy {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        let mut delete = DeleteUserAssertTy;\n+        delete.visit_mir(mir);\n+    }\n+}\n+\n impl<'tcx> MutVisitor<'tcx> for DeleteUserAssertTy {\n     fn visit_statement(&mut self,\n                        block: BasicBlock,"}, {"sha": "63ca35aa0e7b2ab3bf9b971d0b248a4bd035cbd6", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=5f21aa8734d7d120ad2e09b2b3d7db6e313b3a63", "patch": "@@ -192,9 +192,8 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n \n     let mut mir = tcx.mir_built(def_id).steal();\n     run_passes![tcx, mir, def_id, 0;\n-        // Remove all `UserAssertTy` statements and all `EndRegion` statements that are not\n-        // involved in borrows.\n-        cleanup_post_borrowck::CleanupPostBorrowck,\n+        // Remove all `EndRegion` statements that are not involved in borrows.\n+        cleanup_post_borrowck::CleanEndRegions,\n \n         // What we need to do constant evaluation.\n         simplify::SimplifyCfg::new(\"initial\"),"}]}