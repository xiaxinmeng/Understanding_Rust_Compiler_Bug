{"sha": "eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYmQyMzNkY2QyMDhiYzIxY2EwZjhlZWEwMmQ4N2Q1NmU1MzE0ZWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-28T01:06:24Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-28T01:06:24Z"}, "message": "Start killing off obsolete/unused quoters, and fix long lines.", "tree": {"sha": "2ce72ee16c9e2fd5ad84b5f150bc791daffc49da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce72ee16c9e2fd5ad84b5f150bc791daffc49da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "html_url": "https://github.com/rust-lang/rust/commit/eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9f01cb421eae8e7ace0fa6b4d7f5ddf3ce4f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9f01cb421eae8e7ace0fa6b4d7f5ddf3ce4f65", "html_url": "https://github.com/rust-lang/rust/commit/1d9f01cb421eae8e7ace0fa6b4d7f5ddf3ce4f65"}], "stats": {"total": 85, "additions": 9, "deletions": 76}, "files": [{"sha": "35af5e7a9f54221f0d205a33554c026ae30df84c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "patch": "@@ -406,7 +406,8 @@ type matcher = spanned<matcher_>;\n //        $foo:expr   =>     1 + $foo    // interpolate an expr\n //        $foo:tt     =>     $foo        // interpolate a token-tree\n //        $foo:tt     =>     bar! $foo   // only other valid interpolation\n-//                                       // is in arg position for another macro\n+//                                       // is in arg position for another\n+//                                       // macro\n //\n // As a final, horrifying aside, note that macro-by-example's input is\n // also matched by one of these matchers. Holy self-referential! It is matched\n@@ -441,11 +442,9 @@ type mac_body = option<mac_body_>;\n \n #[auto_serialize]\n enum mac_ {\n-    mac_invoc(@path, mac_arg, mac_body),\n-    mac_invoc_tt(@path,~[token_tree]), // will kill mac_invoc and steal its name\n-    mac_embed_type(@ty),  // obsolete quoter\n-    mac_embed_block(blk), // obsolete quoter\n-    mac_ellipsis,         // obsolete pattern-match terminal\n+    mac_invoc(@path, mac_arg, mac_body), // old macro-invocation\n+    mac_invoc_tt(@path,~[token_tree]),   // new macro-invocation\n+    mac_ellipsis,                        // old pattern-match (obsolete)\n \n     // the span is used by the quoter/anti-quoter ...\n     mac_aq(span /* span of quote */, @expr), // anti-quote"}, {"sha": "2f8e63facf94a9d62aa8a5d8823f3585ad54b275", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "patch": "@@ -539,7 +539,7 @@ fn block_to_ident(blk: blk_) -> option<ident> {\n         }\n }\n \n-fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n+fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, _s: selector, _b: binders) {\n     fn select_pt_1(cx: ext_ctxt, m: matchable,\n                    fn_m: fn(ast::mac) -> match_result) -> match_result {\n         ret alt m {\n@@ -556,44 +556,6 @@ fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, s: selector, b: binders) {\n       ast::mac_ellipsis { cx.span_fatal(mac.span, ~\"misused `...`\"); }\n       ast::mac_invoc(_, _, _) { no_des(cx, mac.span, ~\"macro calls\"); }\n       ast::mac_invoc_tt(_, _) { no_des(cx, mac.span, ~\"macro calls\"); }\n-      ast::mac_embed_type(ty) {\n-        alt ty.node {\n-          ast::ty_path(pth, _) {\n-            alt path_to_ident(pth) {\n-              some(id) {\n-                /* look for an embedded type */\n-                fn select_pt_2(m: ast::mac) -> match_result {\n-                    ret alt m.node {\n-                          ast::mac_embed_type(t) { some(leaf(match_ty(t))) }\n-                          _ { none }\n-                        }\n-                }\n-                let final_step = |x| select_pt_1(cx, x, select_pt_2);\n-                b.real_binders.insert(id, compose_sels(s, final_step));\n-              }\n-              none { no_des(cx, pth.span, ~\"under `#<>`\"); }\n-            }\n-          }\n-          _ { no_des(cx, ty.span, ~\"under `#<>`\"); }\n-        }\n-      }\n-      ast::mac_embed_block(blk) {\n-        alt block_to_ident(blk.node) {\n-          some(id) {\n-            fn select_pt_2(m: ast::mac) -> match_result {\n-                ret alt m.node {\n-                      ast::mac_embed_block(blk) {\n-                        some(leaf(match_block(blk)))\n-                      }\n-                      _ { none }\n-                    }\n-            }\n-            let final_step = |x| select_pt_1(cx, x, select_pt_2);\n-            b.real_binders.insert(id, compose_sels(s, final_step));\n-          }\n-          none { no_des(cx, blk.span, ~\"under `#{}`\"); }\n-        }\n-      }\n       ast::mac_aq(_,_) { no_des(cx, mac.span, ~\"antiquotes\"); }\n       ast::mac_var(_) { no_des(cx, mac.span, ~\"antiquote variables\"); }\n     }"}, {"sha": "168d82344d30d40e973f1d2b429465248e330838", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "patch": "@@ -118,8 +118,6 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n                            option::map(arg, |x| fld.fold_expr(x)), body)\n                }\n                mac_invoc_tt(pth, tt) { m.node }\n-               mac_embed_type(ty) { mac_embed_type(fld.fold_ty(ty)) }\n-               mac_embed_block(blk) { mac_embed_block(fld.fold_block(blk)) }\n                mac_ellipsis { mac_ellipsis }\n                mac_aq(_,_) { /* FIXME (#2543) */ copy m.node }\n                mac_var(_) { /* FIXME (#2543) */ copy m.node }"}, {"sha": "51f6ae021cddefdfd10bfe8a453feb071fbdb476", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "patch": "@@ -38,8 +38,8 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              item_foreign_mod, item_impl, item_mac, item_mod, item_trait,\n              item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n              lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const,\n-             m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis, mac_embed_block,\n-             mac_embed_type, mac_invoc, mac_invoc_tt, mac_var, matcher,\n+             m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis,\n+             mac_invoc, mac_invoc_tt, mac_var, matcher,\n              method, mode, mt, mtc_bb, mtc_rep, mtc_tok, mul, mutability, neg,\n              noreturn, not, pat, pat_box, pat_enum, pat_ident, pat_lit,\n              pat_range, pat_rec, pat_tup, pat_uniq, pat_wild, path, private,\n@@ -831,21 +831,6 @@ class parser {\n                 |p| p.parse_expr());\n             hi = self.span.hi;\n             ex = expr_vec(es, mutbl);\n-        } else if self.token == token::POUND\n-            && self.look_ahead(1u) == token::LT {\n-            self.bump(); self.bump();\n-            let ty = self.parse_ty(false);\n-            self.expect(token::GT);\n-\n-            /* hack: early return to take advantage of specialized function */\n-            ret pexpr(self.mk_mac_expr(lo, self.span.hi,\n-                                       mac_embed_type(ty)));\n-        } else if self.token == token::POUND\n-            && self.look_ahead(1u) == token::LBRACE {\n-            self.bump(); self.bump();\n-            let blk = mac_embed_block(\n-                self.parse_block_tail(lo, default_blk));\n-            ret pexpr(self.mk_mac_expr(lo, self.span.hi, blk));\n         } else if self.token == token::ELLIPSIS {\n             self.bump();\n             ret pexpr(self.mk_mac_expr(lo, self.span.hi, mac_ellipsis));"}, {"sha": "8e541aed76d7eb37aef2424c8057b2bc4d6942b0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "patch": "@@ -728,7 +728,7 @@ fn print_block_with_attrs(s: ps, blk: ast::blk, attrs: ~[ast::attribute]) {\n     print_possibly_embedded_block_(s, blk, block_normal, indent_unit, attrs);\n }\n \n-enum embed_type { block_macro, block_block_fn, block_normal, }\n+enum embed_type { block_block_fn, block_normal, }\n \n fn print_possibly_embedded_block(s: ps, blk: ast::blk, embedded: embed_type,\n                                  indented: uint) {\n@@ -747,7 +747,6 @@ fn print_possibly_embedded_block_(s: ps, blk: ast::blk, embedded: embed_type,\n     let ann_node = node_block(s, blk);\n     s.ann.pre(ann_node);\n     alt embedded {\n-      block_macro { word(s.s, ~\"#{\"); end(s); }\n       block_block_fn { end(s); }\n       block_normal { bopen(s); }\n     }\n@@ -841,14 +840,6 @@ fn print_mac(s: ps, m: ast::mac) {\n         for tts.each() |tt| { print_tt(s, tt); }\n         bclose(s, m.span);\n       }\n-      ast::mac_embed_type(ty) {\n-        word(s.s, ~\"#<\");\n-        print_type(s, ty);\n-        word(s.s, ~\">\");\n-      }\n-      ast::mac_embed_block(blk) {\n-        print_possibly_embedded_block(s, blk, block_normal, indent_unit);\n-      }\n       ast::mac_ellipsis { word(s.s, ~\"...\"); }\n       ast::mac_var(v) { word(s.s, #fmt(\"$%u\", v)); }\n       _ { /* fixme */ }"}, {"sha": "e279bf3a7f8f76f011c6dfd3f67b369ea1f2a1fc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabd233dcd208bc21ca0f8eea02d87d56e5314eb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=eabd233dcd208bc21ca0f8eea02d87d56e5314eb", "patch": "@@ -351,8 +351,6 @@ fn visit_mac<E>(m: mac, e: E, v: vt<E>) {\n       ast::mac_invoc(pth, arg, body) {\n         option::map(arg, |arg| v.visit_expr(arg, e, v)); }\n       ast::mac_invoc_tt(pth, tt) { /* no user-serviceable parts inside */ }\n-      ast::mac_embed_type(ty) { v.visit_ty(ty, e, v); }\n-      ast::mac_embed_block(blk) { v.visit_block(blk, e, v); }\n       ast::mac_ellipsis { }\n       ast::mac_aq(_, e) { /* FIXME: maybe visit (Issue #2340) */ }\n       ast::mac_var(_) { }"}]}