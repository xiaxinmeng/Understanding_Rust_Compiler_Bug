{"sha": "0da5f76a92584b2af13d0382da41119c88bdb521", "node_id": "C_kwDOAAsO6NoAKDBkYTVmNzZhOTI1ODRiMmFmMTNkMDM4MmRhNDExMTljODhiZGI1MjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T16:25:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T16:25:06Z"}, "message": "Auto merge of #2516 - RalfJung:read-pointer-as-bytes, r=RalfJung\n\nAdjust for supporting more implicit ptr-to-int transmutation\n\nThis is the Miri side of https://github.com/rust-lang/rust/pull/101101.\nFixes https://github.com/rust-lang/miri/issues/2456.", "tree": {"sha": "cfd2bc5e3ed916310d056b15e161607ca552a11d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfd2bc5e3ed916310d056b15e161607ca552a11d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da5f76a92584b2af13d0382da41119c88bdb521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da5f76a92584b2af13d0382da41119c88bdb521", "html_url": "https://github.com/rust-lang/rust/commit/0da5f76a92584b2af13d0382da41119c88bdb521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da5f76a92584b2af13d0382da41119c88bdb521/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95b315d7f64577c68ca2b738be29c00ae2f79c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/95b315d7f64577c68ca2b738be29c00ae2f79c89", "html_url": "https://github.com/rust-lang/rust/commit/95b315d7f64577c68ca2b738be29c00ae2f79c89"}, {"sha": "0113f9e727665b6fa54ef4b92766b0e40201a296", "url": "https://api.github.com/repos/rust-lang/rust/commits/0113f9e727665b6fa54ef4b92766b0e40201a296", "html_url": "https://github.com/rust-lang/rust/commit/0113f9e727665b6fa54ef4b92766b0e40201a296"}], "stats": {"total": 262, "additions": 159, "deletions": 103}, "files": [{"sha": "0909f24752ac6b468a8961378a72ec7c728b6a88", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1 +1 @@\n-94b2b15e63c5d2b2a6a0910e3dae554ce9415bf9\n+4fd4de7ea358ad6fc28c5780533ea8ccc09e1006"}, {"sha": "8ba2995662babb0d783c23802b43cf5253679389", "filename": "src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -226,13 +226,14 @@ pub fn report_error<'tcx, 'mir>(\n             let helps = match e.kind() {\n                 Unsupported(\n                     UnsupportedOpInfo::ThreadLocalStatic(_) |\n-                    UnsupportedOpInfo::ReadExternStatic(_)\n+                    UnsupportedOpInfo::ReadExternStatic(_) |\n+                    UnsupportedOpInfo::PartialPointerOverwrite(_) | // we make memory uninit instead\n+                    UnsupportedOpInfo::ReadPointerAsBytes\n                 ) =>\n                     panic!(\"Error should never be raised by Miri: {kind:?}\", kind = e.kind()),\n                 Unsupported(\n                     UnsupportedOpInfo::Unsupported(_) |\n-                    UnsupportedOpInfo::PartialPointerOverwrite(_) |\n-                    UnsupportedOpInfo::ReadPointerAsBytes\n+                    UnsupportedOpInfo::PartialPointerCopy(_)\n                 ) =>\n                     vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n                 UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })"}, {"sha": "57c9fd3389cedf836b730f4600fe1adc701c883f", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -757,7 +757,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Step 2: get the bytes.\n-        this.read_bytes_ptr(ptr, len)\n+        this.read_bytes_ptr_strip_provenance(ptr, len)\n     }\n \n     fn read_wide_str(&self, mut ptr: Pointer<Option<Provenance>>) -> InterpResult<'tcx, Vec<u16>> {"}, {"sha": "b7624ac5922d179e00c00086e8a3dfd581a7c956", "filename": "src/machine.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -205,6 +205,21 @@ impl interpret::Provenance for Provenance {\n             Provenance::Wildcard => None,\n         }\n     }\n+\n+    fn join(left: Option<Self>, right: Option<Self>) -> Option<Self> {\n+        match (left, right) {\n+            // If both are the *same* concrete tag, that is the result.\n+            (\n+                Some(Provenance::Concrete { alloc_id: left_alloc, sb: left_sb }),\n+                Some(Provenance::Concrete { alloc_id: right_alloc, sb: right_sb }),\n+            ) if left_alloc == right_alloc && left_sb == right_sb => left,\n+            // If one side is a wildcard, the best possible outcome is that it is equal to the other\n+            // one, and we use that.\n+            (Some(Provenance::Wildcard), o) | (o, Some(Provenance::Wildcard)) => o,\n+            // Otherwise, fall back to `None`.\n+            _ => None,\n+        }\n+    }\n }\n \n impl fmt::Debug for ProvenanceExtra {"}, {"sha": "b94b6bbb2b8b657f00260bc606a43edb54352634", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -560,8 +560,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let n = Size::from_bytes(this.read_scalar(n)?.to_machine_usize(this)?);\n \n                 let result = {\n-                    let left_bytes = this.read_bytes_ptr(left, n)?;\n-                    let right_bytes = this.read_bytes_ptr(right, n)?;\n+                    let left_bytes = this.read_bytes_ptr_strip_provenance(left, n)?;\n+                    let right_bytes = this.read_bytes_ptr_strip_provenance(right, n)?;\n \n                     use std::cmp::Ordering::*;\n                     match left_bytes.cmp(right_bytes) {\n@@ -583,7 +583,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let val = val as u8;\n \n                 if let Some(idx) = this\n-                    .read_bytes_ptr(ptr, Size::from_bytes(num))?\n+                    .read_bytes_ptr_strip_provenance(ptr, Size::from_bytes(num))?\n                     .iter()\n                     .rev()\n                     .position(|&c| c == val)\n@@ -606,7 +606,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let val = val as u8;\n \n                 let idx = this\n-                    .read_bytes_ptr(ptr, Size::from_bytes(num))?\n+                    .read_bytes_ptr_strip_provenance(ptr, Size::from_bytes(num))?\n                     .iter()\n                     .position(|&c| c == val);\n                 if let Some(idx) = idx {"}, {"sha": "06cd533626a5ebde45a491a24e186785d14e8831", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -761,7 +761,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n-            let bytes = this.read_bytes_ptr(buf, Size::from_bytes(count))?;\n+            let bytes = this.read_bytes_ptr_strip_provenance(buf, Size::from_bytes(count))?;\n             let result =\n                 file_descriptor.write(communicate, bytes)?.map(|c| i64::try_from(c).unwrap());\n             this.try_unwrap_io_result(result)"}, {"sha": "8749ed91bb4bbcdc75d9980055c58df11131dd59", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -78,7 +78,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // stdout/stderr\n                     use std::io::{self, Write};\n \n-                    let buf_cont = this.read_bytes_ptr(buf, Size::from_bytes(u64::from(n)))?;\n+                    let buf_cont =\n+                        this.read_bytes_ptr_strip_provenance(buf, Size::from_bytes(u64::from(n)))?;\n                     let res = if this.machine.mute_stdout_stderr {\n                         Ok(buf_cont.len())\n                     } else if handle == -11 {"}, {"sha": "e1dcdda7fdfe344608cd137199d59a402ce01e23", "filename": "tests/fail/copy_half_a_pointer.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fcopy_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fcopy_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fcopy_half_a_pointer.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -0,0 +1,21 @@\n+//@normalize-stderr-test: \"\\+0x[48]\" -> \"+HALF_PTR\"\n+#![allow(dead_code)]\n+\n+// We use packed structs to get around alignment restrictions\n+#[repr(packed)]\n+struct Data {\n+    pad: u8,\n+    ptr: &'static i32,\n+}\n+\n+static G: i32 = 0;\n+\n+fn main() {\n+    let mut d = Data { pad: 0, ptr: &G };\n+\n+    // Get a pointer to the beginning of the Data struct (one u8 byte, then the pointer bytes).\n+    let d_alias = &mut d as *mut _ as *mut *const u8;\n+    unsafe {\n+        let _x = d_alias.read_unaligned(); //~ERROR: unable to copy parts of a pointer\n+    }\n+}"}, {"sha": "21797757084eec6bba714e3cf6123aa1eadbe232", "filename": "tests/fail/copy_half_a_pointer.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fcopy_half_a_pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fcopy_half_a_pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fcopy_half_a_pointer.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unable to copy parts of a pointer from memory at ALLOC+HALF_PTR\n+  --> $DIR/copy_half_a_pointer.rs:LL:CC\n+   |\n+LL |         let _x = d_alias.read_unaligned();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ unable to copy parts of a pointer from memory at ALLOC+HALF_PTR\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/copy_half_a_pointer.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "c14f86147dbb9d0c3c86b105e001c100cd83ab95", "filename": "tests/fail/intrinsics/raw_eq_on_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -6,6 +6,5 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     let x = &0;\n-    // FIXME: the error message is not great (should be UB rather than 'unsupported')\n-    unsafe { raw_eq(&x, &x) }; //~ERROR: unsupported operation\n+    unsafe { raw_eq(&x, &x) }; //~ERROR: `raw_eq` on bytes with provenance\n }"}, {"sha": "2236ad9839c5e8c3e2b6a024171743b6a3299c72", "filename": "tests/fail/intrinsics/raw_eq_on_ptr.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,10 +1,11 @@\n-error: unsupported operation: unable to turn pointer into raw bytes\n+error: Undefined Behavior: `raw_eq` on bytes with provenance\n   --> $DIR/raw_eq_on_ptr.rs:LL:CC\n    |\n LL |     unsafe { raw_eq(&x, &x) };\n-   |              ^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n+   |              ^^^^^^^^^^^^^^ `raw_eq` on bytes with provenance\n    |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `main` at $DIR/raw_eq_on_ptr.rs:LL:CC\n "}, {"sha": "2435a87a6f28cc5ba68f063a84c9afd05c99bcd7", "filename": "tests/fail/invalid_int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Finvalid_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Finvalid_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_int.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,3 +1,4 @@\n+#![allow(invalid_value)]\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n //@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation"}, {"sha": "2d66913262476624da60be0cf333a928f0f28a1d", "filename": "tests/fail/reading_half_a_pointer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Freading_half_a_pointer.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -24,6 +24,7 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR: unable to turn pointer into raw bytes\n+        let x = *d_alias;\n+        let _val = *x; //~ERROR: is a dangling pointer (it has no provenance)\n     }\n }"}, {"sha": "61a7161a98bb3c9880f5901eb3f52c5f8d338c73", "filename": "tests/fail/reading_half_a_pointer.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Freading_half_a_pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Freading_half_a_pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Freading_half_a_pointer.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,10 +1,11 @@\n-error: unsupported operation: unable to turn pointer into raw bytes\n+error: Undefined Behavior: dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n   --> $DIR/reading_half_a_pointer.rs:LL:CC\n    |\n-LL |         let _x = *d_alias;\n-   |                  ^^^^^^^^ unable to turn pointer into raw bytes\n+LL |         let _val = *x;\n+   |                    ^^ dereferencing pointer failed: $HEX[noalloc] is a dangling pointer (it has no provenance)\n    |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `main` at $DIR/reading_half_a_pointer.rs:LL:CC\n "}, {"sha": "a60efb98f9d871666333381f0d2c9ce8f03464aa", "filename": "tests/fail/transmute_fat1.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.rs?ref=95b315d7f64577c68ca2b738be29c00ae2f79c89", "patch": "@@ -1,13 +0,0 @@\n-#[cfg(target_pointer_width = \"64\")]\n-const N: usize = 16;\n-\n-#[cfg(target_pointer_width = \"32\")]\n-const N: usize = 8;\n-\n-fn main() {\n-    let bad = unsafe {\n-        std::mem::transmute::<&[u8], [u8; N]>(&[1u8])\n-        //~^ ERROR: constructing invalid value: encountered a pointer\n-    };\n-    let _val = bad[0] + bad[bad.len() - 1];\n-}"}, {"sha": "e1907e0801949bf037ecbd24dd97c551f26175fc", "filename": "tests/fail/transmute_fat1.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=95b315d7f64577c68ca2b738be29c00ae2f79c89", "patch": "@@ -1,15 +0,0 @@\n-error: Undefined Behavior: constructing invalid value: encountered a pointer, but expected plain (non-pointer) bytes\n-  --> $DIR/transmute_fat1.rs:LL:CC\n-   |\n-LL |         std::mem::transmute::<&[u8], [u8; N]>(&[1u8])\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a pointer, but expected plain (non-pointer) bytes\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n-   = note: inside `main` at $DIR/transmute_fat1.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "ce4fdcabd047a74654fbb579297ae3de57f4e2fd", "filename": "tests/fail/validity/invalid_bool_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -2,9 +2,9 @@\n \n union MyUninit {\n     init: (),\n-    uninit: bool,\n+    uninit: [bool; 1],\n }\n \n fn main() {\n-    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: uninitialized\n+    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: constructing invalid value\n }"}, {"sha": "5a7bd80e40c15a1aa851cdbf814ed3cc6d70d9fe", "filename": "tests/fail/validity/invalid_bool_uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: constructing invalid value at [0]: encountered uninitialized memory, but expected a boolean\n   --> $DIR/invalid_bool_uninit.rs:LL:CC\n    |\n LL |     let _b = unsafe { MyUninit { init: () }.uninit };\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered uninitialized memory, but expected a boolean\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "0e3c3ccac6f23af9ce3bdb6bde272f9789c87ad4", "filename": "tests/fail/validity/invalid_char_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -2,9 +2,9 @@\n \n union MyUninit {\n     init: (),\n-    uninit: char,\n+    uninit: [char; 1],\n }\n \n fn main() {\n-    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: uninitialized\n+    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: constructing invalid value\n }"}, {"sha": "fb5d3ee1f1f9c3687bb3f63e00ebafd3534a43fe", "filename": "tests/fail/validity/invalid_char_uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: constructing invalid value at [0]: encountered uninitialized memory, but expected a unicode scalar value\n   --> $DIR/invalid_char_uninit.rs:LL:CC\n    |\n LL |     let _b = unsafe { MyUninit { init: () }.uninit };\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered uninitialized memory, but expected a unicode scalar value\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "014a8ae847a7922a561b20985fbb5599fc34bbfb", "filename": "tests/fail/validity/invalid_fnptr_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -2,9 +2,9 @@\n \n union MyUninit {\n     init: (),\n-    uninit: fn(),\n+    uninit: [fn(); 1],\n }\n \n fn main() {\n-    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: uninitialized\n+    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: constructing invalid value\n }"}, {"sha": "35309e90136cba3cc7eb4c03eef2b6cdf3a65a7a", "filename": "tests/fail/validity/invalid_fnptr_uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: constructing invalid value at [0]: encountered uninitialized memory, but expected a function pointer\n   --> $DIR/invalid_fnptr_uninit.rs:LL:CC\n    |\n LL |     let _b = unsafe { MyUninit { init: () }.uninit };\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered uninitialized memory, but expected a function pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "c8613d274c81dfcf8eb5aabedee7b52c37f4457c", "filename": "tests/fail/validity/ptr_integer_array_transmute.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.rs?ref=95b315d7f64577c68ca2b738be29c00ae2f79c89", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let r = &mut 42;\n-    let _i: [usize; 1] = unsafe { std::mem::transmute(r) }; //~ ERROR: encountered a pointer, but expected plain (non-pointer) bytes\n-}"}, {"sha": "118c6a4327cde96d2b450fce0189a84fad232c94", "filename": "tests/fail/validity/ptr_integer_array_transmute.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.stderr?ref=95b315d7f64577c68ca2b738be29c00ae2f79c89", "patch": "@@ -1,15 +0,0 @@\n-error: Undefined Behavior: constructing invalid value: encountered a pointer, but expected plain (non-pointer) bytes\n-  --> $DIR/ptr_integer_array_transmute.rs:LL:CC\n-   |\n-LL |     let _i: [usize; 1] = unsafe { std::mem::transmute(r) };\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a pointer, but expected plain (non-pointer) bytes\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_integer_array_transmute.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "045bb46464fae90d171e6f6b44a424b62e7381ed", "filename": "tests/fail/validity/uninit_float.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_float.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,9 @@\n-#![allow(deprecated)]\n+#![allow(deprecated, invalid_value)]\n // This test is adapted from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n \n fn main() {\n     // Deliberately using `mem::uninitialized` to make sure that despite all the mitigations, we consider this UB.\n-    let _val: f32 = unsafe { std::mem::uninitialized() };\n+    // The array avoids a `Scalar` layout which detects uninit without even doing validation.\n+    let _val: [f32; 1] = unsafe { std::mem::uninitialized() };\n     //~^ ERROR: uninitialized\n }"}, {"sha": "677a0fc5570d7901d9defc2dfd2e6bbfce5ba630", "filename": "tests/fail/validity/uninit_float.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_float.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: constructing invalid value at .value[0]: encountered uninitialized bytes\n   --> $DIR/uninit_float.rs:LL:CC\n    |\n-LL |     let _val: f32 = unsafe { std::mem::uninitialized() };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let _val: [f32; 1] = unsafe { std::mem::uninitialized() };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .value[0]: encountered uninitialized bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "a94302603a2193ea47cfcc4a84abfcd8d3dd6680", "filename": "tests/fail/validity/uninit_integer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_integer.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,6 +1,8 @@\n+#![allow(invalid_value)]\n // This test is from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n \n fn main() {\n-    let _val = unsafe { std::mem::MaybeUninit::<usize>::uninit().assume_init() };\n+    // The array avoids a `Scalar` layout which detects uninit without even doing validation.\n+    let _val = unsafe { std::mem::MaybeUninit::<[usize; 1]>::uninit().assume_init() };\n     //~^ ERROR: uninitialized\n }"}, {"sha": "a9ac2a6dc67e76ae35166247e99b60de362c9fca", "filename": "tests/fail/validity/uninit_integer.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_integer.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: constructing invalid value at .value[0]: encountered uninitialized bytes\n   --> $DIR/uninit_integer.rs:LL:CC\n    |\n-LL |     let _val = unsafe { std::mem::MaybeUninit::<usize>::uninit().assume_init() };\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let _val = unsafe { std::mem::MaybeUninit::<[usize; 1]>::uninit().assume_init() };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .value[0]: encountered uninitialized bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "18703152ea108660e7e21d48826c4d2a5772b01f", "filename": "tests/fail/validity/uninit_raw_ptr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_raw_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_raw_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_raw_ptr.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,4 +1,7 @@\n+#![allow(invalid_value)]\n+\n fn main() {\n-    let _val = unsafe { std::mem::MaybeUninit::<*const u8>::uninit().assume_init() };\n+    // The array avoids a `Scalar` layout which detects uninit without even doing validation.\n+    let _val = unsafe { std::mem::MaybeUninit::<[*const u8; 1]>::uninit().assume_init() };\n     //~^ ERROR: uninitialized\n }"}, {"sha": "bbae9cf69ffe17af4e70a1489ce18a527e92b8ea", "filename": "tests/fail/validity/uninit_raw_ptr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Ffail%2Fvalidity%2Funinit_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_raw_ptr.stderr?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: constructing invalid value at .value[0]: encountered uninitialized memory, but expected a raw pointer\n   --> $DIR/uninit_raw_ptr.rs:LL:CC\n    |\n-LL |     let _val = unsafe { std::mem::MaybeUninit::<*const u8>::uninit().assume_init() };\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let _val = unsafe { std::mem::MaybeUninit::<[*const u8; 1]>::uninit().assume_init() };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .value[0]: encountered uninitialized memory, but expected a raw pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "dfd78ace520c51b0e743ca139fcc713fe43ef74e", "filename": "tests/pass/transmute_fat.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Fpass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b315d7f64577c68ca2b738be29c00ae2f79c89/tests%2Fpass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_fat.rs?ref=95b315d7f64577c68ca2b738be29c00ae2f79c89", "patch": "@@ -1,10 +0,0 @@\n-// Stacked Borrows disallows this becuase the reference is never cast to a raw pointer.\n-//@compile-flags: -Zmiri-disable-stacked-borrows\n-\n-fn main() {\n-    // If we are careful, we can exploit data layout...\n-    // This is a tricky case since we are transmuting a ScalarPair type to a non-ScalarPair type.\n-    let raw = unsafe { std::mem::transmute::<&[u8], [*const u8; 2]>(&[42]) };\n-    let ptr: *const u8 = unsafe { std::mem::transmute_copy(&raw) };\n-    assert_eq!(unsafe { *ptr }, 42);\n-}"}, {"sha": "fd9d457e440e91e75d919b854ece0dd21e94eb11", "filename": "tests/pass/transmute_ptr.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Fpass%2Ftransmute_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da5f76a92584b2af13d0382da41119c88bdb521/tests%2Fpass%2Ftransmute_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_ptr.rs?ref=0da5f76a92584b2af13d0382da41119c88bdb521", "patch": "@@ -0,0 +1,52 @@\n+#![feature(strict_provenance)]\n+use std::{mem, ptr};\n+\n+fn t1() {\n+    // If we are careful, we can exploit data layout...\n+    // This is a tricky case since we are transmuting a ScalarPair type to a non-ScalarPair type.\n+    let raw = unsafe { mem::transmute::<&[u8], [*const u8; 2]>(&[42]) };\n+    let ptr: *const u8 = unsafe { mem::transmute_copy(&raw) };\n+    assert_eq!(unsafe { *ptr }, 42);\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+const PTR_SIZE: usize = 8;\n+#[cfg(target_pointer_width = \"32\")]\n+const PTR_SIZE: usize = 4;\n+\n+fn t2() {\n+    let bad = unsafe { mem::transmute::<&[u8], [u8; 2 * PTR_SIZE]>(&[1u8]) };\n+    let _val = bad[0] + bad[bad.len() - 1];\n+}\n+\n+fn ptr_integer_array() {\n+    let r = &mut 42;\n+    let _i: [usize; 1] = unsafe { mem::transmute(r) };\n+\n+    let _x: [u8; PTR_SIZE] = unsafe { mem::transmute(&0) };\n+}\n+\n+fn ptr_in_two_halves() {\n+    unsafe {\n+        let ptr = &0 as *const i32;\n+        let arr = [ptr; 2];\n+        // We want to do a scalar read of a pointer at offset PTR_SIZE/2 into this array. But we\n+        // cannot use a packed struct or `read_unaligned`, as those use the memcpy code path in\n+        // Miri. So instead we shift the entire array by a bit and then the actual read we want to\n+        // do is perfectly aligned.\n+        let mut target_arr = [ptr::null::<i32>(); 3];\n+        let target = target_arr.as_mut_ptr().cast::<u8>();\n+        target.add(PTR_SIZE / 2).cast::<[*const i32; 2]>().write_unaligned(arr);\n+        // Now target_arr[1] is a mix of the two `ptr` we had stored in `arr`.\n+        let strange_ptr = target_arr[1];\n+        // Check that the provenance works out.\n+        assert_eq!(*strange_ptr.with_addr(ptr.addr()), 0);\n+    }\n+}\n+\n+fn main() {\n+    t1();\n+    t2();\n+    ptr_integer_array();\n+    ptr_in_two_halves();\n+}"}]}