{"sha": "db6a85d3583e472645b03be93bb5763431035008", "node_id": "C_kwDOAAsO6NoAKGRiNmE4NWQzNTgzZTQ3MjY0NWIwM2JlOTNiYjU3NjM0MzEwMzUwMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-17T17:17:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-17T17:17:39Z"}, "message": "Auto merge of #12778 - Logarithmus:feature/fix-negative-const-generics, r=flodiebold\n\nSupport negative, `char` & `bool` const generics\n\nBefore:\n![Before](https://user-images.githubusercontent.com/29541480/179379832-0c3b2a74-fef6-427e-b89f-7e31d9c37b3d.png)\n\nAfter:\n![After](https://user-images.githubusercontent.com/29541480/179379863-b62475dd-e7bf-41f2-b437-08dfe55951af.png)\n\nI tried to implement stuff like `Const<{NUM1 + 3 + NUM2}>` by using already existing constant evaluation mechanism for ordinary constants, but turned out to be harder than I thought, maybe because I've never ever tinkered with compilers before", "tree": {"sha": "3882c7c81b4e14639cbdc31b486ac7d918bf27f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3882c7c81b4e14639cbdc31b486ac7d918bf27f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db6a85d3583e472645b03be93bb5763431035008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db6a85d3583e472645b03be93bb5763431035008", "html_url": "https://github.com/rust-lang/rust/commit/db6a85d3583e472645b03be93bb5763431035008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db6a85d3583e472645b03be93bb5763431035008/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667fd2516470e7d997181fcd77b8f88a881267ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/667fd2516470e7d997181fcd77b8f88a881267ac", "html_url": "https://github.com/rust-lang/rust/commit/667fd2516470e7d997181fcd77b8f88a881267ac"}, {"sha": "83177a7cfea9a99b36733397661b5f79caef42cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/83177a7cfea9a99b36733397661b5f79caef42cc", "html_url": "https://github.com/rust-lang/rust/commit/83177a7cfea9a99b36733397661b5f79caef42cc"}], "stats": {"total": 302, "additions": 217, "deletions": 85}, "files": [{"sha": "33851d90a2fb9804d922a85dc744d3a92ae5f767", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -24,7 +24,7 @@ use syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use crate::{\n     attr::{Attrs, RawAttrs},\n     db::DefDatabase,\n-    expr::{Expr, ExprId, Label, LabelId, Pat, PatId},\n+    expr::{dummy_expr_id, Expr, ExprId, Label, LabelId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n     macro_id_to_def_id,\n     nameres::DefMap,\n@@ -389,6 +389,21 @@ impl Body {\n     }\n }\n \n+impl Default for Body {\n+    fn default() -> Self {\n+        Self {\n+            body_expr: dummy_expr_id(),\n+            exprs: Default::default(),\n+            pats: Default::default(),\n+            or_pats: Default::default(),\n+            labels: Default::default(),\n+            params: Default::default(),\n+            block_scopes: Default::default(),\n+            _c: Default::default(),\n+        }\n+    }\n+}\n+\n impl Index<ExprId> for Body {\n     type Output = Expr;\n "}, {"sha": "a991365d6bf4906fd532b2154710094669835d9e", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -26,8 +26,10 @@ use crate::{\n pub use syntax::ast::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp};\n \n pub type ExprId = Idx<Expr>;\n+\n+/// FIXME: this is a hacky function which should be removed\n pub(crate) fn dummy_expr_id() -> ExprId {\n-    ExprId::from_raw(RawIdx::from(!0))\n+    ExprId::from_raw(RawIdx::from(u32::MAX))\n }\n \n pub type PatId = Idx<Pat>;"}, {"sha": "867d82f45a74a975160ba04eabe483272ea7b4c8", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 61, "deletions": 29, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -1,14 +1,21 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n+use std::fmt::Write;\n+\n use hir_expand::{\n     name::{AsName, Name},\n     AstId, InFile,\n };\n-use std::{convert::TryInto, fmt::Write};\n use syntax::ast::{self, HasName};\n \n-use crate::{body::LowerCtx, intern::Interned, path::Path};\n+use crate::{\n+    body::LowerCtx,\n+    builtin_type::{BuiltinInt, BuiltinType, BuiltinUint},\n+    expr::Literal,\n+    intern::Interned,\n+    path::Path,\n+};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Mutability {\n@@ -178,7 +185,6 @@ impl TypeRef {\n                 // `hir_ty` level, which would allow knowing the type of:\n                 // let v: [u8; 2 + 2] = [0u8; 4];\n                 let len = ConstScalarOrPath::from_expr_opt(inner.expr());\n-\n                 TypeRef::Array(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())), len)\n             }\n             ast::Type::SliceType(inner) => {\n@@ -403,22 +409,31 @@ impl ConstScalarOrPath {\n                     None => Self::Scalar(ConstScalar::Unknown),\n                 }\n             }\n-            ast::Expr::Literal(lit) => {\n-                let lkind = lit.kind();\n-                match lkind {\n-                    ast::LiteralKind::IntNumber(num)\n-                        if num.suffix() == None || num.suffix() == Some(\"usize\") =>\n-                    {\n-                        Self::Scalar(\n-                            num.value()\n-                                .and_then(|v| v.try_into().ok())\n-                                .map(ConstScalar::Usize)\n-                                .unwrap_or(ConstScalar::Unknown),\n-                        )\n+            ast::Expr::PrefixExpr(prefix_expr) => match prefix_expr.op_kind() {\n+                Some(ast::UnaryOp::Neg) => {\n+                    let unsigned = prefix_expr\n+                        .expr()\n+                        .map_or(Self::Scalar(ConstScalar::Unknown), Self::from_expr);\n+                    // Add sign\n+                    match unsigned {\n+                        Self::Scalar(ConstScalar::UInt(num)) => {\n+                            Self::Scalar(ConstScalar::Int(-(num as i128)))\n+                        }\n+                        other => other,\n                     }\n-                    _ => Self::Scalar(ConstScalar::Unknown),\n                 }\n-            }\n+                _ => prefix_expr.expr().map_or(Self::Scalar(ConstScalar::Unknown), Self::from_expr),\n+            },\n+            ast::Expr::Literal(literal) => Self::Scalar(match literal.kind() {\n+                ast::LiteralKind::IntNumber(num) => {\n+                    num.value().map(ConstScalar::UInt).unwrap_or(ConstScalar::Unknown)\n+                }\n+                ast::LiteralKind::Char(c) => {\n+                    c.value().map(ConstScalar::Char).unwrap_or(ConstScalar::Unknown)\n+                }\n+                ast::LiteralKind::Bool(f) => ConstScalar::Bool(f),\n+                _ => ConstScalar::Unknown,\n+            }),\n             _ => Self::Scalar(ConstScalar::Unknown),\n         }\n     }\n@@ -427,9 +442,10 @@ impl ConstScalarOrPath {\n /// A concrete constant value\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ConstScalar {\n-    // for now, we only support the trivial case of constant evaluating the length of an array\n-    // Note that this is u64 because the target usize may be bigger than our usize\n-    Usize(u64),\n+    Int(i128),\n+    UInt(u128),\n+    Bool(bool),\n+    Char(char),\n \n     /// Case of an unknown value that rustc might know but we don't\n     // FIXME: this is a hack to get around chalk not being able to represent unevaluatable\n@@ -439,21 +455,37 @@ pub enum ConstScalar {\n     Unknown,\n }\n \n-impl std::fmt::Display for ConstScalar {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n+impl ConstScalar {\n+    pub fn builtin_type(&self) -> BuiltinType {\n         match self {\n-            ConstScalar::Usize(us) => us.fmt(f),\n-            ConstScalar::Unknown => f.write_char('_'),\n+            ConstScalar::UInt(_) | ConstScalar::Unknown => BuiltinType::Uint(BuiltinUint::U128),\n+            ConstScalar::Int(_) => BuiltinType::Int(BuiltinInt::I128),\n+            ConstScalar::Char(_) => BuiltinType::Char,\n+            ConstScalar::Bool(_) => BuiltinType::Bool,\n         }\n     }\n }\n \n-impl ConstScalar {\n-    /// Gets a target usize out of the ConstScalar\n-    pub fn as_usize(&self) -> Option<u64> {\n+impl From<Literal> for ConstScalar {\n+    fn from(literal: Literal) -> Self {\n+        match literal {\n+            Literal::Char(c) => Self::Char(c),\n+            Literal::Bool(flag) => Self::Bool(flag),\n+            Literal::Int(num, _) => Self::Int(num),\n+            Literal::Uint(num, _) => Self::UInt(num),\n+            _ => Self::Unknown,\n+        }\n+    }\n+}\n+\n+impl std::fmt::Display for ConstScalar {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n         match self {\n-            &ConstScalar::Usize(us) => Some(us),\n-            _ => None,\n+            ConstScalar::Int(num) => num.fmt(f),\n+            ConstScalar::UInt(num) => num.fmt(f),\n+            ConstScalar::Bool(flag) => flag.fmt(f),\n+            ConstScalar::Char(c) => write!(f, \"'{c}'\"),\n+            ConstScalar::Unknown => f.write_char('_'),\n         }\n     }\n }"}, {"sha": "0495a4e64cacadffb3ade02fa9f044348d945463", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -347,17 +347,6 @@ pub fn eval_const(\n     }\n }\n \n-pub fn eval_usize(expr: Idx<Expr>, mut ctx: ConstEvalCtx<'_>) -> Option<u64> {\n-    if let Ok(ce) = eval_const(expr, &mut ctx) {\n-        match ce {\n-            ComputedExpr::Literal(Literal::Int(x, _)) => return x.try_into().ok(),\n-            ComputedExpr::Literal(Literal::Uint(x, _)) => return x.try_into().ok(),\n-            _ => {}\n-        }\n-    }\n-    None\n-}\n-\n pub(crate) fn path_to_const(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n@@ -406,17 +395,14 @@ pub fn unknown_const_as_generic(ty: Ty) -> GenericArg {\n }\n \n /// Interns a constant scalar with the given type\n-pub fn intern_scalar_const(value: ConstScalar, ty: Ty) -> Const {\n+pub fn intern_const_scalar(value: ConstScalar, ty: Ty) -> Const {\n     ConstData { ty, value: ConstValue::Concrete(chalk_ir::ConcreteConst { interned: value }) }\n         .intern(Interner)\n }\n \n /// Interns a possibly-unknown target usize\n-pub fn usize_const(value: Option<u64>) -> Const {\n-    intern_scalar_const(\n-        value.map(ConstScalar::Usize).unwrap_or(ConstScalar::Unknown),\n-        TyBuilder::usize(),\n-    )\n+pub fn usize_const(value: Option<u128>) -> Const {\n+    intern_const_scalar(value.map_or(ConstScalar::Unknown, ConstScalar::UInt), TyBuilder::usize())\n }\n \n pub(crate) fn const_eval_recover(\n@@ -463,15 +449,20 @@ pub(crate) fn eval_to_const<'a>(\n         }\n     }\n     let body = ctx.body.clone();\n-    let ctx = ConstEvalCtx {\n+    let mut ctx = ConstEvalCtx {\n         db: ctx.db,\n         owner: ctx.owner,\n         exprs: &body.exprs,\n         pats: &body.pats,\n         local_data: HashMap::default(),\n         infer: &ctx.result,\n     };\n-    usize_const(eval_usize(expr, ctx))\n+    let computed_expr = eval_const(expr, &mut ctx);\n+    let const_scalar = match computed_expr {\n+        Ok(ComputedExpr::Literal(literal)) => literal.into(),\n+        _ => ConstScalar::Unknown,\n+    };\n+    intern_const_scalar(const_scalar, TyBuilder::usize())\n }\n \n #[cfg(test)]"}, {"sha": "c7c8deaaeed3b6e70b78a654b7a73ff72d009463", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -605,10 +605,10 @@ impl<'a> InferenceContext<'a> {\n         let data = c.data(Interner);\n         match data.value {\n             ConstValue::Concrete(cc) => match cc.interned {\n-                hir_def::type_ref::ConstScalar::Usize(_) => c,\n                 hir_def::type_ref::ConstScalar::Unknown => {\n                     self.table.new_const_var(data.ty.clone())\n                 }\n+                _ => c,\n             },\n             _ => c,\n         }"}, {"sha": "2f3346707209527bc535f097d3501523508e6ef2", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -729,7 +729,7 @@ impl<'a> InferenceContext<'a> {\n                             let cur_elem_ty = self.infer_expr_inner(expr, &expected);\n                             coerce.coerce(self, Some(expr), &cur_elem_ty);\n                         }\n-                        consteval::usize_const(Some(items.len() as u64))\n+                        consteval::usize_const(Some(items.len() as u128))\n                     }\n                     &Array::Repeat { initializer, repeat } => {\n                         self.infer_expr_coerce(initializer, &Expectation::has_type(elem_ty));\n@@ -766,7 +766,7 @@ impl<'a> InferenceContext<'a> {\n                 Literal::ByteString(bs) => {\n                     let byte_type = TyKind::Scalar(Scalar::Uint(UintTy::U8)).intern(Interner);\n \n-                    let len = consteval::usize_const(Some(bs.len() as u64));\n+                    let len = consteval::usize_const(Some(bs.len() as u128));\n \n                     let array_type = TyKind::Array(byte_type, len).intern(Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(Interner)"}, {"sha": "5e7320a5dd305117da6814fbc3ca2e1c09af4d48", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -11,6 +11,7 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n+    consteval::intern_const_scalar,\n     infer::{BindingMode, Expectation, InferenceContext, TypeMismatch},\n     lower::lower_to_chalk_mutability,\n     static_lifetime, ConcreteConst, ConstValue, Interner, Substitution, Ty, TyBuilder, TyExt,\n@@ -262,13 +263,19 @@ impl<'a> InferenceContext<'a> {\n                 if let &Some(slice_pat_id) = slice {\n                     let rest_pat_ty = match expected.kind(Interner) {\n                         TyKind::Array(_, length) => {\n-                            let length = match length.data(Interner).value {\n+                            let len = match length.data(Interner).value {\n                                 ConstValue::Concrete(ConcreteConst {\n-                                    interned: ConstScalar::Usize(length),\n-                                }) => length.checked_sub((prefix.len() + suffix.len()) as u64),\n+                                    interned: ConstScalar::UInt(len),\n+                                }) => len.checked_sub((prefix.len() + suffix.len()) as u128),\n                                 _ => None,\n                             };\n-                            TyKind::Array(elem_ty.clone(), crate::consteval::usize_const(length))\n+                            TyKind::Array(\n+                                elem_ty.clone(),\n+                                intern_const_scalar(\n+                                    len.map_or(ConstScalar::Unknown, |len| ConstScalar::UInt(len)),\n+                                    TyBuilder::usize(),\n+                                ),\n+                            )\n                         }\n                         _ => TyKind::Slice(elem_ty.clone()),\n                     }"}, {"sha": "c34c4b8a7c13e4bf95c85fa1717ddde30e9e997e", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -257,12 +257,7 @@ impl chalk_ir::interner::Interner for Interner {\n         c1: &Self::InternedConcreteConst,\n         c2: &Self::InternedConcreteConst,\n     ) -> bool {\n-        match (c1, c2) {\n-            (&ConstScalar::Usize(a), &ConstScalar::Usize(b)) => a == b,\n-            // we were previously assuming this to be true, I'm not whether true or false on\n-            // unknown values is safer.\n-            (_, _) => true,\n-        }\n+        (c1 == &ConstScalar::Unknown) || (c2 == &ConstScalar::Unknown) || (c1 == c2)\n     }\n \n     fn intern_generic_arg("}, {"sha": "1605c932d63e08cb17f6e99802b48ca2d3d9db37", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -44,7 +44,7 @@ use syntax::{ast, SmolStr};\n \n use crate::{\n     all_super_traits,\n-    consteval::{intern_scalar_const, path_to_const, unknown_const, unknown_const_as_generic},\n+    consteval::{intern_const_scalar, path_to_const, unknown_const, unknown_const_as_generic},\n     db::HirDatabase,\n     make_binders,\n     mapping::ToChalk,\n@@ -1743,7 +1743,7 @@ pub(crate) fn const_or_path_to_chalk(\n     debruijn: DebruijnIndex,\n ) -> Const {\n     match value {\n-        ConstScalarOrPath::Scalar(s) => intern_scalar_const(s.clone(), expected_ty),\n+        ConstScalarOrPath::Scalar(s) => intern_const_scalar(s.clone(), expected_ty),\n         ConstScalarOrPath::Path(n) => {\n             let path = ModPath::from_segments(PathKind::Plain, Some(n.clone()));\n             path_to_const(db, resolver, &path, mode, args, debruijn)"}, {"sha": "592fff322e53100d107f685fe9f72487f4f2b651", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -173,27 +173,17 @@ pub(crate) fn hover_for_definition(\n         Definition::BuiltinType(_) => Some(FamousDefs(sema, sema.scope(node)?.krate())),\n         _ => None,\n     };\n-    if let Some(markup) = render::definition(sema.db, definition, famous_defs.as_ref(), config) {\n-        let mut res = HoverResult::default();\n-        res.markup = render::process_markup(sema.db, definition, &markup, config);\n-        if let Some(action) = show_implementations_action(sema.db, definition) {\n-            res.actions.push(action);\n+    render::definition(sema.db, definition, famous_defs.as_ref(), config).map(|markup| {\n+        HoverResult {\n+            markup: render::process_markup(sema.db, definition, &markup, config),\n+            actions: show_implementations_action(sema.db, definition)\n+                .into_iter()\n+                .chain(show_fn_references_action(sema.db, definition))\n+                .chain(runnable_action(sema, definition, file_id))\n+                .chain(goto_type_action_for_def(sema.db, definition))\n+                .collect(),\n         }\n-\n-        if let Some(action) = show_fn_references_action(sema.db, definition) {\n-            res.actions.push(action);\n-        }\n-\n-        if let Some(action) = runnable_action(sema, definition, file_id) {\n-            res.actions.push(action);\n-        }\n-\n-        if let Some(action) = goto_type_action_for_def(sema.db, definition) {\n-            res.actions.push(action);\n-        }\n-        return Some(res);\n-    }\n-    None\n+    })\n }\n \n fn hover_ranged("}, {"sha": "867d1f54d4feb99257042408277287163ff093cd", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/db6a85d3583e472645b03be93bb5763431035008/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6a85d3583e472645b03be93bb5763431035008/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=db6a85d3583e472645b03be93bb5763431035008", "patch": "@@ -2958,6 +2958,106 @@ struct S$0T<const C: usize = 1, T = Foo>(T);\n     );\n }\n \n+#[test]\n+fn const_generic_positive_i8_literal() {\n+    check(\n+        r#\"\n+struct Const<const N: i8>;\n+\n+fn main() {\n+    let v$0alue = Const::<1>;\n+}\n+\"#,\n+        expect![[r#\"\n+            *value*\n+\n+            ```rust\n+            let value: Const<1>\n+            ```\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn const_generic_zero_i8_literal() {\n+    check(\n+        r#\"\n+struct Const<const N: i8>;\n+\n+fn main() {\n+    let v$0alue = Const::<0>;\n+}\n+\"#,\n+        expect![[r#\"\n+            *value*\n+\n+            ```rust\n+            let value: Const<0>\n+            ```\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn const_generic_negative_i8_literal() {\n+    check(\n+        r#\"\n+struct Const<const N: i8>;\n+\n+fn main() {\n+    let v$0alue = Const::<-1>;\n+}\n+\"#,\n+        expect![[r#\"\n+            *value*\n+\n+            ```rust\n+            let value: Const<-1>\n+            ```\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn const_generic_bool_literal() {\n+    check(\n+        r#\"\n+struct Const<const F: bool>;\n+\n+fn main() {\n+    let v$0alue = Const::<true>;\n+}\n+\"#,\n+        expect![[r#\"\n+            *value*\n+\n+            ```rust\n+            let value: Const<true>\n+            ```\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn const_generic_char_literal() {\n+    check(\n+        r#\"\n+struct Const<const C: char>;\n+\n+fn main() {\n+    let v$0alue = Const::<'\ud83e\udd80'>;\n+}\n+\"#,\n+        expect![[r#\"\n+            *value*\n+\n+            ```rust\n+            let value: Const<'\ud83e\udd80'>\n+            ```\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_self_param_shows_type() {\n     check("}]}