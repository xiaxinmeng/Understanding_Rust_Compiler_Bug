{"sha": "44f41063dd241320cbe19b078862fc29eb66c097", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjQxMDYzZGQyNDEzMjBjYmUxOWIwNzg4NjJmYzI5ZWI2NmMwOTc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-15T22:20:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-08-17T15:22:00Z"}, "message": "use the correct substs when checking struct patterns\n\nalso, make sure this is tested.", "tree": {"sha": "ac8569bfd9090df4352dd71ca3b38777eda11dbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac8569bfd9090df4352dd71ca3b38777eda11dbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f41063dd241320cbe19b078862fc29eb66c097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f41063dd241320cbe19b078862fc29eb66c097", "html_url": "https://github.com/rust-lang/rust/commit/44f41063dd241320cbe19b078862fc29eb66c097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f41063dd241320cbe19b078862fc29eb66c097/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91be1258993b592531e8e66181f26ad23ab5b2f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/91be1258993b592531e8e66181f26ad23ab5b2f4", "html_url": "https://github.com/rust-lang/rust/commit/91be1258993b592531e8e66181f26ad23ab5b2f4"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "0ac9e0a9c59a0c37d4bad64af3ceedf843af1b53", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44f41063dd241320cbe19b078862fc29eb66c097/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f41063dd241320cbe19b078862fc29eb66c097/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=44f41063dd241320cbe19b078862fc29eb66c097", "patch": "@@ -19,7 +19,6 @@ use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n use check::{check_expr_with_lvalue_pref, LvaluePreference};\n use check::{instantiate_path, resolve_ty_and_def_ufcs, structurally_resolved_type};\n-use TypeAndSubsts;\n use require_same_types;\n use util::nodemap::FnvHashMap;\n \n@@ -544,14 +543,16 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx ast::Pat,\n         }\n     };\n \n-    let TypeAndSubsts {\n-        ty: pat_ty, substs: item_substs\n-    } = pcx.fcx.instantiate_type(def.def_id(), path);\n+    let pat_ty = pcx.fcx.instantiate_type(def.def_id(), path);\n+    let item_substs = match pat_ty.sty {\n+        ty::TyStruct(_, substs) | ty::TyEnum(_, substs) => substs,\n+        _ => tcx.sess.span_bug(pat.span, \"struct variant is not an ADT\")\n+    };\n     demand::eqtype(fcx, pat.span, expected, pat_ty);\n     check_struct_pat_fields(pcx, pat.span, fields, variant, &item_substs, etc);\n \n     fcx.write_ty(pat.id, pat_ty);\n-    fcx.write_substs(pat.id, ty::ItemSubsts { substs: item_substs });\n+    fcx.write_substs(pat.id, ty::ItemSubsts { substs: item_substs.clone() });\n }\n \n pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,"}, {"sha": "7c35aea68503283d9b78ca5a1c55f3a9e98ff7c3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44f41063dd241320cbe19b078862fc29eb66c097/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f41063dd241320cbe19b078862fc29eb66c097/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=44f41063dd241320cbe19b078862fc29eb66c097", "patch": "@@ -1387,7 +1387,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn instantiate_type(&self,\n                             did: ast::DefId,\n                             path: &ast::Path)\n-                            -> TypeAndSubsts<'tcx>\n+                            -> Ty<'tcx>\n     {\n         debug!(\"instantiate_type(did={:?}, path={:?})\", did, path);\n         let type_scheme =\n@@ -1409,10 +1409,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 traits::ItemObligation(did)),\n             &bounds);\n \n-        TypeAndSubsts {\n-            ty: self.instantiate_type_scheme(path.span, &substs, &type_scheme.ty),\n-            substs: substs\n-        }\n+        self.instantiate_type_scheme(path.span, &substs, &type_scheme.ty)\n     }\n \n     /// Return the dict-like variant corresponding to a given `Def`.\n@@ -3128,9 +3125,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n         };\n \n-        let TypeAndSubsts {\n-            ty: expr_ty, ..\n-        } = fcx.instantiate_type(def.def_id(), path);\n+        let expr_ty = fcx.instantiate_type(def.def_id(), path);\n         fcx.write_ty(expr.id, expr_ty);\n \n         check_expr_struct_fields(fcx, expr_ty, expr.span, variant, fields,"}, {"sha": "f1337a5b0797408784c42635cecd67d3ea1ef33d", "filename": "src/test/run-pass/struct-aliases.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/44f41063dd241320cbe19b078862fc29eb66c097/src%2Ftest%2Frun-pass%2Fstruct-aliases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f41063dd241320cbe19b078862fc29eb66c097/src%2Ftest%2Frun-pass%2Fstruct-aliases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-aliases.rs?ref=44f41063dd241320cbe19b078862fc29eb66c097", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::mem;\n \n struct S {\n     x: isize,\n@@ -16,6 +17,13 @@ struct S {\n \n type S2 = S;\n \n+struct S3<U,V> {\n+    x: U,\n+    y: V\n+}\n+\n+type S4<U> = S3<U, char>;\n+\n fn main() {\n     let s = S2 {\n         x: 1,\n@@ -30,4 +38,34 @@ fn main() {\n             assert_eq!(y, 2);\n         }\n     }\n+    // check that generics can be specified from the pattern\n+    let s = S4 {\n+        x: 4,\n+        y: 'a'\n+    };\n+    match s {\n+        S4::<u8> {\n+            x: x,\n+            y: y\n+        } => {\n+            assert_eq!(x, 4);\n+            assert_eq!(y, 'a');\n+            assert_eq!(mem::size_of_val(&x), 1);\n+        }\n+    };\n+    // check that generics can be specified from the constructor\n+    let s = S4::<u16> {\n+        x: 5,\n+        y: 'b'\n+    };\n+    match s {\n+        S4 {\n+            x: x,\n+            y: y\n+        } => {\n+            assert_eq!(x, 5);\n+            assert_eq!(y, 'b');\n+            assert_eq!(mem::size_of_val(&x), 2);\n+        }\n+    };\n }"}]}