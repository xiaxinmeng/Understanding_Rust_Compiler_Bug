{"sha": "42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZTAwMDMyYzZiYTA3ZWFmMmY3ZDU4ODZjNjAxMzNjNjVkODRjZjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-13T17:40:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-13T17:40:45Z"}, "message": "Merge #7220\n\n7220: same level folder rename for will_rename_files r=kjeremy a=ShuiRuTian\n\nuse tricky way to support folder rename.\r\n\r\nAnother step after #7009 and for #4471\n\nCo-authored-by: ShuiRuTian <158983297@qq.com>\nCo-authored-by: Song Gao <158983297@qq.com>", "tree": {"sha": "54fc8c4af8e624cd0ebb6b666511e619fac84d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54fc8c4af8e624cd0ebb6b666511e619fac84d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/zCdCRBK7hj4Ov3rIwAAdHIIAEs71P98gBSNkksU1j9IU4vF\nChG6NSiZ7jZNdaVJ62h4tMvLw72ssNxaWBoAUXSNLZ6p9Ac/AUNnv5lOolIiGUW/\nl+g6fo1oamtSShlL34KXVJUBifRfiqnLwRzs0sK9ObhNrL2UxvkeHVGnSdfC5MeA\nCYbp+VTC/Pu/FXGpMct7kyg7ogEQesDMfG2fnJyqlbFlpGWlhcQzVef0KCkmWJhp\nSGx3iCWwDBE2mezmzRlSQRY5JE+5Xc2tWi0nYNuSy8yK5ta6EHWmSGwSyfFBVYrd\nYqb/EW1VbqE3VT3aLjB5t0LMXzUUwdiM8iqrFSHBejg5/3LUv7lv1Ok7sPQCS8I=\n=M4k7\n-----END PGP SIGNATURE-----\n", "payload": "tree 54fc8c4af8e624cd0ebb6b666511e619fac84d78\nparent f84f5cb0ea3c1b10fbe96038d0201975913425cc\nparent 727a7827fd992e86a4c1fe547f27d2fa299d3099\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610559645 +0000\ncommitter GitHub <noreply@github.com> 1610559645 +0000\n\nMerge #7220\n\n7220: same level folder rename for will_rename_files r=kjeremy a=ShuiRuTian\n\nuse tricky way to support folder rename.\r\n\r\nAnother step after #7009 and for #4471\n\nCo-authored-by: ShuiRuTian <158983297@qq.com>\nCo-authored-by: Song Gao <158983297@qq.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "html_url": "https://github.com/rust-lang/rust/commit/42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84f5cb0ea3c1b10fbe96038d0201975913425cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84f5cb0ea3c1b10fbe96038d0201975913425cc", "html_url": "https://github.com/rust-lang/rust/commit/f84f5cb0ea3c1b10fbe96038d0201975913425cc"}, {"sha": "727a7827fd992e86a4c1fe547f27d2fa299d3099", "url": "https://api.github.com/repos/rust-lang/rust/commits/727a7827fd992e86a4c1fe547f27d2fa299d3099", "html_url": "https://github.com/rust-lang/rust/commit/727a7827fd992e86a4c1fe547f27d2fa299d3099"}], "stats": {"total": 192, "additions": 178, "deletions": 14}, "files": [{"sha": "f148521a2cf887cfc1a130f92dd7bebdfacfb758", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "patch": "@@ -75,14 +75,24 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n                 will_create: None,\n                 did_rename: None,\n                 will_rename: Some(FileOperationRegistrationOptions {\n-                    filters: vec![FileOperationFilter {\n-                        scheme: Some(String::from(\"file\")),\n-                        pattern: FileOperationPattern {\n-                            glob: String::from(\"**/*.rs\"),\n-                            matches: Some(FileOperationPatternKind::File),\n-                            options: None,\n+                    filters: vec![\n+                        FileOperationFilter {\n+                            scheme: Some(String::from(\"file\")),\n+                            pattern: FileOperationPattern {\n+                                glob: String::from(\"**/*.rs\"),\n+                                matches: Some(FileOperationPatternKind::File),\n+                                options: None,\n+                            },\n                         },\n-                    }],\n+                        FileOperationFilter {\n+                            scheme: Some(String::from(\"file\")),\n+                            pattern: FileOperationPattern {\n+                                glob: String::from(\"**\"),\n+                                matches: Some(FileOperationPatternKind::Folder),\n+                                options: None,\n+                            },\n+                        },\n+                    ],\n                 }),\n                 did_delete: None,\n                 will_delete: None,"}, {"sha": "dc81f55d6c421815226ea065fff3496a0aa1b341", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "patch": "@@ -432,9 +432,27 @@ pub(crate) fn handle_will_rename_files(\n             // Limit to single-level moves for now.\n             match (from_path.parent(), to_path.parent()) {\n                 (Some(p1), Some(p2)) if p1 == p2 => {\n-                    let new_name = to_path.file_stem()?;\n-                    let new_name = new_name.to_str()?;\n-                    Some((snap.url_to_file_id(&from).ok()?, new_name.to_string()))\n+                    if from_path.is_dir() {\n+                        // add '/' to end of url -- from `file://path/to/folder` to `file://path/to/folder/`\n+                        let mut old_folder_name = from_path.file_stem()?.to_str()?.to_string();\n+                        old_folder_name.push('/');\n+                        let from_with_trailing_slash = from.join(&old_folder_name).ok()?;\n+\n+                        let imitate_from_url = from_with_trailing_slash.join(\"mod.rs\").ok()?;\n+                        let new_file_name = to_path.file_name()?.to_str()?;\n+                        Some((\n+                            snap.url_to_file_id(&imitate_from_url).ok()?,\n+                            new_file_name.to_string(),\n+                        ))\n+                    } else {\n+                        let old_name = from_path.file_stem()?.to_str()?;\n+                        let new_name = to_path.file_stem()?.to_str()?;\n+                        match (old_name, new_name) {\n+                            (\"mod\", _) => None,\n+                            (_, \"mod\") => None,\n+                            _ => Some((snap.url_to_file_id(&from).ok()?, new_name.to_string())),\n+                        }\n+                    }\n                 }\n                 _ => None,\n             }"}, {"sha": "80bde29b9e68a5a9f558f55cd9540ee84142bd2e", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 140, "deletions": 4, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e00032c6ba07eaf2f7d5886c60133c65d84cf5/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=42e00032c6ba07eaf2f7d5886c60133c65d84cf5", "patch": "@@ -16,11 +16,14 @@ use std::{collections::HashMap, path::PathBuf, time::Instant};\n use expect_test::expect;\n use lsp_types::{\n     notification::DidOpenTextDocument,\n-    request::{CodeActionRequest, Completion, Formatting, GotoTypeDefinition, HoverRequest},\n+    request::{\n+        CodeActionRequest, Completion, Formatting, GotoTypeDefinition, HoverRequest,\n+        WillRenameFiles,\n+    },\n     CodeActionContext, CodeActionParams, CompletionParams, DidOpenTextDocumentParams,\n-    DocumentFormattingParams, FormattingOptions, GotoDefinitionParams, HoverParams,\n-    PartialResultParams, Position, Range, TextDocumentItem, TextDocumentPositionParams,\n-    WorkDoneProgressParams,\n+    DocumentFormattingParams, FileRename, FormattingOptions, GotoDefinitionParams, HoverParams,\n+    PartialResultParams, Position, Range, RenameFilesParams, TextDocumentItem,\n+    TextDocumentPositionParams, WorkDoneProgressParams,\n };\n use rust_analyzer::lsp_ext::{OnEnter, Runnables, RunnablesParams};\n use serde_json::json;\n@@ -745,3 +748,136 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n         ```\"#]]\n     .assert_eq(&value);\n }\n+\n+#[test]\n+fn test_will_rename_files_same_level() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let tmp_dir = TestDir::new();\n+    let tmp_dir_path = tmp_dir.path().to_owned();\n+    let tmp_dir_str = tmp_dir_path.to_str().unwrap();\n+    let base_path = PathBuf::from(format!(\"file://{}\", tmp_dir_str));\n+\n+    let code = r#\"\n+//- /Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- /src/lib.rs\n+mod old_file;\n+mod from_mod;\n+mod to_mod;\n+mod old_folder;\n+fn main() {}\n+\n+//- /src/old_file.rs\n+\n+//- /src/old_folder/mod.rs\n+\n+//- /src/from_mod/mod.rs\n+\n+//- /src/to_mod/foo.rs\n+\n+\"#;\n+    let server =\n+        Project::with_fixture(&code).tmp_dir(tmp_dir).server().wait_until_workspace_is_loaded();\n+\n+    //rename same level file\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/old_file.rs\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/new_file.rs\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": [\n+            {\n+              \"textDocument\": {\n+                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace(\"\\\\\", \"/\")),\n+                \"version\": null\n+              },\n+              \"edits\": [\n+                {\n+                  \"range\": {\n+                    \"start\": {\n+                      \"line\": 0,\n+                      \"character\": 4\n+                    },\n+                    \"end\": {\n+                      \"line\": 0,\n+                      \"character\": 12\n+                    }\n+                  },\n+                  \"newText\": \"new_file\"\n+                }\n+              ]\n+            }\n+          ]\n+        }),\n+    );\n+\n+    //rename file from mod.rs to foo.rs\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/from_mod/mod.rs\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/from_mod/foo.rs\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": []\n+        }),\n+    );\n+\n+    //rename file from foo.rs to mod.rs\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/to_mod/foo.rs\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/to_mod/mod.rs\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": []\n+        }),\n+    );\n+\n+    //rename same level file\n+    server.request::<WillRenameFiles>(\n+        RenameFilesParams {\n+            files: vec![FileRename {\n+                old_uri: base_path.join(\"src/old_folder\").to_str().unwrap().to_string(),\n+                new_uri: base_path.join(\"src/new_folder\").to_str().unwrap().to_string(),\n+            }],\n+        },\n+        json!({\n+          \"documentChanges\": [\n+            {\n+              \"textDocument\": {\n+                \"uri\": format!(\"file://{}\", tmp_dir_path.join(\"src\").join(\"lib.rs\").to_str().unwrap().to_string().replace(\"C:\\\\\", \"/c:/\").replace(\"\\\\\", \"/\")),\n+                \"version\": null\n+              },\n+              \"edits\": [\n+                {\n+                  \"range\": {\n+                    \"start\": {\n+                      \"line\": 3,\n+                      \"character\": 4\n+                    },\n+                    \"end\": {\n+                      \"line\": 3,\n+                      \"character\": 14\n+                    }\n+                  },\n+                  \"newText\": \"new_folder\"\n+                }\n+              ]\n+            }\n+          ]\n+        }),\n+    );\n+}"}]}