{"sha": "c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "node_id": "C_kwDOAAsO6NoAKGMyMWI4ZTEyYTRmMWJmODg0YTg3YTZmYjk0NWQ3YzRkMzM4NzM3Y2M", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-02-03T10:47:41Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-02-03T10:47:41Z"}, "message": "Fix `isize` optimization in `StableHasher` for big-endian architectures", "tree": {"sha": "f4f3f7c62202c70903cbaa8db9fbb0a462a60671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f3f7c62202c70903cbaa8db9fbb0a462a60671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmH7ss0ACgkQ28VT5UDC\n9hlQhwwArnLBFsk8psSEvKC/Y73Rdx0sYcDtjQETHZFIx74ICuEVm/YxSaf6/ddg\nlmdLNhLndvAba7l9Z88Eh4GoWr+ZVdzzWspNN+at9+bG1RheIVqPbUPIk8x4g5k/\nVh4UPpblCJR2wvK21cd05sngeL8kTplYJZ4vKfFkbAwjTxobbQ/SEq6jAgYfXPAT\neSEFkQp/kNUi9JU1OUbmZi6CuJBgzMEFuL/9ggoZqVzHdYca5w18n7FdK2agKwZ1\ntX5xiL5rJJ+zAWAnh5L0wscqPZ1qfe5vWtjrbAjgXNQ/ch4OEGegb0LE4IDRqSfl\nSAWN3bPIlQlxgpJYPwISjtKCszc/i+6ufi6sF5U7aslbVRYCxKu+mYcUaTD43A8q\nmGTQ9zQ8vNJkGIAGIUH5QK2EjtP61/F/F1n/QOBzlcebyTA5xUlVTIMMQ23l20sV\nBcUoSAWJM+VNqS90iN1k3iTth+nIt2gWTnNCzQBFsSquFHIdEgwjeCt3+dsVZ+m5\nfI21NTsp\n=eaNE\n-----END PGP SIGNATURE-----", "payload": "tree f4f3f7c62202c70903cbaa8db9fbb0a462a60671\nparent 1be5c8f90912c446ecbdc405cbc4a89f9acd20fd\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1643885261 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1643885261 +0100\n\nFix `isize` optimization in `StableHasher` for big-endian architectures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "html_url": "https://github.com/rust-lang/rust/commit/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be5c8f90912c446ecbdc405cbc4a89f9acd20fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be5c8f90912c446ecbdc405cbc4a89f9acd20fd", "html_url": "https://github.com/rust-lang/rust/commit/1be5c8f90912c446ecbdc405cbc4a89f9acd20fd"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "a121bbcedc8f70080eb633d78d7eb7d2f8f74070", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "patch": "@@ -133,18 +133,18 @@ impl Hasher for StableHasher {\n \n     #[inline]\n     fn write_isize(&mut self, i: isize) {\n-        // Always treat isize as i64 so we get the same results on 32 and 64 bit\n+        // Always treat isize as a 64-bit number so we get the same results on 32 and 64 bit\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example. Sign extending here is preferable as it means that the\n         // same negative number hashes the same on both 32 and 64 bit platforms.\n-        let value = (i as i64).to_le() as u64;\n+        let value = i as u64;\n \n         // Cold path\n         #[cold]\n         #[inline(never)]\n         fn hash_value(state: &mut SipHasher128, value: u64) {\n             state.write_u8(0xFF);\n-            state.write_u64(value);\n+            state.write_u64(value.to_le());\n         }\n \n         // `isize` values often seem to have a small (positive) numeric value in practice.\n@@ -161,6 +161,10 @@ impl Hasher for StableHasher {\n         // 8 bytes. Since this prefix cannot occur when we hash a single byte, when we hash two\n         // `isize`s that fit within a different amount of bytes, they should always produce a different\n         // byte stream for the hasher.\n+        //\n+        // To ensure that this optimization hashes the exact same bytes on both little-endian and\n+        // big-endian architectures, we compare the value with 0xFF before we convert the number\n+        // into a unified representation (little-endian).\n         if value < 0xFF {\n             self.state.write_u8(value as u8);\n         } else {"}, {"sha": "b0d66c32a07adc3f737623ebcb4f78b9aed5e567", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21b8e12a4f1bf884a87a6fb945d7c4d338737cc/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=c21b8e12a4f1bf884a87a6fb945d7c4d338737cc", "patch": "@@ -159,4 +159,5 @@ fn test_isize_compression() {\n     check_hash(0xAAAA, 0xAAAAAA);\n     check_hash(0xAAAAAA, 0xAAAAAAAA);\n     check_hash(0xFF, 0xFFFFFFFFFFFFFFFF);\n+    check_hash(u64::MAX /* -1 */, 1);\n }"}]}