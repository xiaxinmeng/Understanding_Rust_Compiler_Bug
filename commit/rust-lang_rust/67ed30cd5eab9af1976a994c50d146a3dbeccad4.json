{"sha": "67ed30cd5eab9af1976a994c50d146a3dbeccad4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZWQzMGNkNWVhYjlhZjE5NzZhOTk0YzUwZDE0NmEzZGJlY2NhZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T13:26:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T13:26:05Z"}, "message": "auto merge of #9097 : michaelwoerister/rust/namespaces, r=jdm\n\nWho would have thought that namespaces are such a can of worms `:P` This is mostly because of some GDB idiosyncrasies (does not use namespace information but linkage-name attributes for displaying items contained in namespaces, also cannot handle functions lexically nested within functions), monomorphization, and information about external items only available from metadata.\r\n\r\nThis pull request tries to tackle the problem anyway:\r\n* The `DW_AT_linkage_name` for functions is generated just to make GDB display a proper namespace-enabled function name. To this end, a pseudo-mangled name is generated, not corresponding to the real linkage name. This approach shows some success and could be extended to make GDB also show proper parameter types.\r\n* As GDB won't accept subprogram DIEs nested within other subprogram DIEs, the `debuginfo` module now generates a *companion namespace* for each functions (iff needed). A function `fn abc()` will get a companion namespace with name `abc()`, which contains all items (modules, types, functions) declared within the functions scope. The real, proper solution, in my opinion, would be to faithfully reflect the program's lexical structure within DWARF (which allows arbitrary nesting of DIEs, afaik), but I am not sure LLVM's source level debugging implementation would like that and I am pretty sure GDB won't support this in the foreseeable future.\r\n* Monomorphization leads to functions and companion namespaces like `somelib::some_func<int, float>()::some_other_function<bool, bool, bool>()`, which I think is the desired behaviour. There is some design space here, however. Maybe you people prefer `somelib::some_func()::some_other_function<bool, bool, bool>()` or `somelib::some_func()::some_other_function::<int, float, bool, bool, bool>()`.\r\n\r\nThe solution will work for now but there are a few things on my 'far future wish list':\r\n* A real specification somewhere, what language constructs are mapped to what DWARF structures.\r\n* Proper tests that directly compare the generated DWARF information to the expected results (possibly using something like [pyelftools](https://github.com/eliben/pyelftools) or llvm-dwarfdump)\r\n* A unified implementation for crate-local and crate-external items (which would possibly involve beefing up `ast_map::path` and metadata a bit)\r\n\r\nAny comments are welcome!\r\n\r\nCloses #1541\r\nCloses #1542 (there might be other issues with function name prettiness, but this specific issue should be fixed)\r\nCloses #7715 (source locations for structs and enums are now read correctly from the AST)", "tree": {"sha": "e626482c9b04d7ed291a4f52e82fcfa87adaad6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e626482c9b04d7ed291a4f52e82fcfa87adaad6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ed30cd5eab9af1976a994c50d146a3dbeccad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ed30cd5eab9af1976a994c50d146a3dbeccad4", "html_url": "https://github.com/rust-lang/rust/commit/67ed30cd5eab9af1976a994c50d146a3dbeccad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ed30cd5eab9af1976a994c50d146a3dbeccad4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14bd0879d7357598f4f7f49dae6661559e10745", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14bd0879d7357598f4f7f49dae6661559e10745", "html_url": "https://github.com/rust-lang/rust/commit/d14bd0879d7357598f4f7f49dae6661559e10745"}, {"sha": "eb32ec13f1d870e5b85b03b353b659b59a7481bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb32ec13f1d870e5b85b03b353b659b59a7481bb", "html_url": "https://github.com/rust-lang/rust/commit/eb32ec13f1d870e5b85b03b353b659b59a7481bb"}], "stats": {"total": 898, "additions": 670, "deletions": 228}, "files": [{"sha": "75dabc8478f04ccf9ce5d38f634a6a7c25bd000a", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -2109,6 +2109,14 @@ pub mod llvm {\n             ArgNo: c_uint)\n             -> ValueRef;\n \n+        #[fast_ffi]\n+        pub fn LLVMDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n+                                            Scope: ValueRef,\n+                                            Name: *c_char,\n+                                            File: ValueRef,\n+                                            LineNo: c_uint)\n+                                            -> ValueRef;\n+\n         #[fast_ffi]\n         pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;\n "}, {"sha": "94771d6f5199274e886e209f6f11f37678b9cab5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -3021,6 +3021,10 @@ pub fn trans_crate(sess: session::Session,\n                                      link_meta,\n                                      analysis.reachable);\n \n+    if ccx.sess.opts.debuginfo {\n+        debuginfo::initialize(ccx, crate);\n+    }\n+\n     {\n         let _icx = push_ctxt(\"text\");\n         trans_mod(ccx, &crate.module);"}, {"sha": "9164ee4943b33251943e35dbd72b6d53d8dc8219", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 562, "deletions": 147, "changes": 709, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -68,7 +68,7 @@ use std::libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::vec;\n use syntax::codemap::Span;\n-use syntax::{ast, codemap, ast_util, ast_map, opt_vec};\n+use syntax::{ast, codemap, ast_util, ast_map, opt_vec, visit};\n use syntax::parse::token;\n use syntax::parse::token::special_idents;\n \n@@ -96,9 +96,11 @@ pub struct CrateDebugContext {\n     priv crate_file: ~str,\n     priv llcontext: ContextRef,\n     priv builder: DIBuilderRef,\n-    priv curr_loc: DebugLocation,\n+    priv current_debug_location: DebugLocation,\n     priv created_files: HashMap<~str, DIFile>,\n     priv created_types: HashMap<uint, DIType>,\n+    priv local_namespace_map: HashMap<ast::NodeId, @NamespaceTreeNode>,\n+    priv extern_namespaces: HashMap<~[ast::Ident], @NamespaceTreeNode>,\n }\n \n impl CrateDebugContext {\n@@ -111,9 +113,11 @@ impl CrateDebugContext {\n             crate_file: crate,\n             llcontext: llcontext,\n             builder: builder,\n-            curr_loc: UnknownLocation,\n+            current_debug_location: UnknownLocation,\n             created_files: HashMap::new(),\n             created_types: HashMap::new(),\n+            local_namespace_map: HashMap::new(),\n+            extern_namespaces: HashMap::new(),\n         };\n     }\n }\n@@ -129,12 +133,10 @@ impl FunctionDebugContext {\n         match *self {\n             FunctionDebugContext(~ref data) => data,\n             DebugInfoDisabled => {\n-                cx.sess.span_bug(span, \"debuginfo: Error trying to access FunctionDebugContext \\\n-                                        although debug info is disabled!\");\n+                cx.sess.span_bug(span, FunctionDebugContext::debuginfo_disabled_message());\n             }\n             FunctionWithoutDebugInfo => {\n-                cx.sess.span_bug(span, \"debuginfo: Error trying to access FunctionDebugContext \\\n-                                        for function that should be ignored by debug info!\");\n+                cx.sess.span_bug(span, FunctionDebugContext::should_be_ignored_message());\n             }\n         }\n     }\n@@ -146,15 +148,22 @@ impl FunctionDebugContext {\n         match *self {\n             FunctionDebugContext(~ref mut data) => data,\n             DebugInfoDisabled => {\n-                cx.sess.span_bug(span, \"debuginfo: Error trying to access FunctionDebugContext \\\n-                                        although debug info is disabled!\");\n+                cx.sess.span_bug(span, FunctionDebugContext::debuginfo_disabled_message());\n             }\n             FunctionWithoutDebugInfo => {\n-                cx.sess.span_bug(span, \"debuginfo: Error trying to access FunctionDebugContext \\\n-                                        for function that should be ignored by debug info!\");\n+                cx.sess.span_bug(span, FunctionDebugContext::should_be_ignored_message());\n             }\n         }\n     }\n+\n+    fn debuginfo_disabled_message() -> &'static str {\n+        \"debuginfo: Error trying to access FunctionDebugContext although debug info is disabled!\"\n+    }\n+\n+    fn should_be_ignored_message() -> &'static str {\n+        \"debuginfo: Error trying to access FunctionDebugContext for function that should be \\\n+         ignored by debug info!\"\n+    }\n }\n \n struct FunctionDebugContextData {\n@@ -178,8 +187,22 @@ enum VariableKind {\n     CapturedVariable,\n }\n \n+pub fn initialize(cx: &mut CrateContext, crate: &ast::Crate) {\n+    if cx.dbg_cx.is_none() {\n+        return;\n+    }\n+\n+    let crate_namespace_ident = token::str_to_ident(cx.link_meta.name);\n+    let mut visitor = NamespaceVisitor::new_crate_visitor(cx, crate_namespace_ident);\n+    visit::walk_crate(&mut visitor, crate, ());\n+}\n+\n /// Create any deferred debug metadata nodes\n pub fn finalize(cx: @mut CrateContext) {\n+    if cx.dbg_cx.is_none() {\n+        return;\n+    }\n+\n     debug!(\"finalize\");\n     compile_unit_metadata(cx);\n     unsafe {\n@@ -573,22 +596,38 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n     };\n \n     // get_template_parameters() will append a `<...>` clause to the function name if necessary.\n-    let mut function_name = cx.sess.str_of(ident).to_owned();\n+    let mut function_name = token::ident_to_str(&ident).to_owned();\n     let template_parameters = if cx.sess.opts.extra_debuginfo {\n         get_template_parameters(cx, generics, param_substs, file_metadata, &mut function_name)\n     } else {\n         ptr::null()\n     };\n \n+    let namespace_node = debug_context(cx).local_namespace_map.find_copy(&fn_ast_id);\n+    let (linkage_name, containing_scope) = match namespace_node {\n+        Some(namespace_node) => {\n+            (namespace_node.mangled_name_of_contained_item(function_name), namespace_node.scope)\n+        }\n+        None => {\n+            // This branch is only hit when there is a bug in the NamespaceVisitor.\n+            cx.sess.span_warn(span, \"debuginfo: Could not find namespace node for function. \\\n+                                     This is a bug! Try running with RUST_LOG=rustc=1 \\\n+                                     to get further details and report the results \\\n+                                     to github.com/mozilla/rust/issues\");\n+            (function_name.clone(), file_metadata)\n+        }\n+    };\n+\n     let scope_line = get_scope_line(cx, top_level_block, loc.line);\n \n-    let fn_metadata = do function_name.to_c_str().with_ref |function_name| {\n+    let fn_metadata = do function_name.with_c_str |function_name| {\n+                      do linkage_name.with_c_str |linkage_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateFunction(\n                 DIB(cx),\n-                file_metadata,\n-                function_name,\n+                containing_scope,\n                 function_name,\n+                linkage_name,\n                 file_metadata,\n                 loc.line as c_uint,\n                 function_type_metadata,\n@@ -601,9 +640,9 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                 template_parameters,\n                 ptr::null())\n         }\n-    };\n+    }};\n \n-    // Initialize fn debug context (including scope map)\n+    // Initialize fn debug context (including scope map and namespace map)\n     let mut fn_debug_context = ~FunctionDebugContextData {\n         scope_map: HashMap::new(),\n         fn_metadata: fn_metadata,\n@@ -614,6 +653,18 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n     let arg_pats = do fn_decl.inputs.map |arg_ref| { arg_ref.pat };\n     populate_scope_map(cx, arg_pats, top_level_block, fn_metadata, &mut fn_debug_context.scope_map);\n \n+    match top_level_block {\n+        Some(top_level_block) => {\n+            let mut namespace_visitor = NamespaceVisitor::new_function_visitor(cx,\n+                                                                               function_name,\n+                                                                               namespace_node,\n+                                                                               file_metadata,\n+                                                                               span);\n+            visit::walk_block(&mut namespace_visitor, top_level_block, ());\n+        }\n+        _ => { /*nothing to do*/ }\n+    }\n+\n     return FunctionDebugContext(fn_debug_context);\n \n     fn get_function_signature(cx: &mut CrateContext,\n@@ -644,7 +695,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n             }\n         }\n \n-        // arguments types\n+        // Arguments types\n         for arg in fn_decl.inputs.iter() {\n             let arg_type = ty::node_id_to_type(cx.tcx, arg.pat.id);\n             let arg_type = match param_substs {\n@@ -699,7 +750,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n \n             let ident = special_idents::type_self;\n \n-            let param_metadata = do cx.sess.str_of(ident).to_c_str().with_ref |name| {\n+            let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),\n@@ -735,7 +786,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            let param_metadata = do cx.sess.str_of(ident).to_c_str().with_ref |name| {\n+            let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),\n@@ -783,7 +834,7 @@ fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n }\n \n fn compile_unit_metadata(cx: @mut CrateContext) {\n-    let dcx = dbg_cx(cx);\n+    let dcx = debug_context(cx);\n     let crate_name: &str = dcx.crate_file;\n \n     debug!(\"compile_unit_metadata: %?\", crate_name);\n@@ -823,7 +874,7 @@ fn declare_local(bcx: @mut Block,\n     let filename = span_start(cx, span).file.name;\n     let file_metadata = file_metadata(cx, filename);\n \n-    let name: &str = cx.sess.str_of(variable_ident);\n+    let name: &str = token::ident_to_str(&variable_ident);\n     let loc = span_start(cx, span);\n     let type_metadata = type_metadata(cx, variable_type, span);\n \n@@ -886,12 +937,12 @@ fn declare_local(bcx: @mut Block,\n             assert!(!bcx.fcx.debug_context.get_ref(cx, span).source_locations_enabled);\n             set_debug_location(cx, UnknownLocation);\n         }\n-        _ => { /* fallthrough */ }\n+        _ => { /* nothing to do */ }\n     }\n }\n \n fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n-    match dbg_cx(cx).created_files.find_equiv(&full_path) {\n+    match debug_context(cx).created_files.find_equiv(&full_path) {\n         Some(file_metadata) => return *file_metadata,\n         None => ()\n     }\n@@ -914,7 +965,7 @@ fn file_metadata(cx: &mut CrateContext, full_path: &str) -> DIFile {\n             }\n         }};\n \n-    dbg_cx(cx).created_files.insert(full_path.to_owned(), file_metadata);\n+    debug_context(cx).created_files.insert(full_path.to_owned(), file_metadata);\n     return file_metadata;\n }\n \n@@ -1004,58 +1055,70 @@ fn pointer_type_metadata(cx: &mut CrateContext,\n \n fn struct_metadata(cx: &mut CrateContext,\n                    struct_type: ty::t,\n-                   fields: ~[ty::field],\n+                   def_id: ast::DefId,\n+                   substs: &ty::substs,\n                    span: Span)\n                 -> DICompositeType {\n     let struct_name = ty_to_str(cx.tcx, struct_type);\n     debug!(\"struct_metadata: %s\", struct_name);\n \n     let struct_llvm_type = type_of::type_of(cx, struct_type);\n-\n-    let field_llvm_types = do fields.map |field| { type_of::type_of(cx, field.mt.ty) };\n-    let field_names = do fields.map |field| {\n-        if field.ident.name == special_idents::unnamed_field.name {\n-            ~\"\"\n+    let fields = ty::struct_fields(cx.tcx, def_id, substs);\n+    let field_descriptions = do fields.map |field| {\n+        let name = if field.ident.name == special_idents::unnamed_field.name {\n+            @\"\"\n         } else {\n-            cx.sess.str_of(field.ident).to_owned()\n+            token::ident_to_str(&field.ident)\n+        };\n+\n+        MemberDescription {\n+            name: name,\n+            llvm_type: type_of::type_of(cx, field.mt.ty),\n+            type_metadata: type_metadata(cx, field.mt.ty, span),\n         }\n     };\n-    let field_types_metadata = do fields.map |field| {\n-        type_metadata(cx, field.mt.ty, span)\n-    };\n+\n+    let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx, def_id, span);\n+\n+    let file_name = span_start(cx, definition_span).file.name;\n+    let file_metadata = file_metadata(cx, file_name);\n \n     return composite_type_metadata(\n         cx,\n         struct_llvm_type,\n         struct_name,\n-        field_llvm_types,\n-        field_names,\n-        field_types_metadata,\n-        span);\n+        field_descriptions,\n+        containing_scope,\n+        file_metadata,\n+        definition_span);\n }\n \n fn tuple_metadata(cx: &mut CrateContext,\n                   tuple_type: ty::t,\n                   component_types: &[ty::t],\n                   span: Span)\n                -> DICompositeType {\n-\n     let tuple_name = ty_to_str(cx.tcx, tuple_type);\n     let tuple_llvm_type = type_of::type_of(cx, tuple_type);\n \n-    let component_names = do component_types.map |_| { ~\"\" };\n-    let component_llvm_types = do component_types.map |it| { type_of::type_of(cx, *it) };\n-    let component_types_metadata = do component_types.map |it| {\n-        type_metadata(cx, *it, span)\n+    let component_descriptions = do component_types.map |&component_type| {\n+        MemberDescription {\n+            name: @\"\",\n+            llvm_type: type_of::type_of(cx, component_type),\n+            type_metadata: type_metadata(cx, component_type, span),\n+        }\n     };\n \n+    let loc = span_start(cx, span);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n+\n     return composite_type_metadata(\n         cx,\n         tuple_llvm_type,\n         tuple_name,\n-        component_llvm_types,\n-        component_names,\n-        component_types_metadata,\n+        component_descriptions,\n+        file_metadata,\n+        file_metadata,\n         span);\n }\n \n@@ -1064,13 +1127,24 @@ fn enum_metadata(cx: &mut CrateContext,\n                  enum_def_id: ast::DefId,\n                  span: Span)\n               -> DIType {\n-\n     let enum_name = ty_to_str(cx.tcx, enum_type);\n \n+    let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx,\n+                                                                              enum_def_id,\n+                                                                              span);\n+    let loc = span_start(cx, definition_span);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n+\n     // For empty enums there is an early exit. Just describe it as an empty struct with the\n     // appropriate type name\n     if ty::type_is_empty(cx.tcx, enum_type) {\n-        return composite_type_metadata(cx, Type::nil(), enum_name, [], [], [], span);\n+        return composite_type_metadata(cx,\n+                                       Type::nil(),\n+                                       enum_name,\n+                                       [],\n+                                       file_metadata,\n+                                       file_metadata,\n+                                       definition_span);\n     }\n \n     // Prepare some data (llvm type, size, align, ...) about the discriminant. This data will be\n@@ -1079,14 +1153,14 @@ fn enum_metadata(cx: &mut CrateContext,\n     let (discriminant_size, discriminant_align) = size_and_align_of(cx, discriminant_llvm_type);\n \n     assert!(Type::enum_discrim(cx) == cx.int_type);\n-    let discriminant_type_metadata = type_metadata(cx, ty::mk_int(), span);\n+    let discriminant_base_type_metadata = type_metadata(cx, ty::mk_int(), codemap::dummy_sp());\n \n     let variants: &[@ty::VariantInfo] = *ty::enum_variants(cx.tcx, enum_def_id);\n \n     let enumerators_metadata: ~[DIDescriptor] = variants\n         .iter()\n         .map(|v| {\n-            let name: &str = cx.sess.str_of(v.name);\n+            let name: &str = token::ident_to_str(&v.name);\n             let discriminant_value = v.disr_val as c_ulonglong;\n \n             do name.with_c_str |name| {\n@@ -1100,21 +1174,18 @@ fn enum_metadata(cx: &mut CrateContext,\n         })\n         .collect();\n \n-    let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.name);\n-\n     let discriminant_type_metadata = do enum_name.with_c_str |enum_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateEnumerationType(\n                 DIB(cx),\n-                file_metadata,\n+                containing_scope,\n                 enum_name,\n                 file_metadata,\n                 loc.line as c_uint,\n                 bytes_to_bits(discriminant_size),\n                 bytes_to_bits(discriminant_align),\n                 create_DIArray(DIB(cx), enumerators_metadata),\n-                discriminant_type_metadata)\n+                discriminant_base_type_metadata)\n         }\n     };\n \n@@ -1126,7 +1197,13 @@ fn enum_metadata(cx: &mut CrateContext,\n         }\n         adt::Univariant(ref struct_def, _) => {\n             assert!(variants.len() == 1);\n-            return adt_struct_metadata(cx, struct_def, variants[0], None, span);\n+            return adt_struct_metadata(cx,\n+                                       struct_def,\n+                                       variants[0],\n+                                       None,\n+                                       containing_scope,\n+                                       file_metadata,\n+                                       span);\n         }\n         adt::General(ref struct_defs) => {\n             let variants_member_metadata: ~[DIDescriptor] = do struct_defs\n@@ -1138,13 +1215,15 @@ fn enum_metadata(cx: &mut CrateContext,\n                         struct_def,\n                         variants[i],\n                         Some(discriminant_type_metadata),\n+                        containing_scope,\n+                        file_metadata,\n                         span);\n \n                     do \"\".with_c_str |name| {\n                         unsafe {\n                             llvm::LLVMDIBuilderCreateMemberType(\n                                 DIB(cx),\n-                                file_metadata,\n+                                containing_scope,\n                                 name,\n                                 file_metadata,\n                                 loc.line as c_uint,\n@@ -1164,7 +1243,7 @@ fn enum_metadata(cx: &mut CrateContext,\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateUnionType(\n                     DIB(cx),\n-                    file_metadata,\n+                    containing_scope,\n                     enum_name,\n                     file_metadata,\n                     loc.line as c_uint,\n@@ -1176,75 +1255,107 @@ fn enum_metadata(cx: &mut CrateContext,\n             }};\n         }\n         adt::NullablePointer { nonnull: ref struct_def, nndiscr, _ } => {\n-            return adt_struct_metadata(cx, struct_def, variants[nndiscr], None, span);\n+            return adt_struct_metadata(cx,\n+                                       struct_def,\n+                                       variants[nndiscr],\n+                                       None,\n+                                       containing_scope,\n+                                       file_metadata,\n+                                       span);\n         }\n     }\n \n     fn adt_struct_metadata(cx: &mut CrateContext,\n                                   struct_def: &adt::Struct,\n                                   variant_info: &ty::VariantInfo,\n                                   discriminant_type_metadata: Option<DIType>,\n+                                  containing_scope: DIScope,\n+                                  file_metadata: DIFile,\n                                   span: Span)\n-                               -> DICompositeType\n-    {\n-        let arg_llvm_types: ~[Type] = do struct_def.fields.map |&ty| { type_of::type_of(cx, ty) };\n-        let arg_metadata: ~[DIType] = do struct_def.fields.iter().enumerate()\n-            .map |(i, &ty)| {\n-                match discriminant_type_metadata {\n-                    Some(metadata) if i == 0 => metadata,\n-                    _                        => type_metadata(cx, ty, span)\n-                }\n-        }.collect();\n-\n+                               -> DICompositeType {\n+        // Get the argument names from the enum variant info\n         let mut arg_names = match variant_info.arg_names {\n-            Some(ref names) => do names.map |ident| { cx.sess.str_of(*ident).to_owned() },\n-            None => do variant_info.args.map |_| { ~\"\" }\n+            Some(ref names) => do names.map |ident| { token::ident_to_str(ident) },\n+            None => do variant_info.args.map |_| { @\"\" }\n         };\n \n+        // If this is not a univariant enum, there is also the (unnamed) discriminant field\n         if discriminant_type_metadata.is_some() {\n-            arg_names.insert(0, ~\"\");\n+            arg_names.insert(0, @\"\");\n         }\n \n-        let variant_llvm_type = Type::struct_(arg_llvm_types, struct_def.packed);\n-        let variant_name: &str = cx.sess.str_of(variant_info.name);\n+        let arg_descriptions : ~[MemberDescription] =\n+            do struct_def.fields.iter().enumerate().map |(i, &ty)| {\n+                MemberDescription {\n+                    name: arg_names[i].clone(),\n+                    llvm_type: type_of::type_of(cx, ty),\n+                    type_metadata: match discriminant_type_metadata {\n+                        Some(metadata) if i == 0 => metadata,\n+                        _                        => type_metadata(cx, ty, span)\n+                    }\n+                }\n+            }.collect();\n+\n+        let variant_name = token::ident_to_str(&variant_info.name);\n+        let variant_llvm_type = Type::struct_(arg_descriptions.map(|d| d.llvm_type),\n+                                              struct_def.packed);\n+\n+        // Find the source code location of the variant's definition\n+        let variant_definition_span = if variant_info.id.crate == ast::LOCAL_CRATE {\n+            match cx.tcx.items.find(&variant_info.id.node) {\n+                Some(&ast_map::node_variant(ref variant, _, _)) => variant.span,\n+                ref node => {\n+                    cx.sess.span_warn(span,\n+                        fmt!(\"debuginfo::enum_metadata()::adt_struct_metadata() - Unexpected node \\\n+                              type: %?. This is a bug.\", node));\n+                    codemap::dummy_sp()\n+                }\n+            }\n+        } else {\n+            // For definitions from other crates we have no location information available.\n+            codemap::dummy_sp()\n+        };\n \n         return composite_type_metadata(\n             cx,\n             variant_llvm_type,\n             variant_name,\n-            arg_llvm_types,\n-            arg_names,\n-            arg_metadata,\n-            span);\n+            arg_descriptions,\n+            containing_scope,\n+            file_metadata,\n+            variant_definition_span);\n     }\n }\n \n+struct MemberDescription {\n+    name: @str,\n+    llvm_type: Type,\n+    type_metadata: DIType,\n+}\n+\n /// Creates debug information for a composite type, that is, anything that results in a LLVM struct.\n ///\n /// Examples of Rust types to use this are: structs, tuples, boxes, vecs, and enums.\n fn composite_type_metadata(cx: &mut CrateContext,\n                            composite_llvm_type: Type,\n                            composite_type_name: &str,\n-                           member_llvm_types: &[Type],\n-                           member_names: &[~str],\n-                           member_type_metadata: &[DIType],\n-                           span: Span)\n+                           member_descriptions: &[MemberDescription],\n+                           containing_scope: DIScope,\n+                           file_metadata: DIFile,\n+                           definition_span: Span)\n                         -> DICompositeType {\n-\n-    let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.name);\n+    let loc = span_start(cx, definition_span);\n \n     let (composite_size, composite_align) = size_and_align_of(cx, composite_llvm_type);\n \n-    let member_metadata: ~[DIDescriptor] = member_llvm_types\n+    let member_metadata: ~[DIDescriptor] = member_descriptions\n         .iter()\n         .enumerate()\n-        .map(|(i, &member_llvm_type)| {\n-            let (member_size, member_align) = size_and_align_of(cx, member_llvm_type);\n+        .map(|(i, member_description)| {\n+            let (member_size, member_align) = size_and_align_of(cx, member_description.llvm_type);\n             let member_offset = machine::llelement_offset(cx, composite_llvm_type, i);\n-            let member_name: &str = member_names[i];\n \n-            do member_name.with_c_str |member_name| {\n+            do member_description.name.with_c_str |member_name| {\n                 unsafe {\n                     llvm::LLVMDIBuilderCreateMemberType(\n                         DIB(cx),\n@@ -1256,7 +1367,7 @@ fn composite_type_metadata(cx: &mut CrateContext,\n                         bytes_to_bits(member_align),\n                         bytes_to_bits(member_offset),\n                         0,\n-                        member_type_metadata[i])\n+                        member_description.type_metadata)\n                 }\n             }\n         })\n@@ -1266,7 +1377,7 @@ fn composite_type_metadata(cx: &mut CrateContext,\n         unsafe {\n             llvm::LLVMDIBuilderCreateStructType(\n                 DIB(cx),\n-                file_metadata,\n+                containing_scope,\n                 name,\n                 file_metadata,\n                 loc.line as c_uint,\n@@ -1277,8 +1388,7 @@ fn composite_type_metadata(cx: &mut CrateContext,\n                 create_DIArray(DIB(cx), member_metadata),\n                 0,\n                 ptr::null())\n-    }\n-    };\n+    }};\n }\n \n fn boxed_type_metadata(cx: &mut CrateContext,\n@@ -1287,36 +1397,57 @@ fn boxed_type_metadata(cx: &mut CrateContext,\n                        content_type_metadata: DIType,\n                        span: Span)\n                     -> DICompositeType {\n-\n     let box_type_name = match content_type_name {\n         Some(content_type_name) => fmt!(\"Boxed<%s>\", content_type_name),\n         None                    => ~\"BoxedType\"\n     };\n \n     let box_llvm_type = Type::box(cx, &content_llvm_type);\n     let member_llvm_types = box_llvm_type.field_types();\n-    let member_names = [~\"refcnt\", ~\"tydesc\", ~\"prev\", ~\"next\", ~\"val\"];\n-\n     assert!(box_layout_is_correct(cx, member_llvm_types, content_llvm_type));\n \n     let int_type = ty::mk_int();\n     let nil_pointer_type = ty::mk_nil_ptr(cx.tcx);\n+    let nil_pointer_type_metadata = type_metadata(cx, nil_pointer_type, codemap::dummy_sp());\n \n-    let member_types_metadata = [\n-        type_metadata(cx, int_type, span),\n-        type_metadata(cx, nil_pointer_type, span),\n-        type_metadata(cx, nil_pointer_type, span),\n-        type_metadata(cx, nil_pointer_type, span),\n-        content_type_metadata\n+    let member_descriptions = [\n+        MemberDescription {\n+            name: @\"refcnt\",\n+            llvm_type: member_llvm_types[0],\n+            type_metadata: type_metadata(cx, int_type, codemap::dummy_sp()),\n+        },\n+        MemberDescription {\n+            name: @\"tydesc\",\n+            llvm_type: member_llvm_types[1],\n+            type_metadata: nil_pointer_type_metadata,\n+        },\n+        MemberDescription {\n+            name: @\"prev\",\n+            llvm_type: member_llvm_types[2],\n+            type_metadata: nil_pointer_type_metadata,\n+        },\n+        MemberDescription {\n+            name: @\"next\",\n+            llvm_type: member_llvm_types[3],\n+            type_metadata: nil_pointer_type_metadata,\n+        },\n+        MemberDescription {\n+            name: @\"val\",\n+            llvm_type: member_llvm_types[4],\n+            type_metadata: content_type_metadata\n+        }\n     ];\n \n+    let loc = span_start(cx, span);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n+\n     return composite_type_metadata(\n         cx,\n         box_llvm_type,\n         box_type_name,\n-        member_llvm_types,\n-        member_names,\n-        member_types_metadata,\n+        member_descriptions,\n+        file_metadata,\n+        file_metadata,\n         span);\n \n     // Unfortunately, we cannot assert anything but the correct types here---and not whether the\n@@ -1374,7 +1505,6 @@ fn vec_metadata(cx: &mut CrateContext,\n     let vec_type_name: &str = fmt!(\"[%s]\", ty_to_str(cx.tcx, element_type));\n \n     let member_llvm_types = vec_llvm_type.field_types();\n-    let member_names = &[~\"fill\", ~\"alloc\", ~\"elements\"];\n \n     let int_type_metadata = type_metadata(cx, ty::mk_int(), span);\n     let array_type_metadata = unsafe {\n@@ -1386,16 +1516,36 @@ fn vec_metadata(cx: &mut CrateContext,\n             create_DIArray(DIB(cx), [llvm::LLVMDIBuilderGetOrCreateSubrange(DIB(cx), 0, 0)]))\n     };\n \n-    //                           fill               alloc              elements\n-    let member_type_metadata = &[int_type_metadata, int_type_metadata, array_type_metadata];\n+    let member_descriptions = [\n+        MemberDescription {\n+            name: @\"fill\",\n+            llvm_type: member_llvm_types[0],\n+            type_metadata: int_type_metadata,\n+        },\n+        MemberDescription {\n+            name: @\"alloc\",\n+            llvm_type: member_llvm_types[1],\n+            type_metadata: int_type_metadata,\n+        },\n+        MemberDescription {\n+            name: @\"elements\",\n+            llvm_type: member_llvm_types[2],\n+            type_metadata: array_type_metadata,\n+        }\n+    ];\n+\n+    assert!(member_descriptions.len() == member_llvm_types.len());\n+\n+    let loc = span_start(cx, span);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     return composite_type_metadata(\n         cx,\n         vec_llvm_type,\n         vec_type_name,\n-        member_llvm_types,\n-        member_names,\n-        member_type_metadata,\n+        member_descriptions,\n+        file_metadata,\n+        file_metadata,\n         span);\n }\n \n@@ -1429,22 +1579,35 @@ fn vec_slice_metadata(cx: &mut CrateContext,\n     let slice_type_name = ty_to_str(cx.tcx, vec_type);\n \n     let member_llvm_types = slice_llvm_type.field_types();\n-    let member_names = &[~\"data_ptr\", ~\"size_in_bytes\"];\n-\n     assert!(slice_layout_is_correct(cx, member_llvm_types, element_type));\n \n     let data_ptr_type = ty::mk_ptr(cx.tcx, ty::mt { ty: element_type, mutbl: ast::MutImmutable });\n \n-    let member_type_metadata = &[type_metadata(cx, data_ptr_type, span),\n-                                 type_metadata(cx, ty::mk_uint(), span)];\n+    let member_descriptions = [\n+        MemberDescription {\n+            name: @\"data_ptr\",\n+            llvm_type: member_llvm_types[0],\n+            type_metadata: type_metadata(cx, data_ptr_type, span),\n+        },\n+        MemberDescription {\n+            name: @\"size_in_bytes\",\n+            llvm_type: member_llvm_types[1],\n+            type_metadata: type_metadata(cx, ty::mk_uint(), span),\n+        },\n+    ];\n+\n+    assert!(member_descriptions.len() == member_llvm_types.len());\n+\n+    let loc = span_start(cx, span);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     return composite_type_metadata(\n         cx,\n         slice_llvm_type,\n         slice_type_name,\n-        member_llvm_types,\n-        member_names,\n-        member_type_metadata,\n+        member_descriptions,\n+        file_metadata,\n+        file_metadata,\n         span);\n \n     fn slice_layout_is_correct(cx: &mut CrateContext,\n@@ -1505,10 +1668,10 @@ fn unimplemented_type_metadata(cx: &mut CrateContext, t: ty::t) -> DIType {\n \n fn type_metadata(cx: &mut CrateContext,\n                  t: ty::t,\n-                 span: Span)\n+                 usage_site_span: Span)\n               -> DIType {\n     let type_id = ty::type_id(t);\n-    match dbg_cx(cx).created_types.find(&type_id) {\n+    match debug_context(cx).created_types.find(&type_id) {\n         Some(type_metadata) => return *type_metadata,\n         None => ()\n     }\n@@ -1552,46 +1715,46 @@ fn type_metadata(cx: &mut CrateContext,\n             let i8_t = ty::mk_i8();\n             match *vstore {\n                 ty::vstore_fixed(len) => {\n-                    fixed_vec_metadata(cx, i8_t, len + 1, span)\n+                    fixed_vec_metadata(cx, i8_t, len + 1, usage_site_span)\n                 },\n                 ty::vstore_uniq  => {\n-                    let vec_metadata = vec_metadata(cx, i8_t, span);\n+                    let vec_metadata = vec_metadata(cx, i8_t, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n                 ty::vstore_box => {\n-                    let boxed_vec_metadata = boxed_vec_metadata(cx, i8_t, span);\n+                    let boxed_vec_metadata = boxed_vec_metadata(cx, i8_t, usage_site_span);\n                     pointer_type_metadata(cx, t, boxed_vec_metadata)\n                 }\n                 ty::vstore_slice(_region) => {\n-                    vec_slice_metadata(cx, t, i8_t, span)\n+                    vec_slice_metadata(cx, t, i8_t, usage_site_span)\n                 }\n             }\n         },\n         ty::ty_enum(def_id, _) => {\n-            enum_metadata(cx, t, def_id, span)\n+            enum_metadata(cx, t, def_id, usage_site_span)\n         },\n         ty::ty_box(ref mt) => {\n             create_pointer_to_box_metadata(cx, t, mt.ty)\n         },\n         ty::ty_evec(ref mt, ref vstore) => {\n             match *vstore {\n                 ty::vstore_fixed(len) => {\n-                    fixed_vec_metadata(cx, mt.ty, len, span)\n+                    fixed_vec_metadata(cx, mt.ty, len, usage_site_span)\n                 }\n                 ty::vstore_uniq if ty::type_contents(cx.tcx, mt.ty).contains_managed() => {\n-                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, span);\n+                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, boxed_vec_metadata)\n                 }\n                 ty::vstore_uniq => {\n-                    let vec_metadata = vec_metadata(cx, mt.ty, span);\n+                    let vec_metadata = vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, vec_metadata)\n                 }\n                 ty::vstore_box => {\n-                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, span);\n+                    let boxed_vec_metadata = boxed_vec_metadata(cx, mt.ty, usage_site_span);\n                     pointer_type_metadata(cx, t, boxed_vec_metadata)\n                 }\n                 ty::vstore_slice(_) => {\n-                    vec_slice_metadata(cx, t, mt.ty, span)\n+                    vec_slice_metadata(cx, t, mt.ty, usage_site_span)\n                 }\n             }\n         },\n@@ -1601,34 +1764,33 @@ fn type_metadata(cx: &mut CrateContext,\n         ty::ty_uniq(ref mt)    |\n         ty::ty_ptr(ref mt)     |\n         ty::ty_rptr(_, ref mt) => {\n-            let pointee = type_metadata(cx, mt.ty, span);\n+            let pointee = type_metadata(cx, mt.ty, usage_site_span);\n             pointer_type_metadata(cx, t, pointee)\n         },\n         ty::ty_bare_fn(ref barefnty) => {\n-            subroutine_type_metadata(cx, &barefnty.sig, span)\n+            subroutine_type_metadata(cx, &barefnty.sig, usage_site_span)\n         },\n         ty::ty_closure(ref closurety) => {\n-            subroutine_type_metadata(cx, &closurety.sig, span)\n+            subroutine_type_metadata(cx, &closurety.sig, usage_site_span)\n         },\n         ty::ty_trait(_did, ref _substs, ref _vstore, _, _bounds) => {\n-            cx.sess.span_note(span, \"debuginfo for trait NYI\");\n+            cx.sess.span_note(usage_site_span, \"debuginfo for trait NYI\");\n             unimplemented_type_metadata(cx, t)\n         },\n-        ty::ty_struct(did, ref substs) => {\n-            let fields = ty::struct_fields(cx.tcx, did, substs);\n-            struct_metadata(cx, t, fields, span)\n+        ty::ty_struct(def_id, ref substs) => {\n+            struct_metadata(cx, t, def_id, substs, usage_site_span)\n         },\n         ty::ty_tup(ref elements) => {\n-            tuple_metadata(cx, t, *elements, span)\n+            tuple_metadata(cx, t, *elements, usage_site_span)\n         },\n         ty::ty_opaque_box => {\n-            cx.sess.span_note(span, \"debuginfo for ty_opaque_box NYI\");\n+            cx.sess.span_note(usage_site_span, \"debuginfo for ty_opaque_box NYI\");\n             unimplemented_type_metadata(cx, t)\n         }\n         _ => cx.sess.bug(fmt!(\"debuginfo: unexpected type in type_metadata: %?\", sty))\n     };\n \n-    dbg_cx(cx).created_types.insert(type_id, type_metadata);\n+    debug_context(cx).created_types.insert(type_id, type_metadata);\n     return type_metadata;\n }\n \n@@ -1649,7 +1811,7 @@ impl DebugLocation {\n }\n \n fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n-    if debug_location == dbg_cx(cx).curr_loc {\n+    if debug_location == debug_context(cx).current_debug_location {\n         return;\n     }\n \n@@ -1660,7 +1822,7 @@ fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n             debug!(\"setting debug location to %u %u\", line, col);\n             let elements = [C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n             unsafe {\n-                metadata_node = llvm::LLVMMDNodeInContext(dbg_cx(cx).llcontext,\n+                metadata_node = llvm::LLVMMDNodeInContext(debug_context(cx).llcontext,\n                                                           vec::raw::to_ptr(elements),\n                                                           elements.len() as c_uint);\n             }\n@@ -1675,7 +1837,7 @@ fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n         llvm::LLVMSetCurrentDebugLocation(cx.builder.B, metadata_node);\n     }\n \n-    dbg_cx(cx).curr_loc = debug_location;\n+    debug_context(cx).current_debug_location = debug_location;\n }\n \n //=-------------------------------------------------------------------------------------------------\n@@ -1701,7 +1863,7 @@ fn bytes_to_bits(bytes: uint) -> c_ulonglong {\n }\n \n #[inline]\n-fn dbg_cx<'a>(cx: &'a mut CrateContext) -> &'a mut CrateDebugContext {\n+fn debug_context<'a>(cx: &'a mut CrateContext) -> &'a mut CrateDebugContext {\n     cx.dbg_cx.get_mut_ref()\n }\n \n@@ -1725,6 +1887,28 @@ fn fn_should_be_ignored(fcx: &FunctionContext) -> bool {\n     }\n }\n \n+fn get_namespace_and_span_for_item(cx: &mut CrateContext,\n+                                   def_id: ast::DefId,\n+                                   warning_span: Span)\n+                                -> (DIScope, Span) {\n+    if def_id.crate == ast::LOCAL_CRATE {\n+        let containing_scope = debug_context(cx).local_namespace_map.get_copy(&def_id.node).scope;\n+        let definition_span = match cx.tcx.items.find(&def_id.node) {\n+            Some(&ast_map::node_item(@ast::item { span, _ }, _)) => span,\n+            ref node => {\n+                cx.sess.span_warn(warning_span, fmt!(\"debuginfo::get_namespace_and_span_for_item() \\\n+                                                      - Unexpected node type: %?\", *node));\n+                codemap::dummy_sp()\n+            }\n+        };\n+        (containing_scope, definition_span)\n+    } else {\n+        let item_path = ty::item_path(cx.tcx, def_id);\n+        // For external items there is no span information\n+        (namespace_for_external_item(cx, &item_path).scope, codemap::dummy_sp())\n+    }\n+}\n+\n // This procedure builds the *scope map* for a given function, which maps any given ast::NodeId in\n // the function's AST to the correct DIScope metadata instance.\n //\n@@ -2179,3 +2363,234 @@ fn populate_scope_map(cx: &mut CrateContext,\n         }\n     }\n }\n+\n+\n+//=-------------------------------------------------------------------------------------------------\n+// Namespace Handling\n+//=-------------------------------------------------------------------------------------------------\n+\n+struct NamespaceTreeNode {\n+    ident: ast::Ident,\n+    scope: DIScope,\n+    parent: Option<@NamespaceTreeNode>,\n+}\n+\n+impl NamespaceTreeNode {\n+    fn mangled_name_of_contained_item(&self, item_name: &str) -> ~str {\n+        let mut name = ~\"_ZN\";\n+        fill_nested(self, &mut name);\n+\n+        name.push_str(fmt!(\"%u%s\", item_name.len(), item_name));\n+        name.push_char('E');\n+\n+        return name;\n+\n+        fn fill_nested(node: &NamespaceTreeNode, output: &mut ~str) {\n+            match node.parent {\n+                Some(parent) => {\n+                    fill_nested(parent, output);\n+                }\n+                None => {}\n+            }\n+            let name = token::ident_to_str(&node.ident);\n+            output.push_str(fmt!(\"%u%s\", name.len(), name));\n+        }\n+    }\n+}\n+\n+fn namespace_for_external_item(cx: &mut CrateContext,\n+                               item_path: &ast_map::path)\n+                            -> @NamespaceTreeNode {\n+    if item_path.len() < 2 {\n+        cx.sess.bug(fmt!(\"debuginfo::namespace_for_external_item() - Invalid item_path: %s\",\n+            ast_map::path_to_str(*item_path, token::get_ident_interner())));\n+    }\n+\n+    let path_excluding_item = item_path.slice_to(item_path.len() - 1);\n+    let mut current_key = vec::with_capacity(path_excluding_item.len());\n+    let mut parent_node: Option<@NamespaceTreeNode> = None;\n+    let last_index = path_excluding_item.len() - 1;\n+\n+    for (i, &path_element) in path_excluding_item.iter().enumerate() {\n+        let ident = match path_element {\n+            ast_map::path_mod(ident)            |\n+            ast_map::path_name(ident)           |\n+            ast_map::path_pretty_name(ident, _) => ident\n+        };\n+\n+        current_key.push(ident);\n+\n+        let existing_node = debug_context(cx).extern_namespaces.find_copy(&current_key);\n+        let current_node = match existing_node {\n+            Some(existing_node) => existing_node,\n+            None => {\n+                // create and insert\n+                let parent_scope = match parent_node {\n+                    Some(node) => node.scope,\n+                    None => ptr::null()\n+                };\n+                let namespace_name = token::ident_to_str(&ident);\n+\n+                let namespace_metadata = unsafe {\n+                    do namespace_name.with_c_str |namespace_name| {\n+                        llvm::LLVMDIBuilderCreateNameSpace(\n+                            DIB(cx),\n+                            parent_scope,\n+                            namespace_name,\n+                            ptr::null(), // cannot reconstruct file ...\n+                            0)           // ... or line information\n+                    }\n+                };\n+\n+                let node = @NamespaceTreeNode {\n+                    ident: ident,\n+                    scope: namespace_metadata,\n+                    parent: parent_node,\n+                };\n+\n+                debug_context(cx).extern_namespaces.insert(current_key.clone(), node);\n+\n+                node\n+            }\n+        };\n+\n+        if i == last_index {\n+            return current_node;\n+        } else {\n+            parent_node = Some(current_node);\n+        }\n+    }\n+\n+    cx.sess.bug(\"debuginfo::namespace_for_external_item() - Code path should be unreachable\");\n+}\n+\n+struct NamespaceVisitor<'self> {\n+    module_ident: ast::Ident,\n+    scope_stack: ~[@NamespaceTreeNode],\n+    crate_context: &'self mut CrateContext,\n+}\n+\n+impl<'self> NamespaceVisitor<'self> {\n+\n+    fn new_crate_visitor<'a>(cx: &'a mut CrateContext,\n+                             crate_ident: ast::Ident)\n+                          -> NamespaceVisitor<'a> {\n+        NamespaceVisitor {\n+            module_ident: crate_ident,\n+            scope_stack: ~[],\n+            crate_context: cx,\n+        }\n+    }\n+\n+    fn new_function_visitor<'a>(cx: &'a mut CrateContext,\n+                                function_name: &str,\n+                                parent_node: Option<@NamespaceTreeNode>,\n+                                file_metadata: DIFile,\n+                                span: Span)\n+                             -> NamespaceVisitor<'a> {\n+        let companion_name = function_name + \"()\";\n+        let companion_ident = token::str_to_ident(companion_name);\n+        let parent_scope = match parent_node {\n+            Some(parent_node) => parent_node.scope,\n+            None => ptr::null()\n+        };\n+        let line = span_start(cx, span).line as c_uint;\n+\n+        let namespace_metadata = unsafe {\n+            do companion_name.with_c_str |companion_name| {\n+                llvm::LLVMDIBuilderCreateNameSpace(\n+                    DIB(cx),\n+                    parent_scope,\n+                    companion_name,\n+                    file_metadata,\n+                    line)\n+            }\n+        };\n+\n+        let function_node = @NamespaceTreeNode {\n+            scope: namespace_metadata,\n+            ident: companion_ident,\n+            parent: parent_node,\n+        };\n+\n+        return NamespaceVisitor {\n+            module_ident: special_idents::invalid,\n+            scope_stack: ~[function_node],\n+            crate_context: cx,\n+        };\n+    }\n+}\n+\n+// Possible optimization: Only recurse if needed.\n+impl<'self> visit::Visitor<()> for NamespaceVisitor<'self> {\n+\n+    fn visit_mod(&mut self,\n+                 module: &ast::_mod,\n+                 span: Span,\n+                 _: ast::NodeId,\n+                 _: ()) {\n+        let module_name = token::ident_to_str(&self.module_ident);\n+\n+        let (parent_node, parent_scope) = if self.scope_stack.len() > 0 {\n+            let parent_node = *self.scope_stack.last();\n+            (Some(parent_node), parent_node.scope)\n+        } else {\n+            (None, ptr::null())\n+        };\n+\n+        let loc = span_start(self.crate_context, span);\n+        let file_metadata = file_metadata(self.crate_context, loc.file.name);\n+\n+        let namespace_metadata = unsafe {\n+            do module_name.with_c_str |module_name| {\n+                llvm::LLVMDIBuilderCreateNameSpace(\n+                    DIB(self.crate_context),\n+                    parent_scope,\n+                    module_name,\n+                    file_metadata,\n+                    loc.line as c_uint)\n+            }\n+        };\n+\n+        let this_node = @NamespaceTreeNode {\n+            scope: namespace_metadata,\n+            ident: self.module_ident,\n+            parent: parent_node,\n+        };\n+\n+        self.scope_stack.push(this_node);\n+\n+        visit::walk_mod(self, module, ());\n+\n+        self.scope_stack.pop();\n+    }\n+\n+    fn visit_item(&mut self, item: @ast::item, _: ()) {\n+        match item.node {\n+            ast::item_mod(*) => {\n+                // always store the last module ident so visit_mod() has it available\n+                self.module_ident = item.ident;\n+            }\n+            ast::item_fn(*) => { /* handled by visit_fn */ }\n+            _ => {\n+                debug_context(self.crate_context)\n+                    .local_namespace_map\n+                    .insert(item.id, *self.scope_stack.last());\n+            }\n+        }\n+\n+        visit::walk_item(self, item, ());\n+    }\n+\n+    fn visit_fn(&mut self,\n+                _: &visit::fn_kind,\n+                _: &ast::fn_decl,\n+                _: &ast::Block,\n+                _: Span,\n+                node_id: ast::NodeId,\n+                _: ()) {\n+        debug_context(self.crate_context)\n+            .local_namespace_map\n+            .insert(node_id, *self.scope_stack.last());\n+    }\n+}"}, {"sha": "22288a276241aeab7f57a21e2c660a8611e7bc33", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -727,9 +727,9 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateTemplateTypeParameter(\n     LLVMValueRef Scope,\n     const char* Name,\n     LLVMValueRef Ty,\n-    LLVMValueRef File = 0,\n-    unsigned LineNo = 0,\n-    unsigned ColumnNo = 0)\n+    LLVMValueRef File,\n+    unsigned LineNo,\n+    unsigned ColumnNo)\n {\n     return wrap(Builder->createTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope),\n@@ -775,3 +775,17 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateComplexVariable(\n         ArgNo\n     ));\n }\n+\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateNameSpace(\n+    DIBuilderRef Builder,\n+    LLVMValueRef Scope,\n+    const char* Name,\n+    LLVMValueRef File,\n+    unsigned LineNo)\n+{\n+    return wrap(Builder->createNameSpace(\n+        unwrapDI<DIDescriptor>(Scope),\n+        Name,\n+        unwrapDI<DIFile>(File),\n+        LineNo));\n+}"}, {"sha": "2c7c445d308a12f1ee57fabf81b9047dba1a40c5", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -611,6 +611,7 @@ LLVMDIBuilderCreateTemplateTypeParameter\n LLVMDIBuilderCreateOpDeref\n LLVMDIBuilderCreateOpPlus\n LLVMDIBuilderCreateComplexVariable\n+LLVMDIBuilderCreateNameSpace\n LLVMSetUnnamedAddr\n LLVMRustAddPass\n LLVMRustAddAnalysisPasses"}, {"sha": "84d9c2c66cc6efc06fb8cb5b6103c13700c0bba6", "filename": "src/test/debug-info/basic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -15,7 +15,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break _zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print b"}, {"sha": "b02b4be2fd9c03c34f3872ab7915763d66f5a6ee", "filename": "src/test/debug-info/borrowed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -12,7 +12,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *bool_ref"}, {"sha": "2461eb4887eb5720ac277379bc7e469983ccb44c", "filename": "src/test/debug-info/borrowed-c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "9a9e71c7068c40e460dee7d64fe7e286fe8e2d22", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "35a222ffd044214aa1a0eaacae442a8f5935fb2b", "filename": "src/test/debug-info/borrowed-managed-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -12,7 +12,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *bool_ref"}, {"sha": "42f7ffd8777bc75aaa84ced1d2d3d1955adb81b2", "filename": "src/test/debug-info/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "bcf73bae5ec439965cc71b9e69b807d86426a162", "filename": "src/test/debug-info/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "ac295783c9f94146906b2c90bb2002d71a795d76", "filename": "src/test/debug-info/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -12,7 +12,7 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *bool_ref"}, {"sha": "60ff5f789a8fbd4b53b849c2fbacf58fdfa5d1c8", "filename": "src/test/debug-info/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbox.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break _zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print *a"}, {"sha": "e996b249d369ee434dde633dc902264120579ee9", "filename": "src/test/debug-info/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "aa2a88afc465a9d5e6c4d22c7a39da4d2a40d2dd", "filename": "src/test/debug-info/boxed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "45f8c134f2c2ad993ce2df52bf5646dbb9d873dd", "filename": "src/test/debug-info/by-value-non-immediate-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "75e65178546c5e82340c71b0c5ed1643bed1a375", "filename": "src/test/debug-info/by-value-self-argument-in-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-self-argument-in-trait-impl.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "d3e27c85b745af044589d162c3551803dcf0c65d", "filename": "src/test/debug-info/c-style-enum-in-composite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "f1bb42ac5f0f4775a781e9f470547a3e302e1106", "filename": "src/test/debug-info/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "83a2c456ae69784de3fe5ad601766ed4b407c405", "filename": "src/test/debug-info/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "49bbb7ed2635a2aee6dc93099450fec71cd1b60d", "filename": "src/test/debug-info/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "8115d29857030b9849fb9ab99ab0720a633d9fd1", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "a00e1318967d224e550e4c0f2fa5c25b0aeab20d", "filename": "src/test/debug-info/evec-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "6ae7b027075da4f8b45510c70ab49ce3c0d9a00e", "filename": "src/test/debug-info/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arguments.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n \n@@ -43,4 +43,4 @@ fn fun(x: int, y: bool) -> (int, bool) {\n     (x, y)\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "22f565ceee5e3120e727db1e85b06cec212673c8", "filename": "src/test/debug-info/generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-function.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "051b2054219796b5a3562a65a46b86a010ae94fe", "filename": "src/test/debug-info/generic-functions-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "f97a3cea5660d4353987eb5788070b0f02e2e6fd", "filename": "src/test/debug-info/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "8e82f0f27b9f98affcd128b99be787f5df5c582e", "filename": "src/test/debug-info/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STRUCT"}, {"sha": "81b12fe60ae3d7f5fabb6180d65b1ad1c6055b65", "filename": "src/test/debug-info/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "cf6286e9541e8a2b6276e90dace61f7add838b7f", "filename": "src/test/debug-info/generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "8523a947aac10ae6cb8f98b78fdd4fc1331ee719", "filename": "src/test/debug-info/generic-trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "0b9f93505476f6d5069243b482c4b30d24374433", "filename": "src/test/debug-info/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "0a2cb953f007cc5930489de8b37cfe4f54ac719a", "filename": "src/test/debug-info/lexical-scope-in-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-for-loop.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // FIRST ITERATION"}, {"sha": "89fd84daede532c6be9fbcb6fae089e897d552a2", "filename": "src/test/debug-info/lexical-scope-in-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-if.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // BEFORE if"}, {"sha": "96da78a9192983cf69aea31f57807d4f48ec1c80", "filename": "src/test/debug-info/lexical-scope-in-managed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-managed-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "1216e9fde1e0ae50bd73b8799634e15125c0b0f8", "filename": "src/test/debug-info/lexical-scope-in-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-match.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "744c77b27358c197571eed6a5269347b6f597aee", "filename": "src/test/debug-info/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-stack-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "beb9211cc3291ac4673767658636e9147e6a1d3b", "filename": "src/test/debug-info/lexical-scope-in-unconditional-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unconditional-loop.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // FIRST ITERATION"}, {"sha": "6d8ca457efef5fa00c4a4e6de997b2685d098c92", "filename": "src/test/debug-info/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "80010bdd2628e6b95b502646f027ed3495d24c07", "filename": "src/test/debug-info/lexical-scope-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-while.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // FIRST ITERATION"}, {"sha": "9e87eee692dc2b880d29bcf8333d5901e431cca3", "filename": "src/test/debug-info/lexical-scope-with-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "652561c6aeffc107ffc07e893fe9860f5f35a522", "filename": "src/test/debug-info/lexical-scopes-in-block-expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scopes-in-block-expression.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STRUCT EXPRESSION"}, {"sha": "87aa3d1dfc159e8249f941af6fcfea5fd6af8743", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "d4ec7094e8c95a2f4ce82dcf5f2081fb2a6bce0b", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "9ea713c29823c0725591443d2fe9e12d5e5d065e", "filename": "src/test/debug-info/managed-pointer-within-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "d428d230d45c01486db7087561d0bf007cf840bc", "filename": "src/test/debug-info/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "63fd6c996ffa0793f0f4168088a1a1ab5434be8c", "filename": "src/test/debug-info/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "249c3a073a27bd969d17b31e58575c7f5846948f", "filename": "src/test/debug-info/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "07a29f3ece338e9c0dd11e0291fef48d20fbc3b7", "filename": "src/test/debug-info/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-trait.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "d4354709a86eefd14e8dbfd478f4ce81cba3c2cb", "filename": "src/test/debug-info/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-tuple-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "881e2547cfc68df64898ac4f68158bd94d0d92e1", "filename": "src/test/debug-info/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "880954ce5316771f5d8538157196013a12014f08", "filename": "src/test/debug-info/multiple-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "273ca255061c57e48702e9cea67734010f9a5871", "filename": "src/test/debug-info/name-shadowing-and-scope-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fname-shadowing-and-scope-nesting.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "9dc4edfb1599ba609f967443a566625d12bda59b", "filename": "src/test/debug-info/nil-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fnil-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "5c0ffe24f0eaa7c818cdf73093dccb0c64ad47aa", "filename": "src/test/debug-info/option-like-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "47e4a26ab4ba29d892c518161256aba0a9263155", "filename": "src/test/debug-info/packed-struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "8d3fc4babb86bfe02bdd0be2674c82f195d80aee", "filename": "src/test/debug-info/packed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "53b2e9ee21de1692387cba6a6ef2c6a2b55d606e", "filename": "src/test/debug-info/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "47f589307601f2ed24c334d2c08f8dc27bdd9e06", "filename": "src/test/debug-info/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STACK BY REF"}, {"sha": "adc240e40d5a9dd52618b96c943b12b835232043", "filename": "src/test/debug-info/shadowed-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fshadowed-argument.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "acc8cf3b654d6ad0fadf548895da507909574a6d", "filename": "src/test/debug-info/shadowed-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fshadowed-variable.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "fbcee4f0ae2d6876e235cb9327b1dc7c7e11ad10", "filename": "src/test/debug-info/simple-lexical-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-lexical-scope.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "a47472af1efa6eba7304d50d46b7462498c2eb3f", "filename": "src/test/debug-info/simple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "1e4c53427b23a5df672060603697b1ade5379e46", "filename": "src/test/debug-info/simple-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "0d1ce28094a5acff7ce80b02ec65a6d1fc9190c8", "filename": "src/test/debug-info/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // STRUCT"}, {"sha": "a821ce21d50bfa26a1d13d66c714c7cb20c61964", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "f1690fba354f0870905d46b42c6e4ea874306518", "filename": "src/test/debug-info/struct-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "acd2526a68d6e66e9fa1833087cadd2599f8d38f", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "8994a582b58fc7cabd337939d60a6037e1a1aac7", "filename": "src/test/debug-info/struct-with-destructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print simple"}, {"sha": "1f6e6992e2795af4de102bbb8f911f3023816bb0", "filename": "src/test/debug-info/trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n \n // debugger:finish"}, {"sha": "25a08b3f57a777119d8b403c6f8eb1ab3f0c0c99", "filename": "src/test/debug-info/tuple-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "14dd671bb945e7c7501556690ff7253af581b8e6", "filename": "src/test/debug-info/tuple-in-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "63a74ecbe4a0895e9e346971bfd2fb8b78bba83d", "filename": "src/test/debug-info/tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "fef6b449a9bdeea88894c921b062917caabea42c", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print union on\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "0995cec11a3b30a9aed1dfed83dab35f44f42746", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "b20f40378d3964f7430097adf2313cae94f9a0f6", "filename": "src/test/debug-info/var-captured-in-managed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-managed-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "920052eb80ee70a1cf819b975514ab603dd76b2f", "filename": "src/test/debug-info/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-nested-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "f113c6ea4be77210d2cab80e39ec1700ed5a4641", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "e16539d3396a7663c0f6358c9aa33d0843a5bfa7", "filename": "src/test/debug-info/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-stack-closure.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n "}, {"sha": "9e5fb9236db61545c17cb6ecfc756c7875e402e6", "filename": "src/test/debug-info/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print empty.size_in_bytes"}, {"sha": "bc10b5ec8b70c3cef3cbbd1273e76106b09cc312", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ed30cd5eab9af1976a994c50d146a3dbeccad4/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=67ed30cd5eab9af1976a994c50d146a3dbeccad4", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break zzz\n+// debugger:rbreak zzz\n // debugger:run\n // debugger:finish\n // debugger:print a"}]}