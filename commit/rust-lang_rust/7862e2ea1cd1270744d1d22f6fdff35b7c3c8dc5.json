{"sha": "7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NjJlMmVhMWNkMTI3MDc0NGQxZDIyZjZmZGZmMzViN2MzYzhkYzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-26T08:48:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-26T08:48:50Z"}, "message": "Implement some intrinsics", "tree": {"sha": "61439e5ebbcf454ab235e3616d7025ce72e1e1db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61439e5ebbcf454ab235e3616d7025ce72e1e1db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "html_url": "https://github.com/rust-lang/rust/commit/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "874208bcd5490ee19a42787c529ab80c1595cf36", "url": "https://api.github.com/repos/rust-lang/rust/commits/874208bcd5490ee19a42787c529ab80c1595cf36", "html_url": "https://github.com/rust-lang/rust/commit/874208bcd5490ee19a42787c529ab80c1595cf36"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "1c67b6810ce71fd2303164133b74cf26da33b072", "filename": "example.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "patch": "@@ -115,3 +115,11 @@ fn call_closure() {\n \n     })(0u8, 42u8, 0u8)\n }\n+\n+fn eq_char(a: char, b: char) -> bool {\n+    a == b\n+}\n+\n+unsafe fn transmute(c: char) -> u32 {\n+    intrinsics::transmute(c)\n+}"}, {"sha": "2496eb1bf4a3f8faac06948350c03d1e212fd457", "filename": "mini_core.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/mini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/mini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini_core.rs?ref=7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "patch": "@@ -17,6 +17,7 @@ unsafe impl Copy for i8 {}\n unsafe impl Copy for i16 {}\n unsafe impl Copy for i32 {}\n unsafe impl Copy for isize {}\n+unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}\n \n@@ -50,6 +51,11 @@ impl PartialEq for u8 {\n     fn ne(&self, other: &u8) -> bool { (*self) != (*other) }\n }\n \n+impl PartialEq for char {\n+    fn eq(&self, other: &char) -> bool { (*self) == (*other) }\n+    fn ne(&self, other: &char) -> bool { (*self) != (*other) }\n+}\n+\n impl<T: ?Sized> PartialEq for *const T {\n     fn eq(&self, other: &*const T) -> bool { *self == *other }\n     fn ne(&self, other: &*const T) -> bool { *self != *other }\n@@ -86,5 +92,6 @@ pub mod intrinsics {\n     extern \"rust-intrinsic\" {\n         pub fn size_of<T>() -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+        pub fn transmute<T, U>(e: T) -> U;\n     }\n }"}, {"sha": "6e57d7ac5f7e59a0a3f7e7cbcfe764e705b3c958", "filename": "src/abi.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "patch": "@@ -203,6 +203,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             let intrinsic = &intrinsic[..];\n \n             let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+            let ret = return_place.unwrap();\n             match intrinsic {\n                 \"copy\" => {\n                     /*let elem_ty = substs.type_at(0);\n@@ -213,9 +214,48 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                     unimplemented!(\"copy\");\n                 }\n                 \"size_of\" => {\n+                    assert_eq!(args.len(), 0);\n                     let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n                     let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n-                    return_place.unwrap().write_cvalue(fx, size_of);\n+                    ret.write_cvalue(fx, size_of);\n+                }\n+                _ if intrinsic.starts_with(\"unchecked_\") => {\n+                    assert_eq!(args.len(), 2);\n+                    let lhs = args[0].load_value(fx);\n+                    let rhs = args[1].load_value(fx);\n+                    let bin_op = match intrinsic {\n+                        \"unchecked_div\" => BinOp::Div,\n+                        \"unchecked_rem\" => BinOp::Rem,\n+                        \"unchecked_shl\" => BinOp::Shl,\n+                        \"unchecked_shr\" => BinOp::Shr,\n+                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                    };\n+                    let res = match ret.layout().ty.sty {\n+                        TypeVariants::TyUint(_) => {\n+                            ::base::trans_int_binop(fx, bin_op, lhs, rhs, args[0].layout().ty, false, false)\n+                        }\n+                        TypeVariants::TyInt(_) => {\n+                            ::base::trans_int_binop(fx, bin_op, lhs, rhs, args[0].layout().ty, true, false)\n+                        }\n+                        _ => panic!(),\n+                    };\n+                    ret.write_cvalue(fx, res);\n+                }\n+                \"offset\" => {\n+                    assert_eq!(args.len(), 2);\n+                    let base = args[0].load_value(fx);\n+                    let offset = args[1].load_value(fx);\n+                    let res = fx.bcx.ins().iadd(base, offset);\n+                    ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n+                }\n+                \"transmute\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let src_ty = substs.type_at(0);\n+                    let dst_ty = substs.type_at(1);\n+                    assert_eq!(args[0].layout().ty, src_ty);\n+                    let addr = args[0].force_stack(fx);\n+                    let dst_layout = fx.layout_of(dst_ty);\n+                    ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n                 }\n                 _ => fx.tcx.sess.fatal(&format!(\"unsupported intrinsic {}\", intrinsic)),\n             }"}, {"sha": "d5c67480ef23af028f77c9173f4920f78fe9fab4", "filename": "src/base.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7862e2ea1cd1270744d1d22f6fdff35b7c3c8dc5", "patch": "@@ -248,6 +248,9 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                         TypeVariants::TyInt(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true, false)\n                         }\n+                        TypeVariants::TyChar => {\n+                            trans_char_binop(fx, *bin_op, lhs, rhs, lval.layout().ty)\n+                        }\n                         TypeVariants::TyRawPtr(..) => {\n                             trans_ptr_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n                         }\n@@ -423,9 +426,9 @@ macro_rules! binop_match {\n     }\n }\n \n-fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, _checked: bool) -> CValue<'tcx> {\n+pub fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, signed: bool, _checked: bool) -> CValue<'tcx> {\n     let res = binop_match! {\n-        fx, bin_op, signed, lhs, rhs, \"non ptr\";\n+        fx, bin_op, signed, lhs, rhs, \"int/uint\";\n         Add (_) iadd;\n         Sub (_) isub;\n         Mul (_) imul;\n@@ -458,6 +461,33 @@ fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, l\n     CValue::ByVal(res, fx.layout_of(ty))\n }\n \n+pub fn trans_char_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>) -> CValue<'tcx> {\n+    let res = binop_match! {\n+        fx, bin_op, false, lhs, rhs, \"char\";\n+        Add (_) bug;\n+        Sub (_) bug;\n+        Mul (_) bug;\n+        Div (_) bug;\n+        Rem (_) bug;\n+        BitXor (_) bug;\n+        BitAnd (_) bug;\n+        BitOr (_) bug;\n+        Shl (_) bug;\n+        Shr (_) bug;\n+\n+        Eq (_) icmp(Equal);\n+        Lt (_) icmp(UnsignedLessThan);\n+        Le (_) icmp(UnsignedLessThanOrEqual);\n+        Ne (_) icmp(NotEqual);\n+        Ge (_) icmp(UnsignedGreaterThanOrEqual);\n+        Gt (_) icmp(UnsignedGreaterThan);\n+\n+        Offset (_) bug;\n+    };\n+\n+    CValue::ByVal(res, fx.layout_of(ty))\n+}\n+\n fn trans_ptr_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, lhs: Value, rhs: Value, ty: Ty<'tcx>, _checked: bool) -> CValue<'tcx> {\n     let res = binop_match! {\n         fx, bin_op, false, lhs, rhs, \"ptr\";"}]}