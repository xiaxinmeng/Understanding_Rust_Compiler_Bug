{"sha": "2bd947998497c0bf2dc91152528eb654bbe6091b", "node_id": "C_kwDOAAsO6NoAKDJiZDk0Nzk5ODQ5N2MwYmYyZGM5MTE1MjUyOGViNjU0YmJlNjA5MWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-09T13:40:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-09T13:40:44Z"}, "message": "compare with-flag to without-flag", "tree": {"sha": "4e4b8ce799832b943303d06fa7d9d03745b92a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4b8ce799832b943303d06fa7d9d03745b92a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd947998497c0bf2dc91152528eb654bbe6091b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd947998497c0bf2dc91152528eb654bbe6091b", "html_url": "https://github.com/rust-lang/rust/commit/2bd947998497c0bf2dc91152528eb654bbe6091b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd947998497c0bf2dc91152528eb654bbe6091b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2a5f284e155775e4a2f9e34b9d474033cce6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2a5f284e155775e4a2f9e34b9d474033cce6d2", "html_url": "https://github.com/rust-lang/rust/commit/7b2a5f284e155775e4a2f9e34b9d474033cce6d2"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "97c9e1505197f72c9f8554b6a133bff6bd8afa67", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2bd947998497c0bf2dc91152528eb654bbe6091b/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd947998497c0bf2dc91152528eb654bbe6091b/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=2bd947998497c0bf2dc91152528eb654bbe6091b", "patch": "@@ -1,36 +1,38 @@\n-// compile-flags: -Zextra-const-ub-checks\n+// revisions: no_flag with_flag\n+// [no_flag] check-pass\n+// [with_flag] compile-flags: -Zextra-const-ub-checks\n #![feature(const_ptr_read)]\n \n use std::mem::transmute;\n \n const INVALID_BOOL: () = unsafe {\n     let _x: bool = transmute(3u8);\n-    //~^ ERROR: evaluation of constant value failed\n-    //~| invalid value\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n };\n \n const INVALID_PTR_IN_INT: () = unsafe {\n     let _x: usize = transmute(&3u8);\n-    //~^ ERROR: evaluation of constant value failed\n-    //~| invalid value\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n };\n \n const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = unsafe {\n     let x: &[u8] = &[0; 32];\n     let _x: (usize, usize) = transmute(x);\n-    //~^ ERROR: evaluation of constant value failed\n-    //~| invalid value\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n };\n \n const UNALIGNED_PTR: () = unsafe {\n     let _x: &u32 = transmute(&[0u8; 4]);\n-    //~^ ERROR: evaluation of constant value failed\n-    //~| invalid value\n+    //[with_flag]~^ ERROR: evaluation of constant value failed\n+    //[with_flag]~| invalid value\n };\n \n const UNALIGNED_READ: () = {\n-    INNER; //~ERROR any use of this value will cause an error\n-    //~| previously accepted\n+    INNER; //[with_flag]~ERROR any use of this value will cause an error\n+    //[with_flag]~| previously accepted\n     // There is an error here but its span is in the standard library so we cannot match it...\n     // so we have this in a *nested* const, such that the *outer* const fails to use it.\n     const INNER: () = unsafe {"}, {"sha": "1706db7ac43cac4993977dd90d28c658101f72fa", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bd947998497c0bf2dc91152528eb654bbe6091b/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd947998497c0bf2dc91152528eb654bbe6091b/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=2bd947998497c0bf2dc91152528eb654bbe6091b", "patch": "@@ -1,23 +1,23 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:7:20\n+  --> $DIR/detect-extra-ub.rs:9:20\n    |\n LL |     let _x: bool = transmute(3u8);\n    |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:13:21\n+  --> $DIR/detect-extra-ub.rs:15:21\n    |\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ constructing invalid value: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:20:30\n+  --> $DIR/detect-extra-ub.rs:22:30\n    |\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ constructing invalid value at .0: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:26:20\n+  --> $DIR/detect-extra-ub.rs:28:20\n    |\n LL |     let _x: &u32 = transmute(&[0u8; 4]);\n    |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)\n@@ -36,13 +36,13 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/detect-extra-ub.rs:39:9\n+  ::: $DIR/detect-extra-ub.rs:41:9\n    |\n LL |         ptr.read();\n-   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:39:9\n+   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:41:9\n \n error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:32:5\n+  --> $DIR/detect-extra-ub.rs:34:5\n    |\n LL | const UNALIGNED_READ: () = {\n    | ------------------------\n@@ -58,7 +58,7 @@ error: aborting due to 6 previous errors\n For more information about this error, try `rustc --explain E0080`.\n Future incompatibility report: Future breakage diagnostic:\n error: any use of this value will cause an error\n-  --> $DIR/detect-extra-ub.rs:32:5\n+  --> $DIR/detect-extra-ub.rs:34:5\n    |\n LL | const UNALIGNED_READ: () = {\n    | ------------------------", "previous_filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.stderr"}]}