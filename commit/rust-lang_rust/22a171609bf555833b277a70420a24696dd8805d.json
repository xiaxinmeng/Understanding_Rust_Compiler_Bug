{"sha": "22a171609bf555833b277a70420a24696dd8805d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTE3MTYwOWJmNTU1ODMzYjI3N2E3MDQyMGEyNDY5NmRkODgwNWQ=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-14T18:39:04Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2018-02-15T17:10:54Z"}, "message": "[improper_ctypes] Suggest repr(transparent) for structs\n\nThe suggestion is unconditional, so following it could lead to further errors. This is already the case for the repr(C) suggestion, which makes this acceptable, though not *good*. Checking up-front whether the suggestion can help would be great but applies more broadly (and would require some refactoring to avoid duplicating the checks).", "tree": {"sha": "52a0c7f754a2557b6c21de486790e31700a9dc21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a0c7f754a2557b6c21de486790e31700a9dc21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a171609bf555833b277a70420a24696dd8805d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a171609bf555833b277a70420a24696dd8805d", "html_url": "https://github.com/rust-lang/rust/commit/22a171609bf555833b277a70420a24696dd8805d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a171609bf555833b277a70420a24696dd8805d/comments", "author": null, "committer": null, "parents": [{"sha": "9b5f47ec48e8c12b68cff7cc64afe166358183ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5f47ec48e8c12b68cff7cc64afe166358183ef", "html_url": "https://github.com/rust-lang/rust/commit/9b5f47ec48e8c12b68cff7cc64afe166358183ef"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "378fe99bf31506af444cf923f333681b4da7a322", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22a171609bf555833b277a70420a24696dd8805d/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a171609bf555833b277a70420a24696dd8805d/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=22a171609bf555833b277a70420a24696dd8805d", "patch": "@@ -425,7 +425,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             return FfiUnsafe {\n                                 ty: ty,\n                                 reason: \"this struct has unspecified layout\",\n-                                help: Some(\"consider adding a #[repr(C)] attribute to this struct\"),\n+                                help: Some(\"consider adding a #[repr(C)] or #[repr(transparent)] \\\n+                                            attribute to this struct\"),\n                             };\n                         }\n "}, {"sha": "a8628c8b3d2d957696004ee16034b69e5afb3c42", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22a171609bf555833b277a70420a24696dd8805d/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22a171609bf555833b277a70420a24696dd8805d/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=22a171609bf555833b277a70420a24696dd8805d", "patch": "@@ -9,15 +9,15 @@ note: lint level defined here\n    |\n 11 | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider adding a #[repr(C)] attribute to this struct\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:55:28\n    |\n 55 |     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to this struct\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `[u32]` which is not FFI-safe: slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:56:26\n@@ -41,7 +41,7 @@ error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: th\n 58 |     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n    |                        ^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to this struct\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n   --> $DIR/lint-ctypes.rs:59:25\n@@ -129,7 +129,7 @@ error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: th\n 71 |     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                            ^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to this struct\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:72:32\n@@ -151,7 +151,7 @@ error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: th\n 74 |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                              ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a #[repr(C)] attribute to this struct\n+   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: aborting due to 20 previous errors\n "}]}