{"sha": "8d359e4385052f012d8d0c2e57a0bcfe54462d44", "node_id": "C_kwDOAAsO6NoAKDhkMzU5ZTQzODUwNTJmMDEyZDhkMGMyZTU3YTBiY2ZlNTQ0NjJkNDQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-02T01:01:58Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-02T02:02:32Z"}, "message": "Move some `Encodable`/`Decodable` tests.\n\nRound-trip encoding/decoding of many types is tested in\n`compiler/rustc_serialize/tests/opaque.rs`. There is also a small amount\nof encoding/decoding testing in three files in `tests/ui-fulldeps`.\n\nThere is no obvious reason why these three files are necessary. They\nwere originally added in 2014. Maybe it wasn't possible for a proc\nmacro to run in a unit test back then?\n\nThis commit just moves the testing from those three files into the unit\ntest.", "tree": {"sha": "a7f4846473a0601fb69fbdbe01106b57e8e46c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f4846473a0601fb69fbdbe01106b57e8e46c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d359e4385052f012d8d0c2e57a0bcfe54462d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d359e4385052f012d8d0c2e57a0bcfe54462d44", "html_url": "https://github.com/rust-lang/rust/commit/8d359e4385052f012d8d0c2e57a0bcfe54462d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d359e4385052f012d8d0c2e57a0bcfe54462d44/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba", "html_url": "https://github.com/rust-lang/rust/commit/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba"}], "stats": {"total": 150, "additions": 39, "deletions": 111}, "files": [{"sha": "7a7db99b168e661dfcaeae99cb1bbc1a80490381", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d359e4385052f012d8d0c2e57a0bcfe54462d44/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d359e4385052f012d8d0c2e57a0bcfe54462d44/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=8d359e4385052f012d8d0c2e57a0bcfe54462d44", "patch": "@@ -251,3 +251,42 @@ fn test_tuples() {\n     check_round_trip(vec![(1234567isize, 100000000000000u64, 99999999999999i64)]);\n     check_round_trip(vec![(String::new(), \"some string\".to_string())]);\n }\n+\n+#[test]\n+fn test_unit_like_struct() {\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct UnitLikeStruct;\n+\n+    check_round_trip(vec![UnitLikeStruct]);\n+}\n+\n+#[test]\n+fn test_box() {\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct A {\n+        foo: Box<[bool]>,\n+    }\n+\n+    let obj = A { foo: Box::new([true, false]) };\n+    check_round_trip(vec![obj]);\n+}\n+\n+#[test]\n+fn test_cell() {\n+    use std::cell::{Cell, RefCell};\n+\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct A {\n+        baz: isize,\n+    }\n+\n+    #[derive(Encodable, Decodable, PartialEq, Debug)]\n+    struct B {\n+        foo: Cell<bool>,\n+        bar: RefCell<A>,\n+    }\n+\n+    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n+    check_round_trip(vec![obj]);\n+}\n+"}, {"sha": "1c376f59e5174a4d82654d5724de868e39e933e9", "filename": "tests/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba", "patch": "@@ -1,34 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-\n-#[derive(Encodable, Decodable)]\n-struct A {\n-    foo: Box<[bool]>,\n-}\n-\n-fn main() {\n-    let obj = A { foo: Box::new([true, false]) };\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = A::decode(&mut decoder);\n-\n-    assert_eq!(obj.foo, obj2.foo);\n-}"}, {"sha": "844d40f2ecd6a4590500b18a1727df21d8dbbca9", "filename": "tests/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba", "patch": "@@ -1,44 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_imports)]\n-// This briefly tests the capability of `Cell` and `RefCell` to implement the\n-// `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-use std::cell::{Cell, RefCell};\n-\n-#[derive(Encodable, Decodable)]\n-struct A {\n-    baz: isize,\n-}\n-\n-#[derive(Encodable, Decodable)]\n-struct B {\n-    foo: Cell<bool>,\n-    bar: RefCell<A>,\n-}\n-\n-fn main() {\n-    let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = B::decode(&mut decoder);\n-\n-    assert_eq!(obj.foo.get(), obj2.foo.get());\n-    assert_eq!(obj.bar.borrow().baz, obj2.bar.borrow().baz);\n-}"}, {"sha": "309b5c4a03d57c3b3f0e1e95561720dc60129936", "filename": "tests/ui-fulldeps/issue-14021.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba/tests%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba/tests%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fissue-14021.rs?ref=b4ba2f0bf469da7a5fea38f2ef2a9bd069736eba", "patch": "@@ -1,33 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_mut)]\n-#![allow(unused_imports)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_macros;\n-extern crate rustc_serialize;\n-\n-// Necessary to pull in object code as the rest of the rustc crates are shipped only as rmeta\n-// files.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-\n-use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder};\n-\n-#[derive(Encodable, Decodable, PartialEq, Debug)]\n-struct UnitLikeStruct;\n-\n-pub fn main() {\n-    let obj = UnitLikeStruct;\n-\n-    let mut encoder = MemEncoder::new();\n-    obj.encode(&mut encoder);\n-    let data = encoder.finish();\n-\n-    let mut decoder = MemDecoder::new(&data, 0);\n-    let obj2 = UnitLikeStruct::decode(&mut decoder);\n-\n-    assert_eq!(obj, obj2);\n-}"}]}