{"sha": "33573bc0aaec14c55adbe6be314f761f34f8cdd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTczYmMwYWFlYzE0YzU1YWRiZTZiZTMxNGY3NjFmMzRmOGNkZDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-22T17:49:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-23T16:07:28Z"}, "message": "syntax: Clean out obsolete syntax parsing\n\nAll of these features have been obsolete since February 2014, where most have\nbeen obsolete since 2013. There shouldn't be any more need to keep around the\nparser hacks after this length of time.", "tree": {"sha": "2210dc1d34cb3cda9b618d275a063b27733e444d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2210dc1d34cb3cda9b618d275a063b27733e444d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33573bc0aaec14c55adbe6be314f761f34f8cdd0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33573bc0aaec14c55adbe6be314f761f34f8cdd0", "html_url": "https://github.com/rust-lang/rust/commit/33573bc0aaec14c55adbe6be314f761f34f8cdd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33573bc0aaec14c55adbe6be314f761f34f8cdd0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "html_url": "https://github.com/rust-lang/rust/commit/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302"}], "stats": {"total": 345, "additions": 61, "deletions": 284}, "files": [{"sha": "3765f9f450e61addbf979167b97fc41cc64a17d5", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -1094,7 +1094,10 @@ impl<'a> SanePrivacyVisitor<'a> {\n                             check_inherited(m.span, m.vis,\n                                             \"unnecessary visibility\");\n                         }\n-                        ast::Required(..) => {}\n+                        ast::Required(ref m) => {\n+                            check_inherited(m.span, m.vis,\n+                                            \"unnecessary visibility\");\n+                        }\n                     }\n                 }\n             }"}, {"sha": "7ac2db2184bf4be02ec2945c99d191cc74dfc7fb", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -102,7 +102,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader, class: Option<&\n \n             // miscellaneous, no highlighting\n             t::DOT | t::DOTDOT | t::DOTDOTDOT | t::COMMA | t::SEMI |\n-                t::COLON | t::MOD_SEP | t::LARROW | t::DARROW | t::LPAREN |\n+                t::COLON | t::MOD_SEP | t::LARROW | t::LPAREN |\n                 t::RPAREN | t::LBRACKET | t::LBRACE | t::RBRACE => \"\",\n             t::DOLLAR => {\n                 if t::is_ident(&lexer.peek().tok) {"}, {"sha": "d4c01746098ea2faa19b26bae2e88676e3ffa80c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -689,6 +689,7 @@ pub struct TypeMethod {\n     pub explicit_self: ExplicitSelf,\n     pub id: NodeId,\n     pub span: Span,\n+    pub vis: Visibility,\n }\n \n // A trait method is either required (meaning it doesn't have an"}, {"sha": "370bc703b10691ca3f318c69d783ab2b26e5c60a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -305,6 +305,7 @@ pub fn trait_method_to_ty_method(method: &TraitMethod) -> TypeMethod {\n                 explicit_self: m.explicit_self,\n                 id: m.id,\n                 span: m.span,\n+                vis: m.vis,\n             }\n         }\n     }"}, {"sha": "e0561c77d59cd0a45c7438c7e0bc57e1957cdec9", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -543,7 +543,6 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n         MOD_SEP => \"MOD_SEP\",\n         RARROW => \"RARROW\",\n         LARROW => \"LARROW\",\n-        DARROW => \"DARROW\",\n         FAT_ARROW => \"FAT_ARROW\",\n         LPAREN => \"LPAREN\",\n         RPAREN => \"RPAREN\","}, {"sha": "9813e12de01ca4ae4f7eb76987400536d6a35ac9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -648,6 +648,7 @@ pub fn noop_fold_type_method<T: Folder>(m: &TypeMethod, fld: &mut T) -> TypeMeth\n         generics: fold_generics(&m.generics, fld),\n         explicit_self: fld.fold_explicit_self(&m.explicit_self),\n         span: fld.new_span(m.span),\n+        vis: m.vis,\n     }\n }\n "}, {"sha": "317ba977c56b5e9cd69f44c18ebc555ed1e838e2", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -790,10 +790,7 @@ fn next_token_inner(rdr: &mut StringReader) -> token::Token {\n           '<' => { return binop(rdr, token::SHL); }\n           '-' => {\n             bump(rdr);\n-            match rdr.curr.unwrap_or('\\x00') {\n-              '>' => { bump(rdr); return token::DARROW; }\n-              _ => { return token::LARROW; }\n-            }\n+            return token::LARROW;\n           }\n           _ => { return token::LT; }\n         }"}, {"sha": "130bbae5b797c9624cf5a86959fd51119b288086", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -25,21 +25,6 @@ use parse::token;\n /// The specific types of unsupported syntax\n #[deriving(Eq, TotalEq, Hash)]\n pub enum ObsoleteSyntax {\n-    ObsoleteSwap,\n-    ObsoleteUnsafeBlock,\n-    ObsoleteBareFnType,\n-    ObsoleteMultipleLocalDecl,\n-    ObsoleteUnsafeExternFn,\n-    ObsoleteTraitFuncVisibility,\n-    ObsoleteConstPointer,\n-    ObsoleteLoopAsContinue,\n-    ObsoleteEnumWildcard,\n-    ObsoleteStructWildcard,\n-    ObsoleteVecDotDotWildcard,\n-    ObsoleteMultipleImport,\n-    ObsoleteManagedPattern,\n-    ObsoleteManagedString,\n-    ObsoleteManagedVec,\n     ObsoleteOwnedType,\n     ObsoleteOwnedExpr,\n     ObsoleteOwnedPattern,\n@@ -64,71 +49,6 @@ impl<'a> ParserObsoleteMethods for Parser<'a> {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {\n-            ObsoleteSwap => (\n-                \"swap\",\n-                \"use std::mem::{swap, replace} instead\"\n-            ),\n-            ObsoleteUnsafeBlock => (\n-                \"non-standalone unsafe block\",\n-                \"use an inner `unsafe { ... }` block instead\"\n-            ),\n-            ObsoleteBareFnType => (\n-                \"bare function type\",\n-                \"use `|A| -> B` or `extern fn(A) -> B` instead\"\n-            ),\n-            ObsoleteMultipleLocalDecl => (\n-                \"declaration of multiple locals at once\",\n-                \"instead of e.g. `let a = 1, b = 2`, write \\\n-                 `let (a, b) = (1, 2)`.\"\n-            ),\n-            ObsoleteUnsafeExternFn => (\n-                \"unsafe external function\",\n-                \"external functions are always unsafe; remove the `unsafe` \\\n-                 keyword\"\n-            ),\n-            ObsoleteTraitFuncVisibility => (\n-                \"visibility not necessary\",\n-                \"trait functions inherit the visibility of the trait itself\"\n-            ),\n-            ObsoleteConstPointer => (\n-                \"const pointer\",\n-                \"instead of `&const Foo` or `@const Foo`, write `&Foo` or \\\n-                 `@Foo`\"\n-            ),\n-            ObsoleteLoopAsContinue => (\n-                \"`loop` instead of `continue`\",\n-                \"`loop` is now only used for loops and `continue` is used for \\\n-                 skipping iterations\"\n-            ),\n-            ObsoleteEnumWildcard => (\n-                \"enum wildcard\",\n-                \"use `..` instead of `*` for matching all enum fields\"\n-            ),\n-            ObsoleteStructWildcard => (\n-                \"struct wildcard\",\n-                \"use `..` instead of `_` for matching trailing struct fields\"\n-            ),\n-            ObsoleteVecDotDotWildcard => (\n-                \"vec slice wildcard\",\n-                \"use `..` instead of `.._` for matching slices\"\n-            ),\n-            ObsoleteMultipleImport => (\n-                \"multiple imports\",\n-                \"only one import is allowed per `use` statement\"\n-            ),\n-            ObsoleteManagedPattern => (\n-                \"managed pointer pattern\",\n-                \"use a nested `match` expression instead of a managed box \\\n-                 pattern\"\n-            ),\n-            ObsoleteManagedString => (\n-                \"managed string\",\n-                \"use `Rc<StrBuf>` instead of a managed string\"\n-            ),\n-            ObsoleteManagedVec => (\n-                \"managed vector\",\n-                \"use `Rc<~[T]>` instead of a managed vector\"\n-            ),\n             ObsoleteOwnedType => (\n                 \"`~` notation for owned pointers\",\n                 \"use `Box<T>` in `std::owned` instead\""}, {"sha": "30a6c6c251604951d45b0e044add487ccf728b7f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 127, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -1129,11 +1129,10 @@ impl<'a> Parser<'a> {\n             let attrs = p.parse_outer_attributes();\n             let lo = p.span.lo;\n \n-            let vis_span = p.span;\n-            let vis = p.parse_visibility();\n-            let style = p.parse_fn_style();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n+            let vis = p.parse_visibility();\n+            let style = p.parse_fn_style();\n             let ident = p.parse_ident();\n \n             let generics = p.parse_generics();\n@@ -1149,11 +1148,6 @@ impl<'a> Parser<'a> {\n               token::SEMI => {\n                 p.bump();\n                 debug!(\"parse_trait_methods(): parsing required method\");\n-                // NB: at the moment, visibility annotations on required\n-                // methods are ignored; this could change.\n-                if vis != ast::Inherited {\n-                    p.obsolete(vis_span, ObsoleteTraitFuncVisibility);\n-                }\n                 Required(TypeMethod {\n                     ident: ident,\n                     attrs: attrs,\n@@ -1162,7 +1156,8 @@ impl<'a> Parser<'a> {\n                     generics: generics,\n                     explicit_self: explicit_self,\n                     id: ast::DUMMY_NODE_ID,\n-                    span: mk_sp(lo, hi)\n+                    span: mk_sp(lo, hi),\n+                    vis: vis,\n                 })\n               }\n               token::LBRACE => {\n@@ -1682,9 +1677,6 @@ impl<'a> Parser<'a> {\n     pub fn parse_mutability(&mut self) -> Mutability {\n         if self.eat_keyword(keywords::Mut) {\n             MutMutable\n-        } else if self.eat_keyword(keywords::Const) {\n-            self.obsolete(self.last_span, ObsoleteConstPointer);\n-            MutImmutable\n         } else {\n             MutImmutable\n         }\n@@ -2309,20 +2301,7 @@ impl<'a> Parser<'a> {\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n             // HACK: pretending @[] is a (removed) @-vec\n-            ex = match e.node {\n-              ExprVec(..) |\n-              ExprRepeat(..) => {\n-                  self.obsolete(e.span, ObsoleteManagedVec);\n-                  // the above error means that no-one will know we're\n-                  // lying... hopefully.\n-                  ExprVstore(e, ExprVstoreUniq)\n-              }\n-              ExprLit(lit) if lit_is_str(lit) => {\n-                  self.obsolete(self.last_span, ObsoleteManagedString);\n-                  ExprVstore(e, ExprVstoreUniq)\n-              }\n-              _ => self.mk_unary(UnBox, e)\n-            };\n+            ex = self.mk_unary(UnBox, e);\n           }\n           token::TILDE => {\n             self.bump();\n@@ -2460,13 +2439,6 @@ impl<'a> Parser<'a> {\n               let assign_op = self.mk_assign_op(aop, lhs, rhs);\n               self.mk_expr(lo, rhs.span.hi, assign_op)\n           }\n-          token::DARROW => {\n-            self.obsolete(self.span, ObsoleteSwap);\n-            self.bump();\n-            // Ignore what we get, this is an error anyway\n-            self.parse_expr();\n-            self.mk_expr(lo, self.span.hi, ExprBreak(None))\n-          }\n           _ => {\n               lhs\n           }\n@@ -2577,37 +2549,10 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_loop_expr(&mut self, opt_ident: Option<ast::Ident>) -> @Expr {\n-        // loop headers look like 'loop {' or 'loop unsafe {'\n-        let is_loop_header =\n-            self.token == token::LBRACE\n-            || (is_ident(&self.token)\n-                && self.look_ahead(1, |t| *t == token::LBRACE));\n-\n-        if is_loop_header {\n-            // This is a loop body\n-            let lo = self.last_span.lo;\n-            let body = self.parse_block();\n-            let hi = body.span.hi;\n-            return self.mk_expr(lo, hi, ExprLoop(body, opt_ident));\n-        } else {\n-            // This is an obsolete 'continue' expression\n-            if opt_ident.is_some() {\n-                self.span_err(self.last_span,\n-                              \"a label may not be used with a `loop` expression\");\n-            }\n-\n-            self.obsolete(self.last_span, ObsoleteLoopAsContinue);\n-            let lo = self.span.lo;\n-            let ex = if Parser::token_is_lifetime(&self.token) {\n-                let lifetime = self.get_lifetime();\n-                self.bump();\n-                ExprAgain(Some(lifetime))\n-            } else {\n-                ExprAgain(None)\n-            };\n-            let hi = self.span.hi;\n-            return self.mk_expr(lo, hi, ex);\n-        }\n+        let lo = self.last_span.lo;\n+        let body = self.parse_block();\n+        let hi = body.span.hi;\n+        self.mk_expr(lo, hi, ExprLoop(body, opt_ident))\n     }\n \n     // For distingishing between struct literals and blocks\n@@ -2721,14 +2666,6 @@ impl<'a> Parser<'a> {\n                 } else {\n                     let subpat = self.parse_pat();\n                     match *subpat {\n-                        ast::Pat { id, node: PatWild, span } => {\n-                            self.obsolete(self.span, ObsoleteVecDotDotWildcard);\n-                            slice = Some(@ast::Pat {\n-                                id: id,\n-                                node: PatWildMulti,\n-                                span: span\n-                            })\n-                        },\n                         ast::Pat { node: PatIdent(_, _, _), .. } => {\n                             slice = Some(subpat);\n                         }\n@@ -2764,11 +2701,7 @@ impl<'a> Parser<'a> {\n                 if self.token == token::RBRACE { break }\n             }\n \n-            etc = self.token == token::UNDERSCORE || self.token == token::DOTDOT;\n-            if self.token == token::UNDERSCORE {\n-                self.obsolete(self.span, ObsoleteStructWildcard);\n-            }\n-            if etc {\n+            if self.token == token::DOTDOT {\n                 self.bump();\n                 if self.token != token::RBRACE {\n                     let token_str = self.this_token_to_str();\n@@ -2833,18 +2766,6 @@ impl<'a> Parser<'a> {\n                 span: mk_sp(lo, hi)\n             }\n           }\n-          // parse @pat\n-          token::AT => {\n-            self.bump();\n-            let sub = self.parse_pat();\n-            self.obsolete(self.span, ObsoleteManagedPattern);\n-            let hi = self.last_span.hi;\n-            return @ast::Pat {\n-                id: ast::DUMMY_NODE_ID,\n-                node: PatUniq(sub),\n-                span: mk_sp(lo, hi)\n-            }\n-          }\n           token::TILDE => {\n             // parse ~pat\n             self.bump();\n@@ -3001,24 +2922,15 @@ impl<'a> Parser<'a> {\n                         let mut args: Vec<@Pat> = Vec::new();\n                         match self.token {\n                           token::LPAREN => {\n-                            let is_star = self.look_ahead(1, |t| {\n-                                match *t {\n-                                    token::BINOP(token::STAR) => true,\n-                                    _ => false,\n-                                }\n-                            });\n                             let is_dotdot = self.look_ahead(1, |t| {\n                                 match *t {\n                                     token::DOTDOT => true,\n                                     _ => false,\n                                 }\n                             });\n-                            if is_star | is_dotdot {\n+                            if is_dotdot {\n                                 // This is a \"top constructor only\" pat\n                                 self.bump();\n-                                if is_star {\n-                                    self.obsolete(self.span, ObsoleteEnumWildcard);\n-                                }\n                                 self.bump();\n                                 self.expect(&token::RPAREN);\n                                 pat = PatEnum(enum_path, None);\n@@ -3115,10 +3027,6 @@ impl<'a> Parser<'a> {\n     fn parse_let(&mut self) -> @Decl {\n         let lo = self.span.lo;\n         let local = self.parse_local();\n-        while self.eat(&token::COMMA) {\n-            let _ = self.parse_local();\n-            self.obsolete(self.span, ObsoleteMultipleLocalDecl);\n-        }\n         return @spanned(lo, self.last_span.hi, DeclLocal(local));\n     }\n \n@@ -3265,9 +3173,6 @@ impl<'a> Parser<'a> {\n         maybe_whole!(no_clone self, NtBlock);\n \n         let lo = self.span.lo;\n-        if self.eat_keyword(keywords::Unsafe) {\n-            self.obsolete(self.span, ObsoleteUnsafeBlock);\n-        }\n         self.expect(&token::LBRACE);\n \n         return self.parse_block_tail_(lo, DefaultBlock, Vec::new());\n@@ -3280,9 +3185,6 @@ impl<'a> Parser<'a> {\n         maybe_whole!(pair_empty self, NtBlock);\n \n         let lo = self.span.lo;\n-        if self.eat_keyword(keywords::Unsafe) {\n-            self.obsolete(self.span, ObsoleteUnsafeBlock);\n-        }\n         self.expect(&token::LBRACE);\n         let (inner, next) = self.parse_inner_attrs_and_next();\n \n@@ -4316,12 +4218,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_fn(&mut self, vis: ast::Visibility,\n                              attrs: Vec<Attribute> ) -> @ForeignItem {\n         let lo = self.span.lo;\n-\n-        // Parse obsolete purity.\n-        let fn_style = self.parse_fn_style();\n-        if fn_style != NormalFn {\n-            self.obsolete(self.last_span, ObsoleteUnsafeExternFn);\n-        }\n+        self.expect_keyword(keywords::Fn);\n \n         let (ident, generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl(true);\n@@ -4898,7 +4795,7 @@ impl<'a> Parser<'a> {\n \n     // parse, e.g., \"use a::b::{z,y}\"\n     fn parse_use(&mut self) -> ViewItem_ {\n-        return ViewItemUse(self.parse_view_paths());\n+        return ViewItemUse(self.parse_view_path());\n     }\n \n \n@@ -5029,17 +4926,6 @@ impl<'a> Parser<'a> {\n                         ViewPathSimple(last, path, ast::DUMMY_NODE_ID));\n     }\n \n-    // matches view_paths = view_path | view_path , view_paths\n-    fn parse_view_paths(&mut self) -> @ViewPath {\n-        let vp = self.parse_view_path();\n-        while self.token == token::COMMA {\n-            self.bump();\n-            self.obsolete(self.last_span, ObsoleteMultipleImport);\n-            let _ = self.parse_view_path();\n-        }\n-        return vp;\n-    }\n-\n     // Parses a sequence of items. Stops when it finds program\n     // text that can't be parsed as an item\n     // - mod_items uses extern_mod_allowed = true"}, {"sha": "17ce03ba213a2f5b3f4e3ba6d47f2f6dc8d4feef", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -67,7 +67,6 @@ pub enum Token {\n     MOD_SEP,\n     RARROW,\n     LARROW,\n-    DARROW,\n     FAT_ARROW,\n     LPAREN,\n     RPAREN,\n@@ -183,7 +182,6 @@ pub fn to_str(t: &Token) -> StrBuf {\n       MOD_SEP => \"::\".to_strbuf(),\n       RARROW => \"->\".to_strbuf(),\n       LARROW => \"<-\".to_strbuf(),\n-      DARROW => \"<->\".to_strbuf(),\n       FAT_ARROW => \"=>\".to_strbuf(),\n       LPAREN => \"(\".to_strbuf(),\n       RPAREN => \")\".to_strbuf(),\n@@ -449,45 +447,45 @@ declare_special_idents_and_keywords! {\n         'strict:\n         (9,                          As,         \"as\");\n         (10,                         Break,      \"break\");\n-        (11,                         Const,      \"const\");\n-        (12,                         Crate,      \"crate\");\n-        (13,                         Else,       \"else\");\n-        (14,                         Enum,       \"enum\");\n-        (15,                         Extern,     \"extern\");\n-        (16,                         False,      \"false\");\n-        (17,                         Fn,         \"fn\");\n-        (18,                         For,        \"for\");\n-        (19,                         If,         \"if\");\n-        (20,                         Impl,       \"impl\");\n-        (21,                         In,         \"in\");\n-        (22,                         Let,        \"let\");\n-        (23,                         Loop,       \"loop\");\n-        (24,                         Match,      \"match\");\n-        (25,                         Mod,        \"mod\");\n-        (26,                         Mut,        \"mut\");\n-        (27,                         Once,       \"once\");\n-        (28,                         Pub,        \"pub\");\n-        (29,                         Ref,        \"ref\");\n-        (30,                         Return,     \"return\");\n+        (11,                         Crate,      \"crate\");\n+        (12,                         Else,       \"else\");\n+        (13,                         Enum,       \"enum\");\n+        (14,                         Extern,     \"extern\");\n+        (15,                         False,      \"false\");\n+        (16,                         Fn,         \"fn\");\n+        (17,                         For,        \"for\");\n+        (18,                         If,         \"if\");\n+        (19,                         Impl,       \"impl\");\n+        (20,                         In,         \"in\");\n+        (21,                         Let,        \"let\");\n+        (22,                         Loop,       \"loop\");\n+        (23,                         Match,      \"match\");\n+        (24,                         Mod,        \"mod\");\n+        (25,                         Mut,        \"mut\");\n+        (26,                         Once,       \"once\");\n+        (27,                         Pub,        \"pub\");\n+        (28,                         Ref,        \"ref\");\n+        (29,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME,   Self,       \"self\");\n-        (31,                         Struct,     \"struct\");\n-        (32,                         Super,      \"super\");\n-        (33,                         True,       \"true\");\n-        (34,                         Trait,      \"trait\");\n-        (35,                         Type,       \"type\");\n-        (36,                         Unsafe,     \"unsafe\");\n-        (37,                         Use,        \"use\");\n-        (38,                         Virtual,    \"virtual\");\n-        (39,                         While,      \"while\");\n-        (40,                         Continue,   \"continue\");\n-        (41,                         Proc,       \"proc\");\n-        (42,                         Box,        \"box\");\n+        (30,                         Struct,     \"struct\");\n+        (31,                         Super,      \"super\");\n+        (32,                         True,       \"true\");\n+        (33,                         Trait,      \"trait\");\n+        (34,                         Type,       \"type\");\n+        (35,                         Unsafe,     \"unsafe\");\n+        (36,                         Use,        \"use\");\n+        (37,                         Virtual,    \"virtual\");\n+        (38,                         While,      \"while\");\n+        (39,                         Continue,   \"continue\");\n+        (40,                         Proc,       \"proc\");\n+        (41,                         Box,        \"box\");\n \n         'reserved:\n-        (43,                         Alignof,    \"alignof\");\n-        (44,                         Be,         \"be\");\n+        (42,                         Alignof,    \"alignof\");\n+        (43,                         Be,         \"be\");\n+        (44,                         Const,      \"const\");\n         (45,                         Offsetof,   \"offsetof\");\n         (46,                         Priv,       \"priv\");\n         (47,                         Pure,       \"pure\");"}, {"sha": "27540cc5bbf945baecb2d3409d9d49baa7700337", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -52,7 +52,7 @@ impl Noise2DContext {\n         for (i, x) in permutations.mut_iter().enumerate() {\n             *x = i as i32;\n         }\n-        rng.shuffle_mut(permutations);\n+        rng.shuffle(permutations);\n \n         Noise2DContext { rgradients: rgradients, permutations: permutations }\n     }"}, {"sha": "e4273fdfeff96c4dda966488e2df453b50512eb0", "filename": "src/test/compile-fail/loop-as-continue.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Ftest%2Fcompile-fail%2Floop-as-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Ftest%2Fcompile-fail%2Floop-as-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-as-continue.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    loop {\n-        loop //~ ERROR: `loop` instead of `continue`\n-    }\n-}"}, {"sha": "9fe5e2031bbf56e67feabd4f0ccd1d3096692a1a", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait A {\n-    pub fn foo(); //~ ERROR: visibility not necessary\n-    pub fn bar(); //~ ERROR: visibility not necessary\n-}\n-\n-fn main() { }"}, {"sha": "7125a66b294cee888ea7dbb62cb5fd12949db262", "filename": "src/test/compile-fail/useless-priv2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33573bc0aaec14c55adbe6be314f761f34f8cdd0/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs?ref=33573bc0aaec14c55adbe6be314f761f34f8cdd0", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n pub trait E {\n-    pub fn foo();               //~ ERROR: obsolete syntax\n+    pub fn foo();               //~ ERROR: unnecessary visibility\n }\n-trait F { pub fn foo(); }       //~ ERROR: obsolete syntax\n+trait F { pub fn foo(); }       //~ ERROR: unnecessary visibility\n+\n+fn main() {}"}]}