{"sha": "a30b28e8932f8eb2931d1a41bc9271961e90f1cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMGIyOGU4OTMyZjhlYjI5MzFkMWE0MWJjOTI3MTk2MWU5MGYxY2I=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-10T09:21:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-10T11:31:57Z"}, "message": "try referencing outer params", "tree": {"sha": "dd65e02cc400141707ca6eb96c9b8be775570331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd65e02cc400141707ca6eb96c9b8be775570331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a30b28e8932f8eb2931d1a41bc9271961e90f1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a30b28e8932f8eb2931d1a41bc9271961e90f1cb", "html_url": "https://github.com/rust-lang/rust/commit/a30b28e8932f8eb2931d1a41bc9271961e90f1cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a30b28e8932f8eb2931d1a41bc9271961e90f1cb/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a3fe632432b74af8ef04b72eada3b7a6577d4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a3fe632432b74af8ef04b72eada3b7a6577d4d", "html_url": "https://github.com/rust-lang/rust/commit/19a3fe632432b74af8ef04b72eada3b7a6577d4d"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "7dfe250b78e00cd663f361cf3c2753214e8fc122", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/a30b28e8932f8eb2931d1a41bc9271961e90f1cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a30b28e8932f8eb2931d1a41bc9271961e90f1cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=a30b28e8932f8eb2931d1a41bc9271961e90f1cb", "patch": "@@ -0,0 +1,203 @@\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:14:23\n+   |\n+LL |     let _: [u8; foo::<T>()];\n+   |                       ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n+   |\n+LL |     let _: [u8; bar::<N>()];\n+   |                       ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:25:23\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:30:24\n+   |\n+LL |     let _: Foo<{ foo::<T>() }>;\n+   |                        ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:31:24\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:36:27\n+   |\n+LL |     let _ = Foo::<{ foo::<T>() }>;\n+   |                           ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:37:27\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                           ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n+   |\n+LL |     let _: [u8; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:17:23\n+   |\n+LL |     let _: [u8; baz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n+   |\n+LL |     let _: [u8; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:19:23\n+   |\n+LL |     let _: [u8; baz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n+   |\n+LL |     let _ = [0; baz::<'a>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:29:23\n+   |\n+LL |     let _ = [0; baz::<'b>(&())];\n+   |                       ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:32:24\n+   |\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n+   |\n+LL |     let _: Foo<{ baz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:34:24\n+   |\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n+   |\n+LL |     let _: Foo<{ baz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:38:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:39:27\n+   |\n+LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:40:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-arg-in-const-arg.rs:41:27\n+   |\n+LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to 23 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9927538ef50c6209e023d5a4e5fbbc719602ea2f", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a30b28e8932f8eb2931d1a41bc9271961e90f1cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a30b28e8932f8eb2931d1a41bc9271961e90f1cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=a30b28e8932f8eb2931d1a41bc9271961e90f1cb", "patch": "@@ -0,0 +1,44 @@\n+// revisions: min\n+// FIXME(const_generics): This test currently causes an ICE because\n+// we don't yet correctly deal with lifetimes, reenable this test once\n+// this is fixed.\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+const fn foo<T>() -> usize { std::mem::size_of::<T>() }\n+const fn bar<const N: usize>() -> usize { N }\n+const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+const fn baz<'a>(_: &'a ()) -> usize where &'a (): Sized { 13 }\n+\n+struct Foo<const N: usize>;\n+fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n+    let _: [u8; foo::<T>()]; //~ ERROR generic parameters may not\n+    let _: [u8; bar::<N>()]; //~ ERROR generic parameters may not\n+    let _: [u8; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n+\n+    // NOTE: This can be a future compat warning instead of an error,\n+    // so we stop compilation before emitting this error in this test.\n+    let _ = [0; foo::<T>()];\n+\n+    let _ = [0; bar::<N>()]; //~ ERROR generic parameters may not\n+    let _ = [0; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: Foo<{ foo::<T>() }>; //~ ERROR generic parameters may not\n+    let _: Foo<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+    let _: Foo<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ foo::<T>() }>; //~ ERROR generic parameters may not\n+    let _ = Foo::<{ bar::<N>() }>; //~ ERROR generic parameters may not\n+    let _ = Foo::<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+}\n+\n+fn main() {}"}]}