{"sha": "a871fedf98ee004c3d7b85ab5ce5f28a0347263c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzFmZWRmOThlZTAwNGMzZDdiODVhYjVjZTVmMjhhMDM0NzI2M2M=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-09T22:24:48Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-15T17:21:15Z"}, "message": "Reduce the amount of interning and `layout_of` calls in const eval.", "tree": {"sha": "9e6148a6ba41039bf4b995b4672fbe745e9ab803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6148a6ba41039bf4b995b4672fbe745e9ab803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a871fedf98ee004c3d7b85ab5ce5f28a0347263c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a871fedf98ee004c3d7b85ab5ce5f28a0347263c", "html_url": "https://github.com/rust-lang/rust/commit/a871fedf98ee004c3d7b85ab5ce5f28a0347263c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a871fedf98ee004c3d7b85ab5ce5f28a0347263c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "html_url": "https://github.com/rust-lang/rust/commit/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "ce47c2e62826b0d260a443a510c113eb9a3f52e9", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a871fedf98ee004c3d7b85ab5ce5f28a0347263c/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871fedf98ee004c3d7b85ab5ce5f28a0347263c/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=a871fedf98ee004c3d7b85ab5ce5f28a0347263c", "patch": "@@ -60,6 +60,18 @@ impl<'tcx> ConstValue<'tcx> {\n         self.try_to_scalar()?.to_bits(size).ok()\n     }\n \n+    pub fn try_to_bool(&self) -> Option<bool> {\n+        match self.try_to_bits(Size::from_bytes(1))? {\n+            0 => Some(false),\n+            1 => Some(true),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn try_to_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n+        Some(self.try_to_bits(tcx.data_layout.pointer_size)? as u64)\n+    }\n+\n     pub fn try_to_bits_for_ty(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "b921ad665147a101178c9d9dbe7aedc07547b576", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a871fedf98ee004c3d7b85ab5ce5f28a0347263c/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a871fedf98ee004c3d7b85ab5ce5f28a0347263c/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=a871fedf98ee004c3d7b85ab5ce5f28a0347263c", "patch": "@@ -2340,14 +2340,41 @@ impl<'tcx> Const<'tcx> {\n         assert_eq!(self.ty, ty);\n         let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n         // if `ty` does not depend on generic parameters, use an empty param_env\n-        self.eval(tcx, param_env).val.try_to_bits(size)\n+        self.val.eval(tcx, param_env).try_to_bits(size)\n     }\n \n     #[inline]\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n-        if let ConstKind::Unevaluated(def, substs, promoted) = self.val {\n+        if let Some(val) = self.val.try_eval(tcx, param_env) {\n+            match val {\n+                Ok(val) => Const::from_value(tcx, val, self.ty),\n+                Err(ErrorReported) => tcx.const_error(self.ty),\n+            }\n+        } else {\n+            self\n+        }\n+    }\n+}\n+\n+impl<'tcx> ConstKind<'tcx> {\n+    #[inline]\n+    /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n+    /// unevaluated constant.\n+    pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Self {\n+        self.try_eval(tcx, param_env).and_then(Result::ok).map(ConstKind::Value).unwrap_or(self)\n+    }\n+\n+    #[inline]\n+    /// Tries to evaluate the constant if it is `Unevaluated`. If that isn't possible or necessary\n+    // return None\n+    pub fn try_eval(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+    ) -> Option<Result<ConstValue<'tcx>, ErrorReported>> {\n+        if let ConstKind::Unevaluated(def, substs, promoted) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n@@ -2378,27 +2405,25 @@ impl<'tcx> Const<'tcx> {\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),\n                 // can leak through `val` into the const we return.\n-                Ok(val) => Const::from_value(tcx, val, self.ty),\n-                Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n-                Err(ErrorHandled::Reported(ErrorReported)) => tcx.const_error(self.ty),\n+                Ok(val) => Some(Ok(val)),\n+                Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => None,\n+                Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n             }\n         } else {\n-            self\n+            None\n         }\n     }\n+}\n \n+impl<'tcx> Const<'tcx> {\n     #[inline]\n     pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n-        self.try_eval_bits(tcx, param_env, tcx.types.bool).and_then(|v| match v {\n-            0 => Some(false),\n-            1 => Some(true),\n-            _ => None,\n-        })\n+        self.val.eval(tcx, param_env).try_to_bool()\n     }\n \n     #[inline]\n     pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n-        self.try_eval_bits(tcx, param_env, tcx.types.usize).map(|v| v as u64)\n+        self.val.eval(tcx, param_env).try_to_usize(tcx)\n     }\n \n     #[inline]\n@@ -2411,7 +2436,8 @@ impl<'tcx> Const<'tcx> {\n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid `usize`.\n     pub fn eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n-        self.eval_bits(tcx, param_env, tcx.types.usize) as u64\n+        self.try_eval_usize(tcx, param_env)\n+            .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n }\n \n@@ -2448,13 +2474,28 @@ static_assert_size!(ConstKind<'_>, 40);\n \n impl<'tcx> ConstKind<'tcx> {\n     #[inline]\n-    pub fn try_to_scalar(&self) -> Option<Scalar> {\n-        if let ConstKind::Value(val) = self { val.try_to_scalar() } else { None }\n+    pub fn try_to_value(self) -> Option<ConstValue<'tcx>> {\n+        if let ConstKind::Value(val) = self { Some(val) } else { None }\n+    }\n+\n+    #[inline]\n+    pub fn try_to_scalar(self) -> Option<Scalar> {\n+        self.try_to_value()?.try_to_scalar()\n+    }\n+\n+    #[inline]\n+    pub fn try_to_bits(self, size: Size) -> Option<u128> {\n+        self.try_to_value()?.try_to_bits(size)\n+    }\n+\n+    #[inline]\n+    pub fn try_to_bool(self) -> Option<bool> {\n+        self.try_to_value()?.try_to_bool()\n     }\n \n     #[inline]\n-    pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n-        if let ConstKind::Value(val) = self { val.try_to_bits(size) } else { None }\n+    pub fn try_to_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n+        self.try_to_value()?.try_to_usize(tcx)\n     }\n }\n "}]}