{"sha": "f651bea822c7c1b1dcc317e089709804a97e2236", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NTFiZWE4MjJjN2MxYjFkY2MzMTdlMDg5NzA5ODA0YTk3ZTIyMzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:10:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:35Z"}, "message": "std: Reorganize thread::local a bit\n\nMake the structure more amenable to what rustdoc is expecting to ensure that\neverything renders all nice and pretty in the output.\n\nCloses #23705\nCloses #23910", "tree": {"sha": "fdbf2a5c7347baeba9f63bbf14d9a8e2777dbd03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdbf2a5c7347baeba9f63bbf14d9a8e2777dbd03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f651bea822c7c1b1dcc317e089709804a97e2236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f651bea822c7c1b1dcc317e089709804a97e2236", "html_url": "https://github.com/rust-lang/rust/commit/f651bea822c7c1b1dcc317e089709804a97e2236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f651bea822c7c1b1dcc317e089709804a97e2236/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d0365aacbf9c2729d78032e88138d07e5f15bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d0365aacbf9c2729d78032e88138d07e5f15bb", "html_url": "https://github.com/rust-lang/rust/commit/61d0365aacbf9c2729d78032e88138d07e5f15bb"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "f5a1093be2b1e9ee83f8cfcb3e960c99e310396c", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f651bea822c7c1b1dcc317e089709804a97e2236/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f651bea822c7c1b1dcc317e089709804a97e2236/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=f651bea822c7c1b1dcc317e089709804a97e2236", "patch": "@@ -95,7 +95,7 @@ macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n         static $name: ::std::thread::LocalKey<$t> = {\n             use std::cell::UnsafeCell as __UnsafeCell;\n-            use std::thread::__local::__impl::KeyInner as __KeyInner;\n+            use std::thread::__local::KeyInner as __KeyInner;\n             use std::option::Option as __Option;\n             use std::option::Option::None as __None;\n \n@@ -112,7 +112,7 @@ macro_rules! thread_local {\n     (pub static $name:ident: $t:ty = $init:expr) => (\n         pub static $name: ::std::thread::LocalKey<$t> = {\n             use std::cell::UnsafeCell as __UnsafeCell;\n-            use std::thread::__local::__impl::KeyInner as __KeyInner;\n+            use std::thread::__local::KeyInner as __KeyInner;\n             use std::option::Option as __Option;\n             use std::option::Option::None as __None;\n \n@@ -156,20 +156,20 @@ macro_rules! __thread_local_inner {\n         #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n                        not(target_arch = \"aarch64\")),\n                    thread_local)]\n-        static $name: ::std::thread::__local::__impl::KeyInner<$t> =\n+        static $name: ::std::thread::__local::KeyInner<$t> =\n             __thread_local_inner!($init, $t);\n     );\n     (pub static $name:ident: $t:ty = $init:expr) => (\n         #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n                        not(target_arch = \"aarch64\")),\n                    thread_local)]\n-        pub static $name: ::std::thread::__local::__impl::KeyInner<$t> =\n+        pub static $name: ::std::thread::__local::KeyInner<$t> =\n             __thread_local_inner!($init, $t);\n     );\n     ($init:expr, $t:ty) => ({\n         #[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n-        const _INIT: ::std::thread::__local::__impl::KeyInner<$t> = {\n-            ::std::thread::__local::__impl::KeyInner {\n+        const _INIT: ::std::thread::__local::KeyInner<$t> = {\n+            ::std::thread::__local::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: $init },\n                 dtor_registered: ::std::cell::UnsafeCell { value: false },\n                 dtor_running: ::std::cell::UnsafeCell { value: false },\n@@ -178,13 +178,13 @@ macro_rules! __thread_local_inner {\n \n         #[allow(trivial_casts)]\n         #[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n-        const _INIT: ::std::thread::__local::__impl::KeyInner<$t> = {\n-            ::std::thread::__local::__impl::KeyInner {\n+        const _INIT: ::std::thread::__local::KeyInner<$t> = {\n+            ::std::thread::__local::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: $init },\n-                os: ::std::thread::__local::__impl::OsStaticKey {\n-                    inner: ::std::thread::__local::__impl::OS_INIT_INNER,\n+                os: ::std::thread::__local::OsStaticKey {\n+                    inner: ::std::thread::__local::OS_INIT_INNER,\n                     dtor: ::std::option::Option::Some(\n-                        ::std::thread::__local::__impl::destroy_value::<$t>\n+                        ::std::thread::__local::destroy_value::<$t>\n                     ),\n                 },\n             }"}, {"sha": "10c79671c0c9433dfa39632604fe494c50086007", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f651bea822c7c1b1dcc317e089709804a97e2236/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f651bea822c7c1b1dcc317e089709804a97e2236/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=f651bea822c7c1b1dcc317e089709804a97e2236", "patch": "@@ -168,14 +168,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::__local::{LocalKey, LocalKeyState};\n-\n-#[unstable(feature = \"scoped_tls\",\n-            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n-                      stabilizing its interface\")]\n-pub use self::__scoped::ScopedKey;\n-\n use prelude::v1::*;\n \n use any::Any;\n@@ -194,13 +186,19 @@ use time::Duration;\n // Thread-local storage\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[macro_use]\n-#[doc(hidden)]\n-#[path = \"local.rs\"] pub mod __local;\n+#[macro_use] mod local;\n+#[macro_use] mod scoped;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use self::local::{LocalKey, LocalKeyState};\n+\n+#[unstable(feature = \"scoped_tls\",\n+            reason = \"scoped TLS has yet to have wide enough use to fully \\\n+                      consider stabilizing its interface\")]\n+pub use self::scoped::ScopedKey;\n \n-#[macro_use]\n-#[doc(hidden)]\n-#[path = \"scoped.rs\"] pub mod __scoped;\n+#[doc(hidden)] pub use self::local::__impl as __local;\n+#[doc(hidden)] pub use self::scoped::__impl as __scoped;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Builder"}, {"sha": "fa980954c2f8c1ee19a63efdbbfc5dffdd322c91", "filename": "src/libstd/thread/scoped.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f651bea822c7c1b1dcc317e089709804a97e2236/src%2Flibstd%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f651bea822c7c1b1dcc317e089709804a97e2236/src%2Flibstd%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped.rs?ref=f651bea822c7c1b1dcc317e089709804a97e2236", "patch": "@@ -110,7 +110,7 @@ macro_rules! __scoped_thread_local_inner {\n                       target_os = \"openbsd\",\n                       target_arch = \"aarch64\")))]\n         const _INIT: __Key<$t> = __Key {\n-            inner: ::std::thread::__scoped::__impl::KeyInner {\n+            inner: ::std::thread::__scoped::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: 0 as *mut _ },\n             }\n         };\n@@ -121,8 +121,8 @@ macro_rules! __scoped_thread_local_inner {\n                   target_os = \"openbsd\",\n                   target_arch = \"aarch64\"))]\n         const _INIT: __Key<$t> = __Key {\n-            inner: ::std::thread::__scoped::__impl::KeyInner {\n-                inner: ::std::thread::__scoped::__impl::OS_INIT,\n+            inner: ::std::thread::__scoped::KeyInner {\n+                inner: ::std::thread::__scoped::OS_INIT,\n                 marker: ::std::marker::PhantomData::<::std::cell::Cell<$t>>,\n             }\n         };"}]}