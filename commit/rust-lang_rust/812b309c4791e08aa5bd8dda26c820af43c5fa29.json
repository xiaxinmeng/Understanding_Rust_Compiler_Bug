{"sha": "812b309c4791e08aa5bd8dda26c820af43c5fa29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMmIzMDljNDc5MWUwOGFhNWJkOGRkYTI2YzgyMGFmNDNjNWZhMjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-04T23:23:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-06T01:11:02Z"}, "message": "std: Try to use pipe2 on Linux for pipes\n\nThis commit attempts to use the `pipe2` syscall on Linux to atomically set the\nCLOEXEC flag for pipes created. Unfortunately this was added in 2.6.27 so we\nhave to dynamically determine whether we can use it or not.\n\nThis commit also updates the `fds-are-cloexec.rs` test to test stdio handles for\nspawned processes as well.", "tree": {"sha": "9f4a23ff899d0a98e857fbba98269dc8d9fffea2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4a23ff899d0a98e857fbba98269dc8d9fffea2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/812b309c4791e08aa5bd8dda26c820af43c5fa29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/812b309c4791e08aa5bd8dda26c820af43c5fa29", "html_url": "https://github.com/rust-lang/rust/commit/812b309c4791e08aa5bd8dda26c820af43c5fa29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/812b309c4791e08aa5bd8dda26c820af43c5fa29/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46315184cb74a98dbd10a0d300a0c3ee62b78049", "url": "https://api.github.com/repos/rust-lang/rust/commits/46315184cb74a98dbd10a0d300a0c3ee62b78049", "html_url": "https://github.com/rust-lang/rust/commit/46315184cb74a98dbd10a0d300a0c3ee62b78049"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "9527b1e2243d3e10a02b10e2659829a03badb8b4", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/812b309c4791e08aa5bd8dda26c820af43c5fa29/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812b309c4791e08aa5bd8dda26c820af43c5fa29/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=812b309c4791e08aa5bd8dda26c820af43c5fa29", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::fd::FileDesc;\n use io;\n-use libc;\n+use libc::{self, c_int};\n+use sys::cvt_r;\n+use sys::fd::FileDesc;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Anonymous pipes\n@@ -20,6 +21,24 @@ pub struct AnonPipe(FileDesc);\n \n pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     let mut fds = [0; 2];\n+\n+    // Unfortunately the only known way right now to create atomically set the\n+    // CLOEXEC flag is to use the `pipe2` syscall on Linux. This was added in\n+    // 2.6.27, however, and because we support 2.6.18 we must detect this\n+    // support dynamically.\n+    if cfg!(target_os = \"linux\") {\n+        weak! { fn pipe2(*mut c_int, c_int) -> c_int }\n+        if let Some(pipe) = pipe2.get() {\n+            match cvt_r(|| unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n+                Ok(_) => {\n+                    return Ok((AnonPipe(FileDesc::new(fds[0])),\n+                               AnonPipe(FileDesc::new(fds[1]))))\n+                }\n+                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {}\n+                Err(e) => return Err(e),\n+            }\n+        }\n+    }\n     if unsafe { libc::pipe(fds.as_mut_ptr()) == 0 } {\n         Ok((AnonPipe::from_fd(fds[0]), AnonPipe::from_fd(fds[1])))\n     } else {"}, {"sha": "3c7d2861c877e317d4e2918e9381311b4f7e9e8e", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/812b309c4791e08aa5bd8dda26c820af43c5fa29/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812b309c4791e08aa5bd8dda26c820af43c5fa29/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=812b309c4791e08aa5bd8dda26c820af43c5fa29", "patch": "@@ -16,11 +16,11 @@\n extern crate libc;\n \n use std::env;\n-use std::fs::{self, File};\n+use std::fs::File;\n use std::io;\n use std::net::{TcpListener, TcpStream, UdpSocket};\n use std::os::unix::prelude::*;\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n use std::thread;\n \n fn main() {\n@@ -45,6 +45,17 @@ fn parent() {\n     let udp1 = UdpSocket::bind(\"127.0.0.1:0\").unwrap();\n     let udp2 = udp1.try_clone().unwrap();\n \n+    let mut child = Command::new(env::args().next().unwrap())\n+                            .arg(\"100\")\n+                            .stdout(Stdio::piped())\n+                            .stdin(Stdio::piped())\n+                            .stderr(Stdio::piped())\n+                            .spawn().unwrap();\n+    let pipe1 = child.stdin.take().unwrap();\n+    let pipe2 = child.stdout.take().unwrap();\n+    let pipe3 = child.stderr.take().unwrap();\n+\n+\n     let status = Command::new(env::args().next().unwrap())\n                         .arg(file.as_raw_fd().to_string())\n                         .arg(tcp1.as_raw_fd().to_string())\n@@ -55,9 +66,13 @@ fn parent() {\n                         .arg(tcp6.as_raw_fd().to_string())\n                         .arg(udp1.as_raw_fd().to_string())\n                         .arg(udp2.as_raw_fd().to_string())\n+                        .arg(pipe1.as_raw_fd().to_string())\n+                        .arg(pipe2.as_raw_fd().to_string())\n+                        .arg(pipe3.as_raw_fd().to_string())\n                         .status()\n                         .unwrap();\n     assert!(status.success());\n+    child.wait().unwrap();\n }\n \n fn child(args: &[String]) {"}]}