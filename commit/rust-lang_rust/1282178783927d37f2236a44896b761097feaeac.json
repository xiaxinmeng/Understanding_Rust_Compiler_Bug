{"sha": "1282178783927d37f2236a44896b761097feaeac", "node_id": "C_kwDOAAsO6NoAKDEyODIxNzg3ODM5MjdkMzdmMjIzNmE0NDg5NmI3NjEwOTdmZWFlYWM", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-08T16:21:35Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-08T22:32:42Z"}, "message": "insert dummy values for const generics in subst", "tree": {"sha": "d828521364635a1d3c8bfe11f82b9423bcc9dc8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d828521364635a1d3c8bfe11f82b9423bcc9dc8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1282178783927d37f2236a44896b761097feaeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1282178783927d37f2236a44896b761097feaeac", "html_url": "https://github.com/rust-lang/rust/commit/1282178783927d37f2236a44896b761097feaeac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1282178783927d37f2236a44896b761097feaeac/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4924072493393ae84b77250d53c6880a060c79cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4924072493393ae84b77250d53c6880a060c79cb", "html_url": "https://github.com/rust-lang/rust/commit/4924072493393ae84b77250d53c6880a060c79cb"}], "stats": {"total": 238, "additions": 176, "deletions": 62}, "files": [{"sha": "8f80f3a5db6c8a817d39a35e460334414474bccf", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -293,7 +293,7 @@ fn write_generic_params(def: GenericDefId, f: &mut HirFormatter) -> Result<(), H\n     let params = f.db.generic_params(def);\n     if params.lifetimes.is_empty()\n         && params\n-            .types\n+            .tocs\n             .iter()\n             .filter_map(|x| x.1.type_param())\n             .all(|param| !matches!(param.provenance, TypeParamProvenance::TypeParamList))\n@@ -315,7 +315,7 @@ fn write_generic_params(def: GenericDefId, f: &mut HirFormatter) -> Result<(), H\n         delim(f)?;\n         write!(f, \"{}\", lifetime.name)?;\n     }\n-    for (_, ty) in params.types.iter() {\n+    for (_, ty) in params.tocs.iter() {\n         if let Some(name) = &ty.name() {\n             match ty {\n                 TypeOrConstParamData::TypeParamData(ty) => {\n@@ -348,7 +348,7 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter) -> Result<(), Hir\n     // unnamed type targets are displayed inline with the argument itself, e.g. `f: impl Y`.\n     let is_unnamed_type_target = |target: &WherePredicateTypeTarget| match target {\n         WherePredicateTypeTarget::TypeRef(_) => false,\n-        WherePredicateTypeTarget::TypeOrConstParam(id) => params.types[*id].name().is_none(),\n+        WherePredicateTypeTarget::TypeOrConstParam(id) => params.tocs[*id].name().is_none(),\n     };\n \n     let has_displayable_predicate = params\n@@ -364,7 +364,7 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter) -> Result<(), Hir\n \n     let write_target = |target: &WherePredicateTypeTarget, f: &mut HirFormatter| match target {\n         WherePredicateTypeTarget::TypeRef(ty) => ty.hir_fmt(f),\n-        WherePredicateTypeTarget::TypeOrConstParam(id) => match &params.types[*id].name() {\n+        WherePredicateTypeTarget::TypeOrConstParam(id) => match &params.tocs[*id].name() {\n             Some(name) => write!(f, \"{}\", name),\n             None => write!(f, \"{{unnamed}}\"),\n         },"}, {"sha": "7bddef5dfeae3ca71d792f055fbbaa7e6b8ed502", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -2007,7 +2007,7 @@ impl_from!(\n impl GenericDef {\n     pub fn params(self, db: &dyn HirDatabase) -> Vec<GenericParam> {\n         let generics = db.generic_params(self.into());\n-        let ty_params = generics.types.iter().map(|(local_id, _)| {\n+        let ty_params = generics.tocs.iter().map(|(local_id, _)| {\n             let toc = TypeOrConstParam { id: TypeOrConstParamId { parent: self.into(), local_id } };\n             match toc.split(db) {\n                 Either::Left(x) => GenericParam::ConstParam(x),\n@@ -2027,7 +2027,7 @@ impl GenericDef {\n     pub fn type_params(self, db: &dyn HirDatabase) -> Vec<TypeOrConstParam> {\n         let generics = db.generic_params(self.into());\n         generics\n-            .types\n+            .tocs\n             .iter()\n             .map(|(local_id, _)| TypeOrConstParam {\n                 id: TypeOrConstParamId { parent: self.into(), local_id },\n@@ -2349,7 +2349,7 @@ impl ConstParam {\n \n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         let params = db.generic_params(self.id.parent());\n-        match params.types[self.id.local_id()].name() {\n+        match params.tocs[self.id.local_id()].name() {\n             Some(x) => x.clone(),\n             None => {\n                 never!();\n@@ -2381,7 +2381,7 @@ pub struct TypeOrConstParam {\n impl TypeOrConstParam {\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         let params = db.generic_params(self.id.parent);\n-        match params.types[self.id.local_id].name() {\n+        match params.tocs[self.id.local_id].name() {\n             Some(n) => n.clone(),\n             _ => Name::missing(),\n         }\n@@ -2397,7 +2397,7 @@ impl TypeOrConstParam {\n \n     pub fn split(self, db: &dyn HirDatabase) -> Either<ConstParam, TypeParam> {\n         let params = db.generic_params(self.id.parent);\n-        match &params.types[self.id.local_id] {\n+        match &params.tocs[self.id.local_id] {\n             hir_def::generics::TypeOrConstParamData::TypeParamData(_) => {\n                 Either::Right(TypeParam { id: self.id.into() })\n             }"}, {"sha": "60d79f1473e55dbdcf2216084e0b92537566e6c4", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -77,6 +77,13 @@ impl TypeOrConstParamData {\n         }\n     }\n \n+    pub fn const_param(&self) -> Option<&ConstParamData> {\n+        match self {\n+            TypeOrConstParamData::TypeParamData(_) => None,\n+            TypeOrConstParamData::ConstParamData(x) => Some(x),\n+        }\n+    }\n+\n     pub fn is_trait_self(&self) -> bool {\n         match self {\n             TypeOrConstParamData::TypeParamData(x) => {\n@@ -92,7 +99,7 @@ impl_from!(TypeParamData, ConstParamData for TypeOrConstParamData);\n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug, Default, Hash)]\n pub struct GenericParams {\n-    pub types: Arena<TypeOrConstParamData>,\n+    pub tocs: Arena<TypeOrConstParamData>,\n     pub lifetimes: Arena<LifetimeParamData>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n@@ -131,7 +138,13 @@ impl GenericParams {\n     pub fn type_iter<'a>(\n         &'a self,\n     ) -> impl Iterator<Item = (Idx<TypeOrConstParamData>, &TypeParamData)> {\n-        self.types.iter().filter_map(|x| x.1.type_param().map(|y| (x.0, y)))\n+        self.tocs.iter().filter_map(|x| x.1.type_param().map(|y| (x.0, y)))\n+    }\n+\n+    pub fn toc_iter<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = (Idx<TypeOrConstParamData>, &TypeOrConstParamData)> {\n+        self.tocs.iter()\n     }\n \n     pub(crate) fn generic_params_query(\n@@ -238,7 +251,7 @@ impl GenericParams {\n                         default,\n                         provenance: TypeParamProvenance::TypeParamList,\n                     };\n-                    self.types.alloc(param.into());\n+                    self.tocs.alloc(param.into());\n                     let type_ref = TypeRef::Path(name.into());\n                     self.fill_bounds(lower_ctx, &type_param, Either::Left(type_ref));\n                 }\n@@ -248,7 +261,7 @@ impl GenericParams {\n                         .ty()\n                         .map_or(TypeRef::Error, |it| TypeRef::from_ast(lower_ctx, it));\n                     let param = ConstParamData { name, ty: Interned::new(ty) };\n-                    self.types.alloc(param.into());\n+                    self.tocs.alloc(param.into());\n                 }\n             }\n         }\n@@ -335,7 +348,7 @@ impl GenericParams {\n                     default: None,\n                     provenance: TypeParamProvenance::ArgumentImplTrait,\n                 };\n-                let param_id = self.types.alloc(param.into());\n+                let param_id = self.tocs.alloc(param.into());\n                 for bound in bounds {\n                     self.where_predicates.push(WherePredicate::TypeBound {\n                         target: WherePredicateTypeTarget::TypeOrConstParam(param_id),\n@@ -359,27 +372,27 @@ impl GenericParams {\n     }\n \n     pub(crate) fn shrink_to_fit(&mut self) {\n-        let Self { lifetimes, types, where_predicates } = self;\n+        let Self { lifetimes, tocs: types, where_predicates } = self;\n         lifetimes.shrink_to_fit();\n         types.shrink_to_fit();\n         where_predicates.shrink_to_fit();\n     }\n \n     pub fn find_type_by_name(&self, name: &Name) -> Option<LocalTypeOrConstParamId> {\n-        self.types\n+        self.tocs\n             .iter()\n             .filter(|x| matches!(x.1, TypeOrConstParamData::TypeParamData(_)))\n             .find_map(|(id, p)| if p.name().as_ref() == Some(&name) { Some(id) } else { None })\n     }\n \n     pub fn find_type_or_const_by_name(&self, name: &Name) -> Option<LocalTypeOrConstParamId> {\n-        self.types\n+        self.tocs\n             .iter()\n             .find_map(|(id, p)| if p.name().as_ref() == Some(&name) { Some(id) } else { None })\n     }\n \n     pub fn find_trait_self_param(&self) -> Option<LocalTypeOrConstParamId> {\n-        self.types.iter().find_map(|(id, p)| {\n+        self.tocs.iter().find_map(|(id, p)| {\n             if let TypeOrConstParamData::TypeParamData(p) = p {\n                 if p.provenance == TypeParamProvenance::TraitSelf {\n                     Some(id)\n@@ -438,7 +451,7 @@ impl HasChildSource<LocalTypeOrConstParamId> for GenericDefId {\n         db: &dyn DefDatabase,\n     ) -> InFile<ArenaMap<LocalTypeOrConstParamId, Self::Value>> {\n         let generic_params = db.generic_params(*self);\n-        let mut idx_iter = generic_params.types.iter().map(|(idx, _)| idx);\n+        let mut idx_iter = generic_params.tocs.iter().map(|(idx, _)| idx);\n \n         let (file_id, generic_params_list) = file_id_and_params_of(*self, db);\n \n@@ -492,7 +505,7 @@ impl ChildBySource for GenericDefId {\n         }\n \n         let generic_params = db.generic_params(*self);\n-        let mut toc_idx_iter = generic_params.types.iter().map(|(idx, _)| idx);\n+        let mut toc_idx_iter = generic_params.tocs.iter().map(|(idx, _)| idx);\n         let lts_idx_iter = generic_params.lifetimes.iter().map(|(idx, _)| idx);\n \n         // For traits the first type index is `Self`, skip it."}, {"sha": "45b5430a22f095580355c7858c8d212ad27f6e9a", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -582,7 +582,7 @@ impl<'a> Ctx<'a> {\n             }\n             GenericsOwner::Trait(trait_def) => {\n                 // traits get the Self type as an implicit first type parameter\n-                generics.types.alloc(\n+                generics.tocs.alloc(\n                     TypeParamData {\n                         name: Some(name![Self]),\n                         default: None,"}, {"sha": "6fea95a2ac995ca8fded1fb0adc9f2cde835ea4e", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -626,7 +626,7 @@ impl<'a> Printer<'a> {\n     }\n \n     fn print_generic_params(&mut self, params: &GenericParams) {\n-        if params.types.is_empty() && params.lifetimes.is_empty() {\n+        if params.tocs.is_empty() && params.lifetimes.is_empty() {\n             return;\n         }\n \n@@ -639,7 +639,7 @@ impl<'a> Printer<'a> {\n             first = false;\n             w!(self, \"{}\", lt.name);\n         }\n-        for (idx, x) in params.types.iter() {\n+        for (idx, x) in params.tocs.iter() {\n             if !first {\n                 w!(self, \", \");\n             }\n@@ -701,7 +701,7 @@ impl<'a> Printer<'a> {\n                 match target {\n                     WherePredicateTypeTarget::TypeRef(ty) => this.print_type_ref(ty),\n                     WherePredicateTypeTarget::TypeOrConstParam(id) => {\n-                        match &params.types[*id].name() {\n+                        match &params.tocs[*id].name() {\n                             Some(name) => w!(this, \"{}\", name),\n                             None => w!(this, \"_anon_{}\", id.into_raw()),\n                         }"}, {"sha": "4364307186135a5a033ceb7d9c077fbc633b4469", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -526,10 +526,10 @@ impl Scope {\n             }\n             Scope::GenericParams { params, def: parent } => {\n                 let parent = *parent;\n-                for (local_id, param) in params.types.iter() {\n+                for (local_id, param) in params.tocs.iter() {\n                     if let Some(name) = &param.name() {\n                         let id = TypeOrConstParamId { parent, local_id };\n-                        let data = &db.generic_params(parent).types[local_id];\n+                        let data = &db.generic_params(parent).tocs[local_id];\n                         acc.add(\n                             name,\n                             ScopeDef::GenericParam(match data {"}, {"sha": "8758f38bfc996e33cc3957eca83539f5750510b2", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -237,7 +237,7 @@ impl TyExt for Ty {\n             TyKind::Placeholder(idx) => {\n                 let id = from_placeholder_idx(db, *idx);\n                 let generic_params = db.generic_params(id.parent);\n-                let param_data = &generic_params.types[id.local_id];\n+                let param_data = &generic_params.tocs[id.local_id];\n                 match param_data {\n                     TypeOrConstParamData::TypeParamData(p) => match p.provenance {\n                         hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {"}, {"sha": "d81aa3482489545547202070d70745e3f6bbe0d8", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -320,7 +320,7 @@ impl HirDisplay for Const {\n             ConstValue::Placeholder(idx) => {\n                 let id = from_placeholder_idx(f.db, idx);\n                 let generics = generics(f.db.upcast(), id.parent);\n-                let param_data = &generics.params.types[id.local_id];\n+                let param_data = &generics.params.tocs[id.local_id];\n                 write!(f, \"{}\", param_data.name().unwrap())\n             }\n             ConstValue::Concrete(c) => write!(f, \"{}\", c.interned),\n@@ -489,9 +489,9 @@ impl HirDisplay for Ty {\n                 };\n                 if parameters.len(Interner) > 0 {\n                     let generics = generics(f.db.upcast(), def.into());\n-                    let (parent_params, self_param, type_params, _impl_trait_params) =\n+                    let (parent_params, self_param, type_params, const_params, _impl_trait_params) =\n                         generics.provenance_split();\n-                    let total_len = parent_params + self_param + type_params;\n+                    let total_len = parent_params + self_param + type_params + const_params;\n                     // We print all params except implicit impl Trait params. Still a bit weird; should we leave out parent and self?\n                     if total_len > 0 {\n                         write!(f, \"<\")?;\n@@ -680,7 +680,7 @@ impl HirDisplay for Ty {\n             TyKind::Placeholder(idx) => {\n                 let id = from_placeholder_idx(f.db, *idx);\n                 let generics = generics(f.db.upcast(), id.parent);\n-                let param_data = &generics.params.types[id.local_id];\n+                let param_data = &generics.params.tocs[id.local_id];\n                 match param_data {\n                     TypeOrConstParamData::TypeParamData(p) => match p.provenance {\n                         TypeParamProvenance::TypeParamList | TypeParamProvenance::TraitSelf => {"}, {"sha": "c093f0e4b23ec3f2e07f7bf5b5791d06356da9cd", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -1032,10 +1032,10 @@ impl<'a> InferenceContext<'a> {\n         def_generics: Generics,\n         generic_args: Option<&GenericArgs>,\n     ) -> Substitution {\n-        let (parent_params, self_params, type_params, impl_trait_params) =\n+        let (parent_params, self_params, type_params, const_params, impl_trait_params) =\n             def_generics.provenance_split();\n         assert_eq!(self_params, 0); // method shouldn't have another Self param\n-        let total_len = parent_params + type_params + impl_trait_params;\n+        let total_len = parent_params + type_params + const_params + impl_trait_params;\n         let mut substs = Vec::with_capacity(total_len);\n         // Parent arguments are unknown\n         for (_id, param) in def_generics.iter_parent() {\n@@ -1044,7 +1044,8 @@ impl<'a> InferenceContext<'a> {\n                     substs.push(self.table.new_type_var());\n                 }\n                 TypeOrConstParamData::ConstParamData(_) => {\n-                    // FIXME: here we should do something\n+                    // FIXME: here we should do something else\n+                    substs.push(self.table.new_type_var());\n                 }\n             }\n         }"}, {"sha": "15f91ce799bbcac2373e885598b61dc6109b7891", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -286,16 +286,21 @@ impl<'a> TyLoweringContext<'a> {\n                         let idx = self.impl_trait_counter.get();\n                         // FIXME we're probably doing something wrong here\n                         self.impl_trait_counter.set(idx + count_impl_traits(type_ref) as u16);\n-                        let (parent_params, self_params, list_params, _impl_trait_params) =\n-                            if let Some(def) = self.resolver.generic_def() {\n-                                let generics = generics(self.db.upcast(), def);\n-                                generics.provenance_split()\n-                            } else {\n-                                (0, 0, 0, 0)\n-                            };\n+                        let (\n+                            parent_params,\n+                            self_params,\n+                            list_params,\n+                            const_params,\n+                            _impl_trait_params,\n+                        ) = if let Some(def) = self.resolver.generic_def() {\n+                            let generics = generics(self.db.upcast(), def);\n+                            generics.provenance_split()\n+                        } else {\n+                            (0, 0, 0, 0, 0)\n+                        };\n                         TyKind::BoundVar(BoundVar::new(\n                             self.in_binders,\n-                            idx as usize + parent_params + self_params + list_params,\n+                            idx as usize + parent_params + self_params + list_params + const_params,\n                         ))\n                         .intern(Interner)\n                     }\n@@ -639,9 +644,10 @@ impl<'a> TyLoweringContext<'a> {\n         let mut substs = Vec::new();\n         let def_generics = def_generic.map(|def| generics(self.db.upcast(), def));\n \n-        let (parent_params, self_params, type_params, impl_trait_params) =\n-            def_generics.map_or((0, 0, 0, 0), |g| g.provenance_split());\n-        let total_len = parent_params + self_params + type_params + impl_trait_params;\n+        let (parent_params, self_params, type_params, const_params, impl_trait_params) =\n+            def_generics.map_or((0, 0, 0, 0, 0), |g| g.provenance_split());\n+        let total_len =\n+            parent_params + self_params + type_params + const_params + impl_trait_params;\n \n         substs.extend(iter::repeat(TyKind::Error.intern(Interner)).take(parent_params));\n \n@@ -993,7 +999,7 @@ fn named_associated_type_shorthand_candidates<R>(\n             // Handle `Self::Type` referring to own associated type in trait definitions\n             if let GenericDefId::TraitId(trait_id) = param_id.parent() {\n                 let generics = generics(db.upcast(), trait_id.into());\n-                if generics.params.types[param_id.local_id()].is_trait_self() {\n+                if generics.params.tocs[param_id.local_id()].is_trait_self() {\n                     let trait_ref = TyBuilder::trait_ref(db, trait_id)\n                         .fill_with_bound_vars(DebruijnIndex::INNERMOST, 0)\n                         .build();\n@@ -1235,9 +1241,17 @@ pub(crate) fn generic_defaults_query(\n     let generic_params = generics(db.upcast(), def);\n \n     let defaults = generic_params\n-        .type_iter()\n+        .toc_iter()\n         .enumerate()\n         .map(|(idx, (_, p))| {\n+            let p = match p {\n+                TypeOrConstParamData::TypeParamData(p) => p,\n+                TypeOrConstParamData::ConstParamData(_) => {\n+                    // FIXME: here we should add const generic parameters\n+                    let ty = TyKind::Error.intern(Interner);\n+                    return crate::make_only_type_binders(idx, ty);\n+                }\n+            };\n             let mut ty =\n                 p.default.as_ref().map_or(TyKind::Error.intern(Interner), |t| ctx.lower_ty(t));\n \n@@ -1269,7 +1283,7 @@ pub(crate) fn generic_defaults_recover(\n \n     // we still need one default per parameter\n     let defaults = generic_params\n-        .type_iter()\n+        .toc_iter()\n         .enumerate()\n         .map(|(idx, _)| {\n             let ty = TyKind::Error.intern(Interner);\n@@ -1502,7 +1516,7 @@ pub(crate) fn impl_self_ty_query(db: &dyn HirDatabase, impl_id: ImplId) -> Binde\n // returns None if def is a type arg\n pub(crate) fn const_param_ty_query(db: &dyn HirDatabase, def: ConstParamId) -> Ty {\n     let parent_data = db.generic_params(def.parent());\n-    let data = &parent_data.types[def.local_id()];\n+    let data = &parent_data.tocs[def.local_id()];\n     let resolver = def.parent().resolver(db.upcast());\n     let ctx = TyLoweringContext::new(db, &resolver);\n     match data {"}, {"sha": "020c5da680491522cbf9a20580aececbe6f66fea", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -1298,3 +1298,71 @@ impl<I: Iterator> IntoIterator for I {\n \"#,\n     );\n }\n+\n+#[test]\n+fn bug_11659() {\n+    check_infer(\n+        r#\"\n+struct LinkArray<const N: usize, LD>(LD);\n+fn f<const N: usize, LD>(x: LD) -> LinkArray<N, LD> {\n+    let r = LinkArray::<N, LD>(x);\n+    r\n+}\n+\n+fn test() {\n+    let x = f::<2, i32>(5);\n+    let y = LinkArray::<52, LinkArray<2, i32>>(x);\n+}\n+        \"#,\n+        expect![[r#\"\n+        67..68 'x': LD\n+        94..138 '{     ...   r }': LinkArray<{unknown}, LD>\n+        104..105 'r': LinkArray<{unknown}, LD>\n+        108..126 'LinkAr...N, LD>': LinkArray<{unknown}, LD>(LD) -> LinkArray<{unknown}, LD>\n+        108..129 'LinkAr...LD>(x)': LinkArray<{unknown}, LD>\n+        127..128 'x': LD\n+        135..136 'r': LinkArray<{unknown}, LD>\n+        150..232 '{     ...(x); }': ()\n+        160..161 'x': LinkArray<{unknown}, {unknown}>\n+        164..175 'f::<2, i32>': fn f<i32, i32>(i32) -> LinkArray<{unknown}, {unknown}>\n+        164..178 'f::<2, i32>(5)': LinkArray<{unknown}, {unknown}>\n+        176..177 '5': i32\n+        188..189 'y': LinkArray<LinkArray<i32, {unknown}>, LinkArray<{unknown}, {unknown}>>\n+        192..226 'LinkAr... i32>>': LinkArray<LinkArray<i32, {unknown}>, LinkArray<{unknown}, {unknown}>>(LinkArray<{unknown}, {unknown}>) -> LinkArray<LinkArray<i32, {unknown}>, LinkArray<{unknown}, {unknown}>>\n+        192..229 'LinkAr...2>>(x)': LinkArray<LinkArray<i32, {unknown}>, LinkArray<{unknown}, {unknown}>>\n+        227..228 'x': LinkArray<{unknown}, {unknown}>\n+        \"#]],\n+    );\n+    check_infer(\n+        r#\"\n+struct LinkArray<LD, const N: usize>(LD);\n+fn f<const N: usize, LD>(x: LD) -> LinkArray<LD, N> {\n+    let r = LinkArray::<LD, N>(x);\n+    r\n+}\n+\n+fn test() {\n+    let x = f::<i32, 2>(5);\n+    let y = LinkArray::<LinkArray<i32, 2>, 52>(x);\n+}\n+        \"#,\n+        expect![[r#\"\n+        67..68 'x': LD\n+        94..138 '{     ...   r }': LinkArray<LD, {unknown}>\n+        104..105 'r': LinkArray<LD, {unknown}>\n+        108..126 'LinkAr...LD, N>': LinkArray<LD, {unknown}>(LD) -> LinkArray<LD, {unknown}>\n+        108..129 'LinkAr... N>(x)': LinkArray<LD, {unknown}>\n+        127..128 'x': LD\n+        135..136 'r': LinkArray<LD, {unknown}>\n+        150..232 '{     ...(x); }': ()\n+        160..161 'x': LinkArray<i32, {unknown}>\n+        164..175 'f::<i32, 2>': fn f<i32, i32>(i32) -> LinkArray<i32, {unknown}>\n+        164..178 'f::<i32, 2>(5)': LinkArray<i32, {unknown}>\n+        176..177 '5': i32\n+        188..189 'y': LinkArray<LinkArray<i32, {unknown}>, {unknown}>\n+        192..226 'LinkAr...>, 52>': LinkArray<LinkArray<i32, {unknown}>, {unknown}>(LinkArray<i32, {unknown}>) -> LinkArray<LinkArray<i32, {unknown}>, {unknown}>\n+        192..229 'LinkAr...52>(x)': LinkArray<LinkArray<i32, {unknown}>, {unknown}>\n+        227..228 'x': LinkArray<i32, {unknown}>\n+        \"#]],\n+    );\n+}"}, {"sha": "a6706aa81d5aa34a13a85f2b0a2f82a332caf936", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1282178783927d37f2236a44896b761097feaeac/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=1282178783927d37f2236a44896b761097feaeac", "patch": "@@ -203,12 +203,30 @@ impl Generics {\n             )\n     }\n \n+    pub(crate) fn toc_iter<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = (TypeOrConstParamId, &'a TypeOrConstParamData)> + 'a {\n+        self.parent_generics\n+            .as_ref()\n+            .into_iter()\n+            .flat_map(|it| {\n+                it.params\n+                    .toc_iter()\n+                    .map(move |(local_id, p)| (TypeOrConstParamId { parent: it.def, local_id }, p))\n+            })\n+            .chain(\n+                self.params.toc_iter().map(move |(local_id, p)| {\n+                    (TypeOrConstParamId { parent: self.def, local_id }, p)\n+                }),\n+            )\n+    }\n+\n     pub(crate) fn iter_parent<'a>(\n         &'a self,\n     ) -> impl Iterator<Item = (TypeOrConstParamId, &'a TypeOrConstParamData)> + 'a {\n         self.parent_generics.as_ref().into_iter().flat_map(|it| {\n             it.params\n-                .types\n+                .tocs\n                 .iter()\n                 .map(move |(local_id, p)| (TypeOrConstParamId { parent: it.def, local_id }, p))\n         })\n@@ -221,36 +239,36 @@ impl Generics {\n     /// (total, parents, child)\n     pub(crate) fn len_split(&self) -> (usize, usize, usize) {\n         let parent = self.parent_generics.as_ref().map_or(0, |p| p.len());\n-        // FIXME: we should not filter const generics here, but at now it breaks tests\n-        let child = self.params.types.iter().filter_map(|x| x.1.type_param()).count();\n+        let child = self.params.tocs.len();\n         (parent + child, parent, child)\n     }\n \n-    /// (parent total, self param, type param list, impl trait)\n-    pub(crate) fn provenance_split(&self) -> (usize, usize, usize, usize) {\n+    /// (parent total, self param, type param list, const param list, impl trait)\n+    pub(crate) fn provenance_split(&self) -> (usize, usize, usize, usize, usize) {\n         let parent = self.parent_generics.as_ref().map_or(0, |p| p.len());\n         let self_params = self\n             .params\n-            .types\n+            .tocs\n             .iter()\n             .filter_map(|x| x.1.type_param())\n             .filter(|p| p.provenance == TypeParamProvenance::TraitSelf)\n             .count();\n-        let list_params = self\n+        let type_params = self\n             .params\n-            .types\n+            .tocs\n             .iter()\n             .filter_map(|x| x.1.type_param())\n             .filter(|p| p.provenance == TypeParamProvenance::TypeParamList)\n             .count();\n+        let const_params = self.params.tocs.iter().filter_map(|x| x.1.const_param()).count();\n         let impl_trait_params = self\n             .params\n-            .types\n+            .tocs\n             .iter()\n             .filter_map(|x| x.1.type_param())\n             .filter(|p| p.provenance == TypeParamProvenance::ArgumentImplTrait)\n             .count();\n-        (parent, self_params, list_params, impl_trait_params)\n+        (parent, self_params, type_params, const_params, impl_trait_params)\n     }\n \n     pub(crate) fn param_idx(&self, param: TypeOrConstParamId) -> Option<usize> {\n@@ -261,7 +279,7 @@ impl Generics {\n         if param.parent == self.def {\n             let (idx, (_local_id, data)) = self\n                 .params\n-                .types\n+                .tocs\n                 .iter()\n                 .enumerate()\n                 .find(|(_, (idx, _))| *idx == param.local_id)\n@@ -277,7 +295,7 @@ impl Generics {\n     pub(crate) fn bound_vars_subst(&self, debruijn: DebruijnIndex) -> Substitution {\n         Substitution::from_iter(\n             Interner,\n-            self.type_iter()\n+            self.toc_iter()\n                 .enumerate()\n                 .map(|(idx, _)| TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(Interner)),\n         )\n@@ -287,7 +305,7 @@ impl Generics {\n     pub(crate) fn type_params_subst(&self, db: &dyn HirDatabase) -> Substitution {\n         Substitution::from_iter(\n             Interner,\n-            self.type_iter().map(|(id, _)| {\n+            self.toc_iter().map(|(id, _)| {\n                 TyKind::Placeholder(crate::to_placeholder_idx(db, id)).intern(Interner)\n             }),\n         )"}]}