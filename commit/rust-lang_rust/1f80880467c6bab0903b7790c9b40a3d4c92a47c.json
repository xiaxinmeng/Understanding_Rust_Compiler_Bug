{"sha": "1f80880467c6bab0903b7790c9b40a3d4c92a47c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODA4ODA0NjdjNmJhYjA5MDNiNzc5MGM5YjQwYTNkNGM5MmE0N2M=", "commit": {"author": {"name": "Jonathan Hansford", "email": "dangthrimble@hansfords.net", "date": "2015-07-23T11:24:55Z"}, "committer": {"name": "Jonathan Hansford", "email": "dangthrimble@hansfords.net", "date": "2015-07-23T11:24:55Z"}, "message": "Added entries to explain expression-oriented languages\n\nAdded definitions for 'Expression', 'Expression-Oriented Language' and\n'Statement'.\nSorted the definitions alphabetically.", "tree": {"sha": "7b379895ca9f2bd1f4a9ac498ed41399e9c53311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b379895ca9f2bd1f4a9ac498ed41399e9c53311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f80880467c6bab0903b7790c9b40a3d4c92a47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f80880467c6bab0903b7790c9b40a3d4c92a47c", "html_url": "https://github.com/rust-lang/rust/commit/1f80880467c6bab0903b7790c9b40a3d4c92a47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f80880467c6bab0903b7790c9b40a3d4c92a47c/comments", "author": {"login": "Dangthrimble", "id": 1872986, "node_id": "MDQ6VXNlcjE4NzI5ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1872986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dangthrimble", "html_url": "https://github.com/Dangthrimble", "followers_url": "https://api.github.com/users/Dangthrimble/followers", "following_url": "https://api.github.com/users/Dangthrimble/following{/other_user}", "gists_url": "https://api.github.com/users/Dangthrimble/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dangthrimble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dangthrimble/subscriptions", "organizations_url": "https://api.github.com/users/Dangthrimble/orgs", "repos_url": "https://api.github.com/users/Dangthrimble/repos", "events_url": "https://api.github.com/users/Dangthrimble/events{/privacy}", "received_events_url": "https://api.github.com/users/Dangthrimble/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dangthrimble", "id": 1872986, "node_id": "MDQ6VXNlcjE4NzI5ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1872986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dangthrimble", "html_url": "https://github.com/Dangthrimble", "followers_url": "https://api.github.com/users/Dangthrimble/followers", "following_url": "https://api.github.com/users/Dangthrimble/following{/other_user}", "gists_url": "https://api.github.com/users/Dangthrimble/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dangthrimble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dangthrimble/subscriptions", "organizations_url": "https://api.github.com/users/Dangthrimble/orgs", "repos_url": "https://api.github.com/users/Dangthrimble/repos", "events_url": "https://api.github.com/users/Dangthrimble/events{/privacy}", "received_events_url": "https://api.github.com/users/Dangthrimble/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c73459acba7019f285289df421ccd72724c387", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c73459acba7019f285289df421ccd72724c387", "html_url": "https://github.com/rust-lang/rust/commit/f2c73459acba7019f285289df421ccd72724c387"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "bd425145b96c8b751a03521a9ca86353e746297f", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f80880467c6bab0903b7790c9b40a3d4c92a47c/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f80880467c6bab0903b7790c9b40a3d4c92a47c/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=1f80880467c6bab0903b7790c9b40a3d4c92a47c", "patch": "@@ -3,24 +3,12 @@\n Not every Rustacean has a background in systems programming, nor in computer\n science, so we've added explanations of terms that might be unfamiliar.\n \n-### Arity\n-\n-Arity refers to the number of arguments a function or operation takes.\n-\n-```rust\n-let x = (2, 3);\n-let y = (4, 6);\n-let z = (8, 2, 6);\n-```\n-\n-In the example above `x` and `y` have arity 2. `z` has arity 3.\n-\n ### Abstract Syntax Tree\n \n-When a compiler is compiling your program, it does a number of different\n-things. One of the things that it does is turn the text of your program into an\n-\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the\n-structure of your program. For example, `2 + 3` can be turned into a tree:\n+When a compiler is compiling your program, it does a number of different things.\n+One of the things that it does is turn the text of your program into an\n+\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the structure\n+of your program. For example, `2 + 3` can be turned into a tree:\n \n ```text\n   +\n@@ -37,3 +25,39 @@ And `2 + (3 * 4)` would look like this:\n    / \\\n   3   4\n ```\n+\n+### Arity\n+\n+Arity refers to the number of arguments a function or operation takes.\n+\n+```rust\n+let x = (2, 3);\n+let y = (4, 6);\n+let z = (8, 2, 6);\n+```\n+\n+In the example above `x` and `y` have arity 2. `z` has arity 3.\n+\n+### Expression\n+\n+In computer programming, an expression is a combination of values, constants,\n+variables, operators and functions that evaluate to a single value. For example,\n+`2 + (3 * 4)` is an expression that returns the value 14. It is worth noting\n+that expressions can have side-effects. For example, a function included in an\n+expression might perform actions other than simply returning a value.\n+\n+### Expression-Oriented Language\n+\n+In early programming languages [expressions] and [statements] were two separate\n+syntactic categories: expressions had a value and statements did things.\n+However, later languages blurred this distinction, allowing expressions to do\n+things and statements to have a value. In an expression-oriented language,\n+(nearly) every statement is an expression and therefore returns a value.\n+\n+[expressions]: glossary.html#expression\n+[statements]: glossary.html#statement\n+\n+### Statement\n+\n+In computer programming, a statement is the smallest standalone element of a\n+programming language that commands a computer to perform an action."}]}