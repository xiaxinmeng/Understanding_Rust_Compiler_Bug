{"sha": "99d1513ed336a593f06addaf0c6c2dc22951f5db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZDE1MTNlZDMzNmE1OTNmMDZhZGRhZjBjNmMyZGMyMjk1MWY1ZGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-11-19T03:28:57Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-11-19T04:18:36Z"}, "message": "save-analysis: fallback to using path id", "tree": {"sha": "29850a9d6ee8d02c5bf3966d2a2e413a09b9c1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29850a9d6ee8d02c5bf3966d2a2e413a09b9c1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d1513ed336a593f06addaf0c6c2dc22951f5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d1513ed336a593f06addaf0c6c2dc22951f5db", "html_url": "https://github.com/rust-lang/rust/commit/99d1513ed336a593f06addaf0c6c2dc22951f5db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d1513ed336a593f06addaf0c6c2dc22951f5db/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f37247f885026d29bf26fd4aed6e9135e4f32ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f37247f885026d29bf26fd4aed6e9135e4f32ebf", "html_url": "https://github.com/rust-lang/rust/commit/f37247f885026d29bf26fd4aed6e9135e4f32ebf"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "82c4795a29d4bcdab26a3a31c90ea54298e3018c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99d1513ed336a593f06addaf0c6c2dc22951f5db/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d1513ed336a593f06addaf0c6c2dc22951f5db/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=99d1513ed336a593f06addaf0c6c2dc22951f5db", "patch": "@@ -688,11 +688,24 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    pub fn get_path_data(&self, _id: NodeId, path: &ast::Path) -> Option<Ref> {\n-        path.segments.last().and_then(|seg| self.get_path_segment_data(seg))\n+    pub fn get_path_data(&self, id: NodeId, path: &ast::Path) -> Option<Ref> {\n+        path.segments\n+            .last()\n+            .and_then(|seg| {\n+                self.get_path_segment_data(seg)\n+                    .or_else(|| self.get_path_segment_data_with_id(seg, id))\n+            })\n     }\n \n     pub fn get_path_segment_data(&self, path_seg: &ast::PathSegment) -> Option<Ref> {\n+        self.get_path_segment_data_with_id(path_seg, path_seg.id)\n+    }\n+\n+    fn get_path_segment_data_with_id(\n+        &self,\n+        path_seg: &ast::PathSegment,\n+        id: NodeId,\n+    ) -> Option<Ref> {\n         // Returns true if the path is function type sugar, e.g., `Fn(A) -> B`.\n         fn fn_type(seg: &ast::PathSegment) -> bool {\n             if let Some(ref generic_args) = seg.args {\n@@ -703,11 +716,11 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             false\n         }\n \n-        if path_seg.id == DUMMY_NODE_ID {\n+        if id == DUMMY_NODE_ID {\n             return None;\n         }\n \n-        let def = self.get_path_def(path_seg.id);\n+        let def = self.get_path_def(id);\n         let span = path_seg.ident.span;\n         filter!(self.span_utils, span);\n         let span = self.span_from_span(span);"}]}