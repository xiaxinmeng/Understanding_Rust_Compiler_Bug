{"sha": "8e8939b8045b7af6076fb718e2e298844aaf4650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODkzOWI4MDQ1YjdhZjYwNzZmYjcxOGUyZTI5ODg0NGFhZjQ2NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T09:19:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T09:19:01Z"}, "message": "Auto merge of #78489 - bugadani:array, r=estebank\n\nMinor cleanup around incremental compilation\n\n* Remove some short lived vectors\n* Fix some typos\n* Avoid some reallocations", "tree": {"sha": "c132dcf8bda4c2b4c24c3f37ad4266507e02a2d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c132dcf8bda4c2b4c24c3f37ad4266507e02a2d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8939b8045b7af6076fb718e2e298844aaf4650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8939b8045b7af6076fb718e2e298844aaf4650", "html_url": "https://github.com/rust-lang/rust/commit/8e8939b8045b7af6076fb718e2e298844aaf4650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8939b8045b7af6076fb718e2e298844aaf4650/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d662f808550acadc5980969e1826a653ec35b408", "url": "https://api.github.com/repos/rust-lang/rust/commits/d662f808550acadc5980969e1826a653ec35b408", "html_url": "https://github.com/rust-lang/rust/commit/d662f808550acadc5980969e1826a653ec35b408"}, {"sha": "a8803d3c04b25928b5ec42b3147c8002de7ac64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8803d3c04b25928b5ec42b3147c8002de7ac64f", "html_url": "https://github.com/rust-lang/rust/commit/a8803d3c04b25928b5ec42b3147c8002de7ac64f"}], "stats": {"total": 83, "additions": 39, "deletions": 44}, "files": [{"sha": "d332466160ce519821ba97303b73d3ae0fb6a2e9", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=8e8939b8045b7af6076fb718e2e298844aaf4650", "patch": "@@ -653,13 +653,13 @@ where\n         writeln!(w, r#\"    edge[{}];\"#, content_attrs_str)?;\n     }\n \n+    let mut text = Vec::new();\n     for n in g.nodes().iter() {\n         write!(w, \"    \")?;\n         let id = g.node_id(n);\n \n         let escaped = &g.node_label(n).to_dot_string();\n \n-        let mut text = Vec::new();\n         write!(text, \"{}\", id.as_slice()).unwrap();\n \n         if !options.contains(&RenderOption::NoNodeLabels) {\n@@ -677,6 +677,8 @@ where\n \n         writeln!(text, \";\").unwrap();\n         w.write_all(&text[..])?;\n+\n+        text.clear();\n     }\n \n     for e in g.edges().iter() {\n@@ -687,7 +689,6 @@ where\n         let source_id = g.node_id(&source);\n         let target_id = g.node_id(&target);\n \n-        let mut text = Vec::new();\n         write!(text, \"{} -> {}\", source_id.as_slice(), target_id.as_slice()).unwrap();\n \n         if !options.contains(&RenderOption::NoEdgeLabels) {\n@@ -701,6 +702,8 @@ where\n \n         writeln!(text, \";\").unwrap();\n         w.write_all(&text[..])?;\n+\n+        text.clear();\n     }\n \n     writeln!(w, \"}}\")"}, {"sha": "17d8ac9c88297bc33ffbceab0b5c28c533e80877", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=8e8939b8045b7af6076fb718e2e298844aaf4650", "patch": "@@ -111,10 +111,12 @@ impl AssertModuleSource<'tcx> {\n             (&user_path[..], None)\n         };\n \n-        let mut cgu_path_components = user_path.split('-').collect::<Vec<_>>();\n+        let mut iter = user_path.split('-');\n \n         // Remove the crate name\n-        assert_eq!(cgu_path_components.remove(0), crate_name);\n+        assert_eq!(iter.next().unwrap(), crate_name);\n+\n+        let cgu_path_components = iter.collect::<Vec<_>>();\n \n         let cgu_name_builder = &mut CodegenUnitNameBuilder::new(self.tcx);\n         let cgu_name ="}, {"sha": "d55813f4cc5adc455b7973788800ff60362bfc40", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=8e8939b8045b7af6076fb718e2e298844aaf4650", "patch": "@@ -160,7 +160,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n \n         let mut all_attrs = FindAllAttrs {\n             tcx,\n-            attr_names: vec![sym::rustc_dirty, sym::rustc_clean],\n+            attr_names: &[sym::rustc_dirty, sym::rustc_clean],\n             found_attrs: vec![],\n         };\n         intravisit::walk_crate(&mut all_attrs, krate);\n@@ -299,7 +299,7 @@ impl DirtyCleanVisitor<'tcx> {\n \n                     // Represents a Trait Declaration\n                     // FIXME(michaelwoerister): trait declaration is buggy because sometimes some of\n-                    // the depnodes don't exist (because they legitametely didn't need to be\n+                    // the depnodes don't exist (because they legitimately didn't need to be\n                     // calculated)\n                     //\n                     // michaelwoerister and vitiral came up with a possible solution,\n@@ -512,17 +512,17 @@ fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> Symbol {\n }\n \n // A visitor that collects all #[rustc_dirty]/#[rustc_clean] attributes from\n-// the HIR. It is used to verfiy that we really ran checks for all annotated\n+// the HIR. It is used to verify that we really ran checks for all annotated\n // nodes.\n-pub struct FindAllAttrs<'tcx> {\n+pub struct FindAllAttrs<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    attr_names: Vec<Symbol>,\n+    attr_names: &'a [Symbol],\n     found_attrs: Vec<&'tcx Attribute>,\n }\n \n-impl FindAllAttrs<'tcx> {\n+impl FindAllAttrs<'_, 'tcx> {\n     fn is_active_attr(&mut self, attr: &Attribute) -> bool {\n-        for attr_name in &self.attr_names {\n+        for attr_name in self.attr_names {\n             if self.tcx.sess.check_name(attr, *attr_name) && check_config(self.tcx, attr) {\n                 return true;\n             }\n@@ -543,7 +543,7 @@ impl FindAllAttrs<'tcx> {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n+impl intravisit::Visitor<'tcx> for FindAllAttrs<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "9fdf0a56d9de143820b1e8d7f46838e12fef2661", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=8e8939b8045b7af6076fb718e2e298844aaf4650", "patch": "@@ -765,7 +765,6 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // Now garbage collect the valid session directories.\n     let mut deletion_candidates = vec![];\n-    let mut definitely_delete = vec![];\n \n     for (lock_file_name, directory_name) in &lock_file_to_session_dir {\n         debug!(\"garbage_collect_session_directories() - inspecting: {}\", directory_name);\n@@ -842,8 +841,11 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n                             successfully acquired lock\"\n                     );\n \n-                    // Note that we are holding on to the lock\n-                    definitely_delete.push((crate_directory.join(directory_name), Some(lock)));\n+                    delete_old(sess, &crate_directory.join(directory_name));\n+\n+                    // Let's make it explicit that the file lock is released at this point,\n+                    // or rather, that we held on to it until here\n+                    mem::drop(lock);\n                 }\n                 Err(_) => {\n                     debug!(\n@@ -880,26 +882,21 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n         mem::drop(lock);\n     }\n \n-    for (path, lock) in definitely_delete {\n-        debug!(\"garbage_collect_session_directories() - deleting `{}`\", path.display());\n+    Ok(())\n+}\n \n-        if let Err(err) = safe_remove_dir_all(&path) {\n-            sess.warn(&format!(\n-                \"Failed to garbage collect incremental \\\n-                                compilation session directory `{}`: {}\",\n-                path.display(),\n-                err\n-            ));\n-        } else {\n-            delete_session_dir_lock_file(sess, &lock_file_path(&path));\n-        }\n+fn delete_old(sess: &Session, path: &Path) {\n+    debug!(\"garbage_collect_session_directories() - deleting `{}`\", path.display());\n \n-        // Let's make it explicit that the file lock is released at this point,\n-        // or rather, that we held on to it until here\n-        mem::drop(lock);\n+    if let Err(err) = safe_remove_dir_all(&path) {\n+        sess.warn(&format!(\n+            \"Failed to garbage collect incremental compilation session directory `{}`: {}\",\n+            path.display(),\n+            err\n+        ));\n+    } else {\n+        delete_session_dir_lock_file(sess, &lock_file_path(&path));\n     }\n-\n-    Ok(())\n }\n \n fn all_except_most_recent("}, {"sha": "45cef479a4f43077414c211b65c7965742d4a254", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8939b8045b7af6076fb718e2e298844aaf4650/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=8e8939b8045b7af6076fb718e2e298844aaf4650", "patch": "@@ -153,7 +153,8 @@ fn encode_dep_graph(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n         let total_node_count = serialized_graph.nodes.len();\n         let total_edge_count = serialized_graph.edge_list_data.len();\n \n-        let mut counts: FxHashMap<_, Stat> = FxHashMap::default();\n+        let mut counts: FxHashMap<_, Stat> =\n+            FxHashMap::with_capacity_and_hasher(total_node_count, Default::default());\n \n         for (i, &node) in serialized_graph.nodes.iter_enumerated() {\n             let stat = counts.entry(node.kind).or_insert(Stat {\n@@ -170,14 +171,6 @@ fn encode_dep_graph(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n         let mut counts: Vec<_> = counts.values().cloned().collect();\n         counts.sort_by_key(|s| -(s.node_counter as i64));\n \n-        let percentage_of_all_nodes: Vec<f64> = counts\n-            .iter()\n-            .map(|s| (100.0 * (s.node_counter as f64)) / (total_node_count as f64))\n-            .collect();\n-\n-        let average_edges_per_kind: Vec<f64> =\n-            counts.iter().map(|s| (s.edge_counter as f64) / (s.node_counter as f64)).collect();\n-\n         println!(\"[incremental]\");\n         println!(\"[incremental] DepGraph Statistics\");\n \n@@ -207,13 +200,13 @@ fn encode_dep_graph(tcx: TyCtxt<'_>, encoder: &mut Encoder) {\n                   |------------------|\"\n         );\n \n-        for (i, stat) in counts.iter().enumerate() {\n+        for stat in counts.iter() {\n             println!(\n                 \"[incremental]  {:<36}|{:>16.1}% |{:>12} |{:>17.1} |\",\n                 format!(\"{:?}\", stat.kind),\n-                percentage_of_all_nodes[i],\n+                (100.0 * (stat.node_counter as f64)) / (total_node_count as f64), // percentage of all nodes\n                 stat.node_counter,\n-                average_edges_per_kind[i]\n+                (stat.edge_counter as f64) / (stat.node_counter as f64), // average edges per kind\n             );\n         }\n "}]}