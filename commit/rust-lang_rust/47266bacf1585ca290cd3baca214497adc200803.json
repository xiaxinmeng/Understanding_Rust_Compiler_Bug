{"sha": "47266bacf1585ca290cd3baca214497adc200803", "node_id": "C_kwDOAAsO6NoAKDQ3MjY2YmFjZjE1ODVjYTI5MGNkM2JhY2EyMTQ0OTdhZGMyMDA4MDM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-11T23:05:25Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-24T20:00:53Z"}, "message": "Return the actual `DefId` for assoc. items in `register_res`\n\nBefore, if `register_res` were called on an associated item or enum\nvariant, it would return the parent's `DefId`. Now, it returns the\nactual `DefId`.\n\nThis change is a step toward removing `Type::ResolvedPath.did` and\npotentially removing `kind_side_channel` in rustdoc. It also just\nsimplifies rustdoc's behavior.", "tree": {"sha": "1d2684aab3de61fe0291f78731b09c341aca90f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2684aab3de61fe0291f78731b09c341aca90f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47266bacf1585ca290cd3baca214497adc200803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47266bacf1585ca290cd3baca214497adc200803", "html_url": "https://github.com/rust-lang/rust/commit/47266bacf1585ca290cd3baca214497adc200803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47266bacf1585ca290cd3baca214497adc200803/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9", "html_url": "https://github.com/rust-lang/rust/commit/8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "78643841a0b1bb0bf2ec116c2f0ccfca5017f30f", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47266bacf1585ca290cd3baca214497adc200803/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47266bacf1585ca290cd3baca214497adc200803/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=47266bacf1585ca290cd3baca214497adc200803", "patch": "@@ -393,20 +393,12 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n     debug!(\"register_res({:?})\", res);\n \n     let (did, kind) = match res {\n-        Res::Def(DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst, i) => {\n-            // associated items are documented, but on the page of their parent\n-            (cx.tcx.parent(i).unwrap(), ItemType::Trait)\n-        }\n-        Res::Def(DefKind::Variant, i) => {\n-            // variant items are documented, but on the page of their parent\n-            (cx.tcx.parent(i).expect(\"cannot get parent def id\"), ItemType::Enum)\n-        }\n         // Each of these have their own page.\n         Res::Def(\n             kind\n             @\n-            (Fn | TyAlias | Enum | Trait | Struct | Union | Mod | ForeignTy | Const | Static\n-            | Macro(..) | TraitAlias),\n+            (AssocTy | AssocFn | AssocConst | Variant | Fn | TyAlias | Enum | Trait | Struct\n+            | Union | Mod | ForeignTy | Const | Static | Macro(..) | TraitAlias),\n             i,\n         ) => (i, kind.into()),\n         // This is part of a trait definition; document the trait."}, {"sha": "d4c5dda19f9ad1b8b62ba9e871e1f18003038914", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47266bacf1585ca290cd3baca214497adc200803/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47266bacf1585ca290cd3baca214497adc200803/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=47266bacf1585ca290cd3baca214497adc200803", "patch": "@@ -13,8 +13,10 @@ use rustc_attr::{ConstStability, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n+use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_target::spec::abi::Abi;\n@@ -502,7 +504,16 @@ crate fn href_with_root_path(\n     cx: &Context<'_>,\n     root_path: Option<&str>,\n ) -> Result<(String, ItemType, Vec<String>), HrefError> {\n-    let cache = &cx.cache();\n+    let tcx = cx.tcx();\n+    let def_kind = tcx.def_kind(did);\n+    let did = match def_kind {\n+        DefKind::AssocTy | DefKind::AssocFn | DefKind::AssocConst | DefKind::Variant => {\n+            // documented on their parent's page\n+            tcx.parent(did).unwrap()\n+        }\n+        _ => did,\n+    };\n+    let cache = cx.cache();\n     let relative_to = &cx.current;\n     fn to_module_fqp(shortty: ItemType, fqp: &[String]) -> &[String] {\n         if shortty == ItemType::Module { fqp } else { &fqp[..fqp.len() - 1] }"}]}