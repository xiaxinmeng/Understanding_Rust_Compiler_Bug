{"sha": "a4c0daab6d0995fe7d553f1c59e438a634628fe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YzBkYWFiNmQwOTk1ZmU3ZDU1M2YxYzU5ZTQzOGE2MzQ2MjhmZTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-11T03:48:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-11T05:14:10Z"}, "message": "Remove `LegacyBindingKind::MacroUse`.", "tree": {"sha": "05dcb5ff78bb3867cdd55d744c663de36e821e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05dcb5ff78bb3867cdd55d744c663de36e821e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c0daab6d0995fe7d553f1c59e438a634628fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c0daab6d0995fe7d553f1c59e438a634628fe4", "html_url": "https://github.com/rust-lang/rust/commit/a4c0daab6d0995fe7d553f1c59e438a634628fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c0daab6d0995fe7d553f1c59e438a634628fe4/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111caef9a32e37e89b3503b3c08cdb9f309268e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/111caef9a32e37e89b3503b3c08cdb9f309268e4", "html_url": "https://github.com/rust-lang/rust/commit/111caef9a32e37e89b3503b3c08cdb9f309268e4"}], "stats": {"total": 49, "additions": 15, "deletions": 34}, "files": [{"sha": "86ab077191eefd9429fcb24eb6a4e6d16e85eb58", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a4c0daab6d0995fe7d553f1c59e438a634628fe4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c0daab6d0995fe7d553f1c59e438a634628fe4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a4c0daab6d0995fe7d553f1c59e438a634628fe4", "patch": "@@ -75,12 +75,9 @@ impl<'a> LegacyScope<'a> {\n \n pub struct LegacyBinding<'a> {\n     parent: LegacyScope<'a>,\n-    kind: LegacyBindingKind,\n-}\n-\n-pub enum LegacyBindingKind {\n-    MacroRules(ast::Name, Rc<SyntaxExtension>, Span),\n-    MacroUse(LegacyImports),\n+    name: ast::Name,\n+    ext: Rc<SyntaxExtension>,\n+    span: Span,\n }\n \n pub type LegacyImports = FnvHashMap<ast::Name, (Rc<SyntaxExtension>, Span)>;\n@@ -123,10 +120,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n         if def.use_locally {\n             let invocation = self.invocations[&scope];\n-            let ext = Rc::new(macro_rules::compile(&self.session.parse_sess, &def));\n             let binding = self.arenas.alloc_legacy_binding(LegacyBinding {\n                 parent: invocation.legacy_scope.get(),\n-                kind: LegacyBindingKind::MacroRules(def.ident.name, ext, def.span),\n+                name: def.ident.name,\n+                ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n+                span: def.span,\n             });\n             invocation.legacy_scope.set(LegacyScope::Binding(binding));\n             self.macro_names.insert(def.ident.name);\n@@ -208,12 +206,6 @@ impl<'a> Resolver<'a> {\n                               name: ast::Name,\n                               record_used: bool)\n                               -> Option<Rc<SyntaxExtension>> {\n-        let check_shadowing = |this: &mut Self, relative_depth, scope, span| {\n-            if record_used && relative_depth > 0 {\n-                this.disallowed_shadowing.push((name, span, scope));\n-            }\n-        };\n-\n         let mut relative_depth: u32 = 0;\n         loop {\n             scope = match scope {\n@@ -227,29 +219,18 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n                 LegacyScope::Invocation(invocation) => {\n-                    let new_relative_depth = relative_depth.saturating_sub(1);\n-                    let mut scope = invocation.legacy_scope.get();\n-                    if let LegacyScope::Binding(binding) = scope {\n-                        match binding.kind {\n-                            LegacyBindingKind::MacroUse(ref imports) => {\n-                                if let Some(&(ref ext, span)) = imports.get(&name) {\n-                                    check_shadowing(self, relative_depth, binding.parent, span);\n-                                    return Some(ext.clone());\n-                                }\n-                            },\n-                            LegacyBindingKind::MacroRules(name_, ref ext, span) => {\n-                                if name_ == name {\n-                                    check_shadowing(self, new_relative_depth, binding.parent, span);\n-                                    return Some(ext.clone());\n-                                }\n-                            }\n+                    relative_depth = relative_depth.saturating_sub(1);\n+                    invocation.legacy_scope.get()\n+                }\n+                LegacyScope::Binding(binding) => {\n+                    if binding.name == name {\n+                        if record_used && relative_depth > 0 {\n+                            self.disallowed_shadowing.push((name, binding.span, binding.parent));\n                         }\n-                        scope = binding.parent\n+                        return Some(binding.ext.clone());\n                     }\n-                    relative_depth = new_relative_depth;\n-                    scope\n+                    binding.parent\n                 }\n-                _ => unreachable!(),\n             };\n         }\n "}]}