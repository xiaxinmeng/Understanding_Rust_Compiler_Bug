{"sha": "80a74bf580dc3ca30fd648969227603d4e96be3e", "node_id": "C_kwDOAAsO6NoAKDgwYTc0YmY1ODBkYzNjYTMwZmQ2NDg5NjkyMjc2MDNkNGU5NmJlM2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-09T05:58:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-09T05:58:08Z"}, "message": "Rollup merge of #99048 - TaKO8Ki:remove-type-string-comparison, r=compiler-errors\n\nRemove a string comparison about types", "tree": {"sha": "63664055de6eb5e8601d4806731477571f70a86e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63664055de6eb5e8601d4806731477571f70a86e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80a74bf580dc3ca30fd648969227603d4e96be3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyRjwCRBK7hj4Ov3rIwAA90gIAKIwBnxmbvf6X3fSPqlTeigW\n8ANN2TMAMfbMLqZobBJdUVfkGDDLU5gs8R6XWpoRqbfko+SZrZAp0PcfzNQYjrR7\neAty2orVpwuJPm7XMp5PIHIRkMYpLL9tFDxPv7+QkF5wKHZiEio70Ro0KENjK43X\nioW5Bmw81U9w5qrJMUayf/OfYm+2wDCIl4rKv4aPg+8XMf/t+LzaHNembNh7aDW/\nZVg1KPwOYT4PU3aEUNKGGaEQWjJ4su01bHKgvFX+Qfo3ioMNtl969W9vBfxSdqbn\nu7xKmr6HTAiQl7tbWh23p4xLgwG6SHX+pyK4DJAVUzX9o+3nSn1EhgYIBMx3ods=\n=X+Q3\n-----END PGP SIGNATURE-----\n", "payload": "tree 63664055de6eb5e8601d4806731477571f70a86e\nparent 6497130baa989a08b5ad9ab94ba1030e93232074\nparent 01893d880fab16e4cc21499e4edfc0998d29a85e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657346288 +0530\ncommitter GitHub <noreply@github.com> 1657346288 +0530\n\nRollup merge of #99048 - TaKO8Ki:remove-type-string-comparison, r=compiler-errors\n\nRemove a string comparison about types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80a74bf580dc3ca30fd648969227603d4e96be3e", "html_url": "https://github.com/rust-lang/rust/commit/80a74bf580dc3ca30fd648969227603d4e96be3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80a74bf580dc3ca30fd648969227603d4e96be3e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6497130baa989a08b5ad9ab94ba1030e93232074", "url": "https://api.github.com/repos/rust-lang/rust/commits/6497130baa989a08b5ad9ab94ba1030e93232074", "html_url": "https://github.com/rust-lang/rust/commit/6497130baa989a08b5ad9ab94ba1030e93232074"}, {"sha": "01893d880fab16e4cc21499e4edfc0998d29a85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01893d880fab16e4cc21499e4edfc0998d29a85e", "html_url": "https://github.com/rust-lang/rust/commit/01893d880fab16e4cc21499e4edfc0998d29a85e"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "863a981134f244966c8963c7318ae1d325edae99", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/80a74bf580dc3ca30fd648969227603d4e96be3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a74bf580dc3ca30fd648969227603d4e96be3e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=80a74bf580dc3ca30fd648969227603d4e96be3e", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::{\n use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -238,25 +237,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         );\n                     }\n                 }\n-            } else if found.to_string().starts_with(\"Option<\")\n-                && expected.to_string() == \"Option<&str>\"\n+            } else if let ty::Adt(found_adt, found_substs) = found.kind()\n+                && self.tcx.is_diagnostic_item(sym::Option, found_adt.did())\n+                && let ty::Adt(expected_adt, expected_substs) = expected.kind()\n+                && self.tcx.is_diagnostic_item(sym::Option, expected_adt.did())\n+                && let ty::Ref(_, inner_ty, _) = expected_substs.type_at(0).kind()\n+                && inner_ty.is_str()\n             {\n-                if let ty::Adt(_def, subst) = found.kind() {\n-                    if subst.len() != 0 {\n-                        if let GenericArgKind::Type(ty) = subst[0].unpack() {\n-                            let peeled = ty.peel_refs().to_string();\n-                            if peeled == \"String\" {\n-                                let ref_cnt = ty.to_string().len() - peeled.len();\n-                                let result = format!(\".map(|x| &*{}x)\", \"*\".repeat(ref_cnt));\n-                                err.span_suggestion_verbose(\n-                                    expr.span.shrink_to_hi(),\n-                                    \"try converting the passed type into a `&str`\",\n-                                    result,\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n-                        }\n-                    }\n+                let ty = found_substs.type_at(0);\n+                let mut peeled = ty;\n+                let mut ref_cnt = 0;\n+                while let ty::Ref(_, inner, _) = peeled.kind() {\n+                    peeled = *inner;\n+                    ref_cnt += 1;\n+                }\n+                if let ty::Adt(adt, _) = peeled.kind()\n+                    && self.tcx.is_diagnostic_item(sym::String, adt.did())\n+                {\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        \"try converting the passed type into a `&str`\",\n+                        format!(\".map(|x| &*{}x)\", \"*\".repeat(ref_cnt)),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             }\n         }"}]}