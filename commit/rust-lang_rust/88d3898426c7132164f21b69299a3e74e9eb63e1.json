{"sha": "88d3898426c7132164f21b69299a3e74e9eb63e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZDM4OTg0MjZjNzEzMjE2NGYyMWI2OTI5OWEzZTc0ZTllYjYzZTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-28T16:13:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-04-28T16:13:09Z"}, "message": "Fix dogfood tests", "tree": {"sha": "938f814be179296d120b06fad6514ee39f4bf2f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/938f814be179296d120b06fad6514ee39f4bf2f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88d3898426c7132164f21b69299a3e74e9eb63e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88d3898426c7132164f21b69299a3e74e9eb63e1", "html_url": "https://github.com/rust-lang/rust/commit/88d3898426c7132164f21b69299a3e74e9eb63e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88d3898426c7132164f21b69299a3e74e9eb63e1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3084cc08512a1a97c283541155b04e45a88c4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3084cc08512a1a97c283541155b04e45a88c4bc", "html_url": "https://github.com/rust-lang/rust/commit/e3084cc08512a1a97c283541155b04e45a88c4bc"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "6dedbe4b673e075b17f565af2b9528c4af7c7f1c", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88d3898426c7132164f21b69299a3e74e9eb63e1/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88d3898426c7132164f21b69299a3e74e9eb63e1/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=88d3898426c7132164f21b69299a3e74e9eb63e1", "patch": "@@ -52,14 +52,12 @@ impl LintPass for EqOp {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(ref op, ref left, ref right) = e.node {\n-            if is_valid_operator(op) {\n-                if SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {\n-                    span_lint(cx,\n-                              EQ_OP,\n-                              e.span,\n-                              &format!(\"equal expressions as operands to `{}`\", op.node.as_str()));\n-                    return;\n-                }\n+            if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {\n+                span_lint(cx,\n+                            EQ_OP,\n+                            e.span,\n+                            &format!(\"equal expressions as operands to `{}`\", op.node.as_str()));\n+                return;\n             }\n             let (trait_id, requires_ref) = match op.node {\n                 BiAdd => (cx.tcx.lang_items.add_trait(), false),"}]}