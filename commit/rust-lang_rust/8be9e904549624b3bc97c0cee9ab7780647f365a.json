{"sha": "8be9e904549624b3bc97c0cee9ab7780647f365a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZTllOTA0NTQ5NjI0YjNiYzk3YzBjZWU5YWI3NzgwNjQ3ZjM2NWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:57:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T18:57:52Z"}, "message": "Rollup merge of #66633 - GuillaumeGomez:err-codes-cleanup, r=Dylan-DPC\n\nError code's long explanation cleanup\n\nContinuing to clean up the error code's long explanation.\n\nr? @Dylan-DPC", "tree": {"sha": "66218fb0f496abe38e7a1b0ef2c9396f4976b24e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66218fb0f496abe38e7a1b0ef2c9396f4976b24e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be9e904549624b3bc97c0cee9ab7780647f365a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2C+xCRBK7hj4Ov3rIwAAdHIIAH0Mhr/pYHOXSJ3ho/h5TXkx\naYC5mAlLz4WsC/upFVbxEe1slTOSrlHJ5Gr8S9vLVw5KvTAoMaED+P7m5ydhez1A\nBc/UdaKK3n5fgWb2udiwyMFCmBE9p/ZgNaW1S5TGGhZPPlFMvdQD9Wv5Od24orQ+\nfonqwVKNYzUkKa24bP/Vi7j5osjKHQCYSm9Cf3OlMXNM50jNoMAcXmLaCWajINdb\ndot8mTvKOEsy9ZZ/6SUmpH1wLYfktzf/wJ3GzWhhn9CuEj5wec9rA4XRWcQzcyj+\nbQxsXjtYY+whReT3jtanNnida7h1qQQ2tBx2+BbfA/BfPXcHi8bZsVuWGYOIxHA=\n=6EVv\n-----END PGP SIGNATURE-----\n", "payload": "tree 66218fb0f496abe38e7a1b0ef2c9396f4976b24e\nparent a699945ead1d14eec0bba7186703c6715c4ed804\nparent a8de11cdd5c20a75d3cef4c7a322d29539b7bda2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574449072 +0100\ncommitter GitHub <noreply@github.com> 1574449072 +0100\n\nRollup merge of #66633 - GuillaumeGomez:err-codes-cleanup, r=Dylan-DPC\n\nError code's long explanation cleanup\n\nContinuing to clean up the error code's long explanation.\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be9e904549624b3bc97c0cee9ab7780647f365a", "html_url": "https://github.com/rust-lang/rust/commit/8be9e904549624b3bc97c0cee9ab7780647f365a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be9e904549624b3bc97c0cee9ab7780647f365a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a699945ead1d14eec0bba7186703c6715c4ed804", "url": "https://api.github.com/repos/rust-lang/rust/commits/a699945ead1d14eec0bba7186703c6715c4ed804", "html_url": "https://github.com/rust-lang/rust/commit/a699945ead1d14eec0bba7186703c6715c4ed804"}, {"sha": "a8de11cdd5c20a75d3cef4c7a322d29539b7bda2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8de11cdd5c20a75d3cef4c7a322d29539b7bda2", "html_url": "https://github.com/rust-lang/rust/commit/a8de11cdd5c20a75d3cef4c7a322d29539b7bda2"}], "stats": {"total": 71, "additions": 54, "deletions": 17}, "files": [{"sha": "361cb425809d7a1f06d8b1ca00cd8cbe2b8c61c0", "filename": "src/librustc_error_codes/error_codes/E0015.md", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0015.md", "raw_url": "https://github.com/rust-lang/rust/raw/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0015.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0015.md?ref=8be9e904549624b3bc97c0cee9ab7780647f365a", "patch": "@@ -1,14 +1,32 @@\n-The only functions that can be called in static or constant expressions are\n-`const` functions, and struct/enum constructors. `const` functions are only\n-available on a nightly compiler. Rust currently does not support more general\n-compile-time function execution.\n+A constant item was initialized with something that is not a constant expression.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0015\n+fn create_some() -> Option<u8> {\n+    Some(1)\n+}\n \n+const FOO: Option<u8> = create_some(); // error!\n ```\n-const FOO: Option<u8> = Some(1); // enum constructor\n-struct Bar {x: u8}\n-const BAR: Bar = Bar {x: 1}; // struct constructor\n+\n+The only functions that can be called in static or constant expressions are\n+`const` functions, and struct/enum constructors.\n+\n+To fix this error, you can declare `create_some` as a constant function:\n+\n ```\n+const fn create_some() -> Option<u8> { // declared as a const function\n+    Some(1)\n+}\n \n-See [RFC 911] for more details on the design of `const fn`s.\n+const FOO: Option<u8> = create_some(); // ok!\n \n-[RFC 911]: https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\n+// These are also working:\n+struct Bar {\n+    x: u8,\n+}\n+\n+const OTHER_FOO: Option<u8> = Some(1);\n+const BAR: Bar = Bar {x: 1};\n+```"}, {"sha": "c1d85705da3a94b02c60b61bc124480f0ac921f1", "filename": "src/librustc_error_codes/error_codes/E0023.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0023.md", "raw_url": "https://github.com/rust-lang/rust/raw/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0023.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0023.md?ref=8be9e904549624b3bc97c0cee9ab7780647f365a", "patch": "@@ -2,11 +2,18 @@ A pattern attempted to extract an incorrect number of fields from a variant.\n \n Erroneous code example:\n \n-```\n+```compile_fail,E0023\n enum Fruit {\n     Apple(String, String),\n     Pear(u32),\n }\n+\n+let x = Fruit::Apple(String::new(), String::new());\n+\n+match x {\n+    Fruit::Apple(a) => {}, // error!\n+    _ => {}\n+}\n ```\n \n A pattern used to match against an enum variant must provide a sub-pattern for"}, {"sha": "735a2d1f3fe85cbe9216790c44587fc7fd365412", "filename": "src/librustc_error_codes/error_codes/E0033.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0033.md", "raw_url": "https://github.com/rust-lang/rust/raw/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0033.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0033.md?ref=8be9e904549624b3bc97c0cee9ab7780647f365a", "patch": "@@ -24,4 +24,4 @@ dereferencing the pointer.\n You can read more about trait objects in the [Trait Objects] section of the\n Reference.\n \n-[Trait Objects]: https://doc.rust-lang.org/reference/types.html#trait-objects\n\\ No newline at end of file\n+[Trait Objects]: https://doc.rust-lang.org/reference/types.html#trait-objects"}, {"sha": "25e380b02e647f0a1d7b45e43cd87ec142cb796c", "filename": "src/librustc_error_codes/error_codes/E0038.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0038.md", "raw_url": "https://github.com/rust-lang/rust/raw/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0038.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0038.md?ref=8be9e904549624b3bc97c0cee9ab7780647f365a", "patch": "@@ -62,7 +62,7 @@ cause this problem.)\n In such a case, the compiler cannot predict the return type of `foo()` in a\n situation like the following:\n \n-```compile_fail\n+```compile_fail,E0038\n trait Trait {\n     fn foo(&self) -> Self;\n }\n@@ -183,7 +183,7 @@ fn call_foo(thing: Box<Trait>) {\n \n We don't just need to create a table of all implementations of all methods of\n `Trait`, we need to create such a table, for each different type fed to\n-`foo()`. In this case this turns out to be (10 types implementing `Trait`)*(3\n+`foo()`. In this case this turns out to be (10 types implementing `Trait`)\\*(3\n types being fed to `foo()`) = 30 implementations!\n \n With real world traits these numbers can grow drastically."}, {"sha": "bb5e4b48d2debee167ef664ff0381a1f5a52270d", "filename": "src/librustc_error_codes/error_codes/E0057.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0057.md", "raw_url": "https://github.com/rust-lang/rust/raw/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0057.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0057.md?ref=8be9e904549624b3bc97c0cee9ab7780647f365a", "patch": "@@ -1,8 +1,6 @@\n-When invoking closures or other implementations of the function traits `Fn`,\n-`FnMut` or `FnOnce` using call notation, the number of parameters passed to the\n-function must match its definition.\n+An invalid number of arguments was given when calling a closure.\n \n-An example using a closure:\n+Erroneous code example:\n \n ```compile_fail,E0057\n let f = |x| x * 3;\n@@ -11,6 +9,10 @@ let b = f(4);       // this works!\n let c = f(2, 3);    // invalid, too many parameters\n ```\n \n+When invoking closures or other implementations of the function traits `Fn`,\n+`FnMut` or `FnOnce` using call notation, the number of parameters passed to the\n+function must match its definition.\n+\n A generic function must be treated similarly:\n \n ```"}, {"sha": "143251c13b069dd7bec12b8a5eb2fa6828b0eeea", "filename": "src/librustc_error_codes/error_codes/E0061.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0061.md", "raw_url": "https://github.com/rust-lang/rust/raw/8be9e904549624b3bc97c0cee9ab7780647f365a/src%2Flibrustc_error_codes%2Ferror_codes%2FE0061.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0061.md?ref=8be9e904549624b3bc97c0cee9ab7780647f365a", "patch": "@@ -1,3 +1,13 @@\n+An invalid number of arguments was passed when calling a function.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0061\n+fn f(u: i32) {}\n+\n+f(); // error!\n+```\n+\n The number of arguments passed to a function must match the number of arguments\n specified in the function signature.\n "}]}