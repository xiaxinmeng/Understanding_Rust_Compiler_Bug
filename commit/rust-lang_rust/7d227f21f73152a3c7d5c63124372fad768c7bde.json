{"sha": "7d227f21f73152a3c7d5c63124372fad768c7bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjI3ZjIxZjczMTUyYTNjN2Q1YzYzMTI0MzcyZmFkNzY4YzdiZGU=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-08T13:19:15Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-04-08T13:19:15Z"}, "message": "Check metadata hash when loading transitive dependent crates\n\nFix issue #2138", "tree": {"sha": "b5823434962e52a452126424789e6e33ce03ba52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5823434962e52a452126424789e6e33ce03ba52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d227f21f73152a3c7d5c63124372fad768c7bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d227f21f73152a3c7d5c63124372fad768c7bde", "html_url": "https://github.com/rust-lang/rust/commit/7d227f21f73152a3c7d5c63124372fad768c7bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d227f21f73152a3c7d5c63124372fad768c7bde/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18597b22b590cbd2ce223fb43451b4fc1a7ca847", "url": "https://api.github.com/repos/rust-lang/rust/commits/18597b22b590cbd2ce223fb43451b4fc1a7ca847", "html_url": "https://github.com/rust-lang/rust/commit/18597b22b590cbd2ce223fb43451b4fc1a7ca847"}], "stats": {"total": 82, "additions": 58, "deletions": 24}, "files": [{"sha": "435a31994eadbd0602dddef976b385b1855d3285", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7d227f21f73152a3c7d5c63124372fad768c7bde/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d227f21f73152a3c7d5c63124372fad768c7bde/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=7d227f21f73152a3c7d5c63124372fad768c7bde", "patch": "@@ -34,6 +34,7 @@ fn read_crates(sess: session::session, crate: ast::crate) {\n type cache_entry = {\n     cnum: int,\n     span: span,\n+    hash: str,\n     metas: @[@ast::meta_item]\n };\n \n@@ -77,7 +78,7 @@ type env = @{sess: session::session,\n fn visit_view_item(e: env, i: @ast::view_item) {\n     alt i.node {\n       ast::view_item_use(ident, meta_items, id) {\n-        let cnum = resolve_crate(e, ident, meta_items, i.span);\n+        let cnum = resolve_crate(e, ident, meta_items, \"\", i.span);\n         cstore::add_use_stmt_cnum(e.sess.cstore, id, cnum);\n       }\n       _ { }\n@@ -140,9 +141,14 @@ fn list_file_metadata(sess: session::session, path: str, out: io::writer) {\n     }\n }\n \n-fn crate_matches(crate_data: @[u8], metas: [@ast::meta_item]) -> bool {\n+fn crate_matches(crate_data: @[u8], metas: [@ast::meta_item], hash: str) ->\n+    bool {\n     let attrs = decoder::get_crate_attributes(crate_data);\n     let linkage_metas = attr::find_linkage_metas(attrs);\n+    if hash.is_not_empty() {\n+        let chash = decoder::get_crate_hash(crate_data);\n+        if chash != hash { ret false; }\n+    }\n     metadata_matches(linkage_metas, metas)\n }\n \n@@ -194,30 +200,30 @@ fn crate_name_from_metas(metas: [@ast::meta_item]) -> str {\n }\n \n fn find_library_crate(sess: session::session, span: span,\n-                      metas: [@ast::meta_item])\n+                      metas: [@ast::meta_item], hash: str)\n    -> option<{ident: str, data: @[u8]}> {\n \n     attr::require_unique_names(sess.diagnostic(), metas);\n     let metas = metas;\n-    let crate_name = crate_name_from_metas(metas);\n \n     let nn = default_native_lib_naming(sess, sess.opts.static);\n     let x =\n-        find_library_crate_aux(sess, span, nn, crate_name,\n-                               metas, sess.filesearch);\n+        find_library_crate_aux(sess, span, nn,\n+                               metas, hash, sess.filesearch);\n     if x != none || sess.opts.static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(sess, span, nn2, crate_name, metas,\n+    ret find_library_crate_aux(sess, span, nn2, metas, hash,\n                                sess.filesearch);\n }\n \n fn find_library_crate_aux(sess: session::session,\n                           span: span,\n                           nn: {prefix: str, suffix: str},\n-                          crate_name: str,\n                           metas: [@ast::meta_item],\n+                          hash: str,\n                           filesearch: filesearch::filesearch) ->\n    option<{ident: str, data: @[u8]}> {\n+    let crate_name = crate_name_from_metas(metas);\n     let prefix: str = nn.prefix + crate_name + \"-\";\n     let suffix: str = nn.suffix;\n \n@@ -233,7 +239,7 @@ fn find_library_crate_aux(sess: session::session,\n             #debug(\"%s is a candidate\", path);\n             alt get_metadata_section(sess, path) {\n               option::some(cvec) {\n-                if !crate_matches(cvec, metas) {\n+                if !crate_matches(cvec, metas, hash) {\n                     #debug(\"skipping %s, metadata doesn't match\", path);\n                     option::none\n                 } else {\n@@ -302,11 +308,11 @@ fn get_metadata_section(sess: session::session,\n }\n \n fn load_library_crate(sess: session::session, ident: ast::ident, span: span,\n-                      metas: [@ast::meta_item])\n+                      metas: [@ast::meta_item], hash: str)\n    -> {ident: str, data: @[u8]} {\n \n \n-    alt find_library_crate(sess, span, metas) {\n+    alt find_library_crate(sess, span, metas, hash) {\n       some(t) { ret t; }\n       none {\n         sess.span_fatal(span, #fmt[\"can't find crate for '%s'\", ident]);\n@@ -329,32 +335,36 @@ fn metas_with_ident(ident: ast::ident,\n     metas_with(ident, \"name\", metas)\n }\n \n-fn existing_match(e: env, metas: [@ast::meta_item]) -> option<int> {\n+fn existing_match(e: env, metas: [@ast::meta_item], hash: str) ->\n+    option<int> {\n     let maybe_entry = e.crate_cache.find {|c|\n-        metadata_matches(*c.metas, metas)\n+        metadata_matches(*c.metas, metas) &&\n+            (hash.is_empty() || c.hash == hash)\n     };\n \n     maybe_entry.map {|c| c.cnum }\n }\n \n fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n-                 span: span) -> ast::crate_num {\n+                 hash: str, span: span) -> ast::crate_num {\n     let metas = metas_with_ident(ident, metas);\n \n-    alt existing_match(e, metas) {\n+    alt existing_match(e, metas, hash) {\n       none {\n         let cinfo =\n-            load_library_crate(e.sess, ident, span, metas);\n+            load_library_crate(e.sess, ident, span, metas, hash);\n \n         let cfilename = cinfo.ident;\n         let cdata = cinfo.data;\n \n         let attrs = decoder::get_crate_attributes(cdata);\n         let linkage_metas = attr::find_linkage_metas(attrs);\n+        let hash = decoder::get_crate_hash(cdata);\n \n         // Claim this crate number and cache it\n         let cnum = e.next_crate_num;\n-        e.crate_cache += [{cnum: cnum, span: span, metas: @linkage_metas}];\n+        e.crate_cache += [{cnum: cnum, span: span,\n+                           hash: hash, metas: @linkage_metas}];\n         e.next_crate_num += 1;\n \n         // Now resolve the crates referenced by this crate\n@@ -387,12 +397,10 @@ fn resolve_crate_deps(e: env, cdata: @[u8]) -> cstore::cnum_map {\n     for decoder::get_crate_deps(cdata).each {|dep|\n         let extrn_cnum = dep.cnum;\n         let cname = dep.name;\n-        let cvers = dep.vers;\n-        // FIXME: We really need to know the linkage metas of our transitive\n-        // dependencies in order to resolve them correctly.\n-        let cmetas = metas_with(cvers, \"vers\", []);\n-        #debug(\"resolving dep %s ver: %s\", cname, dep.vers);\n-        alt existing_match(e, metas_with_ident(cname, cmetas)) {\n+        let cmetas = metas_with(dep.vers, \"vers\", []);\n+        #debug(\"resolving dep crate %s ver: %s hash: %s\",\n+               dep.name, dep.vers, dep.hash);\n+        alt existing_match(e, metas_with_ident(cname, cmetas), dep.hash) {\n           some(local_cnum) {\n             #debug(\"already have it\");\n             // We've already seen this crate\n@@ -403,7 +411,8 @@ fn resolve_crate_deps(e: env, cdata: @[u8]) -> cstore::cnum_map {\n             // This is a new one so we've got to load it\n             // FIXME: Need better error reporting than just a bogus span\n             let fake_span = ast_util::dummy_sp();\n-            let local_cnum = resolve_crate(e, cname, cmetas, fake_span);\n+            let local_cnum =\n+                resolve_crate(e, cname, cmetas, dep.hash, fake_span);\n             cnum_map.insert(extrn_cnum, local_cnum);\n           }\n         }"}, {"sha": "5b024479930638428576281989bcbe4c49ce2378", "filename": "src/test/auxiliary/crateresolve7x.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d227f21f73152a3c7d5c63124372fad768c7bde/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d227f21f73152a3c7d5c63124372fad768c7bde/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs?ref=7d227f21f73152a3c7d5c63124372fad768c7bde", "patch": "@@ -0,0 +1,14 @@\n+// xfail-fast\n+// aux-build:crateresolve6-1.rs\n+// aux-build:crateresolve6-2.rs\n+\n+// These both have the same version but differ in other metadata\n+mod a {\n+    use cr6_1 (name = \"crateresolve6\", vers = \"0.1\", calories=\"100\");\n+    fn f() -> int { cr6_1::f() }\n+}\n+\n+mod b {\n+    use cr6_2 (name = \"crateresolve6\", vers = \"0.1\", calories=\"200\");\n+    fn f() -> int { cr6_2::f() }\n+}"}, {"sha": "7be57dbaacdd7b7b571f0f1aa5bcec7c8c46370c", "filename": "src/test/run-pass/crateresolve7.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d227f21f73152a3c7d5c63124372fad768c7bde/src%2Ftest%2Frun-pass%2Fcrateresolve7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d227f21f73152a3c7d5c63124372fad768c7bde/src%2Ftest%2Frun-pass%2Fcrateresolve7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve7.rs?ref=7d227f21f73152a3c7d5c63124372fad768c7bde", "patch": "@@ -0,0 +1,11 @@\n+// xfail-fast\n+// aux-build:crateresolve6-1.rs\n+// aux-build:crateresolve6-2.rs\n+// aux-build:crateresolve7x.rs\n+\n+use crateresolve7x;\n+\n+fn main() {\n+    assert crateresolve7x::a::f() == 100;\n+    assert crateresolve7x::b::f() == 200;\n+}"}]}