{"sha": "01e701828c6010873def5d79191319a6b37a6b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTcwMTgyOGM2MDEwODczZGVmNWQ3OTE5MTMxOWE2YjM3YTZiMzI=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-04-14T04:09:41Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-04-14T04:20:59Z"}, "message": "BufWriter: improve safety comment", "tree": {"sha": "5469e8711a11a2af57e1af84d3af8bffb97e1c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5469e8711a11a2af57e1af84d3af8bffb97e1c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e701828c6010873def5d79191319a6b37a6b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e701828c6010873def5d79191319a6b37a6b32", "html_url": "https://github.com/rust-lang/rust/commit/01e701828c6010873def5d79191319a6b37a6b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e701828c6010873def5d79191319a6b37a6b32/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f29dc40f837b0a491d183ef05dd00eb78b6be1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f29dc40f837b0a491d183ef05dd00eb78b6be1d", "html_url": "https://github.com/rust-lang/rust/commit/0f29dc40f837b0a491d183ef05dd00eb78b6be1d"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "ef2769d431fbbbd9bba5246059d3d3918cc7303d", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01e701828c6010873def5d79191319a6b37a6b32/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e701828c6010873def5d79191319a6b37a6b32/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=01e701828c6010873def5d79191319a6b37a6b32", "patch": "@@ -366,9 +366,11 @@ impl<W: Write> BufWriter<W> {\n             // exactly. Doing otherwise would mean flushing the buffer, then writing this\n             // input to the inner writer, which in many cases would be a worse strategy.\n \n-            // SAFETY: We just called `self.flush_buf()`, so `self.buf.len()` is 0, and\n-            // we entered this else block because `buf.len() < self.buf.capacity()`.\n-            // Therefore, `buf.len() <= self.buf.capacity() - self.buf.len()`.\n+            // SAFETY: There was either enough spare capacity already, or there wasn't and we\n+            // flushed the buffer to ensure that there is. In the latter case, we know that there\n+            // is because flushing ensured that our entire buffer is spare capacity, and we entered\n+            // this block because the input buffer length is less than that capacity. In either\n+            // case, it's safe to write the input buffer to our buffer.\n             unsafe {\n                 self.write_to_buffer_unchecked(buf);\n             }\n@@ -406,9 +408,11 @@ impl<W: Write> BufWriter<W> {\n             // exactly. Doing otherwise would mean flushing the buffer, then writing this\n             // input to the inner writer, which in many cases would be a worse strategy.\n \n-            // SAFETY: We just called `self.flush_buf()`, so `self.buf.len()` is 0, and\n-            // we entered this else block because `buf.len() < self.buf.capacity()`.\n-            // Therefore, `buf.len() <= self.buf.capacity() - self.buf.len()`.\n+            // SAFETY: There was either enough spare capacity already, or there wasn't and we\n+            // flushed the buffer to ensure that there is. In the latter case, we know that there\n+            // is because flushing ensured that our entire buffer is spare capacity, and we entered\n+            // this block because the input buffer length is less than that capacity. In either\n+            // case, it's safe to write the input buffer to our buffer.\n             unsafe {\n                 self.write_to_buffer_unchecked(buf);\n             }"}]}