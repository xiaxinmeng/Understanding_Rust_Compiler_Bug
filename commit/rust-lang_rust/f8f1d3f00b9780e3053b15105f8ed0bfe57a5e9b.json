{"sha": "f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b", "node_id": "C_kwDOAAsO6NoAKGY4ZjFkM2YwMGI5NzgwZTMwNTNiMTUxMDVmOGVkMGJmZTU3YTVlOWI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-07T04:55:39Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-22T00:05:54Z"}, "message": "Split `TokenCursor::{next,next_desugared}` into inlined and non-inlined halves.", "tree": {"sha": "72b6e9629bc5b84ca1159abefe3d04e9637fe752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b6e9629bc5b84ca1159abefe3d04e9637fe752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b", "html_url": "https://github.com/rust-lang/rust/commit/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e700a023c2706136012c39cc30d8bf431d83f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e700a023c2706136012c39cc30d8bf431d83f0a", "html_url": "https://github.com/rust-lang/rust/commit/4e700a023c2706136012c39cc30d8bf431d83f0a"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "f0ec86ca64ad6cc5e31002811f6e46f2a416b1b8", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b", "patch": "@@ -100,11 +100,12 @@ rustc_data_structures::static_assert_size!(LazyTokenStreamImpl, 144);\n \n impl CreateTokenStream for LazyTokenStreamImpl {\n     fn create_token_stream(&self) -> AttrAnnotatedTokenStream {\n-        // The token produced by the final call to `next` or `next_desugared`\n-        // was not actually consumed by the callback. The combination\n-        // of chaining the initial token and using `take` produces the desired\n-        // result - we produce an empty `TokenStream` if no calls were made,\n-        // and omit the final token otherwise.\n+        // The token produced by the final call to `{,inlined_}next` or\n+        // `{,inlined_}next_desugared` was not actually consumed by the\n+        // callback. The combination of chaining the initial token and using\n+        // `take` produces the desired result - we produce an empty\n+        // `TokenStream` if no calls were made, and omit the final token\n+        // otherwise.\n         let mut cursor_snapshot = self.cursor_snapshot.clone();\n         let tokens =\n             std::iter::once((FlatToken::Token(self.start_token.0.clone()), self.start_token.1))"}, {"sha": "3a2f193d31938eb3f3daff6a8e0d3c1df53c3668", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=f8f1d3f00b9780e3053b15105f8ed0bfe57a5e9b", "patch": "@@ -206,8 +206,9 @@ struct TokenCursor {\n     frame: TokenCursorFrame,\n     stack: Vec<TokenCursorFrame>,\n     desugar_doc_comments: bool,\n-    // Counts the number of calls to `next` or `next_desugared`,\n-    // depending on whether `desugar_doc_comments` is set.\n+    // Counts the number of calls to `{,inlined_}next` or\n+    // `{,inlined_}next_desugared`, depending on whether\n+    // `desugar_doc_comments` is set.\n     num_next_calls: usize,\n     // During parsing, we may sometimes need to 'unglue' a\n     // glued token into two component tokens\n@@ -256,6 +257,12 @@ impl TokenCursorFrame {\n \n impl TokenCursor {\n     fn next(&mut self) -> (Token, Spacing) {\n+        self.inlined_next()\n+    }\n+\n+    /// This always-inlined version should only be used on hot code paths.\n+    #[inline(always)]\n+    fn inlined_next(&mut self) -> (Token, Spacing) {\n         loop {\n             let (tree, spacing) = if !self.frame.open_delim {\n                 self.frame.open_delim = true;\n@@ -285,7 +292,13 @@ impl TokenCursor {\n     }\n \n     fn next_desugared(&mut self) -> (Token, Spacing) {\n-        let (data, attr_style, sp) = match self.next() {\n+        self.inlined_next_desugared()\n+    }\n+\n+    /// This always-inlined version should only be used on hot code paths.\n+    #[inline(always)]\n+    fn inlined_next_desugared(&mut self) -> (Token, Spacing) {\n+        let (data, attr_style, sp) = match self.inlined_next() {\n             (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {\n                 (data, attr_style, span)\n             }\n@@ -467,9 +480,9 @@ impl<'a> Parser<'a> {\n     fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {\n         loop {\n             let (mut next, spacing) = if self.desugar_doc_comments {\n-                self.token_cursor.next_desugared()\n+                self.token_cursor.inlined_next_desugared()\n             } else {\n-                self.token_cursor.next()\n+                self.token_cursor.inlined_next()\n             };\n             self.token_cursor.num_next_calls += 1;\n             // We've retrieved an token from the underlying"}]}