{"sha": "e4812583c70db2259b952829a7412dea96c5afdd", "node_id": "C_kwDOAAsO6NoAKGU0ODEyNTgzYzcwZGIyMjU5Yjk1MjgyOWE3NDEyZGVhOTZjNWFmZGQ", "commit": {"author": {"name": "Yutaro Ohno", "email": "yutaro.ono.418@gmail.com", "date": "2022-12-03T14:37:23Z"}, "committer": {"name": "Yutaro Ohno", "email": "yutaro.ono.418@gmail.com", "date": "2022-12-03T14:41:42Z"}, "message": "parser: refactoring on recovery from invalid variable declarations\n\nPreviously, the `recover_local_after_let` function was called from the\nbody of the `recover_stmt_local` function. Unifying these two functions\nmake it more simple and more readable.", "tree": {"sha": "e2d5be24e3f0abc8056cfa6a2a25c36e0aabe155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2d5be24e3f0abc8056cfa6a2a25c36e0aabe155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4812583c70db2259b952829a7412dea96c5afdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4812583c70db2259b952829a7412dea96c5afdd", "html_url": "https://github.com/rust-lang/rust/commit/e4812583c70db2259b952829a7412dea96c5afdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4812583c70db2259b952829a7412dea96c5afdd/comments", "author": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohno418", "id": 24674436, "node_id": "MDQ6VXNlcjI0Njc0NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/24674436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohno418", "html_url": "https://github.com/ohno418", "followers_url": "https://api.github.com/users/ohno418/followers", "following_url": "https://api.github.com/users/ohno418/following{/other_user}", "gists_url": "https://api.github.com/users/ohno418/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohno418/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohno418/subscriptions", "organizations_url": "https://api.github.com/users/ohno418/orgs", "repos_url": "https://api.github.com/users/ohno418/repos", "events_url": "https://api.github.com/users/ohno418/events{/privacy}", "received_events_url": "https://api.github.com/users/ohno418/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "690addc6ecc575f6b9df5e2fc09bd119e51e6194", "url": "https://api.github.com/repos/rust-lang/rust/commits/690addc6ecc575f6b9df5e2fc09bd119e51e6194", "html_url": "https://github.com/rust-lang/rust/commit/690addc6ecc575f6b9df5e2fc09bd119e51e6194"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "42197e6379749a264c325dbb332a41926754b515", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e4812583c70db2259b952829a7412dea96c5afdd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4812583c70db2259b952829a7412dea96c5afdd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=e4812583c70db2259b952829a7412dea96c5afdd", "patch": "@@ -73,13 +73,21 @@ impl<'a> Parser<'a> {\n         Ok(Some(if self.token.is_keyword(kw::Let) {\n             self.parse_local_mk(lo, attrs, capture_semi, force_collect)?\n         } else if self.is_kw_followed_by_ident(kw::Mut) && self.may_recover() {\n-            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::MissingLet)?\n+            self.recover_stmt_local_after_let(lo, attrs, InvalidVariableDeclarationSub::MissingLet)?\n         } else if self.is_kw_followed_by_ident(kw::Auto) && self.may_recover() {\n             self.bump(); // `auto`\n-            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::UseLetNotAuto)?\n+            self.recover_stmt_local_after_let(\n+                lo,\n+                attrs,\n+                InvalidVariableDeclarationSub::UseLetNotAuto,\n+            )?\n         } else if self.is_kw_followed_by_ident(sym::var) && self.may_recover() {\n             self.bump(); // `var`\n-            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::UseLetNotVar)?\n+            self.recover_stmt_local_after_let(\n+                lo,\n+                attrs,\n+                InvalidVariableDeclarationSub::UseLetNotVar,\n+            )?\n         } else if self.check_path() && !self.token.is_qpath_start() && !self.is_path_start_item() {\n             // We have avoided contextual keywords like `union`, items with `crate` visibility,\n             // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n@@ -213,13 +221,21 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn recover_stmt_local(\n+    fn recover_stmt_local_after_let(\n         &mut self,\n         lo: Span,\n         attrs: AttrWrapper,\n         subdiagnostic: fn(Span) -> InvalidVariableDeclarationSub,\n     ) -> PResult<'a, Stmt> {\n-        let stmt = self.recover_local_after_let(lo, attrs)?;\n+        let stmt =\n+            self.collect_tokens_trailing_token(attrs, ForceCollect::Yes, |this, attrs| {\n+                let local = this.parse_local(attrs)?;\n+                // FIXME - maybe capture semicolon in recovery?\n+                Ok((\n+                    this.mk_stmt(lo.to(this.prev_token.span), StmtKind::Local(local)),\n+                    TrailingToken::None,\n+                ))\n+            })?;\n         self.sess.emit_err(InvalidVariableDeclaration { span: lo, sub: subdiagnostic(lo) });\n         Ok(stmt)\n     }\n@@ -243,17 +259,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn recover_local_after_let(&mut self, lo: Span, attrs: AttrWrapper) -> PResult<'a, Stmt> {\n-        self.collect_tokens_trailing_token(attrs, ForceCollect::Yes, |this, attrs| {\n-            let local = this.parse_local(attrs)?;\n-            // FIXME - maybe capture semicolon in recovery?\n-            Ok((\n-                this.mk_stmt(lo.to(this.prev_token.span), StmtKind::Local(local)),\n-                TrailingToken::None,\n-            ))\n-        })\n-    }\n-\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;"}]}