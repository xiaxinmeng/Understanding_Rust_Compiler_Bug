{"sha": "ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhM2Q0NjVjOTVjZTAyN2FhYmZlNzQyM2MzZDlmMjE2MWJkYzJlYjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-05T17:37:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:55Z"}, "message": "Move try_load_from_on_disk_cache to the QueryContext.", "tree": {"sha": "fc382855af836cfe80b2fe608e054a016cd08a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc382855af836cfe80b2fe608e054a016cd08a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "html_url": "https://github.com/rust-lang/rust/commit/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbf83a2091bea4027f0e6eae43c991f06ff46b9", "html_url": "https://github.com/rust-lang/rust/commit/4dbf83a2091bea4027f0e6eae43c991f06ff46b9"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "14a10e84e9cd49e55f49e5503bd2f44d761be51b", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -138,7 +138,7 @@ pub struct DepKindStruct {\n     pub(super) force_from_dep_node: fn(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool,\n \n     /// Invoke a query to put the on-disk cached value in memory.\n-    pub(super) try_load_from_on_disk_cache: fn(TyCtxt<'_>, &DepNode),\n+    pub(crate) try_load_from_on_disk_cache: fn(QueryCtxt<'_>, &DepNode),\n }\n \n impl std::ops::Deref for DepKind {\n@@ -273,7 +273,7 @@ pub mod dep_kind {\n                     false\n                 }\n \n-                fn try_load_from_on_disk_cache(tcx: TyCtxt<'_>, dep_node: &DepNode) {\n+                fn try_load_from_on_disk_cache(tcx: QueryCtxt<'_>, dep_node: &DepNode) {\n                     if is_anon {\n                         return\n                     }\n@@ -287,9 +287,8 @@ pub mod dep_kind {\n                                      .map(|c| c.is_green())\n                                      .unwrap_or(false));\n \n-                    let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                    let qcx = QueryCtxt { tcx, queries: tcx.queries };\n-                    if queries::$variant::cache_on_disk(qcx, &key, None) {\n+                    let key = recover(*tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n+                    if queries::$variant::cache_on_disk(tcx, &key, None) {\n                         let _ = tcx.$variant(key);\n                     }\n                 }"}, {"sha": "193bf3c91319a79082020c77d1fbc535275bec27", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -180,10 +180,6 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     }\n \n     // Interactions with on_disk_cache\n-    fn try_load_from_on_disk_cache(&self, dep_node: &DepNode) {\n-        (dep_node.kind.try_load_from_on_disk_cache)(*self, dep_node)\n-    }\n-\n     fn load_diagnostics(&self, prev_dep_node_index: SerializedDepNodeIndex) -> Vec<Diagnostic> {\n         self.on_disk_cache\n             .as_ref()"}, {"sha": "69352df152739077fb5173e37903f48e3c0a010d", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -285,7 +285,7 @@ impl<'sess> OnDiskCache<'sess> {\n             // Do this *before* we clone 'latest_foreign_def_path_hashes', since\n             // loading existing queries may cause us to create new DepNodes, which\n             // may in turn end up invoking `store_foreign_def_id_hash`\n-            tcx.dep_graph.exec_cache_promotions(tcx);\n+            tcx.queries.exec_cache_promotions(tcx);\n \n             let latest_foreign_def_path_hashes = self.latest_foreign_def_path_hashes.lock().clone();\n             let hygiene_encode_context = HygieneEncodeContext::default();"}, {"sha": "83dbe4875cf0180a61be7cfc9076e9b6ac157f18", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -68,6 +68,10 @@ impl QueryContext for QueryCtxt<'tcx> {\n         self.queries.try_collect_active_jobs()\n     }\n \n+    fn try_load_from_on_disk_cache(&self, dep_node: &dep_graph::DepNode) {\n+        (dep_node.kind.try_load_from_on_disk_cache)(*self, dep_node)\n+    }\n+\n     /// Executes a job by changing the `ImplicitCtxt` to point to the\n     /// new query job while it executes. It returns the diagnostics\n     /// captured during execution and the actual result.\n@@ -603,6 +607,11 @@ macro_rules! define_queries_struct {\n                 tcx.encode_query_results(encoder, query_result_index)\n             }\n \n+            fn exec_cache_promotions(&'tcx self, tcx: TyCtxt<'tcx>) {\n+                let tcx = QueryCtxt { tcx, queries: self };\n+                tcx.dep_graph.exec_cache_promotions(tcx)\n+            }\n+\n             $($(#[$attr])*\n             #[inline(always)]\n             fn $name("}, {"sha": "8b0ab33f3f5f705de080f072dceca9c5efffb211", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -24,6 +24,7 @@ use super::prev::PreviousDepGraph;\n use super::query::DepGraphQuery;\n use super::serialized::SerializedDepNodeIndex;\n use super::{DepContext, DepKind, DepNode, HasDepContext, WorkProductId};\n+use crate::query::QueryContext;\n \n #[derive(Clone)]\n pub struct DepGraph<K: DepKind> {\n@@ -875,15 +876,16 @@ impl<K: DepKind> DepGraph<K> {\n     //\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n-    pub fn exec_cache_promotions<Ctxt: DepContext<DepKind = K>>(&self, tcx: Ctxt) {\n+    pub fn exec_cache_promotions<Ctxt: QueryContext<DepKind = K>>(&self, qcx: Ctxt) {\n+        let tcx = qcx.dep_context();\n         let _prof_timer = tcx.profiler().generic_activity(\"incr_comp_query_cache_promotion\");\n \n         let data = self.data.as_ref().unwrap();\n         for prev_index in data.colors.values.indices() {\n             match data.colors.get(prev_index) {\n                 Some(DepNodeColor::Green(_)) => {\n                     let dep_node = data.previous.index_to_node(prev_index);\n-                    tcx.try_load_from_on_disk_cache(&dep_node);\n+                    qcx.try_load_from_on_disk_cache(&dep_node);\n                 }\n                 None | Some(DepNodeColor::Red) => {\n                     // We can skip red nodes because a node can only be marked"}, {"sha": "a1a6ca9dacc1686c5ed0d1dc3cbbe9655ff12407", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -43,9 +43,6 @@ pub trait DepContext: Copy {\n     /// Return the diagnostic handler.\n     fn diagnostic(&self) -> &rustc_errors::Handler;\n \n-    /// Load data from the on-disk cache.\n-    fn try_load_from_on_disk_cache(&self, dep_node: &DepNode<Self::DepKind>);\n-\n     /// Load diagnostics associated to the node in the previous session.\n     fn load_diagnostics(&self, prev_dep_node_index: SerializedDepNodeIndex) -> Vec<Diagnostic>;\n "}, {"sha": "8d5c9d7bea7e4385da29aa4b85dc03c87af78329", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=ea3d465c95ce027aabfe7423c3d9f2161bdc2eb1", "patch": "@@ -14,7 +14,7 @@ pub use self::caches::{\n mod config;\n pub use self::config::{QueryAccessors, QueryConfig, QueryDescription};\n \n-use crate::dep_graph::HasDepContext;\n+use crate::dep_graph::{DepNode, HasDepContext};\n use crate::query::job::QueryMap;\n \n use rustc_data_structures::stable_hasher::HashStable;\n@@ -37,6 +37,9 @@ pub trait QueryContext: HasDepContext {\n \n     fn try_collect_active_jobs(&self) -> Option<QueryMap<Self::DepKind, Self::Query>>;\n \n+    /// Load data from the on-disk cache.\n+    fn try_load_from_on_disk_cache(&self, dep_node: &DepNode<Self::DepKind>);\n+\n     /// Executes a job by changing the `ImplicitCtxt` to point to the\n     /// new query job while it executes. It returns the diagnostics\n     /// captured during execution and the actual result."}]}