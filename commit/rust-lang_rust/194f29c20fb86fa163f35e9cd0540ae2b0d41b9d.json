{"sha": "194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NGYyOWMyMGZiODZmYTE2M2YzNWU5Y2QwNTQwYWUyYjBkNDFiOWQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-25T03:27:43Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-26T09:07:09Z"}, "message": "libsyntax: minor cleanup", "tree": {"sha": "986f7b3590d40e294f325abd31073495c54c32fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/986f7b3590d40e294f325abd31073495c54c32fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "html_url": "https://github.com/rust-lang/rust/commit/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "380597eba35be0eb12c59180e1eea97264cd3cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/380597eba35be0eb12c59180e1eea97264cd3cc7", "html_url": "https://github.com/rust-lang/rust/commit/380597eba35be0eb12c59180e1eea97264cd3cc7"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "05f6a3e7517a7936d7e9d07ac655851e9e02f70f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 62, "deletions": 37, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194f29c20fb86fa163f35e9cd0540ae2b0d41b9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=194f29c20fb86fa163f35e9cd0540ae2b0d41b9d", "patch": "@@ -2111,9 +2111,12 @@ pub impl Parser {\n             if *self.token == token::UNDERSCORE {\n                 self.bump();\n                 if *self.token != token::RBRACE {\n-                    self.fatal(~\"expected `}`, found `\" +\n-                               token_to_str(self.reader, *self.token) +\n-                               ~\"`\");\n+                    self.fatal(\n+                        fmt!(\n+                            \"expected `}`, found `%s`\",\n+                            token_to_str(self.reader, copy *self.token)\n+                        )\n+                    );\n                 }\n                 etc = true;\n                 break;\n@@ -2195,7 +2198,6 @@ pub impl Parser {\n               }\n               _ => pat_uniq(sub)\n             };\n-\n           }\n           token::BINOP(token::AND) => {\n               let lo = self.span.lo;\n@@ -2806,8 +2808,12 @@ pub impl Parser {\n \n     fn expect_self_ident() {\n         if !self.is_self_ident() {\n-            self.fatal(fmt!(\"expected `self` but found `%s`\",\n-                            token_to_str(self.reader, *self.token)));\n+            self.fatal(\n+                fmt!(\n+                    \"expected `self` but found `%s`\",\n+                    token_to_str(self.reader, copy *self.token)\n+                )\n+            );\n         }\n         self.bump();\n     }\n@@ -2874,9 +2880,12 @@ pub impl Parser {\n                     args_or_capture_items = ~[];\n                 }\n                 _ => {\n-                    self.fatal(~\"expected `,` or `)`, found `\" +\n-                               token_to_str(self.reader, *self.token) +\n-                               ~\"`\");\n+                    self.fatal(\n+                        fmt!(\n+                            \"expected `,` or `)`, found `%s`\",\n+                            token_to_str(self.reader, copy *self.token)\n+                        )\n+                    );\n                 }\n             }\n         } else {\n@@ -3181,9 +3190,13 @@ pub impl Parser {\n             is_tuple_like = true;\n             fields = ~[];\n         } else {\n-            self.fatal(fmt!(\"expected `{`, `(`, or `;` after struct name \\\n-                             but found `%s`\",\n-                            token_to_str(self.reader, *self.token)));\n+            self.fatal(\n+                fmt!(\n+                    \"expected `{`, `(`, or `;` after struct name \\\n+                    but found `%s`\",\n+                    token_to_str(self.reader, copy *self.token)\n+                )\n+            );\n         }\n \n         let actual_dtor = do the_dtor.map |dtor| {\n@@ -3218,21 +3231,23 @@ pub impl Parser {\n \n         let a_var = self.parse_instance_var(vis);\n         match *self.token {\n-          token::SEMI => {\n-            self.obsolete(*self.span, ObsoleteFieldTerminator);\n-            self.bump();\n-          }\n-          token::COMMA => {\n-            self.bump();\n-          }\n-          token::RBRACE => {}\n-          _ => {\n-            self.span_fatal(*self.span,\n-                            fmt!(\"expected `;`, `,`, or '}' but \\\n-                                  found `%s`\",\n-                                 token_to_str(self.reader,\n-                                              *self.token)));\n-          }\n+            token::SEMI => {\n+                self.obsolete(copy *self.span, ObsoleteFieldTerminator);\n+                self.bump();\n+            }\n+            token::COMMA => {\n+                self.bump();\n+            }\n+            token::RBRACE => {}\n+            _ => {\n+                self.span_fatal(\n+                    copy *self.span,\n+                    fmt!(\n+                        \"expected `;`, `,`, or '}' but found `%s`\",\n+                        token_to_str(self.reader, copy *self.token)\n+                    )\n+                );\n+            }\n         }\n         a_var\n     }\n@@ -3316,8 +3331,12 @@ pub impl Parser {\n                                                   module\");\n               }\n               _ => {\n-                self.fatal(~\"expected item but found `\" +\n-                           token_to_str(self.reader, *self.token) + ~\"`\");\n+                self.fatal(\n+                    fmt!(\n+                        \"expected item but found `%s`\",\n+                        token_to_str(self.reader, copy *self.token)\n+                    )\n+                );\n               }\n             }\n             debug!(\"parse_mod_items: attrs=%?\", attrs);\n@@ -3567,20 +3586,26 @@ pub impl Parser {\n             must_be_named_mod = true;\n             self.expect_keyword(&~\"mod\");\n         } else if *self.token != token::LBRACE {\n-            self.span_fatal(*self.span,\n-                            fmt!(\"expected `{` or `mod` but found %s\",\n-                                 token_to_str(self.reader, *self.token)));\n+            self.span_fatal(\n+                copy *self.span,\n+                fmt!(\n+                    \"expected `{` or `mod` but found `%s`\",\n+                    token_to_str(self.reader, copy *self.token)\n+                )\n+            );\n         }\n \n         let (sort, ident) = match *self.token {\n             token::IDENT(*) => (ast::named, self.parse_ident()),\n             _ => {\n                 if must_be_named_mod {\n-                    self.span_fatal(*self.span,\n-                                    fmt!(\"expected foreign module name but \\\n-                                          found %s\",\n-                                         token_to_str(self.reader,\n-                                                      *self.token)));\n+                    self.span_fatal(\n+                        copy *self.span,\n+                        fmt!(\n+                            \"expected foreign module name but found `%s`\",\n+                            token_to_str(self.reader, copy *self.token)\n+                        )\n+                    );\n                 }\n \n                 (ast::anonymous,"}]}