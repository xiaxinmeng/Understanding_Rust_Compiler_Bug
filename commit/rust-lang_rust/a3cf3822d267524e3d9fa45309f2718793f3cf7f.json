{"sha": "a3cf3822d267524e3d9fa45309f2718793f3cf7f", "node_id": "C_kwDOAAsO6NoAKGEzY2YzODIyZDI2NzUyNGUzZDlmYTQ1MzA5ZjI3MTg3OTNmM2NmN2Y", "commit": {"author": {"name": "Robin Schroer", "email": "git@sulami.xyz", "date": "2023-01-08T12:10:48Z"}, "committer": {"name": "Robin Schroer", "email": "git@sulami.xyz", "date": "2023-01-13T04:34:55Z"}, "message": "Emit a hint for bad call return types due to generic arguments\n\nWhen the return type of a function call depends on the type of an\nargument, e.g.\n\n```\nfn foo<T>(x: T) -> T {\n    x\n}\n```\n\nand the expected type is set due to either an explicitly typed\nbinding, or because the call to the function is in a tail position\nwithout semicolon, the current error implies that the argument in the\ncall has the wrong type.\n\nThis new hint highlights that the expected type doesn't match the\nreturned type, which matches the argument type, and that that's why\nwe're flagging the argument type.\n\nFixes #43608.", "tree": {"sha": "400f87368a38ea4a2f1acdff0eedd27b719cbec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/400f87368a38ea4a2f1acdff0eedd27b719cbec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3cf3822d267524e3d9fa45309f2718793f3cf7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEv1TxOhn3wIfLNaL12sndJk0dKYoFAmPA328ACgkQ2sndJk0d\nKYrLsg//W4psp3EKC8eqK+HZDsCfwKaaylhl+xCh8p+URXZRTfLoyqRai4hxRKy0\nOazQhgU9gjnwZ9uRaU0BXdT3al9mhcYZUPROg3oGyl7n39Qvbtsf6+gx8nItbz6A\n/waczXFMgBMQ8FpHEx7CjQdol2Qd30IJBPL3lp2aGGbTo6DsZli+QsaMUkNfgfHs\nO8f+HeWhA7oA4fu28V+jht79KPeLpdKLGbQgw/uEbMpJ9JWA8T2s+WOngIBRZjFI\nhZJ/e6FixwJdd1uorBaqjsUAtzRoW6ju/UECQMDoiJIg0T8m5+J7Cqy8+ed93f9B\n/NTBmW5ynAFWYFkQrbArjxlj06KCvOgBiz9tejEpTduD++u/cGBrG199IluMNEeu\n6MN+YmsywXTaGaMgGFsxvENc8B++Zb+UeOtu1F0zPYu29lo9TwBpR49zHQRXot1I\nBAO0yupdaXSoTuMOyqOw8lHRhTZJtSxwnTj3Kf87XWSoj3EXeli6SSDdbQfViy56\nEtT1cUwszg8jGMC898sLTKvx05Cd5NxbUbR3wp/7QQV0B3yN+rFo4DPUWsZQmTHo\n1nOJS0S4oVO2kbRzC0tRtGoFHHIo650qpaNsiNhp4y5qWT40150RSabsxwyE666z\ndsqD9Pv3KUeJH+m4CMjbIzcF5gngpw2y4aUhYu77JORhaP3OYzw=\n=onIv\n-----END PGP SIGNATURE-----", "payload": "tree 400f87368a38ea4a2f1acdff0eedd27b719cbec3\nparent 56ee65aeb6d1fad67d903d5ee1359abcf7b94231\nauthor Robin Schroer <git@sulami.xyz> 1673179848 +0900\ncommitter Robin Schroer <git@sulami.xyz> 1673584495 +0900\n\nEmit a hint for bad call return types due to generic arguments\n\nWhen the return type of a function call depends on the type of an\nargument, e.g.\n\n```\nfn foo<T>(x: T) -> T {\n    x\n}\n```\n\nand the expected type is set due to either an explicitly typed\nbinding, or because the call to the function is in a tail position\nwithout semicolon, the current error implies that the argument in the\ncall has the wrong type.\n\nThis new hint highlights that the expected type doesn't match the\nreturned type, which matches the argument type, and that that's why\nwe're flagging the argument type.\n\nFixes #43608.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cf3822d267524e3d9fa45309f2718793f3cf7f", "html_url": "https://github.com/rust-lang/rust/commit/a3cf3822d267524e3d9fa45309f2718793f3cf7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3cf3822d267524e3d9fa45309f2718793f3cf7f/comments", "author": {"login": "sulami", "id": 1843193, "node_id": "MDQ6VXNlcjE4NDMxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1843193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sulami", "html_url": "https://github.com/sulami", "followers_url": "https://api.github.com/users/sulami/followers", "following_url": "https://api.github.com/users/sulami/following{/other_user}", "gists_url": "https://api.github.com/users/sulami/gists{/gist_id}", "starred_url": "https://api.github.com/users/sulami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sulami/subscriptions", "organizations_url": "https://api.github.com/users/sulami/orgs", "repos_url": "https://api.github.com/users/sulami/repos", "events_url": "https://api.github.com/users/sulami/events{/privacy}", "received_events_url": "https://api.github.com/users/sulami/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sulami", "id": 1843193, "node_id": "MDQ6VXNlcjE4NDMxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1843193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sulami", "html_url": "https://github.com/sulami", "followers_url": "https://api.github.com/users/sulami/followers", "following_url": "https://api.github.com/users/sulami/following{/other_user}", "gists_url": "https://api.github.com/users/sulami/gists{/gist_id}", "starred_url": "https://api.github.com/users/sulami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sulami/subscriptions", "organizations_url": "https://api.github.com/users/sulami/orgs", "repos_url": "https://api.github.com/users/sulami/repos", "events_url": "https://api.github.com/users/sulami/events{/privacy}", "received_events_url": "https://api.github.com/users/sulami/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "html_url": "https://github.com/rust-lang/rust/commit/56ee65aeb6d1fad67d903d5ee1359abcf7b94231"}], "stats": {"total": 338, "additions": 338, "deletions": 0}, "files": [{"sha": "665dc8b6a2f2a4ed18091fb4952e550ca82ba30c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -85,6 +85,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n         self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);\n+        self.check_wrong_return_type_due_to_generic_arg(err, expr, expr_ty);\n     }\n \n     /// Requires that the two types unify, and prints an error message if\n@@ -1941,4 +1942,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.span_label(block.span, \"this block is missing a tail expression\");\n         }\n     }\n+\n+    fn check_wrong_return_type_due_to_generic_arg(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        checked_ty: Ty<'tcx>,\n+    ) {\n+        let Some(hir::Node::Expr(parent_expr)) = self.tcx.hir().find_parent(expr.hir_id) else { return; };\n+        enum CallableKind {\n+            Function,\n+            Method,\n+            Constructor,\n+        }\n+        let mut maybe_emit_help = |def_id: hir::def_id::DefId,\n+                                   callable: rustc_span::symbol::Ident,\n+                                   args: &[hir::Expr<'_>],\n+                                   kind: CallableKind| {\n+            let arg_idx = args.iter().position(|a| a.hir_id == expr.hir_id).unwrap();\n+            let fn_ty = self.tcx.bound_type_of(def_id).0;\n+            if !fn_ty.is_fn() {\n+                return;\n+            }\n+            let fn_sig = fn_ty.fn_sig(self.tcx).skip_binder();\n+            let Some(&arg) = fn_sig.inputs().get(arg_idx + if matches!(kind, CallableKind::Method) { 1 } else { 0 }) else { return; };\n+            if matches!(arg.kind(), ty::Param(_))\n+                && fn_sig.output().contains(arg)\n+                && self.node_ty(args[arg_idx].hir_id) == checked_ty\n+            {\n+                let mut multi_span: MultiSpan = parent_expr.span.into();\n+                multi_span.push_span_label(\n+                    args[arg_idx].span,\n+                    format!(\n+                        \"this argument influences the {} of `{}`\",\n+                        if matches!(kind, CallableKind::Constructor) {\n+                            \"type\"\n+                        } else {\n+                            \"return type\"\n+                        },\n+                        callable\n+                    ),\n+                );\n+                err.span_help(\n+                    multi_span,\n+                    format!(\n+                        \"the {} `{}` due to the type of the argument passed\",\n+                        match kind {\n+                            CallableKind::Function => \"return type of this call is\",\n+                            CallableKind::Method => \"return type of this call is\",\n+                            CallableKind::Constructor => \"type constructed contains\",\n+                        },\n+                        checked_ty\n+                    ),\n+                );\n+            }\n+        };\n+        match parent_expr.kind {\n+            hir::ExprKind::Call(fun, args) => {\n+                let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = fun.kind else { return; };\n+                let hir::def::Res::Def(kind, def_id) = path.res else { return; };\n+                let callable_kind = if matches!(kind, hir::def::DefKind::Ctor(_, _)) {\n+                    CallableKind::Constructor\n+                } else {\n+                    CallableKind::Function\n+                };\n+                maybe_emit_help(def_id, path.segments[0].ident, args, callable_kind);\n+            }\n+            hir::ExprKind::MethodCall(method, _receiver, args, _span) => {\n+                let Some(def_id) = self.typeck_results.borrow().type_dependent_def_id(parent_expr.hir_id) else { return; };\n+                maybe_emit_help(def_id, method.ident, args, CallableKind::Method)\n+            }\n+            _ => return,\n+        }\n+    }\n }"}, {"sha": "1cd8949b8c4b71eddab96dc8cd9e7fd2cf802230", "filename": "tests/ui/closures/issue-84128.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fclosures%2Fissue-84128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fclosures%2Fissue-84128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-84128.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -6,6 +6,13 @@ LL |         Foo(())\n    |         |\n    |         arguments to this struct are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-84128.rs:13:9\n+   |\n+LL |         Foo(())\n+   |         ^^^^--^\n+   |             |\n+   |             this argument influences the type of `Foo`\n note: tuple struct defined here\n   --> $DIR/issue-84128.rs:5:8\n    |"}, {"sha": "b492251c01691e85ce617249bb91cf1877509608", "filename": "tests/ui/closures/issue-87461.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-87461.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -6,6 +6,13 @@ LL |     Ok(())\n    |     |\n    |     arguments to this enum variant are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-87461.rs:10:5\n+   |\n+LL |     Ok(())\n+   |     ^^^--^\n+   |        |\n+   |        this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n \n@@ -17,6 +24,13 @@ LL |     Ok(())\n    |     |\n    |     arguments to this enum variant are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-87461.rs:17:5\n+   |\n+LL |     Ok(())\n+   |     ^^^--^\n+   |        |\n+   |        this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n \n@@ -28,6 +42,13 @@ LL |         Ok(())\n    |         |\n    |         arguments to this enum variant are incorrect\n    |\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-87461.rs:26:9\n+   |\n+LL |         Ok(())\n+   |         ^^^--^\n+   |            |\n+   |            this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n "}, {"sha": "9f669b9a5214b1694bb3c42331ca48480826526f", "filename": "tests/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -23,6 +23,13 @@ LL |         A(self.0 + rhs.0)\n    |\n    = note: expected type parameter `B`\n              found associated type `<B as Add>::Output`\n+help: the type constructed contains `<B as Add>::Output` due to the type of the argument passed\n+  --> $DIR/missing-bounds.rs:11:9\n+   |\n+LL |         A(self.0 + rhs.0)\n+   |         ^^--------------^\n+   |           |\n+   |           this argument influences the type of `A`\n note: tuple struct defined here\n   --> $DIR/missing-bounds.rs:5:8\n    |"}, {"sha": "de4e067fead4cce20007ef8415535eb42c1dba5d", "filename": "tests/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -11,6 +11,13 @@ LL |         Some(true)\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)\n+help: the type constructed contains `bool` due to the type of the argument passed\n+  --> $DIR/issue-35030.rs:9:9\n+   |\n+LL |         Some(true)\n+   |         ^^^^^----^\n+   |              |\n+   |              this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n "}, {"sha": "bc097bf6eb4515f76396ffff7b467a1721cbf5e5", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -11,6 +11,13 @@ LL |     let _: Option<(i32, bool)> = Some(1, 2);\n    |                                       ^\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n+help: the type constructed contains `{integer}` due to the type of the argument passed\n+  --> $DIR/args-instead-of-tuple-errors.rs:6:34\n+   |\n+LL |     let _: Option<(i32, bool)> = Some(1, 2);\n+   |                                  ^^^^^-^^^^\n+   |                                       |\n+   |                                       this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: remove the extra argument\n@@ -64,6 +71,13 @@ LL |     let _: Option<(i32,)> = Some(5_usize);\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+help: the type constructed contains `usize` due to the type of the argument passed\n+  --> $DIR/args-instead-of-tuple-errors.rs:14:29\n+   |\n+LL |     let _: Option<(i32,)> = Some(5_usize);\n+   |                             ^^^^^-------^\n+   |                                  |\n+   |                                  this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n@@ -77,6 +91,13 @@ LL |     let _: Option<(i32,)> = Some((5_usize));\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+help: the type constructed contains `usize` due to the type of the argument passed\n+  --> $DIR/args-instead-of-tuple-errors.rs:17:29\n+   |\n+LL |     let _: Option<(i32,)> = Some((5_usize));\n+   |                             ^^^^^---------^\n+   |                                  |\n+   |                                  this argument influences the type of `Some`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n "}, {"sha": "7f05832bcd7281e77c2b53d06549e36d9636a612", "filename": "tests/ui/suggestions/sugg-else-for-closure.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -8,6 +8,13 @@ LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n    |\n    = note: expected reference `&str`\n                 found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`\n+help: the return type of this call is `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]` due to the type of the argument passed\n+  --> $DIR/sugg-else-for-closure.rs:6:14\n+   |\n+LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n+   |              ^^^^^^^^^^^^-------------------------------^\n+   |                          |\n+   |                          this argument influences the return type of `unwrap_or`\n note: associated function defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: try calling `unwrap_or_else` instead"}, {"sha": "a11867c03a689259dde89dd3adddef9e0822414f", "filename": "tests/ui/traits/issue-52893.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-52893.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -11,6 +11,13 @@ LL |         builder.push(output);\n    |\n    = note: expected type parameter `F`\n                       found struct `Class<P>`\n+help: the return type of this call is `Class<P>` due to the type of the argument passed\n+  --> $DIR/issue-52893.rs:53:9\n+   |\n+LL |         builder.push(output);\n+   |         ^^^^^^^^^^^^^------^\n+   |                      |\n+   |                      this argument influences the return type of `push`\n note: associated function defined here\n   --> $DIR/issue-52893.rs:11:8\n    |"}, {"sha": "ba5b9f54246e2c63d061ed914e89b0f26a1f299b", "filename": "tests/ui/type/wrong-call-return-type-due-to-generic-arg.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.rs?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -0,0 +1,28 @@\n+fn function<T>(x: T, y: bool) -> T {\n+    x\n+}\n+\n+struct S {}\n+impl S {\n+    fn method<T>(&self, x: T) -> T {\n+        x\n+    }\n+}\n+\n+fn wrong_arg_type(x: u32) -> u32 {\n+    x\n+}\n+\n+fn main() {\n+    // Should not trigger.\n+    let x = wrong_arg_type(0u16); //~ ERROR mismatched types\n+    let x: u16 = function(0, 0u8); //~ ERROR mismatched types\n+\n+    // Should trigger exactly once for the first argument.\n+    let x: u16 = function(0u32, 0u8); //~ ERROR arguments to this function are incorrect\n+\n+    // Should trigger.\n+    let x: u16 = function(0u32, true); //~ ERROR mismatched types\n+    let x: u16 = (S {}).method(0u32); //~ ERROR mismatched types\n+    function(0u32, 8u8) //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "4d012cb156bb546287852f1c3ed668a7d445593c", "filename": "tests/ui/type/wrong-call-return-type-due-to-generic-arg.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fwrong-call-return-type-due-to-generic-arg.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -0,0 +1,131 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:18:28\n+   |\n+LL |     let x = wrong_arg_type(0u16);\n+   |             -------------- ^^^^ expected `u32`, found `u16`\n+   |             |\n+   |             arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:12:4\n+   |\n+LL | fn wrong_arg_type(x: u32) -> u32 {\n+   |    ^^^^^^^^^^^^^^ ------\n+help: change the type of the numeric literal from `u16` to `u32`\n+   |\n+LL |     let x = wrong_arg_type(0u32);\n+   |                             ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:19:30\n+   |\n+LL |     let x: u16 = function(0, 0u8);\n+   |                  --------    ^^^ expected `bool`, found `u8`\n+   |                  |\n+   |                  arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^          -------\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:22:18\n+   |\n+LL |     let x: u16 = function(0u32, 0u8);\n+   |                  ^^^^^^^^ ----  --- expected `bool`, found `u8`\n+   |                           |\n+   |                           expected `u16`, found `u32`\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:22:18\n+   |\n+LL |     let x: u16 = function(0u32, 0u8);\n+   |                  ^^^^^^^^^----^^^^^^\n+   |                           |\n+   |                           this argument influences the return type of `function`\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^    ----  -------\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     let x: u16 = function(0u16, 0u8);\n+   |                            ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:25:27\n+   |\n+LL |     let x: u16 = function(0u32, true);\n+   |                  -------- ^^^^ expected `u16`, found `u32`\n+   |                  |\n+   |                  arguments to this function are incorrect\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:25:18\n+   |\n+LL |     let x: u16 = function(0u32, true);\n+   |                  ^^^^^^^^^----^^^^^^^\n+   |                           |\n+   |                           this argument influences the return type of `function`\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^    ----\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     let x: u16 = function(0u16, true);\n+   |                            ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:26:32\n+   |\n+LL |     let x: u16 = (S {}).method(0u32);\n+   |                         ------ ^^^^ expected `u16`, found `u32`\n+   |                         |\n+   |                         arguments to this method are incorrect\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:26:18\n+   |\n+LL |     let x: u16 = (S {}).method(0u32);\n+   |                  ^^^^^^^^^^^^^^----^\n+   |                                |\n+   |                                this argument influences the return type of `method`\n+note: associated function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:7:8\n+   |\n+LL |     fn method<T>(&self, x: T) -> T {\n+   |        ^^^^^^           ----\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     let x: u16 = (S {}).method(0u16);\n+   |                                 ~~~\n+\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:27:5\n+   |\n+LL |     function(0u32, 8u8)\n+   |     ^^^^^^^^ ----  --- expected `bool`, found `u8`\n+   |              |\n+   |              expected `()`, found `u32`\n+   |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:27:5\n+   |\n+LL |     function(0u32, 8u8)\n+   |     ^^^^^^^^^----^^^^^^\n+   |              |\n+   |              this argument influences the return type of `function`\n+note: function defined here\n+  --> $DIR/wrong-call-return-type-due-to-generic-arg.rs:1:4\n+   |\n+LL | fn function<T>(x: T, y: bool) -> T {\n+   |    ^^^^^^^^    ----  -------\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8f5ff51fbe1007cb7e77aa405625b059df75ed5f", "filename": "tests/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -8,6 +8,13 @@ LL | fn main() { test(Ok(())); }\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n+help: the type constructed contains `()` due to the type of the argument passed\n+  --> $DIR/issue-46112.rs:9:18\n+   |\n+LL | fn main() { test(Ok(())); }\n+   |                  ^^^--^\n+   |                     |\n+   |                     this argument influences the type of `Ok`\n note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n help: try wrapping the expression in `Some`"}, {"sha": "09f3aee2d9ec56a51a33b9639863e6950adba45e", "filename": "tests/ui/typeck/issue-84768.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftypeck%2Fissue-84768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Ftypeck%2Fissue-84768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-84768.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -14,6 +14,13 @@ LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n    |\n    = note: expected tuple `(&mut u8,)`\n                found type `{integer}`\n+help: the return type of this call is `{integer}` due to the type of the argument passed\n+  --> $DIR/issue-84768.rs:7:5\n+   |\n+LL |     <F as FnOnce(&mut u8)>::call_once(f, 1)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^\n+   |                                          |\n+   |                                          this argument influences the return type of `FnOnce`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n "}, {"sha": "e85144a31ca96c8ebc87ebd1a178f889dd5528b5", "filename": "tests/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3cf3822d267524e3d9fa45309f2718793f3cf7f/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=a3cf3822d267524e3d9fa45309f2718793f3cf7f", "patch": "@@ -21,6 +21,13 @@ LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |     |\n    |     arguments to this function are incorrect\n    |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:7:5\n+   |\n+LL |     <i32 as Add<i32>>::add(1u32, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^----^^^^\n+   |                            |\n+   |                            this argument influences the return type of `Add`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`\n@@ -36,6 +43,13 @@ LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |     |\n    |     arguments to this function are incorrect\n    |\n+help: the return type of this call is `u32` due to the type of the argument passed\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:9:5\n+   |\n+LL |     <i32 as Add<i32>>::add(1, 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^----^\n+   |                               |\n+   |                               this argument influences the return type of `Add`\n note: associated function defined here\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: change the type of the numeric literal from `u32` to `i32`"}]}