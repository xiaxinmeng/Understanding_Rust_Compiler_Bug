{"sha": "d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNjhmZmRiMjYxNDRmZDFmNDUxZDNkOGJhNDM0NGIwYThlODJmOTk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-18T19:56:36Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-18T19:56:36Z"}, "message": "Remove the unneeded final parameter from call_visit_glue\n\ncall_visit_glue() is only ever called with None as its last argument, so\nwe can remove it as well.", "tree": {"sha": "51b22a77304b9424a15de919ea80ecf88615a502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51b22a77304b9424a15de919ea80ecf88615a502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "html_url": "https://github.com/rust-lang/rust/commit/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a4dd824f708d1e7c25ad26d8a4fe801d0b25e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a4dd824f708d1e7c25ad26d8a4fe801d0b25e8", "html_url": "https://github.com/rust-lang/rust/commit/33a4dd824f708d1e7c25ad26d8a4fe801d0b25e8"}], "stats": {"total": 27, "additions": 5, "deletions": 22}, "files": [{"sha": "1e8fdbe300ad357c0f2e72845cb8bbe8cebe8adc", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "patch": "@@ -178,29 +178,12 @@ pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: &tydesc_info) -> ValueRef\n }\n \n // See [Note-arg-mode]\n-pub fn call_visit_glue(bcx: &Block, v: ValueRef, tydesc: ValueRef,\n-                       static_ti: Option<&tydesc_info>) {\n+pub fn call_visit_glue(bcx: &Block, v: ValueRef, tydesc: ValueRef) {\n     let _icx = push_ctxt(\"call_visit_glue\");\n-    let ccx = bcx.ccx();\n-    let static_glue_fn = static_ti.map(|sti| lazily_emit_visit_glue(ccx, sti));\n-\n-    // When static type info is available, avoid casting to a generic pointer.\n-    let llrawptr = if static_glue_fn.is_none() {\n-        PointerCast(bcx, v, Type::i8p(ccx))\n-    } else {\n-        v\n-    };\n \n-    let llfn = {\n-        match static_glue_fn {\n-            None => {\n-                // Select out the glue function to call from the tydesc\n-                let llfnptr = GEPi(bcx, tydesc, [0u, abi::tydesc_field_visit_glue]);\n-                Load(bcx, llfnptr)\n-            }\n-            Some(sgf) => sgf\n-        }\n-    };\n+    // Select the glue function to call from the tydesc\n+    let llfn = Load(bcx, GEPi(bcx, tydesc, [0u, abi::tydesc_field_visit_glue]));\n+    let llrawptr = PointerCast(bcx, v, Type::i8p(bcx.ccx()));\n \n     Call(bcx, llfn, [llrawptr], []);\n }"}, {"sha": "689c758dfbf0e518ad7780a690b29fdcb408b817", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "patch": "@@ -290,7 +290,7 @@ pub fn trans_intrinsic_call<'a>(mut bcx: &'a Block<'a>, node: ast::NodeId,\n             let td = *llargs.get(0);\n             let visitor = *llargs.get(1);\n             let td = PointerCast(bcx, td, ccx.tydesc_type().ptr_to());\n-            glue::call_visit_glue(bcx, visitor, td, None);\n+            glue::call_visit_glue(bcx, visitor, td);\n             C_nil(ccx)\n         }\n         (_, \"offset\") => {"}]}