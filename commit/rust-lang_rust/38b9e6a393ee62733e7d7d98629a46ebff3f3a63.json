{"sha": "38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "node_id": "C_kwDOAAsO6NoAKDM4YjllNmEzOTNlZTYyNzMzZTdkN2Q5ODYyOWE0NmViZmYzZjNhNjM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-24T17:48:06Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-15T17:50:33Z"}, "message": "Document the new logic", "tree": {"sha": "f551107360af42da5b1c8594b1c299e0113e2833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f551107360af42da5b1c8594b1c299e0113e2833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "html_url": "https://github.com/rust-lang/rust/commit/38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "html_url": "https://github.com/rust-lang/rust/commit/3ea956b8c5ea3987b826c0b36e81bc713a15fce3"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "bae6103cad53b62d39fcdcd2b12bb7f2dc105d10", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b9e6a393ee62733e7d7d98629a46ebff3f3a63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=38b9e6a393ee62733e7d7d98629a46ebff3f3a63", "patch": "@@ -301,6 +301,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         let mut options = member_constraint\n             .choice_regions\n             .iter()\n+            // If any of the regions are inference vars, resolve them, as far\n+            // as possible.\n             .filter_map(|option| match option {\n                 ty::ReVar(vid) => match var_values.value(*vid) {\n                     VarValue::ErrorValue => None,\n@@ -644,6 +646,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     && fr.sub_free_regions(self.tcx(), a, b)\n             };\n             if !choice_regions.clone().any(|choice_region| {\n+                // This is really checking if the regions are equal. After member constraint\n+                // resolution, one region must be equal, or a lifetime has been leaked into\n+                // the hidden type, but does not appear in the corresponding impl trait.\n                 sub(member_region, choice_region) && sub(choice_region, member_region)\n             }) {\n                 let span = self.tcx().def_span(member_constraint.opaque_type_def_id);"}]}