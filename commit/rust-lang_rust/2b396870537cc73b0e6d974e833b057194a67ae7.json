{"sha": "2b396870537cc73b0e6d974e833b057194a67ae7", "node_id": "C_kwDOAAsO6NoAKDJiMzk2ODcwNTM3Y2M3M2IwZTZkOTc0ZTgzM2IwNTcxOTRhNjdhZTc", "commit": {"author": {"name": "Martin Kr\u00f6ning", "email": "mkroening@posteo.net", "date": "2022-11-07T15:43:34Z"}, "committer": {"name": "Martin Kr\u00f6ning", "email": "mkroening@posteo.net", "date": "2022-11-07T22:14:17Z"}, "message": "Add miri_alloc, miri_dealloc", "tree": {"sha": "ab6d63b8be48427998dbd4c5f84f21c47c9be55b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab6d63b8be48427998dbd4c5f84f21c47c9be55b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b396870537cc73b0e6d974e833b057194a67ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b396870537cc73b0e6d974e833b057194a67ae7", "html_url": "https://github.com/rust-lang/rust/commit/2b396870537cc73b0e6d974e833b057194a67ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b396870537cc73b0e6d974e833b057194a67ae7/comments", "author": {"login": "mkroening", "id": 28776973, "node_id": "MDQ6VXNlcjI4Nzc2OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/28776973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkroening", "html_url": "https://github.com/mkroening", "followers_url": "https://api.github.com/users/mkroening/followers", "following_url": "https://api.github.com/users/mkroening/following{/other_user}", "gists_url": "https://api.github.com/users/mkroening/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkroening/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkroening/subscriptions", "organizations_url": "https://api.github.com/users/mkroening/orgs", "repos_url": "https://api.github.com/users/mkroening/repos", "events_url": "https://api.github.com/users/mkroening/events{/privacy}", "received_events_url": "https://api.github.com/users/mkroening/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mkroening", "id": 28776973, "node_id": "MDQ6VXNlcjI4Nzc2OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/28776973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkroening", "html_url": "https://github.com/mkroening", "followers_url": "https://api.github.com/users/mkroening/followers", "following_url": "https://api.github.com/users/mkroening/following{/other_user}", "gists_url": "https://api.github.com/users/mkroening/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkroening/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkroening/subscriptions", "organizations_url": "https://api.github.com/users/mkroening/orgs", "repos_url": "https://api.github.com/users/mkroening/repos", "events_url": "https://api.github.com/users/mkroening/events{/privacy}", "received_events_url": "https://api.github.com/users/mkroening/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c574d8d9647bb16950075b609e7d6a38cae9c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c574d8d9647bb16950075b609e7d6a38cae9c5b", "html_url": "https://github.com/rust-lang/rust/commit/9c574d8d9647bb16950075b609e7d6a38cae9c5b"}], "stats": {"total": 94, "additions": 84, "deletions": 10}, "files": [{"sha": "939d7b19fa978cc7efcbd837f9aee34c1c09eb8d", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=2b396870537cc73b0e6d974e833b057194a67ae7", "patch": "@@ -568,6 +568,15 @@ extern \"Rust\" {\n     /// program) the contents of a section of program memory, as bytes. Bytes\n     /// written using this function will emerge from the interpreter's stderr.\n     fn miri_write_to_stderr(bytes: &[u8]);\n+\n+    /// Miri-provided extern function to allocate memory from the interpreter.\n+    /// \n+    /// This is useful when no fundamental way of allocating memory is\n+    /// available, e.g. when using `no_std` + `alloc`.\n+    fn miri_alloc(size: usize, align: usize) -> *mut u8;\n+\n+    /// Miri-provided extern function to deallocate memory.\n+    fn miri_dealloc(ptr: *mut u8, size: usize, align: usize);\n }\n ```\n "}, {"sha": "462f860041a3d407085e69245bb4d5e66c8dbaec", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=2b396870537cc73b0e6d974e833b057194a67ae7", "patch": "@@ -713,7 +713,10 @@ impl VClockAlloc {\n         let (alloc_timestamp, alloc_index) = match kind {\n             // User allocated and stack memory should track allocation.\n             MemoryKind::Machine(\n-                MiriMemoryKind::Rust | MiriMemoryKind::C | MiriMemoryKind::WinHeap,\n+                MiriMemoryKind::Rust\n+                | MiriMemoryKind::Miri\n+                | MiriMemoryKind::C\n+                | MiriMemoryKind::WinHeap,\n             )\n             | MemoryKind::Stack => {\n                 let (alloc_index, clocks) = global.current_thread_state(thread_mgr);"}, {"sha": "764bafac8fd22f386cc23d30aa3a181344366552", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=2b396870537cc73b0e6d974e833b057194a67ae7", "patch": "@@ -77,6 +77,8 @@ impl VisitTags for FrameData<'_> {\n pub enum MiriMemoryKind {\n     /// `__rust_alloc` memory.\n     Rust,\n+    /// `miri_alloc` memory.\n+    Miri,\n     /// `malloc` memory.\n     C,\n     /// Windows `HeapAlloc` memory.\n@@ -110,7 +112,7 @@ impl MayLeak for MiriMemoryKind {\n     fn may_leak(self) -> bool {\n         use self::MiriMemoryKind::*;\n         match self {\n-            Rust | C | WinHeap | Runtime => false,\n+            Rust | Miri | C | WinHeap | Runtime => false,\n             Machine | Global | ExternStatic | Tls => true,\n         }\n     }\n@@ -121,6 +123,7 @@ impl fmt::Display for MiriMemoryKind {\n         use self::MiriMemoryKind::*;\n         match self {\n             Rust => write!(f, \"Rust heap\"),\n+            Miri => write!(f, \"Miri heap\"),\n             C => write!(f, \"C heap\"),\n             WinHeap => write!(f, \"Windows heap\"),\n             Machine => write!(f, \"machine-managed memory\"),"}, {"sha": "058f730833bb41983685d7cadc644ae6f4e7c1ba", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=2b396870537cc73b0e6d974e833b057194a67ae7", "patch": "@@ -513,22 +513,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n \n             // Rust allocation\n-            \"__rust_alloc\" => {\n+            \"__rust_alloc\" | \"miri_alloc\" => {\n                 let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n \n-                return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), |this| {\n+                let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n                     Self::check_alloc_request(size, align)?;\n \n+                    let memory_kind = match link_name.as_str() {\n+                        \"__rust_alloc\" => MiriMemoryKind::Rust,\n+                        \"miri_alloc\" => MiriMemoryKind::Miri,\n+                        _ => unreachable!(),\n+                    };\n+\n                     let ptr = this.allocate_ptr(\n                         Size::from_bytes(size),\n                         Align::from_bytes(align).unwrap(),\n-                        MiriMemoryKind::Rust.into(),\n+                        memory_kind.into(),\n                     )?;\n \n                     this.write_pointer(ptr, dest)\n-                });\n+                };\n+\n+                match link_name.as_str() {\n+                    \"__rust_alloc\" => return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n+                    \"miri_alloc\" => {\n+                        default(this)?;\n+                        return Ok(EmulateByNameResult::NeedsJumping);\n+                    },\n+                    _ => unreachable!(),\n+                }\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n@@ -549,20 +564,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     this.write_pointer(ptr, dest)\n                 });\n             }\n-            \"__rust_dealloc\" => {\n+            \"__rust_dealloc\" | \"miri_dealloc\" => {\n                 let [ptr, old_size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n \n-                return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), |this| {\n+                let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    let memory_kind = match link_name.as_str() {\n+                        \"__rust_dealloc\" => MiriMemoryKind::Rust,\n+                        \"miri_dealloc\" => MiriMemoryKind::Miri,\n+                        _ => unreachable!(),\n+                    };\n+\n                     // No need to check old_size/align; we anyway check that they match the allocation.\n                     this.deallocate_ptr(\n                         ptr,\n                         Some((Size::from_bytes(old_size), Align::from_bytes(align).unwrap())),\n-                        MiriMemoryKind::Rust.into(),\n+                        memory_kind.into(),\n                     )\n-                });\n+                };\n+\n+                match link_name.as_str() {\n+                    \"__rust_dealloc\" => return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n+                    \"miri_dealloc\" => {\n+                        default(this)?;\n+                        return Ok(EmulateByNameResult::NeedsJumping);\n+                    }\n+                    _ => unreachable!(),\n+                }\n             }\n             \"__rust_realloc\" => {\n                 let [ptr, old_size, align, new_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;"}, {"sha": "7caeb86b4780969d7935ef8d09bc3f522e6cb0fc", "filename": "src/tools/miri/tests/pass/miri-alloc.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmiri-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b396870537cc73b0e6d974e833b057194a67ae7/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmiri-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fmiri-alloc.rs?ref=2b396870537cc73b0e6d974e833b057194a67ae7", "patch": "@@ -0,0 +1,29 @@\n+#![feature(lang_items, start)]\n+#![no_std]\n+// windows tls dtors go through libstd right now, thus this test\n+// cannot pass. When windows tls dtors go through the special magic\n+// windows linker section, we can run this test on windows again.\n+//@ignore-target-windows: no-std not supported on Windows\n+\n+extern \"Rust\" {\n+    fn miri_alloc(size: usize, align: usize) -> *mut u8;\n+    fn miri_dealloc(ptr: *mut u8, size: usize, align: usize);\n+}\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    unsafe {\n+        let ptr = miri_alloc(123, 1);\n+        core::ptr::write_bytes(ptr, 0, 123);\n+        miri_dealloc(ptr, 123, 1);\n+    }\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}"}]}