{"sha": "6bc772cdc0a9021a6286ebd550c2f6221179f21d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzc3MmNkYzBhOTAyMWE2Mjg2ZWJkNTUwYzJmNjIyMTE3OWYyMWQ=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-06T21:34:13Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-07T00:30:22Z"}, "message": "Re-stabilize Weak::as_ptr &friends for unsized T\n\nAs per T-lang consensus, this uses a branch to handle the dangling case.\nThe discussed optimization of only doing the branch in the T: ?Sized\ncase is left for a followup patch, as doing so is not trivial\n(as it requires specialization for correctness, not just optimization).", "tree": {"sha": "b03462ef0b4fa2fd53a5e209603e326b04024a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b03462ef0b4fa2fd53a5e209603e326b04024a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc772cdc0a9021a6286ebd550c2f6221179f21d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc772cdc0a9021a6286ebd550c2f6221179f21d", "html_url": "https://github.com/rust-lang/rust/commit/6bc772cdc0a9021a6286ebd550c2f6221179f21d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc772cdc0a9021a6286ebd550c2f6221179f21d/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "html_url": "https://github.com/rust-lang/rust/commit/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d"}], "stats": {"total": 165, "additions": 130, "deletions": 35}, "files": [{"sha": "d0bfa038aa13dd412e7717b6c61eb5912e714c62", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=6bc772cdc0a9021a6286ebd550c2f6221179f21d", "patch": "@@ -120,6 +120,7 @@\n #![feature(receiver_trait)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n+#![feature(set_ptr_value)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n #![feature(staged_api)]"}, {"sha": "48b9b8a34f1dac4c1e3b755a0f7d681a5762b4da", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=6bc772cdc0a9021a6286ebd550c2f6221179f21d", "patch": "@@ -1862,7 +1862,7 @@ struct WeakInner<'a> {\n     strong: &'a Cell<usize>,\n }\n \n-impl<T> Weak<T> {\n+impl<T: ?Sized> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1892,15 +1892,17 @@ impl<T> Weak<T> {\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n \n-        // SAFETY: we must offset the pointer manually, and said pointer may be\n-        // a dangling weak (usize::MAX) if T is sized. data_offset is safe to call,\n-        // because we know that a pointer to unsized T was derived from a real\n-        // unsized T, as dangling weaks are only created for sized T. wrapping_offset\n-        // is used so that we can use the same code path for the non-dangling\n-        // unsized case and the potentially dangling sized case.\n-        unsafe {\n-            let offset = data_offset(ptr as *mut T);\n-            set_data_ptr(ptr as *mut T, (ptr as *mut u8).wrapping_offset(offset))\n+        if is_dangling(self.ptr) {\n+            // If the pointer is dangling, we return a null pointer as the dangling sentinel.\n+            // We can't return the usize::MAX sentinel, as that could valid if T is ZST.\n+            // SAFETY: we have to return a known sentinel here that cannot be produced for\n+            // a valid pointer, so that `from_raw` can reverse this transformation.\n+            (ptr as *mut T).set_ptr_value(ptr::null_mut())\n+        } else {\n+            // SAFETY: If the pointer is not dangling, it describes to a valid allocation.\n+            // The payload may be dropped at this point, and we have to maintain provenance,\n+            // so use raw pointer manipulation.\n+            unsafe { &raw mut (*ptr).value }\n         }\n     }\n \n@@ -1982,22 +1984,25 @@ impl<T> Weak<T> {\n     /// [`new`]: Weak::new\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        // SAFETY: data_offset is safe to call, because this pointer originates from a Weak.\n         // See Weak::as_ptr for context on how the input pointer is derived.\n-        let offset = unsafe { data_offset(ptr) };\n \n-        // Reverse the offset to find the original RcBox.\n-        // SAFETY: we use wrapping_offset here because the pointer may be dangling (but only if T: Sized).\n-        let ptr = unsafe {\n-            set_data_ptr(ptr as *mut RcBox<T>, (ptr as *mut u8).wrapping_offset(-offset))\n+        let ptr = if ptr.is_null() {\n+            // If we get a null pointer, this is a dangling weak.\n+            // SAFETY: this is the same sentinel as used in Weak::new and is_dangling\n+            (ptr as *mut RcBox<T>).set_ptr_value(usize::MAX as *mut _)\n+        } else {\n+            // Otherwise, this describes a real allocation.\n+            // SAFETY: data_offset is safe to call, as ptr describes a real allocation.\n+            let offset = unsafe { data_offset(ptr) };\n+            // Thus, we reverse the offset to get the whole RcBox.\n+            // SAFETY: the pointer originated from a Weak, so this offset is safe.\n+            unsafe { (ptr as *mut RcBox<T>).set_ptr_value((ptr as *mut u8).offset(-offset)) }\n         };\n \n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n         Weak { ptr: unsafe { NonNull::new_unchecked(ptr) } }\n     }\n-}\n \n-impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n     /// dropping of the inner value if successful.\n     ///"}, {"sha": "843a9b07fa93448ef99c84197b25718d82a95db2", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=6bc772cdc0a9021a6286ebd550c2f6221179f21d", "patch": "@@ -208,6 +208,30 @@ fn into_from_weak_raw() {\n     }\n }\n \n+#[test]\n+fn test_into_from_weak_raw_unsized() {\n+    use std::fmt::Display;\n+    use std::string::ToString;\n+\n+    let arc: Rc<str> = Rc::from(\"foo\");\n+    let weak: Weak<str> = Rc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }, \"foo\");\n+    assert!(weak.ptr_eq(&weak2));\n+\n+    let arc: Rc<dyn Display> = Rc::new(123);\n+    let weak: Weak<dyn Display> = Rc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+    assert!(weak.ptr_eq(&weak2));\n+}\n+\n #[test]\n fn get_mut() {\n     let mut x = Rc::new(3);\n@@ -294,6 +318,23 @@ fn test_unsized() {\n     assert_eq!(foo, foo.clone());\n }\n \n+#[test]\n+fn test_maybe_thin_unsized() {\n+    // If/when custom thin DSTs exist, this test should be updated to use one\n+    use std::ffi::{CStr, CString};\n+\n+    let x: Rc<CStr> = Rc::from(CString::new(\"swordfish\").unwrap().into_boxed_c_str());\n+    assert_eq!(format!(\"{:?}\", x), \"\\\"swordfish\\\"\");\n+    let y: Weak<CStr> = Rc::downgrade(&x);\n+    drop(x);\n+\n+    // At this point, the weak points to a dropped DST\n+    assert!(y.upgrade().is_none());\n+    // But we still need to be able to get the alloc layout to drop.\n+    // CStr has no drop glue, but custom DSTs might, and need to work.\n+    drop(y);\n+}\n+\n #[test]\n fn test_from_owned() {\n     let foo = 123;"}, {"sha": "ae61f4a2384b61fe5813fc173c74ca9fc1348d74", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=6bc772cdc0a9021a6286ebd550c2f6221179f21d", "patch": "@@ -1648,7 +1648,7 @@ struct WeakInner<'a> {\n     strong: &'a atomic::AtomicUsize,\n }\n \n-impl<T> Weak<T> {\n+impl<T: ?Sized> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1678,15 +1678,17 @@ impl<T> Weak<T> {\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n \n-        // SAFETY: we must offset the pointer manually, and said pointer may be\n-        // a dangling weak (usize::MAX) if T is sized. data_offset is safe to call,\n-        // because we know that a pointer to unsized T was derived from a real\n-        // unsized T, as dangling weaks are only created for sized T. wrapping_offset\n-        // is used so that we can use the same code path for the non-dangling\n-        // unsized case and the potentially dangling sized case.\n-        unsafe {\n-            let offset = data_offset(ptr as *mut T);\n-            set_data_ptr(ptr as *mut T, (ptr as *mut u8).wrapping_offset(offset))\n+        if is_dangling(self.ptr) {\n+            // If the pointer is dangling, we return a null pointer as the dangling sentinel.\n+            // We can't return the usize::MAX sentinel, as that could valid if T is ZST.\n+            // SAFETY: we have to return a known sentinel here that cannot be produced for\n+            // a valid pointer, so that `from_raw` can reverse this transformation.\n+            (ptr as *mut T).set_ptr_value(ptr::null_mut())\n+        } else {\n+            // SAFETY: If the pointer is not dangling, it describes to a valid allocation.\n+            // The payload may be dropped at this point, and we have to maintain provenance,\n+            // so use raw pointer manipulation.\n+            unsafe { &raw mut (*ptr).data }\n         }\n     }\n \n@@ -1768,18 +1770,23 @@ impl<T> Weak<T> {\n     /// [`forget`]: std::mem::forget\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n-        // SAFETY: data_offset is safe to call, because this pointer originates from a Weak.\n         // See Weak::as_ptr for context on how the input pointer is derived.\n-        let offset = unsafe { data_offset(ptr) };\n \n-        // Reverse the offset to find the original ArcInner.\n-        // SAFETY: we use wrapping_offset here because the pointer may be dangling (but only if T: Sized)\n-        let ptr = unsafe {\n-            set_data_ptr(ptr as *mut ArcInner<T>, (ptr as *mut u8).wrapping_offset(-offset))\n+        let ptr = if ptr.is_null() {\n+            // If we get a null pointer, this is a dangling weak.\n+            // SAFETY: this is the same sentinel as used in Weak::new and is_dangling\n+            (ptr as *mut ArcInner<T>).set_ptr_value(usize::MAX as *mut _)\n+        } else {\n+            // Otherwise, this describes a real allocation.\n+            // SAFETY: data_offset is safe to call, as ptr describes a real allocation.\n+            let offset = unsafe { data_offset(ptr) };\n+            // Thus, we reverse the offset to get the whole RcBox.\n+            // SAFETY: the pointer originated from a Weak, so this offset is safe.\n+            unsafe { (ptr as *mut ArcInner<T>).set_ptr_value((ptr as *mut u8).offset(-offset)) }\n         };\n \n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n-        unsafe { Weak { ptr: NonNull::new_unchecked(ptr) } }\n+        Weak { ptr: unsafe { NonNull::new_unchecked(ptr) } }\n     }\n }\n "}, {"sha": "ce5c32ed8c5f303aa236b4dc6dd55290c4d2d75c", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc772cdc0a9021a6286ebd550c2f6221179f21d/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=6bc772cdc0a9021a6286ebd550c2f6221179f21d", "patch": "@@ -158,6 +158,30 @@ fn into_from_weak_raw() {\n     }\n }\n \n+#[test]\n+fn test_into_from_weak_raw_unsized() {\n+    use std::fmt::Display;\n+    use std::string::ToString;\n+\n+    let arc: Arc<str> = Arc::from(\"foo\");\n+    let weak: Weak<str> = Arc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }, \"foo\");\n+    assert!(weak.ptr_eq(&weak2));\n+\n+    let arc: Arc<dyn Display> = Arc::new(123);\n+    let weak: Weak<dyn Display> = Arc::downgrade(&arc);\n+\n+    let ptr = Weak::into_raw(weak.clone());\n+    let weak2 = unsafe { Weak::from_raw(ptr) };\n+\n+    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n+    assert!(weak.ptr_eq(&weak2));\n+}\n+\n #[test]\n fn test_cowarc_clone_make_mut() {\n     let mut cow0 = Arc::new(75);\n@@ -329,6 +353,23 @@ fn test_unsized() {\n     assert!(y.upgrade().is_none());\n }\n \n+#[test]\n+fn test_maybe_thin_unsized() {\n+    // If/when custom thin DSTs exist, this test should be updated to use one\n+    use std::ffi::{CStr, CString};\n+\n+    let x: Arc<CStr> = Arc::from(CString::new(\"swordfish\").unwrap().into_boxed_c_str());\n+    assert_eq!(format!(\"{:?}\", x), \"\\\"swordfish\\\"\");\n+    let y: Weak<CStr> = Arc::downgrade(&x);\n+    drop(x);\n+\n+    // At this point, the weak points to a dropped DST\n+    assert!(y.upgrade().is_none());\n+    // But we still need to be able to get the alloc layout to drop.\n+    // CStr has no drop glue, but custom DSTs might, and need to work.\n+    drop(y);\n+}\n+\n #[test]\n fn test_from_owned() {\n     let foo = 123;"}]}