{"sha": "acea6fc1cb5edf5211ade6ad4a79b119879eab82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZWE2ZmMxY2I1ZWRmNTIxMWFkZTZhZDRhNzliMTE5ODc5ZWFiODI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-26T09:42:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-26T11:33:42Z"}, "message": "Rollup merge of #31904 - bluss:writer-formatter-error, r=alexcrichton\n\nMake sure formatter errors are emitted by the default Write::write_fmt\n\nPreviously, if an error was returned from the formatter that did not\noriginate in an underlying writer error, Write::write_fmt would return\nsuccessfully even if the formatting did not complete (was interrupted by\nan `fmt::Error` return).\n\nNow we choose to emit an io::Error with kind Other for formatter errors.\n\nSince this may reveal error returns from `write!()` and similar that\npreviously passed silently, it's a kind of a [breaking-change].\n\nFixes #31879", "tree": {"sha": "5fa51dde12beef1d77292b205917548d7a6f6f8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa51dde12beef1d77292b205917548d7a6f6f8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acea6fc1cb5edf5211ade6ad4a79b119879eab82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acea6fc1cb5edf5211ade6ad4a79b119879eab82", "html_url": "https://github.com/rust-lang/rust/commit/acea6fc1cb5edf5211ade6ad4a79b119879eab82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acea6fc1cb5edf5211ade6ad4a79b119879eab82/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263e7228ca04672f9e281f241e8e389c6f5c80f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/263e7228ca04672f9e281f241e8e389c6f5c80f9", "html_url": "https://github.com/rust-lang/rust/commit/263e7228ca04672f9e281f241e8e389c6f5c80f9"}, {"sha": "6cfafad3c56736a62e1043a8d01f7f2c74384008", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfafad3c56736a62e1043a8d01f7f2c74384008", "html_url": "https://github.com/rust-lang/rust/commit/6cfafad3c56736a62e1043a8d01f7f2c74384008"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "61334f309249acc4a902d7de4092e67672448a87", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acea6fc1cb5edf5211ade6ad4a79b119879eab82/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acea6fc1cb5edf5211ade6ad4a79b119879eab82/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=acea6fc1cb5edf5211ade6ad4a79b119879eab82", "patch": "@@ -1055,7 +1055,14 @@ pub trait Write {\n         let mut output = Adaptor { inner: self, error: Ok(()) };\n         match fmt::write(&mut output, fmt) {\n             Ok(()) => Ok(()),\n-            Err(..) => output.error\n+            Err(..) => {\n+                // check if the error came from the underlying `Write` or not\n+                if output.error.is_err() {\n+                    output.error\n+                } else {\n+                    Err(Error::new(ErrorKind::Other, \"formatter error\"))\n+                }\n+            }\n         }\n     }\n "}, {"sha": "e4439087946c11f610e64f3c6d6e142baf38bf2a", "filename": "src/test/run-pass/write-fmt-errors.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/acea6fc1cb5edf5211ade6ad4a79b119879eab82/src%2Ftest%2Frun-pass%2Fwrite-fmt-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acea6fc1cb5edf5211ade6ad4a79b119879eab82/src%2Ftest%2Frun-pass%2Fwrite-fmt-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwrite-fmt-errors.rs?ref=acea6fc1cb5edf5211ade6ad4a79b119879eab82", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::io::{self, Error, Write, sink};\n+\n+struct ErrorDisplay;\n+\n+impl fmt::Display for ErrorDisplay {\n+    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+        Err(fmt::Error)\n+    }\n+}\n+\n+struct ErrorWriter;\n+\n+const FORMAT_ERROR: io::ErrorKind = io::ErrorKind::Other;\n+const WRITER_ERROR: io::ErrorKind = io::ErrorKind::NotConnected;\n+\n+impl Write for ErrorWriter {\n+    fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {\n+        Err(Error::new(WRITER_ERROR, \"not connected\"))\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+}\n+\n+fn main() {\n+    // Test that the error from the formatter is propagated.\n+    let res = write!(sink(), \"{} {} {}\", 1, ErrorDisplay, \"bar\");\n+    assert!(res.is_err(), \"formatter error did not propagate\");\n+    assert_eq!(res.unwrap_err().kind(), FORMAT_ERROR);\n+\n+    // Test that an underlying error is propagated\n+    let res = write!(ErrorWriter, \"abc\");\n+    assert!(res.is_err(), \"writer error did not propagate\");\n+\n+    // Writer error\n+    let res = write!(ErrorWriter, \"abc {}\", ErrorDisplay);\n+    assert!(res.is_err(), \"writer error did not propagate\");\n+    assert_eq!(res.unwrap_err().kind(), WRITER_ERROR);\n+\n+    // Formatter error\n+    let res = write!(ErrorWriter, \"{} abc\", ErrorDisplay);\n+    assert!(res.is_err(), \"formatter error did not propagate\");\n+    assert_eq!(res.unwrap_err().kind(), FORMAT_ERROR);\n+}"}]}