{"sha": "64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWU5NjY4YTJlM2Q0ZDc1Yjg1OWZkM2JjYTE0NjZhOTdmYWUyZDg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-24T21:45:00Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-25T20:26:23Z"}, "message": "container: remove internal iterators from Map\n\nthe maps are being migrated to external iterators", "tree": {"sha": "d07261f531cff9b87d3418919267d0fa4a8b5ea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07261f531cff9b87d3418919267d0fa4a8b5ea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "html_url": "https://github.com/rust-lang/rust/commit/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5242e8d2bad01beec7c841d20952cb230bc9fd84", "url": "https://api.github.com/repos/rust-lang/rust/commits/5242e8d2bad01beec7c841d20952cb230bc9fd84", "html_url": "https://github.com/rust-lang/rust/commit/5242e8d2bad01beec7c841d20952cb230bc9fd84"}], "stats": {"total": 241, "additions": 104, "deletions": 137}, "files": [{"sha": "1d163922955d0f0baa23eddcfe7e190bf28b9f9c", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "patch": "@@ -56,38 +56,6 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    fn each<'a>(&'a self, it: &fn(&uint, &'a V) -> bool) -> bool {\n-        for uint::range(0, self.v.len()) |i| {\n-            match self.v[i] {\n-              Some(ref elt) => if !it(&i, elt) { return false; },\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /// Visit all keys in order\n-    fn each_key(&self, blk: &fn(key: &uint) -> bool) -> bool {\n-        self.each(|k, _| blk(k))\n-    }\n-\n-    /// Visit all values in order\n-    fn each_value<'a>(&'a self, blk: &fn(value: &'a V) -> bool) -> bool {\n-        self.each(|_, v| blk(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, it: &fn(&uint, &mut V) -> bool) -> bool {\n-        for uint::range(0, self.v.len()) |i| {\n-            match self.v[i] {\n-              Some(ref mut elt) => if !it(&i, elt) { return false; },\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &uint) -> Option<&'a V> {\n         if *key < self.v.len() {\n@@ -156,6 +124,38 @@ impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap\n     pub fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n \n+    /// Visit all key-value pairs in order\n+    pub fn each<'a>(&'a self, it: &fn(&uint, &'a V) -> bool) -> bool {\n+        for uint::range(0, self.v.len()) |i| {\n+            match self.v[i] {\n+              Some(ref elt) => if !it(&i, elt) { return false; },\n+              None => ()\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /// Visit all keys in order\n+    pub fn each_key(&self, blk: &fn(key: &uint) -> bool) -> bool {\n+        self.each(|k, _| blk(k))\n+    }\n+\n+    /// Visit all values in order\n+    pub fn each_value<'a>(&'a self, blk: &fn(value: &'a V) -> bool) -> bool {\n+        self.each(|_, v| blk(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    pub fn mutate_values(&mut self, it: &fn(&uint, &mut V) -> bool) -> bool {\n+        for uint::range(0, self.v.len()) |i| {\n+            match self.v[i] {\n+              Some(ref mut elt) => if !it(&i, elt) { return false; },\n+              None => ()\n+            }\n+        }\n+        return true;\n+    }\n+\n     /// Visit all key-value pairs in reverse order\n     pub fn each_reverse<'a>(&'a self, it: &fn(uint, &'a V) -> bool) -> bool {\n         for uint::range_rev(self.v.len(), 0) |i| {"}, {"sha": "fd83fd199167403f4e0bf9976534caf17f8d31cb", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "patch": "@@ -107,26 +107,6 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    fn each<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n-        each(&self.root, f)\n-    }\n-\n-    /// Visit all keys in order\n-    fn each_key(&self, f: &fn(&K) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    /// Visit all values in order\n-    fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool {\n-        mutate_values(&mut self.root, f)\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V> {\n         let mut current: &'a Option<~TreeNode<K, V>> = &self.root;\n@@ -184,6 +164,26 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n+    /// Visit all key-value pairs in order\n+    pub fn each<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n+        each(&self.root, f)\n+    }\n+\n+    /// Visit all keys in order\n+    pub fn each_key(&self, f: &fn(&K) -> bool) -> bool {\n+        self.each(|k, _| f(k))\n+    }\n+\n+    /// Visit all values in order\n+    pub fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool {\n+        self.each(|_, v| f(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    pub fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool {\n+        mutate_values(&mut self.root, f)\n+    }\n+\n     /// Visit all key-value pairs in reverse order\n     pub fn each_reverse<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n         each_reverse(&self.root, f)"}, {"sha": "d6f4c26715a4f6e18c656ab322d6c596c57e7d24", "filename": "src/libstd/container.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibstd%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibstd%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcontainer.rs?ref=64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "patch": "@@ -34,18 +34,6 @@ pub trait Map<K, V>: Mutable {\n     /// Return true if the map contains a value for the specified key\n     fn contains_key(&self, key: &K) -> bool;\n \n-    /// Visits all keys and values\n-    fn each<'a>(&'a self, f: &fn(&K, &'a V) -> bool) -> bool;\n-\n-    /// Visit all keys\n-    fn each_key(&self, f: &fn(&K) -> bool) -> bool;\n-\n-    /// Visit all values\n-    fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool;\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool;\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n "}, {"sha": "962025915d24cd56eb893b33c5ed61bddfa3d394", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "patch": "@@ -307,34 +307,6 @@ impl<K:Hash + Eq,V> Map<K, V> for HashMap<K, V> {\n         }\n     }\n \n-    /// Visit all key-value pairs\n-    fn each<'a>(&'a self, blk: &fn(&K, &'a V) -> bool) -> bool {\n-        self.iter().advance(|(k, v)| blk(k, v))\n-    }\n-\n-    /// Visit all keys\n-    fn each_key(&self, blk: &fn(k: &K) -> bool) -> bool {\n-        self.iter().advance(|(k, _)| blk(k))\n-    }\n-\n-    /// Visit all values\n-    fn each_value<'a>(&'a self, blk: &fn(v: &'a V) -> bool) -> bool {\n-        self.iter().advance(|(_, v)| blk(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, blk: &fn(&K, &mut V) -> bool) -> bool {\n-        for uint::range(0, self.buckets.len()) |i| {\n-            match self.buckets[i] {\n-              Some(Bucket{key: ref key, value: ref mut value, _}) => {\n-                if !blk(key, value) { return false; }\n-              }\n-              None => ()\n-            }\n-        }\n-        return true;\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     fn find<'a>(&'a self, k: &K) -> Option<&'a V> {\n         match self.bucket_for_key(k) {\n@@ -516,6 +488,34 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         }\n     }\n \n+    /// Visit all key-value pairs\n+    pub fn each<'a>(&'a self, blk: &fn(&K, &'a V) -> bool) -> bool {\n+        self.iter().advance(|(k, v)| blk(k, v))\n+    }\n+\n+    /// Visit all keys\n+    pub fn each_key(&self, blk: &fn(k: &K) -> bool) -> bool {\n+        self.iter().advance(|(k, _)| blk(k))\n+    }\n+\n+    /// Visit all values\n+    pub fn each_value<'a>(&'a self, blk: &fn(v: &'a V) -> bool) -> bool {\n+        self.iter().advance(|(_, v)| blk(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    pub fn mutate_values(&mut self, blk: &fn(&K, &mut V) -> bool) -> bool {\n+        for uint::range(0, self.buckets.len()) |i| {\n+            match self.buckets[i] {\n+              Some(Bucket{key: ref key, value: ref mut value, _}) => {\n+                if !blk(key, value) { return false; }\n+              }\n+              None => ()\n+            }\n+        }\n+        return true;\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// Iterator element type is (&'a K, &'a V).\n     pub fn iter<'a>(&'a self) -> HashMapIterator<'a, K, V> {"}, {"sha": "8f70c75439a016c121c31f41b6c9bacbb9a4b6e3", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "patch": "@@ -58,30 +58,6 @@ impl<T> Map<uint, T> for TrieMap<T> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    #[inline]\n-    fn each<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n-        self.root.each(f)\n-    }\n-\n-    /// Visit all keys in order\n-    #[inline]\n-    fn each_key(&self, f: &fn(&uint) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    /// Visit all values in order\n-    #[inline]\n-    fn each_value<'a>(&'a self, f: &fn(&'a T) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    /// Iterate over the map and mutate the contained values\n-    #[inline]\n-    fn mutate_values(&mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n-        self.root.mutate_values(f)\n-    }\n-\n     /// Return a reference to the value corresponding to the key\n     #[inline]\n     fn find<'a>(&'a self, key: &uint) -> Option<&'a T> {\n@@ -158,6 +134,30 @@ impl<T> TrieMap<T> {\n         self.root.each_reverse(f)\n     }\n \n+    /// Visit all key-value pairs in order\n+    #[inline]\n+    pub fn each<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n+        self.root.each(f)\n+    }\n+\n+    /// Visit all keys in order\n+    #[inline]\n+    pub fn each_key(&self, f: &fn(&uint) -> bool) -> bool {\n+        self.each(|k, _| f(k))\n+    }\n+\n+    /// Visit all values in order\n+    #[inline]\n+    pub fn each_value<'a>(&'a self, f: &fn(&'a T) -> bool) -> bool {\n+        self.each(|_, v| f(v))\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n+    #[inline]\n+    pub fn mutate_values(&mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n+        self.root.mutate_values(f)\n+    }\n+\n     /// Visit all keys in reverse order\n     #[inline]\n     pub fn each_key_reverse(&self, f: &fn(&uint) -> bool) -> bool {"}, {"sha": "2805fec6fce2cda2a6afe8cec5bce4bed8c37e5c", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ee9668a2e3d4d75b859fd3bca1466a97fae2d8/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=64ee9668a2e3d4d75b859fd3bca1466a97fae2d8", "patch": "@@ -61,29 +61,8 @@ impl<T> Mutable for cat<T> {\n }\n \n impl<T> Map<int, T> for cat<T> {\n-    fn each<'a>(&'a self, f: &fn(&int, &'a T) -> bool) -> bool {\n-        let mut n = int::abs(self.meows);\n-        while n > 0 {\n-            if !f(&n, &self.name) { return false; }\n-            n -= 1;\n-        }\n-        return true;\n-    }\n-\n     fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-    fn each_key(&self, f: &fn(v: &int) -> bool) -> bool {\n-        self.each(|k, _| f(k))\n-    }\n-\n-    fn each_value<'a>(&'a self, f: &fn(v: &'a T) -> bool) -> bool {\n-        self.each(|_, v| f(v))\n-    }\n-\n-    fn mutate_values(&mut self, _f: &fn(&int, &mut T) -> bool) -> bool {\n-        fail!(\"nope\")\n-    }\n-\n     fn insert(&mut self, k: int, _: T) -> bool {\n         self.meows += k;\n         true"}]}