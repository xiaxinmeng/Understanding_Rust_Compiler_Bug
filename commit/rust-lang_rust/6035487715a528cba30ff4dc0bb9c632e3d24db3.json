{"sha": "6035487715a528cba30ff4dc0bb9c632e3d24db3", "node_id": "C_kwDOAAsO6NoAKDYwMzU0ODc3MTVhNTI4Y2JhMzBmZjRkYzBiYjljNjMyZTNkMjRkYjM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-25T23:46:40Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-27T20:37:10Z"}, "message": "Clarify `ArenaAllocatable`'s second parameter.\n\nIt's simply a binary thing to allow different behaviour for `Copy` vs\n`!Copy` types. The new code makes this much clearer; I was scratching my\nhead over the old code for some time.", "tree": {"sha": "89e5526bf8644da0a578d7e8725c55bbbc150bca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e5526bf8644da0a578d7e8725c55bbbc150bca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6035487715a528cba30ff4dc0bb9c632e3d24db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6035487715a528cba30ff4dc0bb9c632e3d24db3", "html_url": "https://github.com/rust-lang/rust/commit/6035487715a528cba30ff4dc0bb9c632e3d24db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6035487715a528cba30ff4dc0bb9c632e3d24db3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9065c7ced619dfee3184eecf36d568cd8cfa284f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9065c7ced619dfee3184eecf36d568cd8cfa284f", "html_url": "https://github.com/rust-lang/rust/commit/9065c7ced619dfee3184eecf36d568cd8cfa284f"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "3928d70c0ede2c9b9c716e822e35f9649e5d020c", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6035487715a528cba30ff4dc0bb9c632e3d24db3/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6035487715a528cba30ff4dc0bb9c632e3d24db3/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=6035487715a528cba30ff4dc0bb9c632e3d24db3", "patch": "@@ -546,7 +546,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n         $($name: $crate::TypedArena<$ty>,)*\n     }\n \n-    pub trait ArenaAllocatable<'tcx, T = Self>: Sized {\n+    pub trait ArenaAllocatable<'tcx, C = rustc_arena::IsNotCopy>: Sized {\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n         fn allocate_from_iter<'a>(\n             arena: &'a Arena<'tcx>,\n@@ -555,7 +555,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     }\n \n     // Any type that impls `Copy` can be arena-allocated in the `DroplessArena`.\n-    impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n+    impl<'tcx, T: Copy> ArenaAllocatable<'tcx, rustc_arena::IsCopy> for T {\n         #[inline]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n             arena.dropless.alloc(self)\n@@ -569,7 +569,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n         }\n     }\n     $(\n-        impl<'tcx> ArenaAllocatable<'tcx, $ty> for $ty {\n+        impl<'tcx> ArenaAllocatable<'tcx, rustc_arena::IsNotCopy> for $ty {\n             #[inline]\n             fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n                 if !::std::mem::needs_drop::<Self>() {\n@@ -595,7 +595,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n \n     impl<'tcx> Arena<'tcx> {\n         #[inline]\n-        pub fn alloc<T: ArenaAllocatable<'tcx, U>, U>(&self, value: T) -> &mut T {\n+        pub fn alloc<T: ArenaAllocatable<'tcx, C>, C>(&self, value: T) -> &mut T {\n             value.allocate_on(self)\n         }\n \n@@ -608,7 +608,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n             self.dropless.alloc_slice(value)\n         }\n \n-        pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, U>, U>(\n+        pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, C>, C>(\n             &'a self,\n             iter: impl ::std::iter::IntoIterator<Item = T>,\n         ) -> &'a mut [T] {\n@@ -617,5 +617,10 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     }\n }\n \n+// Marker types that let us give different behaviour for arenas allocating\n+// `Copy` types vs `!Copy` types.\n+pub struct IsCopy;\n+pub struct IsNotCopy;\n+\n #[cfg(test)]\n mod tests;"}]}