{"sha": "153e843c490d569f4faf8f2e625dc7b837df584f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1M2U4NDNjNDkwZDU2OWY0ZmFmOGYyZTYyNWRjN2I4MzdkZjU4NGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-19T08:53:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-19T09:44:28Z"}, "message": "fix Rvalue::ty for ThreadLocalRef", "tree": {"sha": "bd71836d1671ff1be48e4825373b472f56e21bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd71836d1671ff1be48e4825373b472f56e21bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/153e843c490d569f4faf8f2e625dc7b837df584f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/153e843c490d569f4faf8f2e625dc7b837df584f", "html_url": "https://github.com/rust-lang/rust/commit/153e843c490d569f4faf8f2e625dc7b837df584f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/153e843c490d569f4faf8f2e625dc7b837df584f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1766c6372e5bebf8e1198172abef0519d62ffe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1766c6372e5bebf8e1198172abef0519d62ffe9", "html_url": "https://github.com/rust-lang/rust/commit/c1766c6372e5bebf8e1198172abef0519d62ffe9"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "e68a6f52c73a266fbc90b580d44e3e612134a35f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/153e843c490d569f4faf8f2e625dc7b837df584f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153e843c490d569f4faf8f2e625dc7b837df584f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=153e843c490d569f4faf8f2e625dc7b837df584f", "patch": "@@ -1007,13 +1007,13 @@ impl<'tcx> LocalDecl<'tcx> {\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n-    /// access that static\n+    /// access that static.\n     pub fn is_ref_to_static(&self) -> bool {\n         matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))\n     }\n \n-    /// Returns `Some` if this is a reference to a static item that is used to\n-    /// access that static\n+    /// Returns `Some` if this is a reference to a thread-local static item that is used to\n+    /// access that static.\n     pub fn is_ref_to_thread_local(&self) -> bool {\n         match self.local_info {\n             Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,"}, {"sha": "f0bfdae261c643bdf2b6801ea8728aeba82a77e1", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/153e843c490d569f4faf8f2e625dc7b837df584f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153e843c490d569f4faf8f2e625dc7b837df584f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=153e843c490d569f4faf8f2e625dc7b837df584f", "patch": "@@ -152,10 +152,14 @@ impl<'tcx> Rvalue<'tcx> {\n                 tcx.mk_ty(ty::Array(operand.ty(local_decls, tcx), count))\n             }\n             Rvalue::ThreadLocalRef(did) => {\n+                let static_ty = tcx.type_of(did);\n                 if tcx.is_mutable_static(did) {\n-                    tcx.mk_mut_ptr(tcx.type_of(did))\n+                    tcx.mk_mut_ptr(static_ty)\n+                } else if tcx.is_foreign_item(did) {\n+                    tcx.mk_imm_ptr(static_ty)\n                 } else {\n-                    tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.type_of(did))\n+                    // FIXME: These things don't *really* have 'static lifetime.\n+                    tcx.mk_imm_ref(tcx.lifetimes.re_static, static_ty)\n                 }\n             }\n             Rvalue::Ref(reg, bk, ref place) => {"}, {"sha": "4a20e1c32f99e4c0bb4c0455e928187dbe911b8c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/153e843c490d569f4faf8f2e625dc7b837df584f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/153e843c490d569f4faf8f2e625dc7b837df584f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=153e843c490d569f4faf8f2e625dc7b837df584f", "patch": "@@ -530,6 +530,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));\n \n         // Make sure that accesses to unsafe statics end up using raw pointers.\n+        // For thread-locals, this needs to be kept in sync with `Rvalue::ty`.\n         if self.is_mutable_static(def_id) {\n             self.mk_mut_ptr(static_ty)\n         } else if self.is_foreign_item(def_id) {"}, {"sha": "88d583b815adba1c8c196f496a1d366aeb35a79a", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/153e843c490d569f4faf8f2e625dc7b837df584f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/153e843c490d569f4faf8f2e625dc7b837df584f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir?ref=153e843c490d569f4faf8f2e625dc7b837df584f", "patch": "@@ -4,17 +4,17 @@ promoted[0] in FOO: &[&i32; 1] = {\n     let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+    let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n \n     bb0: {\n-        _3 = const {alloc2: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc2: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n-                                         // + ty: &i32\n+                                         // + ty: *const i32\n                                          // + val: Value(Scalar(alloc2))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n-        _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n+                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "82277b2a21cbef3515c527e46a6b18f860c37626", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/153e843c490d569f4faf8f2e625dc7b837df584f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/153e843c490d569f4faf8f2e625dc7b837df584f/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=153e843c490d569f4faf8f2e625dc7b837df584f", "patch": "@@ -7,7 +7,7 @@\n       let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-      let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+      let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       scope 1 {\n       }\n@@ -18,16 +18,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2: &i32};       // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc2: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n--                                          // + ty: &i32\n+-                                          // + ty: *const i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n+-                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}]}