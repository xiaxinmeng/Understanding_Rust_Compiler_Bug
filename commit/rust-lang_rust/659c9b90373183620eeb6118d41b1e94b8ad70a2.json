{"sha": "659c9b90373183620eeb6118d41b1e94b8ad70a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OWM5YjkwMzczMTgzNjIwZWViNjExOGQ0MWIxZTk0YjhhZDcwYTI=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-09T21:09:39Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-10T22:52:20Z"}, "message": "Update indentation heuristics for single arg functions", "tree": {"sha": "d0ab6f8c17f017c8d10759e021ae7c63d29ee8e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ab6f8c17f017c8d10759e021ae7c63d29ee8e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659c9b90373183620eeb6118d41b1e94b8ad70a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659c9b90373183620eeb6118d41b1e94b8ad70a2", "html_url": "https://github.com/rust-lang/rust/commit/659c9b90373183620eeb6118d41b1e94b8ad70a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659c9b90373183620eeb6118d41b1e94b8ad70a2/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c680bb4030784ca15cc7d6c39caf297c9fb010e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c680bb4030784ca15cc7d6c39caf297c9fb010e4", "html_url": "https://github.com/rust-lang/rust/commit/c680bb4030784ca15cc7d6c39caf297c9fb010e4"}], "stats": {"total": 328, "additions": 174, "deletions": 154}, "files": [{"sha": "23e669d08af701b34b79b9979d89dda2bf7bce09", "filename": "src/chains.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -23,8 +23,8 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n                      -> Option<String> {\n     let mut expr = orig_expr;\n     let mut rewrites = Vec::new();\n-    let indent = context.block_indent + context.config.tab_spaces;\n-    let max_width = context.config.max_width - context.config.tab_spaces;\n+    let indent = offset + context.config.tab_spaces;\n+    let max_width = try_opt!(context.config.max_width.checked_sub(indent));\n \n     loop {\n         match expr.node {\n@@ -103,7 +103,8 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n \n     // Put the first link on the same line as parent, if it fits.\n     let first_connector = if parent_rewrite.len() + rewrites[0].len() <= width &&\n-                             !rewrites[0].contains('\\n') {\n+                             !rewrites[0].contains('\\n') ||\n+                             parent_rewrite.len() <= context.config.tab_spaces {\n         \"\"\n     } else {\n         &connector[..]\n@@ -128,6 +129,10 @@ fn rewrite_method_call(method_name: ast::Ident,\n     };\n \n     let callee_str = format!(\".{}{}\", method_name, type_str);\n+    let inner_context = &RewriteContext {\n+        block_indent: offset,\n+        ..*context\n+    };\n \n-    rewrite_call(context, &callee_str, args, span, width, offset)\n+    rewrite_call(inner_context, &callee_str, args, span, width, offset)\n }"}, {"sha": "ed06ff7e5b69ec1e7f0f22ea49667f2e1b1633b7", "filename": "src/comment.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -41,9 +41,9 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();\n \n     let (_, mut s) = s.lines()\n-        .enumerate()\n-        .map(|(i, mut line)| {\n-                 line = line.trim();\n+                         .enumerate()\n+                         .map(|(i, mut line)| {\n+                             line = line.trim();\n \n             // Drop old closer.\n                  if i == line_breaks && line.ends_with(\"*/\") && !line.starts_with(\"//\") {\n@@ -166,11 +166,11 @@ pub fn contains_comment(text: &str) -> bool {\n pub fn uncommented(text: &str) -> String {\n     CharClasses::new(text.chars())\n         .filter_map(|(s, c)| {\n-                        match s {\n-                            CodeCharKind::Normal => Some(c),\n-                            CodeCharKind::Comment => None,\n-                        }\n-                    })\n+            match s {\n+                CodeCharKind::Normal => Some(c),\n+                CodeCharKind::Comment => None,\n+            }\n+        })\n         .collect()\n }\n "}, {"sha": "710fb6f8703863d32110e02ef8bebe31d01dc20a", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -1022,8 +1022,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     };\n \n     let field_iter = fields.into_iter()\n-        .map(StructLitField::Regular)\n-        .chain(base.into_iter().map(StructLitField::Base));\n+                         .map(StructLitField::Regular)\n+                         .chain(base.into_iter().map(StructLitField::Base));\n \n     let inner_context = &RewriteContext { block_indent: indent, ..*context };\n \n@@ -1035,7 +1035,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                                      StructLitField::Regular(ref field) => field.span.lo,\n                                      StructLitField::Base(ref expr) => {\n                                          let last_field_hi = fields.last()\n-                                             .map_or(span.lo, |field| field.span.hi);\n+                                                                 .map_or(span.lo,\n+                                                                         |field| field.span.hi);\n                                          let snippet = context.snippet(mk_sp(last_field_hi,\n                                                                              expr.span.lo));\n                                          let pos = snippet.find_uncommented(\"..\").unwrap();"}, {"sha": "4b08a8b35e1db497180cadd8d68e678b86f4faa0", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -38,10 +38,10 @@ impl Rewrite for ast::ViewPath {\n                 let path_str = try_opt!(path.rewrite(context, width - ident_str.len() - 4, offset));\n \n                 Some(if path.segments.last().unwrap().identifier == ident {\n-                        path_str\n-                    } else {\n-                        format!(\"{} as {}\", path_str, ident_str)\n-                    })\n+                    path_str\n+                } else {\n+                    format!(\"{} as {}\", path_str, ident_str)\n+                })\n             }\n         }\n     }"}, {"sha": "ef8ad37b1269488a72dbdf71b6286b18ff359f45", "filename": "src/items.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -333,12 +333,12 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME: the comment for the self argument is dropped. This is blocked\n         // on rust issue #27522.\n         let min_args = explicit_self\n-            .and_then(|explicit_self| rewrite_explicit_self(explicit_self, args))\n-            .map(|self_str| {\n-                     arg_item_strs[0] = self_str;\n-                     2\n-                 })\n-            .unwrap_or(1);\n+                           .and_then(|explicit_self| rewrite_explicit_self(explicit_self, args))\n+                           .map(|self_str| {\n+                               arg_item_strs[0] = self_str;\n+                               2\n+                           })\n+                           .unwrap_or(1);\n \n         // Comments between args\n         let mut arg_items = Vec::new();\n@@ -761,9 +761,9 @@ impl<'a> FmtVisitor<'a> {\n \n         let indent = self.block_indent + self.config.tab_spaces;\n         let mut attr_str = field.node\n-            .attrs\n-            .rewrite(&self.get_context(), self.config.max_width - indent, indent)\n-            .unwrap();\n+                               .attrs\n+                               .rewrite(&self.get_context(), self.config.max_width - indent, indent)\n+                               .unwrap();\n         if !attr_str.is_empty() {\n             attr_str.push('\\n');\n             attr_str.push_str(&make_indent(indent));\n@@ -804,18 +804,18 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME: don't unwrap\n         let lt_strs = lifetimes.iter().map(|lt| lt.rewrite(&context, h_budget, offset).unwrap());\n         let ty_strs = tys.iter()\n-            .map(|ty_param| ty_param.rewrite(&context, h_budget, offset).unwrap());\n+                          .map(|ty_param| ty_param.rewrite(&context, h_budget, offset).unwrap());\n \n         // Extract comments between generics.\n         let lt_spans = lifetimes.iter()\n-            .map(|l| {\n-                     let hi = if l.bounds.is_empty() {\n-                         l.lifetime.span.hi\n-                     } else {\n-                         l.bounds[l.bounds.len() - 1].span.hi\n-                     };\n-                     codemap::mk_sp(l.lifetime.span.lo, hi)\n-                 });\n+                           .map(|l| {\n+                               let hi = if l.bounds.is_empty() {\n+                                   l.lifetime.span.hi\n+                               } else {\n+                                   l.bounds[l.bounds.len() - 1].span.hi\n+                               };\n+                               codemap::mk_sp(l.lifetime.span.lo, hi)\n+                           });\n         let ty_spans = tys.iter().map(span_for_ty_param);\n \n         let items = itemize_list(self.codemap,"}, {"sha": "b07b81bd672a9e75631fa8dee2b7cf43dc9b528d", "filename": "src/lists.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -283,22 +283,23 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n             };\n \n             // Post-comment\n-                     let next_start = match self.inner.peek() {\n-                         Some(ref next_item) => (self.get_lo)(next_item),\n-                         None => self.next_span_start,\n-                     };\n-                     let post_snippet = self.codemap\n-                         .span_to_snippet(codemap::mk_sp((self.get_hi)(&item), next_start))\n-                         .unwrap();\n-\n-                     let comment_end = match self.inner.peek() {\n-                         Some(..) => {\n-                             let block_open_index = post_snippet.find(\"/*\");\n-                             let newline_index = post_snippet.find('\\n');\n-                             let separator_index = post_snippet.find_uncommented(\",\").unwrap();\n-\n-                             match (block_open_index, newline_index) {\n-                                 // Separator before comment, with the next item on same line.\n+                let next_start = match self.inner.peek() {\n+                    Some(ref next_item) => (self.get_lo)(next_item),\n+                    None => self.next_span_start,\n+                };\n+                let post_snippet = self.codemap\n+                                       .span_to_snippet(codemap::mk_sp((self.get_hi)(&item),\n+                                                                       next_start))\n+                                       .unwrap();\n+\n+                let comment_end = match self.inner.peek() {\n+                    Some(..) => {\n+                        let block_open_index = post_snippet.find(\"/*\");\n+                        let newline_index = post_snippet.find('\\n');\n+                        let separator_index = post_snippet.find_uncommented(\",\").unwrap();\n+\n+                        match (block_open_index, newline_index) {\n+                            // Separator before comment, with the next item on same line.\n                         // Comment belongs to next item.\n                         (Some(i), None) if i > separator_index => {\n                             separator_index + 1"}, {"sha": "9f3cc17e4c7378e8c03b7f47b7c8ccc3c0eeded1", "filename": "src/types.rs", "status": "modified", "additions": 64, "deletions": 52, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -197,11 +197,11 @@ fn rewrite_segment(segment: &ast::PathSegment,\n                                                                    !data.types.is_empty() ||\n                                                                    !data.bindings.is_empty() => {\n             let param_list = data.lifetimes\n-                .iter()\n-                .map(SegmentParam::LifeTime)\n-                .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n-                .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n-                .collect::<Vec<_>>();\n+                                 .iter()\n+                                 .map(SegmentParam::LifeTime)\n+                                 .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n+                                 .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n+                                 .collect::<Vec<_>>();\n \n             let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n             let list_lo = span_after(codemap::mk_sp(*span_lo, span_hi), \"<\", context.codemap);\n@@ -273,54 +273,66 @@ impl Rewrite for ast::WherePredicate {\n         // TODO dead spans?\n         // TODO assumes we'll always fit on one line...\n         Some(match *self {\n-                ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bound_lifetimes,\n-                                                                          ref bounded_ty,\n-                                                                          ref bounds,\n-                                                                          ..}) => {\n-                    if !bound_lifetimes.is_empty() {\n-                        let lifetime_str = bound_lifetimes.iter()\n-                            .map(|lt| lt.rewrite(context, width, offset).unwrap())\n-                            .collect::<Vec<_>>()\n-                            .join(\", \");\n-                        let type_str = pprust::ty_to_string(bounded_ty);\n+            ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate { ref bound_lifetimes,\n+                                                                           ref bounded_ty,\n+                                                                           ref bounds,\n+                                                                           .. }) => {\n+                if !bound_lifetimes.is_empty() {\n+                    let lifetime_str = bound_lifetimes.iter()\n+                                           .map(|lt| lt.rewrite(context, width, offset).unwrap())\n+                                           .collect::<Vec<_>>()\n+                                           .join(\", \");\n+                    let type_str = pprust::ty_to_string(bounded_ty);\n                     // 8 = \"for<> : \".len()\n-                        let used_width = lifetime_str.len() + type_str.len() + 8;\n-                        let bounds_str = bounds.iter()\n-                            .map(|ty_bound| ty_bound.rewrite(context, width - used_width, offset + used_width).unwrap())\n-                            .collect::<Vec<_>>()\n-                            .join(\" + \");\n-\n-                        format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n-                    } else {\n-                        let type_str = pprust::ty_to_string(bounded_ty);\n+                    let used_width = lifetime_str.len() + type_str.len() + 8;\n+                    let bounds_str = bounds.iter()\n+                                         .map(|ty_bound| {\n+                                             ty_bound\n+                                                 .rewrite(context,\n+                                                          width - used_width,\n+                                                          offset + used_width)\n+                                                 .unwrap()\n+                                         })\n+                                         .collect::<Vec<_>>()\n+                                         .join(\" + \");\n+\n+                    format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n+                } else {\n+                    let type_str = pprust::ty_to_string(bounded_ty);\n                     // 2 = \": \".len()\n-                        let used_width = type_str.len() + 2;\n-                        let bounds_str = bounds.iter()\n-                            .map(|ty_bound| ty_bound.rewrite(context, width - used_width, offset + used_width).unwrap())\n-                            .collect::<Vec<_>>()\n-                            .join(\" + \");\n-\n-                        format!(\"{}: {}\", type_str, bounds_str)\n-                    }\n+                    let used_width = type_str.len() + 2;\n+                    let bounds_str = bounds.iter()\n+                                         .map(|ty_bound| {\n+                                             ty_bound\n+                                                 .rewrite(context,\n+                                                          width - used_width,\n+                                                          offset + used_width)\n+                                                 .unwrap()\n+                                         })\n+                                         .collect::<Vec<_>>()\n+                                         .join(\" + \");\n+\n+                    format!(\"{}: {}\", type_str, bounds_str)\n                 }\n-                ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n-                                                                            ref bounds,\n-                                                                            ..}) => {\n-                    format!(\"{}: {}\",\n+            }\n+            ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate { ref lifetime,\n+                                                                             ref bounds,\n+                                                                             .. }) => {\n+                format!(\"{}: {}\",\n                         pprust::lifetime_to_string(lifetime),\n                         bounds.iter().map(pprust::lifetime_to_string)\n                               .collect::<Vec<_>>().join(\" + \"))\n-                }\n-                ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n-                    let ty_str = pprust::ty_to_string(ty);\n+            }\n+            ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { ref path, ref ty, .. }) => {\n+                let ty_str = pprust::ty_to_string(ty);\n                 // 3 = \" = \".len()\n-                    let used_width = 3 + ty_str.len();\n-                    let path_str = try_opt!(path.rewrite(context,\n+                let used_width = 3 + ty_str.len();\n+                let path_str = try_opt!(path.rewrite(context,\n                                                      width - used_width,\n                                                      offset + used_width));\n-                    format!(\"{} = {}\", path_str, ty_str)\n-                }\n-            })\n+                format!(\"{} = {}\", path_str, ty_str)\n+            }\n+        })\n     }\n }\n \n@@ -370,10 +382,10 @@ impl Rewrite for ast::TyParam {\n             result.push_str(\": \");\n \n             let bounds = self.bounds\n-                .iter()\n-                .map(|ty_bound| ty_bound.rewrite(context, width, offset).unwrap())\n-                .collect::<Vec<_>>()\n-                .join(\" + \");\n+                             .iter()\n+                             .map(|ty_bound| ty_bound.rewrite(context, width, offset).unwrap())\n+                             .collect::<Vec<_>>()\n+                             .join(\" + \");\n \n             result.push_str(&bounds);\n         }\n@@ -391,10 +403,10 @@ impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n         if !self.bound_lifetimes.is_empty() {\n             let lifetime_str = self.bound_lifetimes\n-                .iter()\n-                .map(|lt| lt.rewrite(context, width, offset).unwrap())\n-                .collect::<Vec<_>>()\n-                .join(\", \");\n+                                   .iter()\n+                                   .map(|lt| lt.rewrite(context, width, offset).unwrap())\n+                                   .collect::<Vec<_>>()\n+                                   .join(\", \");\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let max_path_width = try_opt!(width.checked_sub(extra_offset));"}, {"sha": "faa953ebea3f78b7249cb35d340c1b496b5892c8", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -97,11 +97,11 @@ pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n     typaram.bounds\n         .last()\n         .map(|bound| {\n-                 match *bound {\n-                     ast::RegionTyParamBound(ref lt) => lt.span,\n-                     ast::TraitTyParamBound(ref prt, _) => prt.span,\n-                 }\n-             })\n+            match *bound {\n+                ast::RegionTyParamBound(ref lt) => lt.span,\n+                ast::TraitTyParamBound(ref prt, _) => prt.span,\n+            }\n+        })\n         .unwrap_or(typaram.span)\n         .hi\n }"}, {"sha": "1159116b0102a84e5eb4cf42f486bd2d85c29b3f", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -289,8 +289,10 @@ impl<'a> FmtVisitor<'a> {\n             true\n         } else {\n             let rewrite = attrs\n-                .rewrite(&self.get_context(), self.config.max_width - self.block_indent, self.block_indent)\n-                .unwrap();\n+                              .rewrite(&self.get_context(),\n+                                       self.config.max_width - self.block_indent,\n+                                       self.block_indent)\n+                              .unwrap();\n             self.buffer.push_str(&rewrite);\n             let last = attrs.last().unwrap();\n             self.last_pos = last.span.hi;"}, {"sha": "e77257663db5549d9a641c67c2c1bcb4448427d1", "filename": "tests/system.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -120,8 +120,8 @@ pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, Vec<Mism\n     // panic to return a result in case of failure. This has the advantage of smoothing the road to\n     // multithreaded rustfmt\n     thread::catch_panic(move || {\n-                                 run(args, WriteMode::Return(HANDLE_RESULT), config);\n-                             }).map_err(|any| *any.downcast().ok().expect(\"Downcast failed.\"))\n+        run(args, WriteMode::Return(HANDLE_RESULT), config);\n+    }).map_err(|any| *any.downcast().ok().expect(\"Downcast failed.\"))\n }\n \n \n@@ -153,19 +153,19 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n \n     // Matches lines containing significant comments or whitespace.\n     let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\").ok()\n-        .expect(\"Failed creating pattern 2.\");\n+                         .expect(\"Failed creating pattern 2.\");\n \n     reader.lines()\n         .map(|line| line.ok().expect(\"Failed getting line.\"))\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n-                        regex.captures_iter(&line)\n-                            .next()\n-                            .map(|capture| {\n-                                     (capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned(),\n-                                      capture.at(2).expect(\"Couldn't unwrap capture.\").to_owned())\n-                                 })\n-                    })\n+            regex.captures_iter(&line)\n+                .next()\n+                .map(|capture| {\n+                    (capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned(),\n+                     capture.at(2).expect(\"Couldn't unwrap capture.\").to_owned())\n+                })\n+        })\n         .collect()\n }\n "}, {"sha": "ec095ad8fcc2f604fd898d979911c7da9a0afc97", "filename": "tests/target/closure.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -9,31 +9,30 @@ fn main() {\n                      b: WithType, // argument\n                      // ignored\n                      _| {\n-                        (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n-                         bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n-                    };\n+        (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n+    };\n \n     let block_body = move |xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n                            ref yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy| {\n-                              xxxxxxxxxxxxxxxxxxxxxxxxxxxxx + yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n-                          };\n+        xxxxxxxxxxxxxxxxxxxxxxxxxxxxx + yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\n+    };\n \n     let loooooooooooooong_name = |field| {\n              // TODO(#27): format comments.\n-                                     if field.node.attrs.len() > 0 {\n-                                         field.node.attrs[0].span.lo\n-                                     } else {\n-                                         field.span.lo\n-                                     }\n-                                 };\n+        if field.node.attrs.len() > 0 {\n+            field.node.attrs[0].span.lo\n+        } else {\n+            field.span.lo\n+        }\n+    };\n \n     let block_me = |field| {\n-                       if true_story() {\n-                           1\n-                       } else {\n-                           2\n-                       }\n-                   };\n+        if true_story() {\n+            1\n+        } else {\n+            2\n+        }\n+    };\n \n     let unblock_me = |trivial| closure();\n \n@@ -44,17 +43,17 @@ fn main() {\n                  };\n \n     let test = || {\n-                   do_something();\n-                   do_something_else();\n-               };\n+        do_something();\n+        do_something_else();\n+    };\n \n     let arg_test = |big_argument_name, test123| {\n-                       looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()\n-                   };\n+        looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()\n+    };\n \n     let arg_test = |big_argument_name, test123| {\n-                       looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()\n-                   };\n+        looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()\n+    };\n \n     let simple_closure = move || -> () {};\n "}, {"sha": "f5b79d74fcb6bb6a8d8d858e40d86e439662b188", "filename": "tests/target/expr-visual-indent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Ftarget%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Ftarget%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-visual-indent.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -4,6 +4,6 @@\n \n fn matcher() {\n     Some(while true {\n-             test();\n-         })\n+        test();\n+    })\n }"}, {"sha": "d24d463c2c2500f11dd0b1a4fd097230d7d49bd1", "filename": "tests/target/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659c9b90373183620eeb6118d41b1e94b8ad70a2/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=659c9b90373183620eeb6118d41b1e94b8ad70a2", "patch": "@@ -89,13 +89,13 @@ fn bar() {\n     }\n \n     syntactically_correct(loop {\n-            sup('?');\n-        },\n+                              sup('?');\n+                          },\n                           if cond {\n-            0\n-        } else {\n-            1\n-        });\n+                              0\n+                          } else {\n+                              1\n+                          });\n \n     let third = ..10;\n     let infi_range = ..;"}]}