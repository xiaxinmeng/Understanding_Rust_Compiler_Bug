{"sha": "3eb5bee242fae12c4cf547bfe0665653c20ca0c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYjViZWUyNDJmYWUxMmM0Y2Y1NDdiZmUwNjY1NjUzYzIwY2EwYzI=", "commit": {"author": {"name": "Folyd", "email": "lyshuhow@gmail.com", "date": "2021-02-27T09:27:45Z"}, "committer": {"name": "Folyd", "email": "lyshuhow@gmail.com", "date": "2021-02-27T14:11:44Z"}, "message": "Fix `binary_search_by()` overflow issue in ZST case", "tree": {"sha": "37801e1d49d746a0924bc9fb98fdcb9fa402eaa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37801e1d49d746a0924bc9fb98fdcb9fa402eaa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb5bee242fae12c4cf547bfe0665653c20ca0c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5bee242fae12c4cf547bfe0665653c20ca0c2", "html_url": "https://github.com/rust-lang/rust/commit/3eb5bee242fae12c4cf547bfe0665653c20ca0c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5bee242fae12c4cf547bfe0665653c20ca0c2/comments", "author": {"login": "Folyd", "id": 3369694, "node_id": "MDQ6VXNlcjMzNjk2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3369694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Folyd", "html_url": "https://github.com/Folyd", "followers_url": "https://api.github.com/users/Folyd/followers", "following_url": "https://api.github.com/users/Folyd/following{/other_user}", "gists_url": "https://api.github.com/users/Folyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Folyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Folyd/subscriptions", "organizations_url": "https://api.github.com/users/Folyd/orgs", "repos_url": "https://api.github.com/users/Folyd/repos", "events_url": "https://api.github.com/users/Folyd/events{/privacy}", "received_events_url": "https://api.github.com/users/Folyd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Folyd", "id": 3369694, "node_id": "MDQ6VXNlcjMzNjk2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3369694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Folyd", "html_url": "https://github.com/Folyd", "followers_url": "https://api.github.com/users/Folyd/followers", "following_url": "https://api.github.com/users/Folyd/following{/other_user}", "gists_url": "https://api.github.com/users/Folyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Folyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Folyd/subscriptions", "organizations_url": "https://api.github.com/users/Folyd/orgs", "repos_url": "https://api.github.com/users/Folyd/repos", "events_url": "https://api.github.com/users/Folyd/events{/privacy}", "received_events_url": "https://api.github.com/users/Folyd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "385ad48b3563fc3cb6fe4d98dfa746a4204ac092", "url": "https://api.github.com/repos/rust-lang/rust/commits/385ad48b3563fc3cb6fe4d98dfa746a4204ac092", "html_url": "https://github.com/rust-lang/rust/commit/385ad48b3563fc3cb6fe4d98dfa746a4204ac092"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "d314d38c30abffa8c3c51da0085782fad6c46c5f", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5bee242fae12c4cf547bfe0665653c20ca0c2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5bee242fae12c4cf547bfe0665653c20ca0c2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=3eb5bee242fae12c4cf547bfe0665653c20ca0c2", "patch": "@@ -2154,11 +2154,12 @@ impl<T> [T] {\n     where\n         F: FnMut(&'a T) -> Ordering,\n     {\n+        let mut size = self.len();\n         let mut left = 0;\n-        let mut right = self.len();\n+        let mut right = size;\n         while left < right {\n-            // never overflow because `slice::len()` max is `isize::MAX`.\n-            let mid = (left + right) / 2;\n+            let mid = left + size / 2;\n+\n             // SAFETY: the call is made safe by the following invariants:\n             // - `mid >= 0`\n             // - `mid < size`: `mid` is limited by `[left; right)` bound.\n@@ -2174,6 +2175,8 @@ impl<T> [T] {\n             } else {\n                 return Ok(mid);\n             }\n+\n+            size = right - left;\n         }\n         Err(left)\n     }"}, {"sha": "7e198631cc7eb7ab48b2a6f46464b1804fb3744c", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3eb5bee242fae12c4cf547bfe0665653c20ca0c2/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb5bee242fae12c4cf547bfe0665653c20ca0c2/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=3eb5bee242fae12c4cf547bfe0665653c20ca0c2", "patch": "@@ -1,4 +1,5 @@\n use core::cell::Cell;\n+use core::cmp::Ordering;\n use core::result::Result::{Err, Ok};\n \n #[test]\n@@ -64,6 +65,17 @@ fn test_binary_search() {\n     assert_eq!(b.binary_search(&6), Err(4));\n     assert_eq!(b.binary_search(&7), Ok(4));\n     assert_eq!(b.binary_search(&8), Err(5));\n+\n+    let b = [(); usize::MAX];\n+    assert_eq!(b.binary_search(&()), Ok(usize::MAX / 2));\n+}\n+\n+#[test]\n+fn test_binary_search_by_overflow() {\n+    let b = [(); usize::MAX];\n+    assert_eq!(b.binary_search_by(|_| Ordering::Equal), Ok(usize::MAX / 2));\n+    assert_eq!(b.binary_search_by(|_| Ordering::Greater), Err(0));\n+    assert_eq!(b.binary_search_by(|_| Ordering::Less), Err(usize::MAX));\n }\n \n #[test]\n@@ -1982,6 +1994,7 @@ fn test_copy_within_panics_dest_too_long() {\n     // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n     bytes.copy_within(0..4, 10);\n }\n+\n #[test]\n #[should_panic(expected = \"slice index starts at 2 but ends at 1\")]\n fn test_copy_within_panics_src_inverted() {"}]}