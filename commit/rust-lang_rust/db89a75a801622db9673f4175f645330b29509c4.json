{"sha": "db89a75a801622db9673f4175f645330b29509c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODlhNzVhODAxNjIyZGI5NjczZjQxNzVmNjQ1MzMwYjI5NTA5YzQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-10T21:52:23Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-10T21:52:23Z"}, "message": "use Constant for repetition count in mir::Repeat", "tree": {"sha": "35b2e200a20facc8fde1b6b6cf4263392e7e38dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b2e200a20facc8fde1b6b6cf4263392e7e38dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db89a75a801622db9673f4175f645330b29509c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db89a75a801622db9673f4175f645330b29509c4", "html_url": "https://github.com/rust-lang/rust/commit/db89a75a801622db9673f4175f645330b29509c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db89a75a801622db9673f4175f645330b29509c4/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba6561de2a7f7f03dd32c506e25c2c3868ce6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba6561de2a7f7f03dd32c506e25c2c3868ce6d3", "html_url": "https://github.com/rust-lang/rust/commit/cba6561de2a7f7f03dd32c506e25c2c3868ce6d3"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "e351215276a561fbb617a2084c9a64e672fe62d4", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=db89a75a801622db9673f4175f645330b29509c4", "patch": "@@ -44,8 +44,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, value));\n-                let count_operand = unpack!(block = this.as_operand(block, count));\n-                block.and(Rvalue::Repeat(value_operand, count_operand))\n+                let count = this.as_constant(count);\n+                block.and(Rvalue::Repeat(value_operand, count))\n             }\n             ExprKind::Borrow { region, borrow_kind, arg } => {\n                 let arg_lvalue = unpack!(block = this.as_lvalue(block, arg));"}, {"sha": "4ab08f976d36a1e46463ab8d0a16addf5cc8bf6e", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=db89a75a801622db9673f4175f645330b29509c4", "patch": "@@ -546,7 +546,7 @@ pub enum Rvalue<'tcx> {\n     Use(Operand<'tcx>),\n \n     // [x; 32]\n-    Repeat(Operand<'tcx>, Operand<'tcx>),\n+    Repeat(Operand<'tcx>, Constant<'tcx>),\n \n     // &x or &mut x\n     Ref(Region, BorrowKind, Lvalue<'tcx>),"}, {"sha": "9f214af6b249a69ffcecdcb665fbdf3a76d7acb5", "filename": "src/librustc_mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_mir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_mir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fvisit.rs?ref=db89a75a801622db9673f4175f645330b29509c4", "patch": "@@ -134,7 +134,7 @@ pub trait Visitor<'tcx> {\n \n             Rvalue::Repeat(ref value, ref len) => {\n                 self.visit_operand(value);\n-                self.visit_operand(len);\n+                self.visit_constant(len);\n             }\n \n             Rvalue::Ref(r, bk, ref path) => {"}, {"sha": "218edc200d4c6cdeb119fda9b4c85d0c381a8e2d", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db89a75a801622db9673f4175f645330b29509c4/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=db89a75a801622db9673f4175f645330b29509c4", "patch": "@@ -51,9 +51,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::Rvalue::Repeat(ref elem, ref count) => {\n                 let elem = self.trans_operand(bcx, elem);\n-                let size = self.trans_operand(bcx, count);\n+                let size = self.trans_constant(bcx, count);\n                 let base = expr::get_dataptr(bcx, lldest);\n-                tvec::iter_vec_raw(bcx, base, elem.ty, size.llval, |b, vref, _| {\n+                tvec::iter_vec_raw(bcx, base, elem.ty, size, |b, vref, _| {\n                     build::Store(b, elem.llval, vref);\n                     b\n                 })"}, {"sha": "4aa686298e9eee9188befbeeaafcd502a9895ca6", "filename": "src/test/run-pass/mir_trans_array_2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db89a75a801622db9673f4175f645330b29509c4/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db89a75a801622db9673f4175f645330b29509c4/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs?ref=db89a75a801622db9673f4175f645330b29509c4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(rustc_attrs)]\n+\n+#[rustc_mir]\n+fn into_inner(x: u64) -> [u64; 1024] {\n+    [x; 2*4*8*16]\n+}\n+\n+fn main(){\n+    let x: &[u64] = &[42; 1024];\n+    assert_eq!(&into_inner(42)[..], x);\n+}"}]}