{"sha": "afcb93811650252f1533d4a1453ab697f787cfec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmY2I5MzgxMTY1MDI1MmYxNTMzZDRhMTQ1M2FiNjk3Zjc4N2NmZWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-01-12T03:10:59Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-01-12T03:10:59Z"}, "message": "Stabilise irrefutable if-let and while-let patterns\n\nThis stabilises RFC 2086 (https://github.com/rust-lang/rust/issues/44495).\n\nCo-Authored-By: Sebastian Malton <sebastian@malton.name>", "tree": {"sha": "25418a88cbbbd014f05b547f7cfae7db622b940a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25418a88cbbbd014f05b547f7cfae7db622b940a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afcb93811650252f1533d4a1453ab697f787cfec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afcb93811650252f1533d4a1453ab697f787cfec", "html_url": "https://github.com/rust-lang/rust/commit/afcb93811650252f1533d4a1453ab697f787cfec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afcb93811650252f1533d4a1453ab697f787cfec/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "html_url": "https://github.com/rust-lang/rust/commit/b43986184b8f4e0d633e8ae1704f0e19aec30cb2"}], "stats": {"total": 414, "additions": 175, "deletions": 239}, "files": [{"sha": "46b843778e81077967d1864514553eb31d7696c5", "filename": "src/doc/unstable-book/src/language-features/irrefutable-let-patterns.md", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Firrefutable-let-patterns.md?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,28 +0,0 @@\n-# `irrefutable_let_patterns`\n-\n-The tracking issue for this feature is: [#44495]\n-\n-[#44495]: https://github.com/rust-lang/rust/issues/44495\n-\n-------------------------\n-\n-This feature changes the way that \"irrefutable patterns\" are handled\n-in the `if let` and `while let` forms. An *irrefutable pattern* is one\n-that cannot fail to match -- for example, the `_` pattern matches any\n-value, and hence it is \"irrefutable\". Without this feature, using an\n-irrefutable pattern in an `if let` gives a hard error (since often\n-this indicates programmer error). But when the feature is enabled, the\n-error becomes a lint (since in some cases irrefutable patterns are\n-expected). This means you can use `#[allow]` to silence the lint:\n-\n-```rust\n-#![feature(irrefutable_let_patterns)]\n-\n-#[allow(irrefutable_let_patterns)]\n-fn main() {\n-    // These two examples used to be errors, but now they\n-    // trigger a lint (that is allowed):\n-    if let _ = 5 {}\n-    while let _ = 5 { break; }\n-}\n-```"}, {"sha": "c428ff1bd1b37bc9b1ea4f68534377babdbce1b3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -286,7 +286,7 @@ declare_lint! {\n \n declare_lint! {\n     pub IRREFUTABLE_LET_PATTERNS,\n-    Deny,\n+    Warn,\n     \"detects irrefutable patterns in if-let and while-let statements\"\n }\n "}, {"sha": "b045b1a6913c97d87020a438c7ba431320c2d09f", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -325,11 +325,13 @@ match Some(42) {\n \"##,\n \n E0162: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An if-let pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding instead. For instance:\n \n-```compile_fail,E0162\n+```compile_pass\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n@@ -352,11 +354,13 @@ println!(\"{}\", x);\n \"##,\n \n E0165: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A while-let pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding inside a `loop` instead. For instance:\n \n-```compile_fail,E0165\n+```compile_pass,no_run\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n "}, {"sha": "10213beba2a6df74d420ecc50afdc864a32654d5", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -350,7 +350,6 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n {\n     let mut seen = Matrix::empty();\n     let mut catchall = None;\n-    let mut printed_if_let_err = false;\n     for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n         for &(pat, hir_pat) in pats {\n             let v = smallvec![pat];\n@@ -359,27 +358,12 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {\n-                            if cx.tcx.features().irrefutable_let_patterns {\n-                                cx.tcx.lint_node(\n-                                    lint::builtin::IRREFUTABLE_LET_PATTERNS,\n-                                    hir_pat.id, pat.span,\n-                                    \"irrefutable if-let pattern\");\n-                            } else {\n-                                if printed_if_let_err {\n-                                    // we already printed an irrefutable if-let pattern error.\n-                                    // We don't want two, that's just confusing.\n-                                } else {\n-                                    // find the first arm pattern so we can use its span\n-                                    let &(ref first_arm_pats, _) = &arms[0];\n-                                    let first_pat = &first_arm_pats[0];\n-                                    let span = first_pat.0.span;\n-                                    struct_span_err!(cx.tcx.sess, span, E0162,\n-                                                    \"irrefutable if-let pattern\")\n-                                        .span_label(span, \"irrefutable pattern\")\n-                                        .emit();\n-                                    printed_if_let_err = true;\n-                                }\n-                            }\n+                            cx.tcx.lint_node(\n+                                lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                hir_pat.id,\n+                                pat.span,\n+                                \"irrefutable if-let pattern\",\n+                            );\n                         }\n \n                         hir::MatchSource::WhileLetDesugar => {\n@@ -394,21 +378,12 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                 },\n                                 // The arm with the wildcard pattern.\n                                 1 => {\n-                                    if cx.tcx.features().irrefutable_let_patterns {\n-                                        cx.tcx.lint_node(\n-                                            lint::builtin::IRREFUTABLE_LET_PATTERNS,\n-                                            hir_pat.id, pat.span,\n-                                            \"irrefutable while-let pattern\");\n-                                    } else {\n-                                        // find the first arm pattern so we can use its span\n-                                        let &(ref first_arm_pats, _) = &arms[0];\n-                                        let first_pat = &first_arm_pats[0];\n-                                        let span = first_pat.0.span;\n-                                        struct_span_err!(cx.tcx.sess, span, E0165,\n-                                                         \"irrefutable while-let pattern\")\n-                                            .span_label(span, \"irrefutable pattern\")\n-                                            .emit();\n-                                    }\n+                                    cx.tcx.lint_node(\n+                                        lint::builtin::IRREFUTABLE_LET_PATTERNS,\n+                                        hir_pat.id,\n+                                        pat.span,\n+                                        \"irrefutable while-let pattern\",\n+                                    );\n                                 },\n                                 _ => bug!(),\n                             }"}, {"sha": "f31871913f0d2a178fe39a0f5e3a979ba3891e79", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -414,9 +414,6 @@ declare_features! (\n     // `#[doc(alias = \"...\")]`\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n \n-    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n-    (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n-\n     // inconsistent bounds in where clauses\n     (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n \n@@ -684,6 +681,8 @@ declare_features! (\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n     // Allows `#[repr(packed(N))]` attribute on structs.\n     (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n+    // Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n+    (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n     // Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n     (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n     // `#[cfg_attr(predicate, multiple, attributes, here)]`"}, {"sha": "d9a42a2963998e305e526d6ed4dd431f0777b4d2", "filename": "src/test/run-pass/binding/allow_irrefutable_let_patterns.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-#![feature(irrefutable_let_patterns)]\n-\n-// must-compile-successfully-irrefutable_let_patterns_with_gate\n-#[allow(irrefutable_let_patterns)]\n-fn main() {\n-    if let _ = 5 {}\n-\n-    while let _ = 5 {\n-        break;\n-    }\n-}"}, {"sha": "d3221f8e1769a19034bdc1836625b02a4d34a2e7", "filename": "src/test/ui/error-codes/E0162.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.rs?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,8 +0,0 @@\n-struct Irrefutable(i32);\n-\n-fn main() {\n-    let irr = Irrefutable(0);\n-    if let Irrefutable(x) = irr { //~ ERROR E0162\n-        println!(\"{}\", x);\n-    }\n-}"}, {"sha": "ca5c56cd59d31a64e682e9f52250d1c4d76c0672", "filename": "src/test/ui/error-codes/E0162.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0162.stderr?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,9 +0,0 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/E0162.rs:5:12\n-   |\n-LL |     if let Irrefutable(x) = irr { //~ ERROR E0162\n-   |            ^^^^^^^^^^^^^^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "952071c8b9e77c31eb39013391d6bc9022fb6f59", "filename": "src/test/ui/error-codes/E0165.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.rs?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,9 +0,0 @@\n-struct Irrefutable(i32);\n-\n-fn main() {\n-    let irr = Irrefutable(0);\n-    while let Irrefutable(x) = irr { //~ ERROR E0165\n-                                     //~| irrefutable pattern\n-        // ...\n-    }\n-}"}, {"sha": "e0d192ea15290753e39152da5546d8d8e5a169fc", "filename": "src/test/ui/error-codes/E0165.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0165.stderr?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,9 +0,0 @@\n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/E0165.rs:5:15\n-   |\n-LL |     while let Irrefutable(x) = irr { //~ ERROR E0165\n-   |               ^^^^^^^^^^^^^^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0165`."}, {"sha": "cae2f1d2793df985cc715cc75fb69518b845964c", "filename": "src/test/ui/feature-gates/feature-gate-without_gate_irrefutable_pattern.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.rs?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,8 +0,0 @@\n-// gate-test-irrefutable_let_patterns\n-\n-\n-#[allow(irrefutable_let_patterns)]\n-fn main() {\n-    if let _ = 5 {}\n-    //~^ ERROR irrefutable if-let pattern [E0162]\n-}"}, {"sha": "fa8b74ffecf3ad0855b150b7a1a24ef5443f52b0", "filename": "src/test/ui/feature-gates/feature-gate-without_gate_irrefutable_pattern.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-without_gate_irrefutable_pattern.stderr?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,9 +0,0 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/feature-gate-without_gate_irrefutable_pattern.rs:6:12\n-   |\n-LL |     if let _ = 5 {}\n-   |            ^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "741685fe9b64995a85b95356e9434532110c5f70", "filename": "src/test/ui/if/if-let.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fif%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fif%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,3 +1,5 @@\n+// compile-pass\n+\n fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n@@ -10,20 +12,20 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1, { //~ ERROR irrefutable if-let\n+    foo!(a, 1, { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1, { //~ ERROR irrefutable if-let\n+    bar!(a, 1, { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    if let a = 1 { //~ ERROR irrefutable if-let\n+    if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n-    if let a = 1 { //~ ERROR irrefutable if-let\n+    if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     } else if true {\n         println!(\"else-if in irrefutable if-let\");\n@@ -33,13 +35,13 @@ pub fn main() {\n \n     if let 1 = 2 {\n         println!(\"refutable pattern\");\n-    } else if let a = 1 { //~ ERROR irrefutable if-let\n+    } else if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n     if true {\n         println!(\"if\");\n-    } else if let a = 1 { //~ ERROR irrefutable if-let\n+    } else if let a = 1 { //~ WARN irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "b2a104bfacffc7d99713db786f4c391b040d4f19", "filename": "src/test/ui/if/if-let.stderr", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.stderr?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,39 +1,62 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:13:10\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:6:13\n    |\n-LL |     foo!(a, 1, { //~ ERROR irrefutable if-let\n-   |          ^ irrefutable pattern\n-\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:16:10\n+LL |               if let $p = $e $b\n+   |               ^^\n+...\n+LL | /     foo!(a, 1, { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n    |\n-LL |     bar!(a, 1, { //~ ERROR irrefutable if-let\n-   |          ^ irrefutable pattern\n+   = note: #[warn(irrefutable_let_patterns)] on by default\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:22:12\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:6:13\n    |\n-LL |     if let a = 1 { //~ ERROR irrefutable if-let\n-   |            ^ irrefutable pattern\n+LL |               if let $p = $e $b\n+   |               ^^\n+...\n+LL | /     bar!(a, 1, { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:26:12\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:24:5\n    |\n-LL |     if let a = 1 { //~ ERROR irrefutable if-let\n-   |            ^ irrefutable pattern\n+LL | /     if let a = 1 { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:36:19\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:28:5\n    |\n-LL |     } else if let a = 1 { //~ ERROR irrefutable if-let\n-   |                   ^ irrefutable pattern\n+LL | /     if let a = 1 { //~ WARN irrefutable if-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     } else if true {\n+LL | |         println!(\"else-if in irrefutable if-let\");\n+LL | |     } else {\n+LL | |         println!(\"else in irrefutable if-let\");\n+LL | |     }\n+   | |_____^\n \n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/if-let.rs:42:19\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:38:12\n    |\n-LL |     } else if let a = 1 { //~ ERROR irrefutable if-let\n-   |                   ^ irrefutable pattern\n+LL |       } else if let a = 1 { //~ WARN irrefutable if-let\n+   |  ____________^\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-error: aborting due to 6 previous errors\n+warning: irrefutable if-let pattern\n+  --> $DIR/if-let.rs:44:12\n+   |\n+LL |       } else if let a = 1 { //~ WARN irrefutable if-let\n+   |  ____________^\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "4885e4a2db7d5e5a0fa6b7dd894dd993716c078f", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -10,5 +10,5 @@ fn main() {\n \n     [(); return while let Some(n) = Some(0) {}];\n     //~^ ERROR return statement outside of function body\n-    //~^^ ERROR irrefutable while-let pattern\n+    //~^^ WARN irrefutable while-let pattern\n }"}, {"sha": "df11f6b7f5a535c3a06f0ba10bc02f99b373fb7b", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -22,13 +22,14 @@ error[E0572]: return statement outside of function body\n LL |     [(); return while let Some(n) = Some(0) {}];\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/issue-51714.rs:11:27\n+warning: irrefutable while-let pattern\n+  --> $DIR/issue-51714.rs:11:17\n    |\n LL |     [(); return while let Some(n) = Some(0) {}];\n-   |                           ^^^^^^^ irrefutable pattern\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(irrefutable_let_patterns)] on by default\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0165, E0572.\n-For more information about an error, try `rustc --explain E0165`.\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "14040c8ada67d17f54efb881af4e7a1f6e991196", "filename": "src/test/ui/pattern/deny-irrefutable-let-patterns.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -0,0 +1,9 @@\n+#![deny(irrefutable_let_patterns)]\n+\n+fn main() {\n+    if let _ = 5 {} //~ ERROR irrefutable if-let pattern\n+\n+    while let _ = 5 { //~ ERROR irrefutable while-let pattern\n+        break;\n+    }\n+}"}, {"sha": "ad8cc2ef8973b83652ab9beec1f350690728ca5d", "filename": "src/test/ui/pattern/deny-irrefutable-let-patterns.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fdeny-irrefutable-let-patterns.stderr?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -0,0 +1,22 @@\n+error: irrefutable if-let pattern\n+  --> $DIR/deny-irrefutable-let-patterns.rs:4:5\n+   |\n+LL |     if let _ = 5 {} //~ ERROR irrefutable if-let pattern\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/deny-irrefutable-let-patterns.rs:1:9\n+   |\n+LL | #![deny(irrefutable_let_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: irrefutable while-let pattern\n+  --> $DIR/deny-irrefutable-let-patterns.rs:6:5\n+   |\n+LL | /     while let _ = 5 { //~ ERROR irrefutable while-let pattern\n+LL | |         break;\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "85599530ea6a4e5c8ab3bd3cb48ea4b2b0f00ca3", "filename": "src/test/ui/pattern/enum-variant-generic-args.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fenum-variant-generic-args.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,4 +1,5 @@\n-#![feature(irrefutable_let_patterns)]\n+// run-pass\n+\n #![feature(type_alias_enum_variants)]\n \n #![allow(irrefutable_let_patterns)]", "previous_filename": "src/test/run-pass/enum-variant-generic-args.rs"}, {"sha": "d400ef0bbd64ca834336ee85950ad5fa56d67736", "filename": "src/test/ui/pattern/irrefutable-let-patterns.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Firrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fpattern%2Firrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Firrefutable-let-patterns.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+fn main() {\n+    if let _ = 5 {}\n+\n+    while let _ = 5 {\n+        break;\n+    }\n+}"}, {"sha": "d79798d57e820622787d44647a523bf8b90e35fd", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -2,7 +2,6 @@\n \n // Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n // with examples easier.\n-#![feature(irrefutable_let_patterns)]\n \n #[allow(irrefutable_let_patterns)]\n fn main() {"}, {"sha": "2cd59fe56cf2d111a346af2c792663d6bab6d3df", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:11:47\n+  --> $DIR/syntax-ambiguity-2015.rs:10:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -8,7 +8,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2015.rs:14:47\n+  --> $DIR/syntax-ambiguity-2015.rs:13:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -17,7 +17,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:17:50\n+  --> $DIR/syntax-ambiguity-2015.rs:16:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -26,7 +26,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2015.rs:20:50\n+  --> $DIR/syntax-ambiguity-2015.rs:19:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -35,7 +35,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:23:19\n+  --> $DIR/syntax-ambiguity-2015.rs:22:19\n    |\n LL |     if let true = false && false { }\n    |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n@@ -44,7 +44,7 @@ LL |     if let true = false && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:26:22\n+  --> $DIR/syntax-ambiguity-2015.rs:25:22\n    |\n LL |     while let true = (1 == 2) && false { }\n    |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`"}, {"sha": "687bf659416ab27a2172be16cbc15f365d7a7d6b", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -2,7 +2,6 @@\n \n // Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n // with examples easier.\n-#![feature(irrefutable_let_patterns)]\n \n #[allow(irrefutable_let_patterns)]\n fn main() {"}, {"sha": "cbba2d7473334ef4f582901cfd21d3b28828f098", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:11:47\n+  --> $DIR/syntax-ambiguity-2018.rs:10:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -8,7 +8,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2018.rs:14:47\n+  --> $DIR/syntax-ambiguity-2018.rs:13:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n    |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -17,7 +17,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:17:50\n+  --> $DIR/syntax-ambiguity-2018.rs:16:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n@@ -26,7 +26,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `||`\n-  --> $DIR/syntax-ambiguity-2018.rs:20:50\n+  --> $DIR/syntax-ambiguity-2018.rs:19:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n    |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n@@ -35,7 +35,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:23:19\n+  --> $DIR/syntax-ambiguity-2018.rs:22:19\n    |\n LL |     if let true = false && false { }\n    |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n@@ -44,7 +44,7 @@ LL |     if let true = false && false { }\n    = note: see rust-lang/rust#53668 for more information\n \n error: ambiguous use of `&&`\n-  --> $DIR/syntax-ambiguity-2018.rs:26:22\n+  --> $DIR/syntax-ambiguity-2018.rs:25:22\n    |\n LL |     while let true = (1 == 2) && false { }\n    |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`"}, {"sha": "2899298a0cb1d1160496b1ef678a502b72b20408", "filename": "src/test/ui/should-fail-no_gate_irrefutable_if_let_pattern.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.rs?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,5 +0,0 @@\n-// should-fail-irrefutable_let_patterns\n-fn main() {\n-    if let _ = 5 {}\n-    //~^ ERROR irrefutable if-let pattern [E0162]\n-}"}, {"sha": "9c9ebc6659b73feca374317889e8d3f3243e559d", "filename": "src/test/ui/should-fail-no_gate_irrefutable_if_let_pattern.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-no_gate_irrefutable_if_let_pattern.stderr?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,9 +0,0 @@\n-error[E0162]: irrefutable if-let pattern\n-  --> $DIR/should-fail-no_gate_irrefutable_if_let_pattern.rs:3:12\n-   |\n-LL |     if let _ = 5 {}\n-   |            ^ irrefutable pattern\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0162`."}, {"sha": "1b9b3dc1a4cbe6d9b463cd2db95090d87f4964c3", "filename": "src/test/ui/should-fail-with_gate_irrefutable_pattern_deny.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.rs?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,7 +0,0 @@\n-#![feature(irrefutable_let_patterns)]\n-\n-// should-fail-irrefutable_let_patterns_with_gate\n-fn main() {\n-    if let _ = 5 {}\n-    //~^ ERROR irrefutable if-let pattern [irrefutable_let_patterns]\n-}"}, {"sha": "dc670f0e59081fa71980130ea0a4b286d749ad17", "filename": "src/test/ui/should-fail-with_gate_irrefutable_pattern_deny.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b43986184b8f4e0d633e8ae1704f0e19aec30cb2/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshould-fail-with_gate_irrefutable_pattern_deny.stderr?ref=b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "patch": "@@ -1,10 +0,0 @@\n-error: irrefutable if-let pattern\n-  --> $DIR/should-fail-with_gate_irrefutable_pattern_deny.rs:5:5\n-   |\n-LL |     if let _ = 5 {}\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: #[deny(irrefutable_let_patterns)] on by default\n-\n-error: aborting due to previous error\n-"}, {"sha": "69f9de9497740018274cace4089346960bfdf2c2", "filename": "src/test/ui/while-let.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.rs?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n@@ -10,16 +12,17 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1, { //~ ERROR irrefutable while-let\n+    foo!(a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1, { //~ ERROR irrefutable while-let\n+    bar!(a, 1, { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    while let a = 1 { //~ ERROR irrefutable while-let\n+    while let a = 1 { //~ WARN irrefutable while-let\n         println!(\"irrefutable pattern\");\n+        break;\n     }\n }"}, {"sha": "3f584006bc1fd5c8c9757dd4334d1a5972163f43", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afcb93811650252f1533d4a1453ab697f787cfec/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=afcb93811650252f1533d4a1453ab697f787cfec", "patch": "@@ -1,21 +1,32 @@\n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:13:10\n+warning: irrefutable while-let pattern\n+  --> $DIR/while-let.rs:6:13\n    |\n-LL |     foo!(a, 1, { //~ ERROR irrefutable while-let\n-   |          ^ irrefutable pattern\n-\n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:16:10\n+LL |               while let $p = $e $b\n+   |               ^^^^^\n+...\n+LL | /     foo!(a, 1, { //~ WARN irrefutable while-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n    |\n-LL |     bar!(a, 1, { //~ ERROR irrefutable while-let\n-   |          ^ irrefutable pattern\n+   = note: #[warn(irrefutable_let_patterns)] on by default\n \n-error[E0165]: irrefutable while-let pattern\n-  --> $DIR/while-let.rs:22:15\n+warning: irrefutable while-let pattern\n+  --> $DIR/while-let.rs:6:13\n    |\n-LL |     while let a = 1 { //~ ERROR irrefutable while-let\n-   |               ^ irrefutable pattern\n+LL |               while let $p = $e $b\n+   |               ^^^^^\n+...\n+LL | /     bar!(a, 1, { //~ WARN irrefutable while-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     });\n+   | |_______- in this macro invocation\n \n-error: aborting due to 3 previous errors\n+warning: irrefutable while-let pattern\n+  --> $DIR/while-let.rs:24:5\n+   |\n+LL | /     while let a = 1 { //~ WARN irrefutable while-let\n+LL | |         println!(\"irrefutable pattern\");\n+LL | |     }\n+   | |_____^\n \n-For more information about this error, try `rustc --explain E0165`."}]}