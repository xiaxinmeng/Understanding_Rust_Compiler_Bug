{"sha": "c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ODMzNWUzMzRjY2FjYzBmMThiOGQzZGQ5Y2FkMmZmYzdhMGE3MmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-23T00:39:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:37Z"}, "message": "librustc: De-`@mut` `Module::imports` in the resolver", "tree": {"sha": "88de4abddabec2100c239957febf8e07ddc2292e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88de4abddabec2100c239957febf8e07ddc2292e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d", "html_url": "https://github.com/rust-lang/rust/commit/c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47846110a469d7682189e75b3bfe35f9ff02a9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/47846110a469d7682189e75b3bfe35f9ff02a9aa", "html_url": "https://github.com/rust-lang/rust/commit/47846110a469d7682189e75b3bfe35f9ff02a9aa"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "83d4adf86dd2cdd2973c155055a976b621ddd991", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c48335e334ccacc0f18b8d3dd9cad2ffc7a0a72d", "patch": "@@ -420,7 +420,7 @@ struct Module {\n     is_public: bool,\n \n     children: RefCell<HashMap<Name, @NameBindings>>,\n-    imports: @mut ~[@ImportDirective],\n+    imports: RefCell<~[@ImportDirective]>,\n \n     // The external module children of this node that were declared with\n     // `extern mod`.\n@@ -470,7 +470,7 @@ impl Module {\n             kind: Cell::new(kind),\n             is_public: is_public,\n             children: RefCell::new(HashMap::new()),\n-            imports: @mut ~[],\n+            imports: RefCell::new(~[]),\n             external_module_children: RefCell::new(HashMap::new()),\n             anonymous_children: RefCell::new(HashMap::new()),\n             import_resolutions: RefCell::new(HashMap::new()),\n@@ -481,8 +481,8 @@ impl Module {\n     }\n \n     fn all_imports_resolved(&self) -> bool {\n-        let imports = &mut *self.imports;\n-        return imports.len() == self.resolved_import_count.get();\n+        let mut imports = self.imports.borrow_mut();\n+        return imports.get().len() == self.resolved_import_count.get();\n     }\n }\n \n@@ -1951,7 +1951,11 @@ impl Resolver {\n         let directive = @ImportDirective::new(module_path,\n                                               subclass, span, id,\n                                               is_public);\n-        module_.imports.push(directive);\n+\n+        {\n+            let mut imports = module_.imports.borrow_mut();\n+            imports.get().push(directive);\n+        }\n \n         // Bump the reference count on the name. Or, if this is a glob, set\n         // the appropriate flag.\n@@ -2069,11 +2073,11 @@ impl Resolver {\n             return;\n         }\n \n-        let imports = &mut *module.imports;\n-        let import_count = imports.len();\n+        let mut imports = module.imports.borrow_mut();\n+        let import_count = imports.get().len();\n         while module.resolved_import_count.get() < import_count {\n             let import_index = module.resolved_import_count.get();\n-            let import_directive = imports[import_index];\n+            let import_directive = imports.get()[import_index];\n             match self.resolve_import_for_module(module, import_directive) {\n                 Failed => {\n                     // We presumably emitted an error. Continue.\n@@ -2149,7 +2153,7 @@ impl Resolver {\n     fn resolve_import_for_module(&mut self,\n                                  module_: @Module,\n                                  import_directive: @ImportDirective)\n-                                     -> ResolveResult<()> {\n+                                 -> ResolveResult<()> {\n         let mut resolution_result = Failed;\n         let module_path = &import_directive.module_path;\n \n@@ -3230,16 +3234,20 @@ impl Resolver {\n \n     fn report_unresolved_imports(&mut self, module_: @Module) {\n         let index = module_.resolved_import_count.get();\n-        let imports: &mut ~[@ImportDirective] = &mut *module_.imports;\n-        let import_count = imports.len();\n+        let mut imports = module_.imports.borrow_mut();\n+        let import_count = imports.get().len();\n         if index != import_count {\n-            let sn = self.session.codemap.span_to_snippet(imports[index].span).unwrap();\n+            let sn = self.session\n+                         .codemap\n+                         .span_to_snippet(imports.get()[index].span)\n+                         .unwrap();\n             if sn.contains(\"::\") {\n-                self.resolve_error(imports[index].span, \"unresolved import\");\n+                self.resolve_error(imports.get()[index].span,\n+                                   \"unresolved import\");\n             } else {\n                 let err = format!(\"unresolved import (maybe you meant `{}::*`?)\",\n                                sn.slice(0, sn.len()));\n-                self.resolve_error(imports[index].span, err);\n+                self.resolve_error(imports.get()[index].span, err);\n             }\n         }\n "}]}