{"sha": "f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MThmMWRkNzg4OWE1ODk2ZGY0M2NlMWVmNWJlMGViNTdiZjM0MWM=", "commit": {"author": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-08T08:23:02Z"}, "committer": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-18T16:36:45Z"}, "message": "Remove attribute_cache from CrateMetadata", "tree": {"sha": "fcd6ee6b110ab29a8af56c105e30b7958cff9511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcd6ee6b110ab29a8af56c105e30b7958cff9511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "html_url": "https://github.com/rust-lang/rust/commit/f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/comments", "author": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df40e61382a2cba0be621fdabb9971ce3475e9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df40e61382a2cba0be621fdabb9971ce3475e9a7", "html_url": "https://github.com/rust-lang/rust/commit/df40e61382a2cba0be621fdabb9971ce3475e9a7"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "4197d34c0e892b5ec960858fc91a0e76abb4e711", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "patch": "@@ -243,7 +243,6 @@ impl<'a> CrateLoader<'a> {\n             cnum,\n             dependencies: Lock::new(dependencies),\n             codemap_import_info: RwLock::new(vec![]),\n-            attribute_cache: Lock::new([Vec::new(), Vec::new()]),\n             dep_kind: Lock::new(dep_kind),\n             source: cstore::CrateSource {\n                 dylib,"}, {"sha": "97f0a01c00c6afdc5e7558bc55b0d5d6145117e0", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "patch": "@@ -69,7 +69,6 @@ pub struct CrateMetadata {\n     pub cnum: CrateNum,\n     pub dependencies: Lock<Vec<CrateNum>>,\n     pub codemap_import_info: RwLock<Vec<ImportedFileMap>>,\n-    pub attribute_cache: Lock<[Vec<Option<Lrc<[ast::Attribute]>>>; 2]>,\n \n     pub root: schema::CrateRoot,\n "}, {"sha": "9a15b2dce04b66244a5a6ab365493ba7a77c9d9a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f418f1dd7889a5896df43ce1ef5be0eb57bf341c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f418f1dd7889a5896df43ce1ef5be0eb57bf341c", "patch": "@@ -880,34 +880,22 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Lrc<[ast::Attribute]> {\n-        let (node_as, node_index) =\n-            (node_id.address_space().index(), node_id.as_array_index());\n         if self.is_proc_macro(node_id) {\n             return Lrc::new([]);\n         }\n \n-        if let Some(&Some(ref val)) =\n-            self.attribute_cache.borrow()[node_as].get(node_index) {\n-            return val.clone();\n-        }\n-\n         // The attributes for a tuple struct are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n-        let mut item = self.entry(node_id);\n         let def_key = self.def_key(node_id);\n-        if def_key.disambiguated_data.data == DefPathData::StructCtor {\n-            item = self.entry(def_key.parent.unwrap());\n-        }\n-        let result: Lrc<[ast::Attribute]> = Lrc::from(self.get_attributes(&item, sess));\n-        let vec_ = &mut self.attribute_cache.borrow_mut()[node_as];\n-        if vec_.len() < node_index + 1 {\n-            vec_.resize(node_index + 1, None);\n-        }\n-        // This can overwrite the result produced by another thread, but the value\n-        // written should be the same\n-        vec_[node_index] = Some(result.clone());\n-        result\n+        let item_id = if def_key.disambiguated_data.data == DefPathData::StructCtor {\n+            def_key.parent.unwrap()\n+        } else {\n+            node_id\n+        };\n+\n+        let item = self.entry(item_id);\n+        Lrc::from(self.get_attributes(&item, sess))\n     }\n \n     pub fn get_struct_field_names(&self, id: DefIndex) -> Vec<ast::Name> {"}]}