{"sha": "8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "node_id": "C_kwDOAAsO6NoAKDg0NDBiMDlkMTcwNWMwYzAxMjBiN2M2Y2IyYzc0ZDEyODEzNmQyZDQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-23T09:50:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-23T09:50:17Z"}, "message": "Rollup merge of #103226 - compiler-errors:delay-if-need-infer, r=lcnr\n\nCheck `needs_infer` before `needs_drop` during HIR generator analysis\n\nThis is kinda a revival of #103036, but with the understanding that after fallback, a generator-interior type will only have `needs_infer` true if there's an error that prevented int or float variable fallback to occur (modulo region variables, which are erased).\n\nTherefore the best choice here is to delay a bug and skip the `needs_drop` call altogether.\n\nr? `@lcnr` feel free to reassign though", "tree": {"sha": "bb07591f232d47d740a6d386ca70d86793263c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb07591f232d47d740a6d386ca70d86793263c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjVQ5ZCRBK7hj4Ov3rIwAAtrUIABFdiVFM/1sh+4Hi8WUMXP9x\n4LA+SDTXome+WFjKkmABQ6aQYmE7Oaycglb57v2enfv2tw09UtBpDsV/fhRUOMYg\nsqLO7iLc6eWFGCe8xsqO83UbPgk4tJzCgERO0LKfi6TgXCO7TdW75BPmgn1ycbnE\nHqwP4s8TspCiVj1wpud+V/kaTpCyE0MpU7/M6G/rkEiVDpqbpWtos+gQGboLTeo0\nv6fX46G5nuTq62+puwNAYPXeyuDihkmCzRzTFv/aA8HncL7OkylMM4YpU10uF9N0\nE/22BRr+ZCEGVfpUfAuOxa5trFyJT+ccTfzUtZB4FLYrkTauSZYzF9Mrg1GeROc=\n=7nHx\n-----END PGP SIGNATURE-----\n", "payload": "tree bb07591f232d47d740a6d386ca70d86793263c0e\nparent e42687478870e9a764feabc7277300f2afe7a2ac\nparent 134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666518617 +0530\ncommitter GitHub <noreply@github.com> 1666518617 +0530\n\nRollup merge of #103226 - compiler-errors:delay-if-need-infer, r=lcnr\n\nCheck `needs_infer` before `needs_drop` during HIR generator analysis\n\nThis is kinda a revival of #103036, but with the understanding that after fallback, a generator-interior type will only have `needs_infer` true if there's an error that prevented int or float variable fallback to occur (modulo region variables, which are erased).\n\nTherefore the best choice here is to delay a bug and skip the `needs_drop` call altogether.\n\nr? `@lcnr` feel free to reassign though\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "html_url": "https://github.com/rust-lang/rust/commit/8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8440b09d1705c0c0120b7c6cb2c74d128136d2d4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42687478870e9a764feabc7277300f2afe7a2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42687478870e9a764feabc7277300f2afe7a2ac", "html_url": "https://github.com/rust-lang/rust/commit/e42687478870e9a764feabc7277300f2afe7a2ac"}, {"sha": "134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86", "html_url": "https://github.com/rust-lang/rust/commit/134de38e4dd44a6b7a0c8c3bb7a6ae02e1a08c86"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "bfe95852aa7b408cd22fc5f6912064fe2eebd67b", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8440b09d1705c0c0120b7c6cb2c74d128136d2d4/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8440b09d1705c0c0120b7c6cb2c74d128136d2d4/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "patch": "@@ -6,8 +6,11 @@ use crate::{\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::hir::place::{PlaceBase, Projection, ProjectionKind};\n use rustc_middle::ty::{ParamEnv, TyCtxt};\n+use rustc_middle::{\n+    hir::place::{PlaceBase, Projection, ProjectionKind},\n+    ty::TypeVisitable,\n+};\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>(\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -198,11 +201,13 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n \n         // If the type being assigned needs dropped, then the mutation counts as a borrow\n         // since it is essentially doing `Drop::drop(&mut x); x = new_value;`.\n-        //\n-        // FIXME(drop-tracking): We need to be more responsible about inference\n-        // variables here, since `needs_drop` is a \"raw\" type query, i.e. it\n-        // basically requires types to have been fully resolved.\n-        if assignee_place.place.base_ty.needs_drop(self.tcx, self.param_env) {\n+        let ty = self.tcx.erase_regions(assignee_place.place.base_ty);\n+        if ty.needs_infer() {\n+            self.tcx.sess.delay_span_bug(\n+                self.tcx.hir().span(assignee_place.hir_id),\n+                &format!(\"inference variables in {ty}\"),\n+            );\n+        } else if ty.needs_drop(self.tcx, self.param_env) {\n             self.places\n                 .borrowed\n                 .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));"}, {"sha": "b7dd599cd432183b00f9a1233afd83a6bdd03783", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8440b09d1705c0c0120b7c6cb2c74d128136d2d4/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8440b09d1705c0c0120b7c6cb2c74d128136d2d4/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=8440b09d1705c0c0120b7c6cb2c74d128136d2d4", "patch": "@@ -377,15 +377,6 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         debug!(\"is_borrowed_temporary: {:?}\", self.drop_ranges.is_borrowed_temporary(expr));\n \n         let ty = self.fcx.typeck_results.borrow().expr_ty_adjusted_opt(expr);\n-        let may_need_drop = |ty: Ty<'tcx>| {\n-            // Avoid ICEs in needs_drop.\n-            let ty = self.fcx.resolve_vars_if_possible(ty);\n-            let ty = self.fcx.tcx.erase_regions(ty);\n-            if ty.needs_infer() {\n-                return true;\n-            }\n-            ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n-        };\n \n         // Typically, the value produced by an expression is consumed by its parent in some way,\n         // so we only have to check if the parent contains a yield (note that the parent may, for\n@@ -403,9 +394,18 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // src/test/ui/generator/drop-tracking-parent-expression.rs.\n         let scope = if self.drop_ranges.is_borrowed_temporary(expr)\n             || ty.map_or(true, |ty| {\n-                let needs_drop = may_need_drop(ty);\n-                debug!(?needs_drop, ?ty);\n-                needs_drop\n+                // Avoid ICEs in needs_drop.\n+                let ty = self.fcx.resolve_vars_if_possible(ty);\n+                let ty = self.fcx.tcx.erase_regions(ty);\n+                if ty.needs_infer() {\n+                    self.fcx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(expr.span, &format!(\"inference variables in {ty}\"));\n+                    true\n+                } else {\n+                    ty.needs_drop(self.fcx.tcx, self.fcx.param_env)\n+                }\n             }) {\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id)\n         } else {"}]}