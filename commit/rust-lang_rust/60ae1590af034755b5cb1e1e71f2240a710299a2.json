{"sha": "60ae1590af034755b5cb1e1e71f2240a710299a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWUxNTkwYWYwMzQ3NTViNWNiMWUxZTcxZjIyNDBhNzEwMjk5YTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T14:35:37Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T14:50:02Z"}, "message": "Switch to new param kind bound syntax\n\nAnd remove support for the old syntax", "tree": {"sha": "605d11f071a776c0ca33dcfea0a774379b0880bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605d11f071a776c0ca33dcfea0a774379b0880bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ae1590af034755b5cb1e1e71f2240a710299a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ae1590af034755b5cb1e1e71f2240a710299a2", "html_url": "https://github.com/rust-lang/rust/commit/60ae1590af034755b5cb1e1e71f2240a710299a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ae1590af034755b5cb1e1e71f2240a710299a2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f71a0f48d18d80ff3be6970d582c5a67f976329", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f71a0f48d18d80ff3be6970d582c5a67f976329", "html_url": "https://github.com/rust-lang/rust/commit/1f71a0f48d18d80ff3be6970d582c5a67f976329"}], "stats": {"total": 503, "additions": 251, "deletions": 252}, "files": [{"sha": "74aafca0a150c1820f8413801b1ee291f8473281", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -114,7 +114,7 @@ fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n fn inject_libcore_reference(sess: session::session,\n                             crate: @ast::crate) -> @ast::crate {\n \n-    fn spanned<copy T>(x: T) -> @ast::spanned<T> {\n+    fn spanned<T: copy>(x: T) -> @ast::spanned<T> {\n         ret @{node: x,\n               span: {lo: 0u, hi: 0u,\n                      expanded_from: codemap::os_none}};"}, {"sha": "5ae398e238cd3d6f1f103cb7408e116028d8ee86", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -221,7 +221,7 @@ fn native_abi(attrs: [ast::attribute]) -> either::t<str, ast::native_abi> {\n     };\n }\n \n-fn span<copy T>(item: T) -> ast::spanned<T> {\n+fn span<T: copy>(item: T) -> ast::spanned<T> {\n     ret {node: item, span: ast_util::dummy_sp()};\n }\n "}, {"sha": "1a0cdb2c5cdc11d6f8e2c166f894519217bc8c88", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -182,7 +182,7 @@ fn mk_test_module(cx: test_ctxt) -> @ast::item {\n     ret @item;\n }\n \n-fn nospan<copy T>(t: T) -> ast::spanned<T> {\n+fn nospan<T: copy>(t: T) -> ast::spanned<T> {\n     ret {node: t, span: dummy_sp()};\n }\n "}, {"sha": "de1f9eacbcb85ceb7df58c7dc062030d04b33dd8", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -492,7 +492,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n \n // Path and definition ID indexing\n \n-fn create_index<copy T>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n+fn create_index<T: copy>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n    [@[entry<T>]] {\n     let buckets: [@mutable [entry<T>]] = [];\n     uint::range(0u, 256u) {|_i| buckets += [@mutable []]; };"}, {"sha": "d67d04607539f498fb63b4c4004d9e4696963658", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -145,7 +145,7 @@ fn parse_ty_constr_arg(st: @pstate, sd: str_def) ->\n     }\n }\n \n-fn parse_constr<copy T>(st: @pstate, sd: str_def, pser: arg_parser<T>) ->\n+fn parse_constr<T: copy>(st: @pstate, sd: str_def, pser: arg_parser<T>) ->\n    @ty::constr_general<T> {\n     let sp = ast_util::dummy_sp(); // FIXME: use a real span\n     let args: [@sp_constr_arg<T>] = [];"}, {"sha": "b5e53ab305ab77d6fd5250e13f9b9800f7336b42", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -98,7 +98,7 @@ fn map_expr(cx: ctx, ex: @expr) {\n     }\n }\n \n-fn new_smallintmap_int_adapter<copy V>() -> std::map::hashmap<int, V> {\n+fn new_smallintmap_int_adapter<V: copy>() -> std::map::hashmap<int, V> {\n     let key_idx = fn (&&key: int) -> uint { key as uint };\n     let idx_key = fn (idx: uint) -> int { idx as int };\n     ret new_smallintmap_adapter(key_idx, idx_key);\n@@ -109,11 +109,11 @@ fn new_smallintmap_int_adapter<copy V>() -> std::map::hashmap<int, V> {\n // the entire codebase adapting all the callsites to the different\n // interface.\n // FIXME: hashmap and smallintmap should support the same interface.\n-fn new_smallintmap_adapter<copy K, copy V>(key_idx: fn(K) -> uint,\n+fn new_smallintmap_adapter<K: copy, V: copy>(key_idx: fn(K) -> uint,\n                                            idx_key: fn(uint) -> K)\n     -> std::map::hashmap<K, V> {\n \n-    obj adapter<copy K, copy V>(map: smallintmap::smallintmap<V>,\n+    obj adapter<K: copy, V: copy>(map: smallintmap::smallintmap<V>,\n                                 key_idx: fn(K) -> uint,\n                                 idx_key: fn(uint) -> K) {\n "}, {"sha": "1c74cb7b17147cfd8690989cd9ea1355b5a1198c", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -118,7 +118,7 @@ tag debug_metadata {\n     retval_metadata(@metadata<retval_md>);\n }\n \n-fn cast_safely<copy T, U>(val: T) -> U unsafe {\n+fn cast_safely<T: copy, U>(val: T) -> U unsafe {\n     let val2 = val;\n     let val3 = unsafe::reinterpret_cast(val2);\n     unsafe::leak(val2);\n@@ -138,7 +138,7 @@ fn md_from_metadata<T>(val: debug_metadata) -> T unsafe {\n     }\n }\n \n-fn cached_metadata<copy T>(cache: metadata_cache, mdtag: int,\n+fn cached_metadata<T: copy>(cache: metadata_cache, mdtag: int,\n                            eq: block(md: T) -> bool) -> option::t<T> unsafe {\n     if cache.contains_key(mdtag) {\n         let items = cache.get(mdtag);"}, {"sha": "50f015512f420562693458de0134ecec7a526a28", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -414,7 +414,7 @@ fn mk_rcache() -> creader_cache {\n     ret map::mk_hashmap(hash_cache_entry, eq_cache_entries);\n }\n \n-fn new_ty_hash<copy V>() -> map::hashmap<t, V> { map::new_uint_hash() }\n+fn new_ty_hash<V: copy>() -> map::hashmap<t, V> { map::new_uint_hash() }\n \n fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            freevars: freevars::freevar_map) -> ctxt {"}, {"sha": "121abc1ce5c3a95da1a68eb2af2cfa5187cf62fc", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,7 +1,7 @@\n import codemap::span;\n import ast::*;\n \n-fn respan<copy T>(sp: span, t: T) -> spanned<T> {\n+fn respan<T: copy>(sp: span, t: T) -> spanned<T> {\n     ret {node: t, span: sp};\n }\n \n@@ -201,7 +201,7 @@ fn eq_def_id(&&a: def_id, &&b: def_id) -> bool {\n     a == b\n }\n \n-fn new_def_id_hash<copy T>() -> std::map::hashmap<def_id, T> {\n+fn new_def_id_hash<T: copy>() -> std::map::hashmap<def_id, T> {\n     std::map::mk_hashmap(hash_def_id, eq_def_id)\n }\n "}, {"sha": "8f6f1a5828af6c6538172c94b8de333512b69a37", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -103,7 +103,7 @@ fn elts_to_ell(cx: ext_ctxt, elts: [@expr]) ->\n         }\n }\n \n-fn option_flatten_map<copy T, copy U>(f: fn@(T) -> option::t<U>, v: [T]) ->\n+fn option_flatten_map<T: copy, U: copy>(f: fn@(T) -> option::t<U>, v: [T]) ->\n    option::t<[U]> {\n     let res = [];\n     for elem: T in v {"}, {"sha": "d9edeefd44d5c724430e171c95aff9f01df81856", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -210,7 +210,7 @@ fn expect_gt(p: parser) {\n     }\n }\n \n-fn spanned<copy T>(lo: uint, hi: uint, node: T) -> spanned<T> {\n+fn spanned<T: copy>(lo: uint, hi: uint, node: T) -> spanned<T> {\n     ret {node: node, span: ast_util::mk_sp(lo, hi)};\n }\n \n@@ -378,7 +378,7 @@ fn parse_constr_in_type(p: parser) -> @ast::ty_constr {\n }\n \n \n-fn parse_constrs<copy T>(pser: block(parser) -> @ast::constr_general<T>,\n+fn parse_constrs<T: copy>(pser: block(parser) -> @ast::constr_general<T>,\n                          p: parser) ->\n    [@ast::constr_general<T>] {\n     let constrs: [@ast::constr_general<T>] = [];\n@@ -554,7 +554,7 @@ fn parse_fn_block_arg(p: parser) -> ast::arg {\n     ret {mode: m, ty: t, ident: i, id: p.get_id()};\n }\n \n-fn parse_seq_to_before_gt<copy T>(sep: option::t<token::token>,\n+fn parse_seq_to_before_gt<T: copy>(sep: option::t<token::token>,\n                                   f: block(parser) -> T,\n                                   p: parser) -> [T] {\n     let first = true;\n@@ -571,15 +571,15 @@ fn parse_seq_to_before_gt<copy T>(sep: option::t<token::token>,\n     ret v;\n }\n \n-fn parse_seq_to_gt<copy T>(sep: option::t<token::token>,\n+fn parse_seq_to_gt<T: copy>(sep: option::t<token::token>,\n                            f: block(parser) -> T, p: parser) -> [T] {\n     let v = parse_seq_to_before_gt(sep, f, p);\n     expect_gt(p);\n \n     ret v;\n }\n \n-fn parse_seq_lt_gt<copy T>(sep: option::t<token::token>,\n+fn parse_seq_lt_gt<T: copy>(sep: option::t<token::token>,\n                            f: block(parser) -> T,\n                            p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n@@ -590,7 +590,7 @@ fn parse_seq_lt_gt<copy T>(sep: option::t<token::token>,\n     ret spanned(lo, hi, result);\n }\n \n-fn parse_seq_to_end<copy T>(ket: token::token, sep: seq_sep,\n+fn parse_seq_to_end<T: copy>(ket: token::token, sep: seq_sep,\n                             f: block(parser) -> T, p: parser) -> [T] {\n     let val = parse_seq_to_before_end(ket, sep, f, p);\n     p.bump();\n@@ -612,7 +612,7 @@ fn seq_sep_none() -> seq_sep {\n     ret {sep: option::none, trailing_opt: false};\n }\n \n-fn parse_seq_to_before_end<copy T>(ket: token::token,\n+fn parse_seq_to_before_end<T: copy>(ket: token::token,\n                                    sep: seq_sep,\n                                    f: block(parser) -> T, p: parser) -> [T] {\n     let first: bool = true;\n@@ -629,7 +629,7 @@ fn parse_seq_to_before_end<copy T>(ket: token::token,\n }\n \n \n-fn parse_seq<copy T>(bra: token::token, ket: token::token,\n+fn parse_seq<T: copy>(bra: token::token, ket: token::token,\n                      sep: seq_sep, f: block(parser) -> T,\n                      p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n@@ -1700,8 +1700,6 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::blk_check_mode) -> ast::blk {\n \n fn parse_ty_param(p: parser) -> ast::ty_param {\n     let bounds = [];\n-    if eat_word(p, \"send\") { bounds += [ast::bound_send]; }\n-    else if eat_word(p, \"copy\") { bounds += [ast::bound_copy]; }\n     let ident = parse_ident(p);\n     if eat(p, token::COLON) {\n         while p.peek() != token::COMMA && p.peek() != token::GT {"}, {"sha": "ab411baaf5aa00a963538d824cb9894873400040", "filename": "src/comp/syntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Futil%2Finterner.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -12,12 +12,12 @@ type interner<T> =\n      hasher: hashfn<T>,\n      eqer: eqfn<T>};\n \n-fn mk<copy T>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n+fn mk<T: copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n     let m = map::mk_hashmap::<T, uint>(hasher, eqer);\n     ret {map: m, mutable vect: [], hasher: hasher, eqer: eqer};\n }\n \n-fn intern<copy T>(itr: interner<T>, val: T) -> uint {\n+fn intern<T: copy>(itr: interner<T>, val: T) -> uint {\n     alt itr.map.find(val) {\n       some(idx) { ret idx; }\n       none. {\n@@ -32,7 +32,7 @@ fn intern<copy T>(itr: interner<T>, val: T) -> uint {\n // |get| isn't \"pure\" in the traditional sense, because it can go from\n // failing to returning a value as items are interned. But for typestate,\n // where we first check a pred and then rely on it, ceasing to fail is ok.\n-pure fn get<copy T>(itr: interner<T>, idx: uint) -> T {\n+pure fn get<T: copy>(itr: interner<T>, idx: uint) -> T {\n     unchecked {\n         itr.vect[idx]\n     }"}, {"sha": "611949ef51d7065ede74a00117f5d5a326d023ce", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -21,7 +21,7 @@ fn hash_def(d: ast::def_id) -> uint {\n     ret h;\n }\n \n-fn new_def_hash<copy V>() -> std::map::hashmap<ast::def_id, V> {\n+fn new_def_hash<V: copy>() -> std::map::hashmap<ast::def_id, V> {\n     let hasher: std::map::hashfn<ast::def_id> = hash_def;\n     let eqer: std::map::eqfn<ast::def_id> = def_eq;\n     ret std::map::mk_hashmap::<ast::def_id, V>(hasher, eqer);"}, {"sha": "ce8a1d7fde05b0c0ad98acf656e15fb300f455a7", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -55,7 +55,7 @@ fn mk_filesearch(maybe_sysroot: option::t<fs::path>,\n }\n \n // FIXME #1001: This can't be an obj method\n-fn search<copy T>(filesearch: filesearch, pick: pick<T>) -> option::t<T> {\n+fn search<T: copy>(filesearch: filesearch, pick: pick<T>) -> option::t<T> {\n     for lib_search_path in filesearch.lib_search_paths() {\n         #debug(\"searching %s\", lib_search_path);\n         for path in fs::list_dir(lib_search_path) {"}, {"sha": "8e821fc45a67fa0457f2fb296ea10689f79b7f50", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -226,7 +226,7 @@ fn check_variants_of_ast(crate: ast::crate, codemap: codemap::codemap,\n     check_variants_T(crate, codemap, filename, \"ty\", stolen.tys, pprust::ty_to_str, replace_ty_in_crate, cx);\n }\n \n-fn check_variants_T<copy T>(\n+fn check_variants_T<T: copy>(\n   crate: ast::crate,\n   codemap: codemap::codemap,\n   filename: str,"}, {"sha": "d8051dfabd17720360d13bfad98608e4485ecbb4", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -39,7 +39,7 @@ native mod rustrt {\n     type void;\n     type rust_port;\n \n-    fn chan_id_send<send T>(t: *sys::type_desc,\n+    fn chan_id_send<T: send>(t: *sys::type_desc,\n                             target_task: task::task, target_port: port_id,\n                             data: T) -> ctypes::uintptr_t;\n \n@@ -55,7 +55,7 @@ native mod rustrt {\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n-    fn call_with_retptr<send T>(&&f: fn@(*uint)) -> T;\n+    fn call_with_retptr<T: send>(&&f: fn@(*uint)) -> T;\n }\n \n type port_id = int;\n@@ -78,11 +78,11 @@ dropped.\n \n Channels may be duplicated and themselves transmitted over other channels.\n */\n-tag chan<send T> {\n+tag chan<T: send> {\n     chan_t(task::task, port_id);\n }\n \n-resource port_ptr<send T>(po: *rustrt::rust_port) {\n+resource port_ptr<T: send>(po: *rustrt::rust_port) {\n     // Once the port is detached it's guaranteed not to receive further\n     // messages\n     rustrt::rust_port_detach(po);\n@@ -106,7 +106,7 @@ transmitted. If a port value is copied, both copies refer to the same port.\n \n Ports may be associated with multiple <chan>s.\n */\n-tag port<send T> { port_t(@port_ptr<T>); }\n+tag port<T: send> { port_t(@port_ptr<T>); }\n \n /*\n Function: send\n@@ -116,7 +116,7 @@ Sends data over a channel.\n The sent data is moved into the channel, whereupon the caller loses access\n to it.\n */\n-fn send<send T>(ch: chan<T>, -data: T) {\n+fn send<T: send>(ch: chan<T>, -data: T) {\n     let chan_t(t, p) = ch;\n     let res = rustrt::chan_id_send(sys::get_type_desc::<T>(), t, p, data);\n     if res != 0u unsafe {\n@@ -131,7 +131,7 @@ Function: port\n \n Constructs a port.\n */\n-fn port<send T>() -> port<T> {\n+fn port<T: send>() -> port<T> {\n     port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>())))\n }\n \n@@ -143,10 +143,10 @@ Receive from a port.\n If no data is available on the port then the task will block until data\n becomes available.\n */\n-fn recv<send T>(p: port<T>) -> T { recv_(***p) }\n+fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n \n // Receive on a raw port pointer\n-fn recv_<send T>(p: *rustrt::rust_port) -> T {\n+fn recv_<T: send>(p: *rustrt::rust_port) -> T {\n     // FIXME: Due to issue 1185 we can't use a return pointer when\n     // calling C code, and since we can't create our own return\n     // pointer on the stack, we're going to call a little intrinsic\n@@ -179,6 +179,6 @@ Constructs a channel.\n \n The channel is bound to the port used to construct it.\n */\n-fn chan<send T>(p: port<T>) -> chan<T> {\n+fn chan<T: send>(p: port<T>) -> chan<T> {\n     chan_t(task::get_task(), rustrt::get_port_id(***p))\n }"}, {"sha": "e6956930686eb643a64ea0efe9205ca11efcd1a4", "filename": "src/libcore/either.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -39,7 +39,7 @@ Function: lefts\n \n Extracts from a vector of either all the left values.\n */\n-fn lefts<copy T, U>(eithers: [t<T, U>]) -> [T] {\n+fn lefts<T: copy, U>(eithers: [t<T, U>]) -> [T] {\n     let result: [T] = [];\n     for elt: t<T, U> in eithers {\n         alt elt { left(l) { result += [l]; } _ {/* fallthrough */ } }\n@@ -52,7 +52,7 @@ Function: rights\n \n Extracts from a vector of either all the right values\n */\n-fn rights<T, copy U>(eithers: [t<T, U>]) -> [U] {\n+fn rights<T, U: copy>(eithers: [t<T, U>]) -> [U] {\n     let result: [U] = [];\n     for elt: t<T, U> in eithers {\n         alt elt { right(r) { result += [r]; } _ {/* fallthrough */ } }\n@@ -68,7 +68,7 @@ Extracts from a vector of either all the left values and right values\n Returns a structure containing a vector of left values and a vector of\n right values.\n */\n-fn partition<copy T, copy U>(eithers: [t<T, U>])\n+fn partition<T: copy, U: copy>(eithers: [t<T, U>])\n     -> {lefts: [T], rights: [U]} {\n     let lefts: [T] = [];\n     let rights: [U] = [];\n@@ -83,7 +83,7 @@ Function: flip\n \n Flips between left and right of a given either\n */\n-pure fn flip<copy T, copy U>(eith: t<T, U>) -> t<U, T> {\n+pure fn flip<T: copy, U: copy>(eith: t<T, U>) -> t<U, T> {\n     alt eith {\n       right(r) { left(r) }\n       left(l) { right(l) }\n@@ -96,7 +96,7 @@ Function: to_result\n Converts either::t to a result::t, making the \"right\" choice\n an ok result, and the \"left\" choice a fail\n */\n-pure fn to_result<copy T, copy U>(eith: t<T, U>) -> result::t<U, T> {\n+pure fn to_result<T: copy, U: copy>(eith: t<T, U>) -> result::t<U, T> {\n     alt eith {\n       right(r) { result::ok(r) }\n       left(l) { result::err(l) }"}, {"sha": "dcc44b36605804f06cfcbe115909eaadbd8c9ac1", "filename": "src/libcore/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -467,14 +467,14 @@ Function: min\n \n Returns the minimum of two values\n */\n-pure fn min<copy T>(x: T, y: T) -> T { x < y ? x : y }\n+pure fn min<T: copy>(x: T, y: T) -> T { x < y ? x : y }\n \n /*\n Function: max\n \n Returns the maximum of two values\n */\n-pure fn max<copy T>(x: T, y: T) -> T { x < y ? y : x }\n+pure fn max<T: copy>(x: T, y: T) -> T { x < y ? y : x }\n \n /*\n Function: acos"}, {"sha": "453f38567a82248df53e29af4ed21d37029ba8f1", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -30,13 +30,13 @@ Failure:\n \n Fails if the value equals `none`.\n */\n-pure fn get<copy T>(opt: t<T>) -> T {\n+pure fn get<T: copy>(opt: t<T>) -> T {\n     alt opt { some(x) { ret x; } none. { fail \"option none\"; } }\n }\n \n /*\n */\n-fn map<T, copy U>(opt: t<T>, f: block(T) -> U) -> t<U> {\n+fn map<T, U: copy>(opt: t<T>, f: block(T) -> U) -> t<U> {\n     alt opt { some(x) { some(f(x)) } none. { none } }\n }\n \n@@ -61,7 +61,7 @@ Function: from_maybe\n \n Returns the contained value or a default\n */\n-pure fn from_maybe<copy T>(def: T, opt: t<T>) -> T {\n+pure fn from_maybe<T: copy>(def: T, opt: t<T>) -> T {\n     alt opt { some(x) { x } none. { def } }\n }\n \n@@ -70,7 +70,7 @@ Function: maybe\n \n Applies a function to the contained value or returns a default\n */\n-fn maybe<T, copy U>(def: U, opt: t<T>, f: block(T) -> U) -> U {\n+fn maybe<T, U: copy>(def: U, opt: t<T>, f: block(T) -> U) -> U {\n     alt opt { none. { def } some(t) { f(t) } }\n }\n "}, {"sha": "52af0421e5849cc1aea505389a4e003b01e4b957", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -37,7 +37,7 @@ Failure:\n \n If the result is an error\n */\n-fn get<copy T, U>(res: t<T, U>) -> T {\n+fn get<T: copy, U>(res: t<T, U>) -> T {\n     alt res {\n       ok(t) { t }\n       err(_) {\n@@ -57,7 +57,7 @@ Failure:\n \n If the result is not an error\n */\n-fn get_err<T, copy U>(res: t<T, U>) -> U {\n+fn get_err<T, U: copy>(res: t<T, U>) -> U {\n     alt res {\n       err(u) { u }\n       ok(_) {\n@@ -87,7 +87,7 @@ pure fn failure<T, U>(res: t<T, U>) -> bool {\n     !success(res)\n }\n \n-pure fn to_either<copy T, copy U>(res: t<U, T>) -> either::t<T, U> {\n+pure fn to_either<T: copy, U: copy>(res: t<U, T>) -> either::t<T, U> {\n     alt res {\n       ok(res) { either::right(res) }\n       err(fail_) { either::left(fail_) }\n@@ -110,7 +110,7 @@ Example:\n > })\n \n */\n-fn chain<T, copy U, copy V>(res: t<T, V>, op: block(T) -> t<U, V>)\n+fn chain<T, U: copy, V: copy>(res: t<T, V>, op: block(T) -> t<U, V>)\n     -> t<U, V> {\n     alt res {\n       ok(t) { op(t) }"}, {"sha": "5de9c8347fe03f52db50bcaecfc09ebe8d7a3b00", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -236,7 +236,7 @@ Returns:\n \n A handle to the new task\n */\n-fn spawn<send T>(-data: T, f: fn(T)) -> task {\n+fn spawn<T: send>(-data: T, f: fn(T)) -> task {\n     spawn_inner(data, f, none)\n }\n \n@@ -249,7 +249,7 @@ termination\n Immediately before termination, either on success or failure, the spawned\n task will send a <task_notification> message on the provided channel.\n */\n-fn spawn_notify<send T>(-data: T, f: fn(T),\n+fn spawn_notify<T: send>(-data: T, f: fn(T),\n                          notify: comm::chan<task_notification>) -> task {\n     spawn_inner(data, f, some(notify))\n }\n@@ -263,7 +263,7 @@ This is a convenience wrapper around spawn_notify which, when paired\n with <join> can be easily used to spawn a task then wait for it to\n complete.\n */\n-fn spawn_joinable<send T>(-data: T, f: fn(T)) -> joinable_task {\n+fn spawn_joinable<T: send>(-data: T, f: fn(T)) -> joinable_task {\n     let p = comm::port::<task_notification>();\n     let id = spawn_notify(data, f, comm::chan::<task_notification>(p));\n     ret (id, p);\n@@ -279,11 +279,11 @@ fn spawn_joinable<send T>(-data: T, f: fn(T)) -> joinable_task {\n //\n // After the transition this should all be rewritten.\n \n-fn spawn_inner<send T>(-data: T, f: fn(T),\n+fn spawn_inner<T: send>(-data: T, f: fn(T),\n                           notify: option<comm::chan<task_notification>>)\n     -> task unsafe {\n \n-    fn wrapper<send T>(data: *u8, f: fn(T)) unsafe {\n+    fn wrapper<T: send>(data: *u8, f: fn(T)) unsafe {\n         let data: ~T = unsafe::reinterpret_cast(data);\n         f(*data);\n     }"}, {"sha": "32bb2f46a4917f5ec2ecab53927a0d2b76d48aab", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -121,7 +121,7 @@ Creates and initializes an immutable vector.\n Creates an immutable vector of size `n_elts` and initializes the elements\n to the value `t`.\n */\n-fn init_elt<copy T>(t: T, n_elts: uint) -> [T] {\n+fn init_elt<T: copy>(t: T, n_elts: uint) -> [T] {\n     let v = [];\n     reserve(v, n_elts);\n     let i: uint = 0u;\n@@ -138,7 +138,7 @@ Creates and initializes a mutable vector.\n Creates a mutable vector of size `n_elts` and initializes the elements\n to the value `t`.\n */\n-fn init_elt_mut<copy T>(t: T, n_elts: uint) -> [mutable T] {\n+fn init_elt_mut<T: copy>(t: T, n_elts: uint) -> [mutable T] {\n     let v = [mutable];\n     reserve(v, n_elts);\n     let i: uint = 0u;\n@@ -153,7 +153,7 @@ Function: to_mut\n \n Produces a mutable vector from an immutable vector.\n */\n-fn to_mut<copy T>(v: [T]) -> [mutable T] {\n+fn to_mut<T: copy>(v: [T]) -> [mutable T] {\n     let vres = [mutable];\n     for t: T in v { vres += [mutable t]; }\n     ret vres;\n@@ -165,7 +165,7 @@ Function: from_mut\n \n Produces an immutable vector from a mutable vector.\n */\n-fn from_mut<copy T>(v: [mutable T]) -> [T] {\n+fn from_mut<T: copy>(v: [mutable T]) -> [T] {\n     let vres = [];\n     for t: T in v { vres += [t]; }\n     ret vres;\n@@ -181,7 +181,7 @@ Returns the first element of a vector\n Predicates:\n <is_not_empty> (v)\n */\n-pure fn head<copy T>(v: [const T]) : is_not_empty(v) -> T { ret v[0]; }\n+pure fn head<T: copy>(v: [const T]) : is_not_empty(v) -> T { ret v[0]; }\n \n /*\n Function: tail\n@@ -191,7 +191,7 @@ Returns all but the first element of a vector\n Predicates:\n <is_not_empty> (v)\n */\n-fn tail<copy T>(v: [const T]) : is_not_empty(v) -> [T] {\n+fn tail<T: copy>(v: [const T]) : is_not_empty(v) -> [T] {\n     ret slice(v, 1u, len(v));\n }\n \n@@ -206,7 +206,7 @@ Returns all but the last elemnt of a vector\n Preconditions:\n `v` is not empty\n */\n-fn init<copy T>(v: [const T]) -> [T] {\n+fn init<T: copy>(v: [const T]) -> [T] {\n     assert len(v) != 0u;\n     slice(v, 0u, len(v) - 1u)\n }\n@@ -221,7 +221,7 @@ Returns:\n An option containing the last element of `v` if `v` is not empty, or\n none if `v` is empty.\n */\n-pure fn last<copy T>(v: [const T]) -> option::t<T> {\n+pure fn last<T: copy>(v: [const T]) -> option::t<T> {\n     if len(v) == 0u { ret none; }\n     ret some(v[len(v) - 1u]);\n }\n@@ -234,7 +234,7 @@ Returns the last element of a non-empty vector `v`\n Predicates:\n <is_not_empty> (v)\n */\n-pure fn last_total<copy T>(v: [const T]) : is_not_empty(v) -> T {\n+pure fn last_total<T: copy>(v: [const T]) : is_not_empty(v) -> T {\n     ret v[len(v) - 1u];\n }\n \n@@ -243,7 +243,7 @@ Function: slice\n \n Returns a copy of the elements from [`start`..`end`) from `v`.\n */\n-fn slice<copy T>(v: [const T], start: uint, end: uint) -> [T] {\n+fn slice<T: copy>(v: [const T], start: uint, end: uint) -> [T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     let result = [];\n@@ -259,7 +259,7 @@ Function: slice_mut\n \n Returns a copy of the elements from [`start`..`end`) from `v`.\n */\n-fn slice_mut<copy T>(v: [const T], start: uint, end: uint) -> [mutable T] {\n+fn slice_mut<T: copy>(v: [const T], start: uint, end: uint) -> [mutable T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     let result = [mutable];\n@@ -277,7 +277,7 @@ Function: shift\n \n Removes the first element from a vector and return it\n */\n-fn shift<copy T>(&v: [const T]) -> T {\n+fn shift<T: copy>(&v: [const T]) -> T {\n     let ln = len::<T>(v);\n     assert (ln > 0u);\n     let e = v[0];\n@@ -291,7 +291,7 @@ Function: pop\n \n Remove the last element from a vector and return it\n */\n-fn pop<copy T>(&v: [const T]) -> T {\n+fn pop<T: copy>(&v: [const T]) -> T {\n     let ln = len(v);\n     assert (ln > 0u);\n     ln -= 1u;\n@@ -305,7 +305,7 @@ Function: push\n \n Append an element to a vector and return it\n */\n-fn push<copy T>(&v: [T], initval: T) {\n+fn push<T: copy>(&v: [T], initval: T) {\n     grow(v, 1u, initval)\n }\n \n@@ -325,7 +325,7 @@ v - The vector to grow\n n - The number of elements to add\n initval - The value for the new elements\n */\n-fn grow<copy T>(&v: [T], n: uint, initval: T) {\n+fn grow<T: copy>(&v: [T], n: uint, initval: T) {\n     reserve(v, next_power_of_two(len(v) + n));\n     let i: uint = 0u;\n     while i < n { v += [initval]; i += 1u; }\n@@ -344,7 +344,7 @@ v - The vector to grow\n n - The number of elements to add\n initval - The value for the new elements\n */\n-fn grow_mut<copy T>(&v: [mutable T], n: uint, initval: T) {\n+fn grow_mut<T: copy>(&v: [mutable T], n: uint, initval: T) {\n     reserve(v, next_power_of_two(len(v) + n));\n     let i: uint = 0u;\n     while i < n { v += [mutable initval]; i += 1u; }\n@@ -380,7 +380,7 @@ Sets the element at position `index` to `val`. If `index` is past the end\n of the vector, expands the vector by replicating `initval` to fill the\n intervening space.\n */\n-fn grow_set<copy T>(&v: [mutable T], index: uint, initval: T, val: T) {\n+fn grow_set<T: copy>(&v: [mutable T], index: uint, initval: T, val: T) {\n     if index >= len(v) { grow_mut(v, index - len(v) + 1u, initval); }\n     v[index] = val;\n }\n@@ -405,7 +405,7 @@ Function: map_mut\n \n Apply a function to each element of a mutable vector and return the results\n */\n-fn map_mut<copy T, U>(v: [const T], f: block(T) -> U) -> [U] {\n+fn map_mut<T: copy, U>(v: [const T], f: block(T) -> U) -> [U] {\n     let result = [];\n     reserve(result, len(v));\n     for elem: T in v {\n@@ -420,7 +420,7 @@ Function: map2\n \n Apply a function to each pair of elements and return the results\n */\n-fn map2<copy T, copy U, V>(v0: [T], v1: [U], f: block(T, U) -> V) -> [V] {\n+fn map2<T: copy, U: copy, V>(v0: [T], v1: [U], f: block(T, U) -> V) -> [V] {\n     let v0_len = len(v0);\n     if v0_len != len(v1) { fail; }\n     let u: [V] = [];\n@@ -437,7 +437,7 @@ Apply a function to each element of a vector and return the results\n If function `f` returns `none` then that element is excluded from\n the resulting vector.\n */\n-fn filter_map<copy T, copy U>(v: [const T], f: block(T) -> option::t<U>)\n+fn filter_map<T: copy, U: copy>(v: [const T], f: block(T) -> option::t<U>)\n     -> [U] {\n     let result = [];\n     for elem: T in v {\n@@ -458,7 +458,7 @@ holds.\n Apply function `f` to each element of `v` and return a vector containing\n only those elements for which `f` returned true.\n */\n-fn filter<copy T>(v: [T], f: block(T) -> bool) -> [T] {\n+fn filter<T: copy>(v: [T], f: block(T) -> bool) -> [T] {\n     let result = [];\n     for elem: T in v {\n         if f(elem) { result += [elem]; }\n@@ -472,7 +472,7 @@ Function: concat\n Concatenate a vector of vectors. Flattens a vector of vectors of T into\n a single vector of T.\n */\n-fn concat<copy T>(v: [const [const T]]) -> [T] {\n+fn concat<T: copy>(v: [const [const T]]) -> [T] {\n     let new: [T] = [];\n     for inner: [T] in v { new += inner; }\n     ret new;\n@@ -483,7 +483,7 @@ Function: foldl\n \n Reduce a vector from left to right\n */\n-fn foldl<copy T, U>(z: T, v: [const U], p: block(T, U) -> T) -> T {\n+fn foldl<T: copy, U>(z: T, v: [const U], p: block(T, U) -> T) -> T {\n     let accum = z;\n     iter(v) { |elt|\n         accum = p(accum, elt);\n@@ -496,7 +496,7 @@ Function: foldr\n \n Reduce a vector from right to left\n */\n-fn foldr<T, copy U>(v: [const T], z: U, p: block(T, U) -> U) -> U {\n+fn foldr<T, U: copy>(v: [const T], z: U, p: block(T, U) -> U) -> U {\n     let accum = z;\n     riter(v) { |elt|\n         accum = p(elt, accum);\n@@ -591,7 +591,7 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n */\n-fn find<copy T>(v: [T], f: block(T) -> bool) -> option::t<T> {\n+fn find<T: copy>(v: [T], f: block(T) -> bool) -> option::t<T> {\n     for elt: T in v { if f(elt) { ret some(elt); } }\n     ret none;\n }\n@@ -637,7 +637,7 @@ vector contains the first element of the i-th tuple of the input vector,\n and the i-th element of the second vector contains the second element\n of the i-th tuple of the input vector.\n */\n-fn unzip<copy T, copy U>(v: [(T, U)]) -> ([T], [U]) {\n+fn unzip<T: copy, U: copy>(v: [(T, U)]) -> ([T], [U]) {\n     let as = [], bs = [];\n     for (a, b) in v { as += [a]; bs += [b]; }\n     ret (as, bs);\n@@ -655,7 +655,7 @@ Preconditions:\n \n <same_length> (v, u)\n */\n-fn zip<copy T, copy U>(v: [T], u: [U]) : same_length(v, u) -> [(T, U)] {\n+fn zip<T: copy, U: copy>(v: [T], u: [U]) : same_length(v, u) -> [(T, U)] {\n     let zipped = [];\n     let sz = len(v), i = 0u;\n     assert (sz == len(u));\n@@ -694,7 +694,7 @@ Function: reversed\n \n Returns a vector with the order of elements reversed\n */\n-fn reversed<copy T>(v: [const T]) -> [T] {\n+fn reversed<T: copy>(v: [const T]) -> [T] {\n     let rs: [T] = [];\n     let i = len::<T>(v);\n     if i == 0u { ret rs; } else { i -= 1u; }\n@@ -805,7 +805,7 @@ is sorted then the permutations are lexicographically sorted).\n The total number of permutations produced is `len(v)!`.  If `v` contains\n repeated elements, then some permutations are repeated.\n */\n-fn permute<copy T>(v: [const T], put: block([T])) {\n+fn permute<T: copy>(v: [const T], put: block([T])) {\n   let ln = len(v);\n   if ln == 0u {\n     put([]);"}, {"sha": "4374a7ffb993624fb76d2ae42d3d298d73f232c5", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -108,7 +108,7 @@ Failure:\n \n If `ofs` is greater or equal to the length of the vector\n */\n-fn get<copy T>(t: t<T>, ofs: uint) -> T {\n+fn get<T: copy>(t: t<T>, ofs: uint) -> T {\n     assert ofs < (*t).size;\n     ret unsafe { *ptr::mut_offset((*t).base, ofs) };\n }\n@@ -122,7 +122,7 @@ Failure:\n \n If `ofs` is greater or equal to the length of the vector\n */\n-fn set<copy T>(t: t<T>, ofs: uint, v: T) {\n+fn set<T: copy>(t: t<T>, ofs: uint, v: T) {\n     assert ofs < (*t).size;\n     unsafe { *ptr::mut_offset((*t).base, ofs) = v };\n }"}, {"sha": "86aeed3826c4bc4e5ea35bb1439cd9294175b03d", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -41,7 +41,7 @@ native mod rustrt {\n     type void;\n     type rust_port;\n \n-    fn chan_id_send<send T>(t: *sys::type_desc,\n+    fn chan_id_send<T: send>(t: *sys::type_desc,\n                             target_task: task::task, target_port: port_id,\n                             data: T) -> ctypes::uintptr_t;\n \n@@ -57,7 +57,7 @@ native mod rustrt {\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n-    fn call_with_retptr<send T>(&&f: fn@(*uint)) -> T;\n+    fn call_with_retptr<T: send>(&&f: fn@(*uint)) -> T;\n }\n \n type port_id = int;\n@@ -80,11 +80,11 @@ dropped.\n \n Channels may be duplicated and themselves transmitted over other channels.\n */\n-tag chan<send T> {\n+tag chan<T: send> {\n     chan_t(task::task, port_id);\n }\n \n-resource port_ptr<send T>(po: *rustrt::rust_port) {\n+resource port_ptr<T: send>(po: *rustrt::rust_port) {\n     // Once the port is detached it's guaranteed not to receive further\n     // messages\n     rustrt::rust_port_detach(po);\n@@ -108,7 +108,7 @@ transmitted. If a port value is copied, both copies refer to the same port.\n \n Ports may be associated with multiple <chan>s.\n */\n-tag port<send T> { port_t(@port_ptr<T>); }\n+tag port<T: send> { port_t(@port_ptr<T>); }\n \n /*\n Function: send\n@@ -118,7 +118,7 @@ Sends data over a channel.\n The sent data is moved into the channel, whereupon the caller loses access\n to it.\n */\n-fn send<send T>(ch: chan<T>, -data: T) {\n+fn send<T: send>(ch: chan<T>, -data: T) {\n     let chan_t(t, p) = ch;\n     let res = rustrt::chan_id_send(sys::get_type_desc::<T>(), t, p, data);\n     if res != 0u unsafe {\n@@ -133,7 +133,7 @@ Function: port\n \n Constructs a port.\n */\n-fn port<send T>() -> port<T> {\n+fn port<T: send>() -> port<T> {\n     port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>())))\n }\n \n@@ -145,10 +145,10 @@ Receive from a port.\n If no data is available on the port then the task will block until data\n becomes available.\n */\n-fn recv<send T>(p: port<T>) -> T { recv_(***p) }\n+fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n \n // Receive on a raw port pointer\n-fn recv_<send T>(p: *rustrt::rust_port) -> T {\n+fn recv_<T: send>(p: *rustrt::rust_port) -> T {\n     // FIXME: Due to issue 1185 we can't use a return pointer when\n     // calling C code, and since we can't create our own return\n     // pointer on the stack, we're going to call a little intrinsic\n@@ -181,6 +181,6 @@ Constructs a channel.\n \n The channel is bound to the port used to construct it.\n */\n-fn chan<send T>(p: port<T>) -> chan<T> {\n+fn chan<T: send>(p: port<T>) -> chan<T> {\n     chan_t(task::get_task(), rustrt::get_port_id(***p))\n }"}, {"sha": "05c3c6c2b0aeded6b9926f36a8809b855efc4fc0", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -33,15 +33,15 @@ Section: Functions\n /*\n Function: create\n */\n-fn create<copy T>() -> t<T> {\n+fn create<T: copy>() -> t<T> {\n     type cell<T> = option::t<T>;\n \n     let initial_capacity: uint = 32u; // 2^5\n      /**\n       * Grow is only called on full elts, so nelts is also len(elts), unlike\n       * elsewhere.\n       */\n-    fn grow<copy T>(nelts: uint, lo: uint, elts: [mutable cell<T>]) ->\n+    fn grow<T: copy>(nelts: uint, lo: uint, elts: [mutable cell<T>]) ->\n        [mutable cell<T>] {\n         assert (nelts == vec::len(elts));\n         let rv = [mutable];\n@@ -57,10 +57,10 @@ fn create<copy T>() -> t<T> {\n \n         ret rv;\n     }\n-    fn get<copy T>(elts: [mutable cell<T>], i: uint) -> T {\n+    fn get<T: copy>(elts: [mutable cell<T>], i: uint) -> T {\n         ret alt elts[i] { option::some(t) { t } _ { fail } };\n     }\n-    obj deque<copy T>(mutable nelts: uint,\n+    obj deque<T: copy>(mutable nelts: uint,\n                       mutable lo: uint,\n                       mutable hi: uint,\n                       mutable elts: [mutable cell<T>]) {"}, {"sha": "046f565577a00bf94634654ab62e51ae0a4588f9", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -50,7 +50,7 @@ Function: insert\n \n Insert a value into the map\n */\n-fn insert<copy K, copy V>(m: treemap<K, V>, k: K, v: V) -> treemap<K, V> {\n+fn insert<K: copy, V: copy>(m: treemap<K, V>, k: K, v: V) -> treemap<K, V> {\n     @alt m {\n        @empty. { node(@k, @v, @empty, @empty) }\n        @node(@kk, vv, left, right) {\n@@ -68,7 +68,7 @@ Function: find\n \n Find a value based on the key\n */\n-fn find<K, copy V>(m: treemap<K, V>, k: K) -> option<V> {\n+fn find<K, V: copy>(m: treemap<K, V>, k: K) -> option<V> {\n     alt *m {\n       empty. { none }\n       node(@kk, @v, left, right) {\n@@ -84,7 +84,7 @@ Function: traverse\n \n Visit all pairs in the map in order.\n */\n-fn traverse<K, copy V>(m: treemap<K, V>, f: block(K, V)) {\n+fn traverse<K, V: copy>(m: treemap<K, V>, f: block(K, V)) {\n     alt *m {\n       empty. { }\n       node(@k, @v, _, _) {"}, {"sha": "efd633467efdddd6954ae21f6276178ab30ed7b5", "filename": "src/libstd/list.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -27,7 +27,7 @@ Function: from_vec\n \n Create a list from a vector\n */\n-fn from_vec<copy T>(v: [const T]) -> list<T> {\n+fn from_vec<T: copy>(v: [const T]) -> list<T> {\n     *vec::foldr(v, @nil::<T>, { |h, t| @cons(h, t) })\n }\n \n@@ -46,7 +46,7 @@ ls - The list to fold\n z - The initial value\n f - The function to apply\n */\n-fn foldl<copy T, U>(ls: list<U>, z: T, f: block(T, U) -> T) -> T {\n+fn foldl<T: copy, U>(ls: list<U>, z: T, f: block(T, U) -> T) -> T {\n     let accum: T = z;\n     iter(ls) {|elt| accum = f(accum, elt);}\n     accum\n@@ -61,7 +61,7 @@ Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n */\n-fn find<copy T, copy U>(ls: list<T>, f: block(T) -> option::t<U>)\n+fn find<T: copy, U: copy>(ls: list<T>, f: block(T) -> option::t<U>)\n     -> option::t<U> {\n     let ls = ls;\n     while true {\n@@ -80,7 +80,7 @@ Function: has\n \n Returns true if a list contains an element with the given value\n */\n-fn has<copy T>(ls: list<T>, elt: T) -> bool {\n+fn has<T: copy>(ls: list<T>, elt: T) -> bool {\n     let ls = ls;\n     while true {\n         alt ls {\n@@ -96,7 +96,7 @@ Function: is_empty\n \n Returns true if the list is empty.\n */\n-pure fn is_empty<copy T>(ls: list<T>) -> bool {\n+pure fn is_empty<T: copy>(ls: list<T>) -> bool {\n     alt ls {\n         nil. { true }\n         _ { false }\n@@ -108,7 +108,7 @@ Function: is_not_empty\n \n Returns true if the list is not empty.\n */\n-pure fn is_not_empty<copy T>(ls: list<T>) -> bool {\n+pure fn is_not_empty<T: copy>(ls: list<T>) -> bool {\n     ret !is_empty(ls);\n }\n \n@@ -128,7 +128,7 @@ Function: tail\n \n Returns all but the first element of a list\n */\n-pure fn tail<copy T>(ls: list<T>) : is_not_empty(ls) -> list<T> {\n+pure fn tail<T: copy>(ls: list<T>) : is_not_empty(ls) -> list<T> {\n     alt ls {\n         cons(_, tl) { ret *tl; }\n         nil. { fail \"list empty\" }\n@@ -140,7 +140,7 @@ Function: head\n \n Returns the first element of a list\n */\n-pure fn head<copy T>(ls: list<T>) : is_not_empty(ls) -> T {\n+pure fn head<T: copy>(ls: list<T>) : is_not_empty(ls) -> T {\n     alt ls {\n         cons(hd, _) { ret hd; }\n         nil. { fail \"list empty\" }\n@@ -152,7 +152,7 @@ Function: append\n \n Appends one list to another\n */\n-pure fn append<copy T>(l: list<T>, m: list<T>) -> list<T> {\n+pure fn append<T: copy>(l: list<T>, m: list<T>) -> list<T> {\n     alt l {\n       nil. { ret m; }\n       cons(x, xs) { let rest = append(*xs, m); ret cons(x, @rest); }"}, {"sha": "db47160216c44d13433bf99047a322a73db34feb", "filename": "src/libstd/map.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -108,32 +108,32 @@ type hashmap<K, V> = obj {\n /* Section: Operations */\n \n mod chained {\n-    type entry<copy K, copy V> = {\n+    type entry<K: copy, V: copy> = {\n         hash: uint,\n         key: K,\n         mutable value: V,\n         mutable next: chain<K, V>\n     };\n \n-    tag chain<copy K, copy V> {\n+    tag chain<K: copy, V: copy> {\n         present(@entry<K, V>);\n         absent;\n     }\n \n-    type t<copy K, copy V> = {\n+    type t<K: copy, V: copy> = {\n         mutable size: uint,\n         mutable chains: [mutable chain<K,V>],\n         hasher: hashfn<K>,\n         eqer: eqfn<K>\n     };\n \n-    tag search_result<copy K, copy V> {\n+    tag search_result<K: copy, V: copy> {\n         not_found;\n         found_first(uint, @entry<K,V>);\n         found_after(@entry<K,V>, @entry<K,V>);\n     }\n \n-    fn search_rem<copy K, copy V>(tbl: t<K,V>,\n+    fn search_rem<K: copy, V: copy>(tbl: t<K,V>,\n                                   k: K,\n                                   h: uint,\n                                   idx: uint,\n@@ -163,7 +163,7 @@ mod chained {\n         util::unreachable();\n     }\n \n-    fn search_tbl<copy K, copy V>(\n+    fn search_tbl<K: copy, V: copy>(\n         tbl: t<K,V>, k: K, h: uint) -> search_result<K,V> {\n         let idx = h % vec::len(tbl.chains);\n         alt tbl.chains[idx] {\n@@ -185,7 +185,7 @@ mod chained {\n         }\n     }\n \n-    fn insert<copy K, copy V>(tbl: t<K,V>, k: K, v: V) -> bool {\n+    fn insert<K: copy, V: copy>(tbl: t<K,V>, k: K, v: V) -> bool {\n         let hash = tbl.hasher(k);\n         alt search_tbl(tbl, k, hash) {\n           not_found. {\n@@ -210,7 +210,7 @@ mod chained {\n         }\n     }\n \n-    fn get<copy K, copy V>(tbl: t<K,V>, k: K) -> core::option::t<V> {\n+    fn get<K: copy, V: copy>(tbl: t<K,V>, k: K) -> core::option::t<V> {\n         alt search_tbl(tbl, k, tbl.hasher(k)) {\n           not_found. {\n             ret core::option::none;\n@@ -226,7 +226,7 @@ mod chained {\n         }\n     }\n \n-    fn remove<copy K, copy V>(tbl: t<K,V>, k: K) -> core::option::t<V> {\n+    fn remove<K: copy, V: copy>(tbl: t<K,V>, k: K) -> core::option::t<V> {\n         alt search_tbl(tbl, k, tbl.hasher(k)) {\n           not_found. {\n             ret core::option::none;\n@@ -246,11 +246,11 @@ mod chained {\n         }\n     }\n \n-    fn chains<copy K, copy V>(nchains: uint) -> [mutable chain<K,V>] {\n+    fn chains<K: copy, V: copy>(nchains: uint) -> [mutable chain<K,V>] {\n         ret vec::init_elt_mut(absent, nchains);\n     }\n \n-    fn foreach_entry<copy K, copy V>(chain0: chain<K,V>,\n+    fn foreach_entry<K: copy, V: copy>(chain0: chain<K,V>,\n                                      blk: block(@entry<K,V>)) {\n         let chain = chain0;\n         while true {\n@@ -265,7 +265,7 @@ mod chained {\n         }\n     }\n \n-    fn foreach_chain<copy K, copy V>(chains: [const chain<K,V>],\n+    fn foreach_chain<K: copy, V: copy>(chains: [const chain<K,V>],\n                                      blk: block(@entry<K,V>)) {\n         let i = 0u, n = vec::len(chains);\n         while i < n {\n@@ -274,7 +274,7 @@ mod chained {\n         }\n     }\n \n-    fn rehash<copy K, copy V>(tbl: t<K,V>) {\n+    fn rehash<K: copy, V: copy>(tbl: t<K,V>) {\n         let old_chains = tbl.chains;\n         let n_old_chains = vec::len(old_chains);\n         let n_new_chains: uint = uint::next_power_of_two(n_old_chains + 1u);\n@@ -286,7 +286,7 @@ mod chained {\n         }\n     }\n \n-    fn items<copy K, copy V>(tbl: t<K,V>, blk: block(K,V)) {\n+    fn items<K: copy, V: copy>(tbl: t<K,V>, blk: block(K,V)) {\n         let tbl_chains = tbl.chains;  // Satisfy alias checker.\n         foreach_chain(tbl_chains) { |entry|\n             let key = entry.key;\n@@ -295,7 +295,7 @@ mod chained {\n         }\n     }\n \n-    obj o<copy K, copy V>(tbl: @t<K,V>,\n+    obj o<K: copy, V: copy>(tbl: @t<K,V>,\n                           lf: util::rational) {\n         fn size() -> uint {\n             ret tbl.size;\n@@ -343,7 +343,8 @@ mod chained {\n         }\n     }\n \n-    fn mk<copy K, copy V>(hasher: hashfn<K>, eqer: eqfn<K>) -> hashmap<K,V> {\n+    fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n+        -> hashmap<K,V> {\n         let initial_capacity: uint = 32u; // 2^5\n         let t = @{mutable size: 0u,\n                   mutable chains: chains(initial_capacity),\n@@ -363,7 +364,7 @@ Parameters:\n hasher - The hash function for key type K\n eqer - The equality function for key type K\n */\n-fn mk_hashmap<copy K, copy V>(hasher: hashfn<K>, eqer: eqfn<K>)\n+fn mk_hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n     -> hashmap<K, V> {\n     ret chained::mk(hasher, eqer);\n }\n@@ -373,7 +374,7 @@ Function: new_str_hash\n \n Construct a hashmap for string keys\n */\n-fn new_str_hash<copy V>() -> hashmap<str, V> {\n+fn new_str_hash<V: copy>() -> hashmap<str, V> {\n     ret mk_hashmap(str::hash, str::eq);\n }\n \n@@ -382,7 +383,7 @@ Function: new_int_hash\n \n Construct a hashmap for int keys\n */\n-fn new_int_hash<copy V>() -> hashmap<int, V> {\n+fn new_int_hash<V: copy>() -> hashmap<int, V> {\n     fn hash_int(&&x: int) -> uint { ret x as uint; }\n     fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n     ret mk_hashmap(hash_int, eq_int);\n@@ -393,7 +394,7 @@ Function: new_uint_hash\n \n Construct a hashmap for uint keys\n */\n-fn new_uint_hash<copy V>() -> hashmap<uint, V> {\n+fn new_uint_hash<V: copy>() -> hashmap<uint, V> {\n     fn hash_uint(&&x: uint) -> uint { ret x; }\n     fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n     ret mk_hashmap(hash_uint, eq_uint);"}, {"sha": "d40adc84739fc9d7185b77174abd472ca71c72ad", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -30,7 +30,7 @@ Function: insert\n Add a value to the map. If the map already contains a value for\n the specified key then the original value is replaced.\n */\n-fn insert<copy T>(m: smallintmap<T>, key: uint, val: T) {\n+fn insert<T: copy>(m: smallintmap<T>, key: uint, val: T) {\n     vec::grow_set::<option::t<T>>(m.v, key, none::<T>, some::<T>(val));\n }\n \n@@ -40,7 +40,7 @@ Function: find\n Get the value for the specified key. If the key does not exist\n in the map then returns none.\n */\n-fn find<copy T>(m: smallintmap<T>, key: uint) -> option::t<T> {\n+fn find<T: copy>(m: smallintmap<T>, key: uint) -> option::t<T> {\n     if key < vec::len::<option::t<T>>(m.v) { ret m.v[key]; }\n     ret none::<T>;\n }\n@@ -54,7 +54,7 @@ Failure:\n \n If the key does not exist in the map\n */\n-fn get<copy T>(m: smallintmap<T>, key: uint) -> T {\n+fn get<T: copy>(m: smallintmap<T>, key: uint) -> T {\n     alt find(m, key) {\n       none. { #error(\"smallintmap::get(): key not present\"); fail; }\n       some(v) { ret v; }\n@@ -66,13 +66,13 @@ Method: contains_key\n \n Returns true if the map contains a value for the specified key\n */\n-fn contains_key<copy T>(m: smallintmap<T>, key: uint) -> bool {\n+fn contains_key<T: copy>(m: smallintmap<T>, key: uint) -> bool {\n     ret !option::is_none(find::<T>(m, key));\n }\n \n // FIXME: Are these really useful?\n \n-fn truncate<copy T>(m: smallintmap<T>, len: uint) {\n+fn truncate<T: copy>(m: smallintmap<T>, len: uint) {\n     m.v = vec::slice_mut::<option::t<T>>(m.v, 0u, len);\n }\n "}, {"sha": "190497b48dd6ebd53adc94eafa2fc53c331aa963", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -20,8 +20,8 @@ Merge sort. Returns a new vector containing the sorted list.\n Has worst case O(n log n) performance, best case O(n), but\n is not space efficient. This is a stable sort.\n */\n-fn merge_sort<copy T>(le: lteq<T>, v: [const T]) -> [T] {\n-    fn merge<copy T>(le: lteq<T>, a: [T], b: [T]) -> [T] {\n+fn merge_sort<T: copy>(le: lteq<T>, v: [const T]) -> [T] {\n+    fn merge<T: copy>(le: lteq<T>, a: [T], b: [T]) -> [T] {\n         let rs: [T] = [];\n         let a_len: uint = len::<T>(a);\n         let a_ix: uint = 0u;\n@@ -46,7 +46,7 @@ fn merge_sort<copy T>(le: lteq<T>, v: [const T]) -> [T] {\n     ret merge::<T>(le, merge_sort::<T>(le, a), merge_sort::<T>(le, b));\n }\n \n-fn part<copy T>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n+fn part<T: copy>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n                 right: uint, pivot: uint) -> uint {\n     let pivot_value = arr[pivot];\n     arr[pivot] <-> arr[right];\n@@ -63,7 +63,7 @@ fn part<copy T>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n     ret storage_index;\n }\n \n-fn qsort<copy T>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n+fn qsort<T: copy>(compare_func: lteq<T>, arr: [mutable T], left: uint,\n              right: uint) {\n     if right > left {\n         let pivot = (left + right) / 2u;\n@@ -84,12 +84,12 @@ Quicksort. Sorts a mutable vector in place.\n Has worst case O(n^2) performance, average case O(n log n).\n This is an unstable sort.\n */\n-fn quick_sort<copy T>(compare_func: lteq<T>, arr: [mutable T]) {\n+fn quick_sort<T: copy>(compare_func: lteq<T>, arr: [mutable T]) {\n     if len::<T>(arr) == 0u { ret; }\n     qsort::<T>(compare_func, arr, 0u, len::<T>(arr) - 1u);\n }\n \n-fn qsort3<copy T>(compare_func_lt: lteq<T>, compare_func_eq: lteq<T>,\n+fn qsort3<T: copy>(compare_func_lt: lteq<T>, compare_func_eq: lteq<T>,\n                   arr: [mutable T], left: int, right: int) {\n     if right <= left { ret; }\n     let v: T = arr[right];\n@@ -150,7 +150,7 @@ According to these slides this is the algorithm of choice for\n \n This is an unstable sort.\n */\n-fn quick_sort3<copy T>(compare_func_lt: lteq<T>, compare_func_eq: lteq<T>,\n+fn quick_sort3<T: copy>(compare_func_lt: lteq<T>, compare_func_eq: lteq<T>,\n                        arr: [mutable T]) {\n     if len::<T>(arr) == 0u { ret; }\n     qsort3::<T>(compare_func_lt, compare_func_eq, arr, 0,"}, {"sha": "43a869f0319485eb264dbb5090b0bee56354964c", "filename": "src/libstd/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -115,7 +115,7 @@ fn run_tests_console(opts: test_opts,\n     run_tests_console_(opts, tests, default_test_to_task)\n }\n \n-fn run_tests_console_<copy T>(opts: test_opts, tests: [test_desc<T>],\n+fn run_tests_console_<T: copy>(opts: test_opts, tests: [test_desc<T>],\n                               to_task: test_to_task<T>) -> bool {\n \n     type test_state =\n@@ -127,7 +127,7 @@ fn run_tests_console_<copy T>(opts: test_opts, tests: [test_desc<T>],\n           mutable ignored: uint,\n           mutable failures: [test_desc<T>]};\n \n-    fn callback<copy T>(event: testevent<T>, st: test_state) {\n+    fn callback<T: copy>(event: testevent<T>, st: test_state) {\n         alt event {\n           te_filtered(filtered_tests) {\n             st.total = vec::len(filtered_tests);\n@@ -220,7 +220,7 @@ tag testevent<T> {\n     te_result(test_desc<T>, test_result);\n }\n \n-fn run_tests<copy T>(opts: test_opts, tests: [test_desc<T>],\n+fn run_tests<T: copy>(opts: test_opts, tests: [test_desc<T>],\n                      to_task: test_to_task<T>,\n                      callback: fn@(testevent<T>)) {\n \n@@ -254,7 +254,7 @@ fn run_tests<copy T>(opts: test_opts, tests: [test_desc<T>],\n \n fn get_concurrency() -> uint { rustrt::sched_threads() }\n \n-fn filter_tests<copy T>(opts: test_opts,\n+fn filter_tests<T: copy>(opts: test_opts,\n                         tests: [test_desc<T>]) -> [test_desc<T>] {\n     let filtered = tests;\n \n@@ -268,7 +268,7 @@ fn filter_tests<copy T>(opts: test_opts,\n           option::none. { \"\" }\n         };\n \n-        fn filter_fn<copy T>(test: test_desc<T>, filter_str: str) ->\n+        fn filter_fn<T: copy>(test: test_desc<T>, filter_str: str) ->\n             option::t<test_desc<T>> {\n             if str::find(test.name, filter_str) >= 0 {\n                 ret option::some(test);\n@@ -284,7 +284,7 @@ fn filter_tests<copy T>(opts: test_opts,\n     filtered = if !opts.run_ignored {\n         filtered\n     } else {\n-        fn filter<copy T>(test: test_desc<T>) -> option::t<test_desc<T>> {\n+        fn filter<T: copy>(test: test_desc<T>) -> option::t<test_desc<T>> {\n             if test.ignore {\n                 ret option::some({name: test.name,\n                                   fn: test.fn,\n@@ -310,7 +310,7 @@ fn filter_tests<copy T>(opts: test_opts,\n \n type test_future<T> = {test: test_desc<T>, wait: fn@() -> test_result};\n \n-fn run_test<copy T>(test: test_desc<T>,\n+fn run_test<T: copy>(test: test_desc<T>,\n                     to_task: test_to_task<T>) -> test_future<T> {\n     if test.ignore {\n         ret {test: test, wait: fn () -> test_result { tr_ignored }};"}, {"sha": "646fde401db53f13adb09663ce8710614d49ebb2", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -44,7 +44,7 @@ Function: insert\n \n Insert a value into the map\n */\n-fn insert<copy K, copy V>(m: treemap<K, V>, k: K, v: V) {\n+fn insert<K: copy, V: copy>(m: treemap<K, V>, k: K, v: V) {\n     alt m {\n       @empty. { *m = node(@k, @v, @mutable empty, @mutable empty); }\n       @node(@kk, _, _, _) {\n@@ -63,7 +63,7 @@ Function: find\n \n Find a value based on the key\n */\n-fn find<copy K, copy V>(m: treemap<K, V>, k: K) -> option<V> {\n+fn find<K: copy, V: copy>(m: treemap<K, V>, k: K) -> option<V> {\n     alt *m {\n       empty. { none }\n       node(@kk, @v, _, _) {"}, {"sha": "f7bfc18a2570f49074b819a1d407300c084b138a", "filename": "src/libstd/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -7,7 +7,7 @@ Function: id\n \n The identity function\n */\n-pure fn id<copy T>(x: T) -> T { x }\n+pure fn id<T: copy>(x: T) -> T { x }\n \n /*\n Function: unreachable"}, {"sha": "e13603aec91086bcff95e3b625f62aa93dbfc957", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -55,25 +55,25 @@ mod map_reduce {\n     export reducer;\n     export map_reduce;\n \n-    type putter<send K, send V> = fn(K, V);\n+    type putter<K: send, V: send> = fn(K, V);\n \n     // FIXME: the first K1 parameter should probably be a -, but that\n     // doesn't parse at the moment.\n-    type mapper<send K1, send K2, send V> = fn(K1, putter<K2, V>);\n+    type mapper<K1: send, K2: send, V: send> = fn(K1, putter<K2, V>);\n \n-    type getter<send V> = fn() -> option<V>;\n+    type getter<V: send> = fn() -> option<V>;\n \n-    type reducer<send K, send V> = fn(K, getter<V>);\n+    type reducer<K: send, V: send> = fn(K, getter<V>);\n \n-    tag ctrl_proto<send K, send V> {\n+    tag ctrl_proto<K: send, V: send> {\n         find_reducer(K, chan<chan<reduce_proto<V>>>);\n         mapper_done;\n     }\n \n-    tag reduce_proto<send V> { emit_val(V); done; ref; release; }\n+    tag reduce_proto<V: send> { emit_val(V); done; ref; release; }\n \n-    fn start_mappers<send K1, send K2,\n-                     send V>(map: mapper<K1, K2, V>,\n+    fn start_mappers<K1: send, K2: send,\n+                     V: send>(map: mapper<K1, K2, V>,\n                          ctrl: chan<ctrl_proto<K2, V>>, inputs: [K1]) ->\n        [joinable_task] {\n         let tasks = [];\n@@ -84,15 +84,15 @@ mod map_reduce {\n         ret tasks;\n     }\n \n-    fn map_task<send K1, send K2,\n-                send V>(-map: mapper<K1, K2, V>,\n+    fn map_task<K: send1, K: send2,\n+                V: send>(-map: mapper<K1, K2, V>,\n                           -ctrl: chan<ctrl_proto<K2, V>>,\n                     -input: K1) {\n         // log(error, \"map_task \" + input);\n         let intermediates = treemap::init();\n \n-        fn emit<send K2,\n-                send V>(im: treemap::treemap<K2, chan<reduce_proto<V>>>,\n+        fn emit<K: send2,\n+                V: send>(im: treemap::treemap<K2, chan<reduce_proto<V>>>,\n                     ctrl: chan<ctrl_proto<K2, V>>, key: K2, val: V) {\n             let c;\n             alt treemap::find(im, key) {\n@@ -110,15 +110,15 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        fn finish<send K, send V>(_k: K, v: chan<reduce_proto<V>>) {\n+        fn finish<K: send, V: send>(_k: K, v: chan<reduce_proto<V>>) {\n             send(v, release);\n         }\n         treemap::traverse(intermediates, finish);\n         send(ctrl, mapper_done);\n     }\n \n-    fn reduce_task<send K,\n-                   send V>(-reduce: reducer<K, V>, -key: K,\n+    fn reduce_task<K: send,\n+                   V: send>(-reduce: reducer<K, V>, -key: K,\n                        -out: chan<chan<reduce_proto<V>>>) {\n         let p = port();\n \n@@ -127,7 +127,7 @@ mod map_reduce {\n         let ref_count = 0;\n         let is_done = false;\n \n-        fn get<send V>(p: port<reduce_proto<V>>,\n+        fn get<V: send>(p: port<reduce_proto<V>>,\n                          &ref_count: int, &is_done: bool)\n            -> option<V> {\n             while !is_done || ref_count > 0 {\n@@ -150,8 +150,8 @@ mod map_reduce {\n         reduce(key, bind get(p, ref_count, is_done));\n     }\n \n-    fn map_reduce<send K1, send K2,\n-                  send V>(map: mapper<K1, K2, V>, reduce: reducer<K2, V>,\n+    fn map_reduce<K: send1, K: send2,\n+                  V: send>(map: mapper<K1, K2, V>, reduce: reducer<K2, V>,\n                       inputs: [K1]) {\n         let ctrl = port();\n \n@@ -195,7 +195,7 @@ mod map_reduce {\n             }\n         }\n \n-        fn finish<send K, send V>(_k: K, v: chan<reduce_proto<V>>) {\n+        fn finish<K: send, V: send>(_k: K, v: chan<reduce_proto<V>>) {\n             send(v, done);\n         }\n         treemap::traverse(reducers, finish);"}, {"sha": "8845e15721f9a52287a9e5b7a63b1d642a7b6eca", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: instantiating a sendable type parameter with a copyable type\n \n-fn f<send T>(i: T) {\n+fn f<T: send>(i: T) {\n }\n \n fn main() {"}, {"sha": "858cc62a944a7103503c024ecfea669200ac8858", "filename": "src/test/compile-fail/use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: Unsatisfied precondition constraint\n-fn send<send T>(ch: _chan<T>, -data: T) {\n+fn send<T: send>(ch: _chan<T>, -data: T) {\n     log(debug, ch);\n     log(debug, data);\n     fail;"}, {"sha": "62206f939949475727ef8db2e6bd3eb4d2e846ee", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,8 +4,8 @@ fn test00_start(ch: chan_t<int>, message: int) { send(ch, copy message); }\n type task_id = int;\n type port_id = int;\n \n-type chan_t<send T> = {task: task_id, port: port_id};\n+type chan_t<T: send> = {task: task_id, port: port_id};\n \n-fn send<send T>(ch: chan_t<T>, -data: T) { fail; }\n+fn send<T: send>(ch: chan_t<T>, -data: T) { fail; }\n \n fn main() { fail \"quux\"; }"}, {"sha": "3c7ebf8c18ca293aee8c8e93ec07cb7d6c6a46f4", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -5,7 +5,7 @@ import comm::port;\n import comm::send;\n import comm::recv;\n \n-fn echo<send T>(c: chan<T>, oc: chan<chan<T>>) {\n+fn echo<T: send>(c: chan<T>, oc: chan<chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n     let p = port::<T>();"}, {"sha": "0d5429e1980b1e8c959d1b224e09abda1cfcfe1f", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn f<copy T, copy U>(x: T, y: U) -> {a: T, b: U} { ret {a: x, b: y}; }\n+fn f<T: copy, U: copy>(x: T, y: U) -> {a: T, b: U} { ret {a: x, b: y}; }\n \n fn main() {\n     log(debug, f({x: 3, y: 4, z: 5}, 4).a.x);"}, {"sha": "579b304f839e9abe602a66fc04c4f46cd6402200", "filename": "src/test/run-pass/bind-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fbind-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fbind-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-generic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,12 +1,12 @@\n-fn wrapper3<copy T>(i: T, j: int) {\n+fn wrapper3<T: copy>(i: T, j: int) {\n     log(debug, i);\n     log(debug, j);\n     // This is a regression test that the spawn3 thunk to wrapper3\n     // correctly finds the value of j\n     assert j == 123456789;\n }\n \n-fn spawn3<copy T>(i: T, j: int) {\n+fn spawn3<T: copy>(i: T, j: int) {\n     let wrapped = bind wrapper3(i, j);\n     wrapped();\n }"}, {"sha": "be9981ccdbe30f73deb86eb875bf8eca89f13cf7", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,8 +1,8 @@\n \n \n-type box<copy T> = {c: @T};\n+type box<T: copy> = {c: @T};\n \n-fn unbox<copy T>(b: box<T>) -> T { ret *b.c; }\n+fn unbox<T: copy>(b: box<T>) -> T { ret *b.c; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "c2f933a3480a1a2190b22c309b289cfd4a780315", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "2bbb0fea5f7951ac25bc9bf0215a3e05b4cd9220", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -3,7 +3,7 @@\n // -*- rust -*-\n type compare<T> = fn@(~T, ~T) -> bool;\n \n-fn test_generic<copy T>(expected: ~T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "30581222bfa352973862e7bcf3c50780664b0992", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "393cb1b7a4ece854cc38677190ec7eeefebd1921", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "4ffc190716c45923bcc3cf5970235c00a86d939a", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "060fba26051cb435485208d49b9ed2cc7eff090b", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -3,7 +3,7 @@\n // -*- rust -*-\n type compare<T> = fn@(~T, ~T) -> bool;\n \n-fn test_generic<copy T>(expected: ~T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "ce6489cdd12dbc4ae3dcaf5b0e2f1de0e68af25a", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "bf31ffd5808878a0cad2ba4e8bb42f8d5abb1619", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -6,7 +6,7 @@\n // Tests for standalone blocks as expressions with dynamic type sizes\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "a3bd2449bb20b23fee5e14fd642600968f369600", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -9,7 +9,7 @@ fn test_vec() {\n }\n \n fn test_generic() {\n-    fn f<copy T>(t: T) -> T { t }\n+    fn f<T: copy>(t: T) -> T { t }\n     assert (f(10) == 10);\n }\n "}, {"sha": "01daf198dfe20050fa5a4199cc1084f536a23922", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, not_expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "9c565f35f676d20fe0ac1a3fde9ce4e702489946", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -6,7 +6,7 @@\n // Tests for if as expressions with dynamic type sizes\n type compare<T> = fn@(T, T) -> bool;\n \n-fn test_generic<copy T>(expected: T, not_expected: T, eq: compare<T>) {\n+fn test_generic<T: copy>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "dac5ffd0416b674f092449580105b349c6836547", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, send B>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B: send>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, send B>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B: send>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret bind fix_help(f, _);\n }\n "}, {"sha": "ab4f40236becd50186e680acad44dc01fa30cddc", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<send T>(val: T, f: fn(T)) {\n+fn spawn<T: send>(val: T, f: fn(T)) {\n     f(val);\n }\n "}, {"sha": "1c8f900b2e067f6a83fbb20d4401712b94ffe53b", "filename": "src/test/run-pass/foreach-unique-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,5 +1,5 @@\n \n-obj ob<copy K>(k: K) {\n+obj ob<K: copy>(k: K) {\n     fn foo(it: block(~{a: K})) { it(~{a: k}); }\n }\n "}, {"sha": "b9bc823a8b9946653ba85647352141655351c4e2", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<copy T>(t: T) -> T { ret t; }\n+fn id<T: copy>(t: T) -> T { ret t; }\n \n fn main() {\n     let expected = @100;"}, {"sha": "0af9855de0d2a8a68d37bdc63178ebb04a3fd76c", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<send T>(t: T) -> T { ret t; }\n+fn id<T: send>(t: T) -> T { ret t; }\n \n fn main() {\n     let expected = ~100;"}, {"sha": "eeb9cf25f8ffdaa9072709471390abc4686c8494", "filename": "src/test/run-pass/generic-bind-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<copy T>(t: T) -> T { ret t; }\n+fn id<T: copy>(t: T) -> T { ret t; }\n \n fn main() {\n     let t = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7};"}, {"sha": "d0d3ea98a47685967adf1d71637be407f8412d20", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<copy T>(t: T) -> T { ret t; }\n+fn id<T: copy>(t: T) -> T { ret t; }\n \n fn main() {\n     let t = {_0: 1, _1: 2, _2: 3, _3: 4, _4: 5, _5: 6, _6: 7};"}, {"sha": "14fb924492aa994419ae9945c887f43bffbc43d7", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn box<copy T>(x: {x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n+fn box<T: copy>(x: {x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n \n fn main() {\n     let x: @{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});"}, {"sha": "39f4c0d147295ae1dbe451883ae497727ec887a2", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,8 +1,8 @@\n \n \n-fn g<copy X>(x: X) -> X { ret x; }\n+fn g<X: copy>(x: X) -> X { ret x; }\n \n-fn f<copy T>(t: T) -> {a: T, b: T} {\n+fn f<T: copy>(t: T) -> {a: T, b: T} {\n     type pair = {a: T, b: T};\n \n     let x: pair = {a: t, b: t};"}, {"sha": "15583f9904b86f8a0e3698284875b51f1c2deed6", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn f<copy T>(t: T) { let t1: T = t; }\n+fn f<T: copy>(t: T) { let t1: T = t; }\n \n fn main() { let x = {x: @10, y: @12}; f(x); }"}, {"sha": "8c042a9e76d6387627445cfb9bd9b78b490db464", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,8 +1,8 @@\n \n \n-type recbox<copy T> = {x: @T};\n+type recbox<T: copy> = {x: @T};\n \n-fn reclift<copy T>(t: T) -> recbox<T> { ret {x: @t}; }\n+fn reclift<T: copy>(t: T) -> recbox<T> { ret {x: @t}; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "6f985120d42b8858469dd6e4e3eb01e0d4afdb76", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n-type recbox<copy T> = {x: ~T};\n+type recbox<T: copy> = {x: ~T};\n \n-fn reclift<copy T>(t: T) -> recbox<T> { ret {x: ~t}; }\n+fn reclift<T: copy>(t: T) -> recbox<T> { ret {x: ~t}; }\n \n fn main() {\n     let foo: int = 17;"}, {"sha": "31f0008fc0b450e0c4b13d948b52f83349418429", "filename": "src/test/run-pass/generic-fn-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,6 +4,6 @@\n // -*- rust -*-\n \n // Issue #45: infer type parameters in function applications\n-fn id<copy T>(x: T) -> T { ret x; }\n+fn id<T: copy>(x: T) -> T { ret x; }\n \n fn main() { let x: int = 42; let y: int = id(x); assert (x == y); }"}, {"sha": "749341c1a191d788ca1256fd15cfdc3aaeba3992", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,4 +1,4 @@\n \n-fn f<copy T>(x: ~T) -> ~T { ret x; }\n+fn f<T: copy>(x: ~T) -> ~T { ret x; }\n \n fn main() { let x = f(~3); log(debug, *x); }"}, {"sha": "6f854efa85780bdd178ef455cf3bb2aec552b35e", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn id<copy T>(x: T) -> T { ret x; }\n+fn id<T: copy>(x: T) -> T { ret x; }\n \n type triple = {x: int, y: int, z: int};\n "}, {"sha": "2c4e1804af539a2e6a329dad9b51828bea9ae5d8", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj handle<copy T>(data: T) {\n+obj handle<T: copy>(data: T) {\n     fn get() -> T { ret data; }\n }\n "}, {"sha": "5eedeecb5bc1a969d1cb210a1745fb220fbed423", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n \n \n-obj buf<copy T>(data: {_0: T, _1: T, _2: T}) {\n+obj buf<T: copy>(data: {_0: T, _1: T, _2: T}) {\n     fn get(i: int) -> T {\n         if i == 0 {\n             ret data._0;"}, {"sha": "58a33b80946098b5b85a19354a44bb987fc07deb", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,4 +1,4 @@\n-fn get_third<copy T>(t: (T, T, T)) -> T { let (_, _, x) = t; ret x; }\n+fn get_third<T: copy>(t: (T, T, T)) -> T { let (_, _, x) = t; ret x; }\n \n fn main() {\n     log(debug, get_third((1, 2, 3)));"}, {"sha": "686bd36888e3d0a25a29e73f6cf28ecdaf2473a1", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,5 +1,5 @@\n \n-fn box<copy T>(x: {x: T, y: T, z: T}) -> ~{x: T, y: T, z: T} { ret ~x; }\n+fn box<T: copy>(x: {x: T, y: T, z: T}) -> ~{x: T, y: T, z: T} { ret ~x; }\n \n fn main() {\n     let x: ~{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});"}, {"sha": "be253b9afdd560f1ad1690f7b1c30afa025be6a0", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,5 +1,5 @@\n-fn quux<copy T>(x: T) -> T { let f = bind id::<T>(_); ret f(x); }\n+fn quux<T: copy>(x: T) -> T { let f = bind id::<T>(_); ret f(x); }\n \n-fn id<copy T>(x: T) -> T { ret x; }\n+fn id<T: copy>(x: T) -> T { ret x; }\n \n fn main() { assert (quux(10) == 10); }"}, {"sha": "e79ca8bae38b17496148949e363f779842217691", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,4 +1,4 @@\n-fn double<copy T>(a: T) -> [T] { ret [a] + [a]; }\n+fn double<T: copy>(a: T) -> [T] { ret [a] + [a]; }\n \n fn double_int(a: int) -> [int] { ret [a] + [a]; }\n "}, {"sha": "f25665ca86c12a6e7d4c4f384dd2afb66a8ce133", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,8 +1,8 @@\n tag myvec<X> = [X];\n \n-fn myvec_deref<copy X>(mv: myvec<X>) -> [X] { ret *mv; }\n+fn myvec_deref<X: copy>(mv: myvec<X>) -> [X] { ret *mv; }\n \n-fn myvec_elt<copy X>(mv: myvec<X>) -> X { ret mv[0]; }\n+fn myvec_elt<X: copy>(mv: myvec<X>) -> X { ret mv[0]; }\n \n fn main() {\n     let mv = myvec([1, 2, 3]);"}, {"sha": "d74fb81a3b99fc403127f5c73684786956925f71", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -2,19 +2,19 @@ use std;\n \n import std::list::*;\n \n-pure fn pure_length_go<copy T>(ls: list<T>, acc: uint) -> uint {\n+pure fn pure_length_go<T: copy>(ls: list<T>, acc: uint) -> uint {\n     alt ls { nil. { acc } cons(_, tl) { pure_length_go(*tl, acc + 1u) } }\n }\n \n-pure fn pure_length<copy T>(ls: list<T>) -> uint { pure_length_go(ls, 0u) }\n+pure fn pure_length<T: copy>(ls: list<T>) -> uint { pure_length_go(ls, 0u) }\n \n-pure fn nonempty_list<copy T>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n+pure fn nonempty_list<T: copy>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n \n // Of course, the compiler can't take advantage of the\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n // could be a \"tag refinement\", if we implement those.\n-fn safe_head<copy T>(ls: list<T>) : nonempty_list(ls) -> T {\n+fn safe_head<T: copy>(ls: list<T>) : nonempty_list(ls) -> T {\n     check is_not_empty(ls);\n     ret head(ls);\n }"}, {"sha": "4c1f8d54ced447a9e8e908fb64804210bbf8406d", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -6,7 +6,7 @@ tag clam<T> { signed(int); unsigned(uint); }\n \n fn getclam<T>() -> clam<T> { ret signed::<T>(42); }\n \n-obj impatience<copy T>() {\n+obj impatience<T: copy>() {\n     fn moreclam() -> clam<T> { be getclam::<T>(); }\n }\n "}, {"sha": "7481bfe9100c237a4ed4b0ea776a7010d4f25755", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -2,6 +2,6 @@\n \n tag option<T> { none; some(T); }\n \n-fn f<copy T>() -> option<T> { ret none; }\n+fn f<T: copy>() -> option<T> { ret none; }\n \n fn main() { f::<int>(); }"}, {"sha": "432985bcb7fa136f93b755e7849f806dffcfff0f", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -4,9 +4,9 @@ import comm::send;\n import comm::port;\n \n // tests that ctrl's type gets inferred properly\n-type command<send K, send V> = {key: K, val: V};\n+type command<K: send, V: send> = {key: K, val: V};\n \n-fn cache_server<send K, send V>(c: chan<chan<command<K, V>>>) {\n+fn cache_server<K: send, V: send>(c: chan<chan<command<K, V>>>) {\n     let ctrl = port();\n     send(c, chan(ctrl));\n }"}, {"sha": "66177fd04aecd36b5e410df0bc142540f52d2dda", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -8,7 +8,7 @@ fn main() { test05(); }\n \n type pair<A,B> = { a: A, b: B };\n \n-fn make_generic_record<copy A,copy B>(a: A, b: B) -> pair<A,B> {\n+fn make_generic_record<A: copy, B: copy>(a: A, b: B) -> pair<A,B> {\n     ret {a: a, b: b};\n }\n \n@@ -24,7 +24,7 @@ fn test05_start(&&f: sendfn(&&float, &&str) -> pair<float, str>) {\n     assert q.b == \"Ho\";\n }\n \n-fn spawn<copy A, copy B>(f: fn(sendfn(A,B)->pair<A,B>)) {\n+fn spawn<A: copy, B: copy>(f: fn(sendfn(A,B)->pair<A,B>)) {\n     let arg = sendfn(a: A, b: B) -> pair<A,B> {\n         ret make_generic_record(a, b);\n     };"}, {"sha": "7fdaa061ee6ea8cea777c6a2871f019b40b71647", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n fn p_foo<T>(pinned: T) { }\n-fn s_foo<copy T>(shared: T) { }\n-fn u_foo<send T>(unique: T) { }\n+fn s_foo<T: copy>(shared: T) { }\n+fn u_foo<T: send>(unique: T) { }\n \n resource r(i: int) { }\n "}, {"sha": "e43cdaacb8bee16c038decd14398db2f07123e1f", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -7,7 +7,7 @@ import std::list::*;\n \n // Can't easily be written as a \"pure fn\" because there's\n // no syntax for specifying that f is pure.\n-fn pure_foldl<copy T, copy U>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n+fn pure_foldl<T: copy, U: copy>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n     alt ls {\n         nil. { u }\n         cons(hd, tl) { f(hd, pure_foldl(*tl, f(hd, u), f)) }\n@@ -16,18 +16,18 @@ fn pure_foldl<copy T, copy U>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n \n // Shows how to use an \"unchecked\" block to call a general\n // fn from a pure fn\n-pure fn pure_length<copy T>(ls: list<T>) -> uint {\n+pure fn pure_length<T: copy>(ls: list<T>) -> uint {\n     fn count<T>(_t: T, &&u: uint) -> uint { u + 1u }\n     unchecked{ pure_foldl(ls, 0u, bind count(_, _)) }\n }\n \n-pure fn nonempty_list<copy T>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n+pure fn nonempty_list<T: copy>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n \n // Of course, the compiler can't take advantage of the\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n // could be a \"tag refinement\", if we implement those.\n-fn safe_head<copy T>(ls: list<T>) : nonempty_list(ls) -> T {\n+fn safe_head<T: copy>(ls: list<T>) : nonempty_list(ls) -> T {\n     check is_not_empty(ls);\n     ret head(ls)\n }"}, {"sha": "ba8b4bb57236d7beddbfab94d157ec9a71ad43ef", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,4 +1,4 @@\n-fn f<copy T>(t: T) -> T {\n+fn f<T: copy>(t: T) -> T {\n     let t1 = t;\n     t1\n }"}, {"sha": "f8fd6f62c2654ff7e3db40749ea2cdeefb856fae", "filename": "src/test/run-pass/unique-generic-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funique-generic-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funique-generic-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-generic-assign.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,6 +1,6 @@\n // Issue #976\n \n-fn f<copy T>(x: ~T) {\n+fn f<T: copy>(x: ~T) {\n     let _x2 = x;\n }\n fn main() { }"}, {"sha": "4600081e45a9154580b9b97d1e7c70640933fa8f", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,10 +1,10 @@\n fn sendable() {\n \n-    fn f<send T>(i: T, j: T) {\n+    fn f<T: send>(i: T, j: T) {\n         assert i == j;\n     }\n \n-    fn g<send T>(i: T, j: T) {\n+    fn g<T: send>(i: T, j: T) {\n         assert i != j;\n     }\n \n@@ -18,11 +18,11 @@ fn sendable() {\n \n fn copyable() {\n \n-    fn f<copy T>(i: T, j: T) {\n+    fn f<T: copy>(i: T, j: T) {\n         assert i == j;\n     }\n \n-    fn g<copy T>(i: T, j: T) {\n+    fn g<T: copy>(i: T, j: T) {\n         assert i != j;\n     }\n "}, {"sha": "bf6b7638eacfe51f2c67314c5f58970eb219b1b3", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn push<copy T>(&v: [const T], t: T) { v += [t]; }\n+fn push<T: copy>(&v: [const T], t: T) { v += [t]; }\n \n fn main() { let v = [1, 2, 3]; push(v, 1); }"}, {"sha": "ef763131a414d253947ae1095702131af07d0c70", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -81,7 +81,7 @@ fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n \n type eqfn<T> = fn@(T, T) -> bool;\n \n-fn test_parameterized<copy T>(e: eqfn<T>, a: T, b: T, c: T, d: T) {\n+fn test_parameterized<T: copy>(e: eqfn<T>, a: T, b: T, c: T, d: T) {\n     let deq: deque::t<T> = deque::create::<T>();\n     assert (deq.size() == 0u);\n     deq.add_front(a);"}, {"sha": "3a08606f47ec890dabf2b0c472636c6625e7ab90", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae1590af034755b5cb1e1e71f2240a710299a2/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=60ae1590af034755b5cb1e1e71f2240a710299a2", "patch": "@@ -70,7 +70,7 @@ fn test_join_convenient() {\n #[ignore]\n fn spawn_polymorphic() {\n     // FIXME #1038: Can't spawn palymorphic functions\n-    /*fn foo<send T>(x: T) { log(error, x); }\n+    /*fn foo<T: send>(x: T) { log(error, x); }\n \n     task::spawn(true, foo);\n     task::spawn(42, foo);*/"}]}