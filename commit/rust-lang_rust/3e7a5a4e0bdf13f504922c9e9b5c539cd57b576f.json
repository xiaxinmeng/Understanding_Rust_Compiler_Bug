{"sha": "3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlN2E1YTRlMGJkZjEzZjUwNDkyMmM5ZTliNWM1MzljZDU3YjU3NmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-27T22:19:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-27T22:33:49Z"}, "message": "handle diverging functions forwarding their return place", "tree": {"sha": "6aa8df830c92ee1e98db63251c72fcf1ba330bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aa8df830c92ee1e98db63251c72fcf1ba330bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f", "html_url": "https://github.com/rust-lang/rust/commit/3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e69e4f4234beb4f12cc76dcc53e2cc4247a9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e69e4f4234beb4f12cc76dcc53e2cc4247a9be", "html_url": "https://github.com/rust-lang/rust/commit/04e69e4f4234beb4f12cc76dcc53e2cc4247a9be"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "c03d1da6777583fde1969802e9918cde6a9e52eb", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3e7a5a4e0bdf13f504922c9e9b5c539cd57b576f", "patch": "@@ -651,20 +651,21 @@ where\n         use rustc::mir::PlaceBase;\n \n         let mut place_ty = match &place.base {\n-            PlaceBase::Local(mir::RETURN_PLACE) => match self.frame().return_place {\n-                Some(return_place) => {\n-                    // We use our layout to verify our assumption; caller will validate\n-                    // their layout on return.\n-                    PlaceTy {\n-                        place: *return_place,\n-                        layout: self.layout_of(\n-                            self.subst_from_frame_and_normalize_erasing_regions(\n-                                self.frame().body.return_ty()\n-                            )\n-                        )?,\n-                    }\n+            PlaceBase::Local(mir::RETURN_PLACE) => {\n+                // `return_place` has the *caller* layout, but we want to use our\n+                // `layout to verify our assumption. The caller will validate\n+                // their layout on return.\n+                PlaceTy {\n+                    place: match self.frame().return_place {\n+                        Some(p) => *p,\n+                        None => Place::null(&*self),\n+                    },\n+                    layout: self.layout_of(\n+                        self.subst_from_frame_and_normalize_erasing_regions(\n+                            self.frame().body.return_ty()\n+                        )\n+                    )?,\n                 }\n-                None => throw_unsup!(InvalidNullPointerUsage),\n             },\n             PlaceBase::Local(local) => PlaceTy {\n                 // This works even for dead/uninitialized locals; we check further when writing\n@@ -791,8 +792,8 @@ where\n         // to handle padding properly, which is only correct if we never look at this data with the\n         // wrong type.\n \n-        let ptr = match self.check_mplace_access(dest, None)\n-            .expect(\"places should be checked on creation\")\n+        // Invalid places are a thing: the return place of a diverging function\n+        let ptr = match self.check_mplace_access(dest, None)?\n         {\n             Some(ptr) => ptr,\n             None => return Ok(()), // zero-sized access"}]}