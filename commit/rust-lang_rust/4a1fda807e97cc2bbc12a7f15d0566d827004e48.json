{"sha": "4a1fda807e97cc2bbc12a7f15d0566d827004e48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWZkYTgwN2U5N2NjMmJiYzEyYTdmMTVkMDU2NmQ4MjcwMDRlNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-22T17:56:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-22T17:56:26Z"}, "message": "Auto merge of #27565 - TimNN:dead-visit-type-in-path, r=nrc\n\nFixes #23808, passes `make check-stage1` `run-pass` and `run-fail` locally.", "tree": {"sha": "1cd4e69dae0133714a7bd8d16b50b0ab28192c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd4e69dae0133714a7bd8d16b50b0ab28192c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1fda807e97cc2bbc12a7f15d0566d827004e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1fda807e97cc2bbc12a7f15d0566d827004e48", "html_url": "https://github.com/rust-lang/rust/commit/4a1fda807e97cc2bbc12a7f15d0566d827004e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1fda807e97cc2bbc12a7f15d0566d827004e48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258f3030ab62d35f568a8f32f65da8990c568dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/258f3030ab62d35f568a8f32f65da8990c568dbd", "html_url": "https://github.com/rust-lang/rust/commit/258f3030ab62d35f568a8f32f65da8990c568dbd"}, {"sha": "2d4e07edb5007fc8f230bde5c38f8e538de433cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4e07edb5007fc8f230bde5c38f8e538de433cb", "html_url": "https://github.com/rust-lang/rust/commit/2d4e07edb5007fc8f230bde5c38f8e538de433cb"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "5b7a698eec0add4777486f0665171f04b1812795", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a1fda807e97cc2bbc12a7f15d0566d827004e48/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1fda807e97cc2bbc12a7f15d0566d827004e48/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=4a1fda807e97cc2bbc12a7f15d0566d827004e48", "patch": "@@ -73,6 +73,16 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) {\n+        use middle::ty::TypeVariants::{TyEnum, TyStruct};\n+\n+        // If `bar` is a trait item, make sure to mark Foo as alive in `Foo::bar`\n+        self.tcx.tables.borrow().item_substs.get(id)\n+            .and_then(|substs| substs.substs.self_ty())\n+            .map(|ty| match ty.sty {\n+                TyEnum(tyid, _) | TyStruct(tyid, _) => self.check_def_id(tyid.did),\n+                _ => (),\n+            });\n+\n         self.tcx.def_map.borrow().get(id).map(|def| {\n             match def.full_def() {\n                 def::DefConst(_) | def::DefAssociatedConst(..) => {"}, {"sha": "0302b11fdbb7bb765ed1f5a14d0b82b9bfdb2596", "filename": "src/test/run-pass/issue-23808.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4a1fda807e97cc2bbc12a7f15d0566d827004e48/src%2Ftest%2Frun-pass%2Fissue-23808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1fda807e97cc2bbc12a7f15d0566d827004e48/src%2Ftest%2Frun-pass%2Fissue-23808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23808.rs?ref=4a1fda807e97cc2bbc12a7f15d0566d827004e48", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+#![deny(dead_code)]\n+\n+// use different types / traits to test all combinations\n+\n+trait Const {\n+    const C: ();\n+}\n+\n+trait StaticFn {\n+    fn sfn();\n+}\n+\n+struct ConstStruct;\n+struct StaticFnStruct;\n+\n+enum ConstEnum {}\n+enum StaticFnEnum {}\n+\n+struct AliasedConstStruct;\n+struct AliasedStaticFnStruct;\n+\n+enum AliasedConstEnum {}\n+enum AliasedStaticFnEnum {}\n+\n+type AliasConstStruct    = AliasedConstStruct;\n+type AliasStaticFnStruct = AliasedStaticFnStruct;\n+type AliasConstEnum      = AliasedConstEnum;\n+type AliasStaticFnEnum   = AliasedStaticFnEnum;\n+\n+macro_rules! impl_Const {($($T:ident),*) => {$(\n+    impl Const for $T {\n+        const C: () = ();\n+    }\n+)*}}\n+\n+macro_rules! impl_StaticFn {($($T:ident),*) => {$(\n+    impl StaticFn for $T {\n+        fn sfn() {}\n+    }\n+)*}}\n+\n+impl_Const!(ConstStruct, ConstEnum, AliasedConstStruct, AliasedConstEnum);\n+impl_StaticFn!(StaticFnStruct, StaticFnEnum, AliasedStaticFnStruct, AliasedStaticFnEnum);\n+\n+fn main() {\n+    let _ = ConstStruct::C;\n+    let _ = ConstEnum::C;\n+\n+    StaticFnStruct::sfn();\n+    StaticFnEnum::sfn();\n+\n+    let _ = AliasConstStruct::C;\n+    let _ = AliasConstEnum::C;\n+\n+    AliasStaticFnStruct::sfn();\n+    AliasStaticFnEnum::sfn();\n+}"}]}