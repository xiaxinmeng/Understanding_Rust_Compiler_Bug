{"sha": "86b9f69622badf863df71993e8b1e3468cf92eeb", "node_id": "C_kwDOAAsO6NoAKDg2YjlmNjk2MjJiYWRmODYzZGY3MTk5M2U4YjFlMzQ2OGNmOTJlZWI", "commit": {"author": {"name": "Jorge Leitao", "email": "jorgecarleitao@gmail.com", "date": "2022-03-10T23:12:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-10T23:12:40Z"}, "message": "rust-lang/portable-simd#260: Add `.min` and `.max` for integers", "tree": {"sha": "507a97a9e101d8a7425af5c2739ad76414bd583d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/507a97a9e101d8a7425af5c2739ad76414bd583d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b9f69622badf863df71993e8b1e3468cf92eeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKoXoCRBK7hj4Ov3rIwAAlXIIACUqT/WKZUVc3mUum8fBo9+G\nmZ7hgcmVtAB12WXGPAvrUABJvblLt/pWLgEIdJjmo/i00Tpq5u/OAzYv0uCRkzoI\nIe8U3DWJCx0jIamUkFSX3VAJbi2pGBS8j7LaPOBtbpxDptqPmECce0SIF0bK8MC9\nwp2iz2AaNIU9G74ZOWTRCcFOb3G/U4Rku18iXEEEwD2f0LmwbqWFpM8WvkZilAhg\n0Uv5YO+ukWoOongWrQEgc+ztNSnmyLP5zrwUMg+ApA9c+3cmt0WAYfaHnhIOhsHV\nE1QxmoyCYs3UHlwgVVvMt++5/u7x8F24Zeg7L5AQM4xQU57mxHLM4/9t0qaAnEI=\n=W7+c\n-----END PGP SIGNATURE-----\n", "payload": "tree 507a97a9e101d8a7425af5c2739ad76414bd583d\nparent 89bc660d21de48cc759f3aab9fd781bf5441c657\nauthor Jorge Leitao <jorgecarleitao@gmail.com> 1646953960 +0100\ncommitter GitHub <noreply@github.com> 1646953960 -0800\n\nrust-lang/portable-simd#260: Add `.min` and `.max` for integers\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b9f69622badf863df71993e8b1e3468cf92eeb", "html_url": "https://github.com/rust-lang/rust/commit/86b9f69622badf863df71993e8b1e3468cf92eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b9f69622badf863df71993e8b1e3468cf92eeb/comments", "author": {"login": "jorgecarleitao", "id": 2772607, "node_id": "MDQ6VXNlcjI3NzI2MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2772607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorgecarleitao", "html_url": "https://github.com/jorgecarleitao", "followers_url": "https://api.github.com/users/jorgecarleitao/followers", "following_url": "https://api.github.com/users/jorgecarleitao/following{/other_user}", "gists_url": "https://api.github.com/users/jorgecarleitao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorgecarleitao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorgecarleitao/subscriptions", "organizations_url": "https://api.github.com/users/jorgecarleitao/orgs", "repos_url": "https://api.github.com/users/jorgecarleitao/repos", "events_url": "https://api.github.com/users/jorgecarleitao/events{/privacy}", "received_events_url": "https://api.github.com/users/jorgecarleitao/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89bc660d21de48cc759f3aab9fd781bf5441c657", "url": "https://api.github.com/repos/rust-lang/rust/commits/89bc660d21de48cc759f3aab9fd781bf5441c657", "html_url": "https://github.com/rust-lang/rust/commit/89bc660d21de48cc759f3aab9fd781bf5441c657"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "88270a9b7e99283882a409ddfb85fef56450bb88", "filename": "crates/core_simd/src/comparisons.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/86b9f69622badf863df71993e8b1e3468cf92eeb/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b9f69622badf863df71993e8b1e3468cf92eeb/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs?ref=86b9f69622badf863df71993e8b1e3468cf92eeb", "patch": "@@ -66,3 +66,37 @@ where\n         unsafe { Mask::from_int_unchecked(intrinsics::simd_ge(self, other)) }\n     }\n }\n+\n+macro_rules! impl_min_max_vector {\n+    { $type:ty } => {\n+        impl<const LANES: usize> Simd<$type, LANES>\n+        where\n+            LaneCount<LANES>: SupportedLaneCount,\n+        {\n+            /// Returns the lane-wise minimum with other\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn min(self, other: Self) -> Self {\n+                self.lanes_gt(other).select(other, self)\n+            }\n+\n+            /// Returns the lane-wise maximum with other\n+            #[must_use = \"method returns a new vector and does not mutate the original value\"]\n+            #[inline]\n+            pub fn max(self, other: Self) -> Self {\n+                self.lanes_lt(other).select(other, self)\n+            }\n+        }\n+    }\n+}\n+\n+impl_min_max_vector!(i8);\n+impl_min_max_vector!(i16);\n+impl_min_max_vector!(i32);\n+impl_min_max_vector!(i64);\n+impl_min_max_vector!(isize);\n+impl_min_max_vector!(u8);\n+impl_min_max_vector!(u16);\n+impl_min_max_vector!(u32);\n+impl_min_max_vector!(u64);\n+impl_min_max_vector!(usize);"}, {"sha": "cd6cadc2d5eca1dfe1ccc9718ba4aaef976fd93b", "filename": "crates/core_simd/tests/i16_ops.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86b9f69622badf863df71993e8b1e3468cf92eeb/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b9f69622badf863df71993e8b1e3468cf92eeb/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs?ref=86b9f69622badf863df71993e8b1e3468cf92eeb", "patch": "@@ -1,5 +1,20 @@\n #![feature(portable_simd)]\n+use core_simd::i16x2;\n \n #[macro_use]\n mod ops_macros;\n impl_signed_tests! { i16 }\n+\n+#[test]\n+fn max_is_not_lexicographic() {\n+    let a = i16x2::splat(10);\n+    let b = i16x2::from_array([-4, 12]);\n+    assert_eq!(a.max(b), i16x2::from_array([10, 12]));\n+}\n+\n+#[test]\n+fn min_is_not_lexicographic() {\n+    let a = i16x2::splat(10);\n+    let b = i16x2::from_array([12, -4]);\n+    assert_eq!(a.min(b), i16x2::from_array([10, -4]));\n+}"}, {"sha": "96da8c1b8dc60520efb167c85e84a9d8e3e0c586", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/86b9f69622badf863df71993e8b1e3468cf92eeb/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b9f69622badf863df71993e8b1e3468cf92eeb/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=86b9f69622badf863df71993e8b1e3468cf92eeb", "patch": "@@ -222,6 +222,23 @@ macro_rules! impl_signed_tests {\n                     assert_eq!(a % b, Vector::<LANES>::splat(0));\n                 }\n \n+                fn min<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(Scalar::MIN);\n+                    let b = Vector::<LANES>::splat(0);\n+                    assert_eq!(a.min(b), a);\n+                    let a = Vector::<LANES>::splat(Scalar::MAX);\n+                    let b = Vector::<LANES>::splat(0);\n+                    assert_eq!(a.min(b), b);\n+                }\n+\n+                fn max<const LANES: usize>() {\n+                    let a = Vector::<LANES>::splat(Scalar::MIN);\n+                    let b = Vector::<LANES>::splat(0);\n+                    assert_eq!(a.max(b), b);\n+                    let a = Vector::<LANES>::splat(Scalar::MAX);\n+                    let b = Vector::<LANES>::splat(0);\n+                    assert_eq!(a.max(b), a);\n+                }\n             }\n \n             test_helpers::test_lanes_panic! {"}]}