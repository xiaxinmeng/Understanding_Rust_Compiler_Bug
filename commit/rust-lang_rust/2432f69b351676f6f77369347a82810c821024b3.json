{"sha": "2432f69b351676f6f77369347a82810c821024b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MzJmNjliMzUxNjc2ZjZmNzczNjkzNDdhODI4MTBjODIxMDI0YjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-22T17:01:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-22T17:01:59Z"}, "message": "ICH: Make InlineAsm hashes stable.", "tree": {"sha": "148100cd641ae339415b45a66d07ea9df355ed52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148100cd641ae339415b45a66d07ea9df355ed52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2432f69b351676f6f77369347a82810c821024b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2432f69b351676f6f77369347a82810c821024b3", "html_url": "https://github.com/rust-lang/rust/commit/2432f69b351676f6f77369347a82810c821024b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2432f69b351676f6f77369347a82810c821024b3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a", "html_url": "https://github.com/rust-lang/rust/commit/94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "9d5277af3383ee63178568de4024ad02eeeb0566", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2432f69b351676f6f77369347a82810c821024b3/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2432f69b351676f6f77369347a82810c821024b3/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=2432f69b351676f6f77369347a82810c821024b3", "patch": "@@ -28,7 +28,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv;\n-use std::hash::Hash;\n+use std::hash::{Hash, Hasher};\n \n use super::def_path_hash::DefPathHashes;\n use super::caching_codemap_view::CachingCodemapView;\n@@ -265,7 +265,7 @@ enum SawExprComponent<'a> {\n     SawExprPath,\n     SawExprAddrOf(hir::Mutability),\n     SawExprRet,\n-    SawExprInlineAsm(&'a hir::InlineAsm),\n+    SawExprInlineAsm(StableInlineAsm<'a>),\n     SawExprStruct,\n     SawExprRepeat,\n }\n@@ -341,7 +341,7 @@ fn saw_expr<'a>(node: &'a Expr_,\n         ExprBreak(label, _)      => (SawExprBreak(label.map(|l| l.name.as_str())), false),\n         ExprAgain(label)         => (SawExprAgain(label.map(|l| l.name.as_str())), false),\n         ExprRet(..)              => (SawExprRet, false),\n-        ExprInlineAsm(ref a,..)  => (SawExprInlineAsm(a), false),\n+        ExprInlineAsm(ref a,..)  => (SawExprInlineAsm(StableInlineAsm(a)), false),\n         ExprStruct(..)           => (SawExprStruct, false),\n         ExprRepeat(..)           => (SawExprRepeat, false),\n     }\n@@ -492,6 +492,46 @@ enum SawSpanExpnKind {\n     SomeExpansion,\n }\n \n+/// A wrapper that provides a stable Hash implementation.\n+struct StableInlineAsm<'a>(&'a InlineAsm);\n+\n+impl<'a> Hash for StableInlineAsm<'a> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let InlineAsm {\n+            asm,\n+            asm_str_style,\n+            ref outputs,\n+            ref inputs,\n+            ref clobbers,\n+            volatile,\n+            alignstack,\n+            dialect,\n+            expn_id: _, // This is used for error reporting\n+        } = *self.0;\n+\n+        asm.as_str().hash(state);\n+        asm_str_style.hash(state);\n+        outputs.len().hash(state);\n+        for output in outputs {\n+            let InlineAsmOutput { constraint, is_rw, is_indirect } = *output;\n+            constraint.as_str().hash(state);\n+            is_rw.hash(state);\n+            is_indirect.hash(state);\n+        }\n+        inputs.len().hash(state);\n+        for input in inputs {\n+            input.as_str().hash(state);\n+        }\n+        clobbers.len().hash(state);\n+        for clobber in clobbers {\n+            clobber.as_str().hash(state);\n+        }\n+        volatile.hash(state);\n+        alignstack.hash(state);\n+        dialect.hash(state);\n+    }\n+}\n+\n macro_rules! hash_attrs {\n     ($visitor:expr, $attrs:expr) => ({\n         let attrs = $attrs;"}]}